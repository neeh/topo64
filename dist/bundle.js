(function () {
	'use strict';

	/** @returns {void} */
	function noop() {}

	function run(fn) {
		return fn();
	}

	function blank_object() {
		return Object.create(null);
	}

	/**
	 * @param {Function[]} fns
	 * @returns {void}
	 */
	function run_all(fns) {
		fns.forEach(run);
	}

	/**
	 * @param {any} thing
	 * @returns {thing is Function}
	 */
	function is_function(thing) {
		return typeof thing === 'function';
	}

	/** @returns {boolean} */
	function safe_not_equal(a, b) {
		return a != a ? b == b : a !== b || (a && typeof a === 'object') || typeof a === 'function';
	}

	/** @returns {boolean} */
	function is_empty(obj) {
		return Object.keys(obj).length === 0;
	}

	function subscribe(store, ...callbacks) {
		if (store == null) {
			for (const callback of callbacks) {
				callback(undefined);
			}
			return noop;
		}
		const unsub = store.subscribe(...callbacks);
		return unsub.unsubscribe ? () => unsub.unsubscribe() : unsub;
	}

	/** @returns {void} */
	function component_subscribe(component, store, callback) {
		component.$$.on_destroy.push(subscribe(store, callback));
	}

	function null_to_empty(value) {
		return value == null ? '' : value;
	}

	/**
	 * @param {Node} target
	 * @param {Node} node
	 * @returns {void}
	 */
	function append(target, node) {
		target.appendChild(node);
	}

	/**
	 * @param {Node} target
	 * @param {Node} node
	 * @param {Node} [anchor]
	 * @returns {void}
	 */
	function insert(target, node, anchor) {
		target.insertBefore(node, anchor || null);
	}

	/**
	 * @param {Node} node
	 * @returns {void}
	 */
	function detach(node) {
		if (node.parentNode) {
			node.parentNode.removeChild(node);
		}
	}

	/**
	 * @returns {void} */
	function destroy_each(iterations, detaching) {
		for (let i = 0; i < iterations.length; i += 1) {
			if (iterations[i]) iterations[i].d(detaching);
		}
	}

	/**
	 * @template {keyof HTMLElementTagNameMap} K
	 * @param {K} name
	 * @returns {HTMLElementTagNameMap[K]}
	 */
	function element(name) {
		return document.createElement(name);
	}

	/**
	 * @template {keyof SVGElementTagNameMap} K
	 * @param {K} name
	 * @returns {SVGElement}
	 */
	function svg_element(name) {
		return document.createElementNS('http://www.w3.org/2000/svg', name);
	}

	/**
	 * @param {string} data
	 * @returns {Text}
	 */
	function text(data) {
		return document.createTextNode(data);
	}

	/**
	 * @returns {Text} */
	function space() {
		return text(' ');
	}

	/**
	 * @returns {Text} */
	function empty() {
		return text('');
	}

	/**
	 * @param {EventTarget} node
	 * @param {string} event
	 * @param {EventListenerOrEventListenerObject} handler
	 * @param {boolean | AddEventListenerOptions | EventListenerOptions} [options]
	 * @returns {() => void}
	 */
	function listen(node, event, handler, options) {
		node.addEventListener(event, handler, options);
		return () => node.removeEventListener(event, handler, options);
	}

	/**
	 * @param {Element} node
	 * @param {string} attribute
	 * @param {string} [value]
	 * @returns {void}
	 */
	function attr(node, attribute, value) {
		if (value == null) node.removeAttribute(attribute);
		else if (node.getAttribute(attribute) !== value) node.setAttribute(attribute, value);
	}

	/**
	 * @param {Element} element
	 * @returns {ChildNode[]}
	 */
	function children(element) {
		return Array.from(element.childNodes);
	}

	/**
	 * @param {Text} text
	 * @param {unknown} data
	 * @returns {void}
	 */
	function set_data(text, data) {
		data = '' + data;
		if (text.data === data) return;
		text.data = /** @type {string} */ (data);
	}

	/**
	 * @typedef {Node & {
	 * 	claim_order?: number;
	 * 	hydrate_init?: true;
	 * 	actual_end_child?: NodeEx;
	 * 	childNodes: NodeListOf<NodeEx>;
	 * }} NodeEx
	 */

	/** @typedef {ChildNode & NodeEx} ChildNodeEx */

	/** @typedef {NodeEx & { claim_order: number }} NodeEx2 */

	/**
	 * @typedef {ChildNodeEx[] & {
	 * 	claim_info?: {
	 * 		last_index: number;
	 * 		total_claimed: number;
	 * 	};
	 * }} ChildNodeArray
	 */

	let current_component;

	/** @returns {void} */
	function set_current_component(component) {
		current_component = component;
	}

	function get_current_component() {
		if (!current_component) throw new Error('Function called outside component initialization');
		return current_component;
	}

	/**
	 * The `onMount` function schedules a callback to run as soon as the component has been mounted to the DOM.
	 * It must be called during the component's initialisation (but doesn't need to live *inside* the component;
	 * it can be called from an external module).
	 *
	 * If a function is returned _synchronously_ from `onMount`, it will be called when the component is unmounted.
	 *
	 * `onMount` does not run inside a [server-side component](/docs#run-time-server-side-component-api).
	 *
	 * https://svelte.dev/docs/svelte#onmount
	 * @template T
	 * @param {() => import('./private.js').NotFunction<T> | Promise<import('./private.js').NotFunction<T>> | (() => any)} fn
	 * @returns {void}
	 */
	function onMount(fn) {
		get_current_component().$$.on_mount.push(fn);
	}

	/**
	 * Schedules a callback to run immediately before the component is unmounted.
	 *
	 * Out of `onMount`, `beforeUpdate`, `afterUpdate` and `onDestroy`, this is the
	 * only one that runs inside a server-side component.
	 *
	 * https://svelte.dev/docs/svelte#ondestroy
	 * @param {() => any} fn
	 * @returns {void}
	 */
	function onDestroy(fn) {
		get_current_component().$$.on_destroy.push(fn);
	}

	const dirty_components = [];
	const binding_callbacks = [];

	let render_callbacks = [];

	const flush_callbacks = [];

	const resolved_promise = /* @__PURE__ */ Promise.resolve();

	let update_scheduled = false;

	/** @returns {void} */
	function schedule_update() {
		if (!update_scheduled) {
			update_scheduled = true;
			resolved_promise.then(flush);
		}
	}

	/** @returns {Promise<void>} */
	function tick() {
		schedule_update();
		return resolved_promise;
	}

	/** @returns {void} */
	function add_render_callback(fn) {
		render_callbacks.push(fn);
	}

	// flush() calls callbacks in this order:
	// 1. All beforeUpdate callbacks, in order: parents before children
	// 2. All bind:this callbacks, in reverse order: children before parents.
	// 3. All afterUpdate callbacks, in order: parents before children. EXCEPT
	//    for afterUpdates called during the initial onMount, which are called in
	//    reverse order: children before parents.
	// Since callbacks might update component values, which could trigger another
	// call to flush(), the following steps guard against this:
	// 1. During beforeUpdate, any updated components will be added to the
	//    dirty_components array and will cause a reentrant call to flush(). Because
	//    the flush index is kept outside the function, the reentrant call will pick
	//    up where the earlier call left off and go through all dirty components. The
	//    current_component value is saved and restored so that the reentrant call will
	//    not interfere with the "parent" flush() call.
	// 2. bind:this callbacks cannot trigger new flush() calls.
	// 3. During afterUpdate, any updated components will NOT have their afterUpdate
	//    callback called a second time; the seen_callbacks set, outside the flush()
	//    function, guarantees this behavior.
	const seen_callbacks = new Set();

	let flushidx = 0; // Do *not* move this inside the flush() function

	/** @returns {void} */
	function flush() {
		// Do not reenter flush while dirty components are updated, as this can
		// result in an infinite loop. Instead, let the inner flush handle it.
		// Reentrancy is ok afterwards for bindings etc.
		if (flushidx !== 0) {
			return;
		}
		const saved_component = current_component;
		do {
			// first, call beforeUpdate functions
			// and update components
			try {
				while (flushidx < dirty_components.length) {
					const component = dirty_components[flushidx];
					flushidx++;
					set_current_component(component);
					update(component.$$);
				}
			} catch (e) {
				// reset dirty state to not end up in a deadlocked state and then rethrow
				dirty_components.length = 0;
				flushidx = 0;
				throw e;
			}
			set_current_component(null);
			dirty_components.length = 0;
			flushidx = 0;
			while (binding_callbacks.length) binding_callbacks.pop()();
			// then, once components are updated, call
			// afterUpdate functions. This may cause
			// subsequent updates...
			for (let i = 0; i < render_callbacks.length; i += 1) {
				const callback = render_callbacks[i];
				if (!seen_callbacks.has(callback)) {
					// ...so guard against infinite loops
					seen_callbacks.add(callback);
					callback();
				}
			}
			render_callbacks.length = 0;
		} while (dirty_components.length);
		while (flush_callbacks.length) {
			flush_callbacks.pop()();
		}
		update_scheduled = false;
		seen_callbacks.clear();
		set_current_component(saved_component);
	}

	/** @returns {void} */
	function update($$) {
		if ($$.fragment !== null) {
			$$.update();
			run_all($$.before_update);
			const dirty = $$.dirty;
			$$.dirty = [-1];
			$$.fragment && $$.fragment.p($$.ctx, dirty);
			$$.after_update.forEach(add_render_callback);
		}
	}

	/**
	 * Useful for example to execute remaining `afterUpdate` callbacks before executing `destroy`.
	 * @param {Function[]} fns
	 * @returns {void}
	 */
	function flush_render_callbacks(fns) {
		const filtered = [];
		const targets = [];
		render_callbacks.forEach((c) => (fns.indexOf(c) === -1 ? filtered.push(c) : targets.push(c)));
		targets.forEach((c) => c());
		render_callbacks = filtered;
	}

	const outroing = new Set();

	/**
	 * @type {Outro}
	 */
	let outros;

	/**
	 * @returns {void} */
	function group_outros() {
		outros = {
			r: 0,
			c: [],
			p: outros // parent group
		};
	}

	/**
	 * @returns {void} */
	function check_outros() {
		if (!outros.r) {
			run_all(outros.c);
		}
		outros = outros.p;
	}

	/**
	 * @param {import('./private.js').Fragment} block
	 * @param {0 | 1} [local]
	 * @returns {void}
	 */
	function transition_in(block, local) {
		if (block && block.i) {
			outroing.delete(block);
			block.i(local);
		}
	}

	/**
	 * @param {import('./private.js').Fragment} block
	 * @param {0 | 1} local
	 * @param {0 | 1} [detach]
	 * @param {() => void} [callback]
	 * @returns {void}
	 */
	function transition_out(block, local, detach, callback) {
		if (block && block.o) {
			if (outroing.has(block)) return;
			outroing.add(block);
			outros.c.push(() => {
				outroing.delete(block);
				if (callback) {
					if (detach) block.d(1);
					callback();
				}
			});
			block.o(local);
		} else if (callback) {
			callback();
		}
	}

	/** @typedef {1} INTRO */
	/** @typedef {0} OUTRO */
	/** @typedef {{ direction: 'in' | 'out' | 'both' }} TransitionOptions */
	/** @typedef {(node: Element, params: any, options: TransitionOptions) => import('../transition/public.js').TransitionConfig} TransitionFn */

	/**
	 * @typedef {Object} Outro
	 * @property {number} r
	 * @property {Function[]} c
	 * @property {Object} p
	 */

	/**
	 * @typedef {Object} PendingProgram
	 * @property {number} start
	 * @property {INTRO|OUTRO} b
	 * @property {Outro} [group]
	 */

	/**
	 * @typedef {Object} Program
	 * @property {number} a
	 * @property {INTRO|OUTRO} b
	 * @property {1|-1} d
	 * @property {number} duration
	 * @property {number} start
	 * @property {number} end
	 * @property {Outro} [group]
	 */

	// general each functions:

	function ensure_array_like(array_like_or_iterator) {
		return array_like_or_iterator?.length !== undefined
			? array_like_or_iterator
			: Array.from(array_like_or_iterator);
	}

	/** @returns {void} */
	function create_component(block) {
		block && block.c();
	}

	/** @returns {void} */
	function mount_component(component, target, anchor) {
		const { fragment, after_update } = component.$$;
		fragment && fragment.m(target, anchor);
		// onMount happens before the initial afterUpdate
		add_render_callback(() => {
			const new_on_destroy = component.$$.on_mount.map(run).filter(is_function);
			// if the component was destroyed immediately
			// it will update the `$$.on_destroy` reference to `null`.
			// the destructured on_destroy may still reference to the old array
			if (component.$$.on_destroy) {
				component.$$.on_destroy.push(...new_on_destroy);
			} else {
				// Edge case - component was destroyed immediately,
				// most likely as a result of a binding initialising
				run_all(new_on_destroy);
			}
			component.$$.on_mount = [];
		});
		after_update.forEach(add_render_callback);
	}

	/** @returns {void} */
	function destroy_component(component, detaching) {
		const $$ = component.$$;
		if ($$.fragment !== null) {
			flush_render_callbacks($$.after_update);
			run_all($$.on_destroy);
			$$.fragment && $$.fragment.d(detaching);
			// TODO null out other refs, including component.$$ (but need to
			// preserve final state?)
			$$.on_destroy = $$.fragment = null;
			$$.ctx = [];
		}
	}

	/** @returns {void} */
	function make_dirty(component, i) {
		if (component.$$.dirty[0] === -1) {
			dirty_components.push(component);
			schedule_update();
			component.$$.dirty.fill(0);
		}
		component.$$.dirty[(i / 31) | 0] |= 1 << i % 31;
	}

	// TODO: Document the other params
	/**
	 * @param {SvelteComponent} component
	 * @param {import('./public.js').ComponentConstructorOptions} options
	 *
	 * @param {import('./utils.js')['not_equal']} not_equal Used to compare props and state values.
	 * @param {(target: Element | ShadowRoot) => void} [append_styles] Function that appends styles to the DOM when the component is first initialised.
	 * This will be the `add_css` function from the compiled component.
	 *
	 * @returns {void}
	 */
	function init$1(
		component,
		options,
		instance,
		create_fragment,
		not_equal,
		props,
		append_styles = null,
		dirty = [-1]
	) {
		const parent_component = current_component;
		set_current_component(component);
		/** @type {import('./private.js').T$$} */
		const $$ = (component.$$ = {
			fragment: null,
			ctx: [],
			// state
			props,
			update: noop,
			not_equal,
			bound: blank_object(),
			// lifecycle
			on_mount: [],
			on_destroy: [],
			on_disconnect: [],
			before_update: [],
			after_update: [],
			context: new Map(options.context || (parent_component ? parent_component.$$.context : [])),
			// everything else
			callbacks: blank_object(),
			dirty,
			skip_bound: false,
			root: options.target || parent_component.$$.root
		});
		append_styles && append_styles($$.root);
		let ready = false;
		$$.ctx = instance
			? instance(component, options.props || {}, (i, ret, ...rest) => {
					const value = rest.length ? rest[0] : ret;
					if ($$.ctx && not_equal($$.ctx[i], ($$.ctx[i] = value))) {
						if (!$$.skip_bound && $$.bound[i]) $$.bound[i](value);
						if (ready) make_dirty(component, i);
					}
					return ret;
			  })
			: [];
		$$.update();
		ready = true;
		run_all($$.before_update);
		// `false` as a special case of no DOM component
		$$.fragment = create_fragment ? create_fragment($$.ctx) : false;
		if (options.target) {
			if (options.hydrate) {
				// TODO: what is the correct type here?
				// @ts-expect-error
				const nodes = children(options.target);
				$$.fragment && $$.fragment.l(nodes);
				nodes.forEach(detach);
			} else {
				// eslint-disable-next-line @typescript-eslint/no-non-null-assertion
				$$.fragment && $$.fragment.c();
			}
			if (options.intro) transition_in(component.$$.fragment);
			mount_component(component, options.target, options.anchor);
			flush();
		}
		set_current_component(parent_component);
	}

	/**
	 * Base class for Svelte components. Used when dev=false.
	 *
	 * @template {Record<string, any>} [Props=any]
	 * @template {Record<string, any>} [Events=any]
	 */
	class SvelteComponent {
		/**
		 * ### PRIVATE API
		 *
		 * Do not use, may change at any time
		 *
		 * @type {any}
		 */
		$$ = undefined;
		/**
		 * ### PRIVATE API
		 *
		 * Do not use, may change at any time
		 *
		 * @type {any}
		 */
		$$set = undefined;

		/** @returns {void} */
		$destroy() {
			destroy_component(this, 1);
			this.$destroy = noop;
		}

		/**
		 * @template {Extract<keyof Events, string>} K
		 * @param {K} type
		 * @param {((e: Events[K]) => void) | null | undefined} callback
		 * @returns {() => void}
		 */
		$on(type, callback) {
			if (!is_function(callback)) {
				return noop;
			}
			const callbacks = this.$$.callbacks[type] || (this.$$.callbacks[type] = []);
			callbacks.push(callback);
			return () => {
				const index = callbacks.indexOf(callback);
				if (index !== -1) callbacks.splice(index, 1);
			};
		}

		/**
		 * @param {Partial<Props>} props
		 * @returns {void}
		 */
		$set(props) {
			if (this.$$set && !is_empty(props)) {
				this.$$.skip_bound = true;
				this.$$set(props);
				this.$$.skip_bound = false;
			}
		}
	}

	/**
	 * @typedef {Object} CustomElementPropDefinition
	 * @property {string} [attribute]
	 * @property {boolean} [reflect]
	 * @property {'String'|'Boolean'|'Number'|'Array'|'Object'} [type]
	 */

	// generated during release, do not modify

	const PUBLIC_VERSION = '4';

	if (typeof window !== 'undefined')
		// @ts-ignore
		(window.__svelte || (window.__svelte = { v: new Set() })).v.add(PUBLIC_VERSION);

	function bbh_seg7_collision_level() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x62E);
	  COL_VERTEX(102, 2355, -497);
	  COL_VERTEX(102, 1741, 116);
	  COL_VERTEX(102, 2355, 116);
	  COL_VERTEX(102, 1741, -497);
	  COL_VERTEX(205, 2355, 116);
	  COL_VERTEX(205, 1741, -497);
	  COL_VERTEX(205, 2355, -497);
	  COL_VERTEX(205, 1741, 116);
	  COL_VERTEX(-1279, 614, -255);
	  COL_VERTEX(-1791, 102, -255);
	  COL_VERTEX(-1279, 102, -255);
	  COL_VERTEX(-1791, 614, -255);
	  COL_VERTEX(-1791, 614, -357);
	  COL_VERTEX(-1279, 614, -357);
	  COL_VERTEX(-1279, 102, -357);
	  COL_VERTEX(-1791, 102, -357);
	  COL_VERTEX(307, 0, 2867);
	  COL_VERTEX(1024, 0, 2867);
	  COL_VERTEX(410, 0, 2253);
	  COL_VERTEX(922, 0, 2253);
	  COL_VERTEX(1278, 0, 2423);
	  COL_VERTEX(1434, 0, 2150);
	  COL_VERTEX(922, 0, 2150);
	  COL_VERTEX(53, 0, 2423);
	  COL_VERTEX(410, 0, 2150);
	  COL_VERTEX(-101, 0, 2150);
	  COL_VERTEX(-479, -204, 2727);
	  COL_VERTEX(-225, -204, 3172);
	  COL_VERTEX(-1125, -204, 2662);
	  COL_VERTEX(1024, -204, 2867);
	  COL_VERTEX(307, -204, 2867);
	  COL_VERTEX(1557, -204, 3172);
	  COL_VERTEX(-1945, -204, 2662);
	  COL_VERTEX(-1901, -204, 4545);
	  COL_VERTEX(-1503, -204, 5088);
	  COL_VERTEX(3482, -204, 6758);
	  COL_VERTEX(2458, -204, 2662);
	  COL_VERTEX(-2661, -204, 3929);
	  COL_VERTEX(-2354, -204, 2150);
	  COL_VERTEX(-716, -204, 2150);
	  COL_VERTEX(53, -204, 2423);
	  COL_VERTEX(2048, -204, 2150);
	  COL_VERTEX(1434, -204, 2150);
	  COL_VERTEX(3482, -204, -3993);
	  COL_VERTEX(-2354, -204, -1637);
	  COL_VERTEX(3277, -204, 2662);
	  COL_VERTEX(5530, -204, 4710);
	  COL_VERTEX(3686, -204, 2150);
	  COL_VERTEX(5530, -204, -1945);
	  COL_VERTEX(-4197, -204, -1945);
	  COL_VERTEX(-4197, -204, 4710);
	  COL_VERTEX(512, 0, 2150);
	  COL_VERTEX(819, 0, 2099);
	  COL_VERTEX(-76, -2457, 4659);
	  COL_VERTEX(-76, -2457, 4608);
	  COL_VERTEX(-2661, -2457, 4074);
	  COL_VERTEX(-1986, -2457, 5427);
	  COL_VERTEX(-178, -2457, 4813);
	  COL_VERTEX(179, -2457, 4710);
	  COL_VERTEX(307, -2457, 4710);
	  COL_VERTEX(307, -2457, 5427);
	  COL_VERTEX(179, -2457, 4506);
	  COL_VERTEX(307, -2457, 2150);
	  COL_VERTEX(179, -2457, 2150);
	  COL_VERTEX(-178, -2457, 4506);
	  COL_VERTEX(-306, -2457, 2150);
	  COL_VERTEX(-306, -2457, 4608);
	  COL_VERTEX(-76, -2457, 2099);
	  COL_VERTEX(-76, -2457, 2048);
	  COL_VERTEX(-2764, -2457, 2048);
	  COL_VERTEX(-2764, -2457, 1536);
	  COL_VERTEX(-178, -2457, 2048);
	  COL_VERTEX(1126, -2457, 1536);
	  COL_VERTEX(179, -2457, 1946);
	  COL_VERTEX(3686, -2661, -1535);
	  COL_VERTEX(-2047, -2457, -613);
	  COL_VERTEX(-1535, -2457, -1125);
	  COL_VERTEX(-2047, -2457, 512);
	  COL_VERTEX(2150, -2457, 1126);
	  COL_VERTEX(1638, -2457, -1125);
	  COL_VERTEX(1638, -2457, 1024);
	  COL_VERTEX(2150, -2969, 1126);
	  COL_VERTEX(3686, -2661, 102);
	  COL_VERTEX(-2764, -2354, 1024);
	  COL_VERTEX(2099, 1741, 410);
	  COL_VERTEX(-716, 1741, 1345);
	  COL_VERTEX(2048, 1741, 1345);
	  COL_VERTEX(1946, 1741, 666);
	  COL_VERTEX(-716, 1741, -805);
	  COL_VERTEX(1946, 1741, 307);
	  COL_VERTEX(-204, 819, -204);
	  COL_VERTEX(512, 819, -306);
	  COL_VERTEX(-716, 819, -101);
	  COL_VERTEX(-204, 819, -511);
	  COL_VERTEX(-716, 819, -1125);
	  COL_VERTEX(0, 819, -101);
	  COL_VERTEX(1024, 819, -101);
	  COL_VERTEX(1024, 819, -1535);
	  COL_VERTEX(-306, 819, -1125);
	  COL_VERTEX(-306, 819, -1535);
	  COL_VERTEX(-204, 819, -1023);
	  COL_VERTEX(614, 819, -1023);
	  COL_VERTEX(-511, 819, -511);
	  COL_VERTEX(102, 819, -613);
	  COL_VERTEX(614, 819, -818);
	  COL_VERTEX(819, 819, -613);
	  COL_VERTEX(-716, 0, -101);
	  COL_VERTEX(-716, 0, -1535);
	  COL_VERTEX(256, 0, -101);
	  COL_VERTEX(1024, 0, -1535);
	  COL_VERTEX(1024, 0, -101);
	  COL_VERTEX(358, 0, 0);
	  COL_VERTEX(512, 0, -50);
	  COL_VERTEX(256, 819, -50);
	  COL_VERTEX(1792, 819, -204);
	  COL_VERTEX(1434, 819, -204);
	  COL_VERTEX(1126, 819, -101);
	  COL_VERTEX(1690, 819, -50);
	  COL_VERTEX(-2201, 0, 922);
	  COL_VERTEX(-2201, 0, 1024);
	  COL_VERTEX(-2252, 0, 1024);
	  COL_VERTEX(-1842, 0, 922);
	  COL_VERTEX(-818, 0, 0);
	  COL_VERTEX(-1381, 0, -1433);
	  COL_VERTEX(-1381, 0, -1535);
	  COL_VERTEX(-2252, 0, -1535);
	  COL_VERTEX(-101, 0, 1024);
	  COL_VERTEX(-204, 0, 819);
	  COL_VERTEX(-204, 0, 461);
	  COL_VERTEX(-101, 0, 717);
	  COL_VERTEX(-50, 0, 717);
	  COL_VERTEX(-1945, 0, 1075);
	  COL_VERTEX(-1637, 0, -1535);
	  COL_VERTEX(3584, 0, -306);
	  COL_VERTEX(3533, 0, 922);
	  COL_VERTEX(3174, 0, 1024);
	  COL_VERTEX(2662, 0, -306);
	  COL_VERTEX(2662, 0, 1024);
	  COL_VERTEX(2150, 0, -1228);
	  COL_VERTEX(1792, 0, -204);
	  COL_VERTEX(1434, 0, -101);
	  COL_VERTEX(1126, 0, -101);
	  COL_VERTEX(3277, 0, 1126);
	  COL_VERTEX(3430, 0, 1075);
	  COL_VERTEX(1690, 0, -50);
	  COL_VERTEX(1536, 0, 0);
	  COL_VERTEX(3584, 0, 1126);
	  COL_VERTEX(3584, 0, 2048);
	  COL_VERTEX(3533, 0, 1126);
	  COL_VERTEX(3533, 0, 1229);
	  COL_VERTEX(2560, 0, 1843);
	  COL_VERTEX(2253, 0, 1638);
	  COL_VERTEX(2253, 0, 1280);
	  COL_VERTEX(2560, 0, 1126);
	  COL_VERTEX(2244, 0, 2001);
	  COL_VERTEX(2150, 0, 1126);
	  COL_VERTEX(3490, 0, 2001);
	  COL_VERTEX(2970, 0, 2048);
	  COL_VERTEX(2604, 0, 2451);
	  COL_VERTEX(2048, 0, 1536);
	  COL_VERTEX(2099, 0, 1536);
	  COL_VERTEX(-50, 0, 1536);
	  COL_VERTEX(1946, 0, 1638);
	  COL_VERTEX(2048, 0, 2048);
	  COL_VERTEX(1434, 0, 102);
	  COL_VERTEX(614, 0, 0);
	  COL_VERTEX(102, 0, 461);
	  COL_VERTEX(1792, 0, 102);
	  COL_VERTEX(2048, 0, 0);
	  COL_VERTEX(256, 0, 102);
	  COL_VERTEX(0, 0, 1280);
	  COL_VERTEX(102, 0, 1280);
	  COL_VERTEX(0, 0, 1638);
	  COL_VERTEX(102, 0, 1638);
	  COL_VERTEX(0, 0, 2048);
	  COL_VERTEX(410, 0, 2048);
	  COL_VERTEX(922, 0, 1946);
	  COL_VERTEX(-2155, -204, 4291);
	  COL_VERTEX(1811, -204, 2727);
	  COL_VERTEX(-101, -204, 2150);
	  COL_VERTEX(1278, -204, 2423);
	  COL_VERTEX(3686, -204, -1637);
	  COL_VERTEX(-2149, -204, -3993);
	  COL_VERTEX(-2149, -204, 6758);
	  COL_VERTEX(-2661, -204, 6246);
	  COL_VERTEX(-3820, -204, 5088);
	  COL_VERTEX(819, 0, 2150);
	  COL_VERTEX(512, 0, 2099);
	  COL_VERTEX(512, 0, 2048);
	  COL_VERTEX(819, 0, 2048);
	  COL_VERTEX(77, -2457, 4710);
	  COL_VERTEX(77, -2457, 4659);
	  COL_VERTEX(-76, -2457, 4710);
	  COL_VERTEX(77, -2457, 4608);
	  COL_VERTEX(-3675, -2457, 5088);
	  COL_VERTEX(-2661, -2457, 6102);
	  COL_VERTEX(-2024, -2457, 4712);
	  COL_VERTEX(-178, -2457, 4710);
	  COL_VERTEX(179, -2457, 4813);
	  COL_VERTEX(307, -2457, 4608);
	  COL_VERTEX(179, -2457, 2253);
	  COL_VERTEX(-178, -2457, 2150);
	  COL_VERTEX(-178, -2457, 2253);
	  COL_VERTEX(-178, -2457, 4608);
	  COL_VERTEX(179, -2457, 4608);
	  COL_VERTEX(-76, -2457, 2150);
	  COL_VERTEX(77, -2457, 2150);
	  COL_VERTEX(77, -2457, 2099);
	  COL_VERTEX(77, -2457, 2048);
	  COL_VERTEX(-2354, -2457, 2560);
	  COL_VERTEX(-1433, -2457, 2560);
	  COL_VERTEX(-1023, -2457, 2048);
	  COL_VERTEX(-178, -2457, 1946);
	  COL_VERTEX(179, -2457, 2048);
	  COL_VERTEX(1638, -2457, 2048);
	  COL_VERTEX(1638, -2457, 1638);
	  COL_VERTEX(1638, -2661, -1535);
	  COL_VERTEX(1638, -2661, 102);
	  COL_VERTEX(-2764, -2457, -1535);
	  COL_VERTEX(1126, -2457, -1125);
	  COL_VERTEX(1638, -2457, -1535);
	  COL_VERTEX(-2764, -2457, 512);
	  COL_VERTEX(1638, -2457, -613);
	  COL_VERTEX(2150, -2457, -613);
	  COL_VERTEX(1638, -2969, 2048);
	  COL_VERTEX(1946, -2969, 2048);
	  COL_VERTEX(1638, -2969, 1638);
	  COL_VERTEX(2355, -2969, 2560);
	  COL_VERTEX(3277, -2969, 2560);
	  COL_VERTEX(3686, -2969, 2048);
	  COL_VERTEX(2150, -2661, 102);
	  COL_VERTEX(3686, -2969, 1126);
	  COL_VERTEX(-1535, -2354, 1536);
	  COL_VERTEX(-2047, -2354, 1024);
	  COL_VERTEX(-2764, -2354, 1536);
	  COL_VERTEX(2048, 1741, 563);
	  COL_VERTEX(2099, 1741, 563);
	  COL_VERTEX(2048, 1741, 410);
	  COL_VERTEX(2048, 1741, 666);
	  COL_VERTEX(2048, 1741, 307);
	  COL_VERTEX(2048, 1741, -805);
	  COL_VERTEX(0, 819, -204);
	  COL_VERTEX(-511, 819, -204);
	  COL_VERTEX(358, 819, -204);
	  COL_VERTEX(358, 819, -101);
	  COL_VERTEX(819, 819, -306);
	  COL_VERTEX(512, 819, -613);
	  COL_VERTEX(-306, 819, -921);
	  COL_VERTEX(-306, 819, -613);
	  COL_VERTEX(-204, 819, -1330);
	  COL_VERTEX(819, 819, -1330);
	  COL_VERTEX(102, 819, -921);
	  COL_VERTEX(819, 819, -818);
	  COL_VERTEX(256, 0, -204);
	  COL_VERTEX(614, 0, -101);
	  COL_VERTEX(614, 0, -204);
	  COL_VERTEX(512, 0, 0);
	  COL_VERTEX(358, 0, -50);
	  COL_VERTEX(358, 0, -101);
	  COL_VERTEX(512, 0, -101);
	  COL_VERTEX(102, 819, -101);
	  COL_VERTEX(102, 819, -50);
	  COL_VERTEX(256, 819, -101);
	  COL_VERTEX(1434, 819, -101);
	  COL_VERTEX(1792, 819, -101);
	  COL_VERTEX(1126, 819, -1535);
	  COL_VERTEX(3584, 819, -101);
	  COL_VERTEX(3584, 819, -1535);
	  COL_VERTEX(1536, 819, -101);
	  COL_VERTEX(1536, 819, -50);
	  COL_VERTEX(1690, 819, -101);
	  COL_VERTEX(-1740, 0, -1433);
	  COL_VERTEX(-101, 0, 0);
	  COL_VERTEX(-818, 0, -1535);
	  COL_VERTEX(-1740, 0, -1535);
	  COL_VERTEX(-1842, 0, 1024);
	  COL_VERTEX(-101, 0, 819);
	  COL_VERTEX(-101, 0, 461);
	  COL_VERTEX(-50, 0, 563);
	  COL_VERTEX(-101, 0, 563);
	  COL_VERTEX(0, 0, 563);
	  COL_VERTEX(0, 0, 717);
	  COL_VERTEX(-1945, 0, 1024);
	  COL_VERTEX(-2098, 0, 1024);
	  COL_VERTEX(-2098, 0, 1075);
	  COL_VERTEX(-1484, 0, -1586);
	  COL_VERTEX(-1637, 0, -1586);
	  COL_VERTEX(-1484, 0, -1535);
	  COL_VERTEX(3174, 0, 922);
	  COL_VERTEX(3533, 0, 1024);
	  COL_VERTEX(3584, 0, 1024);
	  COL_VERTEX(1126, 0, -1535);
	  COL_VERTEX(2150, 0, -101);
	  COL_VERTEX(1434, 0, -204);
	  COL_VERTEX(1792, 0, -101);
	  COL_VERTEX(3277, 0, -1228);
	  COL_VERTEX(3277, 0, -1535);
	  COL_VERTEX(3277, 0, 1075);
	  COL_VERTEX(3430, 0, 1126);
	  COL_VERTEX(3277, 0, 1024);
	  COL_VERTEX(3430, 0, 1024);
	  COL_VERTEX(1690, 0, -101);
	  COL_VERTEX(1536, 0, -101);
	  COL_VERTEX(1536, 0, -50);
	  COL_VERTEX(1690, 0, 0);
	  COL_VERTEX(3174, 0, 1126);
	  COL_VERTEX(3174, 0, 1229);
	  COL_VERTEX(3174, 0, 1843);
	  COL_VERTEX(2150, 0, 2048);
	  COL_VERTEX(2150, 0, 1638);
	  COL_VERTEX(2150, 0, 1280);
	  COL_VERTEX(2560, 0, 2560);
	  COL_VERTEX(3131, 0, 2451);
	  COL_VERTEX(3174, 0, 2560);
	  COL_VERTEX(2765, 0, 2048);
	  COL_VERTEX(2099, 0, 1382);
	  COL_VERTEX(2150, 0, 1536);
	  COL_VERTEX(2150, 0, 1382);
	  COL_VERTEX(2048, 0, 1382);
	  COL_VERTEX(0, 0, 1536);
	  COL_VERTEX(0, 0, 1382);
	  COL_VERTEX(-50, 0, 1382);
	  COL_VERTEX(2048, 0, 1280);
	  COL_VERTEX(1946, 0, 1280);
	  COL_VERTEX(2048, 0, 1638);
	  COL_VERTEX(1792, 0, 0);
	  COL_VERTEX(1434, 0, 0);
	  COL_VERTEX(614, 0, 102);
	  COL_VERTEX(256, 0, 0);
	  COL_VERTEX(0, 0, 0);
	  COL_VERTEX(0, 0, 461);
	  COL_VERTEX(0, 0, 819);
	  COL_VERTEX(102, 0, 819);
	  COL_VERTEX(410, 0, 1946);
	  COL_VERTEX(922, 0, 2048);
	  COL_VERTEX(-1433, -2457, -101);
	  COL_VERTEX(-1945, -2457, 410);
	  COL_VERTEX(-1433, -2457, 512);
	  COL_VERTEX(-1945, -2457, 0);
	  COL_VERTEX(1024, -2457, 512);
	  COL_VERTEX(1536, -2457, 0);
	  COL_VERTEX(1024, -2457, -101);
	  COL_VERTEX(1536, -2457, 410);
	  COL_VERTEX(1024, -2764, -1023);
	  COL_VERTEX(-1433, -2764, -1023);
	  COL_VERTEX(-1433, -2764, 1434);
	  COL_VERTEX(1024, -2764, 1434);
	  COL_VERTEX(-716, 2253, 218);
	  COL_VERTEX(-716, 2253, 423);
	  COL_VERTEX(-613, 2150, 423);
	  COL_VERTEX(-716, 2150, 577);
	  COL_VERTEX(-613, 2150, 218);
	  COL_VERTEX(-716, 2150, 65);
	  COL_VERTEX(-511, 205, -1228);
	  COL_VERTEX(-511, 358, -1433);
	  COL_VERTEX(-613, 358, -1330);
	  COL_VERTEX(-409, 205, -1330);
	  COL_VERTEX(1331, 922, -1228);
	  COL_VERTEX(1331, 1075, -1433);
	  COL_VERTEX(1229, 1075, -1330);
	  COL_VERTEX(1434, 922, -1330);
	  COL_VERTEX(-2149, 154, 717);
	  COL_VERTEX(-2252, 256, 717);
	  COL_VERTEX(-2252, 154, 512);
	  COL_VERTEX(2662, 102, -306);
	  COL_VERTEX(2765, 82, -265);
	  COL_VERTEX(2662, 102, 1024);
	  COL_VERTEX(3174, 102, -306);
	  COL_VERTEX(3236, 82, -1269);
	  COL_VERTEX(3277, 102, -1535);
	  COL_VERTEX(2109, 82, -306);
	  COL_VERTEX(2150, 102, -1228);
	  COL_VERTEX(-2252, 256, 2048);
	  COL_VERTEX(-1786, 256, 2384);
	  COL_VERTEX(-2024, 1106, 2332);
	  COL_VERTEX(-1842, 1106, 2150);
	  COL_VERTEX(-1289, 922, 1619);
	  COL_VERTEX(-1289, 922, 1126);
	  COL_VERTEX(3379, 1101, 527);
	  COL_VERTEX(870, 256, 2048);
	  COL_VERTEX(947, 358, 2048);
	  COL_VERTEX(1065, 922, 2048);
	  COL_VERTEX(1065, 922, 1679);
	  COL_VERTEX(2048, 922, 778);
	  COL_VERTEX(1679, 922, 778);
	  COL_VERTEX(1679, 922, 369);
	  COL_VERTEX(717, 922, 369);
	  COL_VERTEX(369, 922, 369);
	  COL_VERTEX(-2252, 154, 819);
	  COL_VERTEX(-2149, 154, 614);
	  COL_VERTEX(-2252, 256, 614);
	  COL_VERTEX(2703, 82, -265);
	  COL_VERTEX(2765, 102, -306);
	  COL_VERTEX(2703, 82, 1024);
	  COL_VERTEX(3584, 82, -265);
	  COL_VERTEX(3584, 102, -306);
	  COL_VERTEX(3174, 82, -265);
	  COL_VERTEX(3174, 82, -1269);
	  COL_VERTEX(3174, 102, -1228);
	  COL_VERTEX(3236, 82, -1535);
	  COL_VERTEX(3277, 102, -1228);
	  COL_VERTEX(2150, 102, -306);
	  COL_VERTEX(2765, 82, -1269);
	  COL_VERTEX(2109, 82, -1269);
	  COL_VERTEX(2765, 102, -1228);
	  COL_VERTEX(-2188, 410, 2128);
	  COL_VERTEX(-2068, 256, 2032);
	  COL_VERTEX(-1906, 410, 2480);
	  COL_VERTEX(-1842, 256, 2560);
	  COL_VERTEX(-1883, 1126, 2133);
	  COL_VERTEX(-2050, 1126, 2300);
	  COL_VERTEX(-1883, 1126, 1126);
	  COL_VERTEX(-1842, 1106, 1126);
	  COL_VERTEX(-1330, 901, 1638);
	  COL_VERTEX(-818, 901, 2048);
	  COL_VERTEX(-818, 922, 1996);
	  COL_VERTEX(-1330, 901, 1126);
	  COL_VERTEX(3584, 1178, 731);
	  COL_VERTEX(3584, 1178, 527);
	  COL_VERTEX(3379, 1101, 731);
	  COL_VERTEX(947, 358, 1946);
	  COL_VERTEX(870, 256, 1946);
	  COL_VERTEX(1024, 256, 1946);
	  COL_VERTEX(1024, 256, 2048);
	  COL_VERTEX(1024, 901, 1638);
	  COL_VERTEX(1024, 901, 2048);
	  COL_VERTEX(2048, 922, 1679);
	  COL_VERTEX(2048, 901, 1638);
	  COL_VERTEX(1638, 901, 819);
	  COL_VERTEX(2048, 901, 819);
	  COL_VERTEX(1638, 901, 410);
	  COL_VERTEX(1229, 922, 369);
	  COL_VERTEX(1229, 901, 410);
	  COL_VERTEX(410, 901, 410);
	  COL_VERTEX(717, 901, 410);
	  COL_VERTEX(369, 922, 2048);
	  COL_VERTEX(410, 901, 2048);
	  COL_VERTEX(3584, -204, -1535);
	  COL_VERTEX(3277, -204, -1228);
	  COL_VERTEX(3584, -204, -1228);
	  COL_VERTEX(2150, -204, -1228);
	  COL_VERTEX(2150, -204, -306);
	  COL_VERTEX(3584, -204, -306);
	  COL_VERTEX(2150, -204, 1024);
	  COL_VERTEX(2662, -204, -306);
	  COL_VERTEX(2662, -204, 1024);
	  COL_VERTEX(3277, -204, -1535);
	  COL_VERTEX(2150, -1330, 1024);
	  COL_VERTEX(3584, -1330, 1024);
	  COL_VERTEX(3584, -1330, -1535);
	  COL_VERTEX(2150, -1330, -1535);
	  COL_VERTEX(2244, -204, 2001);
	  COL_VERTEX(2560, -204, 1843);
	  COL_VERTEX(3174, -204, 1126);
	  COL_VERTEX(2970, -204, 2048);
	  COL_VERTEX(3584, -1330, 1126);
	  COL_VERTEX(2604, -204, 2451);
	  COL_VERTEX(2765, -204, 2048);
	  COL_VERTEX(2560, -204, 1126);
	  COL_VERTEX(3174, -204, 1843);
	  COL_VERTEX(3131, -204, 2451);
	  COL_VERTEX(3490, -204, 2001);
	  COL_VERTEX(2150, -1330, 2560);
	  COL_VERTEX(3584, -1330, 2560);
	  COL_VERTEX(2150, -1330, 1126);
	  COL_VERTEX(3789, 1741, 1126);
	  COL_VERTEX(3072, 3277, 410);
	  COL_VERTEX(3686, 1741, 2150);
	  COL_VERTEX(3789, 1741, -409);
	  COL_VERTEX(3072, 3277, 102);
	  COL_VERTEX(3686, 1741, -1637);
	  COL_VERTEX(410, 2867, 874);
	  COL_VERTEX(922, 2867, 874);
	  COL_VERTEX(-1740, 3277, 410);
	  COL_VERTEX(2662, 2560, 1229);
	  COL_VERTEX(3072, 2560, 1229);
	  COL_VERTEX(1229, 2355, 2150);
	  COL_VERTEX(1229, 2355, 1946);
	  COL_VERTEX(922, 2765, 1946);
	  COL_VERTEX(819, 2178, 1894);
	  COL_VERTEX(1228, 1922, 1946);
	  COL_VERTEX(512, 1922, 1946);
	  COL_VERTEX(819, 1922, 1894);
	  COL_VERTEX(512, 2178, 1946);
	  COL_VERTEX(410, 2765, 1946);
	  COL_VERTEX(819, 2178, 1946);
	  COL_VERTEX(102, 2355, 2150);
	  COL_VERTEX(922, 2765, 2150);
	  COL_VERTEX(1331, 2355, 2150);
	  COL_VERTEX(922, 2867, 2150);
	  COL_VERTEX(1331, 2355, 1454);
	  COL_VERTEX(410, 2867, 2150);
	  COL_VERTEX(-1330, 2560, 1229);
	  COL_VERTEX(-2354, 1741, 2150);
	  COL_VERTEX(-1740, 2560, 1229);
	  COL_VERTEX(-716, 1741, 2150);
	  COL_VERTEX(0, 1741, 2150);
	  COL_VERTEX(1331, 1922, 2146);
	  COL_VERTEX(2048, 1741, 2150);
	  COL_VERTEX(1331, 1741, 2150);
	  COL_VERTEX(0, 1922, 2146);
	  COL_VERTEX(410, 2765, 2150);
	  COL_VERTEX(1229, 1922, 2146);
	  COL_VERTEX(-2149, 1843, 6758);
	  COL_VERTEX(5530, 1843, 4710);
	  COL_VERTEX(1331, 1922, 2458);
	  COL_VERTEX(1331, 1922, 1946);
	  COL_VERTEX(1331, 1717, 2150);
	  COL_VERTEX(922, 1922, 1946);
	  COL_VERTEX(0, 1922, 2458);
	  COL_VERTEX(410, 1922, 2048);
	  COL_VERTEX(-1740, 0, -1637);
	  COL_VERTEX(-1740, 0, -1740);
	  COL_VERTEX(-1381, 0, -1945);
	  COL_VERTEX(-1740, 0, -1945);
	  COL_VERTEX(-1842, 0, -1637);
	  COL_VERTEX(-2661, 512, 3929);
	  COL_VERTEX(-2227, -204, 4364);
	  COL_VERTEX(-2155, 1126, 4436);
	  COL_VERTEX(-2661, 512, 6246);
	  COL_VERTEX(-3313, 1126, 5595);
	  COL_VERTEX(-2046, 51, 4545);
	  COL_VERTEX(-1945, 1741, 2662);
	  COL_VERTEX(-1740, 2560, 2150);
	  COL_VERTEX(-1433, 2150, 2662);
	  COL_VERTEX(-1637, 2150, 2662);
	  COL_VERTEX(3277, 1741, 2662);
	  COL_VERTEX(2970, 2150, 2662);
	  COL_VERTEX(2458, 1741, 2662);
	  COL_VERTEX(2662, 2560, 2150);
	  COL_VERTEX(2765, 2150, 2662);
	  COL_VERTEX(1075, 1922, 2714);
	  COL_VERTEX(256, 1922, 2714);
	  COL_VERTEX(102, 1922, 2146);
	  COL_VERTEX(102, 1922, 1946);
	  COL_VERTEX(0, 2355, 1454);
	  COL_VERTEX(0, 2355, 2150);
	  COL_VERTEX(-2354, 1741, -1637);
	  COL_VERTEX(3072, 2560, 2150);
	  COL_VERTEX(0, 1717, 2150);
	  COL_VERTEX(410, 1102, 2150);
	  COL_VERTEX(922, 1102, 2150);
	  COL_VERTEX(1331, 1717, 2458);
	  COL_VERTEX(0, 1717, 2458);
	  COL_VERTEX(819, 2178, 1843);
	  COL_VERTEX(819, 1922, 1843);
	  COL_VERTEX(512, 2178, 1894);
	  COL_VERTEX(-1637, 256, -1637);
	  COL_VERTEX(-1125, 1741, 2662);
	  COL_VERTEX(512, -204, 2150);
	  COL_VERTEX(512, 256, 2150);
	  COL_VERTEX(-1484, -204, -1637);
	  COL_VERTEX(-1484, 256, -1637);
	  COL_VERTEX(-1740, 3277, 102);
	  COL_VERTEX(819, 256, 2048);
	  COL_VERTEX(512, 256, 2048);
	  COL_VERTEX(819, 256, 2099);
	  COL_VERTEX(-1637, 256, -1535);
	  COL_VERTEX(-1637, 256, -1586);
	  COL_VERTEX(-1484, 256, -1586);
	  COL_VERTEX(-4197, 1843, -1945);
	  COL_VERTEX(-2149, 1843, -3993);
	  COL_VERTEX(3482, 1843, -3993);
	  COL_VERTEX(5530, 1843, -1945);
	  COL_VERTEX(-4197, 1843, 4710);
	  COL_VERTEX(-2118, -204, 4617);
	  COL_VERTEX(-2082, -204, 4581);
	  COL_VERTEX(-2191, -204, 4472);
	  COL_VERTEX(-2227, -204, 4509);
	  COL_VERTEX(-2082, 51, 4581);
	  COL_VERTEX(-2191, 51, 4472);
	  COL_VERTEX(-2227, 51, 4509);
	  COL_VERTEX(-2118, 51, 4617);
	  COL_VERTEX(-1648, -306, 5088);
	  COL_VERTEX(-2951, -306, 5812);
	  COL_VERTEX(-2589, -306, 5450);
	  COL_VERTEX(77, -2201, 4608);
	  COL_VERTEX(-76, -2201, 4608);
	  COL_VERTEX(77, -2201, 4659);
	  COL_VERTEX(-76, -2201, 4659);
	  COL_VERTEX(307, -1535, 4710);
	  COL_VERTEX(-76, -2201, 4710);
	  COL_VERTEX(-2024, -1535, 4712);
	  COL_VERTEX(-3675, 410, 5088);
	  COL_VERTEX(-2227, -255, 4509);
	  COL_VERTEX(-1648, -1536, 5088);
	  COL_VERTEX(-1648, 410, 5088);
	  COL_VERTEX(-2661, 410, 4074);
	  COL_VERTEX(-1986, -1535, 5427);
	  COL_VERTEX(-3023, -306, 5015);
	  COL_VERTEX(-3385, -306, 5378);
	  COL_VERTEX(-2046, -204, 4690);
	  COL_VERTEX(-2372, -204, 4509);
	  COL_VERTEX(-2589, -204, 5450);
	  COL_VERTEX(-1648, -204, 5088);
	  COL_VERTEX(-2661, -204, 6102);
	  COL_VERTEX(-3675, -204, 5088);
	  COL_VERTEX(-3023, -204, 5015);
	  COL_VERTEX(-101, -1842, 2150);
	  COL_VERTEX(102, -1842, 2150);
	  COL_VERTEX(-306, -2047, 2150);
	  COL_VERTEX(-306, -2047, 4608);
	  COL_VERTEX(307, -2047, 2150);
	  COL_VERTEX(77, -2201, 2099);
	  COL_VERTEX(77, -2201, 2048);
	  COL_VERTEX(-76, -2201, 2099);
	  COL_VERTEX(-76, -2201, 2048);
	  COL_VERTEX(77, -2201, 2150);
	  COL_VERTEX(3482, -1433, -1535);
	  COL_VERTEX(-1433, -1433, -306);
	  COL_VERTEX(-716, -1433, -1023);
	  COL_VERTEX(307, -1433, -1023);
	  COL_VERTEX(1024, -1433, 717);
	  COL_VERTEX(307, -1433, 1434);
	  COL_VERTEX(-716, -1433, 1434);
	  COL_VERTEX(-1535, -1433, 1536);
	  COL_VERTEX(-2047, -1433, 1024);
	  COL_VERTEX(1126, -1433, 1536);
	  COL_VERTEX(1126, -1433, -1125);
	  COL_VERTEX(-1535, -1433, -1125);
	  COL_VERTEX(1638, -1433, -613);
	  COL_VERTEX(3482, -1433, -1433);
	  COL_VERTEX(3584, -1433, -1330);
	  COL_VERTEX(3686, -1433, 2048);
	  COL_VERTEX(3686, -2969, -1330);
	  COL_VERTEX(3277, -1433, 2560);
	  COL_VERTEX(2355, -1433, 2560);
	  COL_VERTEX(-1023, -1433, 2048);
	  COL_VERTEX(-1433, -1433, 2560);
	  COL_VERTEX(-2354, -1433, 2560);
	  COL_VERTEX(-2764, -1433, 2048);
	  COL_VERTEX(-2661, -1433, -1330);
	  COL_VERTEX(-2559, -1433, -1433);
	  COL_VERTEX(-2764, -1433, -1330);
	  COL_VERTEX(1946, -2457, 2048);
	  COL_VERTEX(-2047, -2201, 282);
	  COL_VERTEX(-2047, -2457, 128);
	  COL_VERTEX(-2047, -2201, 128);
	  COL_VERTEX(-1945, -2457, 282);
	  COL_VERTEX(-2047, -2457, 282);
	  COL_VERTEX(-1433, -2764, 717);
	  COL_VERTEX(-1433, -1637, 512);
	  COL_VERTEX(-1945, -2047, 410);
	  COL_VERTEX(-1433, -1637, -101);
	  COL_VERTEX(-1945, -2201, 128);
	  COL_VERTEX(-1433, -2764, -306);
	  COL_VERTEX(1536, -2201, 282);
	  COL_VERTEX(1638, -2201, 128);
	  COL_VERTEX(1638, -1433, 1024);
	  COL_VERTEX(1638, -2457, 128);
	  COL_VERTEX(1024, -2764, 717);
	  COL_VERTEX(1024, -1637, 512);
	  COL_VERTEX(1024, -1433, -306);
	  COL_VERTEX(1024, -1637, -101);
	  COL_VERTEX(1536, -2047, 0);
	  COL_VERTEX(691, -1433, 2048);
	  COL_VERTEX(589, -1433, 1536);
	  COL_VERTEX(102, 2150, -805);
	  COL_VERTEX(2048, 1741, 218);
	  COL_VERTEX(-613, 1741, 218);
	  COL_VERTEX(-613, 1741, 423);
	  COL_VERTEX(-716, 1741, 65);
	  COL_VERTEX(102, 1922, 1345);
	  COL_VERTEX(102, 1922, 1843);
	  COL_VERTEX(410, 1922, 1843);
	  COL_VERTEX(1229, 1922, 1345);
	  COL_VERTEX(102, 2253, 1843);
	  COL_VERTEX(1229, 1922, 1843);
	  COL_VERTEX(2150, 1997, 410);
	  COL_VERTEX(2150, 1997, 563);
	  COL_VERTEX(2099, 1997, 563);
	  COL_VERTEX(2099, 1997, 410);
	  COL_VERTEX(2048, 1997, 410);
	  COL_VERTEX(2150, 1741, 410);
	  COL_VERTEX(2150, 1741, 563);
	  COL_VERTEX(2048, 1997, 563);
	  COL_VERTEX(2048, 3174, 423);
	  COL_VERTEX(2048, 2150, 1345);
	  COL_VERTEX(717, 2765, 792);
	  COL_VERTEX(1229, 2253, 1253);
	  COL_VERTEX(2048, 2150, -805);
	  COL_VERTEX(614, 2765, 1843);
	  COL_VERTEX(1229, 2253, 1843);
	  COL_VERTEX(512, 2178, 1843);
	  COL_VERTEX(102, 2253, 1253);
	  COL_VERTEX(-716, 2150, 1345);
	  COL_VERTEX(1229, 2150, 1345);
	  COL_VERTEX(-716, 2150, -805);
	  COL_VERTEX(614, 2765, 792);
	  COL_VERTEX(410, 1843, 1038);
	  COL_VERTEX(307, 1741, 1140);
	  COL_VERTEX(410, 1741, 1038);
	  COL_VERTEX(1024, 1741, 1140);
	  COL_VERTEX(922, 1741, 1038);
	  COL_VERTEX(307, 1741, 1345);
	  COL_VERTEX(-511, 205, -1433);
	  COL_VERTEX(-511, 0, -1433);
	  COL_VERTEX(-409, 0, -1330);
	  COL_VERTEX(-511, 0, -1228);
	  COL_VERTEX(-716, 799, -101);
	  COL_VERTEX(-204, 799, -204);
	  COL_VERTEX(1024, 799, -101);
	  COL_VERTEX(512, 799, -306);
	  COL_VERTEX(819, 799, -306);
	  COL_VERTEX(1024, 799, -1535);
	  COL_VERTEX(819, 799, -1330);
	  COL_VERTEX(102, 799, -921);
	  COL_VERTEX(-204, 799, -1023);
	  COL_VERTEX(-306, 799, -921);
	  COL_VERTEX(-306, 799, -1535);
	  COL_VERTEX(-306, 799, -1125);
	  COL_VERTEX(614, 799, -818);
	  COL_VERTEX(512, 799, -613);
	  COL_VERTEX(-511, 799, -204);
	  COL_VERTEX(-306, 799, -613);
	  COL_VERTEX(-511, 799, -511);
	  COL_VERTEX(819, 0, -101);
	  COL_VERTEX(512, 256, -101);
	  COL_VERTEX(819, 819, -101);
	  COL_VERTEX(-511, 0, -101);
	  COL_VERTEX(-511, 1638, -101);
	  COL_VERTEX(102, 1075, -101);
	  COL_VERTEX(1024, 0, -306);
	  COL_VERTEX(-716, 0, -1330);
	  COL_VERTEX(819, 1638, -1535);
	  COL_VERTEX(-511, 1638, -1433);
	  COL_VERTEX(1024, 1638, -101);
	  COL_VERTEX(358, 256, -101);
	  COL_VERTEX(256, 1075, -101);
	  COL_VERTEX(512, 256, -50);
	  COL_VERTEX(256, 1075, -50);
	  COL_VERTEX(102, 819, 0);
	  COL_VERTEX(102, 1075, 0);
	  COL_VERTEX(358, 256, 0);
	  COL_VERTEX(819, 1638, -1433);
	  COL_VERTEX(922, 1638, -1330);
	  COL_VERTEX(1024, 1638, -306);
	  COL_VERTEX(922, 1638, -306);
	  COL_VERTEX(819, 1638, -204);
	  COL_VERTEX(-613, 1638, -1330);
	  COL_VERTEX(-716, 1638, -1330);
	  COL_VERTEX(-511, 1638, -204);
	  COL_VERTEX(-613, 1638, -306);
	  COL_VERTEX(1434, 819, -1330);
	  COL_VERTEX(1331, 819, -1433);
	  COL_VERTEX(1331, 819, -1228);
	  COL_VERTEX(1126, 1638, -1330);
	  COL_VERTEX(1229, 1638, -1330);
	  COL_VERTEX(1331, 1638, -1433);
	  COL_VERTEX(1331, 922, -1433);
	  COL_VERTEX(3584, 1638, -101);
	  COL_VERTEX(2253, 1638, -1330);
	  COL_VERTEX(2355, 1638, -1330);
	  COL_VERTEX(2458, 1638, -1433);
	  COL_VERTEX(2253, 819, -1330);
	  COL_VERTEX(2458, 1638, -101);
	  COL_VERTEX(2458, 1638, -204);
	  COL_VERTEX(2355, 1638, -306);
	  COL_VERTEX(2253, 1638, -306);
	  COL_VERTEX(2253, 819, -306);
	  COL_VERTEX(1946, 1638, -1535);
	  COL_VERTEX(1946, 1638, -1433);
	  COL_VERTEX(2048, 1638, -1330);
	  COL_VERTEX(2150, 1638, -306);
	  COL_VERTEX(2048, 1638, -306);
	  COL_VERTEX(1946, 1638, -204);
	  COL_VERTEX(2253, 819, -613);
	  COL_VERTEX(2253, 1126, -613);
	  COL_VERTEX(2150, 1229, -716);
	  COL_VERTEX(2150, 1126, -613);
	  COL_VERTEX(2150, 1229, -921);
	  COL_VERTEX(2253, 1229, -716);
	  COL_VERTEX(2253, 1229, -921);
	  COL_VERTEX(2150, 1126, -1023);
	  COL_VERTEX(2253, 1126, -1023);
	  COL_VERTEX(2150, 819, -1023);
	  COL_VERTEX(1331, 1638, -101);
	  COL_VERTEX(1536, 1075, -101);
	  COL_VERTEX(1331, 819, -1535);
	  COL_VERTEX(1126, 1638, -306);
	  COL_VERTEX(1690, 1075, -101);
	  COL_VERTEX(1690, 1075, -50);
	  COL_VERTEX(1536, 1075, 0);
	  COL_VERTEX(1536, 819, 0);
	  COL_VERTEX(1331, 1638, -204);
	  COL_VERTEX(1229, 1638, -306);
	  COL_VERTEX(-818, 1075, 717);
	  COL_VERTEX(-818, 1075, 563);
	  COL_VERTEX(-818, 819, 563);
	  COL_VERTEX(-2252, 819, -1535);
	  COL_VERTEX(-2252, 1024, 614);
	  COL_VERTEX(-2252, 1024, 1024);
	  COL_VERTEX(-2149, 1024, 1024);
	  COL_VERTEX(-1740, 1024, 614);
	  COL_VERTEX(-1740, 1024, 1024);
	  COL_VERTEX(-1791, 1024, 1024);
	  COL_VERTEX(-921, 819, 819);
	  COL_VERTEX(-818, 819, -1535);
	  COL_VERTEX(-921, 819, 461);
	  COL_VERTEX(-818, 819, 1024);
	  COL_VERTEX(-818, 819, 819);
	  COL_VERTEX(-1740, 1638, -1023);
	  COL_VERTEX(-1330, 1638, 1024);
	  COL_VERTEX(-1893, 819, 512);
	  COL_VERTEX(-2098, 922, 512);
	  COL_VERTEX(-2098, 922, 614);
	  COL_VERTEX(-2252, 1638, -1535);
	  COL_VERTEX(-1893, 1280, 1024);
	  COL_VERTEX(-2252, 1638, 1024);
	  COL_VERTEX(-818, 1331, -1330);
	  COL_VERTEX(-1023, 1331, -1535);
	  COL_VERTEX(-2252, 1331, -1330);
	  COL_VERTEX(-2252, 819, 1024);
	  COL_VERTEX(-2047, 1024, 1126);
	  COL_VERTEX(-1893, 1024, 1075);
	  COL_VERTEX(-2047, 1280, 1126);
	  COL_VERTEX(-2047, 1024, 1075);
	  COL_VERTEX(-2047, 1280, 1024);
	  COL_VERTEX(-1893, 1280, 1075);
	  COL_VERTEX(-716, 1075, 563);
	  COL_VERTEX(-767, 1075, 563);
	  COL_VERTEX(-818, 819, 717);
	  COL_VERTEX(-767, 819, 717);
	  COL_VERTEX(-767, 1075, 717);
	  COL_VERTEX(-818, 0, -255);
	  COL_VERTEX(-2252, 0, -255);
	  COL_VERTEX(-818, 717, -357);
	  COL_VERTEX(-2047, 102, -357);
	  COL_VERTEX(-1023, 102, -357);
	  COL_VERTEX(-1023, 0, -357);
	  COL_VERTEX(-2047, 0, -357);
	  COL_VERTEX(-818, 102, -1535);
	  COL_VERTEX(-2252, 102, -1535);
	  COL_VERTEX(-2047, 0, -1330);
	  COL_VERTEX(-1228, 0, -1330);
	  COL_VERTEX(-1842, 102, -1330);
	  COL_VERTEX(-1842, 0, -1535);
	  COL_VERTEX(-2252, 0, 512);
	  COL_VERTEX(-2149, 0, 614);
	  COL_VERTEX(-2149, 0, 717);
	  COL_VERTEX(-1330, 102, -255);
	  COL_VERTEX(-1330, -9, -255);
	  COL_VERTEX(-1740, -9, 614);
	  COL_VERTEX(-2252, 717, 1024);
	  COL_VERTEX(-1125, 0, 922);
	  COL_VERTEX(-1125, 512, 922);
	  COL_VERTEX(-1740, 0, 1024);
	  COL_VERTEX(-716, 0, 102);
	  COL_VERTEX(-101, 512, 102);
	  COL_VERTEX(-101, 256, 563);
	  COL_VERTEX(-101, 717, 0);
	  COL_VERTEX(-818, 717, -1535);
	  COL_VERTEX(-1945, 256, 1024);
	  COL_VERTEX(-101, 256, 717);
	  COL_VERTEX(-50, 256, 717);
	  COL_VERTEX(-50, 256, 563);
	  COL_VERTEX(0, 256, 563);
	  COL_VERTEX(-2098, 256, 1024);
	  COL_VERTEX(-1945, 256, 1075);
	  COL_VERTEX(-2098, 0, 1126);
	  COL_VERTEX(-2098, 256, 1126);
	  COL_VERTEX(-101, 512, 0);
	  COL_VERTEX(3174, 0, -265);
	  COL_VERTEX(2109, 0, -306);
	  COL_VERTEX(2150, -716, -1228);
	  COL_VERTEX(2150, 717, 819);
	  COL_VERTEX(2253, 717, 819);
	  COL_VERTEX(1126, 717, -1330);
	  COL_VERTEX(1229, 717, -1330);
	  COL_VERTEX(1331, 717, -1433);
	  COL_VERTEX(3584, 717, -1535);
	  COL_VERTEX(1126, 717, -101);
	  COL_VERTEX(3174, 102, -347);
	  COL_VERTEX(3174, -101, -245);
	  COL_VERTEX(3072, -101, -245);
	  COL_VERTEX(2867, -101, -245);
	  COL_VERTEX(2765, -101, -245);
	  COL_VERTEX(3072, 0, -347);
	  COL_VERTEX(3174, 0, -347);
	  COL_VERTEX(3072, 0, -245);
	  COL_VERTEX(3123, 154, -296);
	  COL_VERTEX(3174, 102, -245);
	  COL_VERTEX(2867, 102, -347);
	  COL_VERTEX(2765, 0, -245);
	  COL_VERTEX(2867, 0, -347);
	  COL_VERTEX(2765, 0, -347);
	  COL_VERTEX(2765, 102, -245);
	  COL_VERTEX(2867, 102, -245);
	  COL_VERTEX(3072, 102, -245);
	  COL_VERTEX(2816, 154, -296);
	  COL_VERTEX(3584, -716, -306);
	  COL_VERTEX(3584, 0, -1535);
	  COL_VERTEX(2355, 0, 1024);
	  COL_VERTEX(3430, 256, 1024);
	  COL_VERTEX(1126, 0, -1330);
	  COL_VERTEX(1690, 256, -101);
	  COL_VERTEX(2867, 0, -1187);
	  COL_VERTEX(3072, 102, -1187);
	  COL_VERTEX(3174, 102, -1187);
	  COL_VERTEX(3072, 102, -1289);
	  COL_VERTEX(3174, 0, -1187);
	  COL_VERTEX(2867, 102, -1187);
	  COL_VERTEX(2765, 102, -1187);
	  COL_VERTEX(2765, 102, -1289);
	  COL_VERTEX(3123, 154, -1238);
	  COL_VERTEX(2816, 154, -1238);
	  COL_VERTEX(1536, 256, -101);
	  COL_VERTEX(1690, 256, -50);
	  COL_VERTEX(1536, 256, 0);
	  COL_VERTEX(3277, 256, 1126);
	  COL_VERTEX(3277, 256, 1024);
	  COL_VERTEX(3430, 256, 1075);
	  COL_VERTEX(2355, 717, 922);
	  COL_VERTEX(2355, 717, 1024);
	  COL_VERTEX(1331, 717, -204);
	  COL_VERTEX(1229, 717, -306);
	  COL_VERTEX(1331, 717, -101);
	  COL_VERTEX(2048, 717, -306);
	  COL_VERTEX(1946, 717, -204);
	  COL_VERTEX(2150, 717, -306);
	  COL_VERTEX(2253, 717, -204);
	  COL_VERTEX(2253, 717, -101);
	  COL_VERTEX(2150, 717, 0);
	  COL_VERTEX(-2068, 0, 2032);
	  COL_VERTEX(-2252, 0, 2048);
	  COL_VERTEX(-1786, 0, 2384);
	  COL_VERTEX(-818, 819, 1996);
	  COL_VERTEX(-1289, 819, 1126);
	  COL_VERTEX(-1842, 1024, 1126);
	  COL_VERTEX(-1842, 1024, 1229);
	  COL_VERTEX(-2149, 1024, 1229);
	  COL_VERTEX(-2252, 1024, 2048);
	  COL_VERTEX(-818, 819, 2048);
	  COL_VERTEX(-1330, 819, 1638);
	  COL_VERTEX(-921, 819, 1587);
	  COL_VERTEX(-1330, 819, 1126);
	  COL_VERTEX(-818, 819, 1126);
	  COL_VERTEX(-204, 0, 1638);
	  COL_VERTEX(-204, 0, 1280);
	  COL_VERTEX(-1842, 0, 1229);
	  COL_VERTEX(-2201, 0, 1229);
	  COL_VERTEX(-2252, 1638, 2048);
	  COL_VERTEX(-101, 0, 1638);
	  COL_VERTEX(-1842, 0, 1126);
	  COL_VERTEX(-818, 1638, 2048);
	  COL_VERTEX(-101, 717, 2048);
	  COL_VERTEX(-101, 717, 1126);
	  COL_VERTEX(-1228, 1638, 2560);
	  COL_VERTEX(-1842, 1638, 2560);
	  COL_VERTEX(-2252, 1024, 1126);
	  COL_VERTEX(-1893, 1280, 1126);
	  COL_VERTEX(-1893, 1024, 1126);
	  COL_VERTEX(-2252, 819, 2048);
	  COL_VERTEX(-818, 717, 1126);
	  COL_VERTEX(-1945, 256, 1126);
	  COL_VERTEX(-2252, 819, 1126);
	  COL_VERTEX(-1945, 0, 1126);
	  COL_VERTEX(-2047, 819, 2355);
	  COL_VERTEX(-2047, 1106, 2355);
	  COL_VERTEX(-1842, 819, 1126);
	  COL_VERTEX(-818, 1075, 1331);
	  COL_VERTEX(-818, 1075, 1485);
	  COL_VERTEX(-818, 717, 2048);
	  COL_VERTEX(-101, 256, 1382);
	  COL_VERTEX(-101, 0, 1382);
	  COL_VERTEX(-101, 256, 1536);
	  COL_VERTEX(-50, 256, 1536);
	  COL_VERTEX(-50, 256, 1382);
	  COL_VERTEX(0, 256, 1382);
	  COL_VERTEX(-101, 0, 1536);
	  COL_VERTEX(-818, 819, 1485);
	  COL_VERTEX(-767, 1075, 1331);
	  COL_VERTEX(-716, 1075, 1331);
	  COL_VERTEX(-767, 819, 1485);
	  COL_VERTEX(-767, 1075, 1485);
	  COL_VERTEX(3379, 1024, 527);
	  COL_VERTEX(3379, 1024, 731);
	  COL_VERTEX(2867, 1024, 0);
	  COL_VERTEX(2867, 1024, 307);
	  COL_VERTEX(2355, 819, 0);
	  COL_VERTEX(3379, 819, 0);
	  COL_VERTEX(2150, 819, 2048);
	  COL_VERTEX(2150, 819, 1997);
	  COL_VERTEX(2560, 819, 2150);
	  COL_VERTEX(2150, 819, 1894);
	  COL_VERTEX(2150, 1638, 2048);
	  COL_VERTEX(2662, 1741, 0);
	  COL_VERTEX(2150, 1741, 0);
	  COL_VERTEX(2253, 1741, 307);
	  COL_VERTEX(2662, 1741, 717);
	  COL_VERTEX(2150, 1741, 717);
	  COL_VERTEX(2253, 1741, 666);
	  COL_VERTEX(2253, 819, 1638);
	  COL_VERTEX(2150, 819, 1638);
	  COL_VERTEX(2253, 819, 307);
	  COL_VERTEX(2253, 819, 666);
	  COL_VERTEX(2560, 819, 1638);
	  COL_VERTEX(2150, 819, 307);
	  COL_VERTEX(3379, 2107, 0);
	  COL_VERTEX(3379, 2107, 102);
	  COL_VERTEX(3482, 2077, 205);
	  COL_VERTEX(3584, 2048, 717);
	  COL_VERTEX(2150, 1638, 717);
	  COL_VERTEX(3584, 1638, 205);
	  COL_VERTEX(2253, 2428, 205);
	  COL_VERTEX(2355, 2399, 102);
	  COL_VERTEX(2150, 2458, 205);
	  COL_VERTEX(2150, 819, 410);
	  COL_VERTEX(2150, 1638, 205);
	  COL_VERTEX(2662, 1638, 717);
	  COL_VERTEX(2662, 1638, 0);
	  COL_VERTEX(3584, 717, 1126);
	  COL_VERTEX(2150, 717, 2048);
	  COL_VERTEX(2150, 717, 1126);
	  COL_VERTEX(3174, 717, 1638);
	  COL_VERTEX(3174, 717, 2560);
	  COL_VERTEX(2560, 717, 2150);
	  COL_VERTEX(3584, 819, 2048);
	  COL_VERTEX(3174, 819, 1638);
	  COL_VERTEX(3174, 819, 2150);
	  COL_VERTEX(2604, -716, 2451);
	  COL_VERTEX(2970, -716, 2048);
	  COL_VERTEX(2560, -716, 1126);
	  COL_VERTEX(3174, -716, 1843);
	  COL_VERTEX(2048, 256, 1536);
	  COL_VERTEX(2099, 256, 1536);
	  COL_VERTEX(2150, 256, 1382);
	  COL_VERTEX(2099, 256, 1382);
	  COL_VERTEX(2048, 256, 1382);
	  COL_VERTEX(2150, 819, 563);
	  COL_VERTEX(2150, 1075, 1741);
	  COL_VERTEX(2048, 819, 1894);
	  COL_VERTEX(2099, 1075, 1741);
	  COL_VERTEX(2099, 819, 1894);
	  COL_VERTEX(2048, 1075, 1894);
	  COL_VERTEX(2099, 1075, 1894);
	  COL_VERTEX(2048, 1075, 1741);
	  COL_VERTEX(2048, 1075, 410);
	  COL_VERTEX(2099, 1075, 410);
	  COL_VERTEX(2048, 1075, 563);
	  COL_VERTEX(2099, 1075, 563);
	  COL_VERTEX(2150, 1075, 410);
	  COL_VERTEX(2048, 819, 563);
	  COL_VERTEX(2099, 819, 563);
	  COL_VERTEX(2390, 1638, 789);
	  COL_VERTEX(3174, 819, 1024);
	  COL_VERTEX(2390, 1638, 1464);
	  COL_VERTEX(2150, 1638, 1638);
	  COL_VERTEX(3174, 1638, 1229);
	  COL_VERTEX(870, 0, 1946);
	  COL_VERTEX(1024, 0, 1946);
	  COL_VERTEX(870, 0, 2048);
	  COL_VERTEX(-511, 1638, 1946);
	  COL_VERTEX(-511, 1638, 2048);
	  COL_VERTEX(-613, 1638, 1843);
	  COL_VERTEX(-716, 819, 1843);
	  COL_VERTEX(2048, 819, 1741);
	  COL_VERTEX(2048, 819, 410);
	  COL_VERTEX(205, 0, 0);
	  COL_VERTEX(1843, 0, 0);
	  COL_VERTEX(0, 0, 1843);
	  COL_VERTEX(0, 614, 0);
	  COL_VERTEX(2048, 614, 0);
	  COL_VERTEX(1638, 819, 410);
	  COL_VERTEX(410, 614, 410);
	  COL_VERTEX(1690, 256, 0);
	  COL_VERTEX(-716, 1638, 1843);
	  COL_VERTEX(-716, 819, 563);
	  COL_VERTEX(-716, 1638, 205);
	  COL_VERTEX(0, 614, 1843);
	  COL_VERTEX(2048, 614, 2048);
	  COL_VERTEX(1024, 614, 2048);
	  COL_VERTEX(2048, 1638, 2048);
	  COL_VERTEX(2048, 1638, 0);
	  COL_VERTEX(2048, 819, 0);
	  COL_VERTEX(717, 922, 348);
	  COL_VERTEX(717, 922, 492);
	  COL_VERTEX(819, 922, 492);
	  COL_VERTEX(768, 1024, 420);
	  COL_VERTEX(1126, 922, 492);
	  COL_VERTEX(1126, 922, 348);
	  COL_VERTEX(1178, 1024, 420);
	  COL_VERTEX(1229, 922, 492);
	  COL_VERTEX(1229, 819, 492);
	  COL_VERTEX(819, 819, 492);
	  COL_VERTEX(-613, 1638, 205);
	  COL_VERTEX(-511, 1638, 102);
	  COL_VERTEX(205, 614, 1946);
	  COL_VERTEX(102, 614, 1843);
	  COL_VERTEX(205, 614, 2048);
	  COL_VERTEX(102, 614, 205);
	  COL_VERTEX(205, 614, 102);
	  COL_VERTEX(0, 614, 205);
	  COL_VERTEX(2048, 614, 1843);
	  COL_VERTEX(1946, 614, 1843);
	  COL_VERTEX(1843, 614, 1946);
	  COL_VERTEX(1843, 614, 0);
	  COL_VERTEX(1843, 614, 102);
	  COL_VERTEX(1946, 614, 205);
	  COL_VERTEX(-613, 819, 1229);
	  COL_VERTEX(-613, 819, 1587);
	  COL_VERTEX(410, 819, 2048);
	  COL_VERTEX(410, 819, 410);
	  COL_VERTEX(-716, 819, 461);
	  COL_VERTEX(-716, 819, 0);
	  COL_VERTEX(-613, 819, 461);
	  COL_VERTEX(0, 819, 102);
	  COL_VERTEX(1434, 819, 0);
	  COL_VERTEX(358, 819, 0);
	  COL_VERTEX(1792, 819, 0);
	  COL_VERTEX(1946, 819, 666);
	  COL_VERTEX(2048, 819, 819);
	  COL_VERTEX(1638, 819, 819);
	  COL_VERTEX(1946, 819, 307);
	  COL_VERTEX(1946, 819, 1997);
	  COL_VERTEX(1024, 819, 2048);
	  COL_VERTEX(1946, 819, 1638);
	  COL_VERTEX(205, 819, 2048);
	  COL_VERTEX(369, 819, 2048);
	  COL_VERTEX(-2764, -1433, -1535);
	  COL_VERTEX(819, 1922, 1946);
	  COL_VERTEX(102, 2355, 1946);
	  COL_VERTEX(512, 1922, 1894);
	  COL_VERTEX(3482, 1843, 6758);
	  COL_VERTEX(922, 1922, 2048);
	  COL_VERTEX(410, 1922, 1946);
	  COL_VERTEX(1075, 1717, 2714);
	  COL_VERTEX(0, 1922, 1946);
	  COL_VERTEX(256, 1717, 2714);
	  COL_VERTEX(-1381, 0, -1740);
	  COL_VERTEX(-1381, 0, -1637);
	  COL_VERTEX(-1279, 0, -1637);
	  COL_VERTEX(-1740, -204, -1945);
	  COL_VERTEX(-1842, -204, -1637);
	  COL_VERTEX(-1279, -204, -1637);
	  COL_VERTEX(-1381, -204, -1945);
	  COL_VERTEX(-2155, -204, 4436);
	  COL_VERTEX(-2155, 51, 4436);
	  COL_VERTEX(-1974, -204, 4617);
	  COL_VERTEX(-2046, -204, 4545);
	  COL_VERTEX(-1503, 512, 5088);
	  COL_VERTEX(-2010, 1126, 4581);
	  COL_VERTEX(-3168, 1126, 5740);
	  COL_VERTEX(-3820, 512, 5088);
	  COL_VERTEX(-1330, 2560, 2150);
	  COL_VERTEX(512, 1922, 1843);
	  COL_VERTEX(-1637, -204, -1637);
	  COL_VERTEX(819, 256, 2150);
	  COL_VERTEX(819, -204, 2150);
	  COL_VERTEX(512, 256, 2099);
	  COL_VERTEX(-1637, 0, -1637);
	  COL_VERTEX(-1484, 256, -1535);
	  COL_VERTEX(-1484, 0, -1637);
	  COL_VERTEX(-2661, -306, 6102);
	  COL_VERTEX(-2951, -204, 5812);
	  COL_VERTEX(77, -2201, 4710);
	  COL_VERTEX(-3385, -204, 5378);
	  COL_VERTEX(-2661, -306, 4074);
	  COL_VERTEX(-2661, 410, 6102);
	  COL_VERTEX(-2118, -255, 4617);
	  COL_VERTEX(307, -1535, 5427);
	  COL_VERTEX(-3675, -306, 5088);
	  COL_VERTEX(-2118, -204, 4762);
	  COL_VERTEX(-2299, -204, 4436);
	  COL_VERTEX(-2661, -204, 4074);
	  COL_VERTEX(-101, -1842, 4608);
	  COL_VERTEX(102, -1842, 4608);
	  COL_VERTEX(307, -2047, 4608);
	  COL_VERTEX(-76, -2201, 2150);
	  COL_VERTEX(-2559, -1433, -1535);
	  COL_VERTEX(-2559, -2661, -1535);
	  COL_VERTEX(3482, -2661, -1535);
	  COL_VERTEX(-716, -2764, -1023);
	  COL_VERTEX(307, -2764, -1023);
	  COL_VERTEX(1024, -2764, -306);
	  COL_VERTEX(307, -2764, 1434);
	  COL_VERTEX(-716, -2764, 1434);
	  COL_VERTEX(1536, -2047, 410);
	  COL_VERTEX(-1433, -1433, 717);
	  COL_VERTEX(-1535, -2457, 1536);
	  COL_VERTEX(-2047, -1433, -613);
	  COL_VERTEX(3482, -2969, -1433);
	  COL_VERTEX(3584, -2969, -1330);
	  COL_VERTEX(3482, -2969, -1535);
	  COL_VERTEX(3686, -1433, -1330);
	  COL_VERTEX(1946, -1433, 2048);
	  COL_VERTEX(-2764, -2457, -1330);
	  COL_VERTEX(-2559, -2457, -1433);
	  COL_VERTEX(-2559, -2457, -1535);
	  COL_VERTEX(-2661, -2457, -1330);
	  COL_VERTEX(2150, -2661, -613);
	  COL_VERTEX(1638, -2661, -1125);
	  COL_VERTEX(-1945, -2457, 128);
	  COL_VERTEX(-2047, -2457, 1024);
	  COL_VERTEX(-1945, -2201, 282);
	  COL_VERTEX(-1945, -2047, 0);
	  COL_VERTEX(1638, -2201, 282);
	  COL_VERTEX(1536, -2201, 128);
	  COL_VERTEX(1536, -2457, 128);
	  COL_VERTEX(1638, -2457, 282);
	  COL_VERTEX(1536, -2457, 282);
	  COL_VERTEX(691, -2457, 2048);
	  COL_VERTEX(691, -2457, 1536);
	  COL_VERTEX(691, -1433, 1536);
	  COL_VERTEX(589, -2457, 1536);
	  COL_VERTEX(589, -2457, 2048);
	  COL_VERTEX(589, -1433, 2048);
	  COL_VERTEX(205, 3174, 116);
	  COL_VERTEX(2048, 3174, 116);
	  COL_VERTEX(2048, 1741, 116);
	  COL_VERTEX(102, 1741, 218);
	  COL_VERTEX(102, 3288, 218);
	  COL_VERTEX(2048, 3288, 218);
	  COL_VERTEX(102, 1741, -805);
	  COL_VERTEX(205, 1741, -805);
	  COL_VERTEX(205, 2150, -805);
	  COL_VERTEX(-716, 1741, 577);
	  COL_VERTEX(410, 1922, 1741);
	  COL_VERTEX(922, 1922, 1843);
	  COL_VERTEX(922, 1922, 1741);
	  COL_VERTEX(102, 2150, 1345);
	  COL_VERTEX(1229, 1741, 1345);
	  COL_VERTEX(102, 1741, 1345);
	  COL_VERTEX(-716, 3174, 116);
	  COL_VERTEX(-716, 3174, 423);
	  COL_VERTEX(717, 2765, 1843);
	  COL_VERTEX(307, 1843, 1140);
	  COL_VERTEX(307, 1843, 1345);
	  COL_VERTEX(1024, 1843, 1345);
	  COL_VERTEX(1024, 1843, 1140);
	  COL_VERTEX(922, 1843, 1038);
	  COL_VERTEX(1024, 1741, 1345);
	  COL_VERTEX(-613, 205, -1330);
	  COL_VERTEX(-613, 0, -1330);
	  COL_VERTEX(-204, 799, -1330);
	  COL_VERTEX(614, 799, -1023);
	  COL_VERTEX(102, 799, -613);
	  COL_VERTEX(-716, 799, -1125);
	  COL_VERTEX(819, 799, -613);
	  COL_VERTEX(819, 799, -818);
	  COL_VERTEX(-204, 799, -511);
	  COL_VERTEX(819, 1638, -101);
	  COL_VERTEX(-511, 819, -101);
	  COL_VERTEX(1024, 1638, -1330);
	  COL_VERTEX(1024, 0, -1330);
	  COL_VERTEX(-716, 1638, -306);
	  COL_VERTEX(-716, 0, -306);
	  COL_VERTEX(-511, 1638, -1535);
	  COL_VERTEX(-511, 0, -1535);
	  COL_VERTEX(819, 0, -1535);
	  COL_VERTEX(819, 0, -1433);
	  COL_VERTEX(-716, 1638, -101);
	  COL_VERTEX(-716, 1638, -1535);
	  COL_VERTEX(1024, 1638, -1535);
	  COL_VERTEX(512, 256, 0);
	  COL_VERTEX(358, 256, -50);
	  COL_VERTEX(102, 1075, -50);
	  COL_VERTEX(256, 1075, 0);
	  COL_VERTEX(256, 819, 0);
	  COL_VERTEX(922, 0, -1330);
	  COL_VERTEX(922, 0, -306);
	  COL_VERTEX(819, 0, -204);
	  COL_VERTEX(-613, 0, -306);
	  COL_VERTEX(-511, 0, -204);
	  COL_VERTEX(1229, 922, -1330);
	  COL_VERTEX(1229, 819, -1330);
	  COL_VERTEX(1126, 819, -1330);
	  COL_VERTEX(3584, 1638, -1535);
	  COL_VERTEX(1126, 1638, -101);
	  COL_VERTEX(1126, 1638, -1535);
	  COL_VERTEX(1331, 1638, -1535);
	  COL_VERTEX(2355, 819, -1330);
	  COL_VERTEX(2458, 819, -1433);
	  COL_VERTEX(2458, 819, -1535);
	  COL_VERTEX(2458, 1638, -1535);
	  COL_VERTEX(2253, 819, -1023);
	  COL_VERTEX(2458, 819, -204);
	  COL_VERTEX(2458, 819, -101);
	  COL_VERTEX(2355, 819, -306);
	  COL_VERTEX(1946, 819, -1433);
	  COL_VERTEX(2048, 819, -1330);
	  COL_VERTEX(2150, 819, -1330);
	  COL_VERTEX(1946, 819, -1535);
	  COL_VERTEX(2150, 819, -613);
	  COL_VERTEX(2150, 1638, -1330);
	  COL_VERTEX(2048, 819, -306);
	  COL_VERTEX(1946, 819, -204);
	  COL_VERTEX(1946, 819, -101);
	  COL_VERTEX(1946, 1638, -101);
	  COL_VERTEX(2150, 819, -306);
	  COL_VERTEX(1331, 819, -101);
	  COL_VERTEX(1126, 819, -306);
	  COL_VERTEX(1690, 1075, 0);
	  COL_VERTEX(1690, 819, 0);
	  COL_VERTEX(1536, 1075, -50);
	  COL_VERTEX(1229, 819, -306);
	  COL_VERTEX(1331, 819, -204);
	  COL_VERTEX(-818, 1638, 1024);
	  COL_VERTEX(-818, 1638, -1535);
	  COL_VERTEX(-2149, 1024, 922);
	  COL_VERTEX(-1791, 1024, 922);
	  COL_VERTEX(-818, 819, 461);
	  COL_VERTEX(-1330, 1638, -1023);
	  COL_VERTEX(-1330, 819, -1023);
	  COL_VERTEX(-1740, 819, -1023);
	  COL_VERTEX(-1893, 922, 512);
	  COL_VERTEX(-1893, 922, 614);
	  COL_VERTEX(-1893, 819, 614);
	  COL_VERTEX(-1330, 819, 1024);
	  COL_VERTEX(-2098, 819, 614);
	  COL_VERTEX(-2098, 819, 512);
	  COL_VERTEX(-1740, 819, 614);
	  COL_VERTEX(-2252, 819, 614);
	  COL_VERTEX(-2047, 973, 1024);
	  COL_VERTEX(-1893, 973, 1024);
	  COL_VERTEX(-818, 1331, -1535);
	  COL_VERTEX(-818, 819, -1330);
	  COL_VERTEX(-1023, 819, -1535);
	  COL_VERTEX(-2252, 819, -1330);
	  COL_VERTEX(-2047, 819, -1535);
	  COL_VERTEX(-2047, 1331, -1535);
	  COL_VERTEX(-2252, 1331, -1535);
	  COL_VERTEX(-1740, 819, 1024);
	  COL_VERTEX(-1740, 1638, 1024);
	  COL_VERTEX(-1893, 1024, 1024);
	  COL_VERTEX(-2047, 1024, 1024);
	  COL_VERTEX(-2047, 1280, 1075);
	  COL_VERTEX(-767, 819, 563);
	  COL_VERTEX(-716, 819, 717);
	  COL_VERTEX(-716, 1075, 717);
	  COL_VERTEX(-2252, 717, -255);
	  COL_VERTEX(-818, 717, -255);
	  COL_VERTEX(-2252, 717, -357);
	  COL_VERTEX(-818, 102, -357);
	  COL_VERTEX(-2252, 102, -357);
	  COL_VERTEX(-1023, 102, -1330);
	  COL_VERTEX(-1228, 102, -1330);
	  COL_VERTEX(-1228, 102, -1535);
	  COL_VERTEX(-1842, 102, -1535);
	  COL_VERTEX(-2047, 102, -1330);
	  COL_VERTEX(-1023, 0, -1330);
	  COL_VERTEX(-1228, 0, -1535);
	  COL_VERTEX(-1842, 0, -1330);
	  COL_VERTEX(-2252, 0, 819);
	  COL_VERTEX(-1740, 102, -255);
	  COL_VERTEX(-1740, 102, 614);
	  COL_VERTEX(-1330, 102, 614);
	  COL_VERTEX(-1740, -9, -255);
	  COL_VERTEX(-1330, -9, 614);
	  COL_VERTEX(-2252, 717, -1535);
	  COL_VERTEX(-818, 717, 0);
	  COL_VERTEX(-1125, 512, 1024);
	  COL_VERTEX(-1125, 0, 1024);
	  COL_VERTEX(-1740, 0, 922);
	  COL_VERTEX(-1740, 512, 922);
	  COL_VERTEX(-1740, 512, 1024);
	  COL_VERTEX(-716, 512, 0);
	  COL_VERTEX(-716, 0, 0);
	  COL_VERTEX(-716, 512, 102);
	  COL_VERTEX(-101, 0, 102);
	  COL_VERTEX(-101, 717, 1024);
	  COL_VERTEX(0, 256, 717);
	  COL_VERTEX(-2098, 256, 1075);
	  COL_VERTEX(2703, 0, -265);
	  COL_VERTEX(2765, 0, -265);
	  COL_VERTEX(2703, 0, 1024);
	  COL_VERTEX(3584, 0, -265);
	  COL_VERTEX(2109, 0, -1269);
	  COL_VERTEX(2765, 0, -1269);
	  COL_VERTEX(3236, 0, -1269);
	  COL_VERTEX(3174, 0, -1269);
	  COL_VERTEX(3236, 0, -1535);
	  COL_VERTEX(2150, -716, -306);
	  COL_VERTEX(2150, -716, 819);
	  COL_VERTEX(2150, -716, 0);
	  COL_VERTEX(2253, -716, 819);
	  COL_VERTEX(1229, 0, -1330);
	  COL_VERTEX(1331, 0, -1433);
	  COL_VERTEX(1331, 0, -1535);
	  COL_VERTEX(1331, 717, -1535);
	  COL_VERTEX(2150, 717, 1024);
	  COL_VERTEX(2150, 717, -101);
	  COL_VERTEX(3584, 717, 1024);
	  COL_VERTEX(1126, 717, -1535);
	  COL_VERTEX(3174, 0, -306);
	  COL_VERTEX(2765, 0, -306);
	  COL_VERTEX(3072, 102, -347);
	  COL_VERTEX(3174, 0, -245);
	  COL_VERTEX(2867, 0, -245);
	  COL_VERTEX(2765, 102, -347);
	  COL_VERTEX(3174, 0, -1228);
	  COL_VERTEX(2765, 0, -1228);
	  COL_VERTEX(3584, -716, -1535);
	  COL_VERTEX(3277, -716, -1535);
	  COL_VERTEX(3277, -716, -1228);
	  COL_VERTEX(2662, -716, -306);
	  COL_VERTEX(2662, -716, 1024);
	  COL_VERTEX(2355, -716, 1024);
	  COL_VERTEX(1126, 717, -306);
	  COL_VERTEX(1126, 0, -306);
	  COL_VERTEX(1946, 717, -101);
	  COL_VERTEX(1331, 0, -101);
	  COL_VERTEX(1946, 0, -101);
	  COL_VERTEX(2765, -101, -1289);
	  COL_VERTEX(2867, -101, -1289);
	  COL_VERTEX(2765, 0, -1187);
	  COL_VERTEX(3072, -101, -1289);
	  COL_VERTEX(3072, 0, -1187);
	  COL_VERTEX(3174, 0, -1289);
	  COL_VERTEX(3072, 0, -1289);
	  COL_VERTEX(3174, 102, -1289);
	  COL_VERTEX(3174, -101, -1289);
	  COL_VERTEX(2867, 102, -1289);
	  COL_VERTEX(2867, 0, -1289);
	  COL_VERTEX(2765, 0, -1289);
	  COL_VERTEX(1536, 256, -50);
	  COL_VERTEX(3277, 256, 1075);
	  COL_VERTEX(3430, 256, 1126);
	  COL_VERTEX(2355, -716, 922);
	  COL_VERTEX(1229, 0, -306);
	  COL_VERTEX(1331, 0, -204);
	  COL_VERTEX(1946, 0, -204);
	  COL_VERTEX(2048, 0, -306);
	  COL_VERTEX(2253, -716, -204);
	  COL_VERTEX(2253, -716, -101);
	  COL_VERTEX(-1842, 0, 2560);
	  COL_VERTEX(-1883, 1024, 2133);
	  COL_VERTEX(-2050, 1024, 2300);
	  COL_VERTEX(-1883, 1024, 1126);
	  COL_VERTEX(-1289, 819, 1619);
	  COL_VERTEX(-2149, 1024, 1126);
	  COL_VERTEX(-1842, 1024, 2150);
	  COL_VERTEX(-2047, 1024, 2355);
	  COL_VERTEX(-818, 819, 1587);
	  COL_VERTEX(-818, 819, 1229);
	  COL_VERTEX(-921, 819, 1229);
	  COL_VERTEX(-818, 1638, 1126);
	  COL_VERTEX(-818, 819, 1331);
	  COL_VERTEX(-101, 0, 1280);
	  COL_VERTEX(-101, 0, 1126);
	  COL_VERTEX(-818, 0, 2048);
	  COL_VERTEX(-1228, 0, 2560);
	  COL_VERTEX(-2201, 0, 1126);
	  COL_VERTEX(-2252, 0, 1126);
	  COL_VERTEX(-101, 0, 2048);
	  COL_VERTEX(-2252, 1638, 1126);
	  COL_VERTEX(-1330, 717, 1638);
	  COL_VERTEX(-1330, 717, 1126);
	  COL_VERTEX(-1842, 819, 2150);
	  COL_VERTEX(0, 256, 1536);
	  COL_VERTEX(-767, 819, 1331);
	  COL_VERTEX(-716, 819, 1331);
	  COL_VERTEX(-716, 819, 1485);
	  COL_VERTEX(-716, 1075, 1485);
	  COL_VERTEX(3584, 1024, 527);
	  COL_VERTEX(3584, 1024, 0);
	  COL_VERTEX(2867, 819, 307);
	  COL_VERTEX(3379, 819, 731);
	  COL_VERTEX(2867, 819, 0);
	  COL_VERTEX(3584, 819, 731);
	  COL_VERTEX(2355, 2399, 0);
	  COL_VERTEX(2150, 1075, 1894);
	  COL_VERTEX(2253, 819, 1997);
	  COL_VERTEX(2560, 819, 2560);
	  COL_VERTEX(3174, 1638, 2560);
	  COL_VERTEX(3584, 1638, 2048);
	  COL_VERTEX(3584, 1638, 717);
	  COL_VERTEX(2560, 1638, 2560);
	  COL_VERTEX(2150, 1741, 307);
	  COL_VERTEX(2150, 1741, 666);
	  COL_VERTEX(2150, 819, 666);
	  COL_VERTEX(2150, 819, 0);
	  COL_VERTEX(3379, 1024, 0);
	  COL_VERTEX(3379, 1024, 102);
	  COL_VERTEX(3482, 1024, 205);
	  COL_VERTEX(3584, 1024, 205);
	  COL_VERTEX(3584, 2048, 205);
	  COL_VERTEX(2150, 2458, 0);
	  COL_VERTEX(3584, 2048, 0);
	  COL_VERTEX(2150, 2458, 717);
	  COL_VERTEX(2355, 819, 102);
	  COL_VERTEX(2253, 819, 205);
	  COL_VERTEX(2150, 819, 205);
	  COL_VERTEX(2150, 1638, 0);
	  COL_VERTEX(2150, 1741, 205);
	  COL_VERTEX(2560, 717, 1638);
	  COL_VERTEX(3584, 717, 2048);
	  COL_VERTEX(2560, 717, 2560);
	  COL_VERTEX(3174, 717, 2150);
	  COL_VERTEX(3584, 819, 0);
	  COL_VERTEX(3174, 819, 2560);
	  COL_VERTEX(2244, -716, 2001);
	  COL_VERTEX(2560, -716, 1843);
	  COL_VERTEX(2765, -716, 2048);
	  COL_VERTEX(3131, -716, 2451);
	  COL_VERTEX(3490, -716, 2001);
	  COL_VERTEX(3174, -716, 1126);
	  COL_VERTEX(2150, 256, 1536);
	  COL_VERTEX(2150, 1075, 563);
	  COL_VERTEX(2150, 819, 1741);
	  COL_VERTEX(3584, 819, 205);
	  COL_VERTEX(2099, 819, 1741);
	  COL_VERTEX(2099, 819, 410);
	  COL_VERTEX(2390, 819, 789);
	  COL_VERTEX(2150, 819, 717);
	  COL_VERTEX(3174, 1638, 1024);
	  COL_VERTEX(3174, 819, 1229);
	  COL_VERTEX(2390, 819, 1464);
	  COL_VERTEX(1024, 0, 2048);
	  COL_VERTEX(-613, 819, 1843);
	  COL_VERTEX(-511, 819, 1946);
	  COL_VERTEX(-511, 819, 2048);
	  COL_VERTEX(-511, 819, 0);
	  COL_VERTEX(-511, 1638, 0);
	  COL_VERTEX(205, 614, 0);
	  COL_VERTEX(410, 614, 2048);
	  COL_VERTEX(0, 614, 2048);
	  COL_VERTEX(1638, 614, 410);
	  COL_VERTEX(1638, 614, 819);
	  COL_VERTEX(2048, 614, 819);
	  COL_VERTEX(1229, 819, 410);
	  COL_VERTEX(717, 819, 410);
	  COL_VERTEX(-716, 819, 205);
	  COL_VERTEX(0, 0, 205);
	  COL_VERTEX(1024, 614, 1638);
	  COL_VERTEX(2048, 614, 1638);
	  COL_VERTEX(-716, 1638, 0);
	  COL_VERTEX(-716, 1638, 2048);
	  COL_VERTEX(819, 922, 348);
	  COL_VERTEX(1229, 922, 348);
	  COL_VERTEX(1229, 819, 348);
	  COL_VERTEX(1126, 819, 348);
	  COL_VERTEX(819, 819, 348);
	  COL_VERTEX(717, 819, 348);
	  COL_VERTEX(717, 717, 348);
	  COL_VERTEX(1229, 717, 348);
	  COL_VERTEX(1126, 819, 492);
	  COL_VERTEX(717, 819, 492);
	  COL_VERTEX(1126, 717, 348);
	  COL_VERTEX(819, 717, 348);
	  COL_VERTEX(-613, 819, 205);
	  COL_VERTEX(-511, 819, 102);
	  COL_VERTEX(102, 0, 1843);
	  COL_VERTEX(205, 0, 1946);
	  COL_VERTEX(205, 0, 2048);
	  COL_VERTEX(205, 0, 102);
	  COL_VERTEX(102, 0, 205);
	  COL_VERTEX(2048, 0, 1843);
	  COL_VERTEX(1946, 0, 1843);
	  COL_VERTEX(1843, 0, 1946);
	  COL_VERTEX(1843, 0, 2048);
	  COL_VERTEX(1843, 614, 2048);
	  COL_VERTEX(1843, 0, 102);
	  COL_VERTEX(1946, 0, 205);
	  COL_VERTEX(2048, 0, 205);
	  COL_VERTEX(2048, 614, 205);
	  COL_VERTEX(-716, 819, 819);
	  COL_VERTEX(-716, 819, 1229);
	  COL_VERTEX(-613, 819, 819);
	  COL_VERTEX(-716, 819, 1587);
	  COL_VERTEX(-716, 819, 2048);
	  COL_VERTEX(0, 819, 0);
	  COL_VERTEX(358, 819, 102);
	  COL_VERTEX(1792, 819, 102);
	  COL_VERTEX(1434, 819, 102);
	  COL_VERTEX(2048, 819, 307);
	  COL_VERTEX(2048, 819, 666);
	  COL_VERTEX(2048, 819, 2048);
	  COL_VERTEX(2048, 819, 1997);
	  COL_VERTEX(2048, 819, 1638);
	  COL_VERTEX(1024, 819, 1638);
	  COL_VERTEX(1065, 819, 1679);
	  COL_VERTEX(1065, 819, 2048);
	  COL_VERTEX(2048, 819, 1679);
	  COL_VERTEX(369, 819, 369);
	  COL_VERTEX(717, 819, 369);
	  COL_VERTEX(2048, 819, 778);
	  COL_VERTEX(1679, 819, 778);
	  COL_VERTEX(1679, 819, 369);
	  COL_VERTEX(1229, 819, 369);
	  COL_VERTEX(1638, -1433, 2048);
	  COL_VERTEX(1638, -1433, -1535);
	  COL_TRI_INIT(SURFACE_DEFAULT, 1756);
	  COL_TRI(465, 466, 467);
	  COL_TRI(465, 468, 469);
	  COL_TRI(465, 469, 466);
	  COL_TRI(470, 469, 468);
	  COL_TRI(471, 472, 466);
	  COL_TRI(471, 466, 473);
	  COL_TRI(472, 474, 466);
	  COL_TRI(466, 474, 475);
	  COL_TRI(466, 475, 467);
	  COL_TRI(467, 181, 470);
	  COL_TRI(476, 477, 480);
	  COL_TRI(477, 485, 1120);
	  COL_TRI(477, 478, 485);
	  COL_TRI(478, 483, 485);
	  COL_TRI(479, 1120, 485);
	  COL_TRI(479, 482, 1120);
	  COL_TRI(480, 477, 1120);
	  COL_TRI(481, 483, 1121);
	  COL_TRI(482, 1122, 481);
	  COL_TRI(482, 481, 1120);
	  COL_TRI(484, 1121, 483);
	  COL_TRI(478, 484, 483);
	  COL_TRI(485, 483, 546);
	  COL_TRI(486, 1121, 484);
	  COL_TRI(478, 476, 487);
	  COL_TRI(478, 477, 476);
	  COL_TRI(487, 484, 478);
	  COL_TRI(487, 501, 484);
	  COL_TRI(471, 492, 535);
	  COL_TRI(488, 472, 489);
	  COL_TRI(488, 490, 472);
	  COL_TRI(489, 471, 491);
	  COL_TRI(489, 472, 471);
	  COL_TRI(490, 474, 472);
	  COL_TRI(491, 535, 536);
	  COL_TRI(491, 471, 535);
	  COL_TRI(473, 492, 471);
	  COL_TRI(493, 473, 553);
	  COL_TRI(492, 473, 494);
	  COL_TRI(494, 473, 493);
	  COL_TRI(495, 535, 492);
	  COL_TRI(496, 535, 495);
	  COL_TRI(497, 506, 490);
	  COL_TRI(497, 490, 488);
	  COL_TRI(498, 474, 490);
	  COL_TRI(486, 533, 1121);
	  COL_TRI(500, 533, 486);
	  COL_TRI(500, 486, 536);
	  COL_TRI(486, 491, 536);
	  COL_TRI(486, 501, 491);
	  COL_TRI(501, 489, 491);
	  COL_TRI(501, 487, 489);
	  COL_TRI(486, 484, 501);
	  COL_TRI(487, 488, 489);
	  COL_TRI(487, 476, 488);
	  COL_TRI(503, 50, 564);
	  COL_TRI(476, 497, 488);
	  COL_TRI(476, 502, 497);
	  COL_TRI(502, 476, 480);
	  COL_TRI(503, 35, 183);
	  COL_TRI(503, 1123, 35);
	  COL_TRI(503, 183, 50);
	  COL_TRI(505, 1126, 542);
	  COL_TRI(504, 35, 1123);
	  COL_TRI(505, 506, 1124);
	  COL_TRI(506, 508, 1124);
	  COL_TRI(507, 506, 505);
	  COL_TRI(508, 1125, 510);
	  COL_TRI(508, 510, 1124);
	  COL_TRI(509, 505, 1124);
	  COL_TRI(509, 1124, 510);
	  COL_TRI(507, 505, 542);
	  COL_TRI(505, 531, 1126);
	  COL_TRI(515, 1132, 1133);
	  COL_TRI(509, 510, 1127);
	  COL_TRI(510, 1125, 1127);
	  COL_TRI(511, 1129, 512);
	  COL_TRI(512, 1129, 513);
	  COL_TRI(512, 513, 514);
	  COL_TRI(513, 1130, 1131);
	  COL_TRI(514, 515, 511);
	  COL_TRI(511, 1130, 1129);
	  COL_TRI(37, 517, 177);
	  COL_TRI(515, 514, 1132);
	  COL_TRI(513, 1131, 1134);
	  COL_TRI(513, 1134, 1135);
	  COL_TRI(514, 513, 1135);
	  COL_TRI(514, 1135, 1132);
	  COL_TRI(516, 1136, 37);
	  COL_TRI(516, 1141, 1140);
	  COL_TRI(517, 33, 177);
	  COL_TRI(33, 1138, 34);
	  COL_TRI(517, 1138, 33);
	  COL_TRI(34, 1139, 521);
	  COL_TRI(34, 521, 1140);
	  COL_TRI(516, 518, 1141);
	  COL_TRI(518, 520, 1142);
	  COL_TRI(518, 1142, 1141);
	  COL_TRI(519, 1141, 1142);
	  COL_TRI(520, 518, 1143);
	  COL_TRI(518, 516, 1143);
	  COL_TRI(519, 1140, 1141);
	  COL_TRI(521, 1137, 516);
	  COL_TRI(521, 516, 1140);
	  COL_TRI(523, 522, 525);
	  COL_TRI(516, 1137, 1136);
	  COL_TRI(516, 37, 185);
	  COL_TRI(516, 185, 1143);
	  COL_TRI(522, 548, 524);
	  COL_TRI(522, 524, 525);
	  COL_TRI(523, 493, 522);
	  COL_TRI(524, 548, 495);
	  COL_TRI(524, 495, 1144);
	  COL_TRI(525, 524, 1144);
	  COL_TRI(525, 1144, 523);
	  COL_TRI(526, 527, 530);
	  COL_TRI(526, 530, 528);
	  COL_TRI(527, 526, 467);
	  COL_TRI(526, 45, 47);
	  COL_TRI(526, 47, 467);
	  COL_TRI(528, 45, 526);
	  COL_TRI(509, 532, 531);
	  COL_TRI(529, 498, 530);
	  COL_TRI(530, 527, 538);
	  COL_TRI(530, 538, 529);
	  COL_TRI(498, 528, 530);
	  COL_TRI(528, 36, 45);
	  COL_TRI(498, 36, 528);
	  COL_TRI(527, 467, 538);
	  COL_TRI(509, 531, 505);
	  COL_TRI(531, 532, 1128);
	  COL_TRI(531, 1128, 1126);
	  COL_TRI(532, 509, 543);
	  COL_TRI(532, 543, 1128);
	  COL_TRI(533, 534, 1121);
	  COL_TRI(534, 481, 1121);
	  COL_TRI(535, 1127, 500);
	  COL_TRI(536, 535, 500);
	  COL_TRI(469, 473, 466);
	  COL_TRI(469, 553, 473);
	  COL_TRI(493, 523, 494);
	  COL_TRI(493, 553, 537);
	  COL_TRI(537, 44, 38);
	  COL_TRI(537, 38, 493);
	  COL_TRI(492, 494, 523);
	  COL_TRI(492, 523, 1144);
	  COL_TRI(539, 540, 543);
	  COL_TRI(495, 492, 1144);
	  COL_TRI(498, 529, 474);
	  COL_TRI(499, 498, 490);
	  COL_TRI(475, 474, 529);
	  COL_TRI(475, 529, 538);
	  COL_TRI(467, 475, 538);
	  COL_TRI(544, 545, 482);
	  COL_TRI(540, 1128, 543);
	  COL_TRI(540, 541, 1126);
	  COL_TRI(541, 542, 1126);
	  COL_TRI(540, 1126, 1128);
	  COL_TRI(542, 541, 507);
	  COL_TRI(543, 509, 1127);
	  COL_TRI(543, 1127, 539);
	  COL_TRI(544, 482, 479);
	  COL_TRI(485, 546, 479);
	  COL_TRI(479, 546, 683);
	  COL_TRI(479, 683, 544);
	  COL_TRI(483, 481, 1122);
	  COL_TRI(483, 1122, 546);
	  COL_TRI(545, 1122, 482);
	  COL_TRI(545, 1145, 1122);
	  COL_TRI(546, 1122, 1145);
	  COL_TRI(40, 25, 179);
	  COL_TRI(40, 23, 25);
	  COL_TRI(40, 26, 23);
	  COL_TRI(21, 20, 180);
	  COL_TRI(21, 180, 42);
	  COL_TRI(16, 27, 30);
	  COL_TRI(493, 38, 32);
	  COL_TRI(20, 178, 180);
	  COL_TRI(29, 31, 17);
	  COL_TRI(17, 16, 30);
	  COL_TRI(17, 30, 29);
	  COL_TRI(549, 495, 39);
	  COL_TRI(493, 32, 522);
	  COL_TRI(537, 547, 44);
	  COL_TRI(547, 1146, 44);
	  COL_TRI(522, 32, 28);
	  COL_TRI(522, 28, 548);
	  COL_TRI(548, 28, 39);
	  COL_TRI(548, 39, 495);
	  COL_TRI(549, 550, 495);
	  COL_TRI(550, 498, 495);
	  COL_TRI(550, 1147, 498);
	  COL_TRI(498, 1147, 1148);
	  COL_TRI(498, 1148, 41);
	  COL_TRI(498, 41, 36);
	  COL_TRI(467, 47, 181);
	  COL_TRI(181, 551, 552);
	  COL_TRI(470, 181, 552);
	  COL_TRI(470, 552, 537);
	  COL_TRI(552, 547, 537);
	  COL_TRI(553, 469, 470);
	  COL_TRI(553, 470, 537);
	  COL_TRI(554, 52, 556);
	  COL_TRI(554, 189, 52);
	  COL_TRI(52, 186, 1147);
	  COL_TRI(52, 1147, 556);
	  COL_TRI(557, 286, 558);
	  COL_TRI(555, 556, 1149);
	  COL_TRI(555, 554, 556);
	  COL_TRI(556, 1147, 550);
	  COL_TRI(556, 550, 1149);
	  COL_TRI(550, 51, 187);
	  COL_TRI(550, 187, 1149);
	  COL_TRI(187, 555, 1149);
	  COL_TRI(187, 188, 555);
	  COL_TRI(558, 1150, 547);
	  COL_TRI(558, 286, 1150);
	  COL_TRI(557, 132, 286);
	  COL_TRI(547, 552, 559);
	  COL_TRI(547, 559, 558);
	  COL_TRI(558, 559, 1151);
	  COL_TRI(558, 1151, 557);
	  COL_TRI(552, 1152, 285);
	  COL_TRI(560, 182, 561);
	  COL_TRI(559, 285, 287);
	  COL_TRI(552, 285, 559);
	  COL_TRI(559, 287, 1151);
	  COL_TRI(286, 1152, 1150);
	  COL_TRI(286, 285, 1152);
	  COL_TRI(560, 49, 182);
	  COL_TRI(561, 182, 43);
	  COL_TRI(561, 43, 562);
	  COL_TRI(562, 43, 48);
	  COL_TRI(562, 48, 563);
	  COL_TRI(563, 46, 504);
	  COL_TRI(563, 48, 46);
	  COL_TRI(564, 50, 49);
	  COL_TRI(564, 49, 560);
	  COL_TRI(567, 1136, 1137);
	  COL_TRI(504, 46, 35);
	  COL_TRI(519, 184, 34);
	  COL_TRI(519, 34, 1140);
	  COL_TRI(565, 566, 567);
	  COL_TRI(566, 1139, 1136);
	  COL_TRI(566, 1136, 567);
	  COL_TRI(568, 567, 570);
	  COL_TRI(565, 567, 568);
	  COL_TRI(567, 1137, 570);
	  COL_TRI(569, 521, 1139);
	  COL_TRI(569, 1139, 566);
	  COL_TRI(570, 1137, 521);
	  COL_TRI(568, 570, 571);
	  COL_TRI(571, 570, 569);
	  COL_TRI(570, 521, 569);
	  COL_TRI(571, 569, 572);
	  COL_TRI(572, 569, 566);
	  COL_TRI(572, 566, 565);
	  COL_TRI(573, 574, 575);
	  COL_TRI(573, 1153, 574);
	  COL_TRI(579, 581, 192);
	  COL_TRI(574, 1154, 593);
	  COL_TRI(575, 593, 597);
	  COL_TRI(574, 593, 575);
	  COL_TRI(573, 575, 589);
	  COL_TRI(575, 597, 589);
	  COL_TRI(576, 578, 579);
	  COL_TRI(576, 579, 577);
	  COL_TRI(577, 579, 53);
	  COL_TRI(578, 581, 579);
	  COL_TRI(579, 192, 53);
	  COL_TRI(578, 1155, 581);
	  COL_TRI(580, 582, 581);
	  COL_TRI(581, 1155, 580);
	  COL_TRI(196, 192, 581);
	  COL_TRI(582, 196, 581);
	  COL_TRI(577, 53, 54);
	  COL_TRI(193, 191, 578);
	  COL_TRI(191, 1155, 578);
	  COL_TRI(191, 190, 1155);
	  COL_TRI(580, 1155, 190);
	  COL_TRI(55, 584, 587);
	  COL_TRI(580, 190, 59);
	  COL_TRI(193, 578, 576);
	  COL_TRI(583, 194, 55);
	  COL_TRI(583, 55, 587);
	  COL_TRI(55, 196, 582);
	  COL_TRI(55, 582, 584);
	  COL_TRI(60, 1160, 580);
	  COL_TRI(584, 582, 585);
	  COL_TRI(585, 582, 580);
	  COL_TRI(585, 1159, 584);
	  COL_TRI(584, 571, 587);
	  COL_TRI(586, 585, 588);
	  COL_TRI(585, 1160, 588);
	  COL_TRI(585, 580, 1160);
	  COL_TRI(586, 1159, 585);
	  COL_TRI(586, 572, 1159);
	  COL_TRI(587, 571, 572);
	  COL_TRI(587, 572, 586);
	  COL_TRI(60, 580, 59);
	  COL_TRI(583, 587, 586);
	  COL_TRI(588, 195, 586);
	  COL_TRI(588, 56, 195);
	  COL_TRI(56, 588, 1160);
	  COL_TRI(195, 1158, 586);
	  COL_TRI(56, 1160, 60);
	  COL_TRI(194, 1158, 195);
	  COL_TRI(194, 583, 1158);
	  COL_TRI(583, 586, 1158);
	  COL_TRI(589, 590, 1157);
	  COL_TRI(590, 1161, 1157);
	  COL_TRI(589, 1156, 590);
	  COL_TRI(589, 1157, 573);
	  COL_TRI(589, 597, 1156);
	  COL_TRI(591, 592, 1162);
	  COL_TRI(591, 1163, 592);
	  COL_TRI(592, 1163, 1164);
	  COL_TRI(593, 595, 1162);
	  COL_TRI(593, 1162, 592);
	  COL_TRI(594, 591, 1162);
	  COL_TRI(595, 594, 1162);
	  COL_TRI(596, 1156, 597);
	  COL_TRI(596, 597, 592);
	  COL_TRI(596, 592, 1164);
	  COL_TRI(597, 593, 592);
	  COL_TRI(593, 1154, 595);
	  COL_TRI(598, 601, 600);
	  COL_TRI(62, 1167, 602);
	  COL_TRI(599, 1165, 598);
	  COL_TRI(600, 601, 66);
	  COL_TRI(598, 1165, 601);
	  COL_TRI(577, 601, 1166);
	  COL_TRI(577, 66, 601);
	  COL_TRI(601, 1165, 1166);
	  COL_TRI(600, 66, 65);
	  COL_TRI(599, 1166, 1165);
	  COL_TRI(602, 1166, 599);
	  COL_TRI(602, 1167, 1166);
	  COL_TRI(576, 1166, 1167);
	  COL_TRI(576, 577, 1166);
	  COL_TRI(62, 199, 1167);
	  COL_TRI(199, 576, 1167);
	  COL_TRI(199, 193, 576);
	  COL_TRI(207, 607, 603);
	  COL_TRI(207, 206, 607);
	  COL_TRI(208, 207, 603);
	  COL_TRI(603, 607, 1168);
	  COL_TRI(603, 1168, 605);
	  COL_TRI(604, 603, 605);
	  COL_TRI(208, 603, 604);
	  COL_TRI(602, 607, 62);
	  COL_TRI(605, 1168, 205);
	  COL_TRI(605, 205, 67);
	  COL_TRI(604, 605, 606);
	  COL_TRI(606, 605, 67);
	  COL_TRI(606, 67, 68);
	  COL_TRI(577, 54, 66);
	  COL_TRI(599, 1168, 607);
	  COL_TRI(602, 599, 607);
	  COL_TRI(608, 1170, 1171);
	  COL_TRI(607, 206, 62);
	  COL_TRI(600, 65, 1168);
	  COL_TRI(65, 205, 1168);
	  COL_TRI(599, 600, 1168);
	  COL_TRI(599, 598, 600);
	  COL_TRI(608, 1169, 1170);
	  COL_TRI(609, 645, 1172);
	  COL_TRI(609, 1172, 610);
	  COL_TRI(610, 1172, 1173);
	  COL_TRI(610, 1173, 611);
	  COL_TRI(611, 1173, 1174);
	  COL_TRI(611, 1174, 652);
	  COL_TRI(612, 650, 1175);
	  COL_TRI(612, 1175, 613);
	  COL_TRI(612, 652, 653);
	  COL_TRI(612, 653, 651);
	  COL_TRI(613, 1175, 1176);
	  COL_TRI(613, 1176, 614);
	  COL_TRI(614, 1176, 640);
	  COL_TRI(614, 640, 1178);
	  COL_TRI(615, 72, 617);
	  COL_TRI(615, 1179, 72);
	  COL_TRI(616, 232, 615);
	  COL_TRI(617, 72, 80);
	  COL_TRI(621, 1181, 1182);
	  COL_TRI(617, 80, 648);
	  COL_TRI(618, 76, 619);
	  COL_TRI(619, 76, 75);
	  COL_TRI(619, 75, 1180);
	  COL_TRI(618, 219, 76);
	  COL_TRI(620, 219, 618);
	  COL_TRI(620, 222, 219);
	  COL_TRI(608, 1181, 621);
	  COL_TRI(624, 229, 623);
	  COL_TRI(608, 1183, 1181);
	  COL_TRI(622, 1182, 624);
	  COL_TRI(621, 1182, 622);
	  COL_TRI(622, 624, 1184);
	  COL_TRI(623, 228, 625);
	  COL_TRI(623, 229, 228);
	  COL_TRI(625, 228, 227);
	  COL_TRI(625, 227, 626);
	  COL_TRI(626, 227, 225);
	  COL_TRI(626, 225, 1185);
	  COL_TRI(627, 629, 630);
	  COL_TRI(627, 628, 629);
	  COL_TRI(627, 211, 210);
	  COL_TRI(627, 210, 628);
	  COL_TRI(628, 210, 209);
	  COL_TRI(628, 209, 629);
	  COL_TRI(629, 209, 69);
	  COL_TRI(629, 69, 630);
	  COL_TRI(630, 69, 1186);
	  COL_TRI(630, 1186, 633);
	  COL_TRI(624, 623, 1184);
	  COL_TRI(631, 1187, 632);
	  COL_TRI(632, 1188, 1169);
	  COL_TRI(632, 1187, 1188);
	  COL_TRI(606, 211, 627);
	  COL_TRI(631, 1189, 1187);
	  COL_TRI(633, 1189, 631);
	  COL_TRI(633, 1186, 1189);
	  COL_TRI(634, 208, 604);
	  COL_TRI(634, 604, 1185);
	  COL_TRI(604, 627, 1185);
	  COL_TRI(604, 606, 627);
	  COL_TRI(606, 68, 211);
	  COL_TRI(216, 220, 79);
	  COL_TRI(78, 1190, 223);
	  COL_TRI(78, 81, 1190);
	  COL_TRI(215, 226, 81);
	  COL_TRI(215, 81, 78);
	  COL_TRI(226, 215, 214);
	  COL_TRI(226, 214, 224);
	  COL_TRI(225, 224, 214);
	  COL_TRI(225, 214, 634);
	  COL_TRI(223, 1191, 79);
	  COL_TRI(216, 79, 1191);
	  COL_TRI(223, 1190, 1191);
	  COL_TRI(75, 636, 637);
	  COL_TRI(75, 637, 1180);
	  COL_TRI(635, 637, 644);
	  COL_TRI(636, 644, 637);
	  COL_TRI(637, 635, 616);
	  COL_TRI(637, 616, 1180);
	  COL_TRI(636, 1192, 644);
	  COL_TRI(640, 641, 1178);
	  COL_TRI(635, 1193, 616);
	  COL_TRI(638, 635, 1194);
	  COL_TRI(638, 639, 635);
	  COL_TRI(635, 644, 1194);
	  COL_TRI(635, 639, 1193);
	  COL_TRI(639, 638, 1192);
	  COL_TRI(639, 1192, 636);
	  COL_TRI(640, 337, 641);
	  COL_TRI(642, 1194, 644);
	  COL_TRI(641, 643, 609);
	  COL_TRI(641, 609, 1178);
	  COL_TRI(337, 642, 641);
	  COL_TRI(642, 643, 641);
	  COL_TRI(643, 645, 609);
	  COL_TRI(643, 335, 645);
	  COL_TRI(642, 1195, 643);
	  COL_TRI(338, 335, 643);
	  COL_TRI(338, 643, 1195);
	  COL_TRI(644, 1195, 642);
	  COL_TRI(642, 336, 638);
	  COL_TRI(642, 638, 1194);
	  COL_TRI(620, 1196, 647);
	  COL_TRI(644, 1192, 338);
	  COL_TRI(644, 338, 1195);
	  COL_TRI(337, 336, 642);
	  COL_TRI(645, 337, 640);
	  COL_TRI(645, 335, 337);
	  COL_TRI(620, 648, 1196);
	  COL_TRI(646, 647, 1196);
	  COL_TRI(647, 649, 222);
	  COL_TRI(620, 647, 222);
	  COL_TRI(647, 1197, 1198);
	  COL_TRI(647, 1198, 649);
	  COL_TRI(646, 1197, 647);
	  COL_TRI(80, 1199, 1196);
	  COL_TRI(648, 80, 1196);
	  COL_TRI(646, 1196, 1199);
	  COL_TRI(649, 1200, 1199);
	  COL_TRI(646, 1199, 1200);
	  COL_TRI(649, 1198, 1200);
	  COL_TRI(653, 654, 1177);
	  COL_TRI(650, 339, 341);
	  COL_TRI(650, 341, 1174);
	  COL_TRI(612, 651, 339);
	  COL_TRI(612, 339, 650);
	  COL_TRI(651, 653, 1177);
	  COL_TRI(651, 1177, 342);
	  COL_TRI(651, 342, 339);
	  COL_TRI(652, 341, 653);
	  COL_TRI(652, 1174, 341);
	  COL_TRI(646, 1177, 654);
	  COL_TRI(646, 342, 1177);
	  COL_TRI(654, 653, 341);
	  COL_TRI(654, 341, 340);
	  COL_TRI(654, 340, 1198);
	  COL_TRI(654, 1198, 1197);
	  COL_TRI(654, 1197, 646);
	  COL_TRI(646, 1200, 342);
	  COL_TRI(232, 234, 70);
	  COL_TRI(232, 70, 1179);
	  COL_TRI(616, 233, 232);
	  COL_TRI(655, 1201, 1202);
	  COL_TRI(655, 1202, 1203);
	  COL_TRI(656, 1204, 1205);
	  COL_TRI(656, 1205, 1206);
	  COL_TRI(7, 1, 2);
	  COL_TRI(7, 2, 4);
	  COL_TRI(7, 1207, 1208);
	  COL_TRI(7, 1208, 1209);
	  COL_TRI(2, 1, 1210);
	  COL_TRI(4, 2, 0);
	  COL_TRI(2, 1210, 1211);
	  COL_TRI(0, 2, 1211);
	  COL_TRI(4, 0, 6);
	  COL_TRI(6, 3, 5);
	  COL_TRI(6, 0, 3);
	  COL_TRI(657, 0, 1211);
	  COL_TRI(657, 3, 0);
	  COL_TRI(658, 1212, 1211);
	  COL_TRI(658, 1211, 1210);
	  COL_TRI(657, 1213, 3);
	  COL_TRI(661, 351, 659);
	  COL_TRI(5, 1214, 1215);
	  COL_TRI(6, 5, 1215);
	  COL_TRI(6, 1215, 1207);
	  COL_TRI(4, 6, 1207);
	  COL_TRI(659, 349, 660);
	  COL_TRI(660, 349, 350);
	  COL_TRI(660, 350, 1216);
	  COL_TRI(659, 351, 349);
	  COL_TRI(666, 662, 1220);
	  COL_TRI(661, 352, 351);
	  COL_TRI(662, 663, 1217);
	  COL_TRI(663, 664, 1217);
	  COL_TRI(664, 1218, 1219);
	  COL_TRI(664, 1219, 1217);
	  COL_TRI(665, 662, 1217);
	  COL_TRI(665, 1217, 1219);
	  COL_TRI(666, 663, 662);
	  COL_TRI(667, 686, 665);
	  COL_TRI(667, 665, 1219);
	  COL_TRI(662, 665, 1221);
	  COL_TRI(667, 1219, 1218);
	  COL_TRI(668, 671, 84);
	  COL_TRI(669, 670, 671);
	  COL_TRI(669, 671, 668);
	  COL_TRI(670, 672, 671);
	  COL_TRI(671, 237, 84);
	  COL_TRI(671, 672, 237);
	  COL_TRI(673, 236, 674);
	  COL_TRI(237, 672, 240);
	  COL_TRI(672, 680, 240);
	  COL_TRI(672, 675, 677);
	  COL_TRI(672, 677, 680);
	  COL_TRI(670, 675, 672);
	  COL_TRI(668, 84, 673);
	  COL_TRI(673, 84, 236);
	  COL_TRI(674, 670, 669);
	  COL_TRI(674, 236, 670);
	  COL_TRI(236, 675, 670);
	  COL_TRI(675, 235, 86);
	  COL_TRI(675, 86, 677);
	  COL_TRI(236, 235, 675);
	  COL_TRI(546, 1145, 683);
	  COL_TRI(676, 1223, 1208);
	  COL_TRI(676, 1224, 1223);
	  COL_TRI(676, 1208, 680);
	  COL_TRI(677, 676, 680);
	  COL_TRI(682, 679, 686);
	  COL_TRI(680, 1223, 687);
	  COL_TRI(680, 1208, 1223);
	  COL_TRI(544, 683, 1225);
	  COL_TRI(544, 1225, 682);
	  COL_TRI(681, 1225, 683);
	  COL_TRI(667, 544, 682);
	  COL_TRI(667, 682, 686);
	  COL_TRI(679, 682, 1225);
	  COL_TRI(685, 1222, 85);
	  COL_TRI(666, 681, 683);
	  COL_TRI(683, 663, 666);
	  COL_TRI(666, 684, 688);
	  COL_TRI(666, 688, 681);
	  COL_TRI(684, 666, 1220);
	  COL_TRI(685, 1220, 1222);
	  COL_TRI(686, 677, 86);
	  COL_TRI(686, 86, 1221);
	  COL_TRI(677, 686, 679);
	  COL_TRI(677, 679, 676);
	  COL_TRI(88, 687, 685);
	  COL_TRI(88, 685, 85);
	  COL_TRI(88, 680, 687);
	  COL_TRI(88, 240, 680);
	  COL_TRI(679, 678, 676);
	  COL_TRI(687, 1224, 685);
	  COL_TRI(684, 1220, 685);
	  COL_TRI(684, 685, 1224);
	  COL_TRI(687, 1223, 1224);
	  COL_TRI(688, 684, 1224);
	  COL_TRI(678, 688, 1224);
	  COL_TRI(678, 1224, 676);
	  COL_TRI(679, 1225, 678);
	  COL_TRI(678, 1225, 681);
	  COL_TRI(678, 681, 688);
	  COL_TRI(689, 1229, 1230);
	  COL_TRI(663, 683, 1145);
	  COL_TRI(667, 545, 544);
	  COL_TRI(662, 1221, 1222);
	  COL_TRI(689, 1226, 1227);
	  COL_TRI(689, 1227, 1228);
	  COL_TRI(689, 1228, 1229);
	  COL_TRI(695, 356, 697);
	  COL_TRI(692, 1229, 1228);
	  COL_TRI(693, 1230, 1229);
	  COL_TRI(693, 1229, 692);
	  COL_TRI(691, 689, 1230);
	  COL_TRI(691, 1230, 693);
	  COL_TRI(692, 1228, 1231);
	  COL_TRI(694, 1227, 1226);
	  COL_TRI(694, 1226, 690);
	  COL_TRI(690, 1226, 689);
	  COL_TRI(690, 689, 691);
	  COL_TRI(695, 354, 356);
	  COL_TRI(696, 695, 697);
	  COL_TRI(697, 356, 353);
	  COL_TRI(353, 355, 1232);
	  COL_TRI(698, 353, 1232);
	  COL_TRI(697, 353, 698);
	  COL_TRI(698, 1232, 1233);
	  COL_TRI(709, 1234, 707);
	  COL_TRI(699, 700, 701);
	  COL_TRI(700, 702, 701);
	  COL_TRI(701, 703, 704);
	  COL_TRI(702, 703, 701);
	  COL_TRI(703, 705, 704);
	  COL_TRI(704, 705, 709);
	  COL_TRI(705, 1234, 709);
	  COL_TRI(706, 1235, 711);
	  COL_TRI(706, 707, 1235);
	  COL_TRI(706, 708, 707);
	  COL_TRI(710, 707, 1237);
	  COL_TRI(707, 708, 1237);
	  COL_TRI(708, 714, 715);
	  COL_TRI(708, 715, 1237);
	  COL_TRI(709, 707, 710);
	  COL_TRI(706, 711, 1236);
	  COL_TRI(711, 1238, 1236);
	  COL_TRI(711, 1239, 1238);
	  COL_TRI(712, 702, 1240);
	  COL_TRI(714, 1240, 715);
	  COL_TRI(714, 712, 1240);
	  COL_TRI(718, 262, 728);
	  COL_TRI(702, 700, 1240);
	  COL_TRI(713, 700, 699);
	  COL_TRI(715, 699, 1237);
	  COL_TRI(715, 713, 699);
	  COL_TRI(716, 259, 717);
	  COL_TRI(716, 717, 718);
	  COL_TRI(717, 262, 718);
	  COL_TRI(718, 728, 1241);
	  COL_TRI(723, 1245, 1246);
	  COL_TRI(719, 1242, 260);
	  COL_TRI(720, 721, 1242);
	  COL_TRI(721, 260, 1242);
	  COL_TRI(722, 1243, 1244);
	  COL_TRI(722, 736, 1243);
	  COL_TRI(723, 740, 1245);
	  COL_TRI(726, 1252, 1253);
	  COL_TRI(724, 1247, 1248);
	  COL_TRI(724, 1248, 1249);
	  COL_TRI(725, 696, 1248);
	  COL_TRI(725, 1248, 1247);
	  COL_TRI(724, 1249, 1250);
	  COL_TRI(726, 1251, 1252);
	  COL_TRI(727, 258, 719);
	  COL_TRI(717, 727, 262);
	  COL_TRI(727, 260, 262);
	  COL_TRI(727, 719, 260);
	  COL_TRI(728, 721, 720);
	  COL_TRI(728, 720, 1241);
	  COL_TRI(717, 259, 112);
	  COL_TRI(717, 112, 729);
	  COL_TRI(112, 1254, 729);
	  COL_TRI(112, 256, 1254);
	  COL_TRI(727, 717, 729);
	  COL_TRI(727, 729, 1255);
	  COL_TRI(729, 1254, 733);
	  COL_TRI(729, 733, 1255);
	  COL_TRI(721, 728, 730);
	  COL_TRI(721, 730, 1256);
	  COL_TRI(730, 1257, 732);
	  COL_TRI(730, 732, 1256);
	  COL_TRI(728, 262, 113);
	  COL_TRI(728, 113, 730);
	  COL_TRI(113, 1257, 730);
	  COL_TRI(113, 1258, 1257);
	  COL_TRI(731, 113, 261);
	  COL_TRI(732, 261, 1256);
	  COL_TRI(734, 1259, 735);
	  COL_TRI(261, 260, 721);
	  COL_TRI(261, 721, 1256);
	  COL_TRI(733, 257, 1255);
	  COL_TRI(733, 111, 257);
	  COL_TRI(257, 727, 1255);
	  COL_TRI(257, 258, 727);
	  COL_TRI(724, 1250, 734);
	  COL_TRI(734, 1250, 1259);
	  COL_TRI(739, 696, 725);
	  COL_TRI(735, 1259, 1244);
	  COL_TRI(735, 1244, 1243);
	  COL_TRI(736, 1260, 737);
	  COL_TRI(737, 1260, 1261);
	  COL_TRI(737, 1261, 738);
	  COL_TRI(738, 1261, 716);
	  COL_TRI(738, 716, 1241);
	  COL_TRI(736, 722, 1260);
	  COL_TRI(720, 1263, 741);
	  COL_TRI(740, 1233, 739);
	  COL_TRI(739, 1233, 696);
	  COL_TRI(740, 723, 1233);
	  COL_TRI(741, 1262, 742);
	  COL_TRI(742, 1262, 1246);
	  COL_TRI(742, 1246, 1245);
	  COL_TRI(741, 1263, 1262);
	  COL_TRI(720, 719, 1263);
	  COL_TRI(743, 360, 357);
	  COL_TRI(743, 357, 745);
	  COL_TRI(744, 360, 743);
	  COL_TRI(357, 359, 1264);
	  COL_TRI(745, 357, 1264);
	  COL_TRI(745, 1264, 1265);
	  COL_TRI(744, 749, 360);
	  COL_TRI(746, 1266, 1265);
	  COL_TRI(746, 1265, 747);
	  COL_TRI(747, 1265, 744);
	  COL_TRI(266, 1267, 267);
	  COL_TRI(747, 744, 748);
	  COL_TRI(748, 744, 778);
	  COL_TRI(749, 358, 360);
	  COL_TRI(266, 750, 1267);
	  COL_TRI(750, 1268, 1269);
	  COL_TRI(750, 1269, 1267);
	  COL_TRI(751, 1271, 752);
	  COL_TRI(752, 1271, 1272);
	  COL_TRI(752, 1272, 753);
	  COL_TRI(753, 1272, 1273);
	  COL_TRI(753, 1273, 1274);
	  COL_TRI(751, 754, 1271);
	  COL_TRI(754, 774, 1275);
	  COL_TRI(754, 751, 774);
	  COL_TRI(755, 1276, 756);
	  COL_TRI(755, 1277, 1276);
	  COL_TRI(761, 1280, 762);
	  COL_TRI(756, 1276, 1278);
	  COL_TRI(756, 1278, 757);
	  COL_TRI(757, 1278, 759);
	  COL_TRI(757, 759, 758);
	  COL_TRI(758, 759, 767);
	  COL_TRI(759, 766, 767);
	  COL_TRI(760, 1279, 761);
	  COL_TRI(761, 1279, 1280);
	  COL_TRI(765, 1286, 1287);
	  COL_TRI(762, 1280, 1281);
	  COL_TRI(762, 1281, 1284);
	  COL_TRI(760, 1282, 1279);
	  COL_TRI(763, 1285, 764);
	  COL_TRI(764, 1285, 1286);
	  COL_TRI(764, 1286, 765);
	  COL_TRI(765, 1287, 1288);
	  COL_TRI(763, 1289, 1285);
	  COL_TRI(766, 769, 767);
	  COL_TRI(767, 769, 768);
	  COL_TRI(766, 1283, 769);
	  COL_TRI(768, 769, 763);
	  COL_TRI(769, 1289, 763);
	  COL_TRI(769, 1283, 1289);
	  COL_TRI(758, 767, 771);
	  COL_TRI(770, 763, 1284);
	  COL_TRI(770, 768, 763);
	  COL_TRI(767, 768, 771);
	  COL_TRI(771, 768, 770);
	  COL_TRI(771, 770, 772);
	  COL_TRI(772, 770, 773);
	  COL_TRI(773, 770, 1284);
	  COL_TRI(773, 1284, 1281);
	  COL_TRI(772, 773, 774);
	  COL_TRI(774, 773, 775);
	  COL_TRI(775, 773, 1281);
	  COL_TRI(774, 775, 1275);
	  COL_TRI(266, 270, 780);
	  COL_TRI(751, 758, 771);
	  COL_TRI(751, 771, 772);
	  COL_TRI(751, 772, 774);
	  COL_TRI(750, 780, 777);
	  COL_TRI(750, 777, 776);
	  COL_TRI(776, 777, 1290);
	  COL_TRI(777, 268, 1290);
	  COL_TRI(266, 780, 750);
	  COL_TRI(778, 267, 1267);
	  COL_TRI(778, 1267, 1270);
	  COL_TRI(779, 1291, 1266);
	  COL_TRI(779, 1266, 746);
	  COL_TRI(780, 117, 781);
	  COL_TRI(780, 270, 117);
	  COL_TRI(117, 1292, 781);
	  COL_TRI(117, 1293, 1292);
	  COL_TRI(269, 777, 1294);
	  COL_TRI(777, 780, 781);
	  COL_TRI(777, 781, 1294);
	  COL_TRI(781, 782, 1294);
	  COL_TRI(781, 1292, 782);
	  COL_TRI(782, 269, 1294);
	  COL_TRI(782, 783, 269);
	  COL_TRI(783, 117, 269);
	  COL_TRI(269, 268, 777);
	  COL_TRI(786, 821, 799);
	  COL_TRI(784, 1295, 785);
	  COL_TRI(785, 1295, 1291);
	  COL_TRI(785, 1291, 779);
	  COL_TRI(784, 1296, 1295);
	  COL_TRI(776, 1296, 784);
	  COL_TRI(776, 1290, 1296);
	  COL_TRI(748, 778, 1270);
	  COL_TRI(786, 799, 1297);
	  COL_TRI(790, 791, 1299);
	  COL_TRI(787, 786, 1297);
	  COL_TRI(787, 1297, 1298);
	  COL_TRI(788, 787, 797);
	  COL_TRI(787, 1298, 797);
	  COL_TRI(789, 1298, 806);
	  COL_TRI(789, 806, 808);
	  COL_TRI(789, 808, 812);
	  COL_TRI(789, 797, 1298);
	  COL_TRI(791, 792, 1299);
	  COL_TRI(792, 1300, 1299);
	  COL_TRI(792, 795, 1300);
	  COL_TRI(793, 1299, 1300);
	  COL_TRI(793, 790, 1299);
	  COL_TRI(794, 793, 1300);
	  COL_TRI(795, 794, 1300);
	  COL_TRI(796, 1301, 798);
	  COL_TRI(797, 798, 1301);
	  COL_TRI(796, 798, 812);
	  COL_TRI(798, 789, 812);
	  COL_TRI(798, 797, 789);
	  COL_TRI(799, 796, 812);
	  COL_TRI(796, 800, 1301);
	  COL_TRI(800, 796, 799);
	  COL_TRI(801, 1302, 1303);
	  COL_TRI(801, 1303, 1304);
	  COL_TRI(802, 1303, 1302);
	  COL_TRI(803, 1305, 1306);
	  COL_TRI(803, 1306, 1307);
	  COL_TRI(790, 793, 1311);
	  COL_TRI(804, 1309, 805);
	  COL_TRI(804, 1310, 1309);
	  COL_TRI(805, 1306, 1305);
	  COL_TRI(805, 1305, 804);
	  COL_TRI(804, 1305, 803);
	  COL_TRI(804, 803, 1310);
	  COL_TRI(799, 1314, 807);
	  COL_TRI(790, 1311, 1312);
	  COL_TRI(806, 1297, 808);
	  COL_TRI(806, 1298, 1297);
	  COL_TRI(807, 808, 1297);
	  COL_TRI(799, 807, 1297);
	  COL_TRI(807, 817, 808);
	  COL_TRI(808, 817, 1313);
	  COL_TRI(808, 1313, 812);
	  COL_TRI(809, 1315, 810);
	  COL_TRI(810, 1316, 809);
	  COL_TRI(810, 1317, 1316);
	  COL_TRI(811, 1318, 1319);
	  COL_TRI(811, 1319, 1320);
	  COL_TRI(811, 1320, 1321);
	  COL_TRI(812, 1313, 1314);
	  COL_TRI(812, 1314, 799);
	  COL_TRI(814, 1325, 816);
	  COL_TRI(801, 1304, 1322);
	  COL_TRI(801, 1322, 1323);
	  COL_TRI(802, 1308, 1303);
	  COL_TRI(813, 951, 814);
	  COL_TRI(813, 814, 816);
	  COL_TRI(814, 1324, 1325);
	  COL_TRI(807, 1324, 814);
	  COL_TRI(815, 813, 816);
	  COL_TRI(815, 816, 1326);
	  COL_TRI(816, 817, 1326);
	  COL_TRI(816, 1325, 817);
	  COL_TRI(817, 807, 818);
	  COL_TRI(817, 818, 1326);
	  COL_TRI(818, 815, 1326);
	  COL_TRI(818, 950, 815);
	  COL_TRI(814, 951, 950);
	  COL_TRI(814, 950, 818);
	  COL_TRI(807, 814, 818);
	  COL_TRI(819, 820, 1327);
	  COL_TRI(820, 787, 788);
	  COL_TRI(820, 788, 1327);
	  COL_TRI(821, 1327, 788);
	  COL_TRI(822, 1067, 1327);
	  COL_TRI(819, 1327, 1067);
	  COL_TRI(821, 822, 1327);
	  COL_TRI(822, 1328, 1067);
	  COL_TRI(786, 822, 821);
	  COL_TRI(786, 823, 822);
	  COL_TRI(823, 1328, 822);
	  COL_TRI(823, 1329, 1328);
	  COL_TRI(787, 820, 823);
	  COL_TRI(787, 823, 786);
	  COL_TRI(820, 1329, 823);
	  COL_TRI(820, 819, 1329);
	  COL_TRI(825, 11, 1330);
	  COL_TRI(9, 15, 12);
	  COL_TRI(9, 12, 11);
	  COL_TRI(10, 15, 9);
	  COL_TRI(11, 12, 13);
	  COL_TRI(11, 13, 8);
	  COL_TRI(10, 14, 15);
	  COL_TRI(8, 14, 10);
	  COL_TRI(8, 13, 14);
	  COL_TRI(824, 9, 825);
	  COL_TRI(825, 9, 11);
	  COL_TRI(826, 828, 13);
	  COL_TRI(11, 8, 1331);
	  COL_TRI(11, 1331, 1330);
	  COL_TRI(824, 10, 9);
	  COL_TRI(8, 824, 1331);
	  COL_TRI(8, 10, 824);
	  COL_TRI(826, 12, 1332);
	  COL_TRI(826, 13, 12);
	  COL_TRI(826, 1333, 828);
	  COL_TRI(831, 1336, 1335);
	  COL_TRI(827, 1332, 12);
	  COL_TRI(827, 12, 15);
	  COL_TRI(827, 1334, 1332);
	  COL_TRI(828, 14, 13);
	  COL_TRI(828, 829, 14);
	  COL_TRI(829, 15, 14);
	  COL_TRI(829, 830, 15);
	  COL_TRI(830, 827, 15);
	  COL_TRI(831, 828, 1333);
	  COL_TRI(831, 1335, 828);
	  COL_TRI(829, 828, 1335);
	  COL_TRI(831, 1337, 1336);
	  COL_TRI(832, 1334, 827);
	  COL_TRI(832, 835, 1338);
	  COL_TRI(832, 1339, 835);
	  COL_TRI(832, 827, 1339);
	  COL_TRI(829, 1335, 1340);
	  COL_TRI(833, 827, 830);
	  COL_TRI(833, 1339, 827);
	  COL_TRI(834, 1337, 1341);
	  COL_TRI(834, 1336, 1337);
	  COL_TRI(834, 1335, 1336);
	  COL_TRI(834, 1340, 1335);
	  COL_TRI(835, 833, 1342);
	  COL_TRI(835, 1339, 833);
	  COL_TRI(840, 1344, 1345);
	  COL_TRI(836, 1338, 835);
	  COL_TRI(836, 835, 1342);
	  COL_TRI(837, 389, 838);
	  COL_TRI(838, 389, 361);
	  COL_TRI(838, 361, 839);
	  COL_TRI(839, 361, 388);
	  COL_TRI(839, 388, 1343);
	  COL_TRI(837, 363, 389);
	  COL_TRI(841, 840, 1346);
	  COL_TRI(842, 1344, 1347);
	  COL_TRI(842, 1345, 1344);
	  COL_TRI(840, 1345, 1346);
	  COL_TRI(841, 1346, 1348);
	  COL_TRI(842, 1348, 1346);
	  COL_TRI(842, 1346, 1345);
	  COL_TRI(125, 557, 1349);
	  COL_TRI(844, 1351, 1352);
	  COL_TRI(125, 132, 557);
	  COL_TRI(557, 1151, 851);
	  COL_TRI(843, 1349, 851);
	  COL_TRI(843, 851, 1350);
	  COL_TRI(273, 851, 1151);
	  COL_TRI(557, 851, 1349);
	  COL_TRI(287, 273, 1151);
	  COL_TRI(844, 845, 1351);
	  COL_TRI(847, 1356, 1357);
	  COL_TRI(844, 1353, 1354);
	  COL_TRI(844, 1354, 845);
	  COL_TRI(845, 1354, 1355);
	  COL_TRI(845, 1355, 1351);
	  COL_TRI(846, 1355, 1354);
	  COL_TRI(846, 1354, 1353);
	  COL_TRI(848, 1358, 847);
	  COL_TRI(848, 847, 1359);
	  COL_TRI(847, 1358, 1356);
	  COL_TRI(272, 849, 850);
	  COL_TRI(272, 279, 849);
	  COL_TRI(849, 853, 1360);
	  COL_TRI(849, 1360, 850);
	  COL_TRI(843, 850, 1360);
	  COL_TRI(129, 126, 1360);
	  COL_TRI(129, 1360, 853);
	  COL_TRI(851, 122, 1350);
	  COL_TRI(843, 1350, 850);
	  COL_TRI(125, 843, 120);
	  COL_TRI(125, 1349, 843);
	  COL_TRI(850, 1350, 122);
	  COL_TRI(850, 122, 272);
	  COL_TRI(851, 273, 122);
	  COL_TRI(854, 281, 130);
	  COL_TRI(282, 852, 126);
	  COL_TRI(852, 1360, 126);
	  COL_TRI(852, 843, 1360);
	  COL_TRI(852, 857, 843);
	  COL_TRI(120, 857, 283);
	  COL_TRI(120, 843, 857);
	  COL_TRI(853, 854, 130);
	  COL_TRI(853, 130, 129);
	  COL_TRI(857, 858, 1362);
	  COL_TRI(854, 1361, 281);
	  COL_TRI(855, 279, 278);
	  COL_TRI(855, 849, 279);
	  COL_TRI(856, 855, 278);
	  COL_TRI(856, 278, 280);
	  COL_TRI(857, 852, 858);
	  COL_TRI(858, 860, 1362);
	  COL_TRI(858, 954, 860);
	  COL_TRI(852, 282, 131);
	  COL_TRI(852, 131, 858);
	  COL_TRI(131, 954, 858);
	  COL_TRI(131, 956, 954);
	  COL_TRI(859, 131, 284);
	  COL_TRI(860, 284, 1362);
	  COL_TRI(284, 283, 857);
	  COL_TRI(284, 857, 1362);
	  COL_TRI(849, 854, 853);
	  COL_TRI(849, 855, 854);
	  COL_TRI(855, 1361, 854);
	  COL_TRI(855, 856, 1361);
	  COL_TRI(861, 1356, 1358);
	  COL_TRI(861, 1358, 848);
	  COL_TRI(365, 391, 1363);
	  COL_TRI(365, 1363, 1364);
	  COL_TRI(391, 1365, 1363);
	  COL_TRI(391, 393, 1365);
	  COL_TRI(862, 1366, 394);
	  COL_TRI(862, 394, 396);
	  COL_TRI(863, 370, 403);
	  COL_TRI(863, 403, 1367);
	  COL_TRI(403, 402, 1368);
	  COL_TRI(403, 1368, 1367);
	  COL_TRI(397, 368, 1369);
	  COL_TRI(397, 1369, 1370);
	  COL_TRI(368, 1371, 1369);
	  COL_TRI(368, 399, 1371);
	  COL_TRI(864, 371, 401);
	  COL_TRI(864, 401, 1372);
	  COL_TRI(865, 1373, 1374);
	  COL_TRI(865, 1374, 922);
	  COL_TRI(866, 1375, 1373);
	  COL_TRI(866, 1373, 865);
	  COL_TRI(867, 1376, 868);
	  COL_TRI(868, 1376, 1377);
	  COL_TRI(868, 1377, 869);
	  COL_TRI(869, 1377, 1378);
	  COL_TRI(133, 1384, 367);
	  COL_TRI(869, 1378, 1379);
	  COL_TRI(867, 894, 1376);
	  COL_TRI(870, 1380, 1381);
	  COL_TRI(870, 1381, 871);
	  COL_TRI(870, 1382, 1380);
	  COL_TRI(871, 1383, 870);
	  COL_TRI(133, 367, 395);
	  COL_TRI(364, 392, 1385);
	  COL_TRI(364, 1385, 136);
	  COL_TRI(872, 881, 873);
	  COL_TRI(872, 873, 878);
	  COL_TRI(873, 874, 878);
	  COL_TRI(879, 881, 888);
	  COL_TRI(874, 877, 878);
	  COL_TRI(875, 876, 884);
	  COL_TRI(876, 885, 884);
	  COL_TRI(877, 874, 888);
	  COL_TRI(877, 888, 1386);
	  COL_TRI(878, 877, 1386);
	  COL_TRI(878, 1386, 872);
	  COL_TRI(880, 881, 872);
	  COL_TRI(879, 1387, 881);
	  COL_TRI(881, 880, 888);
	  COL_TRI(882, 875, 884);
	  COL_TRI(882, 887, 875);
	  COL_TRI(872, 1386, 880);
	  COL_TRI(883, 1388, 887);
	  COL_TRI(883, 887, 886);
	  COL_TRI(884, 885, 1389);
	  COL_TRI(885, 876, 886);
	  COL_TRI(885, 886, 1389);
	  COL_TRI(886, 889, 1389);
	  COL_TRI(887, 889, 886);
	  COL_TRI(884, 1389, 882);
	  COL_TRI(404, 138, 1391);
	  COL_TRI(888, 880, 1386);
	  COL_TRI(889, 887, 882);
	  COL_TRI(882, 1389, 889);
	  COL_TRI(400, 398, 1390);
	  COL_TRI(400, 1390, 295);
	  COL_TRI(404, 371, 138);
	  COL_TRI(890, 133, 891);
	  COL_TRI(890, 891, 1392);
	  COL_TRI(891, 296, 1393);
	  COL_TRI(891, 1393, 1392);
	  COL_TRI(290, 870, 891);
	  COL_TRI(864, 295, 138);
	  COL_TRI(864, 1394, 295);
	  COL_TRI(890, 1395, 136);
	  COL_TRI(400, 1393, 369);
	  COL_TRI(890, 136, 133);
	  COL_TRI(364, 1395, 1396);
	  COL_TRI(892, 137, 1396);
	  COL_TRI(892, 1396, 1397);
	  COL_TRI(364, 1396, 366);
	  COL_TRI(400, 1394, 1393);
	  COL_TRI(290, 1382, 870);
	  COL_TRI(893, 910, 913);
	  COL_TRI(893, 913, 1382);
	  COL_TRI(290, 893, 1382);
	  COL_TRI(290, 300, 893);
	  COL_TRI(892, 913, 910);
	  COL_TRI(892, 910, 299);
	  COL_TRI(894, 867, 1398);
	  COL_TRI(894, 1398, 1399);
	  COL_TRI(896, 1403, 1404);
	  COL_TRI(870, 1379, 1378);
	  COL_TRI(870, 1378, 891);
	  COL_TRI(301, 895, 1400);
	  COL_TRI(895, 906, 916);
	  COL_TRI(895, 916, 1400);
	  COL_TRI(302, 1401, 916);
	  COL_TRI(302, 916, 906);
	  COL_TRI(301, 1400, 1402);
	  COL_TRI(900, 1410, 898);
	  COL_TRI(896, 1405, 1403);
	  COL_TRI(897, 899, 1406);
	  COL_TRI(897, 1406, 1407);
	  COL_TRI(898, 897, 1407);
	  COL_TRI(898, 1407, 900);
	  COL_TRI(899, 1408, 1409);
	  COL_TRI(899, 1410, 1408);
	  COL_TRI(900, 1411, 1410);
	  COL_TRI(899, 904, 1410);
	  COL_TRI(898, 1410, 904);
	  COL_TRI(900, 1406, 1411);
	  COL_TRI(896, 1412, 901);
	  COL_TRI(896, 1404, 1412);
	  COL_TRI(901, 902, 1405);
	  COL_TRI(902, 903, 1403);
	  COL_TRI(902, 1403, 1405);
	  COL_TRI(901, 1405, 896);
	  COL_TRI(902, 905, 903);
	  COL_TRI(903, 905, 1412);
	  COL_TRI(903, 1412, 1413);
	  COL_TRI(903, 1413, 1414);
	  COL_TRI(901, 1412, 905);
	  COL_TRI(897, 904, 899);
	  COL_TRI(905, 902, 901);
	  COL_TRI(895, 301, 144);
	  COL_TRI(904, 897, 898);
	  COL_TRI(900, 1407, 1406);
	  COL_TRI(906, 907, 1415);
	  COL_TRI(906, 895, 907);
	  COL_TRI(907, 908, 1415);
	  COL_TRI(907, 1065, 908);
	  COL_TRI(297, 910, 1416);
	  COL_TRI(895, 144, 907);
	  COL_TRI(144, 1065, 907);
	  COL_TRI(144, 304, 1065);
	  COL_TRI(303, 302, 906);
	  COL_TRI(303, 906, 1415);
	  COL_TRI(908, 303, 1415);
	  COL_TRI(908, 145, 303);
	  COL_TRI(297, 299, 910);
	  COL_TRI(910, 911, 1416);
	  COL_TRI(909, 297, 1416);
	  COL_TRI(893, 300, 143);
	  COL_TRI(893, 143, 911);
	  COL_TRI(143, 298, 1417);
	  COL_TRI(143, 1417, 911);
	  COL_TRI(910, 893, 911);
	  COL_TRI(915, 1399, 1398);
	  COL_TRI(911, 1417, 909);
	  COL_TRI(911, 909, 1416);
	  COL_TRI(912, 1375, 866);
	  COL_TRI(912, 1418, 1375);
	  COL_TRI(913, 1418, 912);
	  COL_TRI(913, 1397, 1418);
	  COL_TRI(914, 1419, 915);
	  COL_TRI(915, 1419, 1399);
	  COL_TRI(919, 1372, 1422);
	  COL_TRI(914, 1420, 1419);
	  COL_TRI(916, 1420, 914);
	  COL_TRI(916, 1401, 1420);
	  COL_TRI(917, 1421, 918);
	  COL_TRI(918, 1421, 1402);
	  COL_TRI(918, 1402, 1400);
	  COL_TRI(917, 1422, 1421);
	  COL_TRI(919, 1422, 917);
	  COL_TRI(923, 406, 373);
	  COL_TRI(920, 1372, 919);
	  COL_TRI(920, 1423, 1372);
	  COL_TRI(921, 1423, 920);
	  COL_TRI(921, 1424, 1423);
	  COL_TRI(922, 1424, 921);
	  COL_TRI(922, 1374, 1424);
	  COL_TRI(923, 373, 925);
	  COL_TRI(924, 406, 923);
	  COL_TRI(409, 1428, 1426);
	  COL_TRI(925, 373, 408);
	  COL_TRI(925, 408, 1425);
	  COL_TRI(924, 372, 406);
	  COL_TRI(410, 1426, 1427);
	  COL_TRI(410, 409, 1426);
	  COL_TRI(409, 411, 1428);
	  COL_TRI(930, 1430, 949);
	  COL_TRI(926, 1429, 376);
	  COL_TRI(926, 376, 415);
	  COL_TRI(927, 377, 376);
	  COL_TRI(927, 376, 1429);
	  COL_TRI(928, 1430, 930);
	  COL_TRI(928, 930, 929);
	  COL_TRI(929, 930, 931);
	  COL_TRI(930, 949, 931);
	  COL_TRI(929, 931, 1431);
	  COL_TRI(931, 1432, 1431);
	  COL_TRI(932, 1433, 934);
	  COL_TRI(933, 932, 934);
	  COL_TRI(934, 1433, 1434);
	  COL_TRI(934, 1434, 1435);
	  COL_TRI(933, 934, 1435);
	  COL_TRI(935, 933, 1435);
	  COL_TRI(936, 1435, 1434);
	  COL_TRI(936, 935, 1435);
	  COL_TRI(936, 960, 1436);
	  COL_TRI(936, 1437, 960);
	  COL_TRI(940, 924, 1425);
	  COL_TRI(937, 1438, 938);
	  COL_TRI(938, 1438, 1439);
	  COL_TRI(938, 943, 939);
	  COL_TRI(938, 1439, 943);
	  COL_TRI(938, 939, 1440);
	  COL_TRI(937, 938, 1440);
	  COL_TRI(937, 942, 1438);
	  COL_TRI(939, 1425, 1441);
	  COL_TRI(939, 1441, 1440);
	  COL_TRI(939, 940, 1425);
	  COL_TRI(940, 1442, 1443);
	  COL_TRI(940, 1443, 924);
	  COL_TRI(944, 961, 932);
	  COL_TRI(941, 1443, 1445);
	  COL_TRI(941, 924, 1443);
	  COL_TRI(937, 1440, 1444);
	  COL_TRI(942, 937, 1444);
	  COL_TRI(943, 1442, 940);
	  COL_TRI(943, 940, 939);
	  COL_TRI(948, 1441, 1425);
	  COL_TRI(945, 962, 946);
	  COL_TRI(946, 962, 1446);
	  COL_TRI(946, 1446, 1447);
	  COL_TRI(947, 944, 1440);
	  COL_TRI(947, 1440, 1441);
	  COL_TRI(948, 947, 1441);
	  COL_TRI(950, 936, 1436);
	  COL_TRI(941, 948, 1425);
	  COL_TRI(941, 1425, 924);
	  COL_TRI(949, 813, 1445);
	  COL_TRI(813, 815, 1445);
	  COL_TRI(950, 1436, 1445);
	  COL_TRI(815, 950, 1445);
	  COL_TRI(951, 959, 936);
	  COL_TRI(950, 951, 936);
	  COL_TRI(952, 1448, 957);
	  COL_TRI(952, 955, 959);
	  COL_TRI(952, 959, 1448);
	  COL_TRI(953, 936, 955);
	  COL_TRI(860, 954, 955);
	  COL_TRI(954, 953, 955);
	  COL_TRI(955, 1443, 859);
	  COL_TRI(955, 859, 860);
	  COL_TRI(956, 946, 954);
	  COL_TRI(957, 1448, 375);
	  COL_TRI(958, 957, 375);
	  COL_TRI(959, 412, 375);
	  COL_TRI(959, 375, 1448);
	  COL_TRI(941, 947, 948);
	  COL_TRI(941, 944, 947);
	  COL_TRI(941, 1445, 1436);
	  COL_TRI(941, 1436, 944);
	  COL_TRI(413, 416, 1447);
	  COL_TRI(960, 961, 944);
	  COL_TRI(961, 970, 932);
	  COL_TRI(960, 944, 1436);
	  COL_TRI(413, 1446, 962);
	  COL_TRI(413, 962, 414);
	  COL_TRI(413, 1447, 1446);
	  COL_TRI(964, 946, 1439);
	  COL_TRI(956, 1439, 946);
	  COL_TRI(962, 945, 1444);
	  COL_TRI(962, 1444, 1440);
	  COL_TRI(945, 969, 1444);
	  COL_TRI(945, 965, 969);
	  COL_TRI(963, 945, 946);
	  COL_TRI(963, 965, 945);
	  COL_TRI(964, 963, 946);
	  COL_TRI(965, 966, 161);
	  COL_TRI(860, 859, 284);
	  COL_TRI(946, 953, 954);
	  COL_TRI(859, 956, 131);
	  COL_TRI(965, 161, 969);
	  COL_TRI(968, 967, 321);
	  COL_TRI(966, 319, 161);
	  COL_TRI(966, 1449, 319);
	  COL_TRI(963, 967, 966);
	  COL_TRI(963, 966, 965);
	  COL_TRI(967, 1449, 966);
	  COL_TRI(967, 968, 1449);
	  COL_TRI(967, 963, 964);
	  COL_TRI(967, 964, 321);
	  COL_TRI(973, 1451, 1450);
	  COL_TRI(969, 321, 964);
	  COL_TRI(969, 161, 321);
	  COL_TRI(968, 321, 320);
	  COL_TRI(970, 973, 1450);
	  COL_TRI(970, 1450, 1437);
	  COL_TRI(971, 1437, 1450);
	  COL_TRI(972, 1450, 1451);
	  COL_TRI(972, 971, 1450);
	  COL_TRI(960, 971, 974);
	  COL_TRI(971, 960, 1437);
	  COL_TRI(973, 1452, 1451);
	  COL_TRI(961, 974, 973);
	  COL_TRI(961, 973, 970);
	  COL_TRI(974, 1452, 973);
	  COL_TRI(974, 1453, 1452);
	  COL_TRI(975, 1454, 1455);
	  COL_TRI(971, 1453, 974);
	  COL_TRI(960, 974, 961);
	  COL_TRI(971, 972, 1453);
	  COL_TRI(975, 378, 1454);
	  COL_TRI(976, 378, 975);
	  COL_TRI(976, 419, 378);
	  COL_TRI(977, 1456, 978);
	  COL_TRI(978, 1456, 1457);
	  COL_TRI(978, 1457, 976);
	  COL_TRI(977, 1458, 1456);
	  COL_TRI(976, 975, 978);
	  COL_TRI(977, 978, 975);
	  COL_TRI(977, 975, 1455);
	  COL_TRI(419, 1457, 1459);
	  COL_TRI(419, 1459, 417);
	  COL_TRI(378, 418, 1454);
	  COL_TRI(979, 980, 1460);
	  COL_TRI(980, 998, 1460);
	  COL_TRI(981, 1461, 985);
	  COL_TRI(982, 981, 1462);
	  COL_TRI(984, 1461, 981);
	  COL_TRI(985, 1461, 1041);
	  COL_TRI(985, 1464, 1467);
	  COL_TRI(985, 1465, 1464);
	  COL_TRI(985, 1002, 1466);
	  COL_TRI(985, 1466, 1465);
	  COL_TRI(986, 987, 988);
	  COL_TRI(987, 1468, 988);
	  COL_TRI(988, 1468, 1469);
	  COL_TRI(988, 1469, 991);
	  COL_TRI(989, 988, 991);
	  COL_TRI(989, 986, 988);
	  COL_TRI(990, 989, 991);
	  COL_TRI(991, 1469, 990);
	  COL_TRI(992, 993, 982);
	  COL_TRI(993, 992, 995);
	  COL_TRI(993, 995, 1470);
	  COL_TRI(994, 995, 996);
	  COL_TRI(995, 992, 996);
	  COL_TRI(994, 1470, 995);
	  COL_TRI(994, 997, 1470);
	  COL_TRI(992, 982, 1462);
	  COL_TRI(996, 992, 1462);
	  COL_TRI(994, 996, 1018);
	  COL_TRI(983, 996, 1462);
	  COL_TRI(997, 994, 1471);
	  COL_TRI(994, 1018, 1471);
	  COL_TRI(983, 1462, 981);
	  COL_TRI(983, 981, 1463);
	  COL_TRI(998, 1472, 1473);
	  COL_TRI(999, 1473, 1474);
	  COL_TRI(998, 1473, 999);
	  COL_TRI(999, 1474, 1000);
	  COL_TRI(1000, 1474, 1475);
	  COL_TRI(1000, 1475, 1476);
	  COL_TRI(1001, 1477, 1478);
	  COL_TRI(1001, 1479, 1477);
	  COL_TRI(1002, 1479, 1001);
	  COL_TRI(1003, 1466, 1001);
	  COL_TRI(1003, 1001, 1476);
	  COL_TRI(1004, 1480, 1005);
	  COL_TRI(1005, 1480, 979);
	  COL_TRI(1005, 979, 1460);
	  COL_TRI(1004, 1481, 1480);
	  COL_TRI(1006, 1482, 1481);
	  COL_TRI(1006, 1481, 1004);
	  COL_TRI(1007, 1482, 1041);
	  COL_TRI(1008, 1041, 1482);
	  COL_TRI(1009, 1002, 1483);
	  COL_TRI(1002, 1001, 1466);
	  COL_TRI(990, 674, 669);
	  COL_TRI(990, 669, 1479);
	  COL_TRI(669, 668, 1006);
	  COL_TRI(669, 1006, 1479);
	  COL_TRI(1006, 668, 673);
	  COL_TRI(1006, 673, 1484);
	  COL_TRI(1010, 986, 989);
	  COL_TRI(1010, 989, 1009);
	  COL_TRI(1009, 1483, 1010);
	  COL_TRI(1011, 1014, 1013);
	  COL_TRI(1012, 1013, 1485);
	  COL_TRI(1014, 1011, 1486);
	  COL_TRI(1013, 1014, 1485);
	  COL_TRI(1015, 1014, 1486);
	  COL_TRI(1012, 1485, 1487);
	  COL_TRI(1016, 1015, 1487);
	  COL_TRI(1016, 1488, 1015);
	  COL_TRI(1017, 1489, 1018);
	  COL_TRI(1018, 1489, 1471);
	  COL_TRI(1017, 1018, 1490);
	  COL_TRI(1019, 983, 1463);
	  COL_TRI(1019, 1463, 1490);
	  COL_TRI(1019, 1488, 1016);
	  COL_TRI(1019, 1016, 983);
	  COL_TRI(1018, 1488, 1019);
	  COL_TRI(983, 1016, 1485);
	  COL_TRI(983, 1485, 996);
	  COL_TRI(1020, 1491, 154);
	  COL_TRI(158, 1020, 154);
	  COL_TRI(154, 1491, 1492);
	  COL_TRI(154, 1492, 150);
	  COL_TRI(314, 1493, 1020);
	  COL_TRI(314, 1020, 158);
	  COL_TRI(314, 157, 1021);
	  COL_TRI(314, 1021, 1493);
	  COL_TRI(1021, 157, 1494);
	  COL_TRI(1022, 305, 153);
	  COL_TRI(157, 312, 1494);
	  COL_TRI(156, 1495, 1494);
	  COL_TRI(156, 1494, 312);
	  COL_TRI(307, 1023, 1495);
	  COL_TRI(307, 1495, 156);
	  COL_TRI(1022, 1496, 305);
	  COL_TRI(142, 909, 1013);
	  COL_TRI(1023, 305, 1496);
	  COL_TRI(1023, 307, 305);
	  COL_TRI(1022, 153, 150);
	  COL_TRI(1022, 150, 1492);
	  COL_TRI(909, 1417, 1011);
	  COL_TRI(909, 1011, 1013);
	  COL_TRI(146, 1011, 1417);
	  COL_TRI(1012, 1026, 1013);
	  COL_TRI(142, 1013, 155);
	  COL_TRI(155, 1013, 1026);
	  COL_TRI(146, 1417, 298);
	  COL_TRI(155, 1026, 317);
	  COL_TRI(147, 1486, 1011);
	  COL_TRI(147, 1011, 146);
	  COL_TRI(1012, 1497, 1026);
	  COL_TRI(316, 1497, 1012);
	  COL_TRI(316, 1012, 308);
	  COL_TRI(1024, 1025, 160);
	  COL_TRI(1025, 1497, 316);
	  COL_TRI(1025, 316, 160);
	  COL_TRI(1024, 160, 159);
	  COL_TRI(1026, 1027, 315);
	  COL_TRI(1027, 318, 315);
	  COL_TRI(1026, 315, 317);
	  COL_TRI(1027, 1028, 318);
	  COL_TRI(1028, 1027, 1025);
	  COL_TRI(1027, 1026, 1497);
	  COL_TRI(1027, 1497, 1025);
	  COL_TRI(1028, 1025, 1024);
	  COL_TRI(909, 142, 297);
	  COL_TRI(313, 1465, 147);
	  COL_TRI(985, 1041, 1008);
	  COL_TRI(1029, 1498, 1030);
	  COL_TRI(1029, 1030, 1499);
	  COL_TRI(313, 311, 1467);
	  COL_TRI(313, 1467, 1464);
	  COL_TRI(313, 1464, 1465);
	  COL_TRI(308, 985, 1467);
	  COL_TRI(308, 1467, 311);
	  COL_TRI(1003, 1017, 1465);
	  COL_TRI(1003, 1500, 1017);
	  COL_TRI(1030, 1032, 1501);
	  COL_TRI(1030, 1501, 1499);
	  COL_TRI(1031, 1033, 1501);
	  COL_TRI(1032, 1056, 1501);
	  COL_TRI(1031, 1501, 1056);
	  COL_TRI(1033, 1499, 1501);
	  COL_TRI(1036, 1032, 1035);
	  COL_TRI(1033, 984, 1499);
	  COL_TRI(1032, 1036, 1056);
	  COL_TRI(1034, 1035, 1033);
	  COL_TRI(1035, 1461, 984);
	  COL_TRI(1035, 984, 1033);
	  COL_TRI(1034, 1033, 1031);
	  COL_TRI(1032, 1030, 1461);
	  COL_TRI(1032, 1461, 1035);
	  COL_TRI(1036, 1035, 1034);
	  COL_TRI(1037, 1038, 1040);
	  COL_TRI(1038, 1041, 1498);
	  COL_TRI(1038, 1498, 1040);
	  COL_TRI(1037, 1040, 1039);
	  COL_TRI(1039, 1040, 1043);
	  COL_TRI(1043, 1007, 1502);
	  COL_TRI(1040, 1498, 1029);
	  COL_TRI(1040, 1029, 1043);
	  COL_TRI(1039, 1043, 1042);
	  COL_TRI(1041, 1038, 1502);
	  COL_TRI(1041, 1502, 1007);
	  COL_TRI(1042, 1502, 1057);
	  COL_TRI(1042, 1043, 1502);
	  COL_TRI(1038, 1057, 1502);
	  COL_TRI(1002, 1503, 1504);
	  COL_TRI(1043, 1029, 1007);
	  COL_TRI(1038, 1037, 1057);
	  COL_TRI(1018, 1014, 1488);
	  COL_TRI(996, 1485, 1014);
	  COL_TRI(996, 1014, 1018);
	  COL_TRI(1002, 1044, 1503);
	  COL_TRI(1048, 1046, 1506);
	  COL_TRI(1044, 1505, 1045);
	  COL_TRI(1044, 1045, 1503);
	  COL_TRI(1045, 1048, 1506);
	  COL_TRI(1045, 1505, 1048);
	  COL_TRI(1046, 1047, 1507);
	  COL_TRI(1047, 993, 1507);
	  COL_TRI(1052, 1509, 1054);
	  COL_TRI(1046, 1507, 1506);
	  COL_TRI(1049, 422, 1050);
	  COL_TRI(1050, 422, 423);
	  COL_TRI(1050, 423, 1508);
	  COL_TRI(421, 420, 422);
	  COL_TRI(1049, 421, 422);
	  COL_TRI(1051, 421, 1049);
	  COL_TRI(1051, 379, 421);
	  COL_TRI(732, 731, 261);
	  COL_TRI(1052, 1510, 1509);
	  COL_TRI(1053, 1510, 1052);
	  COL_TRI(1053, 1511, 1510);
	  COL_TRI(1054, 1509, 1055);
	  COL_TRI(1054, 1055, 1066);
	  COL_TRI(1055, 1453, 1066);
	  COL_TRI(1055, 1452, 1453);
	  COL_TRI(783, 1293, 117);
	  COL_TRI(731, 732, 1512);
	  COL_TRI(731, 1258, 113);
	  COL_TRI(1036, 1039, 1042);
	  COL_TRI(1056, 1036, 1042);
	  COL_TRI(168, 318, 1028);
	  COL_TRI(1031, 1028, 1024);
	  COL_TRI(1024, 159, 163);
	  COL_TRI(1031, 1024, 163);
	  COL_TRI(1058, 733, 1514);
	  COL_TRI(733, 1096, 1514);
	  COL_TRI(733, 1065, 1096);
	  COL_TRI(1059, 1096, 1065);
	  COL_TRI(733, 1058, 111);
	  COL_TRI(1063, 1064, 1517);
	  COL_TRI(1060, 319, 1449);
	  COL_TRI(1060, 1449, 1069);
	  COL_TRI(1061, 1515, 1516);
	  COL_TRI(1061, 1064, 1515);
	  COL_TRI(1061, 1517, 1064);
	  COL_TRI(1061, 1062, 1517);
	  COL_TRI(1062, 1518, 1517);
	  COL_TRI(1062, 1519, 1518);
	  COL_TRI(1063, 1102, 1064);
	  COL_TRI(1064, 436, 1515);
	  COL_TRI(1064, 433, 436);
	  COL_TRI(434, 433, 1102);
	  COL_TRI(430, 1518, 428);
	  COL_TRI(430, 1517, 1518);
	  COL_TRI(430, 1520, 1063);
	  COL_TRI(430, 432, 1520);
	  COL_TRI(908, 1254, 256);
	  COL_TRI(429, 428, 1518);
	  COL_TRI(434, 1102, 1521);
	  COL_TRI(1065, 304, 1059);
	  COL_TRI(908, 256, 145);
	  COL_TRI(1066, 1453, 819);
	  COL_TRI(1066, 819, 1068);
	  COL_TRI(972, 1328, 1329);
	  COL_TRI(972, 1451, 1328);
	  COL_TRI(1067, 1522, 819);
	  COL_TRI(1068, 819, 1522);
	  COL_TRI(1069, 856, 1092);
	  COL_TRI(1069, 1449, 856);
	  COL_TRI(1071, 424, 1524);
	  COL_TRI(280, 1092, 856);
	  COL_TRI(280, 1523, 1092);
	  COL_TRI(281, 1361, 968);
	  COL_TRI(281, 968, 320);
	  COL_TRI(429, 1518, 1519);
	  COL_TRI(1070, 1071, 1524);
	  COL_TRI(1071, 425, 424);
	  COL_TRI(424, 1525, 1524);
	  COL_TRI(424, 427, 1525);
	  COL_TRI(1070, 1524, 1525);
	  COL_TRI(732, 1513, 1512);
	  COL_TRI(732, 1292, 1073);
	  COL_TRI(732, 1073, 1513);
	  COL_TRI(1037, 1072, 1073);
	  COL_TRI(1057, 1037, 1073);
	  COL_TRI(1057, 1073, 168);
	  COL_TRI(782, 1257, 1258);
	  COL_TRI(782, 1258, 783);
	  COL_TRI(1072, 1526, 1073);
	  COL_TRI(1072, 1527, 1526);
	  COL_TRI(1080, 1530, 1531);
	  COL_TRI(1073, 1292, 1074);
	  COL_TRI(1074, 1292, 1293);
	  COL_TRI(1075, 1078, 1528);
	  COL_TRI(1076, 1078, 1075);
	  COL_TRI(1077, 1528, 1078);
	  COL_TRI(1078, 1076, 1077);
	  COL_TRI(1079, 1081, 1080);
	  COL_TRI(1080, 1081, 1529);
	  COL_TRI(1083, 1529, 1082);
	  COL_TRI(1081, 1079, 1082);
	  COL_TRI(1082, 1529, 1081);
	  COL_TRI(1075, 1528, 1532);
	  COL_TRI(1075, 1532, 1533);
	  COL_TRI(1076, 1075, 1534);
	  COL_TRI(1080, 1529, 1530);
	  COL_TRI(1082, 1536, 1083);
	  COL_TRI(1082, 1079, 1536);
	  COL_TRI(1079, 1538, 1536);
	  COL_TRI(1079, 1080, 1538);
	  COL_TRI(1083, 1535, 1529);
	  COL_TRI(1077, 1537, 1084);
	  COL_TRI(1077, 1076, 1537);
	  COL_TRI(1076, 1534, 1537);
	  COL_TRI(1068, 1540, 1085);
	  COL_TRI(1084, 1528, 1077);
	  COL_TRI(1084, 1539, 1528);
	  COL_TRI(1083, 1538, 1535);
	  COL_TRI(1084, 1537, 1534);
	  COL_TRI(1084, 1534, 1539);
	  COL_TRI(1083, 1536, 1538);
	  COL_TRI(1068, 1522, 1540);
	  COL_TRI(1085, 1540, 1541);
	  COL_TRI(1085, 1541, 1086);
	  COL_TRI(1086, 1512, 1513);
	  COL_TRI(1086, 1541, 1512);
	  COL_TRI(1087, 1542, 1088);
	  COL_TRI(1088, 1060, 1069);
	  COL_TRI(1088, 1542, 1060);
	  COL_TRI(1092, 1523, 1546);
	  COL_TRI(1087, 1543, 1542);
	  COL_TRI(1089, 1543, 1087);
	  COL_TRI(1089, 1544, 1543);
	  COL_TRI(1090, 1545, 1091);
	  COL_TRI(1091, 1058, 1514);
	  COL_TRI(1091, 1545, 1058);
	  COL_TRI(1090, 1546, 1545);
	  COL_TRI(1092, 1546, 1090);
	  COL_TRI(1097, 1552, 1553);
	  COL_TRI(1093, 1547, 1548);
	  COL_TRI(1093, 1548, 1094);
	  COL_TRI(1094, 1548, 1549);
	  COL_TRI(1094, 1549, 1095);
	  COL_TRI(1095, 1550, 1551);
	  COL_TRI(1095, 1549, 1550);
	  COL_TRI(1096, 1552, 1097);
	  COL_TRI(1096, 1059, 1552);
	  COL_TRI(1097, 1553, 1098);
	  COL_TRI(1098, 1553, 1554);
	  COL_TRI(1098, 1554, 1555);
	  COL_TRI(1099, 1556, 1557);
	  COL_TRI(1099, 1558, 1556);
	  COL_TRI(1099, 1559, 1100);
	  COL_TRI(1099, 1557, 1559);
	  COL_TRI(1100, 1559, 1560);
	  COL_TRI(1101, 1100, 1560);
	  COL_TRI(1102, 1105, 1100);
	  COL_TRI(1102, 1100, 1101);
	  COL_TRI(1105, 1556, 1558);
	  COL_TRI(1107, 1562, 1564);
	  COL_TRI(1103, 1105, 1104);
	  COL_TRI(1104, 1105, 1102);
	  COL_TRI(1105, 1103, 1556);
	  COL_TRI(1102, 1063, 1106);
	  COL_TRI(1102, 1106, 1104);
	  COL_TRI(1106, 1561, 1104);
	  COL_TRI(1107, 1108, 1562);
	  COL_TRI(1108, 1561, 1106);
	  COL_TRI(1108, 1106, 1562);
	  COL_TRI(1063, 1563, 1106);
	  COL_TRI(1109, 1563, 1074);
	  COL_TRI(1109, 1564, 1563);
	  COL_TRI(1109, 1107, 1564);
	  COL_TRI(1063, 1074, 1563);
	  COL_TRI(1110, 1565, 1113);
	  COL_TRI(1110, 1566, 1565);
	  COL_TRI(1111, 1566, 1110);
	  COL_TRI(1112, 1111, 1110);
	  COL_TRI(1063, 1112, 1110);
	  COL_TRI(1063, 1110, 1113);
	  COL_TRI(1057, 168, 1028);
	  COL_TRI(1031, 1057, 1028);
	  COL_TRI(1113, 1565, 1074);
	  COL_TRI(1063, 1113, 1074);
	  COL_TRI(1114, 1567, 1568);
	  COL_TRI(1115, 1114, 1116);
	  COL_TRI(1115, 1567, 1114);
	  COL_TRI(1114, 1569, 1116);
	  COL_TRI(1114, 1568, 1569);
	  COL_TRI(1116, 1570, 1115);
	  COL_TRI(555, 188, 1544);
	  COL_TRI(1037, 1034, 1072);
	  COL_TRI(1034, 1031, 1072);
	  COL_TRI(1031, 163, 1072);
	  COL_TRI(1117, 1053, 1072);
	  COL_TRI(554, 1117, 1072);
	  COL_TRI(163, 554, 1072);
	  COL_TRI(163, 189, 554);
	  COL_TRI(554, 555, 1117);
	  COL_TRI(1117, 1511, 1053);
	  COL_TRI(555, 1544, 1117);
	  COL_TRI(426, 382, 1571);
	  COL_TRI(382, 1572, 1571);
	  COL_TRI(382, 381, 1572);
	  COL_TRI(426, 1571, 1573);
	  COL_TRI(1118, 387, 1574);
	  COL_TRI(1118, 435, 387);
	  COL_TRI(387, 1575, 1574);
	  COL_TRI(387, 386, 1575);
	  COL_TRI(384, 1576, 1577);
	  COL_TRI(384, 383, 1576);
	  COL_TRI(385, 384, 1577);
	  COL_TRI(385, 1577, 1578);
	  COL_TRI(431, 385, 1578);
	  COL_TRI(431, 1578, 1579);
	  COL_TRI(1119, 1580, 630);
	  COL_TRI(1119, 1581, 1580);
	  COL_TRI_INIT(SURFACE_INTANGIBLE, 18);
	  COL_TRI(437, 438, 439);
	  COL_TRI(439, 440, 441);
	  COL_TRI(439, 441, 442);
	  COL_TRI(443, 444, 441);
	  COL_TRI(443, 445, 444);
	  COL_TRI(437, 446, 438);
	  COL_TRI(447, 448, 449);
	  COL_TRI(447, 449, 450);
	  COL_TRI(451, 456, 457);
	  COL_TRI(452, 451, 457);
	  COL_TRI(452, 457, 454);
	  COL_TRI(453, 458, 452);
	  COL_TRI(452, 454, 459);
	  COL_TRI(453, 452, 459);
	  COL_TRI(454, 460, 461);
	  COL_TRI(454, 461, 459);
	  COL_TRI(455, 462, 463);
	  COL_TRI(455, 464, 462);
	  COL_TRI_INIT(SURFACE_VERY_SLIPPERY, 58);
	  COL_TRI(347, 348, 349);
	  COL_TRI(348, 350, 349);
	  COL_TRI(347, 349, 351);
	  COL_TRI(352, 347, 351);
	  COL_TRI(353, 354, 355);
	  COL_TRI(353, 356, 354);
	  COL_TRI(357, 358, 359);
	  COL_TRI(357, 360, 358);
	  COL_TRI(367, 394, 395);
	  COL_TRI(361, 362, 388);
	  COL_TRI(362, 361, 389);
	  COL_TRI(362, 389, 390);
	  COL_TRI(363, 390, 389);
	  COL_TRI(364, 366, 391);
	  COL_TRI(365, 364, 391);
	  COL_TRI(365, 392, 364);
	  COL_TRI(366, 393, 391);
	  COL_TRI(370, 371, 403);
	  COL_TRI(367, 396, 394);
	  COL_TRI(368, 397, 398);
	  COL_TRI(369, 399, 368);
	  COL_TRI(369, 368, 400);
	  COL_TRI(368, 398, 400);
	  COL_TRI(370, 401, 371);
	  COL_TRI(371, 402, 403);
	  COL_TRI(371, 404, 402);
	  COL_TRI(372, 405, 406);
	  COL_TRI(373, 406, 405);
	  COL_TRI(373, 405, 407);
	  COL_TRI(373, 407, 408);
	  COL_TRI(374, 375, 409);
	  COL_TRI(374, 409, 410);
	  COL_TRI(375, 411, 409);
	  COL_TRI(375, 412, 411);
	  COL_TRI(376, 413, 414);
	  COL_TRI(376, 414, 415);
	  COL_TRI(376, 377, 413);
	  COL_TRI(377, 416, 413);
	  COL_TRI(378, 417, 418);
	  COL_TRI(378, 419, 417);
	  COL_TRI(379, 380, 420);
	  COL_TRI(379, 420, 421);
	  COL_TRI(380, 422, 420);
	  COL_TRI(380, 423, 422);
	  COL_TRI(381, 382, 424);
	  COL_TRI(381, 424, 425);
	  COL_TRI(382, 426, 427);
	  COL_TRI(382, 427, 424);
	  COL_TRI(383, 428, 429);
	  COL_TRI(383, 384, 428);
	  COL_TRI(384, 385, 430);
	  COL_TRI(384, 430, 428);
	  COL_TRI(385, 431, 432);
	  COL_TRI(385, 432, 430);
	  COL_TRI(386, 387, 433);
	  COL_TRI(386, 433, 434);
	  COL_TRI(387, 435, 436);
	  COL_TRI(387, 436, 433);
	  COL_TRI_INIT(SURFACE_MGR_MUSIC, 6);
	  COL_TRI(335, 336, 337);
	  COL_TRI(335, 338, 336);
	  COL_TRI(339, 340, 341);
	  COL_TRI(339, 342, 340);
	  COL_TRI(343, 344, 345);
	  COL_TRI(343, 345, 346);
	  COL_TRI_INIT(SURFACE_NOISE_DEFAULT, 304);
	  COL_TRI(16, 17, 18);
	  COL_TRI(17, 19, 18);
	  COL_TRI(17, 20, 19);
	  COL_TRI(20, 21, 19);
	  COL_TRI(21, 22, 19);
	  COL_TRI(22, 18, 19);
	  COL_TRI(16, 18, 23);
	  COL_TRI(18, 24, 25);
	  COL_TRI(22, 24, 18);
	  COL_TRI(23, 18, 25);
	  COL_TRI(26, 27, 16);
	  COL_TRI(27, 26, 28);
	  COL_TRI(29, 27, 31);
	  COL_TRI(33, 27, 32);
	  COL_TRI(33, 32, 177);
	  COL_TRI(27, 33, 34);
	  COL_TRI(35, 31, 34);
	  COL_TRI(31, 27, 34);
	  COL_TRI(17, 31, 178);
	  COL_TRI(36, 178, 31);
	  COL_TRI(35, 36, 31);
	  COL_TRI(37, 32, 38);
	  COL_TRI(37, 177, 32);
	  COL_TRI(38, 49, 37);
	  COL_TRI(29, 30, 27);
	  COL_TRI(27, 28, 32);
	  COL_TRI(26, 39, 28);
	  COL_TRI(23, 26, 16);
	  COL_TRI(26, 40, 39);
	  COL_TRI(36, 41, 178);
	  COL_TRI(17, 178, 20);
	  COL_TRI(41, 42, 178);
	  COL_TRI(42, 180, 178);
	  COL_TRI(40, 179, 39);
	  COL_TRI(43, 44, 181);
	  COL_TRI(43, 182, 44);
	  COL_TRI(44, 182, 49);
	  COL_TRI(38, 44, 49);
	  COL_TRI(45, 36, 35);
	  COL_TRI(46, 45, 35);
	  COL_TRI(47, 45, 46);
	  COL_TRI(35, 34, 183);
	  COL_TRI(48, 47, 46);
	  COL_TRI(48, 181, 47);
	  COL_TRI(43, 181, 48);
	  COL_TRI(34, 184, 183);
	  COL_TRI(49, 50, 37);
	  COL_TRI(50, 185, 37);
	  COL_TRI(51, 186, 52);
	  COL_TRI(51, 52, 187);
	  COL_TRI(55, 195, 56);
	  COL_TRI(52, 188, 187);
	  COL_TRI(52, 189, 188);
	  COL_TRI(53, 190, 191);
	  COL_TRI(53, 192, 190);
	  COL_TRI(54, 53, 191);
	  COL_TRI(54, 191, 193);
	  COL_TRI(55, 194, 195);
	  COL_TRI(55, 56, 196);
	  COL_TRI(62, 63, 200);
	  COL_TRI(56, 57, 196);
	  COL_TRI(56, 60, 57);
	  COL_TRI(57, 197, 196);
	  COL_TRI(58, 57, 198);
	  COL_TRI(58, 197, 57);
	  COL_TRI(59, 58, 198);
	  COL_TRI(60, 198, 57);
	  COL_TRI(60, 59, 198);
	  COL_TRI(61, 199, 62);
	  COL_TRI(61, 62, 200);
	  COL_TRI(67, 206, 207);
	  COL_TRI(63, 201, 202);
	  COL_TRI(63, 202, 200);
	  COL_TRI(64, 61, 200);
	  COL_TRI(64, 200, 202);
	  COL_TRI(65, 66, 64);
	  COL_TRI(66, 203, 64);
	  COL_TRI(61, 64, 203);
	  COL_TRI(61, 203, 204);
	  COL_TRI(65, 64, 202);
	  COL_TRI(61, 204, 199);
	  COL_TRI(65, 202, 201);
	  COL_TRI(67, 205, 206);
	  COL_TRI(68, 207, 208);
	  COL_TRI(68, 67, 207);
	  COL_TRI(69, 209, 210);
	  COL_TRI(69, 210, 211);
	  COL_TRI(70, 69, 212);
	  COL_TRI(69, 71, 212);
	  COL_TRI(71, 213, 73);
	  COL_TRI(71, 73, 212);
	  COL_TRI(72, 70, 212);
	  COL_TRI(72, 212, 73);
	  COL_TRI(72, 73, 214);
	  COL_TRI(73, 213, 214);
	  COL_TRI(72, 214, 215);
	  COL_TRI(74, 216, 217);
	  COL_TRI(74, 217, 82);
	  COL_TRI(75, 76, 218);
	  COL_TRI(76, 219, 220);
	  COL_TRI(76, 220, 218);
	  COL_TRI(77, 218, 221);
	  COL_TRI(77, 75, 218);
	  COL_TRI(78, 222, 80);
	  COL_TRI(78, 223, 222);
	  COL_TRI(79, 219, 222);
	  COL_TRI(79, 222, 223);
	  COL_TRI(78, 80, 215);
	  COL_TRI(80, 72, 215);
	  COL_TRI(79, 220, 219);
	  COL_TRI(81, 224, 225);
	  COL_TRI(81, 226, 224);
	  COL_TRI(81, 225, 227);
	  COL_TRI(83, 233, 77);
	  COL_TRI(82, 230, 81);
	  COL_TRI(82, 81, 231);
	  COL_TRI(81, 228, 229);
	  COL_TRI(81, 227, 228);
	  COL_TRI(81, 229, 231);
	  COL_TRI(83, 232, 233);
	  COL_TRI(83, 234, 232);
	  COL_TRI(83, 77, 221);
	  COL_TRI(90, 92, 95);
	  COL_TRI(84, 235, 236);
	  COL_TRI(84, 237, 235);
	  COL_TRI(85, 86, 87);
	  COL_TRI(86, 238, 87);
	  COL_TRI(87, 238, 239);
	  COL_TRI(87, 239, 89);
	  COL_TRI(88, 87, 89);
	  COL_TRI(88, 85, 87);
	  COL_TRI(88, 89, 240);
	  COL_TRI(89, 239, 240);
	  COL_TRI(93, 90, 91);
	  COL_TRI(90, 95, 241);
	  COL_TRI(91, 90, 241);
	  COL_TRI(92, 90, 242);
	  COL_TRI(94, 92, 102);
	  COL_TRI(92, 242, 102);
	  COL_TRI(95, 243, 241);
	  COL_TRI(95, 244, 243);
	  COL_TRI(91, 241, 243);
	  COL_TRI(91, 243, 244);
	  COL_TRI(91, 244, 96);
	  COL_TRI(96, 245, 91);
	  COL_TRI(93, 91, 246);
	  COL_TRI(94, 102, 247);
	  COL_TRI(97, 245, 96);
	  COL_TRI(98, 249, 99);
	  COL_TRI(99, 249, 250);
	  COL_TRI(99, 250, 97);
	  COL_TRI(97, 250, 245);
	  COL_TRI(98, 100, 249);
	  COL_TRI(94, 100, 98);
	  COL_TRI(94, 247, 100);
	  COL_TRI(100, 247, 251);
	  COL_TRI(101, 100, 251);
	  COL_TRI(107, 106, 253);
	  COL_TRI(102, 248, 247);
	  COL_TRI(102, 93, 248);
	  COL_TRI(93, 246, 248);
	  COL_TRI(103, 105, 104);
	  COL_TRI(103, 104, 251);
	  COL_TRI(104, 101, 251);
	  COL_TRI(105, 252, 104);
	  COL_TRI(106, 108, 253);
	  COL_TRI(108, 254, 255);
	  COL_TRI(108, 255, 253);
	  COL_TRI(109, 253, 255);
	  COL_TRI(109, 107, 253);
	  COL_TRI(110, 109, 255);
	  COL_TRI(110, 255, 254);
	  COL_TRI(111, 256, 112);
	  COL_TRI(111, 112, 257);
	  COL_TRI(112, 258, 257);
	  COL_TRI(112, 259, 258);
	  COL_TRI(117, 268, 269);
	  COL_TRI(113, 260, 261);
	  COL_TRI(113, 262, 260);
	  COL_TRI(114, 263, 264);
	  COL_TRI(114, 115, 263);
	  COL_TRI(115, 114, 265);
	  COL_TRI(114, 264, 266);
	  COL_TRI(114, 266, 267);
	  COL_TRI(114, 267, 265);
	  COL_TRI(116, 115, 265);
	  COL_TRI(116, 263, 115);
	  COL_TRI(117, 270, 268);
	  COL_TRI(118, 121, 122);
	  COL_TRI(118, 122, 271);
	  COL_TRI(119, 121, 118);
	  COL_TRI(120, 118, 125);
	  COL_TRI(120, 119, 118);
	  COL_TRI(118, 271, 125);
	  COL_TRI(121, 127, 122);
	  COL_TRI(122, 127, 128);
	  COL_TRI(122, 128, 272);
	  COL_TRI(123, 271, 122);
	  COL_TRI(123, 122, 273);
	  COL_TRI(124, 274, 271);
	  COL_TRI(125, 271, 274);
	  COL_TRI(124, 271, 123);
	  COL_TRI(123, 273, 124);
	  COL_TRI(119, 275, 121);
	  COL_TRI(126, 121, 275);
	  COL_TRI(121, 126, 127);
	  COL_TRI(127, 276, 277);
	  COL_TRI(127, 277, 128);
	  COL_TRI(126, 276, 127);
	  COL_TRI(131, 283, 284);
	  COL_TRI(128, 277, 272);
	  COL_TRI(129, 130, 278);
	  COL_TRI(129, 278, 279);
	  COL_TRI(130, 280, 278);
	  COL_TRI(130, 281, 280);
	  COL_TRI(131, 282, 283);
	  COL_TRI(138, 291, 141);
	  COL_TRI(132, 285, 286);
	  COL_TRI(132, 287, 285);
	  COL_TRI(133, 288, 134);
	  COL_TRI(134, 289, 290);
	  COL_TRI(133, 134, 290);
	  COL_TRI(135, 289, 134);
	  COL_TRI(135, 134, 288);
	  COL_TRI(136, 137, 288);
	  COL_TRI(137, 135, 288);
	  COL_TRI(133, 136, 288);
	  COL_TRI(142, 298, 143);
	  COL_TRI(139, 292, 138);
	  COL_TRI(138, 141, 293);
	  COL_TRI(140, 139, 293);
	  COL_TRI(141, 140, 293);
	  COL_TRI(138, 293, 139);
	  COL_TRI(140, 294, 139);
	  COL_TRI(139, 294, 292);
	  COL_TRI(138, 295, 296);
	  COL_TRI(138, 296, 291);
	  COL_TRI(142, 143, 297);
	  COL_TRI(143, 299, 297);
	  COL_TRI(143, 300, 299);
	  COL_TRI(144, 301, 302);
	  COL_TRI(144, 302, 303);
	  COL_TRI(145, 144, 303);
	  COL_TRI(145, 304, 144);
	  COL_TRI(146, 148, 149);
	  COL_TRI(147, 146, 149);
	  COL_TRI(148, 305, 306);
	  COL_TRI(148, 306, 149);
	  COL_TRI(149, 306, 307);
	  COL_TRI(147, 149, 307);
	  COL_TRI(150, 151, 308);
	  COL_TRI(151, 309, 308);
	  COL_TRI(152, 309, 151);
	  COL_TRI(150, 153, 151);
	  COL_TRI(153, 152, 151);
	  COL_TRI(152, 310, 309);
	  COL_TRI(154, 308, 311);
	  COL_TRI(155, 310, 152);
	  COL_TRI(153, 155, 152);
	  COL_TRI(156, 312, 313);
	  COL_TRI(156, 313, 147);
	  COL_TRI(157, 311, 313);
	  COL_TRI(161, 319, 320);
	  COL_TRI(158, 154, 311);
	  COL_TRI(157, 314, 311);
	  COL_TRI(159, 160, 315);
	  COL_TRI(160, 316, 317);
	  COL_TRI(160, 317, 315);
	  COL_TRI(159, 315, 318);
	  COL_TRI(161, 320, 321);
	  COL_TRI(162, 322, 323);
	  COL_TRI(163, 324, 162);
	  COL_TRI(162, 324, 322);
	  COL_TRI(164, 167, 325);
	  COL_TRI(164, 325, 326);
	  COL_TRI(165, 164, 326);
	  COL_TRI(165, 327, 164);
	  COL_TRI(166, 329, 330);
	  COL_TRI(166, 167, 169);
	  COL_TRI(166, 323, 167);
	  COL_TRI(167, 323, 322);
	  COL_TRI(168, 167, 322);
	  COL_TRI(168, 325, 167);
	  COL_TRI(165, 328, 169);
	  COL_TRI(165, 169, 327);
	  COL_TRI(169, 328, 329);
	  COL_TRI(166, 169, 329);
	  COL_TRI(166, 173, 176);
	  COL_TRI(166, 176, 323);
	  COL_TRI(166, 330, 331);
	  COL_TRI(166, 331, 332);
	  COL_TRI(170, 332, 331);
	  COL_TRI(170, 171, 332);
	  COL_TRI(171, 170, 172);
	  COL_TRI(171, 172, 173);
	  COL_TRI(172, 174, 173);
	  COL_TRI(173, 333, 176);
	  COL_TRI(174, 333, 173);
	  COL_TRI(174, 175, 333);
	  COL_TRI(175, 334, 176);
	  COL_TRI(175, 176, 333);
	  COL_TRI(176, 334, 163);
	  COL_TRI(176, 163, 162);
	  COL_TRI(176, 162, 323);
	  COL_TRI_INIT(SURFACE_VANISH_CAP_WALLS, 8);
	  COL_TRI(12, 13, 14);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(4, 5, 6);
	  COL_TRI(4, 7, 5);
	  COL_TRI(8, 9, 10);
	  COL_TRI(8, 11, 9);
	  COL_TRI(12, 14, 15);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(26);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start,   /*pos*/  1434,  -204,  4710, /*yaw*/ 128); // unused, probably an early way to set initial position
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_haunted_door, /*pos*/     0, -2457,  2099, /*yaw*/ 128);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_haunted_door, /*pos*/ -1996, -2457,   205, /*yaw*/ 192);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_haunted_door, /*pos*/  1587, -2457,   205, /*yaw*/  64);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_haunted_door, /*pos*/ -2136,  -204,  4527, /*yaw*/ 224);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_haunted_door, /*pos*/     0, -2457,  4659, /*yaw*/ 128);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_haunted_door, /*pos*/  2099,  1741,   486, /*yaw*/  64);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_haunted_door, /*pos*/   589,  1922,  1894, /*yaw*/   0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_haunted_door, /*pos*/   742,  1922,  1894, /*yaw*/ 128);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_haunted_door, /*pos*/ -1970,  1024,  1075, /*yaw*/ 128);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_haunted_door, /*pos*/ -2021,     0,  1075, /*yaw*/ 128);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_haunted_door, /*pos*/  2099,   819,  1818, /*yaw*/ 192);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_haunted_door, /*pos*/  3354,     0,  1075, /*yaw*/   0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_haunted_door, /*pos*/   742,     0,  2099, /*yaw*/ 128);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_haunted_door, /*pos*/   589,     0,  2099, /*yaw*/   0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_haunted_door, /*pos*/  2099,     0,  1459, /*yaw*/ 192);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_haunted_door, /*pos*/   179,   819,   -50, /*yaw*/   0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_haunted_door, /*pos*/  2099,   819,   486, /*yaw*/ 192);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_haunted_door, /*pos*/   435,     0,   -50, /*yaw*/   0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_haunted_door, /*pos*/  1613,     0,   -50, /*yaw*/   0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_haunted_door, /*pos*/  1613,   819,   -50, /*yaw*/   0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_haunted_door, /*pos*/ -1561,     0, -1586, /*yaw*/   0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_haunted_door, /*pos*/  -767,   819,  1408, /*yaw*/  64);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_haunted_door, /*pos*/  -767,   819,   640, /*yaw*/  64);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_haunted_door, /*pos*/   -50,     0,   640, /*yaw*/  64);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_haunted_door, /*pos*/   -50,     0,  1459, /*yaw*/  64);
	  COL_WATER_BOX_INIT(2);
	  COL_WATER_BOX(0, -4812, 1485, 640, 7270, -2405);
	  COL_WATER_BOX(1, 1536, -1637, 3789, 2662, -2508);
	  COL_END();
	}

	function bbh_seg7_collision_coffin() {
	  COL_INIT();
	  COL_VERTEX_INIT(0xC);
	  COL_VERTEX(-57, 77, 0);
	  COL_VERTEX(115, 77, -306);
	  COL_VERTEX(-114, 77, -306);
	  COL_VERTEX(-57, 3, 0);
	  COL_VERTEX(58, 3, 0);
	  COL_VERTEX(58, 77, 0);
	  COL_VERTEX(115, 3, -306);
	  COL_VERTEX(-57, 77, -457);
	  COL_VERTEX(58, 77, -457);
	  COL_VERTEX(58, 3, -457);
	  COL_VERTEX(-57, 3, -457);
	  COL_VERTEX(-114, 3, -306);
	  COL_TRI_INIT(SURFACE_DEFAULT, 20);
	  COL_TRI(0, 1, 2);
	  COL_TRI(3, 0, 2);
	  COL_TRI(4, 5, 0);
	  COL_TRI(0, 5, 1);
	  COL_TRI(4, 0, 3);
	  COL_TRI(6, 5, 4);
	  COL_TRI(6, 1, 5);
	  COL_TRI(1, 7, 2);
	  COL_TRI(1, 8, 7);
	  COL_TRI(9, 1, 6);
	  COL_TRI(9, 8, 1);
	  COL_TRI(10, 8, 9);
	  COL_TRI(10, 7, 8);
	  COL_TRI(11, 2, 7);
	  COL_TRI(11, 7, 10);
	  COL_TRI(3, 2, 11);
	  COL_TRI(6, 4, 3);
	  COL_TRI(6, 3, 11);
	  COL_TRI(10, 6, 11);
	  COL_TRI(10, 9, 6);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bbh_seg7_collision_merry_go_round() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x10);
	  COL_VERTEX(-204, 0, -204);
	  COL_VERTEX(51, 307, -50);
	  COL_VERTEX(205, 0, -204);
	  COL_VERTEX(-50, 307, -50);
	  COL_VERTEX(-204, 0, 205);
	  COL_VERTEX(-50, 307, 51);
	  COL_VERTEX(51, 1024, -50);
	  COL_VERTEX(-50, 1024, -50);
	  COL_VERTEX(51, 1024, 51);
	  COL_VERTEX(51, 307, 51);
	  COL_VERTEX(205, 0, 205);
	  COL_VERTEX(-50, 1024, 51);
	  COL_VERTEX(-1433, 0, 1434);
	  COL_VERTEX(1434, 0, 1434);
	  COL_VERTEX(1434, 0, -1433);
	  COL_VERTEX(-1433, 0, -1433);
	  COL_TRI_INIT(SURFACE_MGR_MUSIC, 24);
	  COL_TRI(10, 12, 13);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(4, 3, 0);
	  COL_TRI(4, 5, 3);
	  COL_TRI(3, 6, 1);
	  COL_TRI(3, 7, 6);
	  COL_TRI(5, 7, 3);
	  COL_TRI(1, 8, 9);
	  COL_TRI(1, 6, 8);
	  COL_TRI(2, 1, 9);
	  COL_TRI(2, 9, 10);
	  COL_TRI(5, 11, 7);
	  COL_TRI(10, 5, 4);
	  COL_TRI(9, 11, 5);
	  COL_TRI(10, 9, 5);
	  COL_TRI(9, 8, 11);
	  COL_TRI(14, 2, 10);
	  COL_TRI(10, 4, 12);
	  COL_TRI(14, 10, 13);
	  COL_TRI(12, 4, 0);
	  COL_TRI(12, 0, 15);
	  COL_TRI(15, 0, 2);
	  COL_TRI(15, 2, 14);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bbh_seg7_collision_mesh_elevator() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(-306, 0, -255);
	  COL_VERTEX(307, 0, 256);
	  COL_VERTEX(307, 0, -255);
	  COL_VERTEX(-306, 0, 256);
	  COL_VERTEX(307, -101, 256);
	  COL_VERTEX(307, -101, -255);
	  COL_VERTEX(-306, -101, 256);
	  COL_VERTEX(-306, -101, -255);
	  COL_TRI_INIT(SURFACE_DEFAULT, 10);
	  COL_TRI(1, 4, 5);
	  COL_TRI(4, 6, 7);
	  COL_TRI(5, 4, 7);
	  COL_TRI(3, 6, 4);
	  COL_TRI(3, 4, 1);
	  COL_TRI(0, 6, 3);
	  COL_TRI(0, 7, 6);
	  COL_TRI(2, 5, 7);
	  COL_TRI(2, 7, 0);
	  COL_TRI(1, 5, 2);
	  COL_TRI_INIT(SURFACE_NOISE_DEFAULT, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bbh_seg7_collision_haunted_bookshelf() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x6);
	  COL_VERTEX(-255, 819, -204);
	  COL_VERTEX(-255, 0, 205);
	  COL_VERTEX(-255, 819, 205);
	  COL_VERTEX(-255, 0, -204);
	  COL_VERTEX(256, 0, -204);
	  COL_VERTEX(256, 819, -204);
	  COL_TRI_INIT(SURFACE_DEFAULT, 4);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(0, 4, 3);
	  COL_TRI(0, 5, 4);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bbh_seg7_collision_staircase_step() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(154, 614, -101);
	  COL_VERTEX(-153, 614, 102);
	  COL_VERTEX(154, 614, 102);
	  COL_VERTEX(-153, 614, -101);
	  COL_VERTEX(154, 0, -101);
	  COL_VERTEX(-153, 0, -101);
	  COL_VERTEX(154, 0, 102);
	  COL_VERTEX(-153, 0, 102);
	  COL_TRI_INIT(SURFACE_DEFAULT, 8);
	  COL_TRI(2, 7, 6);
	  COL_TRI(4, 5, 0);
	  COL_TRI(5, 3, 0);
	  COL_TRI(4, 2, 6);
	  COL_TRI(4, 0, 2);
	  COL_TRI(5, 7, 1);
	  COL_TRI(5, 1, 3);
	  COL_TRI(2, 1, 7);
	  COL_TRI_INIT(SURFACE_NOISE_DEFAULT, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bbh_seg7_collision_tilt_floor_platform() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(307, 0, -255);
	  COL_VERTEX(-306, 0, 256);
	  COL_VERTEX(307, 0, 256);
	  COL_VERTEX(307, -101, -255);
	  COL_VERTEX(307, -101, 256);
	  COL_VERTEX(-306, -101, -255);
	  COL_VERTEX(-306, 0, -255);
	  COL_VERTEX(-306, -101, 256);
	  COL_TRI_INIT(SURFACE_DEFAULT, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(2, 3, 0);
	  COL_TRI(2, 4, 3);
	  COL_TRI(1, 4, 2);
	  COL_TRI(0, 3, 5);
	  COL_TRI(4, 5, 3);
	  COL_TRI(0, 6, 1);
	  COL_TRI(0, 5, 6);
	  COL_TRI(4, 7, 5);
	  COL_TRI(1, 7, 4);
	  COL_TRI(6, 7, 1);
	  COL_TRI(6, 5, 7);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bbh_seg7_collision_07026B1C() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x4);
	  COL_VERTEX(102, 0, -50);
	  COL_VERTEX(-101, 0, -50);
	  COL_VERTEX(-101, 0, 51);
	  COL_VERTEX(102, 0, 51);
	  COL_TRI_INIT(SURFACE_NOISE_DEFAULT, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI_STOP();
	  COL_END();
	}

	var bbh = [
	  bbh_seg7_collision_level,
	  bbh_seg7_collision_coffin,
	  bbh_seg7_collision_merry_go_round,
	  bbh_seg7_collision_mesh_elevator,
	  bbh_seg7_collision_haunted_bookshelf,
	  bbh_seg7_collision_staircase_step,
	  bbh_seg7_collision_tilt_floor_platform,
	  bbh_seg7_collision_07026B1C
	];

	function bitfs_seg7_collision_level() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x33D);
	  COL_VERTEX(6462, 4506, 740);
	  COL_VERTEX(7015, 5120, 740);
	  COL_VERTEX(7015, 4506, 740);
	  COL_VERTEX(7384, 5120, 371);
	  COL_VERTEX(7384, 4506, 371);
	  COL_VERTEX(6811, 4019, 271);
	  COL_VERTEX(6661, 4019, 271);
	  COL_VERTEX(6462, 5120, 740);
	  COL_VERTEX(7384, 5120, -181);
	  COL_VERTEX(7384, 4506, -181);
	  COL_VERTEX(6912, 4019, 170);
	  COL_VERTEX(7015, 4506, -549);
	  COL_VERTEX(6462, 5120, -549);
	  COL_VERTEX(6462, 4506, -549);
	  COL_VERTEX(7015, 5120, -549);
	  COL_VERTEX(6912, 4019, 20);
	  COL_VERTEX(6811, 4019, -79);
	  COL_VERTEX(6661, 4019, -79);
	  COL_VERTEX(6561, 4019, 20);
	  COL_VERTEX(6561, 4019, 170);
	  COL_VERTEX(6640, 3988, 321);
	  COL_VERTEX(6513, 3988, 194);
	  COL_VERTEX(6830, 3988, 321);
	  COL_VERTEX(6640, 2899, -122);
	  COL_VERTEX(6957, 3988, 194);
	  COL_VERTEX(6957, 3988, 4);
	  COL_VERTEX(6830, 3988, -122);
	  COL_VERTEX(6640, 3988, -122);
	  COL_VERTEX(6513, 3988, 4);
	  COL_VERTEX(6407, 4403, 869);
	  COL_VERTEX(7513, 4403, 426);
	  COL_VERTEX(6407, 4403, -678);
	  COL_VERTEX(5965, 4403, -236);
	  COL_VERTEX(5965, 4403, 426);
	  COL_VERTEX(6094, 4506, 371);
	  COL_VERTEX(6094, 4506, -181);
	  COL_VERTEX(6661, 3072, 271);
	  COL_VERTEX(6561, 3072, 170);
	  COL_VERTEX(6811, 3072, 271);
	  COL_VERTEX(6561, 3072, 20);
	  COL_VERTEX(6661, 3072, -79);
	  COL_VERTEX(6811, 3072, -79);
	  COL_VERTEX(6912, 3072, 20);
	  COL_VERTEX(6912, 3072, 170);
	  COL_VERTEX(6640, 2899, 321);
	  COL_VERTEX(6830, 2899, 321);
	  COL_VERTEX(6957, 2899, 194);
	  COL_VERTEX(6513, 2899, 194);
	  COL_VERTEX(6957, 2899, 4);
	  COL_VERTEX(6513, 2899, 4);
	  COL_VERTEX(6830, 2899, -122);
	  COL_VERTEX(7071, 4403, 869);
	  COL_VERTEX(7513, 4403, -236);
	  COL_VERTEX(7071, 4403, -678);
	  COL_VERTEX(-8191, -3071, 8192);
	  COL_VERTEX(8192, -3071, -8191);
	  COL_VERTEX(-8191, -3071, -8191);
	  COL_VERTEX(8192, -3071, 8192);
	  COL_VERTEX(1126, 205, 1050);
	  COL_VERTEX(3072, 205, 512);
	  COL_VERTEX(2662, 207, 512);
	  COL_VERTEX(4838, 205, 1050);
	  COL_VERTEX(4838, 205, -1106);
	  COL_VERTEX(3072, 205, 102);
	  COL_VERTEX(-2354, 205, -1081);
	  COL_VERTEX(-2354, 205, 1024);
	  COL_VERTEX(2663, 205, 101);
	  COL_VERTEX(1126, 205, -1106);
	  COL_VERTEX(-7449, 205, -1106);
	  COL_VERTEX(-4919, 205, -26);
	  COL_VERTEX(-7449, 205, 1050);
	  COL_VERTEX(-4530, 3482, 1050);
	  COL_VERTEX(-4530, 3482, -1106);
	  COL_VERTEX(563, 3482, -1081);
	  COL_VERTEX(563, 3482, 1024);
	  COL_VERTEX(3128, 3482, -26);
	  COL_VERTEX(5658, 3482, -1106);
	  COL_VERTEX(-2000, 3482, -26);
	  COL_VERTEX(5658, 3482, 1050);
	  COL_VERTEX(-2354, 256, 1126);
	  COL_VERTEX(1126, 256, 1126);
	  COL_VERTEX(-7525, 256, 1126);
	  COL_VERTEX(4915, 256, 1126);
	  COL_VERTEX(-4167, 3482, 404);
	  COL_VERTEX(-4167, 3523, 404);
	  COL_VERTEX(-4167, 3523, -209);
	  COL_VERTEX(-4167, 3482, -209);
	  COL_VERTEX(-4146, 3482, -209);
	  COL_VERTEX(-4146, 3533, 404);
	  COL_VERTEX(-4146, 3482, 404);
	  COL_VERTEX(-4146, 3533, -209);
	  COL_VERTEX(768, -2170, -2211);
	  COL_VERTEX(1690, -2170, -2211);
	  COL_VERTEX(768, -2170, -1289);
	  COL_VERTEX(1690, -2170, -1289);
	  COL_VERTEX(1434, -2170, -1289);
	  COL_VERTEX(1434, -2477, -921);
	  COL_VERTEX(2253, -2477, -306);
	  COL_VERTEX(1024, -2477, -306);
	  COL_VERTEX(1024, -2477, -921);
	  COL_VERTEX(2253, -2477, -613);
	  COL_VERTEX(1843, -2477, -613);
	  COL_VERTEX(1843, -2477, -921);
	  COL_VERTEX(3072, -2477, -306);
	  COL_VERTEX(3072, -2477, -921);
	  COL_VERTEX(3072, -2784, 61);
	  COL_VERTEX(-4146, -2969, 307);
	  COL_VERTEX(-4146, -2743, 307);
	  COL_VERTEX(-4453, -2969, -306);
	  COL_VERTEX(-4146, -2743, -306);
	  COL_VERTEX(-6962, 3072, -612);
	  COL_VERTEX(-4197, 205, 1);
	  COL_VERTEX(-4197, 410, 617);
	  COL_VERTEX(-4505, 410, 924);
	  COL_VERTEX(-5836, 205, 617);
	  COL_VERTEX(-5836, 410, 1);
	  COL_VERTEX(-5529, 410, -305);
	  COL_VERTEX(205, 205, 512);
	  COL_VERTEX(922, 307, 102);
	  COL_VERTEX(205, 410, 102);
	  COL_VERTEX(922, 410, 102);
	  COL_VERTEX(-4965, 3666, -209);
	  COL_VERTEX(-7525, 256, -1183);
	  COL_VERTEX(-2354, 0, -1183);
	  COL_VERTEX(-2354, 256, -1183);
	  COL_VERTEX(1126, 0, -1183);
	  COL_VERTEX(4915, 0, -1183);
	  COL_VERTEX(-1330, 732, 0);
	  COL_VERTEX(-2457, 753, 0);
	  COL_VERTEX(-2431, 819, 0);
	  COL_VERTEX(-2431, 788, 0);
	  COL_VERTEX(-2431, 717, 0);
	  COL_VERTEX(-2405, 205, -25);
	  COL_VERTEX(-2405, 742, -25);
	  COL_VERTEX(-2405, 819, -25);
	  COL_VERTEX(-1381, 742, -25);
	  COL_VERTEX(-1381, 819, -25);
	  COL_VERTEX(-1381, 205, -25);
	  COL_VERTEX(-1407, 717, 0);
	  COL_VERTEX(-1407, 788, 0);
	  COL_VERTEX(-1407, 819, 0);
	  COL_VERTEX(-2380, 788, 614);
	  COL_VERTEX(-2380, 819, 614);
	  COL_VERTEX(-2380, 717, 614);
	  COL_VERTEX(-2380, 205, 614);
	  COL_VERTEX(-2431, 717, 614);
	  COL_VERTEX(-2431, 819, 614);
	  COL_VERTEX(-1356, 717, 614);
	  COL_VERTEX(-1356, 205, 614);
	  COL_VERTEX(-1407, 717, 614);
	  COL_VERTEX(-1407, 819, 614);
	  COL_VERTEX(-1356, 788, 614);
	  COL_VERTEX(-1356, 819, 614);
	  COL_VERTEX(-1330, 788, 0);
	  COL_VERTEX(-2457, 742, -25);
	  COL_VERTEX(-1330, 742, -25);
	  COL_VERTEX(-2457, 717, 0);
	  COL_VERTEX(-1330, 788, 614);
	  COL_VERTEX(-2457, 717, 614);
	  COL_VERTEX(-1330, 742, 640);
	  COL_VERTEX(-1330, 717, 614);
	  COL_VERTEX(-2457, 742, 640);
	  COL_VERTEX(-2149, 307, 617);
	  COL_VERTEX(-2969, 410, 617);
	  COL_VERTEX(-2969, 410, 2);
	  COL_VERTEX(-2149, 205, 2);
	  COL_VERTEX(-3173, 3686, -876);
	  COL_VERTEX(-3378, 3482, -978);
	  COL_VERTEX(-3071, 3482, -978);
	  COL_VERTEX(-3276, 3686, -774);
	  COL_VERTEX(-3327, 3482, -620);
	  COL_VERTEX(-3122, 3482, -620);
	  COL_VERTEX(1075, 205, -564);
	  COL_VERTEX(1382, 205, -564);
	  COL_VERTEX(1280, 410, -462);
	  COL_VERTEX(1178, 410, -359);
	  COL_VERTEX(1126, 205, -206);
	  COL_VERTEX(1331, 205, -206);
	  COL_VERTEX(-1535, 3482, -975);
	  COL_VERTEX(-1228, 3482, -975);
	  COL_VERTEX(-1330, 3686, -872);
	  COL_VERTEX(-1279, 3482, -616);
	  COL_VERTEX(-1433, 3686, -770);
	  COL_VERTEX(-1484, 3482, -616);
	  COL_VERTEX(1741, 307, 512);
	  COL_VERTEX(1741, 205, 102);
	  COL_VERTEX(4403, -1279, 819);
	  COL_VERTEX(4403, -665, -204);
	  COL_VERTEX(4454, -665, 819);
	  COL_VERTEX(4403, -665, 819);
	  COL_VERTEX(3072, -1125, 512);
	  COL_VERTEX(1741, 205, 512);
	  COL_VERTEX(2458, 205, 102);
	  COL_VERTEX(2662, -1125, 102);
	  COL_VERTEX(3072, 0, 102);
	  COL_VERTEX(3072, 0, 512);
	  COL_VERTEX(3379, -1279, -204);
	  COL_VERTEX(3072, -1125, 102);
	  COL_VERTEX(3379, -665, -204);
	  COL_VERTEX(3072, -1177, 512);
	  COL_VERTEX(2662, 0, 512);
	  COL_VERTEX(2662, 410, 512);
	  COL_VERTEX(3072, 410, 512);
	  COL_VERTEX(2662, 0, 102);
	  COL_VERTEX(3379, -1279, 819);
	  COL_VERTEX(4915, 0, 1126);
	  COL_VERTEX(-2354, 0, 1126);
	  COL_VERTEX(-4919, 0, -26);
	  COL_VERTEX(1126, 256, -1183);
	  COL_VERTEX(-7525, 0, 1126);
	  COL_VERTEX(2662, 1, 512);
	  COL_VERTEX(4915, 256, -1183);
	  COL_VERTEX(3277, 205, -101);
	  COL_VERTEX(2458, 410, -101);
	  COL_VERTEX(3277, 410, 717);
	  COL_VERTEX(4045, -1330, 154);
	  COL_VERTEX(4454, -1330, -255);
	  COL_VERTEX(4454, -1330, 819);
	  COL_VERTEX(4045, -1330, 461);
	  COL_VERTEX(4045, -1279, 154);
	  COL_VERTEX(3738, -1330, 154);
	  COL_VERTEX(3379, -1330, -255);
	  COL_VERTEX(3072, -1177, 102);
	  COL_VERTEX(4454, -665, -255);
	  COL_VERTEX(7526, -2764, 573);
	  COL_VERTEX(7526, -2764, -40);
	  COL_VERTEX(7526, -3071, -40);
	  COL_VERTEX(7526, -3071, 573);
	  COL_VERTEX(6912, -2764, 573);
	  COL_VERTEX(6912, -3071, 573);
	  COL_VERTEX(6912, -2764, -40);
	  COL_VERTEX(6912, -3071, -40);
	  COL_VERTEX(5222, -3071, 573);
	  COL_VERTEX(4301, -2764, 573);
	  COL_VERTEX(6298, -2917, -40);
	  COL_VERTEX(5222, -2917, -40);
	  COL_VERTEX(4301, -3071, -40);
	  COL_VERTEX(3994, -2764, 881);
	  COL_VERTEX(3072, -3071, 573);
	  COL_VERTEX(3072, -2764, -40);
	  COL_VERTEX(3379, -2764, -347);
	  COL_VERTEX(4967, -2206, 215);
	  COL_VERTEX(4967, -2206, 317);
	  COL_VERTEX(5070, -2042, 317);
	  COL_VERTEX(3941, -2042, 317);
	  COL_VERTEX(3941, -2206, 215);
	  COL_VERTEX(3941, -2124, 164);
	  COL_VERTEX(3941, -2042, 215);
	  COL_VERTEX(3941, -2206, 317);
	  COL_VERTEX(3839, -2124, 369);
	  COL_VERTEX(3839, -2206, 215);
	  COL_VERTEX(3839, -2206, 317);
	  COL_VERTEX(3941, -2124, 369);
	  COL_VERTEX(3839, -2124, 164);
	  COL_VERTEX(3839, -2042, 215);
	  COL_VERTEX(5273, -2360, 317);
	  COL_VERTEX(5273, -2360, 215);
	  COL_VERTEX(5273, -2196, 317);
	  COL_VERTEX(5273, -2278, 164);
	  COL_VERTEX(5273, -2196, 215);
	  COL_VERTEX(5170, -2278, 369);
	  COL_VERTEX(5170, -2360, 215);
	  COL_VERTEX(5170, -2360, 317);
	  COL_VERTEX(5273, -2278, 369);
	  COL_VERTEX(5170, -2278, 164);
	  COL_VERTEX(5170, -2196, 215);
	  COL_VERTEX(6299, -2360, 317);
	  COL_VERTEX(6299, -2360, 215);
	  COL_VERTEX(6401, -2196, 317);
	  COL_VERTEX(5172, -2349, 215);
	  COL_VERTEX(5172, -2349, 317);
	  COL_VERTEX(5070, -2042, 215);
	  COL_VERTEX(5172, -2093, 215);
	  COL_VERTEX(5172, -2093, 317);
	  COL_VERTEX(2662, -3071, -347);
	  COL_VERTEX(2048, -3071, 881);
	  COL_VERTEX(2662, -3071, 881);
	  COL_VERTEX(3072, -2764, 471);
	  COL_VERTEX(3072, -3071, 61);
	  COL_VERTEX(563, 3277, -1183);
	  COL_VERTEX(-4607, 3277, -1183);
	  COL_VERTEX(-2000, 3277, -26);
	  COL_VERTEX(563, 3277, 1126);
	  COL_VERTEX(-4607, 3533, 1126);
	  COL_VERTEX(-4607, 3277, 1126);
	  COL_VERTEX(-7525, 0, -1183);
	  COL_VERTEX(0, -3071, -306);
	  COL_VERTEX(-306, -2866, -306);
	  COL_VERTEX(-921, -3071, 922);
	  COL_VERTEX(-306, -3071, 307);
	  COL_VERTEX(-921, -3020, 307);
	  COL_VERTEX(-921, -3071, 307);
	  COL_VERTEX(4342, 205, -470);
	  COL_VERTEX(4403, 205, -531);
	  COL_VERTEX(4260, 205, -470);
	  COL_VERTEX(4403, 205, -613);
	  COL_VERTEX(4342, 205, -675);
	  COL_VERTEX(4260, 205, -675);
	  COL_VERTEX(4198, 205, -613);
	  COL_VERTEX(4198, 205, -531);
	  COL_VERTEX(4260, 205, 676);
	  COL_VERTEX(4342, 205, 676);
	  COL_VERTEX(4198, 205, 614);
	  COL_VERTEX(4198, 205, 532);
	  COL_VERTEX(4260, 205, 471);
	  COL_VERTEX(4342, 205, 471);
	  COL_VERTEX(4403, 205, 532);
	  COL_VERTEX(4403, 205, 614);
	  COL_VERTEX(-5488, -3071, 676);
	  COL_VERTEX(-5426, -3071, 614);
	  COL_VERTEX(-5570, -3071, 676);
	  COL_VERTEX(-5426, -3071, 532);
	  COL_VERTEX(-5488, -3071, 471);
	  COL_VERTEX(-5570, -3071, 471);
	  COL_VERTEX(-5631, -3071, 532);
	  COL_VERTEX(-5631, -3071, 614);
	  COL_VERTEX(-5488, -3071, -470);
	  COL_VERTEX(-5570, -3071, -470);
	  COL_VERTEX(-5631, -3071, -531);
	  COL_VERTEX(-5631, -3071, -613);
	  COL_VERTEX(-5570, -3071, -675);
	  COL_VERTEX(-5488, -3071, -675);
	  COL_VERTEX(-5426, -3071, -613);
	  COL_VERTEX(-5426, -3071, -531);
	  COL_VERTEX(-5488, -2764, -470);
	  COL_VERTEX(-5426, -2764, -531);
	  COL_VERTEX(-5570, -2764, -470);
	  COL_VERTEX(-5426, -2764, -613);
	  COL_VERTEX(-5488, -2764, -675);
	  COL_VERTEX(-5570, -2764, -675);
	  COL_VERTEX(-5631, -2764, -613);
	  COL_VERTEX(-5631, -2764, -531);
	  COL_VERTEX(-5570, -2764, 676);
	  COL_VERTEX(-5488, -2764, 676);
	  COL_VERTEX(-5631, -2764, 614);
	  COL_VERTEX(-5631, -2764, 532);
	  COL_VERTEX(-5570, -2764, 471);
	  COL_VERTEX(-5488, -2764, 471);
	  COL_VERTEX(-5426, -2764, 532);
	  COL_VERTEX(-5426, -2764, 614);
	  COL_VERTEX(-4146, -2661, -306);
	  COL_VERTEX(-4453, -2661, -613);
	  COL_VERTEX(-3993, -3071, -613);
	  COL_VERTEX(-7986, -3071, 512);
	  COL_VERTEX(-7065, -2764, 512);
	  COL_VERTEX(-7065, -3071, -511);
	  COL_VERTEX(-7986, -2764, 512);
	  COL_VERTEX(-6553, -2866, 307);
	  COL_VERTEX(-6041, -3071, 307);
	  COL_VERTEX(-7065, -3071, 322);
	  COL_VERTEX(-6041, -2866, -306);
	  COL_VERTEX(-6553, -2866, -306);
	  COL_VERTEX(-6041, -3071, -306);
	  COL_VERTEX(-7065, -2866, -306);
	  COL_VERTEX(-6297, 2867, 564);
	  COL_VERTEX(-6297, 2765, 564);
	  COL_VERTEX(-6297, 2611, 1);
	  COL_VERTEX(-7525, 2611, 1);
	  COL_VERTEX(-6297, 2867, 1);
	  COL_VERTEX(-6297, 2867, 52);
	  COL_VERTEX(-7218, 2611, 616);
	  COL_VERTEX(-6911, 2867, 1);
	  COL_VERTEX(-4965, 3584, 404);
	  COL_VERTEX(-4965, 3789, 404);
	  COL_VERTEX(-5682, 3584, 813);
	  COL_VERTEX(-5682, 3584, -1022);
	  COL_VERTEX(-4965, 3584, -1022);
	  COL_VERTEX(-4965, 3584, -209);
	  COL_VERTEX(-4965, 3686, 404);
	  COL_VERTEX(-5017, 3686, 404);
	  COL_VERTEX(-4965, 3789, -1022);
	  COL_VERTEX(-5017, 3789, -971);
	  COL_VERTEX(-6911, 3174, -1022);
	  COL_VERTEX(-6911, 2970, -1022);
	  COL_VERTEX(-5682, 3789, -1022);
	  COL_VERTEX(-6911, 2918, -612);
	  COL_VERTEX(-5682, 3584, -612);
	  COL_VERTEX(-4965, 3789, 813);
	  COL_VERTEX(-7525, 2867, 1);
	  COL_VERTEX(-6932, 2611, 1);
	  COL_VERTEX(-7525, 2918, -612);
	  COL_VERTEX(-7372, 2970, -1022);
	  COL_VERTEX(-7525, 3174, -612);
	  COL_VERTEX(-7474, 2867, 1);
	  COL_VERTEX(-7218, 2867, 616);
	  COL_VERTEX(-7474, 2765, 1);
	  COL_VERTEX(-7474, 3174, -612);
	  COL_VERTEX(-7474, 3072, -612);
	  COL_VERTEX(-7372, 3174, -1021);
	  COL_VERTEX(-7474, 3174, -611);
	  COL_VERTEX(-5682, 3789, -971);
	  COL_VERTEX(-6911, 3174, -971);
	  COL_VERTEX(-7321, 3072, -971);
	  COL_VERTEX(-5017, 3686, -209);
	  COL_VERTEX(-6911, 3174, -612);
	  COL_VERTEX(-6911, 3174, -663);
	  COL_VERTEX(-6962, 2867, 1);
	  COL_VERTEX(-6962, 2867, 52);
	  COL_VERTEX(-6962, 3174, -612);
	  COL_VERTEX(-6962, 2765, 52);
	  COL_VERTEX(-5682, 3789, -663);
	  COL_VERTEX(-5631, 3789, -663);
	  COL_VERTEX(-6911, 3072, -663);
	  COL_VERTEX(-5017, 3686, 761);
	  COL_VERTEX(-5631, 3789, 761);
	  COL_VERTEX(-5631, 3686, -663);
	  COL_VERTEX(-4965, 3789, -209);
	  COL_VERTEX(-767, 717, -306);
	  COL_VERTEX(-767, 717, -613);
	  COL_VERTEX(-767, 819, -306);
	  COL_VERTEX(-460, 819, -306);
	  COL_VERTEX(-767, 819, -613);
	  COL_VERTEX(-2354, 1331, -613);
	  COL_VERTEX(-562, 717, -306);
	  COL_VERTEX(-562, 819, -306);
	  COL_VERTEX(-665, 717, 0);
	  COL_VERTEX(-1637, 1229, 0);
	  COL_VERTEX(-562, 717, 0);
	  COL_VERTEX(-2047, 1229, 0);
	  COL_VERTEX(-2047, 1331, 0);
	  COL_VERTEX(-2047, 1229, -921);
	  COL_VERTEX(-2354, 1229, -613);
	  COL_VERTEX(-2047, 1331, -921);
	  COL_VERTEX(-1637, 1331, -921);
	  COL_VERTEX(-50, 410, 614);
	  COL_VERTEX(-665, 819, 614);
	  COL_VERTEX(-1074, 410, 0);
	  COL_VERTEX(-562, 819, 0);
	  COL_VERTEX(-1433, 410, 0);
	  COL_VERTEX(205, 205, 0);
	  COL_VERTEX(-1433, 410, 614);
	  COL_VERTEX(205, 205, 614);
	  COL_VERTEX(205, 410, 614);
	  COL_VERTEX(922, 3482, -262);
	  COL_VERTEX(922, 3482, -210);
	  COL_VERTEX(1536, 5478, -210);
	  COL_VERTEX(2765, 5248, -210);
	  COL_VERTEX(3994, 5018, -262);
	  COL_VERTEX(3994, 3482, -262);
	  COL_VERTEX(922, 4813, 403);
	  COL_VERTEX(3379, 4403, -210);
	  COL_VERTEX(3379, 3789, -210);
	  COL_VERTEX(2765, 3482, -210);
	  COL_VERTEX(2150, 4198, -210);
	  COL_VERTEX(2150, 3789, -210);
	  COL_VERTEX(922, 4813, -210);
	  COL_VERTEX(2150, 5248, -262);
	  COL_VERTEX(2765, 4198, -210);
	  COL_VERTEX(2150, 4198, 403);
	  COL_VERTEX(4342, 512, -470);
	  COL_VERTEX(4403, 512, -531);
	  COL_VERTEX(4260, 512, -470);
	  COL_VERTEX(4403, 512, -613);
	  COL_VERTEX(4342, 512, -675);
	  COL_VERTEX(4260, 512, -675);
	  COL_VERTEX(4198, 512, -613);
	  COL_VERTEX(4198, 512, -531);
	  COL_VERTEX(4260, 512, 676);
	  COL_VERTEX(4342, 512, 676);
	  COL_VERTEX(4198, 512, 614);
	  COL_VERTEX(4198, 512, 532);
	  COL_VERTEX(4260, 512, 471);
	  COL_VERTEX(4342, 512, 471);
	  COL_VERTEX(4403, 512, 532);
	  COL_VERTEX(4403, 512, 614);
	  COL_VERTEX(5734, 3533, 1126);
	  COL_VERTEX(563, 3533, 1126);
	  COL_VERTEX(5734, 3533, -1183);
	  COL_VERTEX(563, 3533, -1183);
	  COL_VERTEX(5734, 3277, 1126);
	  COL_VERTEX(5734, 3277, -1183);
	  COL_VERTEX(2150, 4383, -210);
	  COL_VERTEX(2150, 4383, 403);
	  COL_VERTEX(1741, 4383, -6);
	  COL_VERTEX(1536, 4383, -210);
	  COL_VERTEX(1946, 4403, -6);
	  COL_VERTEX(1946, 4383, 198);
	  COL_VERTEX(1741, 4383, 198);
	  COL_VERTEX(1741, 4403, 198);
	  COL_VERTEX(1536, 4198, 382);
	  COL_VERTEX(1536, 4198, 403);
	  COL_VERTEX(-4607, 3533, -1183);
	  COL_VERTEX(1536, 4813, 403);
	  COL_VERTEX(2765, 4198, 403);
	  COL_VERTEX(4403, 4250, -210);
	  COL_VERTEX(3994, 4045, 403);
	  COL_VERTEX(3994, 4403, 403);
	  COL_VERTEX(4403, 4403, -210);
	  COL_VERTEX(1536, 4813, -210);
	  COL_VERTEX(3994, 3789, 403);
	  COL_VERTEX(3994, 3789, -210);
	  COL_VERTEX(3994, 3482, 403);
	  COL_VERTEX(3994, 3482, -210);
	  COL_VERTEX(3379, 3789, 403);
	  COL_VERTEX(3379, 3482, 403);
	  COL_VERTEX(2765, 3482, 403);
	  COL_VERTEX(2150, 3482, 403);
	  COL_VERTEX(1536, 3482, 403);
	  COL_VERTEX(1536, 3482, -210);
	  COL_VERTEX(1536, 3789, -210);
	  COL_VERTEX(1536, 3789, 403);
	  COL_VERTEX(922, 3789, 403);
	  COL_VERTEX(922, 3482, 403);
	  COL_VERTEX(307, 3482, 710);
	  COL_VERTEX(307, 3482, -518);
	  COL_VERTEX(-306, 3482, 710);
	  COL_VERTEX(-306, 3482, -518);
	  COL_VERTEX(5965, 4255, 426);
	  COL_VERTEX(5555, 4403, -210);
	  COL_VERTEX(5965, 4403, -210);
	  COL_VERTEX(5555, 4250, 403);
	  COL_VERTEX(1075, -2170, -1904);
	  COL_VERTEX(1075, -2170, -1596);
	  COL_VERTEX(1382, -2170, -1904);
	  COL_VERTEX(1382, -2170, -1596);
	  COL_VERTEX(1024, -2170, -1289);
	  COL_VERTEX(1434, -2477, -613);
	  COL_VERTEX(2662, -2477, -613);
	  COL_VERTEX(2662, -2477, -306);
	  COL_VERTEX(2662, -2784, 61);
	  COL_VERTEX(-4146, -2969, -306);
	  COL_VERTEX(-4453, -2969, 307);
	  COL_VERTEX(-4453, -2743, 307);
	  COL_VERTEX(-4453, -2743, -306);
	  COL_VERTEX(-6962, 3072, -663);
	  COL_VERTEX(-4197, 410, 1);
	  COL_VERTEX(-4197, 205, 617);
	  COL_VERTEX(-4505, 205, 924);
	  COL_VERTEX(-5529, 205, 924);
	  COL_VERTEX(-5529, 410, 924);
	  COL_VERTEX(-5836, 205, 1);
	  COL_VERTEX(-5836, 410, 617);
	  COL_VERTEX(-5529, 205, -305);
	  COL_VERTEX(-4505, 410, -305);
	  COL_VERTEX(-4505, 205, -305);
	  COL_VERTEX(922, 410, 512);
	  COL_VERTEX(205, 410, 512);
	  COL_VERTEX(922, 205, 512);
	  COL_VERTEX(922, 307, 512);
	  COL_VERTEX(205, 205, 101);
	  COL_VERTEX(922, 205, 102);
	  COL_VERTEX(-4484, 3666, -209);
	  COL_VERTEX(-4484, 3666, 404);
	  COL_VERTEX(-4965, 3666, 404);
	  COL_VERTEX(-1330, 753, 614);
	  COL_VERTEX(-1330, 732, 614);
	  COL_VERTEX(-1330, 753, 0);
	  COL_VERTEX(-2457, 732, 614);
	  COL_VERTEX(-2457, 753, 614);
	  COL_VERTEX(-2457, 732, 0);
	  COL_VERTEX(-2380, 788, 0);
	  COL_VERTEX(-2380, 717, 0);
	  COL_VERTEX(-2380, 205, 0);
	  COL_VERTEX(-2431, 205, 0);
	  COL_VERTEX(-2380, 819, 0);
	  COL_VERTEX(-1407, 205, 0);
	  COL_VERTEX(-1356, 717, 0);
	  COL_VERTEX(-1356, 205, 0);
	  COL_VERTEX(-1356, 819, 0);
	  COL_VERTEX(-1356, 788, 0);
	  COL_VERTEX(-2431, 788, 614);
	  COL_VERTEX(-2431, 205, 614);
	  COL_VERTEX(-2405, 742, 640);
	  COL_VERTEX(-2405, 205, 640);
	  COL_VERTEX(-2405, 819, 640);
	  COL_VERTEX(-1407, 205, 614);
	  COL_VERTEX(-1381, 742, 640);
	  COL_VERTEX(-1381, 205, 640);
	  COL_VERTEX(-1381, 819, 640);
	  COL_VERTEX(-1407, 788, 614);
	  COL_VERTEX(-1330, 717, 0);
	  COL_VERTEX(-2457, 788, 0);
	  COL_VERTEX(-2457, 788, 614);
	  COL_VERTEX(-2149, 205, 617);
	  COL_VERTEX(-2969, 205, 617);
	  COL_VERTEX(-2969, 205, 2);
	  COL_VERTEX(-2149, 307, 2);
	  COL_VERTEX(-3276, 3686, -876);
	  COL_VERTEX(-3173, 3686, -774);
	  COL_VERTEX(1280, 410, -359);
	  COL_VERTEX(1178, 410, -462);
	  COL_VERTEX(-1330, 3686, -770);
	  COL_VERTEX(-1433, 3686, -872);
	  COL_VERTEX(1741, 410, 512);
	  COL_VERTEX(1741, 410, 102);
	  COL_VERTEX(1741, 307, 102);
	  COL_VERTEX(2458, 410, 102);
	  COL_VERTEX(4403, -1279, -204);
	  COL_VERTEX(3379, -1330, 819);
	  COL_VERTEX(3379, -665, 819);
	  COL_VERTEX(2458, 410, 512);
	  COL_VERTEX(2458, 205, 512);
	  COL_VERTEX(2662, -1125, 512);
	  COL_VERTEX(3379, -665, -255);
	  COL_VERTEX(3072, -665, 512);
	  COL_VERTEX(3072, -665, 102);
	  COL_VERTEX(3072, 410, 102);
	  COL_VERTEX(2662, 410, 102);
	  COL_VERTEX(2663, 0, 101);
	  COL_VERTEX(1126, 0, 1126);
	  COL_VERTEX(3277, 410, -101);
	  COL_VERTEX(3277, 205, 717);
	  COL_VERTEX(2458, 205, -101);
	  COL_VERTEX(2458, 205, 717);
	  COL_VERTEX(2458, 410, 717);
	  COL_VERTEX(3738, -1330, 461);
	  COL_VERTEX(3738, -1279, 154);
	  COL_VERTEX(3738, -1279, 461);
	  COL_VERTEX(4045, -1279, 461);
	  COL_VERTEX(7526, -2149, 573);
	  COL_VERTEX(6912, -2149, 573);
	  COL_VERTEX(7526, -2149, -40);
	  COL_VERTEX(6912, -2149, -40);
	  COL_VERTEX(6298, -2917, 573);
	  COL_VERTEX(5222, -2917, 573);
	  COL_VERTEX(6298, -3071, 573);
	  COL_VERTEX(4301, -3071, 573);
	  COL_VERTEX(3994, -3071, 881);
	  COL_VERTEX(6298, -3071, -40);
	  COL_VERTEX(5222, -3071, -40);
	  COL_VERTEX(4301, -2764, -40);
	  COL_VERTEX(3994, -2764, -347);
	  COL_VERTEX(3994, -3071, -347);
	  COL_VERTEX(3379, -3071, 881);
	  COL_VERTEX(3379, -2764, 881);
	  COL_VERTEX(3072, -2764, 573);
	  COL_VERTEX(3072, -3071, -40);
	  COL_VERTEX(3379, -3071, -347);
	  COL_VERTEX(5070, -2206, 215);
	  COL_VERTEX(5070, -2206, 317);
	  COL_VERTEX(4967, -2124, 164);
	  COL_VERTEX(5070, -2124, 164);
	  COL_VERTEX(5070, -2124, 369);
	  COL_VERTEX(4967, -2042, 215);
	  COL_VERTEX(4967, -2042, 317);
	  COL_VERTEX(4967, -2124, 369);
	  COL_VERTEX(3839, -2042, 317);
	  COL_VERTEX(5170, -2196, 317);
	  COL_VERTEX(6299, -2278, 164);
	  COL_VERTEX(6401, -2360, 317);
	  COL_VERTEX(6401, -2360, 215);
	  COL_VERTEX(6401, -2278, 164);
	  COL_VERTEX(6401, -2278, 369);
	  COL_VERTEX(6299, -2278, 369);
	  COL_VERTEX(6299, -2196, 317);
	  COL_VERTEX(6299, -2196, 215);
	  COL_VERTEX(6401, -2196, 215);
	  COL_VERTEX(5070, -2298, 215);
	  COL_VERTEX(5070, -2298, 317);
	  COL_VERTEX(2662, -2764, -347);
	  COL_VERTEX(2662, -2764, 881);
	  COL_VERTEX(2048, -2764, -347);
	  COL_VERTEX(2048, -3071, -347);
	  COL_VERTEX(2048, -2764, 881);
	  COL_VERTEX(2662, -3071, 471);
	  COL_VERTEX(3072, -3071, 471);
	  COL_VERTEX(2662, -2764, 471);
	  COL_VERTEX(2662, -2764, 61);
	  COL_VERTEX(3072, -2764, 61);
	  COL_VERTEX(2662, -3071, 61);
	  COL_VERTEX(3128, 3277, -26);
	  COL_VERTEX(0, -2866, -306);
	  COL_VERTEX(0, -2866, 922);
	  COL_VERTEX(0, -3071, 922);
	  COL_VERTEX(-306, -3071, -306);
	  COL_VERTEX(-306, -2866, 307);
	  COL_VERTEX(-921, -3020, 922);
	  COL_VERTEX(-5488, 0, -470);
	  COL_VERTEX(-5570, 0, -470);
	  COL_VERTEX(-5426, 0, -531);
	  COL_VERTEX(-5631, 0, -531);
	  COL_VERTEX(-5426, 0, -613);
	  COL_VERTEX(-5488, 0, -675);
	  COL_VERTEX(-5570, 0, -675);
	  COL_VERTEX(-5631, 0, -613);
	  COL_VERTEX(-5570, 0, 676);
	  COL_VERTEX(-5631, 0, 614);
	  COL_VERTEX(-5488, 0, 676);
	  COL_VERTEX(-5631, 0, 532);
	  COL_VERTEX(-5570, 0, 471);
	  COL_VERTEX(-5488, 0, 471);
	  COL_VERTEX(-5426, 0, 532);
	  COL_VERTEX(-5426, 0, 614);
	  COL_VERTEX(-4607, -3071, -306);
	  COL_VERTEX(-3993, -3071, -306);
	  COL_VERTEX(-4453, -2661, -306);
	  COL_VERTEX(-4607, -3071, -613);
	  COL_VERTEX(-4146, -2661, -613);
	  COL_VERTEX(-7065, -3071, 512);
	  COL_VERTEX(-7065, -2764, -511);
	  COL_VERTEX(-7986, -3071, -511);
	  COL_VERTEX(-7986, -2764, -511);
	  COL_VERTEX(-6041, -2866, 307);
	  COL_VERTEX(-7065, -2764, 307);
	  COL_VERTEX(-7065, -2866, 307);
	  COL_VERTEX(-7065, -3071, -306);
	  COL_VERTEX(-7065, -2764, -306);
	  COL_VERTEX(-6297, 2867, 616);
	  COL_VERTEX(-6297, 2611, 616);
	  COL_VERTEX(-7187, 2765, 564);
	  COL_VERTEX(-7187, 2867, 564);
	  COL_VERTEX(-6297, 2765, 52);
	  COL_VERTEX(-6911, 2867, 52);
	  COL_VERTEX(-4965, 3584, 813);
	  COL_VERTEX(-5017, 3789, 404);
	  COL_VERTEX(-5017, 3789, 761);
	  COL_VERTEX(-5682, 3789, 813);
	  COL_VERTEX(-4965, 3686, -209);
	  COL_VERTEX(-5017, 3789, -209);
	  COL_VERTEX(-5682, 3789, -612);
	  COL_VERTEX(-7372, 3174, -1022);
	  COL_VERTEX(-5017, 3686, -971);
	  COL_VERTEX(-5631, 3686, -971);
	  COL_VERTEX(-7321, 3174, -971);
	  COL_VERTEX(-6911, 3072, -971);
	  COL_VERTEX(-6962, 3174, -663);
	  COL_VERTEX(-6962, 2765, 1);
	  COL_VERTEX(-5682, 3635, -663);
	  COL_VERTEX(-5631, 3635, -663);
	  COL_VERTEX(-5631, 3686, 761);
	  COL_VERTEX(-6911, 3072, -612);
	  COL_VERTEX(-7525, 3072, -612);
	  COL_VERTEX(-460, 717, -306);
	  COL_VERTEX(-1330, 1229, -306);
	  COL_VERTEX(-1330, 1229, -613);
	  COL_VERTEX(-460, 717, -613);
	  COL_VERTEX(-460, 819, -613);
	  COL_VERTEX(-1330, 1331, -306);
	  COL_VERTEX(-1330, 1331, -613);
	  COL_VERTEX(-2354, 1229, -306);
	  COL_VERTEX(-2354, 1331, -306);
	  COL_VERTEX(-665, 819, 0);
	  COL_VERTEX(-665, 819, -306);
	  COL_VERTEX(-665, 717, -306);
	  COL_VERTEX(-1637, 1331, 0);
	  COL_VERTEX(-1637, 1229, -921);
	  COL_VERTEX(-562, 819, 614);
	  COL_VERTEX(-1074, 410, 614);
	  COL_VERTEX(-50, 410, 0);
	  COL_VERTEX(-1433, 205, 0);
	  COL_VERTEX(-1433, 205, 614);
	  COL_VERTEX(205, 410, 0);
	  COL_VERTEX(2765, 5248, -262);
	  COL_VERTEX(2765, 5018, -262);
	  COL_VERTEX(922, 5478, -262);
	  COL_VERTEX(1536, 5248, -262);
	  COL_VERTEX(1536, 5478, -262);
	  COL_VERTEX(922, 5478, -210);
	  COL_VERTEX(1536, 5248, -210);
	  COL_VERTEX(2765, 5018, -210);
	  COL_VERTEX(3994, 5018, -210);
	  COL_VERTEX(922, 5478, 403);
	  COL_VERTEX(3994, 4403, -210);
	  COL_VERTEX(2765, 3789, -210);
	  COL_VERTEX(3379, 3482, -210);
	  COL_VERTEX(1536, 4403, -210);
	  COL_VERTEX(2150, 5248, -210);
	  COL_VERTEX(922, 4403, -210);
	  COL_VERTEX(2150, 3482, -210);
	  COL_VERTEX(2765, 5248, 403);
	  COL_VERTEX(2150, 5248, 403);
	  COL_VERTEX(4260, 3277, -470);
	  COL_VERTEX(4342, 3277, -470);
	  COL_VERTEX(4403, 3277, -531);
	  COL_VERTEX(4198, 3277, -531);
	  COL_VERTEX(4403, 3277, -613);
	  COL_VERTEX(4198, 3277, -613);
	  COL_VERTEX(4342, 3277, -675);
	  COL_VERTEX(4260, 3277, -675);
	  COL_VERTEX(4198, 3277, 614);
	  COL_VERTEX(4260, 3277, 676);
	  COL_VERTEX(4342, 3277, 676);
	  COL_VERTEX(4198, 3277, 532);
	  COL_VERTEX(4260, 3277, 471);
	  COL_VERTEX(4342, 3277, 471);
	  COL_VERTEX(4403, 3277, 532);
	  COL_VERTEX(4403, 3277, 614);
	  COL_VERTEX(1946, 4383, -6);
	  COL_VERTEX(1741, 4403, -6);
	  COL_VERTEX(1536, 4383, 403);
	  COL_VERTEX(1946, 4403, 198);
	  COL_VERTEX(2150, 4383, 382);
	  COL_VERTEX(1536, 4383, 382);
	  COL_VERTEX(2150, 4198, 382);
	  COL_VERTEX(2150, 4403, 403);
	  COL_VERTEX(1536, 4403, 403);
	  COL_VERTEX(4403, 4403, 403);
	  COL_VERTEX(4403, 4250, 403);
	  COL_VERTEX(3994, 4045, -210);
	  COL_VERTEX(1536, 5478, 403);
	  COL_VERTEX(3379, 4403, 403);
	  COL_VERTEX(2765, 3789, 403);
	  COL_VERTEX(2150, 3789, 403);
	  COL_VERTEX(922, 4403, 403);
	  COL_VERTEX(922, 3789, -210);
	  COL_VERTEX(307, 3789, 710);
	  COL_VERTEX(-306, 3789, 710);
	  COL_VERTEX(307, 3789, -518);
	  COL_VERTEX(-306, 3789, -518);
	  COL_VERTEX(5555, 4250, -210);
	  COL_VERTEX(5965, 4255, -187);
	  COL_VERTEX(5555, 4403, 403);
	  COL_VERTEX(5965, 4403, 403);
	  COL_VERTEX(3379, -664, 819);
	  COL_VERTEX(-4484, 3686, 404);
	  COL_VERTEX(-4484, 3686, -209);
	  COL_VERTEX(2662, -2457, -306);
	  COL_VERTEX(2662, -2457, -613);
	  COL_VERTEX(2253, -2457, -613);
	  COL_VERTEX(1843, -2457, -613);
	  COL_VERTEX(1434, -2457, -613);
	  COL_VERTEX(1024, -2149, -1289);
	  COL_VERTEX(1690, -2149, -1289);
	  COL_VERTEX(1690, -2149, -2211);
	  COL_VERTEX(768, -2149, -1289);
	  COL_VERTEX(768, -2149, -2211);
	  COL_VERTEX(2150, 4403, -210);
	  COL_VERTEX(3072, -2457, -306);
	  COL_VERTEX(3072, -2457, -921);
	  COL_VERTEX(1843, -2457, -921);
	  COL_VERTEX(2253, -2457, -306);
	  COL_VERTEX(1024, -2457, -306);
	  COL_VERTEX(1024, -2457, -921);
	  COL_VERTEX(1434, -2457, -921);
	  COL_VERTEX(1434, -2149, -1289);
	  COL_VERTEX(1382, -2149, -1596);
	  COL_VERTEX(1075, -2149, -1596);
	  COL_VERTEX(1382, -2149, -1904);
	  COL_VERTEX(1075, -2149, -1904);
	  COL_TRI_INIT(SURFACE_DEFAULT, 949);
	  COL_TRI(58, 65, 79);
	  COL_TRI(79, 80, 58);
	  COL_TRI(81, 79, 65);
	  COL_TRI(61, 80, 82);
	  COL_TRI(61, 58, 80);
	  COL_TRI(83, 84, 85);
	  COL_TRI(83, 85, 86);
	  COL_TRI(87, 88, 89);
	  COL_TRI(87, 90, 88);
	  COL_TRI(91, 511, 512);
	  COL_TRI(91, 512, 93);
	  COL_TRI(92, 511, 91);
	  COL_TRI(92, 513, 511);
	  COL_TRI(93, 512, 514);
	  COL_TRI(93, 514, 94);
	  COL_TRI(94, 513, 92);
	  COL_TRI(94, 514, 513);
	  COL_TRI(95, 96, 515);
	  COL_TRI(101, 102, 100);
	  COL_TRI(96, 99, 515);
	  COL_TRI(97, 98, 516);
	  COL_TRI(98, 99, 516);
	  COL_TRI(99, 96, 516);
	  COL_TRI(97, 516, 101);
	  COL_TRI(100, 97, 101);
	  COL_TRI(102, 104, 517);
	  COL_TRI(102, 517, 100);
	  COL_TRI(103, 518, 517);
	  COL_TRI(104, 103, 517);
	  COL_TRI(105, 519, 518);
	  COL_TRI(103, 105, 518);
	  COL_TRI(106, 108, 520);
	  COL_TRI(106, 521, 108);
	  COL_TRI(109, 107, 106);
	  COL_TRI(107, 522, 521);
	  COL_TRI(107, 521, 106);
	  COL_TRI(108, 521, 522);
	  COL_TRI(109, 106, 520);
	  COL_TRI(51, 2, 0);
	  COL_TRI(51, 0, 29);
	  COL_TRI(51, 30, 4);
	  COL_TRI(51, 4, 2);
	  COL_TRI(112, 113, 527);
	  COL_TRI(4, 52, 9);
	  COL_TRI(4, 30, 52);
	  COL_TRI(9, 52, 53);
	  COL_TRI(110, 524, 387);
	  COL_TRI(111, 525, 112);
	  COL_TRI(111, 112, 526);
	  COL_TRI(116, 534, 532);
	  COL_TRI(113, 528, 527);
	  COL_TRI(112, 527, 526);
	  COL_TRI(113, 529, 528);
	  COL_TRI(114, 115, 530);
	  COL_TRI(114, 528, 529);
	  COL_TRI(114, 529, 531);
	  COL_TRI(114, 531, 115);
	  COL_TRI(115, 116, 530);
	  COL_TRI(116, 532, 530);
	  COL_TRI(116, 533, 534);
	  COL_TRI(119, 120, 539);
	  COL_TRI(111, 534, 533);
	  COL_TRI(111, 533, 525);
	  COL_TRI(117, 535, 536);
	  COL_TRI(117, 537, 535);
	  COL_TRI(118, 120, 535);
	  COL_TRI(118, 535, 538);
	  COL_TRI(120, 540, 539);
	  COL_TRI(84, 541, 85);
	  COL_TRI(84, 542, 541);
	  COL_TRI(121, 542, 543);
	  COL_TRI(121, 541, 542);
	  COL_TRI(122, 124, 285);
	  COL_TRI(127, 546, 544);
	  COL_TRI(123, 124, 208);
	  COL_TRI(124, 123, 285);
	  COL_TRI(125, 123, 208);
	  COL_TRI(126, 125, 211);
	  COL_TRI(125, 208, 211);
	  COL_TRI(127, 544, 545);
	  COL_TRI(132, 551, 552);
	  COL_TRI(128, 547, 548);
	  COL_TRI(128, 549, 547);
	  COL_TRI(129, 130, 550);
	  COL_TRI(130, 551, 550);
	  COL_TRI(130, 131, 551);
	  COL_TRI(131, 552, 551);
	  COL_TRI(131, 553, 552);
	  COL_TRI(129, 550, 554);
	  COL_TRI(132, 133, 551);
	  COL_TRI(133, 132, 553);
	  COL_TRI(133, 554, 550);
	  COL_TRI(133, 134, 554);
	  COL_TRI(134, 133, 130);
	  COL_TRI(133, 553, 131);
	  COL_TRI(135, 555, 138);
	  COL_TRI(135, 137, 555);
	  COL_TRI(140, 139, 559);
	  COL_TRI(137, 556, 557);
	  COL_TRI(137, 135, 556);
	  COL_TRI(135, 558, 559);
	  COL_TRI(135, 136, 558);
	  COL_TRI(138, 555, 557);
	  COL_TRI(138, 557, 556);
	  COL_TRI(139, 556, 559);
	  COL_TRI(139, 138, 556);
	  COL_TRI(142, 141, 560);
	  COL_TRI(140, 559, 558);
	  COL_TRI(134, 130, 129);
	  COL_TRI(136, 139, 140);
	  COL_TRI(136, 135, 139);
	  COL_TRI(141, 145, 560);
	  COL_TRI(141, 143, 145);
	  COL_TRI(146, 562, 564);
	  COL_TRI(143, 561, 145);
	  COL_TRI(143, 144, 561);
	  COL_TRI(142, 560, 146);
	  COL_TRI(144, 143, 562);
	  COL_TRI(144, 562, 563);
	  COL_TRI(145, 563, 562);
	  COL_TRI(145, 561, 563);
	  COL_TRI(146, 560, 562);
	  COL_TRI(147, 565, 149);
	  COL_TRI(147, 148, 565);
	  COL_TRI(148, 147, 566);
	  COL_TRI(148, 566, 567);
	  COL_TRI(149, 567, 566);
	  COL_TRI(150, 566, 568);
	  COL_TRI(150, 569, 566);
	  COL_TRI(151, 568, 566);
	  COL_TRI(149, 565, 567);
	  COL_TRI(151, 149, 569);
	  COL_TRI(151, 147, 149);
	  COL_TRI(152, 151, 569);
	  COL_TRI(152, 569, 150);
	  COL_TRI(142, 564, 562);
	  COL_TRI(141, 142, 562);
	  COL_TRI(151, 152, 568);
	  COL_TRI(136, 140, 558);
	  COL_TRI(153, 156, 570);
	  COL_TRI(152, 150, 568);
	  COL_TRI(153, 570, 155);
	  COL_TRI(154, 155, 570);
	  COL_TRI(155, 154, 571);
	  COL_TRI(155, 571, 153);
	  COL_TRI(154, 570, 156);
	  COL_TRI(156, 571, 154);
	  COL_TRI(153, 571, 156);
	  COL_TRI(142, 146, 564);
	  COL_TRI(157, 161, 159);
	  COL_TRI(158, 159, 161);
	  COL_TRI(159, 160, 157);
	  COL_TRI(158, 160, 159);
	  COL_TRI(160, 158, 572);
	  COL_TRI(160, 572, 157);
	  COL_TRI(161, 572, 158);
	  COL_TRI(157, 572, 161);
	  COL_TRI(165, 164, 576);
	  COL_TRI(134, 129, 554);
	  COL_TRI(162, 573, 165);
	  COL_TRI(163, 573, 162);
	  COL_TRI(163, 574, 573);
	  COL_TRI(164, 574, 163);
	  COL_TRI(164, 575, 574);
	  COL_TRI(165, 575, 164);
	  COL_TRI(162, 165, 576);
	  COL_TRI(166, 577, 169);
	  COL_TRI(166, 169, 578);
	  COL_TRI(167, 577, 166);
	  COL_TRI(167, 166, 168);
	  COL_TRI(168, 166, 578);
	  COL_TRI(169, 577, 167);
	  COL_TRI(170, 169, 167);
	  COL_TRI(171, 578, 169);
	  COL_TRI(171, 169, 170);
	  COL_TRI(168, 578, 171);
	  COL_TRI(172, 174, 173);
	  COL_TRI(173, 174, 579);
	  COL_TRI(172, 580, 174);
	  COL_TRI(174, 580, 175);
	  COL_TRI(174, 175, 579);
	  COL_TRI(175, 580, 172);
	  COL_TRI(176, 175, 172);
	  COL_TRI(177, 579, 175);
	  COL_TRI(177, 175, 176);
	  COL_TRI(173, 579, 177);
	  COL_TRI(178, 180, 179);
	  COL_TRI(179, 180, 581);
	  COL_TRI(179, 581, 181);
	  COL_TRI(180, 582, 182);
	  COL_TRI(180, 182, 581);
	  COL_TRI(178, 582, 180);
	  COL_TRI(181, 581, 182);
	  COL_TRI(182, 582, 178);
	  COL_TRI(187, 587, 186);
	  COL_TRI(181, 182, 183);
	  COL_TRI(183, 182, 178);
	  COL_TRI(184, 583, 584);
	  COL_TRI(184, 584, 585);
	  COL_TRI(185, 584, 586);
	  COL_TRI(186, 189, 187);
	  COL_TRI(191, 591, 590);
	  COL_TRI(188, 189, 186);
	  COL_TRI(186, 204, 588);
	  COL_TRI(186, 589, 189);
	  COL_TRI(186, 204, 589);
	  COL_TRI(189, 188, 223);
	  COL_TRI(189, 223, 187);
	  COL_TRI(190, 588, 204);
	  COL_TRI(191, 590, 583);
	  COL_TRI(197, 196, 595);
	  COL_TRI(192, 185, 586);
	  COL_TRI(193, 200, 592);
	  COL_TRI(193, 203, 200);
	  COL_TRI(194, 193, 197);
	  COL_TRI(194, 203, 193);
	  COL_TRI(195, 194, 594);
	  COL_TRI(194, 595, 594);
	  COL_TRI(196, 198, 595);
	  COL_TRI(199, 190, 197);
	  COL_TRI(190, 199, 588);
	  COL_TRI(190, 592, 200);
	  COL_TRI(200, 195, 190);
	  COL_TRI(201, 202, 200);
	  COL_TRI(202, 195, 200);
	  COL_TRI(203, 201, 200);
	  COL_TRI(195, 202, 596);
	  COL_TRI(195, 596, 194);
	  COL_TRI(190, 594, 589);
	  COL_TRI(204, 190, 589);
	  COL_TRI(125, 126, 194);
	  COL_TRI(125, 194, 598);
	  COL_TRI(205, 195, 194);
	  COL_TRI(205, 194, 126);
	  COL_TRI(123, 125, 598);
	  COL_TRI(195, 205, 599);
	  COL_TRI(195, 599, 210);
	  COL_TRI(285, 207, 209);
	  COL_TRI(206, 123, 210);
	  COL_TRI(123, 598, 210);
	  COL_TRI(123, 207, 285);
	  COL_TRI(206, 207, 123);
	  COL_TRI(207, 206, 209);
	  COL_TRI(208, 124, 64);
	  COL_TRI(208, 64, 67);
	  COL_TRI(68, 64, 124);
	  COL_TRI(80, 79, 206);
	  COL_TRI(80, 206, 599);
	  COL_TRI(209, 206, 79);
	  COL_TRI(209, 79, 81);
	  COL_TRI(210, 599, 206);
	  COL_TRI(82, 80, 599);
	  COL_TRI(82, 599, 205);
	  COL_TRI(82, 211, 62);
	  COL_TRI(67, 62, 211);
	  COL_TRI(67, 211, 208);
	  COL_TRI(82, 62, 61);
	  COL_TRI(126, 211, 82);
	  COL_TRI(126, 82, 205);
	  COL_TRI(194, 596, 597);
	  COL_TRI(194, 597, 203);
	  COL_TRI(203, 597, 201);
	  COL_TRI(212, 600, 214);
	  COL_TRI(212, 214, 601);
	  COL_TRI(213, 600, 212);
	  COL_TRI(213, 212, 602);
	  COL_TRI(214, 603, 601);
	  COL_TRI(214, 604, 603);
	  COL_TRI(213, 602, 603);
	  COL_TRI(213, 603, 604);
	  COL_TRI(215, 220, 221);
	  COL_TRI(216, 215, 221);
	  COL_TRI(217, 218, 215);
	  COL_TRI(216, 217, 215);
	  COL_TRI(218, 219, 215);
	  COL_TRI(219, 220, 215);
	  COL_TRI(220, 605, 588);
	  COL_TRI(221, 220, 588);
	  COL_TRI(220, 606, 607);
	  COL_TRI(220, 607, 605);
	  COL_TRI(217, 588, 605);
	  COL_TRI(218, 217, 605);
	  COL_TRI(188, 186, 217);
	  COL_TRI(222, 221, 588);
	  COL_TRI(216, 223, 217);
	  COL_TRI(218, 608, 219);
	  COL_TRI(218, 605, 607);
	  COL_TRI(218, 607, 608);
	  COL_TRI(186, 588, 217);
	  COL_TRI(223, 188, 217);
	  COL_TRI(199, 222, 588);
	  COL_TRI(199, 197, 222);
	  COL_TRI(216, 221, 593);
	  COL_TRI(216, 593, 223);
	  COL_TRI(223, 198, 187);
	  COL_TRI(223, 593, 198);
	  COL_TRI(187, 198, 196);
	  COL_TRI(198, 593, 595);
	  COL_TRI(228, 610, 612);
	  COL_TRI(187, 196, 587);
	  COL_TRI(224, 609, 610);
	  COL_TRI(224, 610, 228);
	  COL_TRI(225, 609, 224);
	  COL_TRI(226, 225, 224);
	  COL_TRI(226, 224, 227);
	  COL_TRI(227, 224, 228);
	  COL_TRI(225, 611, 609);
	  COL_TRI(228, 612, 230);
	  COL_TRI(227, 228, 229);
	  COL_TRI(229, 228, 230);
	  COL_TRI(230, 611, 225);
	  COL_TRI(231, 230, 225);
	  COL_TRI(231, 225, 226);
	  COL_TRI(230, 612, 611);
	  COL_TRI(229, 230, 231);
	  COL_TRI(232, 613, 614);
	  COL_TRI(232, 615, 613);
	  COL_TRI(233, 616, 232);
	  COL_TRI(233, 232, 614);
	  COL_TRI(234, 613, 615);
	  COL_TRI(234, 615, 618);
	  COL_TRI(235, 618, 619);
	  COL_TRI(235, 234, 618);
	  COL_TRI(235, 236, 620);
	  COL_TRI(235, 619, 236);
	  COL_TRI(236, 621, 620);
	  COL_TRI(236, 622, 621);
	  COL_TRI(233, 617, 616);
	  COL_TRI(233, 237, 617);
	  COL_TRI(241, 628, 629);
	  COL_TRI(237, 623, 617);
	  COL_TRI(237, 624, 623);
	  COL_TRI(238, 624, 625);
	  COL_TRI(238, 623, 624);
	  COL_TRI(238, 239, 626);
	  COL_TRI(238, 625, 239);
	  COL_TRI(239, 627, 626);
	  COL_TRI(239, 240, 627);
	  COL_TRI(240, 622, 627);
	  COL_TRI(240, 621, 622);
	  COL_TRI(241, 629, 242);
	  COL_TRI(241, 631, 628);
	  COL_TRI(242, 629, 632);
	  COL_TRI(242, 633, 630);
	  COL_TRI(242, 634, 633);
	  COL_TRI(242, 630, 241);
	  COL_TRI(242, 635, 634);
	  COL_TRI(243, 271, 633);
	  COL_TRI(241, 630, 631);
	  COL_TRI(243, 633, 634);
	  COL_TRI(243, 631, 271);
	  COL_TRI(243, 632, 629);
	  COL_TRI(243, 629, 628);
	  COL_TRI(243, 628, 631);
	  COL_TRI(242, 632, 635);
	  COL_TRI(244, 247, 636);
	  COL_TRI(244, 252, 248);
	  COL_TRI(245, 246, 248);
	  COL_TRI(246, 247, 248);
	  COL_TRI(247, 244, 248);
	  COL_TRI(248, 250, 245);
	  COL_TRI(248, 251, 250);
	  COL_TRI(249, 251, 248);
	  COL_TRI(250, 253, 245);
	  COL_TRI(253, 246, 245);
	  COL_TRI(247, 254, 636);
	  COL_TRI(250, 251, 636);
	  COL_TRI(251, 249, 636);
	  COL_TRI(252, 249, 248);
	  COL_TRI(253, 250, 636);
	  COL_TRI(254, 253, 636);
	  COL_TRI(259, 265, 637);
	  COL_TRI(255, 262, 261);
	  COL_TRI(255, 261, 256);
	  COL_TRI(256, 258, 255);
	  COL_TRI(257, 263, 255);
	  COL_TRI(258, 259, 255);
	  COL_TRI(259, 257, 255);
	  COL_TRI(260, 262, 255);
	  COL_TRI(261, 264, 256);
	  COL_TRI(264, 258, 256);
	  COL_TRI(257, 259, 637);
	  COL_TRI(261, 262, 637);
	  COL_TRI(262, 260, 637);
	  COL_TRI(263, 260, 255);
	  COL_TRI(264, 261, 637);
	  COL_TRI(265, 264, 637);
	  COL_TRI(268, 645, 644);
	  COL_TRI(266, 638, 267);
	  COL_TRI(267, 639, 266);
	  COL_TRI(267, 640, 639);
	  COL_TRI(267, 641, 640);
	  COL_TRI(266, 639, 642);
	  COL_TRI(266, 643, 644);
	  COL_TRI(266, 645, 638);
	  COL_TRI(266, 644, 645);
	  COL_TRI(267, 638, 641);
	  COL_TRI(268, 646, 645);
	  COL_TRI(268, 639, 640);
	  COL_TRI(268, 640, 641);
	  COL_TRI(268, 641, 646);
	  COL_TRI(268, 642, 639);
	  COL_TRI(266, 642, 643);
	  COL_TRI(269, 272, 273);
	  COL_TRI(269, 273, 270);
	  COL_TRI(270, 647, 269);
	  COL_TRI(269, 647, 271);
	  COL_TRI(269, 271, 272);
	  COL_TRI(271, 647, 648);
	  COL_TRI(270, 648, 647);
	  COL_TRI(271, 648, 243);
	  COL_TRI(272, 271, 243);
	  COL_TRI(272, 243, 273);
	  COL_TRI(273, 648, 270);
	  COL_TRI(273, 243, 648);
	  COL_TRI(274, 649, 650);
	  COL_TRI(274, 650, 276);
	  COL_TRI(274, 651, 649);
	  COL_TRI(274, 652, 651);
	  COL_TRI(275, 651, 652);
	  COL_TRI(275, 653, 651);
	  COL_TRI(276, 650, 653);
	  COL_TRI(276, 653, 275);
	  COL_TRI(277, 654, 655);
	  COL_TRI(277, 656, 654);
	  COL_TRI(278, 657, 658);
	  COL_TRI(278, 659, 657);
	  COL_TRI(279, 281, 280);
	  COL_TRI(280, 281, 284);
	  COL_TRI(281, 282, 284);
	  COL_TRI(282, 281, 279);
	  COL_TRI(283, 466, 74);
	  COL_TRI(283, 74, 71);
	  COL_TRI(283, 71, 72);
	  COL_TRI(283, 72, 481);
	  COL_TRI(72, 468, 481);
	  COL_TRI(72, 73, 468);
	  COL_TRI(284, 283, 481);
	  COL_TRI(284, 466, 283);
	  COL_TRI(284, 481, 280);
	  COL_TRI(81, 65, 70);
	  COL_TRI(81, 70, 68);
	  COL_TRI(81, 68, 122);
	  COL_TRI(68, 124, 122);
	  COL_TRI(209, 81, 122);
	  COL_TRI(209, 122, 285);
	  COL_TRI(286, 661, 662);
	  COL_TRI(286, 662, 663);
	  COL_TRI(287, 661, 286);
	  COL_TRI(288, 663, 662);
	  COL_TRI(289, 665, 287);
	  COL_TRI(287, 286, 664);
	  COL_TRI(289, 287, 664);
	  COL_TRI(290, 291, 666);
	  COL_TRI(291, 288, 666);
	  COL_TRI(289, 291, 290);
	  COL_TRI(289, 290, 665);
	  COL_TRI(295, 452, 450);
	  COL_TRI(288, 662, 666);
	  COL_TRI(292, 449, 451);
	  COL_TRI(292, 451, 294);
	  COL_TRI(293, 449, 292);
	  COL_TRI(293, 450, 449);
	  COL_TRI(294, 451, 456);
	  COL_TRI(294, 456, 299);
	  COL_TRI(295, 450, 293);
	  COL_TRI(301, 457, 300);
	  COL_TRI(296, 452, 295);
	  COL_TRI(296, 453, 452);
	  COL_TRI(297, 453, 296);
	  COL_TRI(297, 454, 453);
	  COL_TRI(298, 454, 297);
	  COL_TRI(298, 455, 454);
	  COL_TRI(299, 455, 298);
	  COL_TRI(299, 456, 455);
	  COL_TRI(300, 457, 459);
	  COL_TRI(300, 459, 302);
	  COL_TRI(305, 463, 306);
	  COL_TRI(301, 458, 457);
	  COL_TRI(302, 459, 460);
	  COL_TRI(302, 460, 303);
	  COL_TRI(303, 460, 461);
	  COL_TRI(303, 461, 304);
	  COL_TRI(304, 461, 462);
	  COL_TRI(304, 462, 305);
	  COL_TRI(305, 462, 463);
	  COL_TRI(310, 334, 315);
	  COL_TRI(306, 463, 464);
	  COL_TRI(306, 464, 307);
	  COL_TRI(307, 464, 458);
	  COL_TRI(307, 458, 301);
	  COL_TRI(308, 332, 310);
	  COL_TRI(308, 333, 332);
	  COL_TRI(309, 333, 308);
	  COL_TRI(310, 332, 334);
	  COL_TRI(315, 334, 335);
	  COL_TRI(309, 339, 333);
	  COL_TRI(311, 339, 309);
	  COL_TRI(311, 338, 339);
	  COL_TRI(312, 338, 311);
	  COL_TRI(312, 337, 338);
	  COL_TRI(313, 337, 312);
	  COL_TRI(313, 336, 337);
	  COL_TRI(314, 336, 313);
	  COL_TRI(314, 335, 336);
	  COL_TRI(315, 335, 314);
	  COL_TRI(321, 328, 327);
	  COL_TRI(316, 326, 317);
	  COL_TRI(317, 331, 318);
	  COL_TRI(317, 326, 331);
	  COL_TRI(318, 331, 330);
	  COL_TRI(318, 330, 319);
	  COL_TRI(316, 324, 326);
	  COL_TRI(319, 330, 329);
	  COL_TRI(319, 329, 320);
	  COL_TRI(320, 329, 328);
	  COL_TRI(320, 328, 321);
	  COL_TRI(325, 669, 667);
	  COL_TRI(321, 327, 322);
	  COL_TRI(322, 327, 325);
	  COL_TRI(322, 325, 323);
	  COL_TRI(323, 325, 324);
	  COL_TRI(323, 324, 316);
	  COL_TRI(324, 667, 668);
	  COL_TRI(324, 668, 326);
	  COL_TRI(325, 667, 324);
	  COL_TRI(330, 673, 329);
	  COL_TRI(326, 668, 670);
	  COL_TRI(326, 670, 331);
	  COL_TRI(327, 669, 325);
	  COL_TRI(327, 671, 669);
	  COL_TRI(328, 671, 327);
	  COL_TRI(328, 672, 671);
	  COL_TRI(329, 672, 328);
	  COL_TRI(329, 673, 672);
	  COL_TRI(334, 678, 335);
	  COL_TRI(330, 674, 673);
	  COL_TRI(331, 674, 330);
	  COL_TRI(331, 670, 674);
	  COL_TRI(332, 675, 676);
	  COL_TRI(333, 675, 332);
	  COL_TRI(332, 676, 334);
	  COL_TRI(333, 677, 675);
	  COL_TRI(334, 676, 678);
	  COL_TRI(108, 522, 523);
	  COL_TRI(335, 678, 679);
	  COL_TRI(335, 679, 336);
	  COL_TRI(336, 679, 680);
	  COL_TRI(336, 680, 337);
	  COL_TRI(337, 680, 681);
	  COL_TRI(337, 681, 338);
	  COL_TRI(338, 681, 682);
	  COL_TRI(338, 682, 339);
	  COL_TRI(339, 682, 677);
	  COL_TRI(339, 677, 333);
	  COL_TRI(343, 344, 346);
	  COL_TRI(340, 683, 684);
	  COL_TRI(340, 685, 683);
	  COL_TRI(341, 683, 685);
	  COL_TRI(341, 686, 683);
	  COL_TRI(342, 340, 684);
	  COL_TRI(342, 687, 340);
	  COL_TRI(341, 687, 342);
	  COL_TRI(341, 342, 686);
	  COL_TRI(349, 347, 694);
	  COL_TRI(344, 688, 345);
	  COL_TRI(344, 345, 689);
	  COL_TRI(343, 688, 344);
	  COL_TRI(345, 690, 691);
	  COL_TRI(345, 691, 689);
	  COL_TRI(346, 691, 690);
	  COL_TRI(346, 690, 343);
	  COL_TRI(347, 349, 348);
	  COL_TRI(348, 692, 347);
	  COL_TRI(347, 693, 694);
	  COL_TRI(350, 352, 351);
	  COL_TRI(351, 352, 695);
	  COL_TRI(352, 350, 692);
	  COL_TRI(352, 692, 348);
	  COL_TRI(353, 351, 695);
	  COL_TRI(351, 353, 696);
	  COL_TRI(354, 697, 698);
	  COL_TRI(354, 698, 355);
	  COL_TRI(355, 699, 700);
	  COL_TRI(355, 700, 354);
	  COL_TRI(356, 701, 355);
	  COL_TRI(356, 355, 698);
	  COL_TRI(357, 356, 698);
	  COL_TRI(358, 701, 356);
	  COL_TRI(359, 399, 701);
	  COL_TRI(358, 359, 701);
	  COL_TRI(357, 698, 360);
	  COL_TRI(360, 698, 697);
	  COL_TRI(361, 358, 356);
	  COL_TRI(361, 359, 358);
	  COL_TRI(361, 702, 359);
	  COL_TRI(362, 363, 377);
	  COL_TRI(362, 377, 703);
	  COL_TRI(363, 704, 705);
	  COL_TRI(363, 705, 377);
	  COL_TRI(364, 703, 377);
	  COL_TRI(365, 703, 364);
	  COL_TRI(365, 366, 703);
	  COL_TRI(371, 708, 406);
	  COL_TRI(366, 406, 367);
	  COL_TRI(367, 368, 362);
	  COL_TRI(367, 707, 368);
	  COL_TRI(368, 369, 704);
	  COL_TRI(368, 704, 363);
	  COL_TRI(369, 368, 707);
	  COL_TRI(366, 370, 406);
	  COL_TRI(370, 371, 406);
	  COL_TRI(372, 374, 365);
	  COL_TRI(372, 365, 373);
	  COL_TRI(365, 376, 375);
	  COL_TRI(373, 365, 375);
	  COL_TRI(374, 366, 365);
	  COL_TRI(375, 376, 709);
	  COL_TRI(376, 364, 706);
	  COL_TRI(376, 706, 709);
	  COL_TRI(364, 377, 706);
	  COL_TRI(377, 404, 706);
	  COL_TRI(375, 709, 394);
	  COL_TRI(360, 378, 357);
	  COL_TRI(378, 380, 357);
	  COL_TRI(357, 380, 379);
	  COL_TRI(360, 384, 378);
	  COL_TRI(360, 697, 384);
	  COL_TRI(361, 356, 379);
	  COL_TRI(375, 394, 361);
	  COL_TRI(379, 375, 361);
	  COL_TRI(380, 375, 379);
	  COL_TRI(380, 381, 373);
	  COL_TRI(374, 390, 371);
	  COL_TRI(374, 371, 370);
	  COL_TRI(374, 370, 366);
	  COL_TRI(380, 373, 375);
	  COL_TRI(381, 710, 372);
	  COL_TRI(381, 372, 373);
	  COL_TRI(385, 700, 699);
	  COL_TRI(382, 381, 380);
	  COL_TRI(382, 710, 381);
	  COL_TRI(378, 382, 380);
	  COL_TRI(383, 378, 384);
	  COL_TRI(384, 700, 383);
	  COL_TRI(384, 697, 354);
	  COL_TRI(384, 354, 700);
	  COL_TRI(385, 383, 700);
	  COL_TRI(389, 387, 392);
	  COL_TRI(386, 378, 383);
	  COL_TRI(386, 382, 378);
	  COL_TRI(387, 386, 383);
	  COL_TRI(387, 383, 385);
	  COL_TRI(382, 386, 713);
	  COL_TRI(382, 713, 710);
	  COL_TRI(388, 713, 391);
	  COL_TRI(389, 392, 713);
	  COL_TRI(390, 712, 711);
	  COL_TRI(388, 391, 372);
	  COL_TRI(374, 372, 391);
	  COL_TRI(390, 374, 391);
	  COL_TRI(391, 714, 712);
	  COL_TRI(391, 712, 390);
	  COL_TRI(392, 714, 391);
	  COL_TRI(392, 391, 713);
	  COL_TRI(390, 711, 371);
	  COL_TRI(395, 715, 398);
	  COL_TRI(393, 708, 371);
	  COL_TRI(394, 709, 400);
	  COL_TRI(395, 394, 400);
	  COL_TRI(396, 394, 398);
	  COL_TRI(396, 361, 394);
	  COL_TRI(395, 398, 394);
	  COL_TRI(397, 361, 396);
	  COL_TRI(359, 397, 399);
	  COL_TRI(397, 702, 361);
	  COL_TRI(110, 398, 715);
	  COL_TRI(398, 716, 396);
	  COL_TRI(398, 110, 716);
	  COL_TRI(110, 715, 524);
	  COL_TRI(399, 396, 716);
	  COL_TRI(399, 397, 396);
	  COL_TRI(400, 717, 402);
	  COL_TRI(400, 402, 395);
	  COL_TRI(401, 400, 706);
	  COL_TRI(400, 718, 717);
	  COL_TRI(402, 715, 395);
	  COL_TRI(402, 524, 715);
	  COL_TRI(400, 401, 718);
	  COL_TRI(401, 706, 404);
	  COL_TRI(377, 705, 404);
	  COL_TRI(403, 704, 369);
	  COL_TRI(403, 705, 704);
	  COL_TRI(404, 705, 403);
	  COL_TRI(393, 371, 711);
	  COL_TRI(404, 403, 719);
	  COL_TRI(405, 401, 404);
	  COL_TRI(405, 404, 719);
	  COL_TRI(406, 708, 393);
	  COL_TRI(406, 393, 707);
	  COL_TRI(369, 707, 393);
	  COL_TRI(394, 110, 720);
	  COL_TRI(394, 398, 110);
	  COL_TRI(408, 725, 722);
	  COL_TRI(386, 721, 387);
	  COL_TRI(386, 382, 721);
	  COL_TRI(407, 410, 409);
	  COL_TRI(407, 722, 410);
	  COL_TRI(408, 722, 407);
	  COL_TRI(409, 723, 407);
	  COL_TRI(407, 724, 408);
	  COL_TRI(407, 723, 724);
	  COL_TRI(410, 725, 726);
	  COL_TRI(410, 722, 725);
	  COL_TRI(414, 731, 427);
	  COL_TRI(409, 727, 723);
	  COL_TRI(411, 725, 408);
	  COL_TRI(411, 726, 725);
	  COL_TRI(412, 729, 730);
	  COL_TRI(412, 421, 729);
	  COL_TRI(413, 414, 427);
	  COL_TRI(414, 732, 731);
	  COL_TRI(413, 427, 417);
	  COL_TRI(415, 732, 733);
	  COL_TRI(415, 731, 732);
	  COL_TRI(408, 728, 411);
	  COL_TRI(408, 724, 728);
	  COL_TRI(418, 416, 734);
	  COL_TRI(416, 723, 727);
	  COL_TRI(417, 733, 413);
	  COL_TRI(417, 415, 733);
	  COL_TRI(418, 734, 419);
	  COL_TRI(419, 729, 418);
	  COL_TRI(419, 730, 729);
	  COL_TRI(418, 420, 735);
	  COL_TRI(418, 723, 416);
	  COL_TRI(416, 727, 734);
	  COL_TRI(420, 421, 422);
	  COL_TRI(421, 412, 422);
	  COL_TRI(422, 423, 735);
	  COL_TRI(422, 735, 420);
	  COL_TRI(423, 724, 735);
	  COL_TRI(423, 728, 724);
	  COL_TRI(418, 735, 724);
	  COL_TRI(418, 421, 420);
	  COL_TRI(418, 724, 723);
	  COL_TRI(418, 729, 421);
	  COL_TRI(424, 736, 425);
	  COL_TRI(424, 425, 737);
	  COL_TRI(425, 426, 737);
	  COL_TRI(425, 731, 426);
	  COL_TRI(425, 736, 427);
	  COL_TRI(427, 736, 424);
	  COL_TRI(426, 731, 427);
	  COL_TRI(426, 427, 738);
	  COL_TRI(427, 424, 738);
	  COL_TRI(428, 739, 740);
	  COL_TRI(428, 740, 430);
	  COL_TRI(429, 428, 741);
	  COL_TRI(433, 742, 743);
	  COL_TRI(430, 740, 431);
	  COL_TRI(431, 432, 430);
	  COL_TRI(429, 739, 428);
	  COL_TRI(432, 429, 741);
	  COL_TRI(432, 431, 429);
	  COL_TRI(425, 427, 731);
	  COL_TRI(437, 743, 749);
	  COL_TRI(433, 743, 437);
	  COL_TRI(434, 744, 433);
	  COL_TRI(433, 745, 742);
	  COL_TRI(433, 744, 746);
	  COL_TRI(434, 747, 744);
	  COL_TRI(433, 746, 745);
	  COL_TRI(435, 745, 746);
	  COL_TRI(435, 748, 745);
	  COL_TRI(436, 743, 742);
	  COL_TRI(436, 749, 743);
	  COL_TRI(433, 437, 438);
	  COL_TRI(438, 437, 750);
	  COL_TRI(438, 750, 492);
	  COL_TRI(439, 751, 747);
	  COL_TRI(439, 747, 445);
	  COL_TRI(440, 750, 749);
	  COL_TRI(440, 752, 750);
	  COL_TRI(441, 447, 443);
	  COL_TRI(441, 440, 447);
	  COL_TRI(440, 749, 447);
	  COL_TRI(443, 499, 441);
	  COL_TRI(443, 755, 499);
	  COL_TRI(443, 445, 755);
	  COL_TRI(443, 488, 445);
	  COL_TRI(443, 748, 488);
	  COL_TRI(443, 756, 748);
	  COL_TRI(444, 499, 498);
	  COL_TRI(445, 757, 755);
	  COL_TRI(446, 748, 756);
	  COL_TRI(446, 745, 748);
	  COL_TRI(442, 441, 753);
	  COL_TRI(442, 754, 441);
	  COL_TRI(444, 498, 758);
	  COL_TRI(447, 436, 759);
	  COL_TRI(448, 756, 443);
	  COL_TRI(448, 760, 756);
	  COL_TRI(452, 765, 763);
	  COL_TRI(437, 749, 750);
	  COL_TRI(449, 761, 451);
	  COL_TRI(450, 762, 449);
	  COL_TRI(449, 762, 761);
	  COL_TRI(450, 763, 762);
	  COL_TRI(451, 761, 764);
	  COL_TRI(451, 764, 456);
	  COL_TRI(452, 763, 450);
	  COL_TRI(458, 770, 457);
	  COL_TRI(453, 765, 452);
	  COL_TRI(453, 767, 765);
	  COL_TRI(454, 767, 453);
	  COL_TRI(454, 768, 767);
	  COL_TRI(455, 768, 454);
	  COL_TRI(455, 766, 768);
	  COL_TRI(456, 766, 455);
	  COL_TRI(456, 764, 766);
	  COL_TRI(457, 769, 459);
	  COL_TRI(457, 770, 769);
	  COL_TRI(462, 775, 463);
	  COL_TRI(458, 771, 770);
	  COL_TRI(459, 769, 772);
	  COL_TRI(459, 772, 460);
	  COL_TRI(460, 772, 773);
	  COL_TRI(460, 773, 461);
	  COL_TRI(461, 773, 774);
	  COL_TRI(461, 774, 462);
	  COL_TRI(462, 774, 775);
	  COL_TRI(284, 282, 466);
	  COL_TRI(463, 775, 776);
	  COL_TRI(463, 776, 464);
	  COL_TRI(464, 776, 771);
	  COL_TRI(464, 771, 458);
	  COL_TRI(78, 74, 465);
	  COL_TRI(74, 466, 465);
	  COL_TRI(465, 466, 469);
	  COL_TRI(466, 282, 469);
	  COL_TRI(467, 468, 76);
	  COL_TRI(468, 73, 76);
	  COL_TRI(279, 660, 282);
	  COL_TRI(469, 282, 660);
	  COL_TRI(470, 660, 279);
	  COL_TRI(469, 660, 470);
	  COL_TRI(472, 777, 471);
	  COL_TRI(467, 76, 465);
	  COL_TRI(76, 78, 465);
	  COL_TRI(467, 465, 469);
	  COL_TRI(470, 467, 469);
	  COL_TRI(471, 473, 474);
	  COL_TRI(471, 777, 473);
	  COL_TRI(479, 783, 781);
	  COL_TRI(473, 478, 477);
	  COL_TRI(473, 778, 478);
	  COL_TRI(474, 473, 477);
	  COL_TRI(475, 473, 777);
	  COL_TRI(475, 778, 473);
	  COL_TRI(474, 477, 779);
	  COL_TRI(476, 475, 777);
	  COL_TRI(472, 476, 777);
	  COL_TRI(477, 476, 472);
	  COL_TRI(477, 472, 779);
	  COL_TRI(476, 780, 475);
	  COL_TRI(478, 476, 477);
	  COL_TRI(478, 780, 476);
	  COL_TRI(479, 781, 782);
	  COL_TRI(482, 439, 488);
	  COL_TRI(448, 479, 783);
	  COL_TRI(448, 480, 479);
	  COL_TRI(480, 448, 784);
	  COL_TRI(480, 784, 785);
	  COL_TRI(470, 279, 468);
	  COL_TRI(470, 468, 467);
	  COL_TRI(481, 468, 280);
	  COL_TRI(468, 279, 280);
	  COL_TRI(485, 788, 484);
	  COL_TRI(439, 445, 488);
	  COL_TRI(483, 448, 447);
	  COL_TRI(448, 443, 447);
	  COL_TRI(484, 786, 787);
	  COL_TRI(484, 487, 786);
	  COL_TRI(485, 484, 787);
	  COL_TRI(486, 787, 786);
	  COL_TRI(486, 485, 787);
	  COL_TRI(487, 788, 752);
	  COL_TRI(487, 484, 788);
	  COL_TRI(482, 751, 439);
	  COL_TRI(482, 789, 751);
	  COL_TRI(488, 435, 789);
	  COL_TRI(488, 789, 482);
	  COL_TRI(495, 791, 792);
	  COL_TRI(489, 486, 790);
	  COL_TRI(489, 790, 493);
	  COL_TRI(490, 486, 489);
	  COL_TRI(491, 489, 493);
	  COL_TRI(492, 490, 489);
	  COL_TRI(492, 489, 491);
	  COL_TRI(490, 752, 486);
	  COL_TRI(493, 790, 440);
	  COL_TRI(491, 493, 494);
	  COL_TRI(493, 440, 441);
	  COL_TRI(494, 493, 441);
	  COL_TRI(494, 441, 754);
	  COL_TRI(495, 792, 496);
	  COL_TRI(442, 791, 495);
	  COL_TRI(442, 753, 791);
	  COL_TRI(496, 792, 444);
	  COL_TRI(496, 444, 758);
	  COL_TRI(483, 760, 448);
	  COL_TRI(483, 759, 760);
	  COL_TRI(447, 759, 483);
	  COL_TRI(503, 795, 796);
	  COL_TRI(497, 500, 501);
	  COL_TRI(498, 499, 500);
	  COL_TRI(498, 500, 497);
	  COL_TRI(499, 785, 500);
	  COL_TRI(500, 785, 793);
	  COL_TRI(500, 793, 501);
	  COL_TRI(499, 755, 785);
	  COL_TRI(501, 793, 757);
	  COL_TRI(497, 501, 502);
	  COL_TRI(501, 757, 794);
	  COL_TRI(502, 501, 794);
	  COL_TRI(502, 794, 434);
	  COL_TRI(503, 796, 505);
	  COL_TRI(504, 795, 503);
	  COL_TRI(504, 797, 795);
	  COL_TRI(505, 796, 798);
	  COL_TRI(505, 798, 506);
	  COL_TRI(506, 797, 504);
	  COL_TRI(506, 798, 797);
	  COL_TRI(9, 53, 11);
	  COL_TRI(11, 53, 31);
	  COL_TRI(11, 31, 13);
	  COL_TRI(13, 31, 32);
	  COL_TRI(13, 32, 35);
	  COL_TRI(33, 29, 0);
	  COL_TRI(33, 0, 34);
	  COL_TRI(507, 510, 799);
	  COL_TRI(507, 799, 800);
	  COL_TRI(508, 509, 799);
	  COL_TRI(509, 800, 799);
	  COL_TRI(510, 507, 801);
	  COL_TRI(507, 802, 801);
	  COL_TRI(508, 510, 801);
	  COL_TRI(508, 799, 510);
	  COL_TRI_INIT(SURFACE_BURNING, 24);
	  COL_TRI(54, 55, 56);
	  COL_TRI(54, 57, 55);
	  COL_TRI(58, 59, 60);
	  COL_TRI(58, 61, 59);
	  COL_TRI(62, 59, 61);
	  COL_TRI(62, 63, 59);
	  COL_TRI(60, 64, 65);
	  COL_TRI(58, 60, 65);
	  COL_TRI(60, 66, 64);
	  COL_TRI(66, 63, 62);
	  COL_TRI(66, 67, 64);
	  COL_TRI(66, 62, 67);
	  COL_TRI(68, 69, 64);
	  COL_TRI(64, 69, 65);
	  COL_TRI(70, 65, 69);
	  COL_TRI(71, 77, 72);
	  COL_TRI(71, 74, 77);
	  COL_TRI(70, 69, 68);
	  COL_TRI(72, 77, 73);
	  COL_TRI(73, 77, 74);
	  COL_TRI(74, 75, 73);
	  COL_TRI(73, 75, 76);
	  COL_TRI(75, 74, 78);
	  COL_TRI(76, 75, 78);
	  COL_TRI_INIT(SURFACE_HANGABLE, 6);
	  COL_TRI(545, 549, 127);
	  COL_TRI(545, 547, 549);
	  COL_TRI(198, 589, 595);
	  COL_TRI(589, 594, 595);
	  COL_TRI(198, 189, 803);
	  COL_TRI(198, 187, 189);
	  COL_TRI_INIT(SURFACE_VERY_SLIPPERY, 80);
	  COL_TRI(9, 8, 14);
	  COL_TRI(0, 1, 2);
	  COL_TRI(2, 1, 3);
	  COL_TRI(2, 3, 4);
	  COL_TRI(5, 2, 4);
	  COL_TRI(6, 0, 2);
	  COL_TRI(6, 2, 5);
	  COL_TRI(0, 7, 1);
	  COL_TRI(4, 3, 8);
	  COL_TRI(4, 8, 9);
	  COL_TRI(9, 10, 4);
	  COL_TRI(5, 4, 10);
	  COL_TRI(11, 12, 13);
	  COL_TRI(11, 14, 12);
	  COL_TRI(9, 14, 11);
	  COL_TRI(11, 15, 9);
	  COL_TRI(18, 17, 13);
	  COL_TRI(18, 13, 35);
	  COL_TRI(11, 13, 17);
	  COL_TRI(9, 15, 10);
	  COL_TRI(0, 19, 34);
	  COL_TRI(0, 6, 19);
	  COL_TRI(5, 36, 6);
	  COL_TRI(34, 19, 18);
	  COL_TRI(34, 18, 35);
	  COL_TRI(6, 37, 19);
	  COL_TRI(6, 36, 37);
	  COL_TRI(19, 37, 39);
	  COL_TRI(19, 39, 18);
	  COL_TRI(5, 38, 36);
	  COL_TRI(18, 39, 40);
	  COL_TRI(18, 40, 17);
	  COL_TRI(17, 40, 41);
	  COL_TRI(17, 41, 16);
	  COL_TRI(16, 41, 42);
	  COL_TRI(23, 44, 45);
	  COL_TRI(16, 42, 15);
	  COL_TRI(15, 42, 43);
	  COL_TRI(15, 43, 10);
	  COL_TRI(10, 43, 38);
	  COL_TRI(10, 38, 5);
	  COL_TRI(20, 44, 45);
	  COL_TRI(21, 44, 20);
	  COL_TRI(20, 45, 22);
	  COL_TRI(22, 45, 46);
	  COL_TRI(23, 45, 46);
	  COL_TRI(27, 23, 49);
	  COL_TRI(22, 46, 24);
	  COL_TRI(23, 47, 44);
	  COL_TRI(21, 47, 44);
	  COL_TRI(24, 46, 48);
	  COL_TRI(23, 46, 48);
	  COL_TRI(24, 48, 25);
	  COL_TRI(25, 48, 50);
	  COL_TRI(23, 48, 50);
	  COL_TRI(25, 50, 26);
	  COL_TRI(26, 50, 23);
	  COL_TRI(26, 23, 27);
	  COL_TRI(23, 49, 47);
	  COL_TRI(30, 51, 22);
	  COL_TRI(27, 49, 28);
	  COL_TRI(28, 49, 47);
	  COL_TRI(28, 47, 21);
	  COL_TRI(29, 21, 20);
	  COL_TRI(29, 33, 21);
	  COL_TRI(29, 22, 51);
	  COL_TRI(29, 20, 22);
	  COL_TRI(24, 30, 22);
	  COL_TRI(24, 52, 30);
	  COL_TRI(24, 25, 52);
	  COL_TRI(25, 26, 53);
	  COL_TRI(25, 53, 52);
	  COL_TRI(31, 53, 26);
	  COL_TRI(32, 31, 28);
	  COL_TRI(31, 26, 27);
	  COL_TRI(31, 27, 28);
	  COL_TRI(33, 32, 28);
	  COL_TRI(33, 28, 21);
	  COL_TRI(11, 16, 15);
	  COL_TRI(11, 17, 16);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 156);
	  COL_TRI(524, 714, 387);
	  COL_TRI(714, 392, 387);
	  COL_TRI(712, 714, 524);
	  COL_TRI(110, 387, 399);
	  COL_TRI(387, 385, 399);
	  COL_TRI(712, 524, 405);
	  COL_TRI(368, 804, 805);
	  COL_TRI(368, 805, 707);
	  COL_TRI(120, 119, 536);
	  COL_TRI(90, 805, 804);
	  COL_TRI(90, 804, 88);
	  COL_TRI(115, 525, 533);
	  COL_TRI(115, 533, 116);
	  COL_TRI(115, 112, 525);
	  COL_TRI(115, 531, 529);
	  COL_TRI(115, 529, 113);
	  COL_TRI(115, 113, 112);
	  COL_TRI(586, 583, 590);
	  COL_TRI(120, 536, 535);
	  COL_TRI(546, 548, 544);
	  COL_TRI(546, 128, 548);
	  COL_TRI(163, 576, 164);
	  COL_TRI(163, 162, 576);
	  COL_TRI(586, 584, 583);
	  COL_TRI(204, 607, 606);
	  COL_TRI(201, 604, 214);
	  COL_TRI(604, 201, 597);
	  COL_TRI(604, 597, 213);
	  COL_TRI(213, 597, 596);
	  COL_TRI(213, 596, 600);
	  COL_TRI(214, 600, 596);
	  COL_TRI(214, 596, 202);
	  COL_TRI(201, 214, 202);
	  COL_TRI(607, 186, 608);
	  COL_TRI(607, 204, 186);
	  COL_TRI(204, 197, 190);
	  COL_TRI(204, 606, 196);
	  COL_TRI(204, 196, 197);
	  COL_TRI(219, 608, 186);
	  COL_TRI(219, 186, 587);
	  COL_TRI(196, 606, 219);
	  COL_TRI(196, 219, 587);
	  COL_TRI(219, 606, 220);
	  COL_TRI(611, 612, 610);
	  COL_TRI(611, 610, 609);
	  COL_TRI(614, 613, 234);
	  COL_TRI(614, 620, 233);
	  COL_TRI(614, 235, 620);
	  COL_TRI(614, 234, 235);
	  COL_TRI(240, 620, 621);
	  COL_TRI(240, 233, 620);
	  COL_TRI(240, 239, 625);
	  COL_TRI(240, 625, 624);
	  COL_TRI(240, 237, 233);
	  COL_TRI(240, 624, 237);
	  COL_TRI(253, 254, 247);
	  COL_TRI(635, 632, 243);
	  COL_TRI(635, 243, 634);
	  COL_TRI(633, 271, 631);
	  COL_TRI(633, 631, 630);
	  COL_TRI(244, 636, 252);
	  COL_TRI(636, 249, 252);
	  COL_TRI(643, 268, 644);
	  COL_TRI(246, 253, 247);
	  COL_TRI(257, 637, 263);
	  COL_TRI(637, 260, 263);
	  COL_TRI(264, 265, 259);
	  COL_TRI(258, 264, 259);
	  COL_TRI(643, 642, 268);
	  COL_TRI(645, 641, 638);
	  COL_TRI(645, 646, 641);
	  COL_TRI(649, 651, 653);
	  COL_TRI(649, 653, 650);
	  COL_TRI(806, 657, 658);
	  COL_TRI(806, 658, 817);
	  COL_TRI(658, 656, 277);
	  COL_TRI(658, 657, 656);
	  COL_TRI(807, 818, 819);
	  COL_TRI(807, 806, 817);
	  COL_TRI(807, 817, 818);
	  COL_TRI(808, 807, 819);
	  COL_TRI(808, 819, 809);
	  COL_TRI(809, 820, 808);
	  COL_TRI(809, 810, 820);
	  COL_TRI(810, 821, 820);
	  COL_TRI(810, 822, 821);
	  COL_TRI(810, 823, 822);
	  COL_TRI(290, 666, 665);
	  COL_TRI(811, 823, 824);
	  COL_TRI(811, 822, 823);
	  COL_TRI(812, 825, 826);
	  COL_TRI(812, 826, 814);
	  COL_TRI(813, 825, 812);
	  COL_TRI(813, 827, 825);
	  COL_TRI(814, 826, 828);
	  COL_TRI(814, 828, 815);
	  COL_TRI(815, 828, 827);
	  COL_TRI(815, 827, 813);
	  COL_TRI(685, 340, 687);
	  COL_TRI(665, 662, 661);
	  COL_TRI(666, 662, 665);
	  COL_TRI(665, 661, 287);
	  COL_TRI(523, 522, 107);
	  COL_TRI(523, 107, 109);
	  COL_TRI(685, 687, 341);
	  COL_TRI(399, 355, 701);
	  COL_TRI(689, 346, 344);
	  COL_TRI(689, 691, 346);
	  COL_TRI(350, 347, 692);
	  COL_TRI(350, 351, 347);
	  COL_TRI(693, 347, 351);
	  COL_TRI(693, 351, 696);
	  COL_TRI(399, 699, 355);
	  COL_TRI(399, 385, 699);
	  COL_TRI(412, 734, 727);
	  COL_TRI(712, 719, 403);
	  COL_TRI(711, 712, 403);
	  COL_TRI(411, 727, 409);
	  COL_TRI(409, 410, 726);
	  COL_TRI(409, 726, 411);
	  COL_TRI(411, 728, 727);
	  COL_TRI(412, 730, 419);
	  COL_TRI(412, 419, 734);
	  COL_TRI(424, 741, 738);
	  COL_TRI(412, 728, 423);
	  COL_TRI(412, 423, 422);
	  COL_TRI(412, 727, 728);
	  COL_TRI(430, 426, 428);
	  COL_TRI(430, 737, 426);
	  COL_TRI(424, 432, 741);
	  COL_TRI(752, 440, 790);
	  COL_TRI(753, 444, 792);
	  COL_TRI(753, 792, 791);
	  COL_TRI(487, 752, 486);
	  COL_TRI(487, 486, 786);
	  COL_TRI(746, 744, 751);
	  COL_TRI(746, 751, 789);
	  COL_TRI(797, 796, 795);
	  COL_TRI(752, 790, 486);
	  COL_TRI(742, 760, 759);
	  COL_TRI(742, 446, 760);
	  COL_TRI(755, 757, 793);
	  COL_TRI(755, 793, 785);
	  COL_TRI(797, 798, 796);
	  COL_TRI(801, 509, 508);
	  COL_TRI(785, 784, 780);
	  COL_TRI(785, 780, 478);
	  COL_TRI(785, 778, 755);
	  COL_TRI(785, 478, 778);
	  COL_TRI(755, 778, 475);
	  COL_TRI(755, 475, 816);
	  COL_TRI(816, 780, 784);
	  COL_TRI(816, 475, 780);
	  COL_TRI(35, 32, 33);
	  COL_TRI(35, 33, 34);
	  COL_TRI(801, 802, 509);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(24);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start,   /*pos*/ -7577, -2764,    0, /*yaw*/ 64); // unused, probably an early way to set initial position
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03, /*pos*/ -5938, -3071,    0, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_04, /*pos*/ -5488, -1535,   41, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_04, /*pos*/  4342,  1741,   41, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_05, /*pos*/ -1965, -3030,   10, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_06, /*pos*/ -1996,  3277,  -19, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_06, /*pos*/ -4914,     0,  -19, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_07, /*pos*/  1843, -3071, -398, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_08, /*pos*/  4659, -1663,  307, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_09, /*pos*/  3123,  -511,  307, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0A, /*pos*/  1382,     0,   -6, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0B, /*pos*/  1229,   205, -410, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0B, /*pos*/ -3225,  3482, -825, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0B, /*pos*/ -1381,  3482, -821, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0C, /*pos*/ -1433,   717, -127, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0D, /*pos*/  -741,   589,  307, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0E, /*pos*/ -5017,   205,  310, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0F, /*pos*/ -6297,  3251,    1, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_10, /*pos*/ -4556,  3482,   97, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_11, /*pos*/  1946,  4506,   96, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_12, /*pos*/  1946,  4352,   96, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_13, /*pos*/  6540,  3796,   83, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_14, /*pos*/  6740,  4224,   74, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_15, /*pos*/  3123,  3277,  -19, /*yaw*/  0);
	  COL_END();
	}

	function bitfs_seg7_collision_07015124() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(-204, 154, -204);
	  COL_VERTEX(205, 154, -204);
	  COL_VERTEX(184, 0, -183);
	  COL_VERTEX(-183, 0, -183);
	  COL_VERTEX(184, 0, 184);
	  COL_VERTEX(-183, 0, 184);
	  COL_VERTEX(205, 154, 205);
	  COL_VERTEX(-204, 154, 205);
	  COL_TRI_INIT(SURFACE_DEFAULT, 14);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(3, 4, 5);
	  COL_TRI(3, 2, 4);
	  COL_TRI(2, 6, 4);
	  COL_TRI(6, 5, 4);
	  COL_TRI(2, 1, 6);
	  COL_TRI(1, 3, 2);
	  COL_TRI(6, 7, 5);
	  COL_TRI(5, 7, 0);
	  COL_TRI(5, 0, 3);
	  COL_TRI(7, 6, 1);
	  COL_TRI(7, 1, 0);
	  COL_TRI(1, 0, 3);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bitfs_seg7_collision_07015714() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x5);
	  COL_VERTEX(0, 0, 0);
	  COL_VERTEX(307, 307, -306);
	  COL_VERTEX(307, 307, 307);
	  COL_VERTEX(-306, 307, -306);
	  COL_VERTEX(-306, 307, 307);
	  COL_TRI_INIT(SURFACE_DEFAULT, 4);
	  COL_TRI(0, 1, 2);
	  COL_TRI(1, 0, 3);
	  COL_TRI(4, 3, 0);
	  COL_TRI(0, 2, 4);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 2);
	  COL_TRI(1, 3, 4);
	  COL_TRI(1, 4, 2);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bitfs_seg7_collision_070157E0() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(307, 0, -306);
	  COL_VERTEX(-306, 205, -306);
	  COL_VERTEX(307, 205, -306);
	  COL_VERTEX(-306, 0, -306);
	  COL_VERTEX(307, 205, 307);
	  COL_VERTEX(307, 0, 307);
	  COL_VERTEX(-306, 205, 307);
	  COL_VERTEX(-306, 0, 307);
	  COL_TRI_INIT(SURFACE_DEFAULT, 10);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(0, 4, 5);
	  COL_TRI(0, 2, 4);
	  COL_TRI(2, 1, 6);
	  COL_TRI(7, 6, 1);
	  COL_TRI(7, 1, 3);
	  COL_TRI(2, 6, 4);
	  COL_TRI(4, 7, 5);
	  COL_TRI(4, 6, 7);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bitfs_seg7_collision_07015928() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(-511, 179, 307);
	  COL_VERTEX(512, 179, 307);
	  COL_VERTEX(512, 179, -306);
	  COL_VERTEX(512, 26, -306);
	  COL_VERTEX(512, 26, 307);
	  COL_VERTEX(-511, 26, 307);
	  COL_VERTEX(-511, 26, -306);
	  COL_VERTEX(-511, 179, -306);
	  COL_TRI_INIT(SURFACE_DEFAULT, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(1, 3, 2);
	  COL_TRI(1, 4, 3);
	  COL_TRI(5, 1, 0);
	  COL_TRI(5, 4, 1);
	  COL_TRI(4, 6, 3);
	  COL_TRI(7, 2, 3);
	  COL_TRI(0, 2, 7);
	  COL_TRI(4, 5, 6);
	  COL_TRI(0, 6, 5);
	  COL_TRI(0, 7, 6);
	  COL_TRI(7, 3, 6);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bitfs_seg7_collision_sinking_cage_platform() {
	  COL_INIT();
	  COL_VERTEX_INIT(0xA);
	  COL_VERTEX(307, 0, 307);
	  COL_VERTEX(307, 0, -306);
	  COL_VERTEX(307, 152, 307);
	  COL_VERTEX(307, 152, -306);
	  COL_VERTEX(-306, 0, -306);
	  COL_VERTEX(307, 154, -306);
	  COL_VERTEX(-306, 154, -306);
	  COL_VERTEX(-306, 0, 307);
	  COL_VERTEX(-306, 154, 307);
	  COL_VERTEX(307, 154, 307);
	  COL_TRI_INIT(SURFACE_DEFAULT, 10);
	  COL_TRI(0, 1, 2);
	  COL_TRI(1, 3, 2);
	  COL_TRI(1, 4, 5);
	  COL_TRI(6, 4, 7);
	  COL_TRI(4, 6, 5);
	  COL_TRI(8, 6, 7);
	  COL_TRI(3, 6, 8);
	  COL_TRI(9, 7, 0);
	  COL_TRI(9, 8, 7);
	  COL_TRI(3, 8, 2);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bitfs_seg7_collision_sinking_platform() {
	  COL_INIT();
	  COL_VERTEX_INIT(0xE);
	  COL_VERTEX(922, 0, 614);
	  COL_VERTEX(614, 56, 614);
	  COL_VERTEX(307, 0, 614);
	  COL_VERTEX(922, 0, -613);
	  COL_VERTEX(307, 0, -613);
	  COL_VERTEX(614, 56, -613);
	  COL_VERTEX(0, 56, 614);
	  COL_VERTEX(-306, 0, 614);
	  COL_VERTEX(-613, 56, 614);
	  COL_VERTEX(-921, 0, 614);
	  COL_VERTEX(-306, 0, -613);
	  COL_VERTEX(0, 56, -613);
	  COL_VERTEX(-921, 0, -613);
	  COL_VERTEX(-613, 56, -613);
	  COL_TRI_INIT(SURFACE_DEFAULT, 6);
	  COL_TRI(0, 1, 2);
	  COL_TRI(3, 4, 5);
	  COL_TRI(2, 6, 7);
	  COL_TRI(7, 8, 9);
	  COL_TRI(4, 10, 11);
	  COL_TRI(10, 12, 13);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 12);
	  COL_TRI(5, 1, 0);
	  COL_TRI(12, 8, 13);
	  COL_TRI(12, 9, 8);
	  COL_TRI(13, 8, 7);
	  COL_TRI(13, 7, 10);
	  COL_TRI(10, 7, 6);
	  COL_TRI(10, 6, 11);
	  COL_TRI(11, 6, 2);
	  COL_TRI(11, 2, 4);
	  COL_TRI(4, 2, 1);
	  COL_TRI(4, 1, 5);
	  COL_TRI(5, 0, 3);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bitfs_seg7_collision_07015768() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(-361, 109, 179);
	  COL_VERTEX(355, 109, 179);
	  COL_VERTEX(355, 109, -188);
	  COL_VERTEX(355, 7, 179);
	  COL_VERTEX(355, 7, -188);
	  COL_VERTEX(-361, 7, 179);
	  COL_VERTEX(-361, 7, -188);
	  COL_VERTEX(-361, 109, -188);
	  COL_TRI_INIT(SURFACE_DEFAULT, 10);
	  COL_TRI(0, 1, 2);
	  COL_TRI(1, 3, 4);
	  COL_TRI(1, 4, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(0, 5, 3);
	  COL_TRI(2, 4, 6);
	  COL_TRI(2, 6, 7);
	  COL_TRI(0, 2, 7);
	  COL_TRI(7, 5, 0);
	  COL_TRI(7, 6, 5);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bitfs_seg7_collision_squishable_platform() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x46);
	  COL_VERTEX(-306, 1331, 310);
	  COL_VERTEX(0, 1331, -150);
	  COL_VERTEX(0, 1331, -457);
	  COL_VERTEX(-306, 1331, -918);
	  COL_VERTEX(614, 1331, 310);
	  COL_VERTEX(307, 1331, -150);
	  COL_VERTEX(307, 1126, -150);
	  COL_VERTEX(614, 1331, -918);
	  COL_VERTEX(307, 1331, -457);
	  COL_VERTEX(0, 1126, -150);
	  COL_VERTEX(0, 1126, -457);
	  COL_VERTEX(307, 1126, -457);
	  COL_VERTEX(512, 1126, 208);
	  COL_VERTEX(512, 1126, -815);
	  COL_VERTEX(-204, 1126, -815);
	  COL_VERTEX(-204, 1126, 208);
	  COL_VERTEX(-1228, 512, 213);
	  COL_VERTEX(-1228, 512, -810);
	  COL_VERTEX(-1740, 717, 315);
	  COL_VERTEX(-1637, 512, 213);
	  COL_VERTEX(-1637, 512, -810);
	  COL_VERTEX(-1125, 717, -913);
	  COL_VERTEX(-1740, 717, -913);
	  COL_VERTEX(-1125, 717, 315);
	  COL_VERTEX(1331, 1946, 321);
	  COL_VERTEX(1434, 1741, 219);
	  COL_VERTEX(1946, 1946, -292);
	  COL_VERTEX(1843, 1741, -292);
	  COL_VERTEX(1638, 1741, -804);
	  COL_VERTEX(-460, 2662, -913);
	  COL_VERTEX(-357, 2458, 213);
	  COL_VERTEX(1331, 1946, -911);
	  COL_VERTEX(51, 2458, -810);
	  COL_VERTEX(154, 2662, -913);
	  COL_VERTEX(-153, 2662, -298);
	  COL_VERTEX(-153, 2458, -298);
	  COL_VERTEX(-357, 2458, -810);
	  COL_VERTEX(51, 2458, -298);
	  COL_VERTEX(-153, 2662, 315);
	  COL_VERTEX(-460, 2662, 315);
	  COL_VERTEX(0, 0, -298);
	  COL_VERTEX(614, 1331, 315);
	  COL_VERTEX(-19, -19, 314);
	  COL_VERTEX(-1146, 696, 315);
	  COL_VERTEX(-327, 1311, -298);
	  COL_VERTEX(-1146, 696, -298);
	  COL_VERTEX(594, 1311, -298);
	  COL_VERTEX(1311, 1925, -298);
	  COL_VERTEX(133, 2642, -298);
	  COL_VERTEX(1946, 1946, 321);
	  COL_VERTEX(1638, 1946, -292);
	  COL_VERTEX(1638, 1946, -906);
	  COL_VERTEX(1331, 1946, -906);
	  COL_VERTEX(1434, 1741, -804);
	  COL_VERTEX(1843, 1741, 219);
	  COL_VERTEX(1638, 1741, -292);
	  COL_VERTEX(154, 2662, -298);
	  COL_VERTEX(-153, 2458, 213);
	  COL_VERTEX(1331, 1946, -298);
	  COL_VERTEX(-1125, 717, -298);
	  COL_VERTEX(0, 0, 314);
	  COL_VERTEX(-306, 1331, -298);
	  COL_VERTEX(614, 1331, -298);
	  COL_VERTEX(-19, -19, -298);
	  COL_VERTEX(-327, 1311, -918);
	  COL_VERTEX(-1146, 696, -913);
	  COL_VERTEX(594, 1311, 315);
	  COL_VERTEX(1311, 1925, 321);
	  COL_VERTEX(1311, 1925, -911);
	  COL_VERTEX(133, 2642, -913);
	  COL_TRI_INIT(SURFACE_DEFAULT, 100);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(0, 4, 5);
	  COL_TRI(0, 5, 1);
	  COL_TRI(1, 5, 6);
	  COL_TRI(7, 8, 5);
	  COL_TRI(7, 5, 4);
	  COL_TRI(1, 6, 9);
	  COL_TRI(10, 2, 1);
	  COL_TRI(10, 1, 9);
	  COL_TRI(10, 8, 2);
	  COL_TRI(3, 2, 8);
	  COL_TRI(3, 8, 7);
	  COL_TRI(10, 11, 8);
	  COL_TRI(12, 11, 13);
	  COL_TRI(13, 11, 10);
	  COL_TRI(13, 10, 14);
	  COL_TRI(14, 10, 9);
	  COL_TRI(12, 6, 11);
	  COL_TRI(9, 6, 12);
	  COL_TRI(14, 9, 15);
	  COL_TRI(9, 12, 15);
	  COL_TRI(6, 5, 8);
	  COL_TRI(6, 8, 11);
	  COL_TRI(16, 20, 17);
	  COL_TRI(16, 19, 20);
	  COL_TRI(17, 23, 16);
	  COL_TRI(17, 21, 23);
	  COL_TRI(18, 19, 16);
	  COL_TRI(19, 18, 22);
	  COL_TRI(20, 19, 22);
	  COL_TRI(21, 22, 18);
	  COL_TRI(21, 18, 23);
	  COL_TRI(13, 14, 3);
	  COL_TRI(13, 3, 7);
	  COL_TRI(7, 12, 13);
	  COL_TRI(0, 3, 14);
	  COL_TRI(7, 4, 12);
	  COL_TRI(15, 12, 4);
	  COL_TRI(15, 4, 0);
	  COL_TRI(15, 0, 14);
	  COL_TRI(22, 21, 20);
	  COL_TRI(21, 17, 20);
	  COL_TRI(23, 18, 16);
	  COL_TRI(26, 27, 50);
	  COL_TRI(24, 49, 26);
	  COL_TRI(24, 26, 50);
	  COL_TRI(24, 50, 51);
	  COL_TRI(24, 51, 52);
	  COL_TRI(25, 24, 53);
	  COL_TRI(24, 52, 53);
	  COL_TRI(25, 49, 24);
	  COL_TRI(25, 54, 49);
	  COL_TRI(26, 54, 27);
	  COL_TRI(26, 49, 54);
	  COL_TRI(27, 55, 50);
	  COL_TRI(28, 51, 50);
	  COL_TRI(28, 50, 55);
	  COL_TRI(28, 52, 51);
	  COL_TRI(28, 53, 52);
	  COL_TRI(25, 28, 55);
	  COL_TRI(25, 55, 27);
	  COL_TRI(25, 27, 54);
	  COL_TRI(25, 53, 28);
	  COL_TRI(29, 39, 38);
	  COL_TRI(37, 32, 56);
	  COL_TRI(29, 38, 34);
	  COL_TRI(29, 34, 56);
	  COL_TRI(29, 56, 33);
	  COL_TRI(31, 33, 56);
	  COL_TRI(29, 33, 36);
	  COL_TRI(32, 33, 56);
	  COL_TRI(33, 32, 36);
	  COL_TRI(34, 35, 37);
	  COL_TRI(34, 37, 56);
	  COL_TRI(35, 34, 38);
	  COL_TRI(36, 57, 30);
	  COL_TRI(36, 35, 57);
	  COL_TRI(36, 32, 37);
	  COL_TRI(36, 37, 35);
	  COL_TRI(35, 38, 57);
	  COL_TRI(38, 39, 57);
	  COL_TRI(39, 30, 57);
	  COL_TRI(30, 29, 36);
	  COL_TRI(41, 24, 58);
	  COL_TRI(29, 30, 39);
	  COL_TRI(40, 59, 23);
	  COL_TRI(40, 23, 60);
	  COL_TRI(3, 59, 61);
	  COL_TRI(3, 21, 59);
	  COL_TRI(41, 58, 62);
	  COL_TRI(31, 56, 58);
	  COL_TRI(42, 43, 63);
	  COL_TRI(43, 45, 63);
	  COL_TRI(44, 45, 64);
	  COL_TRI(45, 65, 64);
	  COL_TRI(46, 47, 66);
	  COL_TRI(48, 69, 68);
	  COL_TRI(47, 48, 68);
	  COL_TRI(47, 67, 66);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bitfs_seg7_collision_inverted_pyramid() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x5);
	  COL_VERTEX(307, 307, -306);
	  COL_VERTEX(-306, 307, -306);
	  COL_VERTEX(-306, 307, 307);
	  COL_VERTEX(307, 307, 307);
	  COL_VERTEX(0, 0, 0);
	  COL_TRI_INIT(SURFACE_DEFAULT, 6);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(2, 1, 4);
	  COL_TRI(4, 3, 2);
	  COL_TRI(0, 4, 1);
	  COL_TRI(4, 0, 3);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bitfs_seg7_collision_07015288() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(64, 0, -306);
	  COL_VERTEX(64, 154, -306);
	  COL_VERTEX(64, 154, 307);
	  COL_VERTEX(64, 0, 307);
	  COL_VERTEX(-63, 154, 307);
	  COL_VERTEX(-63, 0, 307);
	  COL_VERTEX(-63, 154, -306);
	  COL_VERTEX(-63, 0, -306);
	  COL_TRI_INIT(SURFACE_DEFAULT, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(2, 4, 5);
	  COL_TRI(2, 5, 3);
	  COL_TRI(6, 4, 2);
	  COL_TRI(6, 2, 1);
	  COL_TRI(5, 4, 6);
	  COL_TRI(5, 6, 7);
	  COL_TRI(0, 3, 5);
	  COL_TRI(0, 5, 7);
	  COL_TRI(7, 6, 1);
	  COL_TRI(7, 1, 0);
	  COL_TRI_STOP();
	  COL_END();
	}

	var bitfs = [
	  bitfs_seg7_collision_level,
	  bitfs_seg7_collision_07015124,
	  bitfs_seg7_collision_07015714,
	  bitfs_seg7_collision_070157E0,
	  bitfs_seg7_collision_07015928,
	  bitfs_seg7_collision_sinking_cage_platform,
	  bitfs_seg7_collision_sinking_platform,
	  bitfs_seg7_collision_07015768,
	  bitfs_seg7_collision_squishable_platform,
	  bitfs_seg7_collision_inverted_pyramid,
	  bitfs_seg7_collision_07015288
	];

	function bits_seg7_collision_level() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x3D5);
	  COL_VERTEX(554, 6038, -4387);
	  COL_VERTEX(1041, 6038, -3645);
	  COL_VERTEX(1271, 6038, -3579);
	  COL_VERTEX(1041, 6038, -3491);
	  COL_VERTEX(964, 6038, -3158);
	  COL_VERTEX(1271, 6038, -2441);
	  COL_VERTEX(733, 6038, -2928);
	  COL_VERTEX(887, 6038, -3491);
	  COL_VERTEX(733, 6038, -2774);
	  COL_VERTEX(657, 6038, -2441);
	  COL_VERTEX(-571, 6038, -2441);
	  COL_VERTEX(861, 6038, -2032);
	  COL_VERTEX(887, 6038, -3645);
	  COL_VERTEX(-187, 6038, -3645);
	  COL_VERTEX(-341, 6038, -3645);
	  COL_VERTEX(-264, 6038, -3158);
	  COL_VERTEX(-571, 6038, -3568);
	  COL_VERTEX(-187, 6038, -3491);
	  COL_VERTEX(-34, 6038, -2928);
	  COL_VERTEX(-34, 6038, -2774);
	  COL_VERTEX(-162, 6038, -2032);
	  COL_VERTEX(42, 6038, -2441);
	  COL_VERTEX(119, 6038, -2928);
	  COL_VERTEX(856, 6499, -3675);
	  COL_VERTEX(1071, 6499, -3675);
	  COL_VERTEX(549, 6397, -2743);
	  COL_VERTEX(-64, 6396, -2743);
	  COL_VERTEX(-371, 6499, -3460);
	  COL_VERTEX(145, 6038, -4387);
	  COL_VERTEX(-341, 6038, -3491);
	  COL_VERTEX(580, 6038, -2774);
	  COL_VERTEX(119, 6038, -2774);
	  COL_VERTEX(580, 6038, -2928);
	  COL_VERTEX(856, 6499, -3460);
	  COL_VERTEX(1071, 6499, -3460);
	  COL_VERTEX(764, 6397, -2958);
	  COL_VERTEX(549, 6397, -2958);
	  COL_VERTEX(764, 6397, -2743);
	  COL_VERTEX(150, 6396, -2743);
	  COL_VERTEX(150, 6396, -2958);
	  COL_VERTEX(-64, 6396, -2958);
	  COL_VERTEX(-156, 6499, -3675);
	  COL_VERTEX(-371, 6499, -3675);
	  COL_VERTEX(-156, 6499, -3460);
	  COL_VERTEX(-3317, -2457, -718);
	  COL_VERTEX(-3317, -1637, -718);
	  COL_VERTEX(-3375, -1637, -776);
	  COL_VERTEX(-3375, -2457, -776);
	  COL_VERTEX(-3217, -2457, -718);
	  COL_VERTEX(-3217, -1637, -718);
	  COL_VERTEX(-3375, -1637, -876);
	  COL_VERTEX(-3375, -2457, -876);
	  COL_VERTEX(-3317, -1637, -934);
	  COL_VERTEX(-3317, -2457, -934);
	  COL_VERTEX(-3217, -1637, -934);
	  COL_VERTEX(-3217, -2457, -934);
	  COL_VERTEX(-3159, -1637, -876);
	  COL_VERTEX(-3159, -2457, -876);
	  COL_VERTEX(-3159, -2457, -776);
	  COL_VERTEX(-1748, -1330, -1299);
	  COL_VERTEX(-1799, -1330, -1248);
	  COL_VERTEX(-1748, -1330, -1197);
	  COL_VERTEX(-1697, -1330, -1248);
	  COL_VERTEX(52, -1402, -385);
	  COL_VERTEX(129, -1658, -385);
	  COL_VERTEX(52, -1658, -283);
	  COL_VERTEX(-75, -1658, -385);
	  COL_VERTEX(1, -1658, -283);
	  COL_VERTEX(1, -1658, -1143);
	  COL_VERTEX(-75, -1658, -1040);
	  COL_VERTEX(1, -1402, -1040);
	  COL_VERTEX(129, -1658, -1040);
	  COL_VERTEX(52, -1658, -1143);
	  COL_VERTEX(760, -2600, -429);
	  COL_VERTEX(760, -2539, -429);
	  COL_VERTEX(729, -2569, -398);
	  COL_VERTEX(698, -2615, -429);
	  COL_VERTEX(760, -2252, -429);
	  COL_VERTEX(760, -2615, -429);
	  COL_VERTEX(698, -2252, -429);
	  COL_VERTEX(729, -2569, -459);
	  COL_VERTEX(524, -2539, -429);
	  COL_VERTEX(667, -2569, -398);
	  COL_VERTEX(1378, -2144, -528);
	  COL_VERTEX(1378, -1893, -528);
	  COL_VERTEX(1347, -2175, -559);
	  COL_VERTEX(1394, -2252, -544);
	  COL_VERTEX(1363, -2252, -544);
	  COL_VERTEX(1378, -2206, -590);
	  COL_VERTEX(1409, -2252, -559);
	  COL_VERTEX(1378, -1893, -590);
	  COL_VERTEX(1347, -2252, -559);
	  COL_VERTEX(1190, -2206, -528);
	  COL_VERTEX(1378, -2206, -528);
	  COL_VERTEX(1317, -2206, -590);
	  COL_VERTEX(1190, -2206, -590);
	  COL_VERTEX(1378, -1791, -528);
	  COL_VERTEX(1409, -1555, -559);
	  COL_VERTEX(1347, -1555, -559);
	  COL_VERTEX(1378, -1791, -590);
	  COL_VERTEX(2275, 5679, -1417);
	  COL_VERTEX(2223, 5679, -1469);
	  COL_VERTEX(2326, 5679, -1469);
	  COL_VERTEX(2275, 5679, -1520);
	  COL_VERTEX(1199, 5679, -1469);
	  COL_VERTEX(2275, 5628, -1520);
	  COL_VERTEX(2223, 5577, -1469);
	  COL_VERTEX(2172, 5628, -1417);
	  COL_VERTEX(2275, 5628, -1417);
	  COL_VERTEX(3114, 4701, -1525);
	  COL_VERTEX(3114, 4752, -1474);
	  COL_VERTEX(2280, 4701, -1422);
	  COL_VERTEX(667, -2569, -705);
	  COL_VERTEX(729, -2569, -705);
	  COL_VERTEX(760, -2600, -736);
	  COL_VERTEX(524, -2539, -736);
	  COL_VERTEX(760, -2539, -736);
	  COL_VERTEX(729, -2569, -767);
	  COL_VERTEX(698, -2252, -736);
	  COL_VERTEX(760, -2615, -736);
	  COL_VERTEX(760, -2252, -736);
	  COL_VERTEX(698, -2615, -736);
	  COL_VERTEX(1041, 6447, -3491);
	  COL_VERTEX(1041, 6447, -3645);
	  COL_VERTEX(887, 6447, -3491);
	  COL_VERTEX(887, 6447, -3645);
	  COL_VERTEX(-4878, 2090, -1012);
	  COL_VERTEX(-4923, 2039, -904);
	  COL_VERTEX(-4878, 2039, -1012);
	  COL_VERTEX(-4878, 2039, -795);
	  COL_VERTEX(-4770, 2039, -750);
	  COL_VERTEX(-4661, 2039, -795);
	  COL_VERTEX(-4616, 2039, -904);
	  COL_VERTEX(-4661, 2039, -1012);
	  COL_VERTEX(-4770, 2039, -1057);
	  COL_VERTEX(-4770, 2346, -904);
	  COL_VERTEX(-4770, 2090, -801);
	  COL_VERTEX(-3159, -1637, -776);
	  COL_VERTEX(-1799, -2457, -1248);
	  COL_VERTEX(-1748, -2457, -1197);
	  COL_VERTEX(-1748, -2457, -1299);
	  COL_VERTEX(-1697, -2457, -1248);
	  COL_VERTEX(129, -2451, -385);
	  COL_VERTEX(-75, -2451, -385);
	  COL_VERTEX(52, -2451, -283);
	  COL_VERTEX(1, -2451, -283);
	  COL_VERTEX(1, -1402, -385);
	  COL_VERTEX(-75, -2451, -1040);
	  COL_VERTEX(129, -2451, -1040);
	  COL_VERTEX(1, -2451, -1143);
	  COL_VERTEX(52, -2451, -1143);
	  COL_VERTEX(52, -1402, -1040);
	  COL_VERTEX(760, -2569, -398);
	  COL_VERTEX(760, -2569, -459);
	  COL_VERTEX(729, -2615, -398);
	  COL_VERTEX(729, -2252, -398);
	  COL_VERTEX(729, -2615, -459);
	  COL_VERTEX(729, -2252, -459);
	  COL_VERTEX(524, -2569, -459);
	  COL_VERTEX(698, -2539, -429);
	  COL_VERTEX(524, -2569, -398);
	  COL_VERTEX(1347, -1893, -559);
	  COL_VERTEX(1409, -2175, -559);
	  COL_VERTEX(1378, -2252, -528);
	  COL_VERTEX(1409, -1893, -559);
	  COL_VERTEX(1378, -2252, -590);
	  COL_VERTEX(1347, -2236, -559);
	  COL_VERTEX(1409, -2236, -559);
	  COL_VERTEX(1190, -2236, -559);
	  COL_VERTEX(1190, -2175, -559);
	  COL_VERTEX(1378, -1555, -528);
	  COL_VERTEX(1347, -1791, -559);
	  COL_VERTEX(1409, -1791, -559);
	  COL_VERTEX(1378, -1555, -590);
	  COL_VERTEX(2275, 4415, -1417);
	  COL_VERTEX(2326, 4415, -1469);
	  COL_VERTEX(2275, 4415, -1520);
	  COL_VERTEX(2223, 4415, -1469);
	  COL_VERTEX(1199, 5628, -1417);
	  COL_VERTEX(1199, 5628, -1520);
	  COL_VERTEX(1199, 5577, -1469);
	  COL_VERTEX(2269, 4701, -1525);
	  COL_VERTEX(2321, 4752, -1474);
	  COL_VERTEX(2372, 4701, -1422);
	  COL_VERTEX(3114, 4701, -1422);
	  COL_VERTEX(2326, 4747, -1469);
	  COL_VERTEX(698, -2539, -736);
	  COL_VERTEX(760, -2569, -705);
	  COL_VERTEX(760, -2569, -767);
	  COL_VERTEX(524, -2569, -705);
	  COL_VERTEX(524, -2569, -767);
	  COL_VERTEX(729, -2252, -767);
	  COL_VERTEX(729, -2615, -767);
	  COL_VERTEX(729, -2615, -705);
	  COL_VERTEX(729, -2252, -705);
	  COL_VERTEX(733, 6345, -2774);
	  COL_VERTEX(580, 6345, -2774);
	  COL_VERTEX(733, 6345, -2928);
	  COL_VERTEX(580, 6345, -2928);
	  COL_VERTEX(-341, 6447, -3645);
	  COL_VERTEX(-341, 6447, -3491);
	  COL_VERTEX(-187, 6447, -3645);
	  COL_VERTEX(-187, 6447, -3491);
	  COL_VERTEX(-34, 6345, -2928);
	  COL_VERTEX(-34, 6345, -2774);
	  COL_VERTEX(119, 6345, -2928);
	  COL_VERTEX(119, 6345, -2774);
	  COL_VERTEX(-4923, 2090, -904);
	  COL_VERTEX(-4878, 2090, -795);
	  COL_VERTEX(-4770, 2090, -750);
	  COL_VERTEX(-4770, 2090, -1057);
	  COL_VERTEX(-4661, 2090, -795);
	  COL_VERTEX(-4616, 2090, -904);
	  COL_VERTEX(-4661, 2090, -1012);
	  COL_VERTEX(-4872, 2090, -904);
	  COL_VERTEX(-4667, 2090, -904);
	  COL_VERTEX(-4770, 2090, -1006);
	  COL_VERTEX(-520, 3646, -494);
	  COL_VERTEX(-520, 3646, -1313);
	  COL_VERTEX(708, 3646, -904);
	  COL_VERTEX(-89, 3646, -1313);
	  COL_VERTEX(-110, 3902, -1313);
	  COL_VERTEX(-110, 3954, -2030);
	  COL_VERTEX(298, 3646, -494);
	  COL_VERTEX(708, 3954, -1723);
	  COL_VERTEX(708, 3902, -904);
	  COL_VERTEX(-520, 3800, -1313);
	  COL_VERTEX(-520, 3902, -1262);
	  COL_VERTEX(-520, 3902, -1313);
	  COL_VERTEX(-520, 3800, -1262);
	  COL_VERTEX(-59, 3800, -1262);
	  COL_VERTEX(-520, 3902, -494);
	  COL_VERTEX(298, 3902, -494);
	  COL_VERTEX(268, 3902, -545);
	  COL_VERTEX(-520, 3902, -545);
	  COL_VERTEX(2193, 4414, -706);
	  COL_VERTEX(1476, 4414, -297);
	  COL_VERTEX(2193, 4619, -706);
	  COL_VERTEX(2193, 4414, -2440);
	  COL_VERTEX(2193, 4414, -1320);
	  COL_VERTEX(2193, 4517, -706);
	  COL_VERTEX(2193, 4619, -2440);
	  COL_VERTEX(2141, 4619, -2389);
	  COL_VERTEX(1476, 4414, -1723);
	  COL_VERTEX(2193, 4619, -297);
	  COL_VERTEX(-110, 4210, -2030);
	  COL_VERTEX(1476, 4619, -2440);
	  COL_VERTEX(708, 4210, -2440);
	  COL_VERTEX(298, 4005, -2440);
	  COL_VERTEX(708, 4210, -1723);
	  COL_VERTEX(657, 3902, -904);
	  COL_VERTEX(268, 3800, -545);
	  COL_VERTEX(657, 3800, -904);
	  COL_VERTEX(298, 4210, -2439);
	  COL_VERTEX(-59, 4209, -2029);
	  COL_VERTEX(1476, 4619, -2389);
	  COL_VERTEX(708, 4210, -2389);
	  COL_VERTEX(349, 4107, -2389);
	  COL_VERTEX(2141, 4517, -1320);
	  COL_VERTEX(708, 4210, -1774);
	  COL_VERTEX(-59, 4210, -2030);
	  COL_VERTEX(-59, 3902, -1313);
	  COL_VERTEX(-59, 3800, -1313);
	  COL_VERTEX(657, 4107, -1723);
	  COL_VERTEX(1476, 4619, -1774);
	  COL_VERTEX(1527, 4619, -1774);
	  COL_VERTEX(708, 4107, -1774);
	  COL_VERTEX(2141, 4517, -348);
	  COL_VERTEX(2141, 4619, -706);
	  COL_VERTEX(1527, 4619, -348);
	  COL_VERTEX(1527, 4517, -1774);
	  COL_VERTEX(2193, 4619, -1320);
	  COL_VERTEX(-110, 4107, -2030);
	  COL_VERTEX(-59, 4107, -2030);
	  COL_VERTEX(708, 4107, -1723);
	  COL_VERTEX(5365, 3081, -4249);
	  COL_VERTEX(5672, 3081, -4249);
	  COL_VERTEX(5569, 3286, -4146);
	  COL_VERTEX(5416, 3081, -3890);
	  COL_VERTEX(5467, 3286, -4044);
	  COL_VERTEX(5621, 3081, -3890);
	  COL_VERTEX(5569, 2927, -4044);
	  COL_VERTEX(6068, 3615, -4249);
	  COL_VERTEX(5761, 3615, -4249);
	  COL_VERTEX(5966, 3820, -4146);
	  COL_VERTEX(6017, 3615, -3890);
	  COL_VERTEX(5863, 3820, -4044);
	  COL_VERTEX(5812, 3615, -3890);
	  COL_VERTEX(5966, 3462, -4044);
	  COL_VERTEX(-2957, -1330, -479);
	  COL_VERTEX(-3571, -1535, -634);
	  COL_VERTEX(-3878, -1535, -634);
	  COL_VERTEX(-3571, -1330, -941);
	  COL_VERTEX(-2547, -1330, -1094);
	  COL_VERTEX(-3571, -1637, -941);
	  COL_VERTEX(-4493, -1637, -941);
	  COL_VERTEX(-3878, -1535, -941);
	  COL_VERTEX(-4493, -1637, -634);
	  COL_VERTEX(-3571, -1433, -634);
	  COL_VERTEX(-2547, -1330, -480);
	  COL_VERTEX(1271, 5833, -4489);
	  COL_VERTEX(861, 5833, -2032);
	  COL_VERTEX(-571, 5833, -2441);
	  COL_VERTEX(-571, 6243, -4489);
	  COL_VERTEX(-571, 5884, -4489);
	  COL_VERTEX(145, 6243, -4387);
	  COL_VERTEX(-571, 6038, -4387);
	  COL_VERTEX(-571, 6243, -4387);
	  COL_VERTEX(145, 6038, -4489);
	  COL_VERTEX(145, 6243, -4489);
	  COL_VERTEX(1296, 6243, -6402);
	  COL_VERTEX(1296, 6243, -5657);
	  COL_VERTEX(1296, 6447, -5657);
	  COL_VERTEX(759, 6243, -5104);
	  COL_VERTEX(-546, 6243, -5657);
	  COL_VERTEX(-546, 6243, -6402);
	  COL_VERTEX(554, 6447, -5104);
	  COL_VERTEX(554, 6345, -4899);
	  COL_VERTEX(554, 6243, -4694);
	  COL_VERTEX(554, 6140, -4489);
	  COL_VERTEX(657, 6243, -4489);
	  COL_VERTEX(657, 6038, -4489);
	  COL_VERTEX(554, 6243, -4489);
	  COL_VERTEX(657, 6447, -5104);
	  COL_VERTEX(42, 6243, -4489);
	  COL_VERTEX(145, 6447, -5104);
	  COL_VERTEX(42, 6038, -4489);
	  COL_VERTEX(554, 6038, -4489);
	  COL_VERTEX(567, 6447, -5509);
	  COL_VERTEX(136, 6447, -5509);
	  COL_VERTEX(-168, 6447, -5814);
	  COL_VERTEX(-168, 6447, -6245);
	  COL_VERTEX(136, 6447, -6550);
	  COL_VERTEX(567, 6447, -6550);
	  COL_VERTEX(872, 6447, -6245);
	  COL_VERTEX(874, 6447, -5812);
	  COL_VERTEX(214, 6550, -5698);
	  COL_VERTEX(489, 6550, -5698);
	  COL_VERTEX(21, 6550, -5892);
	  COL_VERTEX(21, 6550, -6167);
	  COL_VERTEX(214, 6550, -6361);
	  COL_VERTEX(489, 6550, -6361);
	  COL_VERTEX(683, 6550, -6167);
	  COL_VERTEX(683, 6550, -5892);
	  COL_VERTEX(759, 6447, -5104);
	  COL_VERTEX(782, 6447, -5104);
	  COL_VERTEX(-59, 6243, -5104);
	  COL_VERTEX(753, 6243, -6969);
	  COL_VERTEX(-14, 6447, -6969);
	  COL_VERTEX(-546, 6447, -6402);
	  COL_VERTEX(1271, 6038, -4489);
	  COL_VERTEX(1271, 6243, -4489);
	  COL_VERTEX(1271, 6243, -4387);
	  COL_VERTEX(1271, 5884, -4489);
	  COL_VERTEX(-3071, -5119, 307);
	  COL_VERTEX(-3071, -4525, 307);
	  COL_VERTEX(-3071, -5119, -306);
	  COL_VERTEX(-3685, -4525, 307);
	  COL_VERTEX(-3890, -5119, 307);
	  COL_VERTEX(-3890, -4709, 307);
	  COL_VERTEX(-3890, -5119, -306);
	  COL_VERTEX(-4505, -4709, 307);
	  COL_VERTEX(-4709, -5119, 307);
	  COL_VERTEX(-4709, -4914, 307);
	  COL_VERTEX(-4709, -5119, -306);
	  COL_VERTEX(-5324, -4914, 205);
	  COL_VERTEX(-7474, -5119, 410);
	  COL_VERTEX(-6245, -4812, 205);
	  COL_VERTEX(-7474, -4812, -409);
	  COL_VERTEX(-6245, -4914, 614);
	  COL_VERTEX(-6245, -5119, 614);
	  COL_VERTEX(-5529, -5119, 102);
	  COL_VERTEX(-5529, -5119, -101);
	  COL_VERTEX(-6245, -5119, -613);
	  COL_VERTEX(-1689, -4111, 52);
	  COL_VERTEX(-1842, -4111, -29);
	  COL_VERTEX(-1842, -4177, 93);
	  COL_VERTEX(-1842, -5119, 410);
	  COL_VERTEX(-1842, -4095, 410);
	  COL_VERTEX(-2866, -4095, 307);
	  COL_VERTEX(-1842, -5119, -409);
	  COL_VERTEX(114, -2661, -173);
	  COL_VERTEX(-4697, -2661, -173);
	  COL_VERTEX(524, -2661, -378);
	  COL_VERTEX(114, -2457, -1504);
	  COL_VERTEX(-4697, -2457, -1504);
	  COL_VERTEX(-4697, -2457, -173);
	  COL_VERTEX(-5107, -2457, -378);
	  COL_VERTEX(-4697, -2661, -1504);
	  COL_VERTEX(1229, -4095, 318);
	  COL_VERTEX(1229, -4095, -295);
	  COL_VERTEX(2048, -4300, -398);
	  COL_VERTEX(2048, -4095, 420);
	  COL_VERTEX(3277, -4300, -398);
	  COL_VERTEX(2458, -3890, 420);
	  COL_VERTEX(3277, -2047, -398);
	  COL_VERTEX(2458, -3890, -398);
	  COL_VERTEX(3277, -2047, 420);
	  COL_VERTEX(3277, -2252, 420);
	  COL_VERTEX(4813, -2252, 420);
	  COL_VERTEX(1229, -4111, 52);
	  COL_VERTEX(1229, -4111, -29);
	  COL_VERTEX(1229, -4177, -70);
	  COL_VERTEX(1075, -4177, -70);
	  COL_VERTEX(1075, -4111, 52);
	  COL_VERTEX(5734, -1351, -1524);
	  COL_VERTEX(5734, -1689, -398);
	  COL_VERTEX(5786, -1689, -347);
	  COL_VERTEX(4813, -1945, -398);
	  COL_VERTEX(5786, -1791, -347);
	  COL_VERTEX(6605, -1566, -2139);
	  COL_VERTEX(6554, -1351, -1575);
	  COL_VERTEX(6605, -1351, -2139);
	  COL_VERTEX(6554, -1351, -2087);
	  COL_VERTEX(5176, -1349, -2087);
	  COL_VERTEX(6554, -1453, -2087);
	  COL_VERTEX(5069, -1555, -2139);
	  COL_VERTEX(5069, -1453, -1524);
	  COL_VERTEX(5069, -1453, -1575);
	  COL_VERTEX(5786, -1453, -1575);
	  COL_VERTEX(5176, -1349, -1524);
	  COL_VERTEX(4813, -1945, 369);
	  COL_VERTEX(5786, -1689, 369);
	  COL_VERTEX(4813, -2047, 369);
	  COL_VERTEX(5786, -1904, 420);
	  COL_VERTEX(6554, -1689, 11);
	  COL_VERTEX(6605, -1689, 62);
	  COL_VERTEX(5786, -1791, 369);
	  COL_VERTEX(6605, -1904, 62);
	  COL_VERTEX(5734, -1904, -398);
	  COL_VERTEX(6605, -1904, -398);
	  COL_VERTEX(6554, -1453, -1575);
	  COL_VERTEX(5786, -1351, -1524);
	  COL_VERTEX(2714, -1586, -2190);
	  COL_VERTEX(3226, -1586, -2190);
	  COL_VERTEX(2714, -1371, -1524);
	  COL_VERTEX(3226, -1474, -1575);
	  COL_VERTEX(2714, -1474, -2139);
	  COL_VERTEX(2048, -1187, -2139);
	  COL_VERTEX(3226, -1474, -2190);
	  COL_VERTEX(2714, -1371, -2139);
	  COL_VERTEX(2048, -1084, -2139);
	  COL_VERTEX(2714, -1371, -1575);
	  COL_VERTEX(2048, -1084, -1575);
	  COL_VERTEX(1536, -1187, -2139);
	  COL_VERTEX(1485, -1084, -1575);
	  COL_VERTEX(1485, -1299, -1524);
	  COL_VERTEX(1485, -1084, -2190);
	  COL_VERTEX(2099, -1084, -1524);
	  COL_VERTEX(2095, -1351, -1020);
	  COL_VERTEX(2044, -1453, -1020);
	  COL_VERTEX(2044, -1351, -1020);
	  COL_VERTEX(1481, -1453, -1020);
	  COL_VERTEX(1481, -1555, -1020);
	  COL_VERTEX(1536, -1187, -1575);
	  COL_VERTEX(1173, -1453, -1020);
	  COL_VERTEX(2095, -1351, -405);
	  COL_VERTEX(2095, -1555, -405);
	  COL_VERTEX(2044, -1453, -457);
	  COL_VERTEX(1481, -1351, -457);
	  COL_VERTEX(1173, -1555, -405);
	  COL_VERTEX(1173, -1555, -1020);
	  COL_VERTEX(1481, -1453, -405);
	  COL_VERTEX(1190, -2149, -787);
	  COL_VERTEX(1190, -2149, -378);
	  COL_VERTEX(422, -2252, -787);
	  COL_VERTEX(1190, -2252, -787);
	  COL_VERTEX(1548, -1791, -787);
	  COL_VERTEX(1548, -1791, -70);
	  COL_VERTEX(1548, -1893, -787);
	  COL_VERTEX(1190, -1893, -787);
	  COL_VERTEX(-6131, -1330, -1094);
	  COL_VERTEX(-4697, -1535, -1094);
	  COL_VERTEX(-6131, -1228, -480);
	  COL_VERTEX(-4697, -1228, -480);
	  COL_VERTEX(-6131, -1330, -480);
	  COL_VERTEX(-3899, 2059, -1211);
	  COL_VERTEX(-2466, 2059, -1211);
	  COL_VERTEX(-3899, 2162, -597);
	  COL_VERTEX(-2466, 2162, -597);
	  COL_VERTEX(-3899, 2059, -597);
	  COL_VERTEX(1476, 5628, -701);
	  COL_VERTEX(42, 5833, -701);
	  COL_VERTEX(1476, 5833, -701);
	  COL_VERTEX(1476, 5833, -1315);
	  COL_VERTEX(42, 5833, -1315);
	  COL_VERTEX(-2466, 2059, -597);
	  COL_VERTEX(-3417, -409, -480);
	  COL_VERTEX(-2705, -613, -1497);
	  COL_VERTEX(-2705, -409, -1855);
	  COL_VERTEX(-4697, -1330, -480);
	  COL_VERTEX(-6131, -921, -1094);
	  COL_VERTEX(-6745, -921, -992);
	  COL_VERTEX(-6950, -1330, -582);
	  COL_VERTEX(-3417, -613, -480);
	  COL_VERTEX(-5005, -613, -480);
	  COL_VERTEX(-4271, -613, -1855);
	  COL_VERTEX(-5005, -409, -1094);
	  COL_VERTEX(-5773, -716, -480);
	  COL_VERTEX(-5670, -921, -480);
	  COL_VERTEX(-5568, -716, -1094);
	  COL_VERTEX(-3417, -306, -480);
	  COL_VERTEX(-5005, -306, -480);
	  COL_VERTEX(-4271, -409, -1855);
	  COL_VERTEX(-1302, -336, -1103);
	  COL_VERTEX(-1660, -438, -1615);
	  COL_VERTEX(-2223, -592, -1513);
	  COL_VERTEX(-2223, -490, -1923);
	  COL_VERTEX(-2705, -409, -1497);
	  COL_VERTEX(-2223, -490, -1513);
	  COL_VERTEX(-1660, -541, -1615);
	  COL_VERTEX(-1763, -438, -1103);
	  COL_VERTEX(-892, -234, -1308);
	  COL_VERTEX(-995, -643, -1308);
	  COL_VERTEX(-2223, -592, -1923);
	  COL_VERTEX(-1302, -438, -1103);
	  COL_VERTEX(-1353, -438, -643);
	  COL_VERTEX(-1353, -541, -643);
	  COL_VERTEX(-687, -541, -643);
	  COL_VERTEX(-73, -438, -1206);
	  COL_VERTEX(-6050, 3800, -494);
	  COL_VERTEX(-4411, 3493, -494);
	  COL_VERTEX(-4411, 3800, -1313);
	  COL_VERTEX(-6050, 3493, -494);
	  COL_VERTEX(-4411, 3493, -1313);
	  COL_VERTEX(-520, 3493, -494);
	  COL_VERTEX(-2158, 3800, -494);
	  COL_VERTEX(-2158, 3493, -494);
	  COL_VERTEX(-520, 3493, -1313);
	  COL_VERTEX(-3319, 3032, -1211);
	  COL_VERTEX(-3541, 2469, -1211);
	  COL_VERTEX(-3131, 2469, -597);
	  COL_VERTEX(-3541, 2469, -597);
	  COL_VERTEX(-3353, 3032, -597);
	  COL_VERTEX(-2275, 2428, -597);
	  COL_VERTEX(-2070, 2735, -597);
	  COL_VERTEX(-2275, 2735, -1211);
	  COL_VERTEX(-2070, 2428, -1211);
	  COL_VERTEX(-1455, 2735, -1211);
	  COL_VERTEX(-1251, 2428, -1211);
	  COL_VERTEX(-1251, 2735, -597);
	  COL_VERTEX(-1455, 2428, -597);
	  COL_VERTEX(-227, 2940, -597);
	  COL_VERTEX(-22, 2940, -597);
	  COL_VERTEX(-124, 3042, -597);
	  COL_VERTEX(-124, 3042, -1211);
	  COL_VERTEX(-124, 2837, -597);
	  COL_VERTEX(-534, 2428, -597);
	  COL_VERTEX(-329, 2633, -597);
	  COL_VERTEX(-534, 2633, -1211);
	  COL_VERTEX(-329, 2428, -1211);
	  COL_VERTEX(284, 2428, -1211);
	  COL_VERTEX(80, 2633, -1211);
	  COL_VERTEX(284, 2633, -597);
	  COL_VERTEX(-1865, 3042, -597);
	  COL_VERTEX(-1763, 3145, -597);
	  COL_VERTEX(-1763, 2940, -597);
	  COL_VERTEX(-1660, 3042, -597);
	  COL_VERTEX(-1763, 3145, -1211);
	  COL_VERTEX(80, 2428, -597);
	  COL_VERTEX(1718, 2428, -597);
	  COL_VERTEX(913, 2428, -597);
	  COL_VERTEX(1718, 2530, -597);
	  COL_VERTEX(1718, 2428, -1211);
	  COL_VERTEX(913, 2530, -597);
	  COL_VERTEX(745, -234, -591);
	  COL_VERTEX(2793, 1097, -591);
	  COL_VERTEX(438, -234, -591);
	  COL_VERTEX(960, -431, -1206);
	  COL_VERTEX(2588, 1301, -1206);
	  COL_VERTEX(2588, 1301, -591);
	  COL_VERTEX(4739, 1138, -1308);
	  COL_VERTEX(3817, 1301, -1206);
	  COL_VERTEX(-6306, 3928, -750);
	  COL_VERTEX(-6306, 3928, -1057);
	  COL_VERTEX(-6306, 3954, -1057);
	  COL_VERTEX(-6050, 3774, -1313);
	  COL_VERTEX(-6613, 3928, -1057);
	  COL_VERTEX(-6869, 3774, -494);
	  COL_VERTEX(-6613, 3928, -750);
	  COL_VERTEX(-6613, 3954, -750);
	  COL_VERTEX(42, 5628, -2339);
	  COL_VERTEX(42, 5628, -1315);
	  COL_VERTEX(657, 5628, -2339);
	  COL_VERTEX(5251, 1424, -1308);
	  COL_VERTEX(5517, 2571, -514);
	  COL_VERTEX(5251, 1424, -489);
	  COL_VERTEX(4739, 1301, -489);
	  COL_VERTEX(3356, 2428, -2645);
	  COL_VERTEX(3356, 2428, -597);
	  COL_VERTEX(3868, 2223, -699);
	  COL_VERTEX(3971, 2428, -597);
	  COL_VERTEX(7653, 4483, -1532);
	  COL_VERTEX(7683, 4543, -2350);
	  COL_VERTEX(7401, 4476, -2969);
	  COL_VERTEX(3868, 2223, -3464);
	  COL_VERTEX(3459, 2223, -3464);
	  COL_VERTEX(5336, 2808, -3464);
	  COL_VERTEX(5377, 2705, -3464);
	  COL_VERTEX(4582, 2325, -3464);
	  COL_VERTEX(6134, 3868, -3464);
	  COL_VERTEX(6908, 4260, -2391);
	  COL_VERTEX(6134, 3868, -2645);
	  COL_VERTEX(4582, 2488, -2645);
	  COL_VERTEX(6875, 4235, -1471);
	  COL_VERTEX(6532, 3905, -1300);
	  COL_VERTEX(6552, 3885, -1300);
	  COL_VERTEX(7456, 4499, -957);
	  COL_VERTEX(6193, 2899, -1308);
	  COL_VERTEX(6172, 2940, -1308);
	  COL_VERTEX(6572, 3904, -456);
	  COL_VERTEX(6979, 4282, -663);
	  COL_VERTEX(6979, 4322, -663);
	  COL_VERTEX(5763, 2837, -489);
	  COL_VERTEX(5756, 2772, -489);
	  COL_VERTEX(5517, 2571, -1308);
	  COL_VERTEX(6618, 3629, -2093);
	  COL_VERTEX(6516, 3834, -1991);
	  COL_VERTEX(6311, 3629, -2093);
	  COL_VERTEX(6414, 3834, -1888);
	  COL_VERTEX(6567, 3629, -1735);
	  COL_VERTEX(6362, 3629, -1735);
	  COL_VERTEX(6516, 3476, -1888);
	  COL_VERTEX(1071, 6447, -3460);
	  COL_VERTEX(856, 6447, -3460);
	  COL_VERTEX(856, 6447, -3675);
	  COL_VERTEX(1071, 6447, -3675);
	  COL_VERTEX(549, 6345, -2958);
	  COL_VERTEX(549, 6345, -2743);
	  COL_VERTEX(764, 6345, -2958);
	  COL_VERTEX(764, 6345, -2743);
	  COL_VERTEX(-64, 6345, -2958);
	  COL_VERTEX(-64, 6345, -2743);
	  COL_VERTEX(150, 6345, -2743);
	  COL_VERTEX(150, 6345, -2958);
	  COL_VERTEX(-371, 6447, -3675);
	  COL_VERTEX(-371, 6447, -3460);
	  COL_VERTEX(-156, 6447, -3460);
	  COL_VERTEX(-156, 6447, -3675);
	  COL_VERTEX(-3878, -1433, -634);
	  COL_VERTEX(-3878, -1535, -942);
	  COL_VERTEX(-571, 5884, -4797);
	  COL_VERTEX(-192, -2661, -1658);
	  COL_VERTEX(-141, -2610, -1504);
	  COL_VERTEX(-397, -2661, -1658);
	  COL_VERTEX(-397, -2610, -1658);
	  COL_VERTEX(-520, 3800, -545);
	  COL_VERTEX(-520, 3800, -494);
	  COL_VERTEX(-110, 3902, -1262);
	  COL_VERTEX(-59, 3902, -1262);
	  COL_VERTEX(2193, 4414, -297);
	  COL_VERTEX(2193, 4517, -1320);
	  COL_VERTEX(1476, 4619, -297);
	  COL_VERTEX(2141, 4619, -348);
	  COL_VERTEX(2141, 4517, -706);
	  COL_VERTEX(2141, 4619, -1320);
	  COL_VERTEX(1476, 4619, -1723);
	  COL_VERTEX(1476, 4414, -2440);
	  COL_VERTEX(708, 4005, -2440);
	  COL_VERTEX(298, 4210, -2440);
	  COL_VERTEX(1527, 4517, -2389);
	  COL_VERTEX(2141, 4517, -2389);
	  COL_VERTEX(657, 4210, -1723);
	  COL_VERTEX(349, 4210, -2389);
	  COL_VERTEX(708, 4107, -2389);
	  COL_VERTEX(657, 4210, -1774);
	  COL_VERTEX(657, 4107, -1774);
	  COL_VERTEX(1476, 4466, -1774);
	  COL_VERTEX(1527, 4466, -1774);
	  COL_VERTEX(1527, 4517, -348);
	  COL_VERTEX(5467, 3286, -4146);
	  COL_VERTEX(5569, 3286, -4044);
	  COL_VERTEX(5467, 2927, -4044);
	  COL_VERTEX(5569, 2927, -4146);
	  COL_VERTEX(5467, 2927, -4146);
	  COL_VERTEX(5966, 3820, -4044);
	  COL_VERTEX(5863, 3820, -4146);
	  COL_VERTEX(5863, 3462, -4044);
	  COL_VERTEX(5863, 3462, -4146);
	  COL_VERTEX(5966, 3462, -4146);
	  COL_VERTEX(-3571, -1330, -634);
	  COL_VERTEX(-3571, -1637, -634);
	  COL_VERTEX(-2957, -1637, -479);
	  COL_VERTEX(-2547, -1637, -480);
	  COL_VERTEX(-3571, -1535, -941);
	  COL_VERTEX(-2957, -1637, -1093);
	  COL_VERTEX(-2957, -1330, -1093);
	  COL_VERTEX(-4493, -1330, -634);
	  COL_VERTEX(-3878, -1330, -634);
	  COL_VERTEX(-4493, -1330, -941);
	  COL_VERTEX(-2547, -1637, -1094);
	  COL_VERTEX(-3878, -1330, -941);
	  COL_VERTEX(1271, 5833, -2441);
	  COL_VERTEX(-162, 5833, -2032);
	  COL_VERTEX(-571, 6038, -4489);
	  COL_VERTEX(-571, 5833, -4489);
	  COL_VERTEX(-571, 5833, -4797);
	  COL_VERTEX(145, 6345, -5104);
	  COL_VERTEX(42, 6243, -5104);
	  COL_VERTEX(657, 6243, -5104);
	  COL_VERTEX(1296, 6447, -6402);
	  COL_VERTEX(753, 6447, -6969);
	  COL_VERTEX(881, 5731, -6249);
	  COL_VERTEX(881, 5731, -5810);
	  COL_VERTEX(42, 6447, -5104);
	  COL_VERTEX(571, 5731, -5500);
	  COL_VERTEX(-14, 6243, -6969);
	  COL_VERTEX(-546, 6447, -5657);
	  COL_VERTEX(-59, 6447, -5104);
	  COL_VERTEX(132, 5731, -5500);
	  COL_VERTEX(-177, 5731, -5810);
	  COL_VERTEX(-177, 5731, -6249);
	  COL_VERTEX(554, 6345, -5104);
	  COL_VERTEX(145, 6243, -4899);
	  COL_VERTEX(554, 6243, -4899);
	  COL_VERTEX(145, 6345, -4899);
	  COL_VERTEX(145, 6140, -4694);
	  COL_VERTEX(554, 6140, -4694);
	  COL_VERTEX(145, 6243, -4694);
	  COL_VERTEX(145, 6140, -4489);
	  COL_VERTEX(136, 6550, -5509);
	  COL_VERTEX(-168, 6550, -5814);
	  COL_VERTEX(567, 6550, -5509);
	  COL_VERTEX(-168, 6550, -6245);
	  COL_VERTEX(136, 6550, -6550);
	  COL_VERTEX(567, 6550, -6550);
	  COL_VERTEX(872, 6550, -6245);
	  COL_VERTEX(874, 6550, -5812);
	  COL_VERTEX(214, 6652, -5698);
	  COL_VERTEX(21, 6652, -5892);
	  COL_VERTEX(489, 6652, -5698);
	  COL_VERTEX(21, 6652, -6167);
	  COL_VERTEX(214, 6652, -6361);
	  COL_VERTEX(489, 6652, -6361);
	  COL_VERTEX(683, 6652, -6167);
	  COL_VERTEX(683, 6652, -5892);
	  COL_VERTEX(782, 6243, -5104);
	  COL_VERTEX(1271, 6038, -4387);
	  COL_VERTEX(554, 6243, -4387);
	  COL_VERTEX(-3071, -4525, -306);
	  COL_VERTEX(-3685, -5119, 307);
	  COL_VERTEX(-3685, -4525, -306);
	  COL_VERTEX(-3685, -5119, -306);
	  COL_VERTEX(1271, 5884, -4797);
	  COL_VERTEX(-3890, -4709, -306);
	  COL_VERTEX(-4505, -5119, 307);
	  COL_VERTEX(-4505, -4709, -306);
	  COL_VERTEX(-4505, -5119, -306);
	  COL_VERTEX(-4709, -4914, -306);
	  COL_VERTEX(-5324, -5119, 205);
	  COL_VERTEX(-5324, -4914, -204);
	  COL_VERTEX(-5324, -5119, -204);
	  COL_VERTEX(-7474, -4812, 410);
	  COL_VERTEX(-7474, -5119, -409);
	  COL_VERTEX(-6245, -5119, 205);
	  COL_VERTEX(-6245, -4812, -204);
	  COL_VERTEX(-6245, -5119, -204);
	  COL_VERTEX(-5529, -4935, 102);
	  COL_VERTEX(-5529, -4935, -101);
	  COL_VERTEX(-6245, -4914, -613);
	  COL_VERTEX(-1689, -4111, -29);
	  COL_VERTEX(-1842, -4111, 52);
	  COL_VERTEX(-1689, -4177, -70);
	  COL_VERTEX(-1842, -4177, -70);
	  COL_VERTEX(-1689, -4177, 93);
	  COL_VERTEX(-1842, -4095, -409);
	  COL_VERTEX(-2866, -5119, 307);
	  COL_VERTEX(-2866, -5119, -306);
	  COL_VERTEX(-2866, -4095, -306);
	  COL_VERTEX(524, -2457, -378);
	  COL_VERTEX(114, -2457, -173);
	  COL_VERTEX(524, -2661, -1299);
	  COL_VERTEX(524, -2457, -1299);
	  COL_VERTEX(114, -2661, -1504);
	  COL_VERTEX(-5107, -2661, -378);
	  COL_VERTEX(-5107, -2661, -1299);
	  COL_VERTEX(-5107, -2457, -1299);
	  COL_VERTEX(1229, -4300, -295);
	  COL_VERTEX(2048, -4095, -398);
	  COL_VERTEX(1229, -4300, 318);
	  COL_VERTEX(2048, -4300, 420);
	  COL_VERTEX(3277, -4300, 420);
	  COL_VERTEX(3277, -2252, -398);
	  COL_VERTEX(4813, -2252, -398);
	  COL_VERTEX(2867, -2252, -398);
	  COL_VERTEX(4813, -2047, -398);
	  COL_VERTEX(2867, -2252, 420);
	  COL_VERTEX(4813, -2047, 420);
	  COL_VERTEX(1075, -4111, -29);
	  COL_VERTEX(1229, -4177, 93);
	  COL_VERTEX(1075, -4177, 93);
	  COL_VERTEX(5734, -1566, -1524);
	  COL_VERTEX(4813, -1945, -347);
	  COL_VERTEX(4813, -2047, -347);
	  COL_VERTEX(5176, -1349, -2139);
	  COL_VERTEX(6605, -1351, -1575);
	  COL_VERTEX(6605, -1566, -1575);
	  COL_VERTEX(5069, -1453, -2139);
	  COL_VERTEX(6605, -1689, -398);
	  COL_VERTEX(6554, -1689, -398);
	  COL_VERTEX(5069, -1453, -2087);
	  COL_VERTEX(5069, -1555, -1524);
	  COL_VERTEX(5176, -1349, -1575);
	  COL_VERTEX(5786, -1351, -1575);
	  COL_VERTEX(4813, -1945, 420);
	  COL_VERTEX(5786, -1689, 420);
	  COL_VERTEX(6554, -1791, -398);
	  COL_VERTEX(6554, -1791, 11);
	  COL_VERTEX(3226, -1474, -1524);
	  COL_VERTEX(3226, -1586, -1524);
	  COL_VERTEX(3123, -1371, -1524);
	  COL_VERTEX(2714, -1586, -1524);
	  COL_VERTEX(3123, -1371, -2139);
	  COL_VERTEX(3123, -1371, -2190);
	  COL_VERTEX(2714, -1371, -2190);
	  COL_VERTEX(3123, -1371, -1575);
	  COL_VERTEX(2099, -1299, -1524);
	  COL_VERTEX(2099, -1299, -2190);
	  COL_VERTEX(2048, -1084, -2190);
	  COL_VERTEX(3226, -1474, -2139);
	  COL_VERTEX(2714, -1474, -1575);
	  COL_VERTEX(2048, -1187, -1575);
	  COL_VERTEX(1536, -1084, -2139);
	  COL_VERTEX(1536, -1084, -1575);
	  COL_VERTEX(1485, -1299, -2190);
	  COL_VERTEX(2095, -1555, -1020);
	  COL_VERTEX(2044, -1351, -457);
	  COL_VERTEX(1532, -1351, -1020);
	  COL_VERTEX(1481, -1351, -1020);
	  COL_VERTEX(1532, -1453, -1020);
	  COL_VERTEX(1481, -1351, -405);
	  COL_VERTEX(1173, -1453, -405);
	  COL_VERTEX(1481, -1453, -457);
	  COL_VERTEX(2095, -1453, -405);
	  COL_VERTEX(1190, -2252, -378);
	  COL_VERTEX(422, -2149, -378);
	  COL_VERTEX(422, -2252, -378);
	  COL_VERTEX(422, -2149, -787);
	  COL_VERTEX(1548, -1893, -70);
	  COL_VERTEX(1190, -1791, -70);
	  COL_VERTEX(1190, -1893, -70);
	  COL_VERTEX(1190, -1791, -787);
	  COL_VERTEX(-4697, -1228, -1094);
	  COL_VERTEX(-6131, -1228, -1094);
	  COL_VERTEX(-4697, -1330, -1094);
	  COL_VERTEX(-6131, -1535, -1094);
	  COL_VERTEX(-4697, -1535, -480);
	  COL_VERTEX(-6131, -1535, -480);
	  COL_VERTEX(-2466, 2162, -1211);
	  COL_VERTEX(-3899, 2162, -1211);
	  COL_VERTEX(-3899, 1854, -1211);
	  COL_VERTEX(-3899, 1854, -597);
	  COL_VERTEX(-2466, 1854, -597);
	  COL_VERTEX(-2466, 1854, -1211);
	  COL_VERTEX(42, 5628, -701);
	  COL_VERTEX(1476, 5628, -1315);
	  COL_VERTEX(-2705, -613, -1855);
	  COL_VERTEX(-6131, -921, -480);
	  COL_VERTEX(-6950, -1330, -992);
	  COL_VERTEX(-6745, -921, -582);
	  COL_VERTEX(-5005, -613, -1094);
	  COL_VERTEX(-5005, -409, -480);
	  COL_VERTEX(-4271, -306, -1855);
	  COL_VERTEX(-5568, -716, -480);
	  COL_VERTEX(-5773, -716, -1094);
	  COL_VERTEX(-5670, -921, -1094);
	  COL_VERTEX(-5005, -306, -1094);
	  COL_VERTEX(-2705, -306, -1855);
	  COL_VERTEX(-2705, -306, -1497);
	  COL_VERTEX(-1763, -541, -1103);
	  COL_VERTEX(-585, -234, -489);
	  COL_VERTEX(-73, -438, -643);
	  COL_VERTEX(28, -234, -591);
	  COL_VERTEX(28, -234, -1206);
	  COL_VERTEX(-6050, 3493, -1313);
	  COL_VERTEX(-4411, 3800, -494);
	  COL_VERTEX(-6050, 3800, -1313);
	  COL_VERTEX(-2158, 3493, -1313);
	  COL_VERTEX(-2158, 3800, -1313);
	  COL_VERTEX(-3353, 3032, -1211);
	  COL_VERTEX(-3319, 3032, -597);
	  COL_VERTEX(-3131, 2469, -1211);
	  COL_VERTEX(-2070, 2428, -597);
	  COL_VERTEX(-2275, 2428, -1211);
	  COL_VERTEX(-2275, 2735, -597);
	  COL_VERTEX(-2070, 2735, -1211);
	  COL_VERTEX(-1455, 2428, -1211);
	  COL_VERTEX(-1455, 2735, -597);
	  COL_VERTEX(-1251, 2735, -1211);
	  COL_VERTEX(-1251, 2428, -597);
	  COL_VERTEX(-227, 2940, -1211);
	  COL_VERTEX(-124, 2837, -1211);
	  COL_VERTEX(-22, 2940, -1211);
	  COL_VERTEX(-534, 2428, -1211);
	  COL_VERTEX(-329, 2428, -597);
	  COL_VERTEX(-329, 2633, -1211);
	  COL_VERTEX(-534, 2633, -597);
	  COL_VERTEX(80, 2428, -1211);
	  COL_VERTEX(284, 2633, -1211);
	  COL_VERTEX(80, 2633, -597);
	  COL_VERTEX(284, 2428, -597);
	  COL_VERTEX(-1865, 3042, -1211);
	  COL_VERTEX(-1763, 2940, -1211);
	  COL_VERTEX(-1660, 3042, -1211);
	  COL_VERTEX(1718, 2530, -1211);
	  COL_VERTEX(913, 2428, -1211);
	  COL_VERTEX(913, 2530, -1211);
	  COL_VERTEX(960, -431, -591);
	  COL_VERTEX(438, -438, -591);
	  COL_VERTEX(438, -438, -1206);
	  COL_VERTEX(438, -234, -1206);
	  COL_VERTEX(745, -234, -1206);
	  COL_VERTEX(2793, 1097, -1206);
	  COL_VERTEX(3817, 1097, -591);
	  COL_VERTEX(3817, 1301, -591);
	  COL_VERTEX(3817, 1097, -1206);
	  COL_VERTEX(4739, 1301, -1308);
	  COL_VERTEX(-6050, 3774, -494);
	  COL_VERTEX(-6869, 3774, -1313);
	  COL_VERTEX(-6613, 3954, -1057);
	  COL_VERTEX(-6306, 3954, -750);
	  COL_VERTEX(-6869, 3800, -1313);
	  COL_VERTEX(-6869, 3800, -494);
	  COL_VERTEX(657, 5833, -2339);
	  COL_VERTEX(42, 5833, -2339);
	  COL_VERTEX(657, 5833, -1315);
	  COL_VERTEX(657, 5628, -1315);
	  COL_VERTEX(5148, 1506, -1308);
	  COL_VERTEX(5456, 2633, -1308);
	  COL_VERTEX(5763, 2837, -1308);
	  COL_VERTEX(5148, 1506, -489);
	  COL_VERTEX(4739, 1138, -489);
	  COL_VERTEX(5456, 2633, -489);
	  COL_VERTEX(3459, 2223, -699);
	  COL_VERTEX(3459, 2223, -2645);
	  COL_VERTEX(3868, 2223, -2645);
	  COL_VERTEX(3971, 2428, -2645);
	  COL_VERTEX(7653, 4503, -1532);
	  COL_VERTEX(7683, 4523, -2350);
	  COL_VERTEX(7401, 4455, -2969);
	  COL_VERTEX(6872, 4242, -3221);
	  COL_VERTEX(6872, 4263, -3221);
	  COL_VERTEX(3356, 2428, -3464);
	  COL_VERTEX(3971, 2428, -3464);
	  COL_VERTEX(4582, 2488, -3464);
	  COL_VERTEX(6113, 3889, -3464);
	  COL_VERTEX(6113, 3889, -2645);
	  COL_VERTEX(6908, 4280, -2391);
	  COL_VERTEX(5336, 2808, -2645);
	  COL_VERTEX(5377, 2705, -2645);
	  COL_VERTEX(4582, 2325, -2645);
	  COL_VERTEX(6875, 4215, -1471);
	  COL_VERTEX(7456, 4476, -957);
	  COL_VERTEX(5756, 2772, -1308);
	  COL_VERTEX(6551, 3925, -456);
	  COL_VERTEX(6172, 2940, -489);
	  COL_VERTEX(6193, 2899, -489);
	  COL_VERTEX(6516, 3834, -1888);
	  COL_VERTEX(6414, 3834, -1991);
	  COL_VERTEX(6516, 3476, -1991);
	  COL_VERTEX(6414, 3476, -1888);
	  COL_VERTEX(6414, 3476, -1991);
	  COL_VERTEX(-3571, -1535, -942);
	  COL_VERTEX(-3571, -1433, -942);
	  COL_VERTEX(-3878, -1433, -942);
	  COL_VERTEX(1271, 5833, -4797);
	  COL_VERTEX(-192, -2610, -1658);
	  COL_VERTEX(-141, -2661, -1504);
	  COL_VERTEX(-448, -2661, -1504);
	  COL_VERTEX(-448, -2610, -1504);
	  COL_VERTEX(8192, -8191, 0);
	  COL_VERTEX(0, -8191, 0);
	  COL_VERTEX(0, -8191, 8192);
	  COL_VERTEX(-8191, -8191, 8192);
	  COL_VERTEX(-8191, -8191, 0);
	  COL_VERTEX(8192, -8191, -8191);
	  COL_VERTEX(0, -8191, -8191);
	  COL_VERTEX(-8191, -8191, -8191);
	  COL_VERTEX(8192, -8191, 8192);
	  COL_VERTEX(657, 5833, -2032);
	  COL_VERTEX(42, 5833, -2032);
	  COL_TRI_INIT(SURFACE_DEFAULT, 952);
	  COL_TRI(217, 218, 219);
	  COL_TRI(218, 220, 219);
	  COL_TRI(220, 218, 221);
	  COL_TRI(220, 222, 219);
	  COL_TRI(221, 222, 220);
	  COL_TRI(223, 217, 219);
	  COL_TRI(222, 224, 219);
	  COL_TRI(219, 225, 223);
	  COL_TRI(219, 224, 225);
	  COL_TRI(226, 227, 228);
	  COL_TRI(226, 229, 227);
	  COL_TRI(218, 228, 221);
	  COL_TRI(228, 227, 221);
	  COL_TRI(229, 230, 227);
	  COL_TRI(231, 217, 223);
	  COL_TRI(232, 231, 223);
	  COL_TRI(231, 646, 647);
	  COL_TRI(231, 234, 646);
	  COL_TRI(238, 271, 239);
	  COL_TRI(233, 251, 646);
	  COL_TRI(234, 233, 646);
	  COL_TRI(235, 237, 244);
	  COL_TRI(235, 244, 650);
	  COL_TRI(236, 650, 244);
	  COL_TRI(237, 268, 244);
	  COL_TRI(242, 655, 271);
	  COL_TRI(239, 651, 240);
	  COL_TRI(239, 240, 235);
	  COL_TRI(240, 268, 237);
	  COL_TRI(240, 654, 268);
	  COL_TRI(238, 241, 271);
	  COL_TRI(241, 242, 271);
	  COL_TRI(243, 652, 656);
	  COL_TRI(243, 236, 652);
	  COL_TRI(224, 243, 656);
	  COL_TRI(236, 244, 652);
	  COL_TRI(244, 269, 652);
	  COL_TRI(224, 656, 249);
	  COL_TRI(225, 232, 223);
	  COL_TRI(221, 245, 222);
	  COL_TRI(248, 659, 247);
	  COL_TRI(246, 242, 241);
	  COL_TRI(246, 255, 242);
	  COL_TRI(246, 238, 657);
	  COL_TRI(246, 241, 238);
	  COL_TRI(247, 246, 657);
	  COL_TRI(247, 657, 658);
	  COL_TRI(222, 658, 224);
	  COL_TRI(248, 247, 658);
	  COL_TRI(222, 248, 658);
	  COL_TRI(245, 659, 248);
	  COL_TRI(245, 248, 222);
	  COL_TRI(224, 249, 225);
	  COL_TRI(232, 225, 250);
	  COL_TRI(234, 231, 232);
	  COL_TRI(233, 234, 232);
	  COL_TRI(250, 233, 232);
	  COL_TRI(251, 233, 252);
	  COL_TRI(233, 250, 252);
	  COL_TRI(250, 225, 662);
	  COL_TRI(252, 250, 263);
	  COL_TRI(250, 662, 263);
	  COL_TRI(225, 249, 662);
	  COL_TRI(245, 663, 659);
	  COL_TRI(245, 260, 663);
	  COL_TRI(253, 663, 256);
	  COL_TRI(254, 257, 663);
	  COL_TRI(253, 256, 247);
	  COL_TRI(255, 246, 256);
	  COL_TRI(256, 660, 255);
	  COL_TRI(255, 660, 661);
	  COL_TRI(255, 661, 242);
	  COL_TRI(246, 247, 256);
	  COL_TRI(257, 664, 256);
	  COL_TRI(257, 256, 663);
	  COL_TRI(256, 664, 660);
	  COL_TRI(258, 655, 242);
	  COL_TRI(227, 648, 221);
	  COL_TRI(259, 249, 264);
	  COL_TRI(249, 656, 264);
	  COL_TRI(260, 245, 261);
	  COL_TRI(245, 221, 261);
	  COL_TRI(259, 665, 662);
	  COL_TRI(259, 662, 249);
	  COL_TRI(261, 221, 649);
	  COL_TRI(221, 648, 649);
	  COL_TRI(230, 649, 227);
	  COL_TRI(254, 273, 257);
	  COL_TRI(261, 649, 230);
	  COL_TRI(262, 261, 230);
	  COL_TRI(261, 262, 260);
	  COL_TRI(262, 273, 260);
	  COL_TRI(263, 665, 666);
	  COL_TRI(263, 662, 665);
	  COL_TRI(264, 266, 259);
	  COL_TRI(264, 667, 266);
	  COL_TRI(265, 264, 652);
	  COL_TRI(267, 268, 654);
	  COL_TRI(266, 666, 665);
	  COL_TRI(266, 665, 259);
	  COL_TRI(264, 668, 667);
	  COL_TRI(264, 265, 668);
	  COL_TRI(265, 652, 269);
	  COL_TRI(244, 653, 269);
	  COL_TRI(270, 269, 669);
	  COL_TRI(267, 653, 268);
	  COL_TRI(268, 653, 244);
	  COL_TRI(269, 653, 267);
	  COL_TRI(258, 242, 661);
	  COL_TRI(269, 267, 669);
	  COL_TRI(270, 265, 269);
	  COL_TRI(275, 277, 276);
	  COL_TRI(271, 655, 258);
	  COL_TRI(271, 258, 651);
	  COL_TRI(272, 273, 245);
	  COL_TRI(273, 260, 245);
	  COL_TRI(263, 274, 662);
	  COL_TRI(274, 249, 662);
	  COL_TRI(281, 673, 276);
	  COL_TRI(275, 670, 277);
	  COL_TRI(276, 277, 671);
	  COL_TRI(277, 670, 279);
	  COL_TRI(278, 279, 275);
	  COL_TRI(279, 670, 275);
	  COL_TRI(280, 279, 278);
	  COL_TRI(280, 671, 279);
	  COL_TRI(277, 279, 671);
	  COL_TRI(276, 671, 280);
	  COL_TRI(278, 281, 280);
	  COL_TRI(280, 281, 276);
	  COL_TRI(278, 672, 281);
	  COL_TRI(276, 674, 275);
	  COL_TRI(276, 673, 674);
	  COL_TRI(275, 674, 672);
	  COL_TRI(275, 672, 278);
	  COL_TRI(282, 284, 675);
	  COL_TRI(283, 284, 282);
	  COL_TRI(284, 676, 286);
	  COL_TRI(284, 286, 675);
	  COL_TRI(283, 676, 284);
	  COL_TRI(285, 675, 286);
	  COL_TRI(285, 286, 287);
	  COL_TRI(286, 676, 283);
	  COL_TRI(287, 286, 283);
	  COL_TRI(282, 675, 285);
	  COL_TRI(289, 680, 681);
	  COL_TRI(285, 288, 282);
	  COL_TRI(287, 288, 285);
	  COL_TRI(288, 677, 678);
	  COL_TRI(288, 679, 282);
	  COL_TRI(288, 678, 679);
	  COL_TRI(287, 677, 288);
	  COL_TRI(282, 679, 678);
	  COL_TRI(282, 678, 283);
	  COL_TRI(283, 678, 677);
	  COL_TRI(283, 677, 287);
	  COL_TRI(289, 681, 682);
	  COL_TRI(290, 680, 292);
	  COL_TRI(290, 291, 681);
	  COL_TRI(291, 297, 681);
	  COL_TRI(289, 682, 683);
	  COL_TRI(290, 292, 684);
	  COL_TRI(292, 685, 294);
	  COL_TRI(292, 686, 685);
	  COL_TRI(291, 688, 687);
	  COL_TRI(293, 685, 686);
	  COL_TRI(293, 690, 685);
	  COL_TRI(294, 295, 684);
	  COL_TRI(295, 296, 684);
	  COL_TRI(296, 688, 291);
	  COL_TRI(291, 687, 297);
	  COL_TRI(299, 690, 293);
	  COL_TRI(297, 687, 689);
	  COL_TRI(297, 689, 295);
	  COL_TRI(298, 290, 291);
	  COL_TRI(295, 689, 691);
	  COL_TRI(295, 691, 296);
	  COL_TRI(296, 691, 688);
	  COL_TRI(301, 11, 20);
	  COL_TRI(299, 683, 690);
	  COL_TRI(289, 683, 299);
	  COL_TRI(300, 5, 692);
	  COL_TRI(300, 350, 5);
	  COL_TRI(301, 5, 11);
	  COL_TRI(301, 692, 5);
	  COL_TRI(302, 693, 20);
	  COL_TRI(302, 20, 10);
	  COL_TRI(302, 10, 694);
	  COL_TRI(301, 20, 693);
	  COL_TRI(305, 308, 309);
	  COL_TRI(302, 694, 695);
	  COL_TRI(303, 326, 694);
	  COL_TRI(304, 696, 695);
	  COL_TRI(305, 28, 308);
	  COL_TRI(306, 28, 305);
	  COL_TRI(306, 305, 307);
	  COL_TRI(312, 313, 311);
	  COL_TRI(308, 697, 325);
	  COL_TRI(309, 308, 325);
	  COL_TRI(310, 312, 311);
	  COL_TRI(310, 700, 312);
	  COL_TRI(310, 701, 700);
	  COL_TRI(310, 347, 701);
	  COL_TRI(311, 702, 310);
	  COL_TRI(312, 344, 313);
	  COL_TRI(311, 703, 702);
	  COL_TRI(313, 703, 311);
	  COL_TRI(314, 349, 315);
	  COL_TRI(314, 707, 349);
	  COL_TRI(314, 346, 708);
	  COL_TRI(314, 708, 707);
	  COL_TRI(314, 709, 346);
	  COL_TRI(314, 710, 709);
	  COL_TRI(315, 710, 314);
	  COL_TRI(315, 711, 710);
	  COL_TRI(319, 719, 308);
	  COL_TRI(316, 325, 697);
	  COL_TRI(316, 697, 712);
	  COL_TRI(317, 713, 714);
	  COL_TRI(317, 715, 713);
	  COL_TRI(318, 716, 717);
	  COL_TRI(318, 718, 716);
	  COL_TRI(325, 704, 324);
	  COL_TRI(319, 308, 327);
	  COL_TRI(320, 321, 323);
	  COL_TRI(321, 699, 323);
	  COL_TRI(322, 320, 323);
	  COL_TRI(323, 316, 322);
	  COL_TRI(324, 309, 325);
	  COL_TRI(324, 704, 698);
	  COL_TRI(326, 324, 698);
	  COL_TRI(303, 324, 326);
	  COL_TRI(327, 322, 712);
	  COL_TRI(322, 316, 712);
	  COL_TRI(328, 720, 329);
	  COL_TRI(329, 720, 721);
	  COL_TRI(329, 721, 330);
	  COL_TRI(333, 726, 334);
	  COL_TRI(328, 722, 720);
	  COL_TRI(330, 721, 723);
	  COL_TRI(330, 723, 331);
	  COL_TRI(331, 723, 724);
	  COL_TRI(331, 724, 332);
	  COL_TRI(332, 724, 725);
	  COL_TRI(332, 725, 333);
	  COL_TRI(333, 725, 726);
	  COL_TRI(338, 729, 731);
	  COL_TRI(334, 726, 727);
	  COL_TRI(334, 727, 335);
	  COL_TRI(335, 727, 722);
	  COL_TRI(335, 722, 328);
	  COL_TRI(336, 728, 729);
	  COL_TRI(337, 728, 336);
	  COL_TRI(336, 729, 338);
	  COL_TRI(337, 730, 728);
	  COL_TRI(343, 730, 337);
	  COL_TRI(338, 731, 339);
	  COL_TRI(339, 731, 732);
	  COL_TRI(339, 732, 340);
	  COL_TRI(340, 732, 733);
	  COL_TRI(340, 733, 341);
	  COL_TRI(341, 733, 734);
	  COL_TRI(341, 734, 342);
	  COL_TRI(342, 734, 735);
	  COL_TRI(342, 735, 343);
	  COL_TRI(343, 735, 730);
	  COL_TRI(344, 699, 313);
	  COL_TRI(344, 323, 699);
	  COL_TRI(326, 698, 699);
	  COL_TRI(326, 699, 321);
	  COL_TRI(345, 699, 736);
	  COL_TRI(346, 705, 313);
	  COL_TRI(313, 705, 703);
	  COL_TRI(346, 698, 704);
	  COL_TRI(346, 709, 705);
	  COL_TRI(346, 704, 708);
	  COL_TRI(347, 348, 701);
	  COL_TRI(347, 706, 348);
	  COL_TRI(348, 706, 315);
	  COL_TRI(349, 348, 315);
	  COL_TRI(320, 351, 350);
	  COL_TRI(320, 350, 321);
	  COL_TRI(350, 352, 737);
	  COL_TRI(350, 351, 352);
	  COL_TRI(306, 307, 303);
	  COL_TRI(351, 738, 352);
	  COL_TRI(351, 322, 738);
	  COL_TRI(322, 0, 738);
	  COL_TRI(322, 327, 0);
	  COL_TRI(352, 738, 0);
	  COL_TRI(307, 309, 303);
	  COL_TRI(307, 305, 309);
	  COL_TRI(306, 303, 694);
	  COL_TRI(356, 741, 739);
	  COL_TRI(352, 0, 737);
	  COL_TRI(353, 304, 694);
	  COL_TRI(353, 694, 350);
	  COL_TRI(354, 739, 355);
	  COL_TRI(354, 356, 739);
	  COL_TRI(355, 740, 354);
	  COL_TRI(359, 361, 745);
	  COL_TRI(355, 357, 740);
	  COL_TRI(356, 742, 741);
	  COL_TRI(357, 741, 742);
	  COL_TRI(357, 742, 740);
	  COL_TRI(358, 360, 744);
	  COL_TRI(358, 744, 359);
	  COL_TRI(359, 745, 358);
	  COL_TRI(360, 746, 744);
	  COL_TRI(365, 750, 751);
	  COL_TRI(360, 747, 746);
	  COL_TRI(361, 746, 747);
	  COL_TRI(361, 747, 745);
	  COL_TRI(362, 748, 363);
	  COL_TRI(362, 364, 748);
	  COL_TRI(363, 749, 362);
	  COL_TRI(364, 750, 748);
	  COL_TRI(363, 365, 749);
	  COL_TRI(364, 751, 750);
	  COL_TRI(365, 751, 749);
	  COL_TRI(366, 752, 368);
	  COL_TRI(366, 368, 753);
	  COL_TRI(367, 752, 366);
	  COL_TRI(367, 366, 754);
	  COL_TRI(368, 755, 756);
	  COL_TRI(368, 756, 753);
	  COL_TRI(369, 754, 370);
	  COL_TRI(370, 371, 757);
	  COL_TRI(370, 757, 369);
	  COL_TRI(369, 367, 754);
	  COL_TRI(371, 758, 757);
	  COL_TRI(371, 372, 758);
	  COL_TRI(372, 373, 759);
	  COL_TRI(372, 759, 758);
	  COL_TRI(373, 756, 755);
	  COL_TRI(373, 755, 759);
	  COL_TRI(374, 760, 375);
	  COL_TRI(374, 375, 761);
	  COL_TRI(375, 760, 762);
	  COL_TRI(375, 762, 763);
	  COL_TRI(61, 62, 59);
	  COL_TRI(376, 374, 761);
	  COL_TRI(376, 764, 374);
	  COL_TRI(377, 765, 378);
	  COL_TRI(378, 379, 766);
	  COL_TRI(378, 766, 377);
	  COL_TRI(379, 767, 766);
	  COL_TRI(379, 768, 767);
	  COL_TRI(377, 380, 765);
	  COL_TRI(380, 768, 765);
	  COL_TRI(380, 767, 768);
	  COL_TRI(61, 59, 60);
	  COL_TRI(381, 383, 769);
	  COL_TRI(381, 769, 770);
	  COL_TRI(382, 381, 770);
	  COL_TRI(383, 771, 772);
	  COL_TRI(383, 772, 769);
	  COL_TRI(382, 770, 386);
	  COL_TRI(384, 772, 771);
	  COL_TRI(384, 771, 773);
	  COL_TRI(385, 384, 773);
	  COL_TRI(385, 773, 388);
	  COL_TRI(386, 387, 774);
	  COL_TRI(386, 774, 382);
	  COL_TRI(387, 775, 774);
	  COL_TRI(387, 776, 775);
	  COL_TRI(388, 775, 776);
	  COL_TRI(388, 776, 385);
	  COL_TRI(389, 390, 777);
	  COL_TRI(390, 778, 391);
	  COL_TRI(390, 391, 777);
	  COL_TRI(391, 778, 393);
	  COL_TRI(392, 780, 781);
	  COL_TRI(392, 389, 779);
	  COL_TRI(392, 779, 780);
	  COL_TRI(393, 398, 781);
	  COL_TRI(394, 392, 781);
	  COL_TRI(395, 785, 783);
	  COL_TRI(389, 777, 779);
	  COL_TRI(393, 782, 398);
	  COL_TRI(395, 783, 782);
	  COL_TRI(393, 396, 395);
	  COL_TRI(393, 778, 396);
	  COL_TRI(396, 784, 395);
	  COL_TRI(397, 786, 394);
	  COL_TRI(398, 399, 397);
	  COL_TRI(399, 787, 397);
	  COL_TRI(397, 394, 781);
	  COL_TRI(400, 401, 404);
	  COL_TRI(401, 788, 404);
	  COL_TRI(402, 403, 401);
	  COL_TRI(403, 788, 401);
	  COL_TRI(400, 404, 789);
	  COL_TRI(404, 790, 789);
	  COL_TRI(405, 406, 407);
	  COL_TRI(406, 791, 429);
	  COL_TRI(406, 405, 791);
	  COL_TRI(406, 408, 792);
	  COL_TRI(407, 406, 792);
	  COL_TRI(406, 429, 408);
	  COL_TRI(408, 785, 793);
	  COL_TRI(408, 793, 792);
	  COL_TRI(409, 407, 792);
	  COL_TRI(410, 794, 412);
	  COL_TRI(411, 412, 413);
	  COL_TRI(411, 795, 412);
	  COL_TRI(412, 794, 414);
	  COL_TRI(413, 412, 414);
	  COL_TRI(412, 796, 410);
	  COL_TRI(409, 792, 793);
	  COL_TRI(416, 417, 797);
	  COL_TRI(410, 797, 794);
	  COL_TRI(414, 794, 797);
	  COL_TRI(414, 797, 800);
	  COL_TRI(415, 414, 800);
	  COL_TRI(415, 413, 414);
	  COL_TRI(415, 411, 413);
	  COL_TRI(410, 416, 797);
	  COL_TRI(416, 801, 417);
	  COL_TRI(417, 802, 418);
	  COL_TRI(418, 802, 803);
	  COL_TRI(418, 803, 419);
	  COL_TRI(417, 420, 802);
	  COL_TRI(419, 803, 432);
	  COL_TRI(420, 432, 803);
	  COL_TRI(420, 803, 802);
	  COL_TRI(417, 405, 420);
	  COL_TRI(417, 801, 791);
	  COL_TRI(417, 791, 405);
	  COL_TRI(424, 805, 804);
	  COL_TRI(421, 423, 787);
	  COL_TRI(421, 787, 804);
	  COL_TRI(422, 421, 804);
	  COL_TRI(422, 804, 805);
	  COL_TRI(423, 421, 422);
	  COL_TRI(424, 804, 399);
	  COL_TRI(423, 422, 427);
	  COL_TRI(425, 799, 806);
	  COL_TRI(425, 426, 798);
	  COL_TRI(425, 798, 799);
	  COL_TRI(426, 425, 422);
	  COL_TRI(425, 806, 807);
	  COL_TRI(427, 425, 807);
	  COL_TRI(427, 422, 425);
	  COL_TRI(412, 795, 796);
	  COL_TRI(426, 422, 805);
	  COL_TRI(428, 426, 805);
	  COL_TRI(428, 798, 426);
	  COL_TRI(428, 805, 424);
	  COL_TRI(428, 430, 798);
	  COL_TRI(429, 783, 408);
	  COL_TRI(430, 796, 795);
	  COL_TRI(415, 431, 411);
	  COL_TRI(431, 799, 411);
	  COL_TRI(431, 806, 799);
	  COL_TRI(411, 798, 795);
	  COL_TRI(411, 799, 798);
	  COL_TRI(430, 795, 798);
	  COL_TRI(432, 405, 407);
	  COL_TRI(419, 432, 407);
	  COL_TRI(419, 407, 409);
	  COL_TRI(433, 439, 434);
	  COL_TRI(434, 808, 809);
	  COL_TRI(434, 439, 808);
	  COL_TRI(435, 808, 810);
	  COL_TRI(435, 809, 808);
	  COL_TRI(436, 810, 808);
	  COL_TRI(435, 811, 809);
	  COL_TRI(437, 812, 440);
	  COL_TRI(437, 819, 812);
	  COL_TRI(438, 437, 440);
	  COL_TRI(439, 812, 819);
	  COL_TRI(440, 812, 813);
	  COL_TRI(439, 813, 812);
	  COL_TRI(440, 813, 814);
	  COL_TRI(438, 440, 441);
	  COL_TRI(441, 440, 814);
	  COL_TRI(442, 436, 820);
	  COL_TRI(433, 814, 813);
	  COL_TRI(433, 813, 439);
	  COL_TRI(435, 815, 442);
	  COL_TRI(435, 810, 815);
	  COL_TRI(435, 816, 811);
	  COL_TRI(435, 448, 816);
	  COL_TRI(436, 815, 810);
	  COL_TRI(442, 815, 436);
	  COL_TRI(443, 442, 820);
	  COL_TRI(443, 820, 821);
	  COL_TRI(444, 822, 823);
	  COL_TRI(444, 823, 454);
	  COL_TRI(444, 441, 822);
	  COL_TRI(445, 822, 447);
	  COL_TRI(445, 823, 822);
	  COL_TRI(441, 447, 822);
	  COL_TRI(441, 814, 818);
	  COL_TRI(444, 438, 441);
	  COL_TRI(446, 445, 447);
	  COL_TRI(446, 447, 824);
	  COL_TRI(447, 818, 817);
	  COL_TRI(447, 817, 824);
	  COL_TRI(441, 818, 447);
	  COL_TRI(433, 817, 818);
	  COL_TRI(433, 818, 814);
	  COL_TRI(448, 435, 442);
	  COL_TRI(448, 442, 443);
	  COL_TRI(449, 816, 448);
	  COL_TRI(449, 825, 816);
	  COL_TRI(449, 451, 826);
	  COL_TRI(451, 449, 448);
	  COL_TRI(453, 828, 445);
	  COL_TRI(450, 451, 443);
	  COL_TRI(451, 448, 443);
	  COL_TRI(450, 443, 821);
	  COL_TRI(445, 827, 823);
	  COL_TRI(445, 828, 827);
	  COL_TRI(452, 827, 828);
	  COL_TRI(456, 457, 825);
	  COL_TRI(454, 827, 829);
	  COL_TRI(454, 823, 827);
	  COL_TRI(455, 453, 461);
	  COL_TRI(455, 452, 453);
	  COL_TRI(453, 445, 446);
	  COL_TRI(452, 829, 827);
	  COL_TRI(456, 825, 449);
	  COL_TRI(451, 450, 458);
	  COL_TRI(451, 458, 826);
	  COL_TRI(458, 832, 459);
	  COL_TRI(458, 459, 826);
	  COL_TRI(459, 830, 456);
	  COL_TRI(459, 456, 826);
	  COL_TRI(456, 830, 462);
	  COL_TRI(456, 462, 833);
	  COL_TRI(449, 826, 456);
	  COL_TRI(462, 830, 459);
	  COL_TRI(462, 459, 832);
	  COL_TRI(464, 836, 834);
	  COL_TRI(460, 457, 833);
	  COL_TRI(461, 831, 455);
	  COL_TRI(461, 460, 831);
	  COL_TRI(460, 833, 831);
	  COL_TRI(457, 460, 461);
	  COL_TRI(457, 461, 825);
	  COL_TRI(463, 464, 834);
	  COL_TRI(464, 835, 836);
	  COL_TRI(465, 836, 835);
	  COL_TRI(465, 835, 837);
	  COL_TRI(466, 836, 465);
	  COL_TRI(466, 834, 836);
	  COL_TRI(463, 834, 466);
	  COL_TRI(467, 468, 838);
	  COL_TRI(467, 838, 469);
	  COL_TRI(468, 839, 840);
	  COL_TRI(468, 840, 838);
	  COL_TRI(469, 838, 840);
	  COL_TRI(469, 841, 467);
	  COL_TRI(469, 840, 470);
	  COL_TRI(470, 840, 839);
	  COL_TRI(470, 839, 841);
	  COL_TRI(466, 465, 837);
	  COL_TRI(466, 837, 463);
	  COL_TRI(469, 470, 841);
	  COL_TRI(490, 846, 472);
	  COL_TRI(471, 842, 843);
	  COL_TRI(471, 844, 842);
	  COL_TRI(472, 845, 471);
	  COL_TRI(472, 471, 844);
	  COL_TRI(473, 474, 475);
	  COL_TRI(474, 490, 475);
	  COL_TRI(475, 846, 490);
	  COL_TRI(475, 847, 846);
	  COL_TRI(480, 852, 486);
	  COL_TRI(476, 848, 849);
	  COL_TRI(476, 477, 848);
	  COL_TRI(477, 850, 476);
	  COL_TRI(476, 851, 480);
	  COL_TRI(476, 850, 851);
	  COL_TRI(478, 479, 480);
	  COL_TRI(479, 486, 480);
	  COL_TRI(480, 851, 852);
	  COL_TRI(486, 852, 853);
	  COL_TRI(481, 854, 582);
	  COL_TRI(482, 481, 483);
	  COL_TRI(482, 854, 481);
	  COL_TRI(481, 582, 855);
	  COL_TRI(483, 481, 855);
	  COL_TRI(484, 855, 582);
	  COL_TRI(485, 582, 854);
	  COL_TRI(484, 582, 485);
	  COL_TRI(483, 855, 484);
	  COL_TRI(485, 854, 482);
	  COL_TRI(486, 853, 477);
	  COL_TRI(477, 853, 850);
	  COL_TRI(487, 494, 488);
	  COL_TRI(487, 488, 508);
	  COL_TRI(488, 494, 496);
	  COL_TRI(488, 496, 856);
	  COL_TRI(489, 856, 496);
	  COL_TRI(489, 496, 503);
	  COL_TRI(490, 472, 844);
	  COL_TRI(471, 491, 857);
	  COL_TRI(494, 860, 496);
	  COL_TRI(491, 845, 858);
	  COL_TRI(493, 492, 858);
	  COL_TRI(492, 491, 858);
	  COL_TRI(493, 847, 857);
	  COL_TRI(493, 857, 859);
	  COL_TRI(471, 857, 475);
	  COL_TRI(498, 499, 863);
	  COL_TRI(494, 495, 860);
	  COL_TRI(495, 497, 860);
	  COL_TRI(496, 860, 497);
	  COL_TRI(496, 497, 503);
	  COL_TRI(495, 861, 497);
	  COL_TRI(495, 487, 861);
	  COL_TRI(495, 494, 487);
	  COL_TRI(497, 503, 862);
	  COL_TRI(498, 864, 865);
	  COL_TRI(499, 865, 500);
	  COL_TRI(499, 500, 863);
	  COL_TRI(498, 865, 499);
	  COL_TRI(500, 865, 864);
	  COL_TRI(493, 859, 492);
	  COL_TRI(501, 487, 861);
	  COL_TRI(502, 501, 861);
	  COL_TRI(503, 489, 867);
	  COL_TRI(503, 867, 862);
	  COL_TRI(497, 862, 866);
	  COL_TRI(501, 868, 508);
	  COL_TRI(501, 508, 487);
	  COL_TRI(504, 510, 505);
	  COL_TRI(509, 869, 511);
	  COL_TRI(505, 514, 507);
	  COL_TRI(506, 514, 510);
	  COL_TRI(505, 510, 514);
	  COL_TRI(506, 488, 514);
	  COL_TRI(507, 514, 489);
	  COL_TRI(508, 488, 506);
	  COL_TRI(508, 506, 509);
	  COL_TRI(509, 506, 869);
	  COL_TRI(510, 869, 506);
	  COL_TRI(510, 515, 869);
	  COL_TRI(511, 869, 517);
	  COL_TRI(511, 517, 516);
	  COL_TRI(512, 513, 504);
	  COL_TRI(513, 515, 504);
	  COL_TRI(504, 515, 510);
	  COL_TRI(488, 856, 514);
	  COL_TRI(514, 856, 489);
	  COL_TRI(515, 517, 869);
	  COL_TRI(516, 517, 870);
	  COL_TRI(515, 518, 517);
	  COL_TRI(517, 518, 870);
	  COL_TRI(515, 513, 518);
	  COL_TRI(521, 523, 874);
	  COL_TRI(513, 519, 871);
	  COL_TRI(513, 871, 518);
	  COL_TRI(512, 519, 513);
	  COL_TRI(518, 871, 872);
	  COL_TRI(519, 872, 871);
	  COL_TRI(518, 872, 870);
	  COL_TRI(512, 873, 519);
	  COL_TRI(519, 873, 872);
	  COL_TRI(520, 523, 521);
	  COL_TRI(521, 874, 524);
	  COL_TRI(522, 524, 874);
	  COL_TRI(522, 874, 876);
	  COL_TRI(523, 520, 876);
	  COL_TRI(523, 876, 874);
	  COL_TRI(524, 522, 875);
	  COL_TRI(520, 521, 875);
	  COL_TRI(527, 878, 877);
	  COL_TRI(524, 875, 521);
	  COL_TRI(525, 877, 528);
	  COL_TRI(525, 527, 877);
	  COL_TRI(526, 527, 525);
	  COL_TRI(526, 525, 647);
	  COL_TRI(226, 877, 878);
	  COL_TRI(226, 528, 877);
	  COL_TRI(527, 526, 878);
	  COL_TRI(528, 226, 647);
	  COL_TRI(528, 647, 525);
	  COL_TRI(529, 879, 533);
	  COL_TRI(529, 533, 880);
	  COL_TRI(530, 879, 529);
	  COL_TRI(531, 880, 533);
	  COL_TRI(530, 529, 881);
	  COL_TRI(532, 530, 881);
	  COL_TRI(533, 530, 532);
	  COL_TRI(533, 879, 530);
	  COL_TRI(532, 881, 531);
	  COL_TRI(531, 881, 529);
	  COL_TRI(531, 533, 532);
	  COL_TRI(531, 529, 880);
	  COL_TRI(534, 537, 882);
	  COL_TRI(534, 883, 537);
	  COL_TRI(538, 886, 541);
	  COL_TRI(535, 884, 534);
	  COL_TRI(535, 534, 882);
	  COL_TRI(535, 537, 885);
	  COL_TRI(535, 882, 537);
	  COL_TRI(536, 534, 884);
	  COL_TRI(536, 883, 534);
	  COL_TRI(537, 536, 885);
	  COL_TRI(537, 883, 536);
	  COL_TRI(541, 539, 889);
	  COL_TRI(538, 541, 887);
	  COL_TRI(539, 538, 888);
	  COL_TRI(540, 887, 541);
	  COL_TRI(540, 541, 889);
	  COL_TRI(540, 889, 539);
	  COL_TRI(540, 539, 888);
	  COL_TRI(539, 886, 538);
	  COL_TRI(541, 886, 539);
	  COL_TRI(548, 894, 550);
	  COL_TRI(542, 543, 544);
	  COL_TRI(543, 545, 544);
	  COL_TRI(544, 890, 542);
	  COL_TRI(544, 545, 890);
	  COL_TRI(545, 891, 890);
	  COL_TRI(542, 890, 891);
	  COL_TRI(542, 546, 543);
	  COL_TRI(542, 891, 546);
	  COL_TRI(543, 892, 545);
	  COL_TRI(545, 892, 891);
	  COL_TRI(546, 891, 892);
	  COL_TRI(546, 892, 543);
	  COL_TRI(547, 893, 550);
	  COL_TRI(547, 550, 894);
	  COL_TRI(551, 552, 898);
	  COL_TRI(548, 550, 895);
	  COL_TRI(548, 547, 894);
	  COL_TRI(548, 896, 547);
	  COL_TRI(549, 547, 896);
	  COL_TRI(549, 893, 547);
	  COL_TRI(550, 893, 549);
	  COL_TRI(550, 549, 895);
	  COL_TRI(551, 897, 552);
	  COL_TRI(555, 901, 554);
	  COL_TRI(552, 897, 559);
	  COL_TRI(553, 899, 559);
	  COL_TRI(553, 559, 900);
	  COL_TRI(552, 559, 899);
	  COL_TRI(553, 551, 898);
	  COL_TRI(553, 900, 551);
	  COL_TRI(554, 556, 557);
	  COL_TRI(554, 557, 555);
	  COL_TRI(554, 902, 556);
	  COL_TRI(556, 903, 557);
	  COL_TRI(556, 902, 903);
	  COL_TRI(557, 903, 558);
	  COL_TRI(557, 558, 555);
	  COL_TRI(555, 558, 901);
	  COL_TRI(558, 903, 902);
	  COL_TRI(558, 902, 901);
	  COL_TRI(554, 901, 902);
	  COL_TRI(559, 897, 551);
	  COL_TRI(559, 551, 900);
	  COL_TRI(560, 563, 904);
	  COL_TRI(560, 904, 562);
	  COL_TRI(561, 563, 560);
	  COL_TRI(563, 905, 906);
	  COL_TRI(561, 905, 563);
	  COL_TRI(563, 906, 904);
	  COL_TRI(562, 564, 561);
	  COL_TRI(562, 561, 560);
	  COL_TRI(564, 905, 561);
	  COL_TRI(564, 906, 905);
	  COL_TRI(565, 567, 907);
	  COL_TRI(566, 570, 565);
	  COL_TRI(565, 907, 566);
	  COL_TRI(570, 566, 913);
	  COL_TRI(567, 908, 907);
	  COL_TRI(567, 909, 908);
	  COL_TRI(567, 910, 909);
	  COL_TRI(568, 909, 910);
	  COL_TRI(568, 910, 911);
	  COL_TRI(568, 911, 569);
	  COL_TRI(569, 912, 568);
	  COL_TRI(570, 913, 914);
	  COL_TRI(571, 915, 572);
	  COL_TRI(571, 572, 916);
	  COL_TRI(572, 915, 912);
	  COL_TRI(572, 912, 569);
	  COL_TRI(573, 575, 574);
	  COL_TRI(574, 576, 917);
	  COL_TRI(573, 574, 917);
	  COL_TRI(575, 577, 574);
	  COL_TRI(576, 574, 918);
	  COL_TRI(574, 577, 918);
	  COL_TRI(577, 919, 580);
	  COL_TRI(577, 580, 579);
	  COL_TRI(575, 919, 577);
	  COL_TRI(577, 579, 918);
	  COL_TRI(578, 921, 918);
	  COL_TRI(579, 578, 918);
	  COL_TRI(579, 573, 578);
	  COL_TRI(580, 573, 579);
	  COL_TRI(573, 917, 578);
	  COL_TRI(573, 920, 575);
	  COL_TRI(580, 920, 573);
	  COL_TRI(520, 578, 917);
	  COL_TRI(582, 924, 581);
	  COL_TRI(576, 921, 876);
	  COL_TRI(576, 918, 921);
	  COL_TRI(578, 922, 921);
	  COL_TRI(520, 922, 578);
	  COL_TRI(581, 923, 583);
	  COL_TRI(581, 924, 923);
	  COL_TRI(584, 928, 615);
	  COL_TRI(583, 923, 925);
	  COL_TRI(583, 925, 926);
	  COL_TRI(582, 485, 924);
	  COL_TRI(571, 927, 584);
	  COL_TRI(571, 916, 927);
	  COL_TRI(584, 927, 928);
	  COL_TRI(589, 933, 590);
	  COL_TRI(585, 930, 586);
	  COL_TRI(586, 587, 931);
	  COL_TRI(586, 930, 587);
	  COL_TRI(585, 932, 930);
	  COL_TRI(587, 913, 931);
	  COL_TRI(587, 914, 913);
	  COL_TRI(588, 933, 589);
	  COL_TRI(589, 590, 591);
	  COL_TRI(593, 938, 939);
	  COL_TRI(590, 933, 934);
	  COL_TRI(590, 934, 935);
	  COL_TRI(591, 590, 935);
	  COL_TRI(591, 935, 936);
	  COL_TRI(588, 934, 933);
	  COL_TRI(592, 593, 937);
	  COL_TRI(592, 938, 593);
	  COL_TRI(593, 939, 594);
	  COL_TRI(594, 939, 940);
	  COL_TRI(594, 940, 941);
	  COL_TRI(595, 596, 942);
	  COL_TRI(596, 588, 942);
	  COL_TRI(596, 934, 588);
	  COL_TRI(595, 942, 943);
	  COL_TRI(597, 598, 599);
	  COL_TRI(597, 599, 944);
	  COL_TRI(599, 943, 944);
	  COL_TRI(599, 595, 943);
	  COL_TRI(598, 945, 600);
	  COL_TRI(598, 597, 945);
	  COL_TRI(600, 941, 940);
	  COL_TRI(600, 945, 941);
	  COL_TRI(601, 946, 602);
	  COL_TRI(601, 947, 946);
	  COL_TRI(602, 946, 948);
	  COL_TRI(602, 948, 949);
	  COL_TRI(603, 949, 948);
	  COL_TRI(603, 950, 949);
	  COL_TRI(609, 608, 953);
	  COL_TRI(604, 947, 601);
	  COL_TRI(604, 601, 951);
	  COL_TRI(605, 604, 951);
	  COL_TRI(606, 605, 951);
	  COL_TRI(607, 592, 937);
	  COL_TRI(607, 952, 592);
	  COL_TRI(608, 609, 605);
	  COL_TRI(608, 605, 606);
	  COL_TRI(610, 954, 955);
	  COL_TRI(610, 955, 956);
	  COL_TRI(611, 612, 610);
	  COL_TRI(612, 954, 610);
	  COL_TRI(613, 614, 956);
	  COL_TRI(613, 956, 955);
	  COL_TRI(612, 952, 607);
	  COL_TRI(612, 611, 952);
	  COL_TRI(614, 613, 932);
	  COL_TRI(614, 932, 585);
	  COL_TRI(619, 958, 618);
	  COL_TRI(609, 953, 929);
	  COL_TRI(615, 929, 953);
	  COL_TRI(615, 928, 929);
	  COL_TRI(603, 935, 950);
	  COL_TRI(603, 936, 935);
	  COL_TRI(616, 617, 957);
	  COL_TRI(617, 958, 619);
	  COL_TRI(617, 619, 957);
	  COL_TRI(618, 958, 617);
	  COL_TRI(618, 617, 616);
	  COL_TRI(616, 959, 961);
	  COL_TRI(620, 619, 621);
	  COL_TRI(620, 957, 619);
	  COL_TRI(621, 619, 618);
	  COL_TRI(616, 957, 620);
	  COL_TRI(622, 959, 616);
	  COL_TRI(620, 622, 616);
	  COL_TRI(621, 622, 620);
	  COL_TRI(621, 960, 622);
	  COL_TRI(24, 34, 623);
	  COL_TRI(616, 961, 618);
	  COL_TRI(618, 960, 621);
	  COL_TRI(618, 961, 960);
	  COL_TRI(34, 33, 624);
	  COL_TRI(623, 34, 624);
	  COL_TRI(624, 33, 625);
	  COL_TRI(623, 624, 626);
	  COL_TRI(624, 625, 626);
	  COL_TRI(33, 23, 625);
	  COL_TRI(625, 23, 626);
	  COL_TRI(626, 24, 623);
	  COL_TRI(23, 24, 626);
	  COL_TRI(627, 629, 630);
	  COL_TRI(628, 36, 627);
	  COL_TRI(627, 630, 628);
	  COL_TRI(627, 35, 629);
	  COL_TRI(627, 36, 35);
	  COL_TRI(629, 35, 37);
	  COL_TRI(629, 37, 630);
	  COL_TRI(630, 37, 25);
	  COL_TRI(630, 25, 628);
	  COL_TRI(628, 25, 36);
	  COL_TRI(631, 633, 632);
	  COL_TRI(632, 40, 631);
	  COL_TRI(632, 26, 40);
	  COL_TRI(633, 26, 632);
	  COL_TRI(635, 42, 41);
	  COL_TRI(631, 40, 39);
	  COL_TRI(631, 634, 633);
	  COL_TRI(631, 39, 634);
	  COL_TRI(633, 38, 26);
	  COL_TRI(634, 39, 38);
	  COL_TRI(634, 38, 633);
	  COL_TRI(635, 637, 636);
	  COL_TRI(636, 42, 635);
	  COL_TRI(636, 27, 42);
	  COL_TRI(637, 27, 636);
	  COL_TRI(635, 638, 637);
	  COL_TRI(635, 41, 638);
	  COL_TRI(637, 43, 27);
	  COL_TRI(638, 41, 43);
	  COL_TRI(638, 43, 637);
	  COL_TRI(639, 298, 291);
	  COL_TRI(640, 962, 963);
	  COL_TRI(640, 963, 964);
	  COL_TRI(300, 743, 353);
	  COL_TRI(353, 641, 304);
	  COL_TRI(353, 743, 641);
	  COL_TRI(304, 641, 696);
	  COL_TRI(641, 743, 965);
	  COL_TRI(641, 965, 696);
	  COL_TRI(300, 965, 743);
	  COL_TRI(642, 645, 966);
	  COL_TRI(642, 644, 645);
	  COL_TRI(643, 642, 966);
	  COL_TRI(644, 642, 967);
	  COL_TRI(643, 967, 642);
	  COL_TRI(645, 644, 968);
	  COL_TRI(645, 968, 969);
	  COL_TRI_INIT(SURFACE_DEATH_PLANE, 8);
	  COL_TRI(970, 971, 972);
	  COL_TRI(971, 973, 972);
	  COL_TRI(971, 974, 973);
	  COL_TRI(975, 971, 970);
	  COL_TRI(975, 976, 971);
	  COL_TRI(976, 974, 971);
	  COL_TRI(976, 977, 974);
	  COL_TRI(970, 972, 978);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 199);
	  COL_TRI(664, 257, 273);
	  COL_TRI(229, 646, 230);
	  COL_TRI(646, 251, 230);
	  COL_TRI(251, 252, 230);
	  COL_TRI(230, 263, 273);
	  COL_TRI(230, 252, 263);
	  COL_TRI(263, 664, 273);
	  COL_TRI(686, 299, 293);
	  COL_TRI(660, 666, 270);
	  COL_TRI(660, 664, 666);
	  COL_TRI(661, 660, 267);
	  COL_TRI(660, 669, 267);
	  COL_TRI(654, 651, 258);
	  COL_TRI(654, 240, 651);
	  COL_TRI(291, 962, 296);
	  COL_TRI(686, 289, 299);
	  COL_TRI(686, 292, 680);
	  COL_TRI(686, 680, 289);
	  COL_TRI(687, 688, 691);
	  COL_TRI(687, 691, 689);
	  COL_TRI(291, 290, 962);
	  COL_TRI(712, 715, 317);
	  COL_TRI(2, 737, 0);
	  COL_TRI(327, 28, 0);
	  COL_TRI(327, 308, 28);
	  COL_TRI(28, 306, 16);
	  COL_TRI(7, 4, 3);
	  COL_TRI(712, 697, 715);
	  COL_TRI(724, 727, 726);
	  COL_TRI(714, 718, 318);
	  COL_TRI(714, 713, 718);
	  COL_TRI(717, 716, 719);
	  COL_TRI(717, 719, 319);
	  COL_TRI(724, 720, 722);
	  COL_TRI(724, 721, 720);
	  COL_TRI(724, 723, 721);
	  COL_TRI(724, 722, 727);
	  COL_TRI(732, 729, 728);
	  COL_TRI(724, 726, 725);
	  COL_TRI(348, 707, 708);
	  COL_TRI(348, 349, 707);
	  COL_TRI(348, 708, 344);
	  COL_TRI(348, 344, 312);
	  COL_TRI(348, 312, 700);
	  COL_TRI(348, 700, 701);
	  COL_TRI(732, 731, 729);
	  COL_TRI(732, 728, 730);
	  COL_TRI(732, 730, 735);
	  COL_TRI(732, 735, 734);
	  COL_TRI(732, 734, 733);
	  COL_TRI(355, 741, 357);
	  COL_TRI(355, 739, 741);
	  COL_TRI(359, 746, 361);
	  COL_TRI(359, 744, 746);
	  COL_TRI(363, 750, 365);
	  COL_TRI(363, 748, 750);
	  COL_TRI(757, 758, 755);
	  COL_TRI(755, 367, 757);
	  COL_TRI(367, 755, 368);
	  COL_TRI(758, 759, 755);
	  COL_TRI(369, 757, 367);
	  COL_TRI(368, 752, 367);
	  COL_TRI(392, 390, 389);
	  COL_TRI(378, 768, 379);
	  COL_TRI(378, 765, 768);
	  COL_TRI(385, 770, 769);
	  COL_TRI(385, 772, 384);
	  COL_TRI(385, 769, 772);
	  COL_TRI(385, 776, 387);
	  COL_TRI(385, 386, 770);
	  COL_TRI(385, 387, 386);
	  COL_TRI(427, 793, 423);
	  COL_TRI(394, 778, 392);
	  COL_TRI(392, 778, 390);
	  COL_TRI(394, 396, 778);
	  COL_TRI(396, 394, 786);
	  COL_TRI(396, 786, 784);
	  COL_TRI(397, 784, 786);
	  COL_TRI(397, 395, 784);
	  COL_TRI(427, 409, 793);
	  COL_TRI(807, 409, 427);
	  COL_TRI(807, 806, 409);
	  COL_TRI(800, 419, 431);
	  COL_TRI(800, 431, 415);
	  COL_TRI(419, 409, 431);
	  COL_TRI(409, 806, 431);
	  COL_TRI(800, 418, 419);
	  COL_TRI(450, 831, 462);
	  COL_TRI(397, 787, 785);
	  COL_TRI(397, 785, 395);
	  COL_TRI(819, 437, 820);
	  COL_TRI(819, 820, 436);
	  COL_TRI(450, 455, 831);
	  COL_TRI(450, 462, 458);
	  COL_TRI(821, 437, 438);
	  COL_TRI(821, 820, 437);
	  COL_TRI(829, 821, 454);
	  COL_TRI(829, 450, 821);
	  COL_TRI(454, 821, 438);
	  COL_TRI(454, 438, 444);
	  COL_TRI(837, 835, 464);
	  COL_TRI(837, 464, 463);
	  COL_TRI(477, 480, 486);
	  COL_TRI(841, 839, 468);
	  COL_TRI(96, 841, 468);
	  COL_TRI(467, 96, 468);
	  COL_TRI(484, 485, 482);
	  COL_TRI(484, 482, 483);
	  COL_TRI(477, 476, 480);
	  COL_TRI(475, 490, 844);
	  COL_TRI(489, 503, 508);
	  COL_TRI(487, 508, 503);
	  COL_TRI(861, 503, 497);
	  COL_TRI(861, 487, 503);
	  COL_TRI(863, 500, 864);
	  COL_TRI(863, 864, 498);
	  COL_TRI(509, 511, 505);
	  COL_TRI(475, 844, 471);
	  COL_TRI(859, 491, 492);
	  COL_TRI(859, 857, 491);
	  COL_TRI(870, 873, 512);
	  COL_TRI(870, 872, 873);
	  COL_TRI(505, 507, 509);
	  COL_TRI(507, 489, 508);
	  COL_TRI(507, 508, 509);
	  COL_TRI(511, 516, 504);
	  COL_TRI(511, 504, 505);
	  COL_TRI(516, 870, 504);
	  COL_TRI(870, 512, 504);
	  COL_TRI(520, 875, 522);
	  COL_TRI(520, 522, 876);
	  COL_TRI(526, 647, 226);
	  COL_TRI(526, 226, 878);
	  COL_TRI(520, 575, 920);
	  COL_TRI(520, 876, 575);
	  COL_TRI(922, 520, 920);
	  COL_TRI(921, 919, 575);
	  COL_TRI(921, 575, 876);
	  COL_TRI(922, 920, 580);
	  COL_TRI(921, 922, 580);
	  COL_TRI(921, 580, 919);
	  COL_TRI(899, 553, 898);
	  COL_TRI(884, 535, 885);
	  COL_TRI(884, 885, 536);
	  COL_TRI(887, 888, 538);
	  COL_TRI(887, 540, 888);
	  COL_TRI(896, 548, 895);
	  COL_TRI(896, 895, 549);
	  COL_TRI(569, 570, 914);
	  COL_TRI(899, 898, 552);
	  COL_TRI(562, 904, 906);
	  COL_TRI(562, 906, 564);
	  COL_TRI(565, 911, 910);
	  COL_TRI(565, 910, 567);
	  COL_TRI(572, 569, 914);
	  COL_TRI(29, 15, 17);
	  COL_TRI(572, 914, 587);
	  COL_TRI(916, 572, 587);
	  COL_TRI(30, 9, 8);
	  COL_TRI(19, 21, 31);
	  COL_TRI(979, 980, 485);
	  COL_TRI(979, 485, 925);
	  COL_TRI(916, 930, 927);
	  COL_TRI(916, 587, 930);
	  COL_TRI(927, 930, 932);
	  COL_TRI(927, 932, 928);
	  COL_TRI(593, 594, 947);
	  COL_TRI(594, 941, 947);
	  COL_TRI(947, 941, 946);
	  COL_TRI(941, 945, 946);
	  COL_TRI(937, 593, 947);
	  COL_TRI(946, 945, 597);
	  COL_TRI(946, 597, 948);
	  COL_TRI(937, 947, 604);
	  COL_TRI(955, 954, 605);
	  COL_TRI(609, 955, 605);
	  COL_TRI(948, 944, 603);
	  COL_TRI(605, 954, 604);
	  COL_TRI(954, 612, 604);
	  COL_TRI(604, 612, 607);
	  COL_TRI(604, 607, 937);
	  COL_TRI(929, 955, 609);
	  COL_TRI(928, 613, 929);
	  COL_TRI(929, 613, 955);
	  COL_TRI(928, 932, 613);
	  COL_TRI(589, 591, 936);
	  COL_TRI(948, 597, 944);
	  COL_TRI(944, 943, 936);
	  COL_TRI(944, 936, 603);
	  COL_TRI(943, 588, 936);
	  COL_TRI(943, 942, 588);
	  COL_TRI(589, 936, 588);
	  COL_TRI(171, 99, 841);
	  COL_TRI(969, 966, 645);
	  COL_TRI(969, 643, 966);
	  COL_TRI(467, 172, 96);
	  COL_TRI(99, 172, 467);
	  COL_TRI(99, 467, 841);
	  COL_TRI(96, 171, 841);
	  COL_TRI_INIT(SURFACE_HORIZONTAL_WIND, 38);
	  COL_TRI_SPECIAL(0, 1, 2, 0x100);
	  COL_TRI_SPECIAL(3, 2, 1, 0x100);
	  COL_TRI_SPECIAL(4, 2, 3, 0x100);
	  COL_TRI_SPECIAL(2, 4, 5, 0x100);
	  COL_TRI_SPECIAL(5, 4, 6, 0x100);
	  COL_TRI_SPECIAL(4, 7, 6, 0x100);
	  COL_TRI_SPECIAL(5, 8, 9, 0x100);
	  COL_TRI_SPECIAL(6, 8, 5, 0x100);
	  COL_TRI_SPECIAL(10, 11, 5, 0x100);
	  COL_TRI_SPECIAL(0, 12, 1, 0x100);
	  COL_TRI_SPECIAL(10, 18, 15, 0x100);
	  COL_TRI_SPECIAL(13, 0, 28, 0x100);
	  COL_TRI_SPECIAL(13, 12, 0, 0x100);
	  COL_TRI_SPECIAL(14, 16, 29, 0x100);
	  COL_TRI_SPECIAL(15, 29, 16, 0x100);
	  COL_TRI_SPECIAL(15, 16, 10, 0x100);
	  COL_TRI_SPECIAL(16, 14, 28, 0x100);
	  COL_TRI_SPECIAL(14, 13, 28, 0x100);
	  COL_TRI_SPECIAL(17, 12, 13, 0x100);
	  COL_TRI_SPECIAL(17, 7, 12, 0x100);
	  COL_TRI_SPECIAL(17, 15, 18, 0x100);
	  COL_TRI_SPECIAL(18, 7, 17, 0x100);
	  COL_TRI_SPECIAL(18, 6, 7, 0x100);
	  COL_TRI_SPECIAL(24, 23, 34, 0x100);
	  COL_TRI_SPECIAL(10, 19, 18, 0x100);
	  COL_TRI_SPECIAL(10, 20, 11, 0x100);
	  COL_TRI_SPECIAL(21, 19, 10, 0x100);
	  COL_TRI_SPECIAL(21, 9, 30, 0x100);
	  COL_TRI_SPECIAL(21, 30, 31, 0x100);
	  COL_TRI_SPECIAL(22, 30, 32, 0x100);
	  COL_TRI_SPECIAL(22, 31, 30, 0x100);
	  COL_TRI_SPECIAL(23, 33, 34, 0x100);
	  COL_TRI_SPECIAL(25, 35, 36, 0x100);
	  COL_TRI_SPECIAL(25, 37, 35, 0x100);
	  COL_TRI_SPECIAL(26, 38, 39, 0x100);
	  COL_TRI_SPECIAL(26, 39, 40, 0x100);
	  COL_TRI_SPECIAL(27, 41, 42, 0x100);
	  COL_TRI_SPECIAL(27, 43, 41, 0x100);
	  COL_TRI_INIT(SURFACE_NO_CAM_COLLISION, 213);
	  COL_TRI(55, 54, 56);
	  COL_TRI(44, 45, 46);
	  COL_TRI(44, 46, 47);
	  COL_TRI(48, 45, 44);
	  COL_TRI(48, 49, 45);
	  COL_TRI(47, 46, 50);
	  COL_TRI(47, 50, 51);
	  COL_TRI(51, 50, 52);
	  COL_TRI(51, 52, 53);
	  COL_TRI(53, 52, 54);
	  COL_TRI(53, 54, 55);
	  COL_TRI(59, 140, 138);
	  COL_TRI(55, 56, 57);
	  COL_TRI(57, 56, 137);
	  COL_TRI(57, 137, 58);
	  COL_TRI(58, 137, 49);
	  COL_TRI(58, 49, 48);
	  COL_TRI(59, 138, 60);
	  COL_TRI(60, 139, 61);
	  COL_TRI(60, 138, 139);
	  COL_TRI(61, 139, 141);
	  COL_TRI(61, 141, 62);
	  COL_TRI(62, 141, 140);
	  COL_TRI(62, 140, 59);
	  COL_TRI(63, 64, 66);
	  COL_TRI(64, 142, 143);
	  COL_TRI(64, 143, 66);
	  COL_TRI(65, 142, 64);
	  COL_TRI(63, 65, 64);
	  COL_TRI(65, 144, 142);
	  COL_TRI(70, 68, 69);
	  COL_TRI(66, 143, 145);
	  COL_TRI(66, 145, 67);
	  COL_TRI(63, 66, 146);
	  COL_TRI(66, 67, 146);
	  COL_TRI(67, 145, 144);
	  COL_TRI(67, 144, 65);
	  COL_TRI(63, 67, 65);
	  COL_TRI(63, 146, 67);
	  COL_TRI(68, 147, 69);
	  COL_TRI(69, 147, 148);
	  COL_TRI(69, 148, 71);
	  COL_TRI(70, 69, 71);
	  COL_TRI(73, 153, 74);
	  COL_TRI(68, 149, 147);
	  COL_TRI(71, 148, 150);
	  COL_TRI(71, 150, 72);
	  COL_TRI(71, 72, 151);
	  COL_TRI(70, 71, 151);
	  COL_TRI(72, 150, 149);
	  COL_TRI(72, 149, 68);
	  COL_TRI(72, 70, 151);
	  COL_TRI(72, 68, 70);
	  COL_TRI(73, 74, 152);
	  COL_TRI(78, 156, 157);
	  COL_TRI(74, 153, 80);
	  COL_TRI(75, 152, 74);
	  COL_TRI(76, 154, 155);
	  COL_TRI(76, 155, 79);
	  COL_TRI(77, 155, 154);
	  COL_TRI(77, 154, 78);
	  COL_TRI(81, 82, 159);
	  COL_TRI(79, 157, 156);
	  COL_TRI(79, 156, 76);
	  COL_TRI(78, 157, 77);
	  COL_TRI(80, 158, 81);
	  COL_TRI(80, 81, 159);
	  COL_TRI(81, 160, 82);
	  COL_TRI(86, 163, 87);
	  COL_TRI(82, 75, 159);
	  COL_TRI(83, 161, 85);
	  COL_TRI(84, 83, 162);
	  COL_TRI(83, 84, 161);
	  COL_TRI(83, 163, 89);
	  COL_TRI(85, 163, 83);
	  COL_TRI(83, 89, 162);
	  COL_TRI(85, 87, 163);
	  COL_TRI(84, 162, 164);
	  COL_TRI(87, 91, 165);
	  COL_TRI(87, 165, 89);
	  COL_TRI(87, 89, 86);
	  COL_TRI(88, 165, 91);
	  COL_TRI(88, 91, 166);
	  COL_TRI(89, 165, 88);
	  COL_TRI(89, 88, 167);
	  COL_TRI(90, 88, 85);
	  COL_TRI(88, 166, 85);
	  COL_TRI(90, 85, 161);
	  COL_TRI(88, 90, 164);
	  COL_TRI(88, 164, 162);
	  COL_TRI(88, 162, 167);
	  COL_TRI(91, 87, 166);
	  COL_TRI(85, 166, 87);
	  COL_TRI(92, 93, 85);
	  COL_TRI(93, 92, 168);
	  COL_TRI(92, 85, 169);
	  COL_TRI(93, 168, 166);
	  COL_TRI(88, 94, 85);
	  COL_TRI(94, 169, 85);
	  COL_TRI(94, 95, 169);
	  COL_TRI(95, 166, 168);
	  COL_TRI(95, 94, 166);
	  COL_TRI(94, 88, 166);
	  COL_TRI(100, 102, 103);
	  COL_TRI(96, 170, 98);
	  COL_TRI(97, 170, 96);
	  COL_TRI(96, 98, 171);
	  COL_TRI(97, 96, 172);
	  COL_TRI(98, 99, 171);
	  COL_TRI(98, 173, 99);
	  COL_TRI(99, 97, 172);
	  COL_TRI(99, 173, 97);
	  COL_TRI(100, 103, 101);
	  COL_TRI(101, 174, 100);
	  COL_TRI(100, 174, 175);
	  COL_TRI(102, 176, 103);
	  COL_TRI(102, 175, 176);
	  COL_TRI(100, 175, 102);
	  COL_TRI(103, 176, 177);
	  COL_TRI(103, 177, 101);
	  COL_TRI(101, 177, 174);
	  COL_TRI(101, 104, 178);
	  COL_TRI(104, 179, 180);
	  COL_TRI(104, 180, 178);
	  COL_TRI(105, 179, 104);
	  COL_TRI(105, 104, 101);
	  COL_TRI(109, 182, 110);
	  COL_TRI(106, 180, 179);
	  COL_TRI(106, 179, 105);
	  COL_TRI(107, 180, 106);
	  COL_TRI(107, 178, 180);
	  COL_TRI(101, 178, 107);
	  COL_TRI(101, 107, 108);
	  COL_TRI(108, 107, 106);
	  COL_TRI(109, 181, 182);
	  COL_TRI(110, 182, 183);
	  COL_TRI(110, 183, 184);
	  COL_TRI(111, 183, 185);
	  COL_TRI(112, 113, 186);
	  COL_TRI(113, 187, 116);
	  COL_TRI(114, 116, 187);
	  COL_TRI(115, 189, 112);
	  COL_TRI(115, 112, 186);
	  COL_TRI(116, 188, 117);
	  COL_TRI(114, 188, 116);
	  COL_TRI(117, 115, 186);
	  COL_TRI(117, 190, 115);
	  COL_TRI(118, 191, 192);
	  COL_TRI(118, 192, 121);
	  COL_TRI(123, 122, 3);
	  COL_TRI(119, 192, 191);
	  COL_TRI(119, 191, 120);
	  COL_TRI(120, 193, 119);
	  COL_TRI(120, 194, 193);
	  COL_TRI(121, 193, 194);
	  COL_TRI(121, 194, 118);
	  COL_TRI(3, 122, 7);
	  COL_TRI(122, 124, 7);
	  COL_TRI(6, 197, 195);
	  COL_TRI(7, 124, 12);
	  COL_TRI(124, 125, 12);
	  COL_TRI(1, 123, 3);
	  COL_TRI(12, 125, 1);
	  COL_TRI(125, 123, 1);
	  COL_TRI(6, 195, 8);
	  COL_TRI(8, 196, 30);
	  COL_TRI(8, 195, 196);
	  COL_TRI(14, 201, 13);
	  COL_TRI(30, 196, 198);
	  COL_TRI(30, 198, 32);
	  COL_TRI(32, 197, 6);
	  COL_TRI(32, 198, 197);
	  COL_TRI(29, 199, 14);
	  COL_TRI(29, 200, 199);
	  COL_TRI(17, 200, 29);
	  COL_TRI(14, 199, 201);
	  COL_TRI(22, 206, 31);
	  COL_TRI(17, 202, 200);
	  COL_TRI(13, 201, 202);
	  COL_TRI(13, 202, 17);
	  COL_TRI(19, 203, 18);
	  COL_TRI(19, 204, 203);
	  COL_TRI(31, 204, 19);
	  COL_TRI(18, 203, 205);
	  COL_TRI(18, 205, 22);
	  COL_TRI(31, 206, 204);
	  COL_TRI(22, 205, 206);
	  COL_TRI(131, 211, 209);
	  COL_TRI(126, 207, 208);
	  COL_TRI(126, 208, 209);
	  COL_TRI(127, 126, 128);
	  COL_TRI(127, 207, 126);
	  COL_TRI(128, 126, 210);
	  COL_TRI(126, 209, 211);
	  COL_TRI(126, 211, 212);
	  COL_TRI(126, 212, 213);
	  COL_TRI(126, 213, 210);
	  COL_TRI(129, 207, 127);
	  COL_TRI(129, 208, 207);
	  COL_TRI(130, 208, 129);
	  COL_TRI(130, 209, 208);
	  COL_TRI(131, 209, 130);
	  COL_TRI(136, 215, 135);
	  COL_TRI(132, 211, 131);
	  COL_TRI(132, 212, 211);
	  COL_TRI(133, 213, 212);
	  COL_TRI(133, 212, 132);
	  COL_TRI(134, 213, 133);
	  COL_TRI(134, 210, 213);
	  COL_TRI(128, 210, 134);
	  COL_TRI(135, 214, 136);
	  COL_TRI(135, 215, 216);
	  COL_TRI(135, 216, 214);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(22);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start,   /*pos*/ -7039, -4812,     4, /*yaw*/ 64); // unused, probably an early way to set initial position
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03, /*pos*/ -4505, -5119,     0, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_04, /*pos*/ -2291, -2073,  -762, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_05, /*pos*/  3891, -3276,  -705, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_06, /*pos*/  1753, -1986,  -531, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_07, /*pos*/ -5414, -1330,  -787, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_07, /*pos*/ -3182,  2059,  -904, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_08, /*pos*/ -3182,  1854,  -904, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_08, /*pos*/   759,  5628, -1008, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_09, /*pos*/ -4902,  -895, -1171, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0A, /*pos*/ -3882,  -357, -1241, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0B, /*pos*/ -1199,  -387, -1308, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0C, /*pos*/  5584,  2735, -1851, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0D, /*pos*/ -5248,  3800,  -895, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0D, /*pos*/ -1356,  3800,  -895, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0E, /*pos*/ -6459,  3800,  -904, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0F, /*pos*/  -930,  2884,  -904, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_10, /*pos*/  2486,  -438,  -899, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_11, /*pos*/   563,  2249,  -904, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_12, /*pos*/ -6459,  2039,  -904, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_13, /*pos*/  1143,  4670,  -494, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_14, /*pos*/   349,  6268, -4054, /*yaw*/  0);
	  COL_END();
	}

	function bits_seg7_collision_0701A9A0() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(307, 205, 287);
	  COL_VERTEX(-511, 0, 287);
	  COL_VERTEX(307, 0, 287);
	  COL_VERTEX(-511, 205, -286);
	  COL_VERTEX(-511, 205, 287);
	  COL_VERTEX(307, 205, -286);
	  COL_VERTEX(-511, 0, -286);
	  COL_VERTEX(307, 0, -286);
	  COL_TRI_INIT(SURFACE_DEFAULT, 8);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 4);
	  COL_TRI(0, 5, 3);
	  COL_TRI(0, 4, 1);
	  COL_TRI(4, 6, 1);
	  COL_TRI(4, 3, 6);
	  COL_TRI(7, 6, 3);
	  COL_TRI(7, 3, 5);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bits_seg7_collision_0701AA0C() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(-460, 205, 205);
	  COL_VERTEX(512, 205, 205);
	  COL_VERTEX(512, 205, -204);
	  COL_VERTEX(512, 0, -204);
	  COL_VERTEX(512, 0, 205);
	  COL_VERTEX(-460, 0, -204);
	  COL_VERTEX(-460, 205, -204);
	  COL_VERTEX(-460, 0, 205);
	  COL_TRI_INIT(SURFACE_DEFAULT, 10);
	  COL_TRI(0, 1, 2);
	  COL_TRI(1, 3, 2);
	  COL_TRI(1, 4, 3);
	  COL_TRI(0, 4, 1);
	  COL_TRI(4, 5, 3);
	  COL_TRI(2, 3, 5);
	  COL_TRI(0, 2, 6);
	  COL_TRI(2, 5, 6);
	  COL_TRI(4, 7, 5);
	  COL_TRI(0, 7, 4);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bits_seg7_collision_0701AA84() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x18);
	  COL_VERTEX(-385, -306, 179);
	  COL_VERTEX(-180, -306, 384);
	  COL_VERTEX(-349, 102, 768);
	  COL_VERTEX(-759, 102, 358);
	  COL_VERTEX(-180, -306, -383);
	  COL_VERTEX(177, -306, -383);
	  COL_VERTEX(382, -306, -178);
	  COL_VERTEX(382, -306, 179);
	  COL_VERTEX(177, -306, 384);
	  COL_VERTEX(-385, -306, -178);
	  COL_VERTEX(-759, 102, -357);
	  COL_VERTEX(367, 307, 768);
	  COL_VERTEX(367, 102, 768);
	  COL_VERTEX(-349, 307, 768);
	  COL_VERTEX(-759, 307, -357);
	  COL_VERTEX(-759, 307, 358);
	  COL_VERTEX(776, 307, 358);
	  COL_VERTEX(776, 102, 358);
	  COL_VERTEX(776, 102, -357);
	  COL_VERTEX(367, 102, -767);
	  COL_VERTEX(-349, 102, -767);
	  COL_VERTEX(-349, 307, -767);
	  COL_VERTEX(367, 307, -767);
	  COL_VERTEX(776, 307, -357);
	  COL_TRI_INIT(SURFACE_DEFAULT, 44);
	  COL_TRI(0, 1, 2);
	  COL_TRI(3, 0, 2);
	  COL_TRI(0, 4, 5);
	  COL_TRI(0, 5, 6);
	  COL_TRI(0, 6, 7);
	  COL_TRI(0, 7, 8);
	  COL_TRI(0, 8, 1);
	  COL_TRI(0, 9, 4);
	  COL_TRI(10, 9, 0);
	  COL_TRI(10, 0, 3);
	  COL_TRI(2, 1, 8);
	  COL_TRI(11, 2, 12);
	  COL_TRI(11, 13, 2);
	  COL_TRI(3, 2, 13);
	  COL_TRI(2, 8, 12);
	  COL_TRI(12, 8, 7);
	  COL_TRI(18, 6, 19);
	  COL_TRI(3, 14, 10);
	  COL_TRI(3, 15, 14);
	  COL_TRI(3, 13, 15);
	  COL_TRI(16, 12, 17);
	  COL_TRI(16, 11, 12);
	  COL_TRI(12, 7, 17);
	  COL_TRI(17, 7, 6);
	  COL_TRI(18, 16, 17);
	  COL_TRI(17, 6, 18);
	  COL_TRI(6, 5, 19);
	  COL_TRI(21, 23, 22);
	  COL_TRI(18, 22, 23);
	  COL_TRI(18, 19, 22);
	  COL_TRI(18, 23, 16);
	  COL_TRI(19, 5, 4);
	  COL_TRI(19, 20, 21);
	  COL_TRI(19, 21, 22);
	  COL_TRI(19, 4, 20);
	  COL_TRI(20, 4, 9);
	  COL_TRI(20, 9, 10);
	  COL_TRI(21, 20, 10);
	  COL_TRI(14, 21, 10);
	  COL_TRI(21, 16, 23);
	  COL_TRI(21, 11, 16);
	  COL_TRI(21, 13, 11);
	  COL_TRI(21, 15, 13);
	  COL_TRI(21, 14, 15);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bits_seg7_collision_0701AC28() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(-204, 0, -306);
	  COL_VERTEX(-204, 0, 307);
	  COL_VERTEX(-204, 102, 307);
	  COL_VERTEX(205, 0, 307);
	  COL_VERTEX(205, 102, 307);
	  COL_VERTEX(205, 0, -306);
	  COL_VERTEX(205, 102, -306);
	  COL_VERTEX(-204, 102, -306);
	  COL_TRI_INIT(SURFACE_DEFAULT, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(1, 3, 4);
	  COL_TRI(1, 4, 2);
	  COL_TRI(5, 3, 1);
	  COL_TRI(5, 1, 0);
	  COL_TRI(6, 4, 3);
	  COL_TRI(6, 3, 5);
	  COL_TRI(7, 2, 4);
	  COL_TRI(7, 4, 6);
	  COL_TRI(0, 2, 7);
	  COL_TRI(5, 0, 7);
	  COL_TRI(5, 7, 6);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bits_seg7_collision_0701ACAC() {
	  COL_INIT();
	  COL_VERTEX_INIT(0xA);
	  COL_VERTEX(-388, 389, 0);
	  COL_VERTEX(-101, 287, 0);
	  COL_VERTEX(0, 389, 51);
	  COL_VERTEX(-101, 492, 0);
	  COL_VERTEX(0, 389, -50);
	  COL_VERTEX(0, 778, 0);
	  COL_VERTEX(0, 0, 0);
	  COL_VERTEX(102, 287, 0);
	  COL_VERTEX(102, 492, 0);
	  COL_VERTEX(389, 389, 0);
	  COL_TRI_INIT(SURFACE_DEFAULT, 16);
	  COL_TRI(0, 1, 2);
	  COL_TRI(2, 3, 0);
	  COL_TRI(0, 3, 4);
	  COL_TRI(4, 1, 0);
	  COL_TRI(4, 3, 5);
	  COL_TRI(6, 1, 4);
	  COL_TRI(4, 7, 6);
	  COL_TRI(5, 8, 4);
	  COL_TRI(4, 8, 9);
	  COL_TRI(9, 7, 4);
	  COL_TRI(2, 1, 6);
	  COL_TRI(6, 7, 2);
	  COL_TRI(2, 7, 9);
	  COL_TRI(5, 3, 2);
	  COL_TRI(9, 8, 2);
	  COL_TRI(2, 8, 5);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bits_seg7_collision_0701AD54() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(-460, 0, -306);
	  COL_VERTEX(461, 0, 307);
	  COL_VERTEX(-460, 0, 307);
	  COL_VERTEX(461, 0, -306);
	  COL_VERTEX(-460, 102, -306);
	  COL_VERTEX(461, 102, 307);
	  COL_VERTEX(461, 102, -306);
	  COL_VERTEX(-460, 102, 307);
	  COL_TRI_INIT(SURFACE_DEFAULT, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(4, 3, 0);
	  COL_TRI(2, 4, 0);
	  COL_TRI(2, 1, 5);
	  COL_TRI(6, 5, 1);
	  COL_TRI(6, 1, 3);
	  COL_TRI(2, 5, 7);
	  COL_TRI(2, 7, 4);
	  COL_TRI(4, 6, 3);
	  COL_TRI(6, 4, 7);
	  COL_TRI(6, 7, 5);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bits_seg7_collision_0701ADD8() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(307, 102, 819);
	  COL_VERTEX(307, 0, -767);
	  COL_VERTEX(307, 102, -818);
	  COL_VERTEX(-306, 102, -818);
	  COL_VERTEX(-306, 0, -767);
	  COL_VERTEX(-306, 0, 768);
	  COL_VERTEX(-306, 102, 819);
	  COL_VERTEX(307, 0, 768);
	  COL_TRI_INIT(SURFACE_DEFAULT, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(2, 4, 3);
	  COL_TRI(2, 1, 4);
	  COL_TRI(5, 4, 1);
	  COL_TRI(3, 4, 5);
	  COL_TRI(0, 3, 6);
	  COL_TRI(3, 5, 6);
	  COL_TRI(0, 7, 1);
	  COL_TRI(5, 1, 7);
	  COL_TRI(6, 5, 7);
	  COL_TRI(6, 7, 0);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bits_seg7_collision_0701AE5C() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x24);
	  COL_VERTEX(614, 51, 216);
	  COL_VERTEX(819, 51, 216);
	  COL_VERTEX(307, 51, 779);
	  COL_VERTEX(614, 205, 216);
	  COL_VERTEX(819, 205, 216);
	  COL_VERTEX(973, 205, -193);
	  COL_VERTEX(973, 51, -193);
	  COL_VERTEX(1382, 51, -193);
	  COL_VERTEX(1382, 51, 216);
	  COL_VERTEX(1024, 51, 779);
	  COL_VERTEX(1024, 205, 779);
	  COL_VERTEX(1382, 205, -193);
	  COL_VERTEX(-1381, 205, -193);
	  COL_VERTEX(-972, 51, -193);
	  COL_VERTEX(-1381, 51, 216);
	  COL_VERTEX(-818, 205, 216);
	  COL_VERTEX(-972, 205, -193);
	  COL_VERTEX(-613, 205, 216);
	  COL_VERTEX(-1381, 205, 216);
	  COL_VERTEX(-1023, 205, 779);
	  COL_VERTEX(-101, 205, 164);
	  COL_VERTEX(-306, 205, 779);
	  COL_VERTEX(307, 205, 779);
	  COL_VERTEX(102, 205, 164);
	  COL_VERTEX(1382, 205, 216);
	  COL_VERTEX(307, 205, -551);
	  COL_VERTEX(307, 51, -551);
	  COL_VERTEX(-306, 205, -551);
	  COL_VERTEX(-613, 51, 216);
	  COL_VERTEX(-1023, 51, 779);
	  COL_VERTEX(102, 51, 164);
	  COL_VERTEX(-101, 51, 164);
	  COL_VERTEX(-1381, 51, -193);
	  COL_VERTEX(-818, 51, 216);
	  COL_VERTEX(-306, 51, 779);
	  COL_VERTEX(-306, 51, -551);
	  COL_TRI_INIT(SURFACE_DEFAULT, 67);
	  COL_TRI(0, 1, 2);
	  COL_TRI(3, 4, 1);
	  COL_TRI(3, 1, 0);
	  COL_TRI(1, 4, 5);
	  COL_TRI(1, 5, 6);
	  COL_TRI(1, 6, 7);
	  COL_TRI(1, 7, 8);
	  COL_TRI(1, 8, 9);
	  COL_TRI(1, 9, 2);
	  COL_TRI(10, 5, 4);
	  COL_TRI(10, 4, 3);
	  COL_TRI(10, 11, 5);
	  COL_TRI(5, 7, 6);
	  COL_TRI(12, 13, 32);
	  COL_TRI(12, 16, 13);
	  COL_TRI(13, 16, 15);
	  COL_TRI(13, 15, 33);
	  COL_TRI(14, 13, 33);
	  COL_TRI(14, 32, 13);
	  COL_TRI(15, 16, 19);
	  COL_TRI(16, 18, 19);
	  COL_TRI(16, 12, 18);
	  COL_TRI(12, 32, 14);
	  COL_TRI(12, 14, 18);
	  COL_TRI(15, 17, 28);
	  COL_TRI(15, 28, 33);
	  COL_TRI(17, 15, 19);
	  COL_TRI(18, 14, 29);
	  COL_TRI(19, 18, 29);
	  COL_TRI(19, 21, 20);
	  COL_TRI(17, 19, 20);
	  COL_TRI(20, 21, 34);
	  COL_TRI(21, 19, 29);
	  COL_TRI(21, 29, 34);
	  COL_TRI(20, 34, 31);
	  COL_TRI(20, 23, 27);
	  COL_TRI(20, 27, 17);
	  COL_TRI(22, 23, 30);
	  COL_TRI(23, 20, 31);
	  COL_TRI(23, 31, 30);
	  COL_TRI(23, 10, 3);
	  COL_TRI(23, 3, 27);
	  COL_TRI(23, 22, 10);
	  COL_TRI(22, 30, 2);
	  COL_TRI(7, 24, 8);
	  COL_TRI(24, 10, 9);
	  COL_TRI(10, 22, 2);
	  COL_TRI(10, 2, 9);
	  COL_TRI(10, 24, 11);
	  COL_TRI(24, 9, 8);
	  COL_TRI(7, 11, 24);
	  COL_TRI(3, 25, 27);
	  COL_TRI(3, 26, 25);
	  COL_TRI(3, 0, 26);
	  COL_TRI(27, 25, 26);
	  COL_TRI(27, 26, 35);
	  COL_TRI(27, 35, 28);
	  COL_TRI(27, 28, 17);
	  COL_TRI(28, 35, 26);
	  COL_TRI(29, 28, 26);
	  COL_TRI(29, 14, 28);
	  COL_TRI(0, 2, 30);
	  COL_TRI(26, 0, 30);
	  COL_TRI(31, 29, 26);
	  COL_TRI(26, 30, 31);
	  COL_TRI(31, 34, 29);
	  COL_TRI(5, 11, 7);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bits_seg7_collision_0701B0D4() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x1C);
	  COL_VERTEX(-409, 512, 307);
	  COL_VERTEX(-716, 512, 307);
	  COL_VERTEX(-716, 256, 307);
	  COL_VERTEX(-716, 512, -306);
	  COL_VERTEX(-716, 256, -306);
	  COL_VERTEX(-409, 512, -306);
	  COL_VERTEX(-409, 768, -306);
	  COL_VERTEX(-101, 768, -306);
	  COL_VERTEX(-409, 768, 307);
	  COL_VERTEX(-101, 768, 307);
	  COL_VERTEX(-1023, 256, 307);
	  COL_VERTEX(-1023, 0, 307);
	  COL_VERTEX(512, 1536, 307);
	  COL_VERTEX(819, 1536, 307);
	  COL_VERTEX(512, 1280, -306);
	  COL_VERTEX(205, 1280, 307);
	  COL_VERTEX(205, 1024, -306);
	  COL_VERTEX(512, 1280, 307);
	  COL_VERTEX(-101, 1024, 307);
	  COL_VERTEX(205, 1024, 307);
	  COL_VERTEX(-1023, 0, -306);
	  COL_VERTEX(-1330, 0, -306);
	  COL_VERTEX(-1330, 0, 307);
	  COL_VERTEX(512, 1536, -306);
	  COL_VERTEX(819, 1536, -306);
	  COL_VERTEX(-1023, 256, -306);
	  COL_VERTEX(205, 1280, -306);
	  COL_VERTEX(-101, 1024, -306);
	  COL_TRI_INIT(SURFACE_DEFAULT, 38);
	  COL_TRI(0, 1, 2);
	  COL_TRI(2, 1, 3);
	  COL_TRI(2, 3, 4);
	  COL_TRI(5, 3, 1);
	  COL_TRI(5, 1, 0);
	  COL_TRI(5, 6, 7);
	  COL_TRI(8, 6, 5);
	  COL_TRI(8, 5, 0);
	  COL_TRI(4, 3, 5);
	  COL_TRI(8, 0, 9);
	  COL_TRI(9, 7, 6);
	  COL_TRI(9, 6, 8);
	  COL_TRI(10, 20, 11);
	  COL_TRI(10, 11, 2);
	  COL_TRI(11, 20, 21);
	  COL_TRI(11, 21, 22);
	  COL_TRI(12, 17, 13);
	  COL_TRI(12, 23, 14);
	  COL_TRI(12, 14, 17);
	  COL_TRI(13, 23, 12);
	  COL_TRI(13, 24, 23);
	  COL_TRI(14, 23, 24);
	  COL_TRI(15, 26, 16);
	  COL_TRI(15, 16, 19);
	  COL_TRI(16, 26, 14);
	  COL_TRI(17, 14, 26);
	  COL_TRI(17, 26, 15);
	  COL_TRI(15, 19, 17);
	  COL_TRI(18, 9, 19);
	  COL_TRI(19, 16, 27);
	  COL_TRI(19, 27, 18);
	  COL_TRI(18, 7, 9);
	  COL_TRI(7, 27, 16);
	  COL_TRI(18, 27, 7);
	  COL_TRI(10, 25, 20);
	  COL_TRI(20, 25, 4);
	  COL_TRI(2, 25, 10);
	  COL_TRI(2, 4, 25);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bits_seg7_collision_0701B26C() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x1C);
	  COL_VERTEX(-409, 512, 307);
	  COL_VERTEX(-716, 471, 307);
	  COL_VERTEX(-716, 256, 307);
	  COL_VERTEX(-716, 471, -306);
	  COL_VERTEX(-716, 256, -306);
	  COL_VERTEX(-409, 512, -306);
	  COL_VERTEX(-409, 727, -306);
	  COL_VERTEX(-101, 768, -306);
	  COL_VERTEX(-409, 727, 307);
	  COL_VERTEX(-101, 768, 307);
	  COL_VERTEX(-1023, 215, 307);
	  COL_VERTEX(-1023, 0, 307);
	  COL_VERTEX(512, 1495, 307);
	  COL_VERTEX(819, 1536, 307);
	  COL_VERTEX(512, 1280, -306);
	  COL_VERTEX(205, 1239, 307);
	  COL_VERTEX(205, 1024, -306);
	  COL_VERTEX(512, 1280, 307);
	  COL_VERTEX(-101, 983, 307);
	  COL_VERTEX(205, 1024, 307);
	  COL_VERTEX(-1023, 0, -306);
	  COL_VERTEX(-1330, 0, -306);
	  COL_VERTEX(-1330, 0, 307);
	  COL_VERTEX(512, 1495, -306);
	  COL_VERTEX(819, 1536, -306);
	  COL_VERTEX(-1023, 215, -306);
	  COL_VERTEX(205, 1239, -306);
	  COL_VERTEX(-101, 983, -306);
	  COL_TRI_INIT(SURFACE_DEFAULT, 38);
	  COL_TRI(0, 1, 2);
	  COL_TRI(2, 1, 3);
	  COL_TRI(2, 3, 4);
	  COL_TRI(5, 3, 1);
	  COL_TRI(5, 1, 0);
	  COL_TRI(5, 6, 7);
	  COL_TRI(8, 6, 5);
	  COL_TRI(8, 5, 0);
	  COL_TRI(4, 3, 5);
	  COL_TRI(8, 0, 9);
	  COL_TRI(9, 7, 6);
	  COL_TRI(9, 6, 8);
	  COL_TRI(10, 20, 11);
	  COL_TRI(10, 11, 2);
	  COL_TRI(11, 20, 21);
	  COL_TRI(11, 21, 22);
	  COL_TRI(12, 17, 13);
	  COL_TRI(12, 23, 14);
	  COL_TRI(12, 14, 17);
	  COL_TRI(13, 23, 12);
	  COL_TRI(13, 24, 23);
	  COL_TRI(14, 23, 24);
	  COL_TRI(15, 26, 16);
	  COL_TRI(15, 16, 19);
	  COL_TRI(16, 26, 14);
	  COL_TRI(17, 14, 26);
	  COL_TRI(17, 26, 15);
	  COL_TRI(15, 19, 17);
	  COL_TRI(18, 9, 19);
	  COL_TRI(19, 16, 27);
	  COL_TRI(19, 27, 18);
	  COL_TRI(18, 7, 9);
	  COL_TRI(7, 27, 16);
	  COL_TRI(18, 27, 7);
	  COL_TRI(10, 25, 20);
	  COL_TRI(20, 25, 4);
	  COL_TRI(2, 25, 10);
	  COL_TRI(2, 4, 25);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bits_seg7_collision_0701B404() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x1C);
	  COL_VERTEX(-409, 512, 307);
	  COL_VERTEX(-716, 410, 307);
	  COL_VERTEX(-716, 256, 307);
	  COL_VERTEX(-716, 410, -306);
	  COL_VERTEX(-716, 256, -306);
	  COL_VERTEX(-409, 512, -306);
	  COL_VERTEX(-409, 666, -306);
	  COL_VERTEX(-101, 768, -306);
	  COL_VERTEX(-409, 666, 307);
	  COL_VERTEX(-101, 768, 307);
	  COL_VERTEX(-1023, 154, 307);
	  COL_VERTEX(-1023, 0, 307);
	  COL_VERTEX(512, 1434, 307);
	  COL_VERTEX(819, 1536, 307);
	  COL_VERTEX(512, 1280, -306);
	  COL_VERTEX(205, 1178, 307);
	  COL_VERTEX(205, 1024, -306);
	  COL_VERTEX(512, 1280, 307);
	  COL_VERTEX(-101, 922, 307);
	  COL_VERTEX(205, 1024, 307);
	  COL_VERTEX(-1023, 0, -306);
	  COL_VERTEX(-1330, 0, -306);
	  COL_VERTEX(-1330, 0, 307);
	  COL_VERTEX(512, 1434, -306);
	  COL_VERTEX(819, 1536, -306);
	  COL_VERTEX(-1023, 154, -306);
	  COL_VERTEX(205, 1178, -306);
	  COL_VERTEX(-101, 922, -306);
	  COL_TRI_INIT(SURFACE_DEFAULT, 38);
	  COL_TRI(0, 1, 2);
	  COL_TRI(2, 1, 3);
	  COL_TRI(2, 3, 4);
	  COL_TRI(5, 3, 1);
	  COL_TRI(5, 1, 0);
	  COL_TRI(5, 6, 7);
	  COL_TRI(8, 6, 5);
	  COL_TRI(8, 5, 0);
	  COL_TRI(4, 3, 5);
	  COL_TRI(8, 0, 9);
	  COL_TRI(9, 7, 6);
	  COL_TRI(9, 6, 8);
	  COL_TRI(10, 20, 11);
	  COL_TRI(10, 11, 2);
	  COL_TRI(11, 20, 21);
	  COL_TRI(11, 21, 22);
	  COL_TRI(12, 17, 13);
	  COL_TRI(12, 23, 14);
	  COL_TRI(12, 14, 17);
	  COL_TRI(13, 23, 12);
	  COL_TRI(13, 24, 23);
	  COL_TRI(14, 23, 24);
	  COL_TRI(15, 26, 16);
	  COL_TRI(15, 16, 19);
	  COL_TRI(16, 26, 14);
	  COL_TRI(17, 14, 26);
	  COL_TRI(17, 26, 15);
	  COL_TRI(15, 19, 17);
	  COL_TRI(18, 9, 19);
	  COL_TRI(19, 16, 27);
	  COL_TRI(19, 27, 18);
	  COL_TRI(18, 7, 9);
	  COL_TRI(7, 27, 16);
	  COL_TRI(18, 27, 7);
	  COL_TRI(10, 25, 20);
	  COL_TRI(20, 25, 4);
	  COL_TRI(2, 25, 10);
	  COL_TRI(2, 4, 25);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bits_seg7_collision_0701B59C() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x1C);
	  COL_VERTEX(-409, 512, 307);
	  COL_VERTEX(-716, 338, 307);
	  COL_VERTEX(-716, 256, 307);
	  COL_VERTEX(-716, 338, -306);
	  COL_VERTEX(-716, 256, -306);
	  COL_VERTEX(-409, 512, -306);
	  COL_VERTEX(-409, 594, -306);
	  COL_VERTEX(-101, 768, -306);
	  COL_VERTEX(-409, 594, 307);
	  COL_VERTEX(-101, 768, 307);
	  COL_VERTEX(-1023, 82, 307);
	  COL_VERTEX(-1023, 0, 307);
	  COL_VERTEX(512, 1362, 307);
	  COL_VERTEX(819, 1536, 307);
	  COL_VERTEX(512, 1280, -306);
	  COL_VERTEX(205, 1106, 307);
	  COL_VERTEX(205, 1024, -306);
	  COL_VERTEX(512, 1280, 307);
	  COL_VERTEX(-101, 850, 307);
	  COL_VERTEX(205, 1024, 307);
	  COL_VERTEX(-1023, 0, -306);
	  COL_VERTEX(-1330, 0, -306);
	  COL_VERTEX(-1330, 0, 307);
	  COL_VERTEX(512, 1362, -306);
	  COL_VERTEX(819, 1536, -306);
	  COL_VERTEX(-1023, 82, -306);
	  COL_VERTEX(205, 1106, -306);
	  COL_VERTEX(-101, 850, -306);
	  COL_TRI_INIT(SURFACE_DEFAULT, 38);
	  COL_TRI(0, 1, 2);
	  COL_TRI(2, 1, 3);
	  COL_TRI(2, 3, 4);
	  COL_TRI(5, 3, 1);
	  COL_TRI(5, 1, 0);
	  COL_TRI(5, 6, 7);
	  COL_TRI(8, 6, 5);
	  COL_TRI(8, 5, 0);
	  COL_TRI(4, 3, 5);
	  COL_TRI(8, 0, 9);
	  COL_TRI(9, 7, 6);
	  COL_TRI(9, 6, 8);
	  COL_TRI(10, 20, 11);
	  COL_TRI(10, 11, 2);
	  COL_TRI(11, 20, 21);
	  COL_TRI(11, 21, 22);
	  COL_TRI(12, 17, 13);
	  COL_TRI(12, 23, 14);
	  COL_TRI(12, 14, 17);
	  COL_TRI(13, 23, 12);
	  COL_TRI(13, 24, 23);
	  COL_TRI(14, 23, 24);
	  COL_TRI(15, 26, 16);
	  COL_TRI(15, 16, 19);
	  COL_TRI(16, 26, 14);
	  COL_TRI(17, 14, 26);
	  COL_TRI(17, 26, 15);
	  COL_TRI(15, 19, 17);
	  COL_TRI(18, 9, 19);
	  COL_TRI(19, 16, 27);
	  COL_TRI(19, 27, 18);
	  COL_TRI(18, 7, 9);
	  COL_TRI(7, 27, 16);
	  COL_TRI(18, 27, 7);
	  COL_TRI(10, 25, 20);
	  COL_TRI(20, 25, 4);
	  COL_TRI(2, 25, 10);
	  COL_TRI(2, 4, 25);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bits_seg7_collision_0701B734() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x10);
	  COL_VERTEX(-409, 512, -306);
	  COL_VERTEX(-716, 256, -306);
	  COL_VERTEX(-716, 256, 307);
	  COL_VERTEX(-409, 512, 307);
	  COL_VERTEX(-1023, 0, 307);
	  COL_VERTEX(-1023, 0, -306);
	  COL_VERTEX(-1330, 0, -306);
	  COL_VERTEX(-1330, 0, 307);
	  COL_VERTEX(819, 1536, 307);
	  COL_VERTEX(819, 1536, -306);
	  COL_VERTEX(512, 1280, -306);
	  COL_VERTEX(512, 1280, 307);
	  COL_VERTEX(205, 1024, 307);
	  COL_VERTEX(-101, 768, 307);
	  COL_VERTEX(205, 1024, -306);
	  COL_VERTEX(-101, 768, -306);
	  COL_TRI_INIT(SURFACE_DEFAULT, 14);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(4, 5, 6);
	  COL_TRI(4, 6, 7);
	  COL_TRI(2, 1, 5);
	  COL_TRI(2, 5, 4);
	  COL_TRI(8, 9, 10);
	  COL_TRI(8, 10, 11);
	  COL_TRI(11, 14, 12);
	  COL_TRI(11, 10, 14);
	  COL_TRI(12, 14, 15);
	  COL_TRI(12, 15, 13);
	  COL_TRI(13, 15, 0);
	  COL_TRI(13, 0, 3);
	  COL_TRI_STOP();
	  COL_END();
	}

	var bits = [
	  bits_seg7_collision_level,
	  bits_seg7_collision_0701A9A0,
	  bits_seg7_collision_0701AA0C,
	  bits_seg7_collision_0701AA84,
	  bits_seg7_collision_0701AC28,
	  bits_seg7_collision_0701ACAC,
	  bits_seg7_collision_0701AD54,
	  bits_seg7_collision_0701ADD8,
	  bits_seg7_collision_0701AE5C,
	  bits_seg7_collision_0701B0D4,
	  bits_seg7_collision_0701B26C,
	  bits_seg7_collision_0701B404,
	  bits_seg7_collision_0701B59C,
	  bits_seg7_collision_0701B734
	];

	function bob_seg7_collision_level() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x23A);
	  COL_VERTEX(-3538, 944, -4176);
	  COL_VERTEX(-3460, 944, -4212);
	  COL_VERTEX(-3477, 941, -4251);
	  COL_VERTEX(-3556, 942, -4215);
	  COL_VERTEX(-3536, 825, -4169);
	  COL_VERTEX(-3538, 945, -4176);
	  COL_VERTEX(-3458, 824, -4204);
	  COL_VERTEX(-3554, 822, -4208);
	  COL_VERTEX(-3476, 821, -4243);
	  COL_VERTEX(-4454, 1138, -1962);
	  COL_VERTEX(-4453, 1018, -1962);
	  COL_VERTEX(-4389, 1018, -2019);
	  COL_VERTEX(-4390, 1138, -2020);
	  COL_VERTEX(-4482, 1138, -1994);
	  COL_VERTEX(-4418, 1138, -2052);
	  COL_VERTEX(-4269, 1144, -785);
	  COL_VERTEX(-4208, 1144, -846);
	  COL_VERTEX(-4238, 1144, -754);
	  COL_VERTEX(-4178, 1144, -815);
	  COL_VERTEX(6215, 993, -1513);
	  COL_VERTEX(6185, 993, -1544);
	  COL_VERTEX(6277, 993, -1573);
	  COL_VERTEX(6247, 993, -1604);
	  COL_VERTEX(-2303, 0, 896);
	  COL_VERTEX(-2175, 0, 1024);
	  COL_VERTEX(-2303, 358, 1152);
	  COL_VERTEX(-2175, 358, 1024);
	  COL_VERTEX(-2303, 358, 896);
	  COL_VERTEX(-2431, 0, 1024);
	  COL_VERTEX(-2431, 358, 1024);
	  COL_VERTEX(-2303, 0, 1152);
	  COL_VERTEX(2304, 888, 4438);
	  COL_VERTEX(2261, 888, 4438);
	  COL_VERTEX(2304, 888, 4352);
	  COL_VERTEX(2261, 888, 4352);
	  COL_VERTEX(-4482, 1018, -1994);
	  COL_VERTEX(-4418, 1018, -2051);
	  COL_VERTEX(-4269, 1024, -785);
	  COL_VERTEX(-4238, 1024, -754);
	  COL_VERTEX(-4208, 1024, -846);
	  COL_VERTEX(-4178, 1024, -815);
	  COL_VERTEX(6215, 873, -1513);
	  COL_VERTEX(6277, 873, -1573);
	  COL_VERTEX(6247, 873, -1604);
	  COL_VERTEX(6185, 873, -1544);
	  COL_VERTEX(-2303, 717, 1024);
	  COL_VERTEX(2304, 768, 4438);
	  COL_VERTEX(2304, 768, 4352);
	  COL_VERTEX(2261, 768, 4352);
	  COL_VERTEX(2261, 768, 4438);
	  COL_VERTEX(-921, 205, 5376);
	  COL_VERTEX(768, 717, 5376);
	  COL_VERTEX(-921, 205, 5888);
	  COL_VERTEX(768, 717, 5888);
	  COL_VERTEX(-2458, 1024, -5155);
	  COL_VERTEX(-2458, 0, -5155);
	  COL_VERTEX(-2679, 0, -5045);
	  COL_VERTEX(-2679, 384, -5045);
	  COL_VERTEX(-3445, 777, -4662);
	  COL_VERTEX(-3251, 0, -4759);
	  COL_VERTEX(-3445, 1, -4662);
	  COL_VERTEX(-3251, 384, -4759);
	  COL_VERTEX(-2793, 640, -4988);
	  COL_VERTEX(-3137, 640, -4816);
	  COL_VERTEX(-2222, 640, -2984);
	  COL_VERTEX(-1878, 640, -3155);
	  COL_VERTEX(-2336, 384, -2926);
	  COL_VERTEX(-1764, 384, -3213);
	  COL_VERTEX(-1764, 0, -3213);
	  COL_VERTEX(-2559, 0, -2815);
	  COL_VERTEX(-2336, 0, -2926);
	  COL_VERTEX(-1016, 0, -2299);
	  COL_VERTEX(-7167, 1024, -7167);
	  COL_VERTEX(-4132, 513, -6035);
	  COL_VERTEX(-5203, 776, -6012);
	  COL_VERTEX(-4991, 1024, -4479);
	  COL_VERTEX(-4095, 1024, -3967);
	  COL_VERTEX(-3617, 1, -5005);
	  COL_VERTEX(-3151, 512, -6526);
	  COL_VERTEX(-1791, 0, 1792);
	  COL_VERTEX(-1535, 0, 2048);
	  COL_VERTEX(-1535, 0, 1536);
	  COL_VERTEX(-767, 0, -767);
	  COL_VERTEX(-2815, 0, 256);
	  COL_VERTEX(-1791, 768, 1792);
	  COL_VERTEX(-1535, 0, -3327);
	  COL_VERTEX(-1535, 1024, -3327);
	  COL_VERTEX(-2559, 768, -2815);
	  COL_VERTEX(-1872, 0, -1441);
	  COL_VERTEX(-1791, 0, -767);
	  COL_VERTEX(-4855, 738, -5776);
	  COL_VERTEX(-4852, 799, -5458);
	  COL_VERTEX(-2633, 0, -5497);
	  COL_VERTEX(-3071, 0, 512);
	  COL_VERTEX(-3071, 0, 3072);
	  COL_VERTEX(-1535, 768, 2048);
	  COL_VERTEX(-1535, 768, 1536);
	  COL_VERTEX(8192, 2560, -8191);
	  COL_VERTEX(4352, 3712, -8191);
	  COL_VERTEX(3072, 2513, -8191);
	  COL_VERTEX(7680, 2080, -7679);
	  COL_VERTEX(8093, 2085, -5982);
	  COL_VERTEX(8093, 2064, -6029);
	  COL_VERTEX(8192, 2720, -5119);
	  COL_VERTEX(8093, 1936, -6029);
	  COL_VERTEX(-3105, 1024, -6549);
	  COL_VERTEX(512, 3328, -8191);
	  COL_VERTEX(-4095, 1792, -8191);
	  COL_VERTEX(-3151, 1024, -6526);
	  COL_VERTEX(-8191, 1536, -8191);
	  COL_VERTEX(-7167, 1024, 4096);
	  COL_VERTEX(-8191, 1280, 8192);
	  COL_VERTEX(-3071, 0, 7168);
	  COL_VERTEX(-3071, 640, 8192);
	  COL_VERTEX(3840, 2048, 8192);
	  COL_VERTEX(7686, 768, 7100);
	  COL_VERTEX(768, 768, 7168);
	  COL_VERTEX(7680, 768, 0);
	  COL_VERTEX(8093, 1936, -5934);
	  COL_VERTEX(8192, 1855, 1024);
	  COL_VERTEX(8093, 2064, -5934);
	  COL_VERTEX(6289, 912, -2653);
	  COL_VERTEX(6289, 1936, -2653);
	  COL_VERTEX(3097, 1741, -733);
	  COL_VERTEX(-869, 1024, -5528);
	  COL_VERTEX(-6143, 2560, -8191);
	  COL_VERTEX(-8191, 2048, 0);
	  COL_VERTEX(-7167, 0, 4096);
	  COL_VERTEX(-7167, 0, 7168);
	  COL_VERTEX(768, 768, 7680);
	  COL_VERTEX(768, 0, 7168);
	  COL_VERTEX(8192, 1024, 8192);
	  COL_VERTEX(8192, 2560, 4096);
	  COL_VERTEX(5468, 912, -1870);
	  COL_VERTEX(3584, 656, -767);
	  COL_VERTEX(3072, 2513, -7679);
	  COL_VERTEX(7029, 912, -3999);
	  COL_VERTEX(3072, 4293, -6655);
	  COL_VERTEX(4402, 4294, -3839);
	  COL_VERTEX(4402, 4294, -5375);
	  COL_VERTEX(1298, 4293, -3583);
	  COL_VERTEX(3072, 4293, -3071);
	  COL_VERTEX(1298, 4293, -5631);
	  COL_VERTEX(4846, 4294, -5631);
	  COL_VERTEX(5097, 825, -1387);
	  COL_VERTEX(5452, 857, -1485);
	  COL_VERTEX(5842, 832, -1155);
	  COL_VERTEX(-5577, 963, -5517);
	  COL_VERTEX(-5518, 849, -6024);
	  COL_VERTEX(-5198, 899, -5376);
	  COL_VERTEX(-6015, 1024, -3839);
	  COL_VERTEX(-3339, 1020, -563);
	  COL_VERTEX(-3448, 1015, -908);
	  COL_VERTEX(-4991, 1024, -2431);
	  COL_VERTEX(-2815, 1024, 256);
	  COL_VERTEX(-1791, 973, -767);
	  COL_VERTEX(-1872, 768, -1441);
	  COL_VERTEX(-7167, 1024, 512);
	  COL_VERTEX(-2123, 173, 6244);
	  COL_VERTEX(-2386, 187, 5931);
	  COL_VERTEX(-2242, 197, 5944);
	  COL_VERTEX(-2559, 179, 5888);
	  COL_VERTEX(-1535, 256, 5888);
	  COL_VERTEX(-921, 0, 6400);
	  COL_VERTEX(-2644, 115, 6413);
	  COL_VERTEX(-5375, 0, 6464);
	  COL_VERTEX(-2632, 132, 6269);
	  COL_VERTEX(-2542, 161, 6061);
	  COL_VERTEX(-3231, 1024, -159);
	  COL_VERTEX(5070, 715, 31);
	  COL_VERTEX(5471, 721, -23);
	  COL_VERTEX(5314, 717, -540);
	  COL_VERTEX(5812, 759, -649);
	  COL_VERTEX(5777, 743, 424);
	  COL_VERTEX(5360, 763, 1257);
	  COL_VERTEX(5683, 759, 927);
	  COL_VERTEX(5856, 754, 699);
	  COL_VERTEX(4864, 1024, 4096);
	  COL_VERTEX(5888, 1024, 4096);
	  COL_VERTEX(3840, 768, 2304);
	  COL_VERTEX(4299, 721, 668);
	  COL_VERTEX(4496, 713, 314);
	  COL_VERTEX(4845, 748, -936);
	  COL_VERTEX(4378, 732, 943);
	  COL_VERTEX(4582, 747, 1241);
	  COL_VERTEX(4810, 757, 1414);
	  COL_VERTEX(4250, 3072, 1127);
	  COL_VERTEX(4250, 3072, 1332);
	  COL_VERTEX(4454, 3072, 1127);
	  COL_VERTEX(3584, 3072, 2560);
	  COL_VERTEX(5120, 3072, 2560);
	  COL_VERTEX(5888, 3072, 1230);
	  COL_VERTEX(1888, 768, 720);
	  COL_VERTEX(1280, 768, 3328);
	  COL_VERTEX(6252, 1936, -2700);
	  COL_VERTEX(3060, 1741, -780);
	  COL_VERTEX(6265, 2080, -6527);
	  COL_VERTEX(-383, 0, 6400);
	  COL_VERTEX(6246, 2080, -7167);
	  COL_VERTEX(4864, 1024, 5120);
	  COL_VERTEX(1792, 768, 5376);
	  COL_VERTEX(768, 768, 5888);
	  COL_VERTEX(-4095, 0, 4096);
	  COL_VERTEX(-2559, 179, 5376);
	  COL_VERTEX(-1535, 256, 5376);
	  COL_VERTEX(2304, 768, 4864);
	  COL_VERTEX(-4095, 1024, -2943);
	  COL_VERTEX(-6015, 0, 4736);
	  COL_VERTEX(-6591, 0, 5312);
	  COL_VERTEX(-3583, 0, 5376);
	  COL_VERTEX(-4799, 0, 5888);
	  COL_VERTEX(-6015, 0, 6464);
	  COL_VERTEX(1692, 768, 3192);
	  COL_VERTEX(-7167, 768, 512);
	  COL_VERTEX(-3071, 768, 512);
	  COL_VERTEX(-4095, 768, 4096);
	  COL_VERTEX(6246, 2080, -6962);
	  COL_VERTEX(5289, 3233, -5887);
	  COL_VERTEX(5732, 3233, -6143);
	  COL_VERTEX(-3217, 1005, -1076);
	  COL_VERTEX(-2872, 993, -1185);
	  COL_VERTEX(-5887, 1024, -2943);
	  COL_VERTEX(-3058, 1019, -272);
	  COL_VERTEX(-2540, 1001, -436);
	  COL_VERTEX(-2772, 1011, -268);
	  COL_VERTEX(-2477, 990, -835);
	  COL_VERTEX(-2422, 993, -663);
	  COL_VERTEX(-2645, 990, -1067);
	  COL_VERTEX(-2110, 189, 6101);
	  COL_VERTEX(-2357, 134, 6439);
	  COL_VERTEX(-2579, 111, 6491);
	  COL_VERTEX(-921, 256, 5888);
	  COL_VERTEX(-3583, 0, 5888);
	  COL_VERTEX(-3503, 1024, 111);
	  COL_VERTEX(5888, 1024, 5120);
	  COL_VERTEX(3584, 3072, -99);
	  COL_VERTEX(2816, 3072, 1230);
	  COL_VERTEX(5120, 3072, -99);
	  COL_VERTEX(4454, 3072, 1332);
	  COL_VERTEX(2076, 768, 425);
	  COL_VERTEX(1212, 768, -123);
	  COL_VERTEX(1024, 768, 171);
	  COL_VERTEX(6451, 2080, -6962);
	  COL_VERTEX(6451, 2080, -7167);
	  COL_VERTEX(2079, 1368, -1535);
	  COL_VERTEX(-921, 0, 5888);
	  COL_VERTEX(256, 0, 6400);
	  COL_VERTEX(768, 0, 5888);
	  COL_VERTEX(-921, 0, 4865);
	  COL_VERTEX(-921, 256, 5375);
	  COL_VERTEX(-5375, 0, 4736);
	  COL_VERTEX(-6591, 0, 5888);
	  COL_VERTEX(-4799, 0, 5312);
	  COL_VERTEX(-7167, 768, 4096);
	  COL_VERTEX(-3071, 768, 3072);
	  COL_VERTEX(-3368, 768, 246);
	  COL_VERTEX(-3503, 768, 111);
	  COL_VERTEX(3072, 3666, -7167);
	  COL_VERTEX(3072, 3666, -7679);
	  COL_VERTEX(-2413, 1024, -5178);
	  COL_VERTEX(-2240, 1024, -4835);
	  COL_VERTEX(-2285, 1024, -4812);
	  COL_VERTEX(768, 870, 5847);
	  COL_VERTEX(1751, 870, 5335);
	  COL_VERTEX(1751, 768, 5335);
	  COL_VERTEX(768, 768, 5847);
	  COL_VERTEX(809, 768, 5868);
	  COL_VERTEX(1792, 870, 5376);
	  COL_VERTEX(809, 870, 5868);
	  COL_VERTEX(809, 870, 7168);
	  COL_VERTEX(809, 768, 7168);
	  COL_VERTEX(788, 891, 7168);
	  COL_VERTEX(768, 870, 7168);
	  COL_VERTEX(-5797, 128, 5702);
	  COL_VERTEX(-5593, 128, 5702);
	  COL_VERTEX(-5797, 128, 5498);
	  COL_VERTEX(-5797, -383, 5702);
	  COL_VERTEX(-5593, 128, 5498);
	  COL_VERTEX(5478, 1536, 4506);
	  COL_VERTEX(5274, 1536, 4506);
	  COL_VERTEX(5478, 1536, 4710);
	  COL_VERTEX(5478, 1024, 4506);
	  COL_VERTEX(5274, 1536, 4710);
	  COL_VERTEX(-5119, 1331, -3634);
	  COL_VERTEX(-4914, 1331, -3634);
	  COL_VERTEX(-4914, 819, -3634);
	  COL_VERTEX(-4914, 1331, -3429);
	  COL_VERTEX(-5119, 1331, -3429);
	  COL_VERTEX(6246, 1568, -7167);
	  COL_VERTEX(4352, 2560, -2559);
	  COL_VERTEX(4352, 3072, -2559);
	  COL_VERTEX(4147, 3072, -2559);
	  COL_VERTEX(4147, 3072, -2354);
	  COL_VERTEX(4352, 3072, -2354);
	  COL_VERTEX(2263, 768, 4864);
	  COL_VERTEX(2263, 870, 4864);
	  COL_VERTEX(2304, 768, 4480);
	  COL_VERTEX(2263, 870, 4480);
	  COL_VERTEX(-3071, 768, 1536);
	  COL_VERTEX(-3112, 768, 3031);
	  COL_VERTEX(-3112, 1024, 3031);
	  COL_VERTEX(-4095, 1024, 4096);
	  COL_VERTEX(-4136, 768, 4055);
	  COL_VERTEX(-4136, 1024, 4055);
	  COL_VERTEX(3097, 1869, -733);
	  COL_VERTEX(6289, 2064, -2653);
	  COL_VERTEX(-970, 1024, -2322);
	  COL_VERTEX(-2285, 1741, -4812);
	  COL_VERTEX(-1016, 1024, -2299);
	  COL_VERTEX(-3151, 1741, -6526);
	  COL_VERTEX(2304, 870, 4480);
	  COL_VERTEX(6252, 2064, -2700);
	  COL_VERTEX(1302, 891, 3805);
	  COL_VERTEX(1280, 768, 3840);
	  COL_VERTEX(-1506, 768, 2019);
	  COL_VERTEX(-1535, 891, 2048);
	  COL_VERTEX(1792, 0, 4352);
	  COL_VERTEX(1792, 768, 4352);
	  COL_VERTEX(-5797, -383, 5498);
	  COL_VERTEX(-5593, -383, 5498);
	  COL_VERTEX(-5593, -383, 5702);
	  COL_VERTEX(5478, 1024, 4710);
	  COL_VERTEX(5274, 1024, 4710);
	  COL_VERTEX(5274, 1024, 4506);
	  COL_VERTEX(-5119, 819, -3634);
	  COL_VERTEX(-4914, 819, -3429);
	  COL_VERTEX(-5119, 819, -3429);
	  COL_VERTEX(6451, 1568, -7167);
	  COL_VERTEX(6451, 1568, -6962);
	  COL_VERTEX(6246, 1568, -6962);
	  COL_VERTEX(4147, 2560, -2354);
	  COL_VERTEX(4352, 2560, -2354);
	  COL_VERTEX(4147, 2560, -2559);
	  COL_VERTEX(2262, 768, 4480);
	  COL_VERTEX(2284, 891, 4480);
	  COL_VERTEX(-3112, 1024, 1536);
	  COL_VERTEX(-3071, 1024, 1536);
	  COL_VERTEX(-3112, 768, 1536);
	  COL_VERTEX(2304, 870, 4864);
	  COL_VERTEX(-3071, 1024, 3072);
	  COL_VERTEX(-7167, 1024, 4055);
	  COL_VERTEX(-7167, 768, 4055);
	  COL_VERTEX(3060, 1869, -780);
	  COL_VERTEX(3078, 1889, -756);
	  COL_VERTEX(-2240, 1741, -4835);
	  COL_VERTEX(-1016, 1741, -2299);
	  COL_VERTEX(-970, 1741, -2322);
	  COL_VERTEX(-2459, 1741, -5155);
	  COL_VERTEX(-2413, 1741, -5178);
	  COL_VERTEX(-3105, 1741, -6549);
	  COL_VERTEX(-1506, 891, 2019);
	  COL_VERTEX(1302, 768, 3805);
	  COL_VERTEX(1280, 891, 3840);
	  COL_VERTEX(1291, 911, 3823);
	  COL_VERTEX(-1521, 911, 2034);
	  COL_VERTEX(1792, 0, 4864);
	  COL_VERTEX(1792, 768, 4864);
	  COL_VERTEX(1888, 1536, 720);
	  COL_VERTEX(1950, 2049, -82);
	  COL_VERTEX(1024, 1536, 171);
	  COL_VERTEX(-6245, 128, 5816);
	  COL_VERTEX(-5842, 128, 6248);
	  COL_VERTEX(-6245, 128, 5384);
	  COL_VERTEX(-5548, 128, 6248);
	  COL_VERTEX(-5842, 128, 4952);
	  COL_VERTEX(5632, 1536, 4864);
	  COL_VERTEX(5120, 1536, 4864);
	  COL_VERTEX(5632, 1536, 4352);
	  COL_VERTEX(5120, 1536, 4352);
	  COL_VERTEX(1260, 2918, -2327);
	  COL_VERTEX(1434, 0, 4352);
	  COL_VERTEX(1434, 0, 4864);
	  COL_VERTEX(4454, 2560, 1127);
	  COL_VERTEX(-3503, 960, 111);
	  COL_VERTEX(-3231, 960, -159);
	  COL_VERTEX(-3458, 896, 156);
	  COL_VERTEX(-3186, 896, -114);
	  COL_VERTEX(-3142, 832, -69);
	  COL_VERTEX(-3413, 832, 201);
	  COL_VERTEX(-3097, 768, -24);
	  COL_VERTEX(768, 0, 5376);
	  COL_VERTEX(3279, 2944, -1718);
	  COL_VERTEX(3319, 2944, -1866);
	  COL_VERTEX(3319, 2970, -1866);
	  COL_VERTEX(2407, 2917, -1925);
	  COL_VERTEX(2447, 2917, -2073);
	  COL_VERTEX(-921, 0, 5377);
	  COL_VERTEX(-1010, 819, -5170);
	  COL_VERTEX(-1210, 717, -4925);
	  COL_VERTEX(-1552, 717, -4752);
	  COL_VERTEX(-1867, 819, -4737);
	  COL_VERTEX(1280, 0, 3840);
	  COL_VERTEX(-2815, 768, 256);
	  COL_VERTEX(868, 2801, -3302);
	  COL_VERTEX(868, 3954, -3302);
	  COL_VERTEX(-181, 2658, -5302);
	  COL_VERTEX(851, 3818, -5894);
	  COL_VERTEX(240, 2939, -5544);
	  COL_VERTEX(-353, 2606, -5359);
	  COL_VERTEX(3072, 2513, -7167);
	  COL_VERTEX(596, 2683, -5748);
	  COL_VERTEX(5289, 2080, -5887);
	  COL_VERTEX(5400, 2029, -5951);
	  COL_VERTEX(240, 2683, -5544);
	  COL_VERTEX(596, 2939, -5748);
	  COL_VERTEX(801, 2683, -5393);
	  COL_VERTEX(507, 3042, -5697);
	  COL_VERTEX(329, 3042, -5595);
	  COL_VERTEX(5289, 2493, -3327);
	  COL_VERTEX(5289, 1936, -3327);
	  COL_VERTEX(2851, 1613, -1919);
	  COL_VERTEX(2560, 1613, -2737);
	  COL_VERTEX(3072, 2945, -2047);
	  COL_VERTEX(3328, 2944, -1603);
	  COL_VERTEX(167, 2709, -3757);
	  COL_VERTEX(169, 1024, -3471);
	  COL_VERTEX(54, 1024, -3700);
	  COL_VERTEX(2560, 2862, -2613);
	  COL_VERTEX(2560, 2864, -2367);
	  COL_VERTEX(3072, 2894, -2431);
	  COL_VERTEX(3072, 2945, -2559);
	  COL_VERTEX(4846, 3089, -3583);
	  COL_VERTEX(2560, 2912, -2736);
	  COL_VERTEX(3072, 4097, -3071);
	  COL_VERTEX(1298, 3954, -3583);
	  COL_VERTEX(1298, 3810, -5631);
	  COL_VERTEX(1609, 4194, -5810);
	  COL_VERTEX(3072, 4294, -6655);
	  COL_VERTEX(3072, 3666, -6655);
	  COL_VERTEX(4846, 3233, -5631);
	  COL_VERTEX(5543, 2637, -2883);
	  COL_VERTEX(5543, 3089, -2883);
	  COL_VERTEX(5400, 1885, -3263);
	  COL_VERTEX(3072, 3521, -7679);
	  COL_VERTEX(3072, 3521, -7167);
	  COL_VERTEX(5733, 3089, -6143);
	  COL_VERTEX(5289, 3088, -5887);
	  COL_VERTEX(3072, 4097, -2559);
	  COL_VERTEX(6131, 1885, -2767);
	  COL_VERTEX(1697, 3835, -5861);
	  COL_VERTEX(1697, 4091, -5861);
	  COL_VERTEX(1343, 3835, -5657);
	  COL_VERTEX(1343, 4091, -5657);
	  COL_VERTEX(1431, 4194, -5708);
	  COL_VERTEX(1902, 3835, -5506);
	  COL_VERTEX(419, 2706, -3884);
	  COL_VERTEX(400, 1024, -3014);
	  COL_VERTEX(400, 2802, -3014);
	  COL_VERTEX(400, 2546, -3014);
	  COL_VERTEX(2560, 2917, -2244);
	  COL_VERTEX(537, 2721, -3657);
	  COL_VERTEX(751, 2750, -3230);
	  COL_VERTEX(6131, 2029, -6447);
	  COL_VERTEX(3072, 2462, -7295);
	  COL_VERTEX(3072, 2462, -7551);
	  COL_VERTEX(4735, 4190, -3647);
	  COL_VERTEX(4513, 4190, -3775);
	  COL_VERTEX(3072, 4046, -2687);
	  COL_VERTEX(3072, 4046, -2943);
	  COL_VERTEX(966, 3902, -3391);
	  COL_VERTEX(1188, 3902, -3519);
	  COL_VERTEX(5178, 3182, -5823);
	  COL_VERTEX(4956, 3182, -5695);
	  COL_VERTEX(3072, 3614, -6783);
	  COL_VERTEX(3072, 3614, -7039);
	  COL_VERTEX(5178, 3038, -3391);
	  COL_VERTEX(4956, 3038, -3519);
	  COL_VERTEX(517, 2750, -3086);
	  COL_VERTEX(4352, 2048, 1230);
	  COL_VERTEX(3776, 2560, 2227);
	  COL_VERTEX(4928, 2560, 2227);
	  COL_VERTEX(3200, 2560, 1230);
	  COL_VERTEX(5504, 2560, 1230);
	  COL_VERTEX(4928, 2560, 232);
	  COL_VERTEX(3776, 2560, 232);
	  COL_VERTEX(-5145, 128, 5816);
	  COL_VERTEX(-5145, 128, 5384);
	  COL_VERTEX(-5548, 128, 4952);
	  COL_VERTEX(1452, 2918, -2259);
	  COL_VERTEX(1521, 2918, -2452);
	  COL_VERTEX(1328, 2918, -2520);
	  COL_VERTEX(4250, 2560, 1127);
	  COL_VERTEX(4250, 2560, 1332);
	  COL_VERTEX(4454, 2560, 1332);
	  COL_VERTEX(-3458, 960, 156);
	  COL_VERTEX(-3187, 960, -115);
	  COL_VERTEX(-3413, 896, 201);
	  COL_VERTEX(-3142, 896, -69);
	  COL_VERTEX(-3097, 832, -24);
	  COL_VERTEX(-3368, 832, 246);
	  COL_VERTEX(768, 768, 5376);
	  COL_VERTEX(3279, 2970, -1718);
	  COL_VERTEX(2407, 2943, -1925);
	  COL_VERTEX(2447, 2943, -2073);
	  COL_VERTEX(-286, 717, -3097);
	  COL_VERTEX(28, 819, -3113);
	  COL_VERTEX(-629, 717, -2924);
	  COL_VERTEX(-828, 819, -2680);
	  COL_VERTEX(-3231, 768, -159);
	  COL_VERTEX(652, 2772, -3715);
	  COL_VERTEX(533, 2755, -3942);
	  COL_VERTEX(-181, 3818, -5302);
	  COL_VERTEX(3037, 1669, -904);
	  COL_VERTEX(445, 2683, -5189);
	  COL_VERTEX(445, 2939, -5189);
	  COL_VERTEX(2560, 1612, -2244);
	  COL_VERTEX(2488, 1369, -2138);
	  COL_VERTEX(2874, 1576, -1794);
	  COL_VERTEX(-869, 2657, -5528);
	  COL_VERTEX(803, 2940, -5394);
	  COL_VERTEX(712, 3042, -5342);
	  COL_VERTEX(5289, 3089, -3327);
	  COL_VERTEX(534, 3042, -5240);
	  COL_VERTEX(3072, 2349, -2047);
	  COL_VERTEX(3072, 2894, -2175);
	  COL_VERTEX(2802, 1613, -2653);
	  COL_VERTEX(3328, 2493, -1603);
	  COL_VERTEX(54, 2762, -3700);
	  COL_VERTEX(-697, 2606, -5472);
	  COL_VERTEX(169, 2775, -3471);
	  COL_VERTEX(286, 2723, -3530);
	  COL_VERTEX(4846, 4242, -3583);
	  COL_VERTEX(4402, 4293, -3839);
	  COL_VERTEX(1902, 4088, -5506);
	  COL_VERTEX(1548, 3835, -5302);
	  COL_VERTEX(1636, 4191, -5353);
	  COL_VERTEX(1814, 4191, -5455);
	  COL_VERTEX(1548, 4088, -5302);
	  COL_VERTEX(2388, 2917, -1762);
	  COL_VERTEX(228, 2802, -2532);
	  COL_VERTEX(2560, 2661, -2244);
	  COL_VERTEX(966, 3758, -5823);
	  COL_VERTEX(1188, 3758, -5695);
	  COL_VERTEX(788, 891, 5857);
	  COL_VERTEX(1772, 891, 5356);
	  COL_VERTEX(2284, 891, 4864);
	  COL_VERTEX(1024, 1408, 171);
	  COL_VERTEX(1212, 1408, -123);
	  COL_VERTEX(1888, 1408, 720);
	  COL_VERTEX(1186, 768, -149);
	  COL_VERTEX(-7167, 1044, 4076);
	  COL_VERTEX(-4115, 1044, 4076);
	  COL_VERTEX(-3091, 1044, 3052);
	  COL_VERTEX(-3091, 1044, 1536);
	  COL_VERTEX(2076, 1408, 425);
	  COL_VERTEX(1186, 1408, -149);
	  COL_VERTEX(6271, 2084, -2676);
	  COL_VERTEX(5669, 927, -780);
	  COL_VERTEX(5147, 923, -957);
	  COL_VERTEX(5345, 966, -1188);
	  COL_VERTEX(-5070, 1081, -5738);
	  COL_VERTEX(-5322, 1136, -5756);
	  COL_VERTEX(-5235, 1071, -5842);
	  COL_VERTEX(-5017, 1331, -3020);
	  COL_VERTEX(-5460, 1331, -3788);
	  COL_VERTEX(-4573, 1331, -3788);
	  COL_VERTEX(-2815, 1207, -537);
	  COL_VERTEX(-2815, 1207, -844);
	  COL_VERTEX(-3045, 1207, -895);
	  COL_VERTEX(-3199, 1207, -562);
	  COL_VERTEX(-2316, 245, 6300);
	  COL_VERTEX(-2401, 235, 6323);
	  COL_VERTEX(-2364, 239, 6216);
	  COL_VERTEX(4827, 1329, 1183);
	  COL_VERTEX(4966, 1333, 645);
	  COL_VERTEX(5248, 1249, 675);
	  COL_VERTEX(-897, 922, -5370);
	  COL_VERTEX(-2096, 922, -4764);
	  COL_VERTEX(-942, 922, -2479);
	  COL_VERTEX(257, 922, -3085);
	  COL_TRI_INIT(SURFACE_DEFAULT, 378);
	  COL_TRI(362, 360, 273);
	  COL_TRI(60, 73, 58);
	  COL_TRI(58, 87, 54);
	  COL_TRI(87, 86, 54);
	  COL_TRI(71, 86, 85);
	  COL_TRI(71, 308, 86);
	  COL_TRI(360, 361, 273);
	  COL_TRI(365, 278, 280);
	  COL_TRI(361, 363, 274);
	  COL_TRI(361, 274, 273);
	  COL_TRI(362, 273, 275);
	  COL_TRI(277, 274, 475);
	  COL_TRI(363, 475, 274);
	  COL_TRI(277, 475, 476);
	  COL_TRI(362, 275, 364);
	  COL_TRI(364, 275, 277);
	  COL_TRI(364, 277, 477);
	  COL_TRI(277, 476, 477);
	  COL_TRI(234, 365, 366);
	  COL_TRI(365, 367, 278);
	  COL_TRI(366, 365, 280);
	  COL_TRI(178, 365, 234);
	  COL_TRI(367, 279, 278);
	  COL_TRI(366, 280, 282);
	  COL_TRI(177, 368, 367);
	  COL_TRI(177, 367, 178);
	  COL_TRI(367, 368, 279);
	  COL_TRI(178, 367, 365);
	  COL_TRI(199, 366, 368);
	  COL_TRI(234, 366, 199);
	  COL_TRI(368, 366, 282);
	  COL_TRI(368, 282, 279);
	  COL_TRI(199, 368, 177);
	  COL_TRI(369, 478, 479);
	  COL_TRI(369, 479, 480);
	  COL_TRI(370, 371, 316);
	  COL_TRI(371, 355, 316);
	  COL_TRI(186, 372, 188);
	  COL_TRI(186, 481, 372);
	  COL_TRI(372, 482, 483);
	  COL_TRI(372, 481, 482);
	  COL_TRI(188, 372, 483);
	  COL_TRI(238, 483, 482);
	  COL_TRI(187, 482, 481);
	  COL_TRI(238, 482, 187);
	  COL_TRI(188, 483, 238);
	  COL_TRI(187, 481, 186);
	  COL_TRI(373, 484, 485);
	  COL_TRI(373, 485, 374);
	  COL_TRI(374, 233, 373);
	  COL_TRI(256, 375, 373);
	  COL_TRI(375, 484, 373);
	  COL_TRI(378, 486, 375);
	  COL_TRI(376, 485, 484);
	  COL_TRI(374, 168, 233);
	  COL_TRI(376, 484, 375);
	  COL_TRI(377, 486, 378);
	  COL_TRI(377, 487, 486);
	  COL_TRI(375, 486, 487);
	  COL_TRI(213, 256, 373);
	  COL_TRI(375, 487, 376);
	  COL_TRI(256, 378, 375);
	  COL_TRI(378, 488, 377);
	  COL_TRI(378, 489, 488);
	  COL_TRI(255, 489, 378);
	  COL_TRI(256, 255, 378);
	  COL_TRI(379, 488, 489);
	  COL_TRI(379, 489, 255);
	  COL_TRI(214, 379, 255);
	  COL_TRI(214, 392, 379);
	  COL_TRI(313, 317, 47);
	  COL_TRI(313, 47, 193);
	  COL_TRI(317, 205, 47);
	  COL_TRI(95, 313, 96);
	  COL_TRI(249, 204, 162);
	  COL_TRI(80, 391, 313);
	  COL_TRI(80, 313, 95);
	  COL_TRI(313, 391, 317);
	  COL_TRI(313, 193, 96);
	  COL_TRI(317, 356, 205);
	  COL_TRI(204, 203, 162);
	  COL_TRI(203, 232, 161);
	  COL_TRI(203, 161, 162);
	  COL_TRI(203, 209, 232);
	  COL_TRI(231, 249, 162);
	  COL_TRI(209, 210, 232);
	  COL_TRI(209, 252, 210);
	  COL_TRI(52, 201, 231);
	  COL_TRI(84, 95, 96);
	  COL_TRI(200, 205, 356);
	  COL_TRI(201, 200, 356);
	  COL_TRI(380, 51, 356);
	  COL_TRI(355, 380, 356);
	  COL_TRI(51, 490, 356);
	  COL_TRI(201, 356, 490);
	  COL_TRI(381, 384, 385);
	  COL_TRI(381, 385, 382);
	  COL_TRI(52, 53, 201);
	  COL_TRI(382, 491, 381);
	  COL_TRI(381, 491, 492);
	  COL_TRI(381, 492, 384);
	  COL_TRI(383, 492, 491);
	  COL_TRI(383, 493, 492);
	  COL_TRI(384, 492, 493);
	  COL_TRI(384, 493, 385);
	  COL_TRI(382, 383, 491);
	  COL_TRI(385, 493, 383);
	  COL_TRI(385, 383, 382);
	  COL_TRI(386, 50, 52);
	  COL_TRI(386, 52, 245);
	  COL_TRI(231, 490, 249);
	  COL_TRI(231, 201, 490);
	  COL_TRI(51, 249, 490);
	  COL_TRI(51, 50, 249);
	  COL_TRI(387, 494, 495);
	  COL_TRI(387, 388, 494);
	  COL_TRI(388, 496, 494);
	  COL_TRI(388, 389, 496);
	  COL_TRI(389, 390, 496);
	  COL_TRI(390, 497, 496);
	  COL_TRI(248, 370, 202);
	  COL_TRI(316, 391, 370);
	  COL_TRI(391, 316, 317);
	  COL_TRI(391, 94, 370);
	  COL_TRI(391, 80, 94);
	  COL_TRI(248, 249, 386);
	  COL_TRI(370, 248, 386);
	  COL_TRI(371, 386, 380);
	  COL_TRI(370, 94, 202);
	  COL_TRI(371, 370, 386);
	  COL_TRI(202, 94, 254);
	  COL_TRI(53, 380, 247);
	  COL_TRI(53, 51, 380);
	  COL_TRI(53, 247, 130);
	  COL_TRI(130, 201, 53);
	  COL_TRI(245, 380, 386);
	  COL_TRI(202, 254, 215);
	  COL_TRI(214, 254, 94);
	  COL_TRI(214, 94, 93);
	  COL_TRI(231, 163, 245);
	  COL_TRI(245, 247, 380);
	  COL_TRI(247, 245, 197);
	  COL_TRI(247, 197, 246);
	  COL_TRI(380, 355, 371);
	  COL_TRI(89, 88, 156);
	  COL_TRI(89, 156, 155);
	  COL_TRI(89, 155, 154);
	  COL_TRI(89, 154, 83);
	  COL_TRI(93, 83, 392);
	  COL_TRI(93, 392, 214);
	  COL_TRI(392, 154, 379);
	  COL_TRI(154, 374, 379);
	  COL_TRI(154, 168, 374);
	  COL_TRI(87, 156, 88);
	  COL_TRI(69, 87, 88);
	  COL_TRI(72, 78, 108);
	  COL_TRI(60, 77, 73);
	  COL_TRI(54, 108, 78);
	  COL_TRI(54, 78, 92);
	  COL_TRI(54, 92, 55);
	  COL_TRI(393, 394, 499);
	  COL_TRI(394, 395, 500);
	  COL_TRI(394, 500, 499);
	  COL_TRI(394, 396, 501);
	  COL_TRI(395, 394, 501);
	  COL_TRI(396, 395, 501);
	  COL_TRI(244, 308, 71);
	  COL_TRI(244, 195, 502);
	  COL_TRI(244, 446, 308);
	  COL_TRI(397, 395, 407);
	  COL_TRI(395, 396, 407);
	  COL_TRI(397, 403, 395);
	  COL_TRI(395, 403, 400);
	  COL_TRI(395, 399, 398);
	  COL_TRI(135, 124, 508);
	  COL_TRI(395, 400, 399);
	  COL_TRI(399, 436, 401);
	  COL_TRI(399, 434, 436);
	  COL_TRI(396, 257, 399);
	  COL_TRI(396, 399, 404);
	  COL_TRI(400, 404, 399);
	  COL_TRI(399, 453, 398);
	  COL_TRI(397, 503, 403);
	  COL_TRI(403, 503, 405);
	  COL_TRI(403, 405, 400);
	  COL_TRI(400, 405, 404);
	  COL_TRI(396, 404, 406);
	  COL_TRI(404, 509, 510);
	  COL_TRI(404, 510, 406);
	  COL_TRI(405, 509, 404);
	  COL_TRI(396, 406, 407);
	  COL_TRI(406, 512, 407);
	  COL_TRI(406, 510, 512);
	  COL_TRI(407, 504, 397);
	  COL_TRI(407, 512, 504);
	  COL_TRI(397, 504, 503);
	  COL_TRI(405, 503, 504);
	  COL_TRI(405, 504, 512);
	  COL_TRI(405, 510, 509);
	  COL_TRI(405, 512, 510);
	  COL_TRI(408, 513, 410);
	  COL_TRI(409, 408, 410);
	  COL_TRI(410, 513, 412);
	  COL_TRI(410, 412, 514);
	  COL_TRI(410, 514, 419);
	  COL_TRI(411, 505, 410);
	  COL_TRI(410, 515, 411);
	  COL_TRI(410, 419, 515);
	  COL_TRI(408, 516, 513);
	  COL_TRI(412, 513, 516);
	  COL_TRI(415, 446, 447);
	  COL_TRI(413, 412, 516);
	  COL_TRI(124, 517, 508);
	  COL_TRI(124, 416, 517);
	  COL_TRI(414, 518, 508);
	  COL_TRI(414, 508, 517);
	  COL_TRI(415, 447, 519);
	  COL_TRI(421, 437, 420);
	  COL_TRI(415, 519, 520);
	  COL_TRI(411, 515, 420);
	  COL_TRI(411, 420, 422);
	  COL_TRI(417, 411, 422);
	  COL_TRI(417, 418, 411);
	  COL_TRI(418, 505, 411);
	  COL_TRI(419, 420, 515);
	  COL_TRI(420, 437, 422);
	  COL_TRI(425, 439, 428);
	  COL_TRI(422, 451, 417);
	  COL_TRI(422, 393, 451);
	  COL_TRI(423, 140, 424);
	  COL_TRI(424, 140, 425);
	  COL_TRI(140, 142, 425);
	  COL_TRI(423, 141, 140);
	  COL_TRI(425, 441, 439);
	  COL_TRI(142, 441, 425);
	  COL_TRI(429, 143, 421);
	  COL_TRI(142, 442, 441);
	  COL_TRI(142, 426, 443);
	  COL_TRI(142, 443, 442);
	  COL_TRI(426, 142, 427);
	  COL_TRI(423, 522, 138);
	  COL_TRI(141, 423, 138);
	  COL_TRI(427, 143, 429);
	  COL_TRI(428, 427, 429);
	  COL_TRI(401, 511, 409);
	  COL_TRI(143, 521, 421);
	  COL_TRI(421, 521, 437);
	  COL_TRI(428, 439, 427);
	  COL_TRI(430, 431, 516);
	  COL_TRI(408, 430, 516);
	  COL_TRI(431, 413, 516);
	  COL_TRI(433, 258, 435);
	  COL_TRI(408, 511, 431);
	  COL_TRI(408, 431, 430);
	  COL_TRI(401, 217, 511);
	  COL_TRI(432, 402, 401);
	  COL_TRI(409, 432, 401);
	  COL_TRI(401, 402, 399);
	  COL_TRI(434, 433, 436);
	  COL_TRI(258, 218, 435);
	  COL_TRI(435, 218, 217);
	  COL_TRI(436, 435, 217);
	  COL_TRI(433, 435, 436);
	  COL_TRI(434, 257, 258);
	  COL_TRI(434, 258, 433);
	  COL_TRI(394, 393, 422);
	  COL_TRI(432, 409, 410);
	  COL_TRI(437, 394, 422);
	  COL_TRI(432, 438, 402);
	  COL_TRI(438, 432, 502);
	  COL_TRI(432, 507, 502);
	  COL_TRI(432, 410, 507);
	  COL_TRI(439, 440, 427);
	  COL_TRI(440, 426, 427);
	  COL_TRI(440, 523, 526);
	  COL_TRI(416, 415, 499);
	  COL_TRI(439, 523, 440);
	  COL_TRI(426, 525, 443);
	  COL_TRI(426, 526, 525);
	  COL_TRI(440, 526, 426);
	  COL_TRI(441, 444, 439);
	  COL_TRI(439, 444, 523);
	  COL_TRI(441, 524, 444);
	  COL_TRI(442, 524, 441);
	  COL_TRI(443, 525, 527);
	  COL_TRI(443, 527, 442);
	  COL_TRI(442, 527, 524);
	  COL_TRI(444, 524, 527);
	  COL_TRI(444, 527, 525);
	  COL_TRI(444, 526, 523);
	  COL_TRI(444, 525, 526);
	  COL_TRI(416, 499, 500);
	  COL_TRI(445, 416, 500);
	  COL_TRI(415, 450, 499);
	  COL_TRI(446, 505, 449);
	  COL_TRI(446, 449, 447);
	  COL_TRI(244, 506, 446);
	  COL_TRI(447, 418, 467);
	  COL_TRI(447, 449, 418);
	  COL_TRI(417, 451, 467);
	  COL_TRI(448, 528, 529);
	  COL_TRI(448, 530, 528);
	  COL_TRI(449, 528, 530);
	  COL_TRI(448, 529, 447);
	  COL_TRI(418, 449, 505);
	  COL_TRI(417, 467, 418);
	  COL_TRI(445, 414, 416);
	  COL_TRI(244, 502, 507);
	  COL_TRI(244, 507, 506);
	  COL_TRI(450, 451, 499);
	  COL_TRI(415, 520, 450);
	  COL_TRI(451, 520, 467);
	  COL_TRI(451, 450, 520);
	  COL_TRI(452, 454, 453);
	  COL_TRI(414, 517, 416);
	  COL_TRI(438, 452, 402);
	  COL_TRI(438, 195, 194);
	  COL_TRI(196, 452, 194);
	  COL_TRI(452, 438, 194);
	  COL_TRI(402, 453, 399);
	  COL_TRI(402, 452, 453);
	  COL_TRI(452, 196, 454);
	  COL_TRI(455, 456, 457);
	  COL_TRI(196, 135, 454);
	  COL_TRI(438, 502, 195);
	  COL_TRI(453, 454, 398);
	  COL_TRI(454, 518, 398);
	  COL_TRI(454, 135, 518);
	  COL_TRI(135, 508, 518);
	  COL_TRI(139, 455, 143);
	  COL_TRI(139, 456, 455);
	  COL_TRI(464, 531, 532);
	  COL_TRI(456, 458, 457);
	  COL_TRI(457, 458, 459);
	  COL_TRI(458, 460, 459);
	  COL_TRI(459, 460, 531);
	  COL_TRI(460, 532, 531);
	  COL_TRI(461, 464, 463);
	  COL_TRI(462, 461, 463);
	  COL_TRI(463, 464, 532);
	  COL_TRI(451, 393, 499);
	  COL_TRI(461, 462, 465);
	  COL_TRI(462, 466, 465);
	  COL_TRI(465, 466, 514);
	  COL_TRI(466, 419, 514);
	  COL_TRI(467, 519, 447);
	  COL_TRI(467, 520, 519);
	  COL_TRI(445, 398, 518);
	  COL_TRI(445, 518, 414);
	  COL_TRI(398, 445, 500);
	  COL_TRI(398, 500, 395);
	  COL_TRI(157, 213, 373);
	  COL_TRI(233, 157, 373);
	  COL_TRI(157, 110, 253);
	  COL_TRI(253, 213, 157);
	  COL_TRI(468, 471, 474);
	  COL_TRI(468, 470, 469);
	  COL_TRI(468, 469, 471);
	  COL_TRI(468, 473, 472);
	  COL_TRI(468, 474, 473);
	  COL_TRI(468, 472, 470);
	  COL_TRI(469, 189, 236);
	  COL_TRI(469, 236, 471);
	  COL_TRI(470, 189, 469);
	  COL_TRI(471, 235, 474);
	  COL_TRI(471, 236, 235);
	  COL_TRI(470, 190, 189);
	  COL_TRI(472, 190, 470);
	  COL_TRI(472, 191, 190);
	  COL_TRI(473, 191, 472);
	  COL_TRI(473, 237, 191);
	  COL_TRI(235, 237, 473);
	  COL_TRI(474, 235, 473);
	  COL_TRI(374, 498, 379);
	  COL_TRI(116, 201, 130);
	  COL_TRI(129, 116, 130);
	  COL_TRI(253, 127, 202);
	  COL_TRI(202, 215, 253);
	  COL_TRI_INIT(SURFACE_HANGABLE, 2);
	  COL_TRI(50, 51, 52);
	  COL_TRI(51, 53, 52);
	  COL_TRI_INIT(SURFACE_CLOSE_CAMERA, 55);
	  COL_TRI(54, 63, 58);
	  COL_TRI(54, 55, 56);
	  COL_TRI(54, 56, 57);
	  COL_TRI(58, 59, 60);
	  COL_TRI(58, 61, 59);
	  COL_TRI(54, 62, 63);
	  COL_TRI(54, 57, 62);
	  COL_TRI(64, 63, 62);
	  COL_TRI(65, 62, 57);
	  COL_TRI(64, 62, 65);
	  COL_TRI(66, 61, 63);
	  COL_TRI(66, 63, 64);
	  COL_TRI(63, 61, 58);
	  COL_TRI(65, 57, 67);
	  COL_TRI(67, 57, 56);
	  COL_TRI(65, 67, 86);
	  COL_TRI(67, 56, 68);
	  COL_TRI(67, 68, 86);
	  COL_TRI(64, 65, 86);
	  COL_TRI(68, 56, 59);
	  COL_TRI(68, 59, 70);
	  COL_TRI(68, 85, 86);
	  COL_TRI(64, 86, 87);
	  COL_TRI(66, 64, 87);
	  COL_TRI(69, 66, 87);
	  COL_TRI(70, 61, 66);
	  COL_TRI(69, 70, 66);
	  COL_TRI(71, 69, 88);
	  COL_TRI(70, 59, 61);
	  COL_TRI(72, 74, 73);
	  COL_TRI(73, 90, 91);
	  COL_TRI(74, 90, 73);
	  COL_TRI(75, 73, 91);
	  COL_TRI(75, 76, 73);
	  COL_TRI(73, 78, 72);
	  COL_TRI(78, 73, 92);
	  COL_TRI(76, 58, 73);
	  COL_TRI(77, 56, 92);
	  COL_TRI(56, 55, 92);
	  COL_TRI(77, 59, 56);
	  COL_TRI(77, 60, 59);
	  COL_TRI(73, 77, 92);
	  COL_TRI(79, 93, 94);
	  COL_TRI(80, 79, 94);
	  COL_TRI(81, 82, 83);
	  COL_TRI(82, 71, 89);
	  COL_TRI(83, 82, 89);
	  COL_TRI(79, 81, 83);
	  COL_TRI(79, 83, 93);
	  COL_TRI(84, 81, 79);
	  COL_TRI(84, 96, 81);
	  COL_TRI(84, 79, 80);
	  COL_TRI(85, 69, 71);
	  COL_TRI(71, 88, 89);
	  COL_TRI(80, 95, 84);
	  COL_TRI_INIT(SURFACE_VERY_SLIPPERY, 5);
	  COL_TRI(134, 123, 357);
	  COL_TRI(357, 123, 358);
	  COL_TRI(123, 359, 358);
	  COL_TRI(359, 357, 358);
	  COL_TRI(134, 357, 212);
	  COL_TRI_INIT(SURFACE_SLIPPERY, 62);
	  COL_TRI(262, 533, 263);
	  COL_TRI(533, 267, 534);
	  COL_TRI(533, 534, 263);
	  COL_TRI(533, 268, 267);
	  COL_TRI(263, 535, 295);
	  COL_TRI(263, 534, 535);
	  COL_TRI(534, 267, 535);
	  COL_TRI(267, 338, 535);
	  COL_TRI(272, 533, 262);
	  COL_TRI(272, 271, 533);
	  COL_TRI(271, 269, 533);
	  COL_TRI(269, 268, 533);
	  COL_TRI(357, 359, 536);
	  COL_TRI(357, 536, 538);
	  COL_TRI(536, 537, 544);
	  COL_TRI(536, 544, 538);
	  COL_TRI(241, 537, 536);
	  COL_TRI(537, 239, 544);
	  COL_TRI(538, 544, 239);
	  COL_TRI(538, 239, 192);
	  COL_TRI(81, 96, 545);
	  COL_TRI(537, 240, 239);
	  COL_TRI(241, 240, 537);
	  COL_TRI(212, 357, 192);
	  COL_TRI(96, 241, 359);
	  COL_TRI(359, 123, 545);
	  COL_TRI(96, 359, 545);
	  COL_TRI(303, 542, 300);
	  COL_TRI(81, 545, 539);
	  COL_TRI(82, 81, 539);
	  COL_TRI(82, 539, 123);
	  COL_TRI(539, 545, 123);
	  COL_TRI(244, 82, 123);
	  COL_TRI(82, 244, 71);
	  COL_TRI(303, 340, 541);
	  COL_TRI(303, 541, 542);
	  COL_TRI(110, 301, 541);
	  COL_TRI(540, 110, 541);
	  COL_TRI(340, 540, 541);
	  COL_TRI(541, 301, 339);
	  COL_TRI(541, 339, 542);
	  COL_TRI(335, 300, 542);
	  COL_TRI(542, 339, 543);
	  COL_TRI(335, 542, 543);
	  COL_TRI(339, 336, 543);
	  COL_TRI(543, 336, 335);
	  COL_TRI(310, 334, 535);
	  COL_TRI(310, 535, 338);
	  COL_TRI(343, 304, 305);
	  COL_TRI(334, 295, 535);
	  COL_TRI(334, 297, 295);
	  COL_TRI(342, 343, 546);
	  COL_TRI(342, 546, 311);
	  COL_TRI(311, 546, 101);
	  COL_TRI(101, 546, 305);
	  COL_TRI(343, 305, 546);
	  COL_TRI(102, 311, 101);
	  COL_TRI(353, 312, 354);
	  COL_TRI(101, 305, 120);
	  COL_TRI(352, 354, 315);
	  COL_TRI(352, 353, 354);
	  COL_TRI(312, 350, 354);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 167);
	  COL_TRI(251, 362, 208);
	  COL_TRI(251, 360, 362);
	  COL_TRI(211, 361, 251);
	  COL_TRI(361, 360, 251);
	  COL_TRI(208, 362, 364);
	  COL_TRI(208, 364, 207);
	  COL_TRI(207, 364, 477);
	  COL_TRI(207, 477, 250);
	  COL_TRI(250, 477, 252);
	  COL_TRI(477, 476, 252);
	  COL_TRI(252, 475, 210);
	  COL_TRI(252, 476, 475);
	  COL_TRI(547, 146, 549);
	  COL_TRI(210, 475, 363);
	  COL_TRI(210, 363, 165);
	  COL_TRI(165, 363, 361);
	  COL_TRI(165, 361, 211);
	  COL_TRI(171, 172, 547);
	  COL_TRI(171, 547, 548);
	  COL_TRI(145, 549, 146);
	  COL_TRI(171, 548, 182);
	  COL_TRI(548, 549, 144);
	  COL_TRI(145, 144, 549);
	  COL_TRI(144, 182, 548);
	  COL_TRI(550, 90, 552);
	  COL_TRI(549, 548, 547);
	  COL_TRI(146, 547, 172);
	  COL_TRI(149, 91, 550);
	  COL_TRI(149, 550, 551);
	  COL_TRI(74, 552, 90);
	  COL_TRI(149, 551, 147);
	  COL_TRI(551, 552, 148);
	  COL_TRI(74, 148, 552);
	  COL_TRI(148, 147, 551);
	  COL_TRI(153, 553, 221);
	  COL_TRI(552, 551, 550);
	  COL_TRI(90, 550, 91);
	  COL_TRI(153, 206, 553);
	  COL_TRI(206, 76, 555);
	  COL_TRI(553, 555, 286);
	  COL_TRI(553, 286, 287);
	  COL_TRI(554, 553, 287);
	  COL_TRI(221, 554, 150);
	  COL_TRI(75, 150, 554);
	  COL_TRI(75, 554, 555);
	  COL_TRI(555, 283, 284);
	  COL_TRI(554, 221, 553);
	  COL_TRI(75, 555, 76);
	  COL_TRI(555, 553, 206);
	  COL_TRI(555, 284, 286);
	  COL_TRI(554, 287, 283);
	  COL_TRI(555, 554, 283);
	  COL_TRI(556, 224, 223);
	  COL_TRI(557, 226, 225);
	  COL_TRI(556, 559, 224);
	  COL_TRI(224, 559, 222);
	  COL_TRI(558, 556, 557);
	  COL_TRI(222, 559, 151);
	  COL_TRI(220, 558, 227);
	  COL_TRI(559, 558, 152);
	  COL_TRI(558, 219, 152);
	  COL_TRI(219, 558, 220);
	  COL_TRI(151, 559, 152);
	  COL_TRI(558, 559, 556);
	  COL_TRI(557, 227, 558);
	  COL_TRI(557, 225, 227);
	  COL_TRI(557, 556, 226);
	  COL_TRI(223, 226, 556);
	  COL_TRI(158, 560, 229);
	  COL_TRI(167, 562, 159);
	  COL_TRI(229, 560, 561);
	  COL_TRI(229, 561, 230);
	  COL_TRI(560, 160, 562);
	  COL_TRI(230, 561, 164);
	  COL_TRI(561, 562, 167);
	  COL_TRI(561, 167, 166);
	  COL_TRI(164, 561, 166);
	  COL_TRI(159, 562, 160);
	  COL_TRI(562, 561, 560);
	  COL_TRI(160, 560, 228);
	  COL_TRI(560, 158, 228);
	  COL_TRI(563, 565, 564);
	  COL_TRI(563, 175, 176);
	  COL_TRI(564, 183, 563);
	  COL_TRI(564, 565, 170);
	  COL_TRI(169, 564, 170);
	  COL_TRI(183, 184, 563);
	  COL_TRI(565, 563, 176);
	  COL_TRI(564, 181, 180);
	  COL_TRI(170, 565, 173);
	  COL_TRI(173, 565, 176);
	  COL_TRI(181, 564, 169);
	  COL_TRI(183, 564, 180);
	  COL_TRI(124, 388, 387);
	  COL_TRI(563, 184, 185);
	  COL_TRI(174, 563, 185);
	  COL_TRI(175, 563, 174);
	  COL_TRI(124, 387, 566);
	  COL_TRI(124, 260, 567);
	  COL_TRI(124, 567, 390);
	  COL_TRI(124, 390, 389);
	  COL_TRI(124, 389, 388);
	  COL_TRI(566, 387, 495);
	  COL_TRI(416, 124, 566);
	  COL_TRI(416, 566, 569);
	  COL_TRI(566, 495, 569);
	  COL_TRI(390, 567, 568);
	  COL_TRI(390, 568, 497);
	  COL_TRI(567, 260, 568);
	  COL_TRI(260, 306, 568);
	  COL_TRI(568, 306, 446);
	  COL_TRI(568, 446, 569);
	  COL_TRI(568, 569, 495);
	  COL_TRI(568, 495, 494);
	  COL_TRI(431, 293, 413);
	  COL_TRI(568, 494, 496);
	  COL_TRI(568, 496, 497);
	  COL_TRI(415, 416, 569);
	  COL_TRI(415, 569, 446);
	  COL_TRI(446, 506, 505);
	  COL_TRI(431, 511, 293);
	  COL_TRI(511, 290, 293);
	  COL_TRI(291, 290, 511);
	  COL_TRI(291, 511, 412);
	  COL_TRI(293, 292, 413);
	  COL_TRI(292, 291, 412);
	  COL_TRI(413, 292, 412);
	  COL_TRI(479, 449, 480);
	  COL_TRI(479, 528, 449);
	  COL_TRI(479, 478, 528);
	  COL_TRI(449, 447, 480);
	  COL_TRI(394, 457, 459);
	  COL_TRI(529, 369, 480);
	  COL_TRI(529, 480, 447);
	  COL_TRI(478, 369, 528);
	  COL_TRI(369, 529, 528);
	  COL_TRI(437, 455, 457);
	  COL_TRI(437, 521, 455);
	  COL_TRI(394, 437, 457);
	  COL_TRI(521, 143, 455);
	  COL_TRI(460, 424, 532);
	  COL_TRI(456, 522, 458);
	  COL_TRI(138, 456, 139);
	  COL_TRI(522, 423, 458);
	  COL_TRI(458, 424, 460);
	  COL_TRI(458, 423, 424);
	  COL_TRI(394, 459, 396);
	  COL_TRI(459, 531, 396);
	  COL_TRI(424, 425, 532);
	  COL_TRI(425, 463, 532);
	  COL_TRI(425, 428, 463);
	  COL_TRI(462, 463, 428);
	  COL_TRI(429, 462, 428);
	  COL_TRI(464, 257, 531);
	  COL_TRI(461, 217, 464);
	  COL_TRI(217, 257, 464);
	  COL_TRI(257, 396, 531);
	  COL_TRI(462, 429, 466);
	  COL_TRI(429, 421, 466);
	  COL_TRI(410, 505, 507);
	  COL_TRI(511, 461, 465);
	  COL_TRI(511, 217, 461);
	  COL_TRI(412, 511, 465);
	  COL_TRI(412, 465, 514);
	  COL_TRI(466, 421, 419);
	  COL_TRI(421, 420, 419);
	  COL_TRI(505, 506, 507);
	  COL_TRI_INIT(SURFACE_WALL_MISC, 198);
	  COL_TRI(9, 10, 11);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(3, 4, 5);
	  COL_TRI(5, 4, 6);
	  COL_TRI(5, 6, 1);
	  COL_TRI(3, 7, 4);
	  COL_TRI(1, 6, 8);
	  COL_TRI(1, 8, 2);
	  COL_TRI(2, 8, 7);
	  COL_TRI(2, 7, 3);
	  COL_TRI(9, 11, 12);
	  COL_TRI(13, 10, 9);
	  COL_TRI(13, 35, 10);
	  COL_TRI(12, 11, 36);
	  COL_TRI(12, 36, 14);
	  COL_TRI(14, 36, 35);
	  COL_TRI(14, 35, 13);
	  COL_TRI(9, 14, 13);
	  COL_TRI(9, 12, 14);
	  COL_TRI(15, 37, 38);
	  COL_TRI(15, 38, 17);
	  COL_TRI(16, 39, 37);
	  COL_TRI(16, 37, 15);
	  COL_TRI(17, 38, 40);
	  COL_TRI(17, 40, 18);
	  COL_TRI(18, 39, 16);
	  COL_TRI(18, 40, 39);
	  COL_TRI(17, 18, 16);
	  COL_TRI(17, 16, 15);
	  COL_TRI(19, 22, 20);
	  COL_TRI(23, 26, 24);
	  COL_TRI(19, 21, 22);
	  COL_TRI(20, 41, 19);
	  COL_TRI(19, 42, 21);
	  COL_TRI(19, 41, 42);
	  COL_TRI(21, 42, 43);
	  COL_TRI(21, 43, 22);
	  COL_TRI(20, 44, 41);
	  COL_TRI(22, 43, 44);
	  COL_TRI(22, 44, 20);
	  COL_TRI(23, 27, 26);
	  COL_TRI(24, 26, 25);
	  COL_TRI(27, 29, 45);
	  COL_TRI(28, 29, 27);
	  COL_TRI(26, 27, 45);
	  COL_TRI(28, 27, 23);
	  COL_TRI(29, 25, 45);
	  COL_TRI(25, 26, 45);
	  COL_TRI(30, 29, 28);
	  COL_TRI(30, 25, 29);
	  COL_TRI(24, 25, 30);
	  COL_TRI(31, 34, 32);
	  COL_TRI(31, 33, 34);
	  COL_TRI(32, 46, 31);
	  COL_TRI(31, 47, 33);
	  COL_TRI(31, 46, 47);
	  COL_TRI(33, 47, 48);
	  COL_TRI(33, 48, 34);
	  COL_TRI(32, 49, 46);
	  COL_TRI(34, 48, 49);
	  COL_TRI(34, 49, 32);
	  COL_TRI(116, 269, 272);
	  COL_TRI(262, 263, 264);
	  COL_TRI(262, 264, 265);
	  COL_TRI(266, 267, 268);
	  COL_TRI(266, 200, 267);
	  COL_TRI(266, 268, 269);
	  COL_TRI(266, 269, 270);
	  COL_TRI(269, 271, 272);
	  COL_TRI(116, 270, 269);
	  COL_TRI(279, 281, 278);
	  COL_TRI(273, 276, 318);
	  COL_TRI(273, 318, 275);
	  COL_TRI(274, 276, 273);
	  COL_TRI(275, 318, 319);
	  COL_TRI(276, 319, 318);
	  COL_TRI(275, 319, 277);
	  COL_TRI(274, 320, 276);
	  COL_TRI(276, 320, 319);
	  COL_TRI(277, 319, 320);
	  COL_TRI(277, 320, 274);
	  COL_TRI(278, 281, 321);
	  COL_TRI(278, 321, 280);
	  COL_TRI(280, 321, 322);
	  COL_TRI(281, 322, 321);
	  COL_TRI(280, 322, 282);
	  COL_TRI(281, 323, 322);
	  COL_TRI(279, 323, 281);
	  COL_TRI(282, 322, 323);
	  COL_TRI(282, 323, 279);
	  COL_TRI(283, 324, 285);
	  COL_TRI(283, 285, 284);
	  COL_TRI(284, 285, 325);
	  COL_TRI(285, 324, 326);
	  COL_TRI(285, 326, 325);
	  COL_TRI(286, 326, 287);
	  COL_TRI(287, 326, 324);
	  COL_TRI(286, 325, 326);
	  COL_TRI(284, 325, 286);
	  COL_TRI(287, 324, 283);
	  COL_TRI(198, 327, 243);
	  COL_TRI(198, 288, 327);
	  COL_TRI(216, 288, 198);
	  COL_TRI(243, 327, 328);
	  COL_TRI(288, 328, 327);
	  COL_TRI(292, 332, 291);
	  COL_TRI(243, 328, 242);
	  COL_TRI(288, 329, 328);
	  COL_TRI(216, 329, 288);
	  COL_TRI(242, 328, 329);
	  COL_TRI(242, 329, 216);
	  COL_TRI(289, 330, 331);
	  COL_TRI(289, 332, 330);
	  COL_TRI(290, 289, 331);
	  COL_TRI(291, 289, 290);
	  COL_TRI(291, 332, 289);
	  COL_TRI(292, 330, 332);
	  COL_TRI(293, 330, 292);
	  COL_TRI(293, 331, 330);
	  COL_TRI(290, 331, 293);
	  COL_TRI(298, 337, 335);
	  COL_TRI(263, 295, 294);
	  COL_TRI(263, 294, 264);
	  COL_TRI(294, 295, 333);
	  COL_TRI(295, 297, 333);
	  COL_TRI(296, 333, 297);
	  COL_TRI(297, 334, 310);
	  COL_TRI(296, 297, 310);
	  COL_TRI(298, 335, 336);
	  COL_TRI(301, 110, 215);
	  COL_TRI(298, 336, 339);
	  COL_TRI(299, 300, 337);
	  COL_TRI(300, 335, 337);
	  COL_TRI(215, 339, 301);
	  COL_TRI(215, 254, 339);
	  COL_TRI(298, 339, 254);
	  COL_TRI(195, 123, 304);
	  COL_TRI(110, 253, 215);
	  COL_TRI(302, 340, 303);
	  COL_TRI(302, 341, 340);
	  COL_TRI(303, 300, 302);
	  COL_TRI(300, 299, 302);
	  COL_TRI(195, 304, 342);
	  COL_TRI(260, 261, 344);
	  COL_TRI(304, 343, 342);
	  COL_TRI(305, 304, 122);
	  COL_TRI(304, 123, 122);
	  COL_TRI(194, 342, 311);
	  COL_TRI(194, 195, 342);
	  COL_TRI(306, 260, 344);
	  COL_TRI(54, 348, 347);
	  COL_TRI(261, 308, 345);
	  COL_TRI(261, 345, 307);
	  COL_TRI(261, 307, 344);
	  COL_TRI(307, 346, 344);
	  COL_TRI(307, 345, 346);
	  COL_TRI(308, 346, 345);
	  COL_TRI(308, 306, 346);
	  COL_TRI(306, 344, 346);
	  COL_TRI(108, 54, 347);
	  COL_TRI(54, 259, 348);
	  COL_TRI(200, 205, 338);
	  COL_TRI(309, 347, 348);
	  COL_TRI(309, 348, 349);
	  COL_TRI(259, 349, 348);
	  COL_TRI(108, 347, 309);
	  COL_TRI(259, 105, 349);
	  COL_TRI(108, 349, 105);
	  COL_TRI(108, 309, 349);
	  COL_TRI(310, 205, 296);
	  COL_TRI(310, 338, 205);
	  COL_TRI(200, 338, 267);
	  COL_TRI(311, 102, 194);
	  COL_TRI(102, 104, 194);
	  COL_TRI(120, 305, 118);
	  COL_TRI(104, 120, 101);
	  COL_TRI(104, 118, 120);
	  COL_TRI(305, 122, 118);
	  COL_TRI(312, 314, 350);
	  COL_TRI(312, 351, 314);
	  COL_TRI(313, 351, 312);
	  COL_TRI(95, 314, 351);
	  COL_TRI(314, 315, 350);
	  COL_TRI(314, 95, 315);
	  COL_TRI(315, 354, 350);
	  COL_TRI(95, 351, 313);
	  COL_TRI(313, 312, 352);
	  COL_TRI(312, 353, 352);
	  COL_TRI(315, 313, 352);
	  COL_TRI(315, 95, 313);
	  COL_TRI(317, 316, 356);
	  COL_TRI(104, 101, 102);
	  COL_TRI(316, 355, 356);
	  COL_TRI(262, 264, 265);
	  COL_TRI(262, 263, 264);
	  COL_TRI(116, 262, 265);
	  COL_TRI(116, 272, 262);
	  COL_TRI_INIT(SURFACE_NOISE_DEFAULT, 141);
	  COL_TRI(134, 144, 133);
	  COL_TRI(133, 145, 146);
	  COL_TRI(144, 145, 133);
	  COL_TRI(117, 133, 146);
	  COL_TRI(72, 75, 147);
	  COL_TRI(148, 72, 147);
	  COL_TRI(72, 148, 74);
	  COL_TRI(75, 91, 149);
	  COL_TRI(75, 149, 147);
	  COL_TRI(150, 75, 72);
	  COL_TRI(151, 152, 153);
	  COL_TRI(152, 219, 153);
	  COL_TRI(153, 219, 220);
	  COL_TRI(154, 151, 153);
	  COL_TRI(155, 153, 220);
	  COL_TRI(87, 206, 153);
	  COL_TRI(155, 156, 153);
	  COL_TRI(156, 87, 153);
	  COL_TRI(157, 153, 221);
	  COL_TRI(154, 222, 151);
	  COL_TRI(154, 223, 224);
	  COL_TRI(154, 155, 223);
	  COL_TRI(154, 224, 222);
	  COL_TRI(155, 225, 226);
	  COL_TRI(155, 226, 223);
	  COL_TRI(155, 220, 227);
	  COL_TRI(155, 227, 225);
	  COL_TRI(158, 162, 228);
	  COL_TRI(112, 158, 229);
	  COL_TRI(112, 162, 158);
	  COL_TRI(159, 160, 162);
	  COL_TRI(160, 228, 162);
	  COL_TRI(161, 159, 162);
	  COL_TRI(162, 112, 163);
	  COL_TRI(163, 231, 162);
	  COL_TRI(112, 230, 164);
	  COL_TRI(112, 229, 230);
	  COL_TRI(112, 166, 161);
	  COL_TRI(164, 166, 112);
	  COL_TRI(165, 112, 232);
	  COL_TRI(166, 167, 161);
	  COL_TRI(167, 159, 161);
	  COL_TRI(161, 232, 112);
	  COL_TRI(168, 154, 153);
	  COL_TRI(168, 153, 233);
	  COL_TRI(157, 233, 153);
	  COL_TRI(169, 170, 134);
	  COL_TRI(170, 117, 134);
	  COL_TRI(117, 178, 115);
	  COL_TRI(117, 171, 134);
	  COL_TRI(117, 172, 171);
	  COL_TRI(117, 146, 172);
	  COL_TRI(117, 173, 176);
	  COL_TRI(117, 174, 179);
	  COL_TRI(117, 175, 174);
	  COL_TRI(117, 176, 175);
	  COL_TRI(117, 170, 173);
	  COL_TRI(177, 178, 117);
	  COL_TRI(177, 117, 179);
	  COL_TRI(174, 185, 179);
	  COL_TRI(179, 180, 134);
	  COL_TRI(180, 181, 134);
	  COL_TRI(181, 169, 134);
	  COL_TRI(171, 182, 134);
	  COL_TRI(182, 144, 134);
	  COL_TRI(47, 134, 212);
	  COL_TRI(189, 190, 187);
	  COL_TRI(183, 180, 179);
	  COL_TRI(184, 183, 179);
	  COL_TRI(185, 184, 179);
	  COL_TRI(186, 235, 236);
	  COL_TRI(187, 186, 236);
	  COL_TRI(186, 188, 235);
	  COL_TRI(188, 237, 235);
	  COL_TRI(189, 187, 236);
	  COL_TRI(190, 238, 187);
	  COL_TRI(190, 191, 238);
	  COL_TRI(191, 188, 238);
	  COL_TRI(191, 237, 188);
	  COL_TRI(192, 239, 240);
	  COL_TRI(192, 240, 241);
	  COL_TRI(193, 47, 212);
	  COL_TRI(47, 179, 134);
	  COL_TRI(47, 177, 179);
	  COL_TRI(194, 104, 196);
	  COL_TRI(195, 122, 194);
	  COL_TRI(194, 122, 104);
	  COL_TRI(195, 123, 122);
	  COL_TRI(122, 118, 104);
	  COL_TRI(196, 104, 242);
	  COL_TRI(100, 242, 104);
	  COL_TRI(163, 112, 197);
	  COL_TRI(123, 195, 244);
	  COL_TRI(99, 196, 216);
	  COL_TRI(197, 245, 163);
	  COL_TRI(130, 246, 197);
	  COL_TRI(99, 216, 198);
	  COL_TRI(99, 198, 100);
	  COL_TRI(100, 198, 243);
	  COL_TRI(100, 243, 242);
	  COL_TRI(112, 130, 197);
	  COL_TRI(130, 247, 246);
	  COL_TRI(115, 234, 199);
	  COL_TRI(47, 205, 199);
	  COL_TRI(47, 199, 177);
	  COL_TRI(199, 200, 115);
	  COL_TRI(200, 201, 115);
	  COL_TRI(201, 116, 115);
	  COL_TRI(178, 234, 115);
	  COL_TRI(202, 204, 248);
	  COL_TRI(203, 204, 202);
	  COL_TRI(204, 249, 248);
	  COL_TRI(72, 157, 150);
	  COL_TRI(157, 221, 150);
	  COL_TRI(205, 200, 199);
	  COL_TRI(202, 209, 203);
	  COL_TRI(76, 206, 58);
	  COL_TRI(206, 87, 58);
	  COL_TRI(207, 250, 127);
	  COL_TRI(208, 207, 127);
	  COL_TRI(208, 127, 128);
	  COL_TRI(128, 251, 208);
	  COL_TRI(165, 211, 128);
	  COL_TRI(127, 250, 202);
	  COL_TRI(202, 250, 209);
	  COL_TRI(209, 250, 252);
	  COL_TRI(210, 165, 232);
	  COL_TRI(112, 165, 128);
	  COL_TRI(211, 251, 128);
	  COL_TRI(96, 212, 241);
	  COL_TRI(212, 192, 241);
	  COL_TRI(213, 253, 215);
	  COL_TRI(214, 213, 254);
	  COL_TRI(215, 254, 213);
	  COL_TRI(193, 212, 96);
	  COL_TRI(196, 99, 135);
	  COL_TRI(216, 196, 242);
	  COL_TRI(213, 214, 255);
	  COL_TRI(213, 255, 256);
	  COL_TRI(217, 218, 257);
	  COL_TRI(218, 258, 257);
	  COL_TRI_INIT(SURFACE_NOISE_SLIPPERY, 43);
	  COL_TRI(107, 105, 106);
	  COL_TRI(97, 98, 99);
	  COL_TRI(97, 99, 100);
	  COL_TRI(101, 97, 102);
	  COL_TRI(101, 103, 97);
	  COL_TRI(104, 97, 100);
	  COL_TRI(104, 102, 97);
	  COL_TRI(105, 99, 106);
	  COL_TRI(98, 106, 99);
	  COL_TRI(107, 108, 105);
	  COL_TRI(109, 72, 125);
	  COL_TRI(110, 72, 109);
	  COL_TRI(110, 109, 126);
	  COL_TRI(72, 108, 107);
	  COL_TRI(72, 107, 125);
	  COL_TRI(110, 111, 127);
	  COL_TRI(110, 126, 111);
	  COL_TRI(111, 113, 112);
	  COL_TRI(112, 128, 111);
	  COL_TRI(113, 129, 112);
	  COL_TRI(112, 129, 130);
	  COL_TRI(113, 114, 129);
	  COL_TRI(111, 128, 127);
	  COL_TRI(114, 115, 116);
	  COL_TRI(115, 114, 131);
	  COL_TRI(115, 131, 132);
	  COL_TRI(116, 129, 114);
	  COL_TRI(117, 132, 119);
	  COL_TRI(115, 132, 117);
	  COL_TRI(117, 121, 133);
	  COL_TRI(118, 117, 119);
	  COL_TRI(101, 119, 103);
	  COL_TRI(101, 120, 119);
	  COL_TRI(119, 120, 118);
	  COL_TRI(121, 122, 133);
	  COL_TRI(118, 122, 121);
	  COL_TRI(122, 123, 133);
	  COL_TRI(123, 134, 133);
	  COL_TRI(124, 135, 99);
	  COL_TRI(99, 105, 124);
	  COL_TRI(117, 118, 136);
	  COL_TRI(118, 121, 136);
	  COL_TRI(121, 117, 136);
	  COL_TRI_INIT(SURFACE_BOSS_FIGHT_CAMERA, 5);
	  COL_TRI(137, 139, 143);
	  COL_TRI(137, 138, 139);
	  COL_TRI(137, 140, 141);
	  COL_TRI(137, 142, 140);
	  COL_TRI(137, 141, 138);
	  COL_TRI_INIT(SURFACE_CAMERA_ROTATE_LEFT, 4);
	  COL_TRI(259, 124, 105);
	  COL_TRI(54, 260, 259);
	  COL_TRI(54, 261, 260);
	  COL_TRI(260, 124, 259);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(17);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree, /*pos*/ -5792, 1024, -4654);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree, /*pos*/ -1509,  144,  5094);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree, /*pos*/ -4095,  768,  3072);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree, /*pos*/ -5119,  768,  2048);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree, /*pos*/  5444,  863,  6016);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree, /*pos*/ -6655,  768,  3584);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree, /*pos*/ -6130,  900, -6507);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree, /*pos*/ -6804, 1024, -4866);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree, /*pos*/  6033, 2194, -7660);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree, /*pos*/ -4095,  768,  1536);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree, /*pos*/ -4268,    0,  4768);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree, /*pos*/ -3583,  768,  2560);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree, /*pos*/ -6172, 1024,  -430);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree, /*pos*/  4096, 3072,  1638);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree, /*pos*/  6799, 2008, -5587);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree, /*pos*/  2911,  768,  5917);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree, /*pos*/  4208,  927,  3772);
	  COL_END();
	}

	function bob_seg7_collision_chain_chomp_gate() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x4);
	  COL_VERTEX(512, 0, 0);
	  COL_VERTEX(512, 640, 0);
	  COL_VERTEX(-511, 640, 0);
	  COL_VERTEX(-511, 0, 0);
	  COL_TRI_INIT(SURFACE_DEFAULT, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(3, 0, 2);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bob_seg7_collision_gate() {
	  COL_INIT();
	  COL_VERTEX_INIT(0xF);
	  COL_VERTEX(320, 0, -20);
	  COL_VERTEX(0, 0, -19);
	  COL_VERTEX(0, 384, -19);
	  COL_VERTEX(1, 384, 21);
	  COL_VERTEX(1, 0, 21);
	  COL_VERTEX(129, 640, 21);
	  COL_VERTEX(128, 640, -19);
	  COL_VERTEX(320, 640, -20);
	  COL_VERTEX(321, 0, 20);
	  COL_VERTEX(321, 640, 20);
	  COL_VERTEX(0, 384, 21);
	  COL_VERTEX(0, 0, 21);
	  COL_VERTEX(320, 0, 20);
	  COL_VERTEX(320, 640, 20);
	  COL_VERTEX(128, 640, 21);
	  COL_TRI_INIT(SURFACE_NO_CAM_COLLISION, 14);
	  COL_TRI(9, 7, 6);
	  COL_TRI(0, 1, 2);
	  COL_TRI(3, 2, 1);
	  COL_TRI(3, 1, 4);
	  COL_TRI(5, 6, 2);
	  COL_TRI(5, 2, 3);
	  COL_TRI(6, 7, 2);
	  COL_TRI(7, 0, 2);
	  COL_TRI(8, 0, 7);
	  COL_TRI(8, 7, 9);
	  COL_TRI(9, 6, 5);
	  COL_TRI(10, 12, 13);
	  COL_TRI(10, 11, 12);
	  COL_TRI(10, 13, 14);
	  COL_TRI_STOP();
	  COL_END();
	}

	function bob_seg7_collision_bridge() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(-180, 51, -904);
	  COL_VERTEX(-180, 0, -904);
	  COL_VERTEX(-180, 51, 905);
	  COL_VERTEX(181, 0, -904);
	  COL_VERTEX(-180, 0, 905);
	  COL_VERTEX(181, 0, 905);
	  COL_VERTEX(181, 51, -904);
	  COL_VERTEX(181, 51, 905);
	  COL_TRI_INIT(SURFACE_DEFAULT, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(3, 1, 0);
	  COL_TRI(1, 4, 2);
	  COL_TRI(1, 3, 5);
	  COL_TRI(4, 1, 5);
	  COL_TRI(3, 0, 6);
	  COL_TRI(5, 3, 6);
	  COL_TRI(4, 5, 7);
	  COL_TRI(7, 5, 6);
	  COL_TRI(4, 7, 2);
	  COL_TRI(6, 0, 2);
	  COL_TRI(7, 6, 2);
	  COL_TRI_STOP();
	  COL_END();
	}

	var bob = [
	  bob_seg7_collision_level,
	  bob_seg7_collision_chain_chomp_gate,
	  bob_seg7_collision_gate,
	  bob_seg7_collision_bridge
	];

	function bowser_1_seg7_collision_level() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x1D);
	  COL_VERTEX(2172, 307, -2171);
	  COL_VERTEX(0, 307, -3071);
	  COL_VERTEX(1086, 307, -1085);
	  COL_VERTEX(-2171, 307, -2171);
	  COL_VERTEX(0, 307, -1535);
	  COL_VERTEX(-2171, 307, 2172);
	  COL_VERTEX(0, -2047, 3072);
	  COL_VERTEX(0, 307, 3072);
	  COL_VERTEX(-3071, -2047, 0);
	  COL_VERTEX(-3071, 307, 0);
	  COL_VERTEX(-2171, -2047, 2172);
	  COL_VERTEX(-1535, 307, 0);
	  COL_VERTEX(-1085, 307, -1085);
	  COL_VERTEX(-1085, 307, 1086);
	  COL_VERTEX(-2171, -2047, -2171);
	  COL_VERTEX(0, 307, 1536);
	  COL_VERTEX(3072, 307, 0);
	  COL_VERTEX(0, -2047, -3071);
	  COL_VERTEX(2172, -2047, 2172);
	  COL_VERTEX(3072, -2047, 0);
	  COL_VERTEX(2172, 307, 2172);
	  COL_VERTEX(2172, -2047, -2171);
	  COL_VERTEX(1536, 307, 0);
	  COL_VERTEX(1086, 307, 1086);
	  COL_VERTEX(0, 307, 0);
	  COL_VERTEX(7168, -6143, -7167);
	  COL_VERTEX(-7167, -6143, -7167);
	  COL_VERTEX(-7167, -6143, 7168);
	  COL_VERTEX(7168, -6143, 7168);
	  COL_TRI_INIT(SURFACE_DEFAULT, 40);
	  COL_TRI(5, 6, 7);
	  COL_TRI(0, 1, 2);
	  COL_TRI(1, 3, 4);
	  COL_TRI(5, 7, 15);
	  COL_TRI(8, 9, 3);
	  COL_TRI(10, 9, 8);
	  COL_TRI(10, 5, 9);
	  COL_TRI(9, 11, 12);
	  COL_TRI(9, 13, 11);
	  COL_TRI(9, 5, 13);
	  COL_TRI(9, 12, 3);
	  COL_TRI(4, 3, 12);
	  COL_TRI(8, 3, 14);
	  COL_TRI(14, 3, 1);
	  COL_TRI(6, 5, 10);
	  COL_TRI(5, 15, 13);
	  COL_TRI(7, 20, 23);
	  COL_TRI(2, 1, 4);
	  COL_TRI(16, 0, 2);
	  COL_TRI(16, 2, 22);
	  COL_TRI(14, 1, 17);
	  COL_TRI(17, 1, 0);
	  COL_TRI(18, 20, 7);
	  COL_TRI(18, 7, 6);
	  COL_TRI(7, 23, 15);
	  COL_TRI(17, 0, 21);
	  COL_TRI(19, 20, 18);
	  COL_TRI(19, 16, 20);
	  COL_TRI(20, 22, 23);
	  COL_TRI(20, 16, 22);
	  COL_TRI(21, 16, 19);
	  COL_TRI(21, 0, 16);
	  COL_TRI(11, 24, 12);
	  COL_TRI(13, 24, 11);
	  COL_TRI(2, 24, 22);
	  COL_TRI(24, 2, 4);
	  COL_TRI(23, 24, 15);
	  COL_TRI(24, 4, 12);
	  COL_TRI(15, 24, 13);
	  COL_TRI(22, 24, 23);
	  COL_TRI_INIT(SURFACE_DEATH_PLANE, 2);
	  COL_TRI(25, 26, 27);
	  COL_TRI(25, 27, 28);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(22);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start,   /*pos*/     0, 1843,     0, /*yaw*/ 1423); // unused, probably an early way to set initial position
	  SPECIAL_OBJECT(/*preset*/ special_mine,         /*pos*/  2949,  589,     0);
	  SPECIAL_OBJECT(/*preset*/ special_mine,         /*pos*/     0,  589, -2949);
	  SPECIAL_OBJECT(/*preset*/ special_mine,         /*pos*/     0,  589,  2949);
	  SPECIAL_OBJECT(/*preset*/ special_mine,         /*pos*/ -2949,  589,     0);
	  SPECIAL_OBJECT(/*preset*/ special_bowser,       /*pos*/     0,  300, -1000);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03, /*pos*/     0,  384,  3072, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03, /*pos*/ -2171,  384, -2171, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03, /*pos*/     0,  384, -3071, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03, /*pos*/ -3071,  384,     0, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03, /*pos*/ -2171,  384,  2172, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03, /*pos*/ -2621,  384,  1086, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03, /*pos*/  2172,  384,  2172, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03, /*pos*/  3072,  384,     0, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03, /*pos*/  2172,  384, -2171, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03, /*pos*/ -1085,  384,  2622, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03, /*pos*/  2622,  384,  1086, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03, /*pos*/ -2621,  384, -1085, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03, /*pos*/ -1085,  384, -2621, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03, /*pos*/  1086,  384, -2621, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03, /*pos*/  2622,  384, -1085, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03, /*pos*/  1086,  384,  2622, /*yaw*/    0);
	  COL_END();
	}

	var bowser_1 = [
	  bowser_1_seg7_collision_level
	];

	function castle_courtyard_seg7_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x127);
	  COL_VERTEX(9, 240, -1735);
	  COL_VERTEX(-88, 203, -1735);
	  COL_VERTEX(9, 311, -1781);
	  COL_VERTEX(-65, 285, -1735);
	  COL_VERTEX(9, 311, -1689);
	  COL_VERTEX(-122, 350, -1735);
	  COL_VERTEX(58, 358, -1735);
	  COL_VERTEX(140, 350, -1735);
	  COL_VERTEX(83, 285, -1735);
	  COL_VERTEX(106, 203, -1735);
	  COL_VERTEX(-39, 358, -1735);
	  COL_VERTEX(9, 433, -1735);
	  COL_VERTEX(214, -50, -1893);
	  COL_VERTEX(-195, -50, -1893);
	  COL_VERTEX(111, 205, -1791);
	  COL_VERTEX(214, -50, -1586);
	  COL_VERTEX(-195, -50, -1586);
	  COL_VERTEX(111, 205, -1689);
	  COL_VERTEX(-93, 205, -1689);
	  COL_VERTEX(-93, 205, -1791);
	  COL_VERTEX(-306, 512, 1126);
	  COL_VERTEX(-306, 0, 1126);
	  COL_VERTEX(-306, 0, 512);
	  COL_VERTEX(307, 0, 512);
	  COL_VERTEX(77, 0, 512);
	  COL_VERTEX(-76, 0, 512);
	  COL_VERTEX(307, 512, 1126);
	  COL_VERTEX(307, 0, 1126);
	  COL_VERTEX(-921, 0, 410);
	  COL_VERTEX(-921, 0, 512);
	  COL_VERTEX(-716, 0, 410);
	  COL_VERTEX(-306, 0, 410);
	  COL_VERTEX(-613, 0, 307);
	  COL_VERTEX(-306, 512, 512);
	  COL_VERTEX(307, 512, 512);
	  COL_VERTEX(922, 0, 512);
	  COL_VERTEX(922, 0, 410);
	  COL_VERTEX(77, 256, 512);
	  COL_VERTEX(-76, 256, 512);
	  COL_VERTEX(77, 256, 410);
	  COL_VERTEX(922, 2048, 512);
	  COL_VERTEX(-921, 2048, 512);
	  COL_VERTEX(307, 512, 410);
	  COL_VERTEX(2253, -204, 205);
	  COL_VERTEX(2253, 0, 205);
	  COL_VERTEX(-1330, -204, 205);
	  COL_VERTEX(-2252, 2048, 205);
	  COL_VERTEX(-1228, 102, 282);
	  COL_VERTEX(-1331, 2047, 205);
	  COL_VERTEX(-2252, 2048, 102);
	  COL_VERTEX(2662, 2150, 512);
	  COL_VERTEX(2253, 2048, 205);
	  COL_VERTEX(2253, 2150, 102);
	  COL_VERTEX(1331, 2150, 102);
	  COL_VERTEX(922, 2150, 410);
	  COL_VERTEX(-921, 2150, 410);
	  COL_VERTEX(-1330, 2150, 102);
	  COL_VERTEX(-2252, 2150, 102);
	  COL_VERTEX(-2559, 2048, 512);
	  COL_VERTEX(-1228, 0, 282);
	  COL_VERTEX(-2559, 0, 512);
	  COL_VERTEX(-306, 512, 410);
	  COL_VERTEX(-3583, 20, 205);
	  COL_VERTEX(-3071, 20, 717);
	  COL_VERTEX(-3583, 819, 205);
	  COL_VERTEX(-2559, 819, 717);
	  COL_VERTEX(-2866, 0, 717);
	  COL_VERTEX(-2938, 20, 317);
	  COL_VERTEX(-2938, 20, 717);
	  COL_VERTEX(2560, 819, 717);
	  COL_VERTEX(2560, 2048, 512);
	  COL_VERTEX(2662, 2048, 512);
	  COL_VERTEX(1331, 2048, 205);
	  COL_VERTEX(1331, 102, 205);
	  COL_VERTEX(1229, 2, 282);
	  COL_VERTEX(77, 0, 410);
	  COL_VERTEX(614, 0, 307);
	  COL_VERTEX(307, 0, 410);
	  COL_VERTEX(-76, 256, 410);
	  COL_VERTEX(3584, 819, -3071);
	  COL_VERTEX(3379, 0, -3071);
	  COL_VERTEX(3584, 0, 0);
	  COL_VERTEX(3072, 20, 717);
	  COL_VERTEX(3072, 819, 717);
	  COL_VERTEX(3072, 2048, -3583);
	  COL_VERTEX(3072, 819, -3583);
	  COL_VERTEX(2662, 0, -3583);
	  COL_VERTEX(1331, -204, -3583);
	  COL_VERTEX(1331, 0, -3583);
	  COL_VERTEX(3072, 2048, -3378);
	  COL_VERTEX(3072, 0, -3173);
	  COL_VERTEX(3574, 2048, -3071);
	  COL_VERTEX(3379, 2048, -3071);
	  COL_VERTEX(614, 102, -2005);
	  COL_VERTEX(614, 0, -2559);
	  COL_VERTEX(265, 102, -2354);
	  COL_VERTEX(-613, 0, -2559);
	  COL_VERTEX(614, 0, -2005);
	  COL_VERTEX(265, 0, -2354);
	  COL_VERTEX(-264, 102, -2354);
	  COL_VERTEX(-818, 0, -2354);
	  COL_VERTEX(-264, 0, -2354);
	  COL_VERTEX(-818, 0, -1125);
	  COL_VERTEX(-613, 102, -2005);
	  COL_VERTEX(-613, 102, -1475);
	  COL_VERTEX(-613, 0, -921);
	  COL_VERTEX(-613, 0, -2005);
	  COL_VERTEX(265, 102, -1125);
	  COL_VERTEX(614, 0, -921);
	  COL_VERTEX(-264, 0, -1125);
	  COL_VERTEX(-613, 0, -1475);
	  COL_VERTEX(614, 102, -1475);
	  COL_VERTEX(265, 0, -1125);
	  COL_VERTEX(819, 0, -1125);
	  COL_VERTEX(819, 0, -2354);
	  COL_VERTEX(922, 0, 0);
	  COL_VERTEX(-921, 0, 0);
	  COL_VERTEX(-1228, 0, -1023);
	  COL_VERTEX(1229, 0, -1023);
	  COL_VERTEX(614, 0, -1475);
	  COL_VERTEX(-612, 0, -3522);
	  COL_VERTEX(-1022, 0, -3522);
	  COL_VERTEX(-1330, 0, -2457);
	  COL_VERTEX(-1330, 0, -3583);
	  COL_VERTEX(718, 0, -3420);
	  COL_VERTEX(923, 0, -3420);
	  COL_VERTEX(1331, 0, -2457);
	  COL_VERTEX(1024, 0, 102);
	  COL_VERTEX(1741, -101, -2047);
	  COL_VERTEX(1741, 0, -2047);
	  COL_VERTEX(-2661, -204, -3583);
	  COL_VERTEX(-1330, -101, -2764);
	  COL_VERTEX(-1740, 0, -2047);
	  COL_VERTEX(-1330, -204, -716);
	  COL_VERTEX(-1330, -101, -716);
	  COL_VERTEX(-1330, -204, -2764);
	  COL_VERTEX(-2252, -204, 205);
	  COL_VERTEX(-3071, 0, -613);
	  COL_VERTEX(-3071, -204, -613);
	  COL_VERTEX(1331, 102, -1023);
	  COL_VERTEX(1229, 102, 282);
	  COL_VERTEX(1331, -204, 205);
	  COL_VERTEX(1946, -204, -2149);
	  COL_VERTEX(1946, -101, -1330);
	  COL_VERTEX(1331, -101, -716);
	  COL_VERTEX(-1740, -101, -1433);
	  COL_VERTEX(-1330, -101, -1023);
	  COL_VERTEX(-1740, -101, -2047);
	  COL_VERTEX(-1330, -101, -2459);
	  COL_VERTEX(-1945, -101, -2149);
	  COL_VERTEX(-1945, -204, -1330);
	  COL_VERTEX(-1330, 102, 205);
	  COL_VERTEX(-1330, 0, -1023);
	  COL_VERTEX(-1945, -101, -1330);
	  COL_VERTEX(2560, 0, 512);
	  COL_VERTEX(2867, 0, 717);
	  COL_VERTEX(2867, 0, 307);
	  COL_VERTEX(3174, 0, 0);
	  COL_VERTEX(3072, 0, -613);
	  COL_VERTEX(2939, 20, 717);
	  COL_VERTEX(3584, 20, 71);
	  COL_VERTEX(-3583, 819, -3071);
	  COL_VERTEX(-3583, 2048, -3071);
	  COL_VERTEX(-3071, 0, -3378);
	  COL_VERTEX(-3378, 2048, -3071);
	  COL_VERTEX(-3071, 0, -3173);
	  COL_VERTEX(-3071, 2048, -3378);
	  COL_VERTEX(-3071, 0, -3583);
	  COL_VERTEX(-1330, 819, -3583);
	  COL_VERTEX(-2252, 0, 205);
	  COL_VERTEX(-3184, 20, 71);
	  COL_VERTEX(-3583, 20, 71);
	  COL_VERTEX(1229, 102, -1023);
	  COL_VERTEX(-1740, 0, -1433);
	  COL_VERTEX(-1023, 0, 102);
	  COL_VERTEX(-1330, 102, -1023);
	  COL_VERTEX(-1228, 102, -1023);
	  COL_VERTEX(1741, 0, -1433);
	  COL_VERTEX(1331, 0, -1023);
	  COL_VERTEX(1331, -101, -2459);
	  COL_VERTEX(1331, -101, -2764);
	  COL_VERTEX(1331, -204, -2764);
	  COL_VERTEX(1025, 0, -3727);
	  COL_VERTEX(1025, 0, -3522);
	  COL_VERTEX(973, 0, -3839);
	  COL_VERTEX(2662, -204, -3583);
	  COL_VERTEX(-972, 0, -3839);
	  COL_VERTEX(-1022, 0, -3727);
	  COL_VERTEX(-653, 20, -3543);
	  COL_VERTEX(-653, 20, -3707);
	  COL_VERTEX(-919, 0, -3830);
	  COL_VERTEX(-899, 20, -3789);
	  COL_VERTEX(-981, 20, -3707);
	  COL_VERTEX(-919, 0, -3420);
	  COL_VERTEX(-612, 0, -3727);
	  COL_VERTEX(984, 20, -3543);
	  COL_VERTEX(984, 20, -3707);
	  COL_VERTEX(738, 20, -3789);
	  COL_VERTEX(718, 0, -3830);
	  COL_VERTEX(616, 0, -3727);
	  COL_VERTEX(657, 20, -3707);
	  COL_VERTEX(738, 20, -3461);
	  COL_VERTEX(902, 20, -3461);
	  COL_VERTEX(-736, 20, 369);
	  COL_VERTEX(-982, 20, 287);
	  COL_VERTEX(-982, 20, 123);
	  COL_VERTEX(-1023, 0, 307);
	  COL_VERTEX(-900, 20, 41);
	  COL_VERTEX(-736, 20, 41);
	  COL_VERTEX(-716, 0, 0);
	  COL_VERTEX(-654, 20, 287);
	  COL_VERTEX(901, 20, 369);
	  COL_VERTEX(655, 20, 287);
	  COL_VERTEX(655, 20, 123);
	  COL_VERTEX(614, 0, 102);
	  COL_VERTEX(983, 20, 287);
	  COL_VERTEX(717, 0, 410);
	  COL_VERTEX(-76, 0, 410);
	  COL_VERTEX(-1330, 2048, 102);
	  COL_VERTEX(-921, 2048, 410);
	  COL_VERTEX(2253, 2048, 102);
	  COL_VERTEX(1331, 2048, 102);
	  COL_VERTEX(922, 2048, 410);
	  COL_VERTEX(-2661, 2048, 512);
	  COL_VERTEX(-2661, 2150, 512);
	  COL_VERTEX(-2559, 0, 717);
	  COL_VERTEX(-2866, 0, 307);
	  COL_VERTEX(-3071, 819, 717);
	  COL_VERTEX(-3583, 0, -3071);
	  COL_VERTEX(-3583, 0, 0);
	  COL_VERTEX(-3173, 0, 0);
	  COL_VERTEX(2560, 0, 717);
	  COL_VERTEX(2560, 713, 512);
	  COL_VERTEX(-613, 0, 102);
	  COL_VERTEX(1024, 0, 307);
	  COL_VERTEX(3584, 0, -3071);
	  COL_VERTEX(3584, 819, 205);
	  COL_VERTEX(3584, 20, 205);
	  COL_VERTEX(3072, 0, -3378);
	  COL_VERTEX(3185, 20, 71);
	  COL_VERTEX(3072, 0, -3583);
	  COL_VERTEX(1331, 819, -3583);
	  COL_VERTEX(3072, -204, -3173);
	  COL_VERTEX(614, 102, -2559);
	  COL_VERTEX(819, 102, -2354);
	  COL_VERTEX(-613, 102, -2559);
	  COL_VERTEX(-715, 0, -3420);
	  COL_VERTEX(-818, 102, -2354);
	  COL_VERTEX(-818, 102, -1125);
	  COL_VERTEX(-613, 102, -921);
	  COL_VERTEX(-264, 102, -1125);
	  COL_VERTEX(614, 102, -921);
	  COL_VERTEX(819, 102, -1125);
	  COL_VERTEX(717, 0, 0);
	  COL_VERTEX(737, 20, 41);
	  COL_VERTEX(901, 20, 41);
	  COL_VERTEX(983, 20, 123);
	  COL_VERTEX(-972, 819, -3839);
	  COL_VERTEX(-1330, -204, -3583);
	  COL_VERTEX(-735, 20, -3461);
	  COL_VERTEX(-981, 20, -3543);
	  COL_VERTEX(616, 0, -3522);
	  COL_VERTEX(1741, -101, -1433);
	  COL_VERTEX(1331, -101, -1023);
	  COL_VERTEX(-3378, 0, -3071);
	  COL_VERTEX(-3071, -204, -3173);
	  COL_VERTEX(1331, -204, -716);
	  COL_VERTEX(1946, -101, -2149);
	  COL_VERTEX(1946, -204, -1330);
	  COL_VERTEX(-1945, -204, -2149);
	  COL_VERTEX(2939, 20, 317);
	  COL_VERTEX(3072, -204, -613);
	  COL_VERTEX(-3071, 819, -3583);
	  COL_VERTEX(-2661, 0, -3583);
	  COL_VERTEX(-3071, 2048, -3583);
	  COL_VERTEX(-1228, 100, 282);
	  COL_VERTEX(1330, 0, -2458);
	  COL_VERTEX(923, 0, -3830);
	  COL_VERTEX(973, 819, -3839);
	  COL_VERTEX(-715, 0, -3830);
	  COL_VERTEX(-735, 20, -3789);
	  COL_VERTEX(-899, 20, -3461);
	  COL_VERTEX(657, 20, -3543);
	  COL_VERTEX(902, 20, -3789);
	  COL_VERTEX(-900, 20, 369);
	  COL_VERTEX(-654, 20, 123);
	  COL_VERTEX(737, 20, 369);
	  COL_VERTEX(162, -50, -1330);
	  COL_VERTEX(-144, -50, -1330);
	  COL_VERTEX(-349, -50, -1535);
	  COL_VERTEX(367, -50, -1535);
	  COL_VERTEX(367, -50, -1945);
	  COL_VERTEX(-349, -50, -1945);
	  COL_VERTEX(162, -50, -2149);
	  COL_VERTEX(-144, -50, -2149);
	  COL_TRI_INIT(SURFACE_DEFAULT, 470);
	  COL_TRI(22, 30, 28);
	  COL_TRI(20, 21, 22);
	  COL_TRI(21, 23, 24);
	  COL_TRI(24, 25, 21);
	  COL_TRI(26, 21, 20);
	  COL_TRI(26, 27, 21);
	  COL_TRI(23, 21, 27);
	  COL_TRI(25, 22, 21);
	  COL_TRI(22, 28, 29);
	  COL_TRI(20, 22, 33);
	  COL_TRI(26, 20, 33);
	  COL_TRI(31, 22, 33);
	  COL_TRI(34, 27, 26);
	  COL_TRI(26, 33, 34);
	  COL_TRI(34, 23, 27);
	  COL_TRI(35, 36, 23);
	  COL_TRI(36, 216, 23);
	  COL_TRI(37, 78, 39);
	  COL_TRI(37, 38, 78);
	  COL_TRI(38, 25, 217);
	  COL_TRI(38, 217, 78);
	  COL_TRI(39, 75, 24);
	  COL_TRI(39, 24, 37);
	  COL_TRI(33, 22, 29);
	  COL_TRI(33, 41, 40);
	  COL_TRI(40, 34, 33);
	  COL_TRI(40, 23, 34);
	  COL_TRI(40, 35, 23);
	  COL_TRI(34, 23, 42);
	  COL_TRI(33, 29, 41);
	  COL_TRI(45, 169, 46);
	  COL_TRI(41, 47, 48);
	  COL_TRI(42, 33, 34);
	  COL_TRI(43, 73, 72);
	  COL_TRI(44, 72, 51);
	  COL_TRI(52, 220, 221);
	  COL_TRI(45, 46, 48);
	  COL_TRI(46, 49, 48);
	  COL_TRI(47, 151, 48);
	  COL_TRI(48, 218, 219);
	  COL_TRI(49, 218, 48);
	  COL_TRI(41, 48, 219);
	  COL_TRI(50, 71, 220);
	  COL_TRI(51, 221, 220);
	  COL_TRI(50, 220, 52);
	  COL_TRI(52, 221, 53);
	  COL_TRI(51, 72, 221);
	  COL_TRI(53, 221, 222);
	  COL_TRI(53, 222, 54);
	  COL_TRI(40, 219, 222);
	  COL_TRI(40, 222, 221);
	  COL_TRI(40, 221, 72);
	  COL_TRI(56, 49, 57);
	  COL_TRI(54, 222, 219);
	  COL_TRI(54, 219, 55);
	  COL_TRI(55, 219, 218);
	  COL_TRI(55, 218, 56);
	  COL_TRI(56, 218, 49);
	  COL_TRI(57, 49, 223);
	  COL_TRI(41, 29, 59);
	  COL_TRI(57, 223, 224);
	  COL_TRI(58, 223, 49);
	  COL_TRI(59, 47, 41);
	  COL_TRI(40, 41, 219);
	  COL_TRI(58, 49, 46);
	  COL_TRI(46, 60, 58);
	  COL_TRI(46, 169, 60);
	  COL_TRI(60, 225, 65);
	  COL_TRI(60, 226, 66);
	  COL_TRI(60, 66, 225);
	  COL_TRI(58, 60, 65);
	  COL_TRI(23, 77, 42);
	  COL_TRI(171, 62, 63);
	  COL_TRI(39, 61, 42);
	  COL_TRI(61, 31, 33);
	  COL_TRI(62, 171, 64);
	  COL_TRI(63, 64, 227);
	  COL_TRI(63, 62, 64);
	  COL_TRI(64, 228, 161);
	  COL_TRI(68, 63, 227);
	  COL_TRI(64, 229, 228);
	  COL_TRI(65, 225, 66);
	  COL_TRI(66, 68, 227);
	  COL_TRI(67, 66, 226);
	  COL_TRI(67, 68, 66);
	  COL_TRI(65, 66, 227);
	  COL_TRI(69, 231, 154);
	  COL_TRI(70, 154, 44);
	  COL_TRI(69, 232, 70);
	  COL_TRI(71, 70, 51);
	  COL_TRI(70, 44, 51);
	  COL_TRI(72, 44, 43);
	  COL_TRI(77, 39, 42);
	  COL_TRI(72, 140, 35);
	  COL_TRI(74, 36, 35);
	  COL_TRI(72, 35, 40);
	  COL_TRI(75, 77, 32);
	  COL_TRI(76, 77, 23);
	  COL_TRI(77, 75, 39);
	  COL_TRI(32, 31, 217);
	  COL_TRI(31, 32, 22);
	  COL_TRI(42, 61, 33);
	  COL_TRI(32, 217, 75);
	  COL_TRI(61, 78, 31);
	  COL_TRI(78, 217, 31);
	  COL_TRI(39, 78, 61);
	  COL_TRI(79, 235, 81);
	  COL_TRI(80, 235, 79);
	  COL_TRI(79, 81, 236);
	  COL_TRI(81, 160, 236);
	  COL_TRI(82, 236, 237);
	  COL_TRI(82, 83, 236);
	  COL_TRI(83, 82, 159);
	  COL_TRI(83, 159, 155);
	  COL_TRI(83, 231, 69);
	  COL_TRI(83, 155, 231);
	  COL_TRI(84, 85, 238);
	  COL_TRI(84, 238, 89);
	  COL_TRI(85, 88, 87);
	  COL_TRI(85, 240, 238);
	  COL_TRI(86, 240, 85);
	  COL_TRI(80, 238, 90);
	  COL_TRI(86, 238, 240);
	  COL_TRI(86, 90, 238);
	  COL_TRI(89, 238, 80);
	  COL_TRI(89, 80, 92);
	  COL_TRI(81, 235, 80);
	  COL_TRI(90, 81, 80);
	  COL_TRI(96, 245, 243);
	  COL_TRI(91, 92, 79);
	  COL_TRI(92, 80, 79);
	  COL_TRI(93, 243, 95);
	  COL_TRI(93, 244, 243);
	  COL_TRI(94, 244, 114);
	  COL_TRI(95, 243, 245);
	  COL_TRI(94, 243, 244);
	  COL_TRI(96, 243, 94);
	  COL_TRI(95, 245, 99);
	  COL_TRI(97, 93, 95);
	  COL_TRI(98, 95, 99);
	  COL_TRI(99, 245, 247);
	  COL_TRI(100, 245, 96);
	  COL_TRI(100, 247, 245);
	  COL_TRI(101, 99, 103);
	  COL_TRI(98, 99, 101);
	  COL_TRI(99, 247, 103);
	  COL_TRI(102, 247, 100);
	  COL_TRI(102, 248, 247);
	  COL_TRI(103, 248, 104);
	  COL_TRI(103, 247, 248);
	  COL_TRI(101, 103, 106);
	  COL_TRI(104, 248, 249);
	  COL_TRI(105, 248, 102);
	  COL_TRI(104, 249, 250);
	  COL_TRI(106, 104, 110);
	  COL_TRI(106, 103, 104);
	  COL_TRI(107, 249, 251);
	  COL_TRI(107, 250, 249);
	  COL_TRI(108, 249, 105);
	  COL_TRI(108, 251, 249);
	  COL_TRI(109, 250, 107);
	  COL_TRI(110, 250, 109);
	  COL_TRI(110, 104, 250);
	  COL_TRI(114, 252, 113);
	  COL_TRI(107, 252, 111);
	  COL_TRI(111, 244, 93);
	  COL_TRI(111, 252, 244);
	  COL_TRI(112, 111, 119);
	  COL_TRI(112, 107, 111);
	  COL_TRI(107, 251, 252);
	  COL_TRI(113, 252, 251);
	  COL_TRI(114, 244, 252);
	  COL_TRI(108, 118, 113);
	  COL_TRI(109, 107, 112);
	  COL_TRI(113, 251, 108);
	  COL_TRI(108, 115, 118);
	  COL_TRI(108, 209, 253);
	  COL_TRI(108, 105, 209);
	  COL_TRI(115, 108, 253);
	  COL_TRI(116, 105, 117);
	  COL_TRI(116, 209, 105);
	  COL_TRI(117, 105, 102);
	  COL_TRI(118, 114, 113);
	  COL_TRI(119, 93, 97);
	  COL_TRI(119, 111, 93);
	  COL_TRI(123, 122, 96);
	  COL_TRI(105, 249, 248);
	  COL_TRI(117, 100, 122);
	  COL_TRI(120, 246, 96);
	  COL_TRI(96, 94, 120);
	  COL_TRI(96, 246, 193);
	  COL_TRI(121, 96, 193);
	  COL_TRI(121, 123, 96);
	  COL_TRI(122, 100, 96);
	  COL_TRI(94, 126, 88);
	  COL_TRI(97, 95, 98);
	  COL_TRI(124, 120, 94);
	  COL_TRI(125, 124, 94);
	  COL_TRI(126, 94, 114);
	  COL_TRI(94, 183, 125);
	  COL_TRI(94, 88, 183);
	  COL_TRI(118, 129, 126);
	  COL_TRI(118, 126, 114);
	  COL_TRI(118, 115, 127);
	  COL_TRI(127, 74, 118);
	  COL_TRI(118, 178, 177);
	  COL_TRI(118, 177, 129);
	  COL_TRI(128, 129, 262);
	  COL_TRI(129, 177, 262);
	  COL_TRI(123, 257, 168);
	  COL_TRI(123, 186, 257);
	  COL_TRI(123, 187, 186);
	  COL_TRI(123, 121, 187);
	  COL_TRI(130, 258, 123);
	  COL_TRI(131, 148, 122);
	  COL_TRI(122, 258, 131);
	  COL_TRI(122, 123, 258);
	  COL_TRI(134, 151, 175);
	  COL_TRI(117, 122, 132);
	  COL_TRI(117, 102, 100);
	  COL_TRI(117, 132, 173);
	  COL_TRI(133, 45, 151);
	  COL_TRI(137, 228, 229);
	  COL_TRI(130, 123, 168);
	  COL_TRI(135, 131, 258);
	  COL_TRI(136, 138, 137);
	  COL_TRI(136, 137, 169);
	  COL_TRI(137, 264, 228);
	  COL_TRI(138, 165, 137);
	  COL_TRI(141, 266, 144);
	  COL_TRI(139, 73, 141);
	  COL_TRI(73, 139, 140);
	  COL_TRI(140, 139, 172);
	  COL_TRI(139, 141, 178);
	  COL_TRI(43, 141, 73);
	  COL_TRI(141, 144, 178);
	  COL_TRI(142, 267, 143);
	  COL_TRI(142, 180, 267);
	  COL_TRI(142, 181, 180);
	  COL_TRI(142, 143, 268);
	  COL_TRI(143, 266, 268);
	  COL_TRI(143, 128, 262);
	  COL_TRI(143, 267, 128);
	  COL_TRI(143, 262, 263);
	  COL_TRI(144, 263, 178);
	  COL_TRI(143, 263, 144);
	  COL_TRI(143, 144, 266);
	  COL_TRI(134, 145, 153);
	  COL_TRI(134, 146, 145);
	  COL_TRI(145, 152, 173);
	  COL_TRI(145, 146, 152);
	  COL_TRI(145, 132, 147);
	  COL_TRI(145, 173, 132);
	  COL_TRI(146, 134, 152);
	  COL_TRI(147, 132, 148);
	  COL_TRI(132, 122, 148);
	  COL_TRI(148, 131, 147);
	  COL_TRI(149, 131, 135);
	  COL_TRI(131, 149, 147);
	  COL_TRI(149, 135, 269);
	  COL_TRI(150, 149, 269);
	  COL_TRI(151, 134, 133);
	  COL_TRI(150, 133, 153);
	  COL_TRI(133, 134, 153);
	  COL_TRI(156, 155, 159);
	  COL_TRI(152, 134, 175);
	  COL_TRI(150, 153, 149);
	  COL_TRI(153, 147, 149);
	  COL_TRI(153, 145, 147);
	  COL_TRI(154, 155, 156);
	  COL_TRI(155, 154, 231);
	  COL_TRI(44, 158, 43);
	  COL_TRI(154, 156, 44);
	  COL_TRI(156, 159, 270);
	  COL_TRI(156, 158, 44);
	  COL_TRI(156, 157, 158);
	  COL_TRI(157, 156, 270);
	  COL_TRI(157, 270, 239);
	  COL_TRI(157, 81, 158);
	  COL_TRI(158, 271, 43);
	  COL_TRI(81, 90, 158);
	  COL_TRI(81, 157, 239);
	  COL_TRI(81, 239, 160);
	  COL_TRI(159, 237, 160);
	  COL_TRI(159, 82, 237);
	  COL_TRI(159, 160, 239);
	  COL_TRI(160, 237, 236);
	  COL_TRI(159, 239, 270);
	  COL_TRI(164, 163, 166);
	  COL_TRI(161, 228, 264);
	  COL_TRI(162, 161, 264);
	  COL_TRI(163, 264, 165);
	  COL_TRI(164, 264, 163);
	  COL_TRI(162, 264, 164);
	  COL_TRI(137, 165, 264);
	  COL_TRI(169, 137, 230);
	  COL_TRI(165, 273, 163);
	  COL_TRI(166, 163, 167);
	  COL_TRI(167, 272, 166);
	  COL_TRI(166, 272, 274);
	  COL_TRI(163, 273, 167);
	  COL_TRI(168, 167, 273);
	  COL_TRI(169, 230, 226);
	  COL_TRI(170, 226, 230);
	  COL_TRI(169, 226, 60);
	  COL_TRI(137, 229, 230);
	  COL_TRI(171, 230, 229);
	  COL_TRI(171, 229, 64);
	  COL_TRI(138, 265, 165);
	  COL_TRI(165, 265, 130);
	  COL_TRI(165, 130, 273);
	  COL_TRI(130, 168, 273);
	  COL_TRI(172, 74, 140);
	  COL_TRI(172, 118, 74);
	  COL_TRI(172, 178, 118);
	  COL_TRI(47, 117, 176);
	  COL_TRI(175, 117, 152);
	  COL_TRI(59, 117, 275);
	  COL_TRI(173, 152, 117);
	  COL_TRI(117, 59, 174);
	  COL_TRI(174, 116, 117);
	  COL_TRI(175, 176, 117);
	  COL_TRI(176, 175, 151);
	  COL_TRI(179, 129, 128);
	  COL_TRI(172, 139, 178);
	  COL_TRI(177, 178, 262);
	  COL_TRI(178, 263, 262);
	  COL_TRI(179, 180, 126);
	  COL_TRI(180, 179, 128);
	  COL_TRI(179, 276, 129);
	  COL_TRI(184, 88, 241);
	  COL_TRI(181, 87, 180);
	  COL_TRI(87, 185, 86);
	  COL_TRI(87, 126, 180);
	  COL_TRI(87, 86, 85);
	  COL_TRI(87, 88, 126);
	  COL_TRI(180, 128, 267);
	  COL_TRI(182, 88, 277);
	  COL_TRI(88, 184, 277);
	  COL_TRI(183, 88, 182);
	  COL_TRI(88, 85, 241);
	  COL_TRI(185, 242, 90);
	  COL_TRI(86, 185, 90);
	  COL_TRI(90, 242, 271);
	  COL_TRI(158, 90, 271);
	  COL_TRI(186, 277, 184);
	  COL_TRI(184, 241, 278);
	  COL_TRI(154, 232, 69);
	  COL_TRI(184, 278, 257);
	  COL_TRI(184, 257, 186);
	  COL_TRI(187, 190, 186);
	  COL_TRI(167, 168, 272);
	  COL_TRI(189, 194, 279);
	  COL_TRI(188, 194, 189);
	  COL_TRI(188, 120, 194);
	  COL_TRI(120, 188, 259);
	  COL_TRI(188, 280, 191);
	  COL_TRI(188, 189, 280);
	  COL_TRI(188, 281, 259);
	  COL_TRI(188, 260, 281);
	  COL_TRI(188, 192, 260);
	  COL_TRI(192, 121, 260);
	  COL_TRI(189, 279, 280);
	  COL_TRI(190, 280, 279);
	  COL_TRI(190, 191, 280);
	  COL_TRI(188, 191, 192);
	  COL_TRI(191, 190, 187);
	  COL_TRI(191, 187, 192);
	  COL_TRI(193, 281, 260);
	  COL_TRI(193, 259, 281);
	  COL_TRI(193, 246, 259);
	  COL_TRI(120, 259, 246);
	  COL_TRI(192, 187, 121);
	  COL_TRI(193, 260, 121);
	  COL_TRI(195, 282, 201);
	  COL_TRI(186, 279, 277);
	  COL_TRI(124, 261, 120);
	  COL_TRI(120, 199, 194);
	  COL_TRI(120, 261, 199);
	  COL_TRI(194, 198, 279);
	  COL_TRI(194, 199, 198);
	  COL_TRI(195, 202, 125);
	  COL_TRI(195, 201, 202);
	  COL_TRI(197, 198, 200);
	  COL_TRI(195, 200, 282);
	  COL_TRI(195, 283, 197);
	  COL_TRI(195, 196, 283);
	  COL_TRI(196, 182, 283);
	  COL_TRI(195, 183, 196);
	  COL_TRI(197, 283, 277);
	  COL_TRI(182, 277, 283);
	  COL_TRI(198, 197, 277);
	  COL_TRI(195, 197, 200);
	  COL_TRI(198, 199, 200);
	  COL_TRI(183, 182, 196);
	  COL_TRI(199, 261, 282);
	  COL_TRI(200, 199, 282);
	  COL_TRI(201, 282, 261);
	  COL_TRI(202, 201, 125);
	  COL_TRI(124, 201, 261);
	  COL_TRI(183, 195, 125);
	  COL_TRI(201, 124, 125);
	  COL_TRI(67, 170, 68);
	  COL_TRI(170, 171, 68);
	  COL_TRI(170, 67, 226);
	  COL_TRI(171, 63, 68);
	  COL_TRI(171, 170, 230);
	  COL_TRI(30, 203, 28);
	  COL_TRI(203, 30, 210);
	  COL_TRI(203, 207, 205);
	  COL_TRI(203, 205, 204);
	  COL_TRI(203, 204, 284);
	  COL_TRI(203, 208, 207);
	  COL_TRI(204, 206, 284);
	  COL_TRI(205, 174, 204);
	  COL_TRI(174, 206, 204);
	  COL_TRI(203, 284, 28);
	  COL_TRI(206, 28, 284);
	  COL_TRI(174, 205, 116);
	  COL_TRI(205, 207, 116);
	  COL_TRI(207, 208, 116);
	  COL_TRI(211, 234, 215);
	  COL_TRI(208, 209, 116);
	  COL_TRI(209, 208, 233);
	  COL_TRI(203, 285, 208);
	  COL_TRI(208, 285, 233);
	  COL_TRI(210, 32, 285);
	  COL_TRI(32, 233, 285);
	  COL_TRI(203, 210, 285);
	  COL_TRI(30, 32, 210);
	  COL_TRI(36, 211, 286);
	  COL_TRI(211, 255, 254);
	  COL_TRI(211, 254, 213);
	  COL_TRI(211, 213, 212);
	  COL_TRI(212, 76, 216);
	  COL_TRI(212, 216, 286);
	  COL_TRI(213, 76, 212);
	  COL_TRI(211, 212, 286);
	  COL_TRI(36, 286, 216);
	  COL_TRI(214, 213, 254);
	  COL_TRI(213, 214, 76);
	  COL_TRI(214, 254, 253);
	  COL_TRI(115, 253, 254);
	  COL_TRI(115, 254, 255);
	  COL_TRI(211, 215, 256);
	  COL_TRI(115, 255, 256);
	  COL_TRI(211, 256, 255);
	  COL_TRI(115, 256, 127);
	  COL_TRI(215, 127, 256);
	  COL_TRI(215, 234, 127);
	  COL_TRI(174, 59, 206);
	  COL_TRI(206, 59, 28);
	  COL_TRI(32, 77, 76);
	  COL_TRI(214, 32, 76);
	  COL_TRI(214, 233, 32);
	  COL_TRI(32, 30, 22);
	  COL_TRI(214, 209, 233);
	  COL_TRI(214, 253, 209);
	  COL_TRI(74, 127, 234);
	  COL_TRI(76, 23, 216);
	  COL_TRI(73, 140, 72);
	  COL_TRI(211, 36, 234);
	  COL_TRI(74, 234, 36);
	  COL_TRI(45, 136, 169);
	  COL_TRI(59, 29, 28);
	  COL_TRI(71, 51, 220);
	  COL_TRI(74, 35, 140);
	  COL_TRI(75, 25, 24);
	  COL_TRI(75, 217, 25);
	  COL_TRI(176, 151, 47);
	  COL_TRI_INIT(SURFACE_WATER, 28);
	  COL_TRI(290, 15, 287);
	  COL_TRI(287, 288, 109);
	  COL_TRI(109, 288, 289);
	  COL_TRI(16, 289, 288);
	  COL_TRI(15, 288, 287);
	  COL_TRI(15, 16, 288);
	  COL_TRI(287, 109, 112);
	  COL_TRI(109, 289, 110);
	  COL_TRI(290, 287, 112);
	  COL_TRI(119, 290, 112);
	  COL_TRI(291, 15, 290);
	  COL_TRI(290, 119, 291);
	  COL_TRI(119, 97, 291);
	  COL_TRI(289, 292, 106);
	  COL_TRI(289, 106, 110);
	  COL_TRI(289, 13, 292);
	  COL_TRI(289, 16, 13);
	  COL_TRI(101, 294, 293);
	  COL_TRI(292, 294, 101);
	  COL_TRI(292, 13, 294);
	  COL_TRI(293, 294, 13);
	  COL_TRI(98, 293, 97);
	  COL_TRI(293, 291, 97);
	  COL_TRI(293, 13, 12);
	  COL_TRI(293, 12, 291);
	  COL_TRI(292, 101, 106);
	  COL_TRI(101, 293, 98);
	  COL_TRI(291, 12, 15);
	  COL_TRI_INIT(SURFACE_WALL_MISC, 30);
	  COL_TRI(4, 7, 6);
	  COL_TRI(0, 1, 2);
	  COL_TRI(1, 3, 2);
	  COL_TRI(4, 3, 1);
	  COL_TRI(2, 3, 5);
	  COL_TRI(6, 7, 2);
	  COL_TRI(7, 8, 2);
	  COL_TRI(8, 9, 2);
	  COL_TRI(9, 0, 2);
	  COL_TRI(4, 0, 9);
	  COL_TRI(4, 8, 7);
	  COL_TRI(4, 1, 0);
	  COL_TRI(4, 6, 11);
	  COL_TRI(5, 3, 4);
	  COL_TRI(10, 5, 4);
	  COL_TRI(2, 5, 10);
	  COL_TRI(10, 4, 11);
	  COL_TRI(11, 6, 2);
	  COL_TRI(11, 2, 10);
	  COL_TRI(4, 9, 8);
	  COL_TRI(12, 14, 17);
	  COL_TRI(13, 14, 12);
	  COL_TRI(14, 18, 17);
	  COL_TRI(14, 19, 18);
	  COL_TRI(13, 19, 14);
	  COL_TRI(12, 17, 15);
	  COL_TRI(15, 17, 18);
	  COL_TRI(15, 18, 16);
	  COL_TRI(16, 18, 19);
	  COL_TRI(16, 19, 13);
	  COL_TRI_INIT(SURFACE_NOISE_DEFAULT, 16);
	  COL_TRI(271, 268, 266);
	  COL_TRI(271, 266, 43);
	  COL_TRI(266, 141, 43);
	  COL_TRI(271, 242, 142);
	  COL_TRI(271, 142, 268);
	  COL_TRI(242, 185, 181);
	  COL_TRI(242, 181, 142);
	  COL_TRI(185, 87, 181);
	  COL_TRI(269, 135, 130);
	  COL_TRI(130, 135, 258);
	  COL_TRI(269, 130, 265);
	  COL_TRI(138, 269, 265);
	  COL_TRI(138, 150, 269);
	  COL_TRI(136, 133, 150);
	  COL_TRI(136, 150, 138);
	  COL_TRI(136, 45, 133);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(19);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start,       /*pos*/    15,    0,   202, /*yaw*/ 128); // unused, probably an early way to set initial position
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03,     /*pos*/     0, 2048,  2662, /*yaw*/   0);
	  SPECIAL_OBJECT(/*preset*/ special_spiky_tree,       /*pos*/  2272, -214, -1432);
	  SPECIAL_OBJECT(/*preset*/ special_spiky_tree,       /*pos*/   818,   10,   203);
	  SPECIAL_OBJECT(/*preset*/ special_spiky_tree,       /*pos*/  -820,   10,   201);
	  SPECIAL_OBJECT(/*preset*/ special_spiky_tree,       /*pos*/  1681, -214,  -132);
	  SPECIAL_OBJECT(/*preset*/ special_spiky_tree,       /*pos*/  2382, -214,  -843);
	  SPECIAL_OBJECT(/*preset*/ special_spiky_tree,       /*pos*/  -817,   10, -3630);
	  SPECIAL_OBJECT(/*preset*/ special_spiky_tree,       /*pos*/  2769, -214, -1523);
	  SPECIAL_OBJECT(/*preset*/ special_spiky_tree,       /*pos*/  2444, -214, -2330);
	  SPECIAL_OBJECT(/*preset*/ special_spiky_tree,       /*pos*/  2042, -214, -3032);
	  SPECIAL_OBJECT(/*preset*/ special_spiky_tree,       /*pos*/   824,   10, -3633);
	  SPECIAL_OBJECT(/*preset*/ special_spiky_tree,       /*pos*/ -2537, -214,  -759);
	  SPECIAL_OBJECT(/*preset*/ special_spiky_tree,       /*pos*/ -1640, -214, -3228);
	  SPECIAL_OBJECT(/*preset*/ special_spiky_tree,       /*pos*/ -2732, -214, -2166);
	  SPECIAL_OBJECT(/*preset*/ special_spiky_tree,       /*pos*/ -2446, -214, -1786);
	  SPECIAL_OBJECT(/*preset*/ special_spiky_tree,       /*pos*/ -2820, -214, -1317);
	  SPECIAL_OBJECT(/*preset*/ special_spiky_tree,       /*pos*/ -1868, -214,   -45);
	  SPECIAL_OBJECT_WITH_YAW_AND_PARAM(/*preset*/ special_wooden_door_warp, /*pos*/     0,    0,   461, /*yaw*/   0, /*bhvParam2*/ 1);
	  COL_WATER_BOX_INIT(1);
	  COL_WATER_BOX(0, -656, -2405, 674, -1074, 51);
	  COL_END();
	}

	var castle_courtyard = [
	  castle_courtyard_seg7_collision
	];

	function castle_grounds_seg7_collision_level() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x1EA);
	  COL_VERTEX(-4671, -511, -2545);
	  COL_VERTEX(-4686, -511, -3151);
	  COL_VERTEX(-4700, 543, -3663);
	  COL_VERTEX(-4686, -869, -3151);
	  COL_VERTEX(-4686, -921, -3361);
	  COL_VERTEX(-4702, -1228, -3663);
	  COL_VERTEX(2314, 371, -162);
	  COL_VERTEX(554, 607, -162);
	  COL_VERTEX(554, 811, -162);
	  COL_VERTEX(451, 811, -162);
	  COL_VERTEX(-1112, 801, 1396);
	  COL_VERTEX(-450, 811, -162);
	  COL_VERTEX(-553, 607, -162);
	  COL_VERTEX(-2047, 518, -162);
	  COL_VERTEX(-553, 811, -162);
	  COL_VERTEX(4730, -665, -651);
	  COL_VERTEX(4897, -921, -194);
	  COL_VERTEX(4597, -665, -1016);
	  COL_VERTEX(5052, -511, -2053);
	  COL_VERTEX(3362, -511, -567);
	  COL_VERTEX(3495, -665, -201);
	  COL_VERTEX(3363, 343, -566);
	  COL_VERTEX(3556, 405, -36);
	  COL_VERTEX(3662, -921, 254);
	  COL_VERTEX(-829, 260, 5658);
	  COL_VERTEX(-24, 260, 5009);
	  COL_VERTEX(-2047, 260, 5792);
	  COL_VERTEX(-2317, 260, 3579);
	  COL_VERTEX(4730, -869, -651);
	  COL_VERTEX(5019, -1330, 140);
	  COL_VERTEX(4791, 405, -485);
	  COL_VERTEX(4791, 343, -485);
	  COL_VERTEX(4597, 343, -1016);
	  COL_VERTEX(4597, -511, -1016);
	  COL_VERTEX(4597, 405, -1016);
	  COL_VERTEX(2321, -511, -162);
	  COL_VERTEX(3362, -665, -567);
	  COL_VERTEX(3362, 405, -567);
	  COL_VERTEX(3495, -869, -201);
	  COL_VERTEX(3784, -1330, 590);
	  COL_VERTEX(-816, 260, 3370);
	  COL_VERTEX(48, 260, 3912);
	  COL_VERTEX(-3471, 260, 4623);
	  COL_VERTEX(-3372, 260, 2933);
	  COL_VERTEX(-4318, 260, 3323);
	  COL_VERTEX(3483, 545, -5438);
	  COL_VERTEX(4409, 545, -5437);
	  COL_VERTEX(4981, 545, -6167);
	  COL_VERTEX(6045, -1330, 1574);
	  COL_VERTEX(5384, -1330, 2982);
	  COL_VERTEX(5667, -1330, 3225);
	  COL_VERTEX(6864, -1330, 2905);
	  COL_VERTEX(5709, -1330, 4034);
	  COL_VERTEX(5372, -924, 3298);
	  COL_VERTEX(4099, -1330, 1483);
	  COL_VERTEX(4402, -1330, 3226);
	  COL_VERTEX(4832, -1330, 3682);
	  COL_VERTEX(5125, -1330, 4077);
	  COL_VERTEX(4994, -1330, 4855);
	  COL_VERTEX(5400, -1330, 4459);
	  COL_VERTEX(6659, -1330, 4236);
	  COL_VERTEX(3913, -1330, 5495);
	  COL_VERTEX(3587, -1330, 4339);
	  COL_VERTEX(5255, -1125, 4748);
	  COL_VERTEX(5385, -1330, 4964);
	  COL_VERTEX(5882, -1330, 5370);
	  COL_VERTEX(2967, -1330, 5005);
	  COL_VERTEX(7245, -702, 4780);
	  COL_VERTEX(6045, -554, 5617);
	  COL_VERTEX(3662, -972, 254);
	  COL_VERTEX(-4686, -972, -3361);
	  COL_VERTEX(-3788, -921, -3361);
	  COL_VERTEX(4897, -972, -194);
	  COL_VERTEX(-3541, -972, -3361);
	  COL_VERTEX(-3541, -921, -3361);
	  COL_VERTEX(4370, 545, -6149);
	  COL_VERTEX(3483, 545, -6149);
	  COL_VERTEX(4989, 545, -7072);
	  COL_VERTEX(4370, 545, -7749);
	  COL_VERTEX(2601, -101, 2939);
	  COL_VERTEX(1713, -7, 3720);
	  COL_VERTEX(1704, 41, 2512);
	  COL_VERTEX(2102, 58, 1692);
	  COL_VERTEX(2103, 89, 1305);
	  COL_VERTEX(2708, -10, 1639);
	  COL_VERTEX(3238, -89, 1787);
	  COL_VERTEX(2757, -72, 2338);
	  COL_VERTEX(2076, 15, 2280);
	  COL_VERTEX(-5344, 1494, -6924);
	  COL_VERTEX(-6922, 2865, -7377);
	  COL_VERTEX(-6230, 1949, -7009);
	  COL_VERTEX(-5529, 1160, -6863);
	  COL_VERTEX(2816, -511, 5376);
	  COL_VERTEX(2630, -448, 4746);
	  COL_VERTEX(2048, 236, 4760);
	  COL_VERTEX(4997, 545, -8085);
	  COL_VERTEX(-3481, -1228, -3663);
	  COL_VERTEX(-4671, 422, -2545);
	  COL_VERTEX(-4796, -511, -1606);
	  COL_VERTEX(-4928, 543, -4193);
	  COL_VERTEX(-5220, 422, -2744);
	  COL_VERTEX(-5307, 543, -3479);
	  COL_VERTEX(-4929, -1228, -4194);
	  COL_VERTEX(2318, 371, 683);
	  COL_VERTEX(554, -511, -162);
	  COL_VERTEX(91, 801, 1396);
	  COL_VERTEX(-553, -511, -162);
	  COL_VERTEX(-2317, 518, 929);
	  COL_VERTEX(-2047, -511, -162);
	  COL_VERTEX(-4363, 371, 255);
	  COL_VERTEX(-3360, 420, 1187);
	  COL_VERTEX(3555, 343, -37);
	  COL_VERTEX(-4599, 260, 2299);
	  COL_VERTEX(-5786, -1228, -4362);
	  COL_VERTEX(-5784, 543, -4360);
	  COL_VERTEX(-5864, 543, -3689);
	  COL_VERTEX(4407, 545, -3689);
	  COL_VERTEX(4407, -511, -3689);
	  COL_VERTEX(5633, 371, -2047);
	  COL_VERTEX(-4132, -511, -562);
	  COL_VERTEX(-4796, 405, -1606);
	  COL_VERTEX(-4666, 260, 1401);
	  COL_VERTEX(-4132, 371, -562);
	  COL_VERTEX(5249, 397, -636);
	  COL_VERTEX(-3727, 260, 2048);
	  COL_VERTEX(-5438, 405, -1522);
	  COL_VERTEX(5052, 371, -2053);
	  COL_VERTEX(4963, 544, -3762);
	  COL_VERTEX(7552, -58, 2256);
	  COL_VERTEX(8018, -101, 3280);
	  COL_VERTEX(7878, -101, 4665);
	  COL_VERTEX(6377, -101, 5989);
	  COL_VERTEX(4403, -657, 5715);
	  COL_VERTEX(4302, -190, 6316);
	  COL_VERTEX(3510, 0, 6358);
	  COL_VERTEX(-3906, -1228, -6149);
	  COL_VERTEX(-4704, -1228, -5911);
	  COL_VERTEX(-4369, 373, -6149);
	  COL_VERTEX(-5183, 132, -6475);
	  COL_VERTEX(6237, -52, 823);
	  COL_VERTEX(6623, 371, 0);
	  COL_VERTEX(7168, 474, 0);
	  COL_VERTEX(3362, 0, 725);
	  COL_VERTEX(512, 925, 3527);
	  COL_VERTEX(785, 996, 5113);
	  COL_VERTEX(1062, 558, 3465);
	  COL_VERTEX(1536, 718, 4698);
	  COL_VERTEX(2155, 1057, 6472);
	  COL_VERTEX(-19, 1473, 6727);
	  COL_VERTEX(-265, 1126, 6164);
	  COL_VERTEX(5974, 910, -7191);
	  COL_VERTEX(8192, 2540, -6143);
	  COL_VERTEX(6684, 2540, -7764);
	  COL_VERTEX(6789, 1022, -5679);
	  COL_VERTEX(4997, 2201, -8085);
	  COL_VERTEX(7305, 868, -4095);
	  COL_VERTEX(7203, 627, -1945);
	  COL_VERTEX(-4090, 1231, 6630);
	  COL_VERTEX(-6678, 590, 4409);
	  COL_VERTEX(-2064, 1550, 6813);
	  COL_VERTEX(-2069, 1169, 6155);
	  COL_VERTEX(-7463, 2074, -5749);
	  COL_VERTEX(-8191, 3121, -6586);
	  COL_VERTEX(-7318, 1567, -5405);
	  COL_VERTEX(-7091, 1592, -4094);
	  COL_VERTEX(-8164, 2413, -2679);
	  COL_VERTEX(-8191, 2574, -4095);
	  COL_VERTEX(-6641, 543, -3573);
	  COL_VERTEX(-6899, 371, -2047);
	  COL_VERTEX(-7337, 1521, -2854);
	  COL_VERTEX(-7685, 260, 0);
	  COL_VERTEX(-7835, 1019, 0);
	  COL_VERTEX(-8191, 1667, 0);
	  COL_VERTEX(-7685, 260, 2269);
	  COL_VERTEX(-8011, 1630, 3950);
	  COL_VERTEX(8192, 1710, 0);
	  COL_VERTEX(-5750, 1704, 6144);
	  COL_VERTEX(8192, 2189, -4095);
	  COL_VERTEX(8192, 1876, -2047);
	  COL_VERTEX(-4825, 553, 5288);
	  COL_VERTEX(-4369, 2339, -7760);
	  COL_VERTEX(-7415, 508, 3183);
	  COL_VERTEX(-7167, 1937, 5120);
	  COL_VERTEX(-8132, 2961, -6761);
	  COL_VERTEX(-6479, 543, -4496);
	  COL_VERTEX(-7867, 1237, -1398);
	  COL_VERTEX(-8191, 1729, 2324);
	  COL_VERTEX(8192, 1355, 1650);
	  COL_VERTEX(-6577, 215, -4901);
	  COL_VERTEX(5438, 704, -5679);
	  COL_VERTEX(0, 727, 2146);
	  COL_VERTEX(1173, 324, 2385);
	  COL_VERTEX(-2317, 639, 2048);
	  COL_VERTEX(6301, 474, -958);
	  COL_VERTEX(554, 605, -2127);
	  COL_VERTEX(554, 803, -2127);
	  COL_VERTEX(554, 803, -2229);
	  COL_VERTEX(554, 964, -258);
	  COL_VERTEX(451, 964, -258);
	  COL_VERTEX(451, 957, -2127);
	  COL_VERTEX(451, 803, -2229);
	  COL_VERTEX(-553, 803, -2127);
	  COL_VERTEX(-553, 604, -2127);
	  COL_VERTEX(-450, 964, -264);
	  COL_VERTEX(-553, 957, -2127);
	  COL_VERTEX(-553, 964, -264);
	  COL_VERTEX(-450, 803, -2229);
	  COL_VERTEX(-3541, -716, -3361);
	  COL_VERTEX(-1535, -511, -2536);
	  COL_VERTEX(-1023, 803, -2127);
	  COL_VERTEX(1024, 803, -2127);
	  COL_VERTEX(-3481, -1228, -6149);
	  COL_VERTEX(1536, -511, -2536);
	  COL_VERTEX(3483, 2339, -6149);
	  COL_VERTEX(3482, -511, -3663);
	  COL_VERTEX(3201, -511, -2913);
	  COL_VERTEX(-531, 1967, -2127);
	  COL_VERTEX(-531, 2120, -2047);
	  COL_VERTEX(532, 2120, -2047);
	  COL_VERTEX(154, 1059, -3104);
	  COL_VERTEX(-553, 803, -2229);
	  COL_VERTEX(-553, 803, -3104);
	  COL_VERTEX(-348, 1692, -3104);
	  COL_VERTEX(451, 906, -1512);
	  COL_VERTEX(-450, 803, -2127);
	  COL_VERTEX(554, 957, -2127);
	  COL_VERTEX(-450, 957, -2127);
	  COL_VERTEX(451, 906, -796);
	  COL_VERTEX(2876, -101, -3021);
	  COL_VERTEX(3093, -101, -2804);
	  COL_VERTEX(3419, -101, -3130);
	  COL_VERTEX(3202, -101, -3347);
	  COL_VERTEX(3201, -506, -3347);
	  COL_VERTEX(2875, -506, -3022);
	  COL_VERTEX(-562, 803, -3206);
	  COL_VERTEX(563, 803, -3718);
	  COL_VERTEX(-562, 803, -3718);
	  COL_VERTEX(-450, 906, -796);
	  COL_VERTEX(-3583, -716, -3151);
	  COL_VERTEX(-3583, -511, -3151);
	  COL_VERTEX(-450, 906, -1512);
	  COL_VERTEX(-3582, 461, -3148);
	  COL_VERTEX(-1023, 2460, -2127);
	  COL_VERTEX(-553, 1487, -2127);
	  COL_VERTEX(-553, 1692, -2127);
	  COL_VERTEX(1024, 2460, -2127);
	  COL_VERTEX(554, 1692, -2127);
	  COL_VERTEX(2560, -511, -2741);
	  COL_VERTEX(554, 1487, -2127);
	  COL_VERTEX(-3481, 803, -3663);
	  COL_VERTEX(-3481, 2339, -3663);
	  COL_VERTEX(2560, 798, -2741);
	  COL_VERTEX(3482, 2339, -3663);
	  COL_VERTEX(3482, 803, -3663);
	  COL_VERTEX(3274, -511, -2841);
	  COL_VERTEX(3382, -511, -2949);
	  COL_VERTEX(3310, -511, -3022);
	  COL_VERTEX(-531, 2173, -2127);
	  COL_VERTEX(532, 1967, -2127);
	  COL_VERTEX(532, 2173, -2127);
	  COL_VERTEX(554, 803, -3104);
	  COL_VERTEX(154, 803, -3104);
	  COL_VERTEX(554, 1487, -3104);
	  COL_VERTEX(349, 1692, -3104);
	  COL_VERTEX(-153, 803, -3104);
	  COL_VERTEX(-553, 1487, -3104);
	  COL_VERTEX(-153, 1059, -3104);
	  COL_VERTEX(451, 803, -2127);
	  COL_VERTEX(-4369, 2339, -6149);
	  COL_VERTEX(-3481, 2339, -6149);
	  COL_VERTEX(-3481, 2339, -7274);
	  COL_VERTEX(4370, 2339, -7750);
	  COL_VERTEX(4370, 2339, -6149);
	  COL_VERTEX(2876, -506, -3022);
	  COL_VERTEX(3093, -511, -2804);
	  COL_VERTEX(3201, -506, -3348);
	  COL_VERTEX(3419, -511, -3130);
	  COL_VERTEX(-562, 1930, -3718);
	  COL_VERTEX(-562, 1930, -3206);
	  COL_VERTEX(563, 1930, -3206);
	  COL_VERTEX(563, 1930, -3718);
	  COL_VERTEX(563, 803, -3206);
	  COL_VERTEX(563, 1936, -3718);
	  COL_VERTEX(-562, 1936, -3718);
	  COL_VERTEX(3072, -511, -2639);
	  COL_VERTEX(3505, -511, -2621);
	  COL_VERTEX(3584, -511, -3151);
	  COL_VERTEX(-3912, -869, -3151);
	  COL_VERTEX(-3788, -716, -3361);
	  COL_VERTEX(-3788, -972, -3361);
	  COL_VERTEX(-3225, -511, -1871);
	  COL_VERTEX(-1023, -511, -2127);
	  COL_VERTEX(-3225, -511, -2178);
	  COL_VERTEX(-3225, -818, -2178);
	  COL_VERTEX(-3912, -716, -3151);
	  COL_VERTEX(-4879, -1242, -5687);
	  COL_VERTEX(-4044, -1228, -6069);
	  COL_VERTEX(-3532, -511, -2178);
	  COL_VERTEX(-3532, -511, -1871);
	  COL_VERTEX(-2559, -511, -2741);
	  COL_VERTEX(-3071, -511, -2639);
	  COL_VERTEX(-3532, -818, -1871);
	  COL_VERTEX(-3225, -818, -1871);
	  COL_VERTEX(-3532, -818, -2178);
	  COL_VERTEX(1024, -511, -2127);
	  COL_VERTEX(-531, 2652, -2231);
	  COL_VERTEX(0, 3584, -2736);
	  COL_VERTEX(466, 4069, -2998);
	  COL_VERTEX(532, 2652, -2231);
	  COL_VERTEX(-531, 2460, -2127);
	  COL_VERTEX(977, 2890, -2977);
	  COL_VERTEX(1846, 3174, -3540);
	  COL_VERTEX(945, 3174, -3540);
	  COL_VERTEX(532, 2460, -2127);
	  COL_VERTEX(-1842, 3174, -3540);
	  COL_VERTEX(-976, 2887, -2972);
	  COL_VERTEX(-944, 3174, -3540);
	  COL_VERTEX(-1842, 3174, -6143);
	  COL_VERTEX(-936, 3174, -4580);
	  COL_VERTEX(2560, 2339, -2741);
	  COL_VERTEX(2867, 2662, -3356);
	  COL_VERTEX(937, 3174, -4580);
	  COL_VERTEX(0, 3174, -5120);
	  COL_VERTEX(3174, 2339, -2434);
	  COL_VERTEX(3789, 2339, -3048);
	  COL_VERTEX(3584, 2339, -2639);
	  COL_VERTEX(-2866, 2662, -3356);
	  COL_VERTEX(1846, 3174, -6131);
	  COL_VERTEX(3213, 3349, -3009);
	  COL_VERTEX(3484, 2339, -7274);
	  COL_VERTEX(-2869, 2662, -6131);
	  COL_VERTEX(2870, 2662, -6131);
	  COL_VERTEX(1024, 1692, -2127);
	  COL_VERTEX(-1023, 1692, -2127);
	  COL_VERTEX(-3583, 803, -2639);
	  COL_VERTEX(-3788, 803, -3048);
	  COL_VERTEX(-3070, 461, -2639);
	  COL_VERTEX(-2559, 803, -2741);
	  COL_VERTEX(-3173, 803, -2434);
	  COL_VERTEX(-1535, 2339, -2536);
	  COL_VERTEX(-2559, 2339, -2741);
	  COL_VERTEX(-531, 2652, -2047);
	  COL_VERTEX(1536, 2339, -2536);
	  COL_VERTEX(349, 1692, -2127);
	  COL_VERTEX(-3788, 2339, -3048);
	  COL_VERTEX(-3583, 2339, -2639);
	  COL_VERTEX(-3173, 2339, -2434);
	  COL_VERTEX(3174, 803, -2434);
	  COL_VERTEX(3072, 461, -2639);
	  COL_VERTEX(3584, 803, -2639);
	  COL_VERTEX(3382, -255, -2949);
	  COL_VERTEX(3274, -255, -2841);
	  COL_VERTEX(3789, 803, -3048);
	  COL_VERTEX(3584, 461, -3151);
	  COL_VERTEX(532, 2652, -2047);
	  COL_VERTEX(154, 1059, -3206);
	  COL_VERTEX(-153, 1059, -3206);
	  COL_VERTEX(-348, 1692, -2127);
	  COL_VERTEX(0, 3584, -2047);
	  COL_VERTEX(3201, -255, -2913);
	  COL_VERTEX(3310, -255, -3021);
	  COL_VERTEX(-153, 803, -3206);
	  COL_VERTEX(154, 803, -3206);
	  COL_VERTEX(-4044, -1228, -5557);
	  COL_VERTEX(-3532, -1228, -5557);
	  COL_VERTEX(-3532, -1228, -6069);
	  COL_VERTEX(-4044, -1842, -6069);
	  COL_VERTEX(-4044, -1842, -5557);
	  COL_VERTEX(-3532, -1842, -5557);
	  COL_VERTEX(-3532, -1842, -6069);
	  COL_VERTEX(-465, 4069, -2998);
	  COL_VERTEX(-3212, 3349, -3009);
	  COL_VERTEX(-7294, 2487, -6235);
	  COL_VERTEX(-7603, 3004, -7160);
	  COL_VERTEX(-6278, 1036, -5412);
	  COL_VERTEX(-5619, 1078, -6162);
	  COL_VERTEX(-6777, 2507, -6813);
	  COL_VERTEX(0, 4618, -5120);
	  COL_VERTEX(937, 4618, -4580);
	  COL_VERTEX(-936, 4618, -4580);
	  COL_VERTEX(555, 5007, -4443);
	  COL_VERTEX(0, 5003, -4717);
	  COL_VERTEX(509, 6298, -4412);
	  COL_VERTEX(0, 6298, -4658);
	  COL_VERTEX(945, 4618, -3540);
	  COL_VERTEX(508, 6298, -3698);
	  COL_VERTEX(562, 5017, -3681);
	  COL_VERTEX(-554, 5007, -4443);
	  COL_VERTEX(-944, 4618, -3540);
	  COL_VERTEX(466, 4618, -2998);
	  COL_VERTEX(-465, 4618, -2998);
	  COL_VERTEX(-507, 6298, -3698);
	  COL_VERTEX(-281, 6298, -3421);
	  COL_VERTEX(282, 6298, -3421);
	  COL_VERTEX(-508, 6298, -4412);
	  COL_VERTEX(307, 5021, -3373);
	  COL_VERTEX(-561, 5017, -3681);
	  COL_VERTEX(-306, 5021, -3373);
	  COL_VERTEX(-348, 6536, -3768);
	  COL_VERTEX(-201, 6539, -3584);
	  COL_VERTEX(-358, 6529, -4300);
	  COL_VERTEX(0, 7608, -4021);
	  COL_VERTEX(202, 6539, -3584);
	  COL_VERTEX(0, 6527, -4471);
	  COL_VERTEX(359, 6529, -4300);
	  COL_VERTEX(349, 6536, -3768);
	  COL_VERTEX(2283, -422, 2072);
	  COL_VERTEX(2485, -422, 1849);
	  COL_VERTEX(2283, -422, 1849);
	  COL_VERTEX(2485, -422, 2072);
	  COL_VERTEX(2640, 89, 2223);
	  COL_VERTEX(2637, 89, 1711);
	  COL_VERTEX(2485, 89, 1849);
	  COL_VERTEX(2485, 89, 2072);
	  COL_VERTEX(2283, 89, 2072);
	  COL_VERTEX(2128, 89, 2226);
	  COL_VERTEX(2283, 89, 1849);
	  COL_VERTEX(2125, 89, 1714);
	  COL_VERTEX(-600, 801, -162);
	  COL_VERTEX(-600, 884, -121);
	  COL_VERTEX(-600, 803, -121);
	  COL_VERTEX(-600, 882, -162);
	  COL_VERTEX(-2047, 600, -162);
	  COL_VERTEX(-604, 903, -142);
	  COL_VERTEX(-2054, 621, -142);
	  COL_VERTEX(-2053, 601, -121);
	  COL_VERTEX(-2053, 519, -121);
	  COL_VERTEX(-4146, 473, -544);
	  COL_VERTEX(-4132, 453, -562);
	  COL_VERTEX(-4157, 452, -525);
	  COL_VERTEX(-4839, 487, -1597);
	  COL_VERTEX(-4796, 487, -1606);
	  COL_VERTEX(-4817, 508, -1601);
	  COL_VERTEX(-4693, 523, -2548);
	  COL_VERTEX(-4746, 625, -3666);
	  COL_VERTEX(-4712, 502, -2551);
	  COL_VERTEX(-4671, 503, -2545);
	  COL_VERTEX(-4700, 625, -3663);
	  COL_VERTEX(-4724, 646, -3662);
	  COL_VERTEX(-4955, 625, -4156);
	  COL_VERTEX(-5855, 646, -4353);
	  COL_VERTEX(-4941, 646, -4174);
	  COL_VERTEX(-4928, 625, -4193);
	  COL_VERTEX(-5859, 625, -4375);
	  COL_VERTEX(-6632, 543, -3854);
	  COL_VERTEX(-5850, 625, -4331);
	  COL_VERTEX(-6609, 625, -3820);
	  COL_VERTEX(5229, 479, -629);
	  COL_VERTEX(5229, 397, -629);
	  COL_VERTEX(5223, 500, -649);
	  COL_VERTEX(5217, 397, -668);
	  COL_VERTEX(4821, 404, -495);
	  COL_VERTEX(4821, 486, -495);
	  COL_VERTEX(5217, 479, -668);
	  COL_VERTEX(4808, 404, -534);
	  COL_VERTEX(4808, 486, -534);
	  COL_VERTEX(4635, 404, -1000);
	  COL_VERTEX(4597, 487, -1016);
	  COL_VERTEX(5050, 453, -2048);
	  COL_VERTEX(5050, 371, -2048);
	  COL_VERTEX(5087, 370, -2031);
	  COL_VERTEX(4617, 507, -1009);
	  COL_VERTEX(605, 798, -121);
	  COL_VERTEX(2314, 370, -120);
	  COL_VERTEX(2314, 451, -120);
	  COL_VERTEX(605, 877, -121);
	  COL_VERTEX(610, 897, -141);
	  COL_VERTEX(605, 877, -162);
	  COL_VERTEX(605, 798, -162);
	  COL_VERTEX(3341, 484, -515);
	  COL_VERTEX(3341, 404, -515);
	  COL_VERTEX(3326, 403, -553);
	  COL_VERTEX(3326, 484, -553);
	  COL_VERTEX(3332, 502, -535);
	  COL_VERTEX(-4157, 370, -525);
	  COL_VERTEX(-4839, 405, -1597);
	  COL_VERTEX(-4712, 422, -2551);
	  COL_VERTEX(-4746, 543, -3666);
	  COL_VERTEX(-4955, 543, -4156);
	  COL_VERTEX(-5850, 543, -4331);
	  COL_VERTEX(-6632, 625, -3854);
	  COL_VERTEX(-5859, 543, -4375);
	  COL_VERTEX(-6620, 646, -3837);
	  COL_VERTEX(-6609, 543, -3820);
	  COL_VERTEX(4815, 507, -515);
	  COL_VERTEX(4635, 486, -1000);
	  COL_VERTEX(5069, 473, -2040);
	  COL_VERTEX(5087, 452, -2031);
	  COL_VERTEX(2314, 447, -162);
	  COL_VERTEX(2314, 468, -142);
	  COL_TRI_INIT(SURFACE_DEFAULT, 336);
	  COL_TRI(406, 407, 408);
	  COL_TRI(406, 409, 407);
	  COL_TRI(410, 411, 412);
	  COL_TRI(410, 412, 413);
	  COL_TRI(410, 413, 414);
	  COL_TRI(410, 414, 415);
	  COL_TRI(416, 412, 411);
	  COL_TRI(416, 411, 417);
	  COL_TRI(414, 416, 417);
	  COL_TRI(415, 414, 417);
	  COL_TRI(381, 383, 382);
	  COL_TRI(321, 322, 377);
	  COL_TRI(321, 377, 378);
	  COL_TRI(379, 377, 322);
	  COL_TRI(380, 381, 382);
	  COL_TRI(378, 312, 321);
	  COL_TRI(384, 312, 378);
	  COL_TRI(379, 322, 318);
	  COL_TRI(385, 386, 380);
	  COL_TRI(382, 385, 380);
	  COL_TRI(383, 381, 387);
	  COL_TRI(379, 318, 388);
	  COL_TRI(388, 318, 316);
	  COL_TRI(312, 389, 307);
	  COL_TRI(384, 389, 312);
	  COL_TRI(388, 370, 390);
	  COL_TRI(316, 370, 388);
	  COL_TRI(389, 370, 307);
	  COL_TRI(390, 370, 389);
	  COL_TRI(391, 396, 397);
	  COL_TRI(392, 391, 397);
	  COL_TRI(393, 395, 385);
	  COL_TRI(392, 397, 393);
	  COL_TRI(393, 397, 395);
	  COL_TRI(394, 383, 387);
	  COL_TRI(385, 395, 386);
	  COL_TRI(12, 14, 201);
	  COL_TRI(194, 8, 7);
	  COL_TRI(194, 195, 8);
	  COL_TRI(196, 197, 8);
	  COL_TRI(8, 198, 9);
	  COL_TRI(8, 197, 198);
	  COL_TRI(9, 198, 199);
	  COL_TRI(9, 199, 200);
	  COL_TRI(12, 201, 202);
	  COL_TRI(11, 203, 14);
	  COL_TRI(203, 205, 14);
	  COL_TRI(14, 204, 220);
	  COL_TRI(14, 205, 204);
	  COL_TRI(206, 203, 11);
	  COL_TRI(11, 9, 227);
	  COL_TRI(11, 227, 237);
	  COL_TRI(207, 238, 239);
	  COL_TRI(96, 207, 241);
	  COL_TRI(96, 74, 207);
	  COL_TRI(208, 209, 242);
	  COL_TRI(209, 202, 201);
	  COL_TRI(209, 243, 244);
	  COL_TRI(210, 212, 245);
	  COL_TRI(213, 252, 253);
	  COL_TRI(210, 195, 194);
	  COL_TRI(210, 246, 248);
	  COL_TRI(211, 249, 250);
	  COL_TRI(212, 247, 251);
	  COL_TRI(218, 258, 259);
	  COL_TRI(214, 45, 213);
	  COL_TRI(215, 254, 255);
	  COL_TRI(215, 255, 256);
	  COL_TRI(216, 217, 257);
	  COL_TRI(217, 216, 258);
	  COL_TRI(217, 258, 218);
	  COL_TRI(196, 261, 264);
	  COL_TRI(196, 260, 261);
	  COL_TRI(219, 262, 263);
	  COL_TRI(196, 264, 221);
	  COL_TRI(220, 206, 221);
	  COL_TRI(206, 200, 221);
	  COL_TRI(221, 200, 196);
	  COL_TRI(220, 226, 206);
	  COL_TRI(222, 265, 266);
	  COL_TRI(223, 224, 240);
	  COL_TRI(223, 267, 224);
	  COL_TRI(224, 267, 200);
	  COL_TRI(224, 200, 206);
	  COL_TRI(200, 225, 196);
	  COL_TRI(200, 199, 225);
	  COL_TRI(206, 226, 203);
	  COL_TRI(196, 225, 197);
	  COL_TRI(137, 135, 268);
	  COL_TRI(180, 268, 269);
	  COL_TRI(180, 269, 270);
	  COL_TRI(75, 78, 271);
	  COL_TRI(75, 271, 272);
	  COL_TRI(227, 240, 237);
	  COL_TRI(226, 205, 203);
	  COL_TRI(226, 204, 205);
	  COL_TRI(220, 204, 226);
	  COL_TRI(225, 198, 197);
	  COL_TRI(225, 199, 198);
	  COL_TRI(227, 223, 240);
	  COL_TRI(232, 233, 276);
	  COL_TRI(228, 229, 273);
	  COL_TRI(229, 274, 273);
	  COL_TRI(230, 275, 276);
	  COL_TRI(230, 231, 275);
	  COL_TRI(231, 273, 275);
	  COL_TRI(231, 228, 273);
	  COL_TRI(236, 235, 282);
	  COL_TRI(233, 274, 276);
	  COL_TRI(234, 236, 277);
	  COL_TRI(234, 277, 278);
	  COL_TRI(235, 279, 280);
	  COL_TRI(235, 281, 279);
	  COL_TRI(236, 282, 283);
	  COL_TRI(236, 234, 281);
	  COL_TRI(236, 281, 235);
	  COL_TRI(76, 75, 272);
	  COL_TRI(76, 272, 213);
	  COL_TRI(45, 76, 213);
	  COL_TRI(271, 329, 272);
	  COL_TRI(329, 213, 272);
	  COL_TRI(258, 332, 259);
	  COL_TRI(259, 332, 313);
	  COL_TRI(332, 216, 333);
	  COL_TRI(332, 258, 216);
	  COL_TRI(333, 216, 257);
	  COL_TRI(333, 257, 309);
	  COL_TRI(299, 208, 339);
	  COL_TRI(239, 300, 241);
	  COL_TRI(239, 241, 207);
	  COL_TRI(96, 241, 249);
	  COL_TRI(334, 335, 241);
	  COL_TRI(335, 249, 241);
	  COL_TRI(241, 336, 334);
	  COL_TRI(300, 336, 241);
	  COL_TRI(300, 299, 336);
	  COL_TRI(336, 299, 337);
	  COL_TRI(337, 338, 336);
	  COL_TRI(338, 334, 336);
	  COL_TRI(299, 339, 340);
	  COL_TRI(208, 291, 209);
	  COL_TRI(208, 242, 339);
	  COL_TRI(202, 209, 291);
	  COL_TRI(291, 194, 202);
	  COL_TRI(291, 304, 194);
	  COL_TRI(243, 209, 201);
	  COL_TRI(244, 333, 209);
	  COL_TRI(242, 333, 309);
	  COL_TRI(309, 341, 305);
	  COL_TRI(341, 309, 257);
	  COL_TRI(308, 354, 313);
	  COL_TRI(313, 332, 245);
	  COL_TRI(313, 354, 218);
	  COL_TRI(313, 218, 259);
	  COL_TRI(210, 332, 246);
	  COL_TRI(341, 218, 354);
	  COL_TRI(342, 245, 212);
	  COL_TRI(304, 210, 194);
	  COL_TRI(210, 304, 212);
	  COL_TRI(195, 210, 248);
	  COL_TRI(246, 343, 248);
	  COL_TRI(248, 262, 260);
	  COL_TRI(343, 262, 248);
	  COL_TRI(195, 248, 260);
	  COL_TRI(211, 96, 249);
	  COL_TRI(243, 265, 357);
	  COL_TRI(243, 357, 244);
	  COL_TRI(201, 221, 243);
	  COL_TRI(265, 243, 221);
	  COL_TRI(265, 222, 357);
	  COL_TRI(343, 263, 262);
	  COL_TRI(335, 250, 249);
	  COL_TRI(334, 344, 335);
	  COL_TRI(335, 344, 250);
	  COL_TRI(334, 345, 344);
	  COL_TRI(211, 250, 269);
	  COL_TRI(338, 345, 334);
	  COL_TRI(338, 346, 345);
	  COL_TRI(337, 346, 338);
	  COL_TRI(337, 340, 346);
	  COL_TRI(319, 342, 212);
	  COL_TRI(353, 352, 349);
	  COL_TRI(319, 212, 251);
	  COL_TRI(323, 319, 251);
	  COL_TRI(347, 323, 251);
	  COL_TRI(251, 247, 348);
	  COL_TRI(348, 347, 251);
	  COL_TRI(348, 247, 284);
	  COL_TRI(349, 348, 353);
	  COL_TRI(348, 349, 347);
	  COL_TRI(350, 353, 348);
	  COL_TRI(351, 350, 348);
	  COL_TRI(284, 351, 348);
	  COL_TRI(349, 325, 323);
	  COL_TRI(349, 323, 347);
	  COL_TRI(352, 325, 349);
	  COL_TRI(284, 254, 351);
	  COL_TRI(214, 353, 286);
	  COL_TRI(253, 353, 214);
	  COL_TRI(353, 253, 352);
	  COL_TRI(350, 286, 353);
	  COL_TRI(253, 252, 324);
	  COL_TRI(253, 324, 352);
	  COL_TRI(213, 253, 214);
	  COL_TRI(352, 324, 325);
	  COL_TRI(341, 217, 218);
	  COL_TRI(350, 255, 286);
	  COL_TRI(351, 359, 360);
	  COL_TRI(351, 360, 350);
	  COL_TRI(254, 359, 351);
	  COL_TRI(254, 215, 359);
	  COL_TRI(350, 360, 256);
	  COL_TRI(350, 256, 255);
	  COL_TRI(217, 341, 257);
	  COL_TRI(356, 266, 264);
	  COL_TRI(354, 358, 341);
	  COL_TRI(219, 260, 262);
	  COL_TRI(219, 261, 260);
	  COL_TRI(221, 266, 265);
	  COL_TRI(221, 264, 266);
	  COL_TRI(355, 219, 266);
	  COL_TRI(355, 266, 356);
	  COL_TRI(266, 219, 222);
	  COL_TRI(269, 268, 135);
	  COL_TRI(356, 264, 361);
	  COL_TRI(261, 361, 264);
	  COL_TRI(219, 263, 222);
	  COL_TRI(219, 355, 362);
	  COL_TRI(219, 362, 261);
	  COL_TRI(261, 362, 361);
	  COL_TRI(137, 268, 180);
	  COL_TRI(269, 135, 211);
	  COL_TRI(78, 95, 154);
	  COL_TRI(78, 154, 271);
	  COL_TRI(0, 1, 2);
	  COL_TRI(1, 3, 2);
	  COL_TRI(2, 4, 5);
	  COL_TRI(2, 3, 4);
	  COL_TRI(6, 7, 8);
	  COL_TRI(8, 9, 10);
	  COL_TRI(9, 11, 10);
	  COL_TRI(12, 13, 14);
	  COL_TRI(19, 35, 21);
	  COL_TRI(15, 28, 16);
	  COL_TRI(16, 29, 30);
	  COL_TRI(15, 16, 31);
	  COL_TRI(15, 32, 33);
	  COL_TRI(15, 31, 32);
	  COL_TRI(17, 15, 33);
	  COL_TRI(18, 33, 32);
	  COL_TRI(18, 32, 34);
	  COL_TRI(20, 36, 19);
	  COL_TRI(19, 21, 22);
	  COL_TRI(21, 35, 37);
	  COL_TRI(19, 22, 20);
	  COL_TRI(22, 23, 20);
	  COL_TRI(23, 38, 20);
	  COL_TRI(23, 22, 39);
	  COL_TRI(24, 25, 40);
	  COL_TRI(25, 41, 40);
	  COL_TRI(26, 24, 40);
	  COL_TRI(27, 26, 40);
	  COL_TRI(27, 42, 26);
	  COL_TRI(27, 43, 44);
	  COL_TRI(27, 44, 42);
	  COL_TRI(45, 46, 47);
	  COL_TRI(75, 76, 45);
	  COL_TRI(45, 47, 75);
	  COL_TRI(75, 47, 77);
	  COL_TRI(77, 78, 75);
	  COL_TRI(29, 16, 72);
	  COL_TRI(39, 69, 23);
	  COL_TRI(5, 4, 70);
	  COL_TRI(96, 73, 74);
	  COL_TRI(30, 31, 16);
	  COL_TRI(97, 0, 2);
	  COL_TRI(0, 97, 98);
	  COL_TRI(99, 2, 5);
	  COL_TRI(2, 100, 97);
	  COL_TRI(101, 100, 2);
	  COL_TRI(2, 99, 101);
	  COL_TRI(102, 99, 5);
	  COL_TRI(37, 35, 6);
	  COL_TRI(6, 8, 103);
	  COL_TRI(35, 104, 6);
	  COL_TRI(13, 107, 14);
	  COL_TRI(104, 12, 7);
	  COL_TRI(6, 104, 7);
	  COL_TRI(8, 10, 105);
	  COL_TRI(103, 8, 105);
	  COL_TRI(11, 14, 10);
	  COL_TRI(10, 14, 107);
	  COL_TRI(104, 106, 12);
	  COL_TRI(13, 12, 106);
	  COL_TRI(110, 13, 109);
	  COL_TRI(107, 13, 110);
	  COL_TRI(108, 13, 106);
	  COL_TRI(109, 13, 122);
	  COL_TRI(108, 122, 13);
	  COL_TRI(30, 22, 31);
	  COL_TRI(111, 31, 22);
	  COL_TRI(21, 37, 32);
	  COL_TRI(34, 32, 37);
	  COL_TRI(37, 22, 34);
	  COL_TRI(30, 34, 22);
	  COL_TRI(34, 123, 126);
	  COL_TRI(18, 34, 126);
	  COL_TRI(18, 126, 117);
	  COL_TRI(30, 123, 34);
	  COL_TRI(6, 22, 37);
	  COL_TRI(43, 124, 44);
	  COL_TRI(112, 44, 124);
	  COL_TRI(117, 126, 116);
	  COL_TRI(113, 99, 102);
	  COL_TRI(114, 115, 99);
	  COL_TRI(101, 99, 115);
	  COL_TRI(114, 99, 113);
	  COL_TRI(103, 22, 6);
	  COL_TRI(116, 127, 46);
	  COL_TRI(117, 116, 46);
	  COL_TRI(116, 126, 127);
	  COL_TRI(118, 127, 126);
	  COL_TRI(47, 46, 127);
	  COL_TRI(118, 126, 123);
	  COL_TRI(119, 122, 108);
	  COL_TRI(97, 100, 120);
	  COL_TRI(120, 100, 125);
	  COL_TRI(119, 120, 122);
	  COL_TRI(120, 125, 122);
	  COL_TRI(120, 98, 97);
	  COL_TRI(110, 109, 124);
	  COL_TRI(121, 124, 109);
	  COL_TRI(122, 125, 109);
	  COL_TRI(98, 120, 119);
	  COL_TRI(112, 124, 121);
	  COL_TRI(142, 39, 22);
	  COL_TRI_INIT(SURFACE_HANGABLE, 6);
	  COL_TRI(222, 263, 343);
	  COL_TRI(222, 343, 357);
	  COL_TRI(7, 202, 194);
	  COL_TRI(7, 12, 202);
	  COL_TRI(111, 32, 31);
	  COL_TRI(21, 32, 111);
	  COL_TRI_INIT(SURFACE_WATER, 30);
	  COL_TRI(286, 117, 214);
	  COL_TRI(286, 18, 117);
	  COL_TRI(60, 52, 59);
	  COL_TRI(48, 49, 50);
	  COL_TRI(48, 50, 51);
	  COL_TRI(51, 50, 52);
	  COL_TRI(52, 50, 53);
	  COL_TRI(50, 49, 53);
	  COL_TRI(54, 55, 49);
	  COL_TRI(54, 49, 48);
	  COL_TRI(55, 56, 49);
	  COL_TRI(49, 56, 53);
	  COL_TRI(57, 52, 53);
	  COL_TRI(56, 57, 53);
	  COL_TRI(56, 58, 57);
	  COL_TRI(55, 58, 56);
	  COL_TRI(59, 57, 58);
	  COL_TRI(57, 59, 52);
	  COL_TRI(51, 52, 60);
	  COL_TRI(62, 66, 61);
	  COL_TRI(58, 61, 64);
	  COL_TRI(62, 61, 58);
	  COL_TRI(55, 62, 58);
	  COL_TRI(59, 58, 63);
	  COL_TRI(58, 64, 63);
	  COL_TRI(60, 64, 65);
	  COL_TRI(65, 64, 61);
	  COL_TRI(59, 64, 60);
	  COL_TRI(64, 59, 63);
	  COL_TRI(39, 54, 48);
	  COL_TRI_INIT(SURFACE_FLOWING_WATER, 94);
	  COL_TRI_SPECIAL(136, 295, 102, 0x0);
	  COL_TRI_SPECIAL(5, 289, 73, 0x200);
	  COL_TRI_SPECIAL(284, 33, 285, 0x20B);
	  COL_TRI_SPECIAL(285, 33, 286, 0x20B);
	  COL_TRI_SPECIAL(286, 33, 18, 0x200);
	  COL_TRI_SPECIAL(287, 288, 71, 0x0);
	  COL_TRI_SPECIAL(71, 4, 3, 0x200);
	  COL_TRI_SPECIAL(71, 3, 287, 0x200);
	  COL_TRI_SPECIAL(71, 207, 74, 0x0);
	  COL_TRI_SPECIAL(71, 288, 207, 0x0);
	  COL_TRI_SPECIAL(0, 98, 119, 0x235);
	  COL_TRI_SPECIAL(136, 296, 135, 0x0);
	  COL_TRI_SPECIAL(136, 102, 96, 0x10F);
	  COL_TRI_SPECIAL(119, 108, 290, 0x240);
	  COL_TRI_SPECIAL(119, 297, 239, 0x215);
	  COL_TRI_SPECIAL(119, 298, 297, 0x235);
	  COL_TRI_SPECIAL(290, 298, 119, 0x240);
	  COL_TRI_SPECIAL(292, 299, 300, 0x215);
	  COL_TRI_SPECIAL(108, 106, 290, 0x240);
	  COL_TRI_SPECIAL(290, 106, 291, 0x235);
	  COL_TRI_SPECIAL(291, 292, 290, 0x23A);
	  COL_TRI_SPECIAL(292, 291, 299, 0x22B);
	  COL_TRI_SPECIAL(291, 208, 299, 0x22B);
	  COL_TRI_SPECIAL(239, 297, 292, 0x215);
	  COL_TRI_SPECIAL(3, 1, 239, 0x0);
	  COL_TRI_SPECIAL(3, 239, 294, 0x0);
	  COL_TRI_SPECIAL(239, 238, 294, 0x0);
	  COL_TRI_SPECIAL(239, 292, 300, 0x215);
	  COL_TRI_SPECIAL(293, 301, 302, 0x240);
	  COL_TRI_SPECIAL(293, 303, 301, 0x240);
	  COL_TRI_SPECIAL(102, 5, 96, 0x200);
	  COL_TRI_SPECIAL(212, 304, 104, 0x23D);
	  COL_TRI_SPECIAL(104, 247, 212, 0x23D);
	  COL_TRI_SPECIAL(285, 254, 284, 0xB);
	  COL_TRI_SPECIAL(295, 113, 102, 0x2B);
	  COL_TRI_SPECIAL(287, 294, 288, 0x0);
	  COL_TRI_SPECIAL(3, 294, 287, 0x0);
	  COL_TRI_SPECIAL(207, 288, 294, 0x200);
	  COL_TRI_SPECIAL(207, 294, 238, 0x200);
	  COL_TRI_SPECIAL(285, 286, 255, 0xB);
	  COL_TRI_SPECIAL(285, 255, 254, 0x10);
	  COL_TRI_SPECIAL(136, 96, 363, 0x100);
	  COL_TRI_SPECIAL(19, 33, 284, 0x215);
	  COL_TRI_SPECIAL(19, 284, 35, 0x24B);
	  COL_TRI_SPECIAL(5, 70, 289, 0x200);
	  COL_TRI_SPECIAL(96, 5, 73, 0x200);
	  COL_TRI_SPECIAL(135, 296, 211, 0x0);
	  COL_TRI_SPECIAL(136, 363, 296, 0x100);
	  COL_TRI_SPECIAL(104, 35, 247, 0x240);
	  COL_TRI_SPECIAL(119, 239, 0, 0x215);
	  COL_TRI_SPECIAL(104, 304, 106, 0x23D);
	  COL_TRI_SPECIAL(304, 291, 106, 0x240);
	  COL_TRI_SPECIAL(239, 1, 0, 0x215);
	  COL_TRI_SPECIAL(364, 96, 211, 0x0);
	  COL_TRI_SPECIAL(364, 363, 96, 0x2F5);
	  COL_TRI_SPECIAL(366, 368, 369, 0x200);
	  COL_TRI_SPECIAL(35, 284, 247, 0x240);
	  COL_TRI_SPECIAL(296, 365, 211, 0x0);
	  COL_TRI_SPECIAL(364, 211, 365, 0x0);
	  COL_TRI_SPECIAL(366, 367, 368, 0x200);
	  COL_TRI_SPECIAL(38, 16, 28, 0x20B);
	  COL_TRI_SPECIAL(60, 65, 67, 0x295);
	  COL_TRI_SPECIAL(67, 65, 68, 0x2A0);
	  COL_TRI_SPECIAL(36, 17, 33, 0x0);
	  COL_TRI_SPECIAL(36, 33, 19, 0x0);
	  COL_TRI_SPECIAL(20, 17, 36, 0x20B);
	  COL_TRI_SPECIAL(20, 15, 17, 0x20B);
	  COL_TRI_SPECIAL(28, 20, 38, 0x0);
	  COL_TRI_SPECIAL(28, 15, 20, 0x0);
	  COL_TRI_SPECIAL(71, 74, 73, 0x0);
	  COL_TRI_SPECIAL(38, 23, 16, 0x20A);
	  COL_TRI_SPECIAL(69, 16, 23, 0x0);
	  COL_TRI_SPECIAL(69, 72, 16, 0x0);
	  COL_TRI_SPECIAL(39, 72, 69, 0x215);
	  COL_TRI_SPECIAL(39, 29, 72, 0x20B);
	  COL_TRI_SPECIAL(29, 39, 48, 0x220);
	  COL_TRI_SPECIAL(70, 4, 71, 0x0);
	  COL_TRI_SPECIAL(70, 71, 73, 0x0);
	  COL_TRI_SPECIAL(92, 132, 61, 0x282);
	  COL_TRI_SPECIAL(51, 60, 128, 0x2B5);
	  COL_TRI_SPECIAL(67, 129, 60, 0x2B5);
	  COL_TRI_SPECIAL(128, 60, 129, 0x2B5);
	  COL_TRI_SPECIAL(130, 129, 67, 0xAB);
	  COL_TRI_SPECIAL(131, 130, 67, 0xA0);
	  COL_TRI_SPECIAL(131, 67, 68, 0x95);
	  COL_TRI_SPECIAL(131, 68, 132, 0x8B);
	  COL_TRI_SPECIAL(131, 132, 133, 0x80);
	  COL_TRI_SPECIAL(132, 68, 65, 0x295);
	  COL_TRI_SPECIAL(132, 65, 61, 0x280);
	  COL_TRI_SPECIAL(132, 92, 134, 0x75);
	  COL_TRI_SPECIAL(132, 134, 133, 0x80);
	  COL_TRI_SPECIAL(136, 137, 138, 0x0);
	  COL_TRI_SPECIAL(66, 92, 61, 0x275);
	  COL_TRI_SPECIAL(135, 137, 136, 0x0);
	  COL_TRI_INIT(SURFACE_VERY_SLIPPERY, 78);
	  COL_TRI(376, 90, 89);
	  COL_TRI(373, 376, 89);
	  COL_TRI(161, 372, 183);
	  COL_TRI(163, 374, 161);
	  COL_TRI(376, 91, 90);
	  COL_TRI(376, 375, 91);
	  COL_TRI(376, 374, 375);
	  COL_TRI(374, 376, 372);
	  COL_TRI(113, 295, 374);
	  COL_TRI(374, 372, 161);
	  COL_TRI(375, 295, 136);
	  COL_TRI(183, 372, 373);
	  COL_TRI(113, 374, 163);
	  COL_TRI(375, 138, 91);
	  COL_TRI(372, 376, 373);
	  COL_TRI(375, 136, 138);
	  COL_TRI(374, 295, 375);
	  COL_TRI(88, 89, 90);
	  COL_TRI(91, 88, 90);
	  COL_TRI(150, 153, 151);
	  COL_TRI(25, 143, 41);
	  COL_TRI(143, 25, 144);
	  COL_TRI(145, 143, 146);
	  COL_TRI(143, 144, 146);
	  COL_TRI(147, 144, 148);
	  COL_TRI(148, 144, 149);
	  COL_TRI(144, 25, 149);
	  COL_TRI(147, 146, 144);
	  COL_TRI(147, 94, 146);
	  COL_TRI(145, 146, 94);
	  COL_TRI(80, 145, 94);
	  COL_TRI(150, 151, 152);
	  COL_TRI(155, 151, 153);
	  COL_TRI(155, 177, 151);
	  COL_TRI(150, 152, 154);
	  COL_TRI(156, 177, 155);
	  COL_TRI(156, 178, 177);
	  COL_TRI(26, 160, 24);
	  COL_TRI(26, 179, 157);
	  COL_TRI(157, 160, 26);
	  COL_TRI(157, 179, 176);
	  COL_TRI(158, 176, 179);
	  COL_TRI(159, 160, 157);
	  COL_TRI(160, 159, 149);
	  COL_TRI(149, 24, 160);
	  COL_TRI(95, 150, 154);
	  COL_TRI(88, 180, 89);
	  COL_TRI(88, 137, 180);
	  COL_TRI(165, 172, 185);
	  COL_TRI(161, 162, 166);
	  COL_TRI(162, 161, 183);
	  COL_TRI(163, 161, 166);
	  COL_TRI(164, 163, 166);
	  COL_TRI(165, 169, 166);
	  COL_TRI(166, 169, 164);
	  COL_TRI(167, 164, 169);
	  COL_TRI(163, 164, 184);
	  COL_TRI(167, 184, 164);
	  COL_TRI(168, 169, 185);
	  COL_TRI(169, 165, 185);
	  COL_TRI(167, 169, 168);
	  COL_TRI(170, 185, 171);
	  COL_TRI(170, 168, 185);
	  COL_TRI(171, 185, 172);
	  COL_TRI(172, 186, 171);
	  COL_TRI(173, 170, 171);
	  COL_TRI(173, 171, 186);
	  COL_TRI(24, 149, 25);
	  COL_TRI(173, 186, 181);
	  COL_TRI(174, 181, 186);
	  COL_TRI(175, 141, 187);
	  COL_TRI(128, 187, 141);
	  COL_TRI(156, 141, 175);
	  COL_TRI(148, 149, 159);
	  COL_TRI(158, 181, 174);
	  COL_TRI(174, 182, 158);
	  COL_TRI(176, 158, 182);
	  COL_TRI(156, 175, 178);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 130);
	  COL_TRI(82, 411, 84);
	  COL_TRI(411, 410, 86);
	  COL_TRI(84, 411, 86);
	  COL_TRI(82, 417, 411);
	  COL_TRI(86, 410, 415);
	  COL_TRI(86, 415, 87);
	  COL_TRI(87, 417, 82);
	  COL_TRI(87, 415, 417);
	  COL_TRI(317, 314, 316);
	  COL_TRI(327, 321, 311);
	  COL_TRI(397, 390, 395);
	  COL_TRI(396, 388, 397);
	  COL_TRI(397, 388, 390);
	  COL_TRI(396, 379, 388);
	  COL_TRI(395, 390, 389);
	  COL_TRI(387, 379, 396);
	  COL_TRI(391, 387, 396);
	  COL_TRI(387, 377, 379);
	  COL_TRI(381, 377, 387);
	  COL_TRI(394, 387, 391);
	  COL_TRI(381, 380, 377);
	  COL_TRI(380, 378, 377);
	  COL_TRI(401, 400, 398);
	  COL_TRI(380, 386, 378);
	  COL_TRI(386, 384, 378);
	  COL_TRI(386, 395, 384);
	  COL_TRI(395, 389, 384);
	  COL_TRI(398, 391, 399);
	  COL_TRI(398, 400, 391);
	  COL_TRI(399, 391, 392);
	  COL_TRI(400, 394, 391);
	  COL_TRI(401, 398, 399);
	  COL_TRI(401, 399, 402);
	  COL_TRI(402, 399, 393);
	  COL_TRI(399, 392, 393);
	  COL_TRI(403, 383, 400);
	  COL_TRI(400, 383, 394);
	  COL_TRI(403, 404, 383);
	  COL_TRI(404, 382, 383);
	  COL_TRI(401, 405, 404);
	  COL_TRI(405, 385, 404);
	  COL_TRI(401, 404, 403);
	  COL_TRI(404, 385, 382);
	  COL_TRI(405, 402, 385);
	  COL_TRI(402, 393, 385);
	  COL_TRI(401, 402, 405);
	  COL_TRI(401, 403, 400);
	  COL_TRI(314, 315, 316);
	  COL_TRI(242, 305, 306);
	  COL_TRI(307, 306, 308);
	  COL_TRI(307, 308, 245);
	  COL_TRI(242, 309, 305);
	  COL_TRI(310, 311, 312);
	  COL_TRI(313, 245, 308);
	  COL_TRI(320, 213, 329);
	  COL_TRI(270, 269, 326);
	  COL_TRI(317, 322, 327);
	  COL_TRI(316, 318, 317);
	  COL_TRI(318, 322, 317);
	  COL_TRI(319, 328, 320);
	  COL_TRI(252, 320, 328);
	  COL_TRI(321, 312, 311);
	  COL_TRI(322, 321, 327);
	  COL_TRI(214, 117, 46);
	  COL_TRI(214, 46, 45);
	  COL_TRI(319, 323, 328);
	  COL_TRI(323, 325, 328);
	  COL_TRI(324, 252, 328);
	  COL_TRI(325, 324, 328);
	  COL_TRI(270, 330, 317);
	  COL_TRI(270, 317, 327);
	  COL_TRI(329, 270, 327);
	  COL_TRI(329, 327, 331);
	  COL_TRI(339, 242, 315);
	  COL_TRI(306, 370, 242);
	  COL_TRI(306, 307, 370);
	  COL_TRI(305, 358, 306);
	  COL_TRI(358, 308, 306);
	  COL_TRI(310, 312, 307);
	  COL_TRI(245, 310, 307);
	  COL_TRI(316, 315, 370);
	  COL_TRI(315, 242, 370);
	  COL_TRI(326, 315, 314);
	  COL_TRI(320, 310, 319);
	  COL_TRI(310, 342, 319);
	  COL_TRI(310, 245, 342);
	  COL_TRI(310, 320, 311);
	  COL_TRI(340, 326, 371);
	  COL_TRI(346, 340, 371);
	  COL_TRI(340, 339, 315);
	  COL_TRI(340, 315, 326);
	  COL_TRI(311, 320, 331);
	  COL_TRI(326, 250, 371);
	  COL_TRI(326, 314, 330);
	  COL_TRI(326, 330, 270);
	  COL_TRI(269, 250, 326);
	  COL_TRI(314, 317, 330);
	  COL_TRI(250, 344, 371);
	  COL_TRI(329, 331, 320);
	  COL_TRI(320, 252, 213);
	  COL_TRI(345, 346, 371);
	  COL_TRI(311, 331, 327);
	  COL_TRI(305, 341, 358);
	  COL_TRI(358, 354, 308);
	  COL_TRI(344, 345, 371);
	  COL_TRI(80, 66, 62);
	  COL_TRI(62, 55, 79);
	  COL_TRI(79, 80, 62);
	  COL_TRI(81, 82, 83);
	  COL_TRI(83, 84, 85);
	  COL_TRI(83, 82, 84);
	  COL_TRI(85, 84, 86);
	  COL_TRI(85, 86, 79);
	  COL_TRI(87, 79, 86);
	  COL_TRI(81, 79, 87);
	  COL_TRI(81, 87, 82);
	  COL_TRI(39, 142, 54);
	  COL_TRI(29, 139, 30);
	  COL_TRI(139, 29, 48);
	  COL_TRI(123, 30, 139);
	  COL_TRI(128, 140, 139);
	  COL_TRI(139, 51, 128);
	  COL_TRI(48, 51, 139);
	  COL_TRI(140, 123, 139);
	  COL_TRI(128, 141, 140);
	  COL_TRI(80, 79, 81);
	  COL_TRI(55, 142, 85);
	  COL_TRI(142, 55, 54);
	  COL_TRI(83, 85, 142);
	  COL_TRI(55, 85, 79);
	  COL_TRI_INIT(SURFACE_WALL_MISC, 24);
	  COL_TRI(413, 409, 406);
	  COL_TRI(413, 406, 414);
	  COL_TRI(412, 409, 413);
	  COL_TRI(412, 407, 409);
	  COL_TRI(414, 406, 408);
	  COL_TRI(414, 408, 416);
	  COL_TRI(416, 407, 412);
	  COL_TRI(416, 408, 407);
	  COL_TRI(298, 303, 297);
	  COL_TRI(303, 293, 292);
	  COL_TRI(303, 292, 297);
	  COL_TRI(298, 301, 303);
	  COL_TRI(292, 293, 302);
	  COL_TRI(292, 302, 290);
	  COL_TRI(290, 302, 301);
	  COL_TRI(290, 301, 298);
	  COL_TRI(296, 369, 365);
	  COL_TRI(296, 366, 369);
	  COL_TRI(363, 366, 296);
	  COL_TRI(365, 369, 368);
	  COL_TRI(365, 368, 364);
	  COL_TRI(363, 367, 366);
	  COL_TRI(364, 368, 367);
	  COL_TRI(364, 367, 363);
	  COL_TRI_INIT(SURFACE_NOISE_DEFAULT, 52);
	  COL_TRI(77, 95, 78);
	  COL_TRI(190, 10, 192);
	  COL_TRI(95, 47, 150);
	  COL_TRI(189, 47, 127);
	  COL_TRI(189, 150, 47);
	  COL_TRI(153, 150, 189);
	  COL_TRI(190, 145, 191);
	  COL_TRI(190, 83, 103);
	  COL_TRI(105, 10, 190);
	  COL_TRI(103, 105, 190);
	  COL_TRI(83, 190, 191);
	  COL_TRI(190, 143, 145);
	  COL_TRI(26, 42, 179);
	  COL_TRI(191, 145, 81);
	  COL_TRI(145, 80, 81);
	  COL_TRI(83, 191, 81);
	  COL_TRI(83, 142, 103);
	  COL_TRI(190, 40, 143);
	  COL_TRI(40, 41, 143);
	  COL_TRI(107, 192, 10);
	  COL_TRI(44, 179, 42);
	  COL_TRI(179, 44, 158);
	  COL_TRI(153, 189, 155);
	  COL_TRI(189, 127, 155);
	  COL_TRI(155, 127, 118);
	  COL_TRI(22, 103, 142);
	  COL_TRI(192, 110, 124);
	  COL_TRI(101, 115, 100);
	  COL_TRI(115, 114, 184);
	  COL_TRI(115, 184, 167);
	  COL_TRI(115, 167, 100);
	  COL_TRI(100, 167, 125);
	  COL_TRI(107, 110, 192);
	  COL_TRI(192, 40, 190);
	  COL_TRI(27, 40, 192);
	  COL_TRI(27, 192, 43);
	  COL_TRI(124, 43, 192);
	  COL_TRI(156, 155, 118);
	  COL_TRI(193, 156, 118);
	  COL_TRI(193, 118, 123);
	  COL_TRI(168, 125, 167);
	  COL_TRI(109, 125, 170);
	  COL_TRI(168, 170, 125);
	  COL_TRI(156, 193, 141);
	  COL_TRI(140, 141, 193);
	  COL_TRI(193, 123, 140);
	  COL_TRI(109, 170, 121);
	  COL_TRI(44, 112, 158);
	  COL_TRI(173, 121, 170);
	  COL_TRI(112, 121, 173);
	  COL_TRI(173, 181, 112);
	  COL_TRI(181, 158, 112);
	  COL_TRI_INIT(SURFACE_NOISE_SLIPPERY, 12);
	  COL_TRI(80, 93, 66);
	  COL_TRI(92, 93, 94);
	  COL_TRI(93, 92, 66);
	  COL_TRI(94, 134, 92);
	  COL_TRI(147, 134, 94);
	  COL_TRI(94, 93, 80);
	  COL_TRI(128, 129, 187);
	  COL_TRI(91, 138, 137);
	  COL_TRI(91, 137, 88);
	  COL_TRI(188, 184, 114);
	  COL_TRI(188, 114, 113);
	  COL_TRI(184, 188, 163);
	  COL_TRI_INIT(SURFACE_NO_CAM_COLLISION, 117);
	  COL_TRI(418, 419, 420);
	  COL_TRI(418, 421, 419);
	  COL_TRI(422, 418, 13);
	  COL_TRI(422, 421, 418);
	  COL_TRI(419, 421, 423);
	  COL_TRI(421, 422, 423);
	  COL_TRI(424, 419, 423);
	  COL_TRI(424, 425, 419);
	  COL_TRI(419, 425, 426);
	  COL_TRI(420, 419, 426);
	  COL_TRI(422, 427, 424);
	  COL_TRI(422, 428, 427);
	  COL_TRI(422, 424, 423);
	  COL_TRI(422, 122, 428);
	  COL_TRI(422, 13, 122);
	  COL_TRI(427, 425, 424);
	  COL_TRI(430, 435, 476);
	  COL_TRI(427, 429, 425);
	  COL_TRI(426, 425, 429);
	  COL_TRI(426, 429, 474);
	  COL_TRI(429, 475, 474);
	  COL_TRI(429, 430, 475);
	  COL_TRI(430, 429, 427);
	  COL_TRI(122, 120, 428);
	  COL_TRI(120, 431, 428);
	  COL_TRI(431, 432, 428);
	  COL_TRI(432, 427, 428);
	  COL_TRI(433, 430, 432);
	  COL_TRI(433, 435, 430);
	  COL_TRI(430, 476, 475);
	  COL_TRI(432, 430, 427);
	  COL_TRI(434, 435, 433);
	  COL_TRI(435, 477, 476);
	  COL_TRI(435, 434, 477);
	  COL_TRI(97, 436, 431);
	  COL_TRI(431, 436, 432);
	  COL_TRI(436, 433, 432);
	  COL_TRI(437, 436, 97);
	  COL_TRI(436, 437, 433);
	  COL_TRI(438, 434, 433);
	  COL_TRI(437, 438, 433);
	  COL_TRI(97, 431, 120);
	  COL_TRI(437, 97, 2);
	  COL_TRI(442, 440, 441);
	  COL_TRI(434, 439, 478);
	  COL_TRI(434, 478, 477);
	  COL_TRI(439, 434, 438);
	  COL_TRI(439, 479, 478);
	  COL_TRI(439, 445, 479);
	  COL_TRI(440, 439, 441);
	  COL_TRI(440, 445, 439);
	  COL_TRI(441, 439, 438);
	  COL_TRI(442, 437, 2);
	  COL_TRI(437, 441, 438);
	  COL_TRI(437, 442, 441);
	  COL_TRI(442, 2, 99);
	  COL_TRI(443, 442, 99);
	  COL_TRI(442, 443, 440);
	  COL_TRI(443, 99, 481);
	  COL_TRI(444, 443, 481);
	  COL_TRI(444, 480, 443);
	  COL_TRI(440, 480, 482);
	  COL_TRI(440, 443, 480);
	  COL_TRI(445, 446, 479);
	  COL_TRI(446, 483, 479);
	  COL_TRI(446, 440, 482);
	  COL_TRI(446, 445, 440);
	  COL_TRI(447, 448, 450);
	  COL_TRI(448, 452, 451);
	  COL_TRI(449, 447, 453);
	  COL_TRI(450, 453, 447);
	  COL_TRI(448, 447, 452);
	  COL_TRI(447, 484, 452);
	  COL_TRI(447, 449, 484);
	  COL_TRI(451, 452, 455);
	  COL_TRI(452, 484, 455);
	  COL_TRI(451, 455, 454);
	  COL_TRI(453, 450, 454);
	  COL_TRI(454, 455, 453);
	  COL_TRI(455, 449, 453);
	  COL_TRI(455, 484, 449);
	  COL_TRI(456, 457, 34);
	  COL_TRI(34, 458, 459);
	  COL_TRI(34, 457, 458);
	  COL_TRI(464, 465, 462);
	  COL_TRI(456, 485, 457);
	  COL_TRI(457, 485, 461);
	  COL_TRI(458, 457, 461);
	  COL_TRI(458, 486, 487);
	  COL_TRI(459, 458, 487);
	  COL_TRI(458, 461, 486);
	  COL_TRI(459, 487, 460);
	  COL_TRI(460, 485, 456);
	  COL_TRI(460, 487, 485);
	  COL_TRI(461, 485, 487);
	  COL_TRI(461, 487, 486);
	  COL_TRI(462, 467, 468);
	  COL_TRI(462, 465, 467);
	  COL_TRI(463, 464, 462);
	  COL_TRI(472, 488, 489);
	  COL_TRI(465, 466, 467);
	  COL_TRI(466, 465, 464);
	  COL_TRI(467, 488, 6);
	  COL_TRI(467, 489, 488);
	  COL_TRI(467, 466, 489);
	  COL_TRI(468, 467, 6);
	  COL_TRI(6, 472, 471);
	  COL_TRI(6, 488, 472);
	  COL_TRI(469, 489, 464);
	  COL_TRI(466, 464, 489);
	  COL_TRI(470, 464, 463);
	  COL_TRI(470, 469, 464);
	  COL_TRI(471, 469, 470);
	  COL_TRI(471, 472, 469);
	  COL_TRI(473, 472, 489);
	  COL_TRI(469, 473, 489);
	  COL_TRI(472, 473, 469);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(30);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03,     /*pos*/     0, 2867, -3924, /*yaw*/ 0);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/ -1333,  711,  1881);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/ -6220,  468,  3458);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/ -5069,  350,  3221);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/ -2566,  438,  2626);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/ -1900,  401,  2868);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/  6399,  494, -1680);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/   767,  498,  2598);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/  1476,  189,  3280);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/  3153,  206,   469);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/  6178,  219,   167);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/ -6510,  260,  1411);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/  5457,  528, -3259);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/  5868,  698, -4453);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/  6408,  869, -5314);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/ -4711,  342,   433);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/  1132,  365,  1977);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/ -5506,  364,  -661);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/ -6269,  402, -2145);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/ -5600,  440, -2627);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/  1919,  268,  1157);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/ -5957,  517, -3447);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/ -2021,  633,  1468);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/  -109,  613,  3008);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/  5774,  413, -1114);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/  5954,  526, -2846);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,      /*pos*/ -5204,  296,   811);
	  SPECIAL_OBJECT_WITH_YAW_AND_PARAM(/*preset*/ special_metal_door_warp,  /*pos*/  3292, -511, -2931, /*yaw*/ 160, /*bhvParam2*/ 2);
	  SPECIAL_OBJECT_WITH_YAW_AND_PARAM(/*preset*/ special_castle_door_warp, /*pos*/   -76,  803, -3155, /*yaw*/   0, /*bhvParam2*/ 0);
	  SPECIAL_OBJECT_WITH_YAW_AND_PARAM(/*preset*/ special_castle_door_warp, /*pos*/    77,  803, -3155, /*yaw*/ 128, /*bhvParam2*/ 1);
	  COL_WATER_BOX_INIT(2);
	  COL_WATER_BOX(0, -7129, -7222, 8253, -58, -81);
	  COL_WATER_BOX(1, 1024, -58, 8230, 8137, -81);
	  COL_END();
	}

	function castle_grounds_seg7_collision_moat_grills() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(-3225, -562, -2178);
	  COL_VERTEX(-3532, -562, -2178);
	  COL_VERTEX(-3225, -562, -1871);
	  COL_VERTEX(-3532, -562, -1871);
	  COL_VERTEX(-3532, -1330, -6069);
	  COL_VERTEX(-4044, -1330, -6069);
	  COL_VERTEX(-4044, -1330, -5557);
	  COL_VERTEX(-3532, -1330, -5557);
	  COL_TRI_INIT(SURFACE_FLOWING_WATER, 4);
	  COL_TRI_SPECIAL(0, 1, 2, 0x235);
	  COL_TRI_SPECIAL(1, 3, 2, 0x235);
	  COL_TRI_SPECIAL(4, 5, 6, 0x100);
	  COL_TRI_SPECIAL(4, 6, 7, 0x100);
	  COL_TRI_STOP();
	  COL_END();
	}

	function castle_grounds_seg7_collision_cannon_grill() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x4);
	  COL_VERTEX(2283, 65, 2072);
	  COL_VERTEX(2485, 65, 1849);
	  COL_VERTEX(2283, 65, 1849);
	  COL_VERTEX(2485, 65, 2072);
	  COL_TRI_INIT(SURFACE_DEFAULT, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI_STOP();
	  COL_END();
	}

	var castle_grounds = [
	  castle_grounds_seg7_collision_level,
	  castle_grounds_seg7_collision_moat_grills,
	  castle_grounds_seg7_collision_cannon_grill
	];

	function inside_castle_seg7_area_1_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x61B);
	  COL_VERTEX(-1125, -50, 973);
	  COL_VERTEX(-921, -50, 973);
	  COL_VERTEX(-1279, -50, 819);
	  COL_VERTEX(-767, -50, 614);
	  COL_VERTEX(-1125, -50, 461);
	  COL_VERTEX(-767, -50, 819);
	  COL_VERTEX(-921, -50, 461);
	  COL_VERTEX(-1279, -50, 594);
	  COL_VERTEX(783, 0, -2518);
	  COL_VERTEX(742, -30, -2661);
	  COL_VERTEX(742, -30, -2559);
	  COL_VERTEX(783, 0, -2661);
	  COL_VERTEX(516, 0, -2518);
	  COL_VERTEX(783, -204, -3685);
	  COL_VERTEX(742, -235, -3685);
	  COL_VERTEX(538, -30, -2559);
	  COL_VERTEX(413, 0, -2672);
	  COL_VERTEX(435, -30, -2713);
	  COL_VERTEX(99, 0, -2672);
	  COL_VERTEX(77, -30, -2713);
	  COL_VERTEX(-3, 0, -2518);
	  COL_VERTEX(-25, -30, -2559);
	  COL_VERTEX(-270, 0, -2518);
	  COL_VERTEX(-229, -235, -3685);
	  COL_VERTEX(-1416, 614, -450);
	  COL_VERTEX(-818, 614, -450);
	  COL_VERTEX(-613, 594, -409);
	  COL_VERTEX(-460, 102, 1382);
	  COL_VERTEX(-613, 102, 1382);
	  COL_VERTEX(-1637, 102, 1434);
	  COL_VERTEX(-1535, 205, 1536);
	  COL_VERTEX(439, 307, 29);
	  COL_VERTEX(553, 307, -84);
	  COL_VERTEX(-2457, 287, 0);
	  COL_VERTEX(-2559, 287, -101);
	  COL_VERTEX(-2232, 128, 282);
	  COL_VERTEX(0, 696, -1023);
	  COL_VERTEX(614, 696, -1023);
	  COL_VERTEX(819, 696, -1228);
	  COL_VERTEX(-255, 594, -767);
	  COL_VERTEX(-2030, 614, -1064);
	  COL_VERTEX(-2644, 614, -1064);
	  COL_VERTEX(-2837, 614, -1257);
	  COL_VERTEX(-229, -30, -2559);
	  COL_VERTEX(-229, -30, -2661);
	  COL_VERTEX(-270, 0, -2661);
	  COL_VERTEX(-270, -204, -3685);
	  COL_VERTEX(-2047, 594, -1023);
	  COL_VERTEX(-1433, 594, -409);
	  COL_VERTEX(-1228, 594, -409);
	  COL_VERTEX(-1228, 614, -450);
	  COL_VERTEX(-2661, 594, -1023);
	  COL_VERTEX(-818, 594, -409);
	  COL_VERTEX(-630, 614, -450);
	  COL_VERTEX(-284, 614, -796);
	  COL_VERTEX(-511, 205, 1536);
	  COL_VERTEX(-409, 102, 1434);
	  COL_VERTEX(-665, 102, 1536);
	  COL_VERTEX(-1586, 102, 1382);
	  COL_VERTEX(-1381, 102, 1536);
	  COL_VERTEX(-1433, 102, 1382);
	  COL_VERTEX(512, 287, -101);
	  COL_VERTEX(553, 307, -1023);
	  COL_VERTEX(512, 287, -1023);
	  COL_VERTEX(410, 287, 0);
	  COL_VERTEX(156, 108, 253);
	  COL_VERTEX(185, 128, 282);
	  COL_VERTEX(-2600, 307, -84);
	  COL_VERTEX(-2600, 307, -1023);
	  COL_VERTEX(-2559, 287, -1023);
	  COL_VERTEX(-2486, 307, 29);
	  COL_VERTEX(-2203, 108, 253);
	  COL_VERTEX(597, 717, -1064);
	  COL_VERTEX(790, 717, -1257);
	  COL_VERTEX(0, 717, -1064);
	  COL_VERTEX(-28, 717, -1052);
	  COL_VERTEX(-2866, 594, -1228);
	  COL_VERTEX(-5548, 512, -3853);
	  COL_VERTEX(-5042, 512, -4359);
	  COL_VERTEX(-5476, 512, -4794);
	  COL_VERTEX(-5983, 512, -4287);
	  COL_VERTEX(-1177, 512, -357);
	  COL_VERTEX(-869, 0, 128);
	  COL_VERTEX(-869, 512, -357);
	  COL_VERTEX(-1177, 0, 128);
	  COL_VERTEX(-5631, 307, -153);
	  COL_VERTEX(-5252, 307, -357);
	  COL_VERTEX(-5631, 307, -357);
	  COL_VERTEX(-5252, 307, -153);
	  COL_VERTEX(-5252, 307, -562);
	  COL_VERTEX(-5631, 307, -562);
	  COL_VERTEX(-5252, 307, -767);
	  COL_VERTEX(-5631, 307, -767);
	  COL_VERTEX(-5119, 307, -357);
	  COL_VERTEX(-5221, 307, -357);
	  COL_VERTEX(-5221, 307, -153);
	  COL_VERTEX(-5119, 307, -153);
	  COL_VERTEX(-5119, 307, -562);
	  COL_VERTEX(-5221, 307, -562);
	  COL_VERTEX(-5119, 307, -767);
	  COL_VERTEX(-5221, 307, -767);
	  COL_VERTEX(-2405, -409, -4351);
	  COL_VERTEX(-2610, -409, -4249);
	  COL_VERTEX(-2405, -409, -4249);
	  COL_VERTEX(-2610, -409, -4351);
	  COL_VERTEX(-2405, -409, -4761);
	  COL_VERTEX(-2610, -409, -4761);
	  COL_VERTEX(-2610, -409, -4382);
	  COL_VERTEX(-2405, -409, -4382);
	  COL_VERTEX(-2201, -409, -4351);
	  COL_VERTEX(-2201, -409, -4249);
	  COL_VERTEX(-2201, -409, -4382);
	  COL_VERTEX(-2201, -409, -4761);
	  COL_VERTEX(-1996, -409, -4351);
	  COL_VERTEX(-1996, -409, -4249);
	  COL_VERTEX(-1996, -409, -4761);
	  COL_VERTEX(-1996, -409, -4382);
	  COL_VERTEX(-229, -306, -3685);
	  COL_VERTEX(-270, -306, -3685);
	  COL_VERTEX(-270, -101, -2518);
	  COL_VERTEX(783, -306, -3685);
	  COL_VERTEX(742, -306, -3685);
	  COL_VERTEX(783, -101, -2518);
	  COL_VERTEX(413, -101, -2672);
	  COL_VERTEX(516, -101, -2518);
	  COL_VERTEX(-3, -101, -2518);
	  COL_VERTEX(-630, 512, -450);
	  COL_VERTEX(185, 26, 282);
	  COL_VERTEX(156, 26, 253);
	  COL_VERTEX(553, 205, -84);
	  COL_VERTEX(-2232, 26, 282);
	  COL_VERTEX(597, 614, -1064);
	  COL_VERTEX(790, 614, -1257);
	  COL_VERTEX(-28, 614, -1052);
	  COL_VERTEX(-284, 512, -796);
	  COL_VERTEX(-2644, 512, -1064);
	  COL_VERTEX(-2030, 512, -1064);
	  COL_VERTEX(-1416, 512, -450);
	  COL_VERTEX(99, -101, -2672);
	  COL_VERTEX(-1228, 512, -450);
	  COL_VERTEX(-818, 512, -450);
	  COL_VERTEX(553, 26, -84);
	  COL_VERTEX(553, 205, -1023);
	  COL_VERTEX(-2600, 26, -84);
	  COL_VERTEX(-2203, 26, 253);
	  COL_VERTEX(-2600, 205, -1023);
	  COL_VERTEX(-2600, 205, -84);
	  COL_VERTEX(0, 614, -1064);
	  COL_VERTEX(-2837, 512, -1257);
	  COL_VERTEX(154, -306, -4505);
	  COL_VERTEX(-50, -306, -4402);
	  COL_VERTEX(154, -306, -4402);
	  COL_VERTEX(-50, -306, -4505);
	  COL_VERTEX(154, -306, -4914);
	  COL_VERTEX(-50, -306, -4914);
	  COL_VERTEX(-50, -306, -4535);
	  COL_VERTEX(154, -306, -4535);
	  COL_VERTEX(358, -306, -4505);
	  COL_VERTEX(358, -306, -4402);
	  COL_VERTEX(358, -306, -4535);
	  COL_VERTEX(358, -306, -4914);
	  COL_VERTEX(563, -306, -4505);
	  COL_VERTEX(563, -306, -4402);
	  COL_VERTEX(563, -306, -4914);
	  COL_VERTEX(563, -306, -4535);
	  COL_VERTEX(4198, 307, 77);
	  COL_VERTEX(4301, 307, -127);
	  COL_VERTEX(4198, 307, -127);
	  COL_VERTEX(4301, 307, 77);
	  COL_VERTEX(4301, 307, -332);
	  COL_VERTEX(4198, 307, -332);
	  COL_VERTEX(4301, 307, -537);
	  COL_VERTEX(4198, 307, -537);
	  COL_VERTEX(4710, 307, -127);
	  COL_VERTEX(4332, 307, 77);
	  COL_VERTEX(4710, 307, 77);
	  COL_VERTEX(4332, 307, -127);
	  COL_VERTEX(4710, 307, -332);
	  COL_VERTEX(4332, 307, -332);
	  COL_VERTEX(4710, 307, -537);
	  COL_VERTEX(4332, 307, -537);
	  COL_VERTEX(-869, 768, -1023);
	  COL_VERTEX(-1177, 768, -1074);
	  COL_VERTEX(-869, 768, -1074);
	  COL_VERTEX(-1177, 768, -1125);
	  COL_VERTEX(-869, 768, -1125);
	  COL_VERTEX(-1177, 768, -1023);
	  COL_VERTEX(-665, 512, -1125);
	  COL_VERTEX(-869, 512, -1125);
	  COL_VERTEX(-869, 512, -1074);
	  COL_VERTEX(-665, 1024, -1125);
	  COL_VERTEX(-1381, 1024, -1125);
	  COL_VERTEX(-869, 512, -1023);
	  COL_VERTEX(-1177, 512, -1125);
	  COL_VERTEX(-1177, 512, -1074);
	  COL_VERTEX(-1381, 512, -1125);
	  COL_VERTEX(-665, 512, -1535);
	  COL_VERTEX(-1279, 512, -1228);
	  COL_VERTEX(-1279, 512, -1125);
	  COL_VERTEX(-767, 512, -1228);
	  COL_VERTEX(-3097, 410, -1740);
	  COL_VERTEX(-3097, -409, -3634);
	  COL_VERTEX(-1919, 410, -4351);
	  COL_VERTEX(-2687, -409, -4351);
	  COL_VERTEX(-2610, -306, -4351);
	  COL_VERTEX(-1919, -409, -4351);
	  COL_VERTEX(-1996, -306, -4351);
	  COL_VERTEX(-1509, 410, -3634);
	  COL_VERTEX(-2124, -204, -2277);
	  COL_VERTEX(-2124, -204, -2047);
	  COL_VERTEX(-2175, -127, -2277);
	  COL_VERTEX(-2124, -127, -2277);
	  COL_VERTEX(-2175, -204, -2047);
	  COL_VERTEX(-2124, -127, -2226);
	  COL_VERTEX(-2175, 51, -1996);
	  COL_VERTEX(-2431, -204, -2277);
	  COL_VERTEX(-2431, -204, -2047);
	  COL_VERTEX(-2482, -127, -2277);
	  COL_VERTEX(-2431, -127, -2277);
	  COL_VERTEX(-2482, -204, -2047);
	  COL_VERTEX(-2431, -127, -2226);
	  COL_VERTEX(-2533, -153, -2991);
	  COL_VERTEX(-2636, -153, -2866);
	  COL_VERTEX(-2509, -204, -2940);
	  COL_VERTEX(-2596, -153, -2834);
	  COL_VERTEX(-2509, -153, -2940);
	  COL_VERTEX(-2046, -153, -2940);
	  COL_VERTEX(-2021, -153, -2991);
	  COL_VERTEX(-1959, -153, -2834);
	  COL_VERTEX(-1919, -153, -2866);
	  COL_VERTEX(-2175, -204, -2226);
	  COL_VERTEX(-2175, -178, -2201);
	  COL_VERTEX(-2175, -178, -2226);
	  COL_VERTEX(-2175, -153, -2175);
	  COL_VERTEX(-2175, -153, -2201);
	  COL_VERTEX(-2175, -127, -2149);
	  COL_VERTEX(-2175, -127, -2175);
	  COL_VERTEX(-2175, -101, -2149);
	  COL_VERTEX(-2175, -101, -2124);
	  COL_VERTEX(-2175, -76, -2124);
	  COL_VERTEX(-2175, -76, -2098);
	  COL_VERTEX(-2175, -50, -2098);
	  COL_VERTEX(-2175, -50, -2073);
	  COL_VERTEX(-2175, -25, -2047);
	  COL_VERTEX(-2175, -25, -2073);
	  COL_VERTEX(-2431, 0, -2047);
	  COL_VERTEX(-2175, 0, -1996);
	  COL_VERTEX(-2153, 51, -1996);
	  COL_VERTEX(-2124, 51, -2047);
	  COL_VERTEX(-2021, 0, -1740);
	  COL_VERTEX(-2585, 51, -1740);
	  COL_VERTEX(-2636, 51, -1740);
	  COL_VERTEX(-2585, 0, -1740);
	  COL_VERTEX(-2453, 51, -1996);
	  COL_VERTEX(-2482, 51, -2047);
	  COL_VERTEX(-2175, 51, -2047);
	  COL_VERTEX(-2124, 410, -1740);
	  COL_VERTEX(-2482, 410, -1740);
	  COL_VERTEX(-2585, 307, -1125);
	  COL_VERTEX(-2585, 0, -1125);
	  COL_VERTEX(-2021, 307, -1740);
	  COL_VERTEX(-2021, 307, -1125);
	  COL_VERTEX(-2380, 256, -1023);
	  COL_VERTEX(-2380, 0, -1023);
	  COL_VERTEX(-2380, 0, -1074);
	  COL_VERTEX(-2380, 256, -1074);
	  COL_VERTEX(-2226, 256, -1125);
	  COL_VERTEX(-2226, 256, -1074);
	  COL_VERTEX(-2226, 256, -1023);
	  COL_VERTEX(-2380, 0, -1125);
	  COL_VERTEX(-2021, 0, -1125);
	  COL_VERTEX(-2175, 0, -2047);
	  COL_VERTEX(-1509, -204, -1740);
	  COL_VERTEX(-1970, 51, -1740);
	  COL_VERTEX(-2585, 307, -1740);
	  COL_VERTEX(-2636, -204, -1740);
	  COL_VERTEX(-1970, -204, -1740);
	  COL_VERTEX(-1509, -204, -2866);
	  COL_VERTEX(-2021, -237, -2991);
	  COL_VERTEX(-1868, -303, -3238);
	  COL_VERTEX(-2636, -204, -2866);
	  COL_VERTEX(-3097, -204, -2866);
	  COL_VERTEX(-2687, -303, -3238);
	  COL_VERTEX(-2533, -237, -2991);
	  COL_VERTEX(-1868, -409, -3634);
	  COL_VERTEX(-2687, -409, -3634);
	  COL_VERTEX(-1509, -409, -3634);
	  COL_VERTEX(-2021, -409, -2991);
	  COL_VERTEX(-1509, 410, -1740);
	  COL_VERTEX(-3097, 410, -3634);
	  COL_VERTEX(-2124, 0, -1228);
	  COL_VERTEX(4301, 307, 154);
	  COL_VERTEX(2253, 1024, -1842);
	  COL_VERTEX(4403, 1024, -767);
	  COL_VERTEX(2253, 1024, 1997);
	  COL_VERTEX(2253, 307, 1382);
	  COL_VERTEX(3319, 307, 1382);
	  COL_VERTEX(3319, 1024, 1382);
	  COL_VERTEX(4403, 1024, 307);
	  COL_VERTEX(4146, 768, -943);
	  COL_VERTEX(3422, 768, -1667);
	  COL_VERTEX(3174, 768, -1791);
	  COL_VERTEX(2355, 768, 1331);
	  COL_VERTEX(3422, 768, 1208);
	  COL_VERTEX(4301, 307, -613);
	  COL_VERTEX(4198, 307, -818);
	  COL_VERTEX(4198, 307, 358);
	  COL_VERTEX(4301, 1024, 77);
	  COL_VERTEX(2253, 307, 1280);
	  COL_VERTEX(1971, 307, 51);
	  COL_VERTEX(2253, 307, -1740);
	  COL_VERTEX(1229, 307, -716);
	  COL_VERTEX(1229, 307, 256);
	  COL_VERTEX(1229, 307, 51);
	  COL_VERTEX(1894, 205, 51);
	  COL_VERTEX(1894, 205, -511);
	  COL_VERTEX(1229, 205, -409);
	  COL_VERTEX(1126, 1229, -460);
	  COL_VERTEX(4250, 1229, 154);
	  COL_VERTEX(4301, 1229, -716);
	  COL_VERTEX(1741, 1638, 44);
	  COL_VERTEX(1229, 1229, -716);
	  COL_VERTEX(1229, 1229, 256);
	  COL_VERTEX(2253, 1229, -1740);
	  COL_VERTEX(3277, 1229, -1740);
	  COL_VERTEX(4301, 1229, 256);
	  COL_VERTEX(3065, 1638, 768);
	  COL_VERTEX(3277, 1229, 1280);
	  COL_VERTEX(2253, 1229, 1280);
	  COL_VERTEX(4301, 1024, -537);
	  COL_VERTEX(1229, 307, -511);
	  COL_VERTEX(1229, 205, 0);
	  COL_VERTEX(1229, 307, 0);
	  COL_VERTEX(1971, 205, 51);
	  COL_VERTEX(1229, 307, -460);
	  COL_VERTEX(1229, 205, -460);
	  COL_VERTEX(1178, 307, -409);
	  COL_VERTEX(1178, 205, -409);
	  COL_VERTEX(1126, 307, -50);
	  COL_VERTEX(1126, 205, -50);
	  COL_VERTEX(1178, 307, -50);
	  COL_VERTEX(1178, 205, -50);
	  COL_VERTEX(2036, 819, 1063);
	  COL_VERTEX(2036, 1024, -1523);
	  COL_VERTEX(2036, 819, -1523);
	  COL_VERTEX(2180, 1024, -1667);
	  COL_VERTEX(2180, 819, -1667);
	  COL_VERTEX(1891, 819, -1667);
	  COL_VERTEX(2036, 1024, 1063);
	  COL_VERTEX(2180, 1024, 1208);
	  COL_VERTEX(1891, 1024, 1208);
	  COL_VERTEX(2180, 819, 1208);
	  COL_VERTEX(2355, 358, 1280);
	  COL_VERTEX(2355, 768, 1280);
	  COL_VERTEX(4182, 768, 520);
	  COL_VERTEX(3458, 768, 1244);
	  COL_VERTEX(4109, 358, 447);
	  COL_VERTEX(4109, 768, 447);
	  COL_VERTEX(4109, 768, -907);
	  COL_VERTEX(4182, 768, -980);
	  COL_VERTEX(4182, 358, -980);
	  COL_VERTEX(3385, 768, -1631);
	  COL_VERTEX(3174, 768, -1842);
	  COL_VERTEX(3174, 358, -1842);
	  COL_VERTEX(2355, 358, -1740);
	  COL_VERTEX(3174, 358, -1740);
	  COL_VERTEX(3174, 768, 1280);
	  COL_VERTEX(3174, 358, 1280);
	  COL_VERTEX(2355, 358, 1382);
	  COL_VERTEX(3174, 358, 1382);
	  COL_VERTEX(4836, 1024, -1203);
	  COL_VERTEX(4403, 307, -767);
	  COL_VERTEX(3573, 1024, -2457);
	  COL_VERTEX(2253, 1024, -2457);
	  COL_VERTEX(3319, 307, -1842);
	  COL_VERTEX(3319, 1024, -1842);
	  COL_VERTEX(3573, 1024, 1997);
	  COL_VERTEX(4836, 1024, 743);
	  COL_VERTEX(3174, 768, -1740);
	  COL_VERTEX(3385, 358, -1631);
	  COL_VERTEX(3277, 307, -1740);
	  COL_VERTEX(4198, 1229, -818);
	  COL_VERTEX(4109, 358, -907);
	  COL_VERTEX(4198, 307, -665);
	  COL_VERTEX(4250, 307, -613);
	  COL_VERTEX(4198, 1229, 358);
	  COL_VERTEX(4198, 307, 205);
	  COL_VERTEX(4250, 307, 154);
	  COL_VERTEX(1971, 307, -511);
	  COL_VERTEX(1126, 205, -306);
	  COL_VERTEX(1126, 461, -306);
	  COL_VERTEX(1126, 1229, -409);
	  COL_VERTEX(1920, 230, 51);
	  COL_VERTEX(1894, 230, 51);
	  COL_VERTEX(1920, 256, 51);
	  COL_VERTEX(1946, 256, 51);
	  COL_VERTEX(1946, 282, 51);
	  COL_VERTEX(1971, 282, 51);
	  COL_VERTEX(1126, 461, -153);
	  COL_VERTEX(1075, 461, -153);
	  COL_VERTEX(1075, 461, -306);
	  COL_VERTEX(1075, 205, -306);
	  COL_VERTEX(1126, 205, -153);
	  COL_VERTEX(1075, 205, -153);
	  COL_VERTEX(1050, -306, -3685);
	  COL_VERTEX(1050, -306, -4505);
	  COL_VERTEX(77, 0, -1125);
	  COL_VERTEX(-25, 0, -1842);
	  COL_VERTEX(435, 0, -1228);
	  COL_VERTEX(-25, 0, -1125);
	  COL_VERTEX(1050, 512, -1945);
	  COL_VERTEX(845, -101, -1740);
	  COL_VERTEX(589, 77, -1740);
	  COL_VERTEX(-25, 307, -1740);
	  COL_VERTEX(-76, 77, -1740);
	  COL_VERTEX(589, -101, -1740);
	  COL_VERTEX(538, 77, -1740);
	  COL_VERTEX(538, 77, -1842);
	  COL_VERTEX(538, 0, -1919);
	  COL_VERTEX(538, 0, -1970);
	  COL_VERTEX(-76, -101, -1740);
	  COL_VERTEX(-76, 0, -1970);
	  COL_VERTEX(-76, 77, -1842);
	  COL_VERTEX(-76, 0, -1919);
	  COL_VERTEX(-25, -101, -1740);
	  COL_VERTEX(538, -101, -1740);
	  COL_VERTEX(538, -101, -2559);
	  COL_VERTEX(563, -204, -4505);
	  COL_VERTEX(563, 410, -4505);
	  COL_VERTEX(-332, -306, -4505);
	  COL_VERTEX(-50, 410, -4505);
	  COL_VERTEX(-229, 512, -4197);
	  COL_VERTEX(538, 666, -3993);
	  COL_VERTEX(-25, 666, -3993);
	  COL_VERTEX(-25, 666, -2252);
	  COL_VERTEX(742, 512, -2047);
	  COL_VERTEX(-229, 512, -2047);
	  COL_VERTEX(-537, 512, -1740);
	  COL_VERTEX(1050, 512, -4505);
	  COL_VERTEX(-537, 512, -4505);
	  COL_VERTEX(77, 410, -1740);
	  COL_VERTEX(435, 410, -1740);
	  COL_VERTEX(538, 307, -1740);
	  COL_VERTEX(-434, 512, -4300);
	  COL_VERTEX(-332, 512, -4402);
	  COL_VERTEX(-537, 512, -4300);
	  COL_VERTEX(1050, -101, -1740);
	  COL_VERTEX(1050, -101, -2661);
	  COL_VERTEX(742, -306, -2559);
	  COL_VERTEX(-229, -101, -2559);
	  COL_VERTEX(-229, -101, -2661);
	  COL_VERTEX(742, -101, -2559);
	  COL_VERTEX(538, 0, -1740);
	  COL_VERTEX(-25, 307, -1125);
	  COL_VERTEX(179, 256, -1125);
	  COL_VERTEX(538, 307, -1125);
	  COL_VERTEX(179, 0, -1125);
	  COL_VERTEX(333, 0, -1125);
	  COL_VERTEX(333, 256, -1125);
	  COL_VERTEX(333, 0, -1074);
	  COL_VERTEX(333, 256, -1074);
	  COL_VERTEX(179, 256, -1023);
	  COL_VERTEX(179, 256, -1074);
	  COL_VERTEX(845, 512, -4402);
	  COL_VERTEX(947, 512, -4300);
	  COL_VERTEX(845, 512, -4505);
	  COL_VERTEX(-25, -306, -2559);
	  COL_VERTEX(947, 512, -1945);
	  COL_VERTEX(845, 512, -1842);
	  COL_VERTEX(-332, 512, -1842);
	  COL_VERTEX(-434, 512, -1945);
	  COL_VERTEX(-332, 512, -1740);
	  COL_VERTEX(-25, -76, -1893);
	  COL_VERTEX(-25, -76, -1919);
	  COL_VERTEX(-25, -50, -1893);
	  COL_VERTEX(-25, -50, -1868);
	  COL_VERTEX(-25, -25, -1868);
	  COL_VERTEX(-25, -25, -1842);
	  COL_VERTEX(-537, 512, -1945);
	  COL_VERTEX(-5221, 307, -869);
	  COL_VERTEX(-4402, 307, -50);
	  COL_VERTEX(-5221, 307, -50);
	  COL_VERTEX(-4197, 307, -665);
	  COL_VERTEX(-4402, 307, -869);
	  COL_VERTEX(-4146, 282, -613);
	  COL_VERTEX(-4121, 282, -613);
	  COL_VERTEX(-4121, 256, -613);
	  COL_VERTEX(-4095, 256, -613);
	  COL_VERTEX(-4095, 230, -613);
	  COL_VERTEX(-4069, 230, -613);
	  COL_VERTEX(-4018, 205, -306);
	  COL_VERTEX(-4197, 358, -306);
	  COL_VERTEX(-4197, 307, -255);
	  COL_VERTEX(-4018, 205, -255);
	  COL_VERTEX(-4197, 358, -255);
	  COL_VERTEX(-4146, 358, -306);
	  COL_VERTEX(-4018, 282, -306);
	  COL_VERTEX(-4069, 282, -306);
	  COL_VERTEX(-4197, 307, -306);
	  COL_VERTEX(-4018, 205, -665);
	  COL_VERTEX(-4197, 358, -665);
	  COL_VERTEX(-4197, 307, -613);
	  COL_VERTEX(-4018, 205, -613);
	  COL_VERTEX(-4197, 358, -613);
	  COL_VERTEX(-4146, 358, -665);
	  COL_VERTEX(-4018, 282, -665);
	  COL_VERTEX(-4069, 282, -665);
	  COL_VERTEX(-4914, 1235, -1279);
	  COL_VERTEX(-5017, 1235, -1177);
	  COL_VERTEX(-5221, 1126, -1177);
	  COL_VERTEX(-3378, 1235, -1177);
	  COL_VERTEX(-3481, 1235, -1279);
	  COL_VERTEX(-3481, 1126, -1484);
	  COL_VERTEX(-4914, 1126, 563);
	  COL_VERTEX(-4914, 1235, 358);
	  COL_VERTEX(-5017, 1235, 256);
	  COL_VERTEX(-5221, 410, -767);
	  COL_VERTEX(-5221, 205, 256);
	  COL_VERTEX(-3481, 1235, 358);
	  COL_VERTEX(-3378, 1235, 256);
	  COL_VERTEX(-3173, 1126, 256);
	  COL_VERTEX(-5221, 1024, -153);
	  COL_VERTEX(-5221, 1024, -767);
	  COL_VERTEX(-3173, 205, -716);
	  COL_VERTEX(-3122, 205, -716);
	  COL_VERTEX(-3122, 205, -869);
	  COL_VERTEX(-3173, 205, -869);
	  COL_VERTEX(-3173, 205, -1177);
	  COL_VERTEX(-3173, 461, -716);
	  COL_VERTEX(-3122, 461, -716);
	  COL_VERTEX(-3173, 1126, -1177);
	  COL_VERTEX(-3173, 461, -869);
	  COL_VERTEX(-3122, 461, -869);
	  COL_VERTEX(-3650, 1434, 154);
	  COL_VERTEX(-3481, 1126, 563);
	  COL_VERTEX(-5221, 1126, 256);
	  COL_VERTEX(-4914, 1126, -1484);
	  COL_VERTEX(-4812, 1434, 154);
	  COL_VERTEX(-5221, 205, -50);
	  COL_VERTEX(-5221, 205, 563);
	  COL_VERTEX(-3173, 205, 563);
	  COL_VERTEX(-3173, 205, -1484);
	  COL_VERTEX(-5221, 205, -1484);
	  COL_VERTEX(-4197, 205, -255);
	  COL_VERTEX(-4197, 205, -665);
	  COL_VERTEX(-3276, 205, -613);
	  COL_VERTEX(-3276, 205, -972);
	  COL_VERTEX(1833, 1229, -2665);
	  COL_VERTEX(1857, 768, -2797);
	  COL_VERTEX(1784, 922, -2869);
	  COL_VERTEX(1857, 922, -2797);
	  COL_VERTEX(1875, 922, -2815);
	  COL_VERTEX(1911, 1024, -2779);
	  COL_VERTEX(1881, 1024, -2676);
	  COL_VERTEX(1947, 1024, -2743);
	  COL_VERTEX(1965, 922, -2688);
	  COL_VERTEX(2038, 614, -2616);
	  COL_VERTEX(1965, 768, -2688);
	  COL_VERTEX(590, 614, -1530);
	  COL_VERTEX(698, 870, -1421);
	  COL_VERTEX(734, 614, -1457);
	  COL_VERTEX(1422, 922, -2869);
	  COL_VERTEX(1422, 614, -2869);
	  COL_VERTEX(1169, 922, -2616);
	  COL_VERTEX(1374, 1229, -2531);
	  COL_VERTEX(1338, 1126, -2278);
	  COL_VERTEX(1422, 922, -2001);
	  COL_VERTEX(1446, 1126, -2169);
	  COL_VERTEX(1845, 1024, -2157);
	  COL_VERTEX(1881, 1024, -2194);
	  COL_VERTEX(2038, 922, -2254);
	  COL_VERTEX(1833, 1229, -2339);
	  COL_VERTEX(1965, 768, -2182);
	  COL_VERTEX(626, 614, -1566);
	  COL_VERTEX(626, 870, -1566);
	  COL_VERTEX(1169, 922, -2254);
	  COL_VERTEX(553, 922, -1638);
	  COL_VERTEX(807, 922, -1385);
	  COL_VERTEX(1422, 614, -2001);
	  COL_VERTEX(2038, 922, -2616);
	  COL_VERTEX(1784, 922, -2001);
	  COL_VERTEX(1241, 768, -2688);
	  COL_VERTEX(1507, 1229, -2665);
	  COL_VERTEX(1362, 1024, -2713);
	  COL_VERTEX(1350, 922, -2797);
	  COL_VERTEX(1350, 768, -2797);
	  COL_VERTEX(1241, 922, -2688);
	  COL_VERTEX(1223, 922, -2706);
	  COL_VERTEX(1326, 1024, -2676);
	  COL_VERTEX(1857, 922, -2073);
	  COL_VERTEX(1784, 614, -2001);
	  COL_VERTEX(1965, 922, -2182);
	  COL_VERTEX(2110, 768, -2037);
	  COL_VERTEX(1857, 768, -2073);
	  COL_VERTEX(553, 614, -1638);
	  COL_VERTEX(879, 614, -1457);
	  COL_VERTEX(-2580, 768, -1608);
	  COL_VERTEX(-2797, 768, -1391);
	  COL_VERTEX(-2797, 512, -1391);
	  COL_VERTEX(-2435, 512, -1753);
	  COL_VERTEX(-2580, 512, -1608);
	  COL_VERTEX(-2543, 768, -1572);
	  COL_VERTEX(-5983, 717, -4287);
	  COL_VERTEX(-5476, 717, -4794);
	  COL_VERTEX(-5548, 717, -3853);
	  COL_VERTEX(-3014, 538, -2332);
	  COL_VERTEX(-3014, 512, -2332);
	  COL_VERTEX(-3032, 538, -2350);
	  COL_VERTEX(-3032, 563, -2350);
	  COL_VERTEX(-3050, 563, -2368);
	  COL_VERTEX(-3050, 589, -2368);
	  COL_VERTEX(-3068, 589, -2386);
	  COL_VERTEX(-3068, 614, -2386);
	  COL_VERTEX(-3087, 614, -2404);
	  COL_VERTEX(-3087, 640, -2404);
	  COL_VERTEX(-3105, 640, -2423);
	  COL_VERTEX(-3105, 666, -2423);
	  COL_VERTEX(-3123, 666, -2441);
	  COL_VERTEX(-3123, 691, -2441);
	  COL_VERTEX(-3141, 691, -2459);
	  COL_VERTEX(-3141, 717, -2459);
	  COL_VERTEX(-5042, 717, -4359);
	  COL_VERTEX(-3666, 717, -1970);
	  COL_VERTEX(-3666, 512, -1970);
	  COL_VERTEX(-2435, 717, -1753);
	  COL_VERTEX(-3159, 717, -2477);
	  COL_VERTEX(-3231, 717, -2477);
	  COL_VERTEX(-3268, 717, -2513);
	  COL_VERTEX(-3231, 1485, -2477);
	  COL_VERTEX(-3159, 1536, -2477);
	  COL_VERTEX(-3268, 1485, -2513);
	  COL_VERTEX(-3702, 717, -2079);
	  COL_VERTEX(-3774, 717, -2079);
	  COL_VERTEX(-3666, 717, -2042);
	  COL_VERTEX(-4607, 717, -3925);
	  COL_VERTEX(-4679, 717, -3925);
	  COL_VERTEX(-5114, 717, -3491);
	  COL_VERTEX(-4607, 1536, -3925);
	  COL_VERTEX(-5150, 717, -3527);
	  COL_VERTEX(-5223, 717, -3527);
	  COL_VERTEX(-4679, 1485, -3925);
	  COL_VERTEX(-4716, 717, -3961);
	  COL_VERTEX(-4716, 1485, -3961);
	  COL_VERTEX(-6055, 717, -5373);
	  COL_VERTEX(-6128, 717, -5373);
	  COL_VERTEX(-6562, 717, -4939);
	  COL_VERTEX(-6055, 1536, -5373);
	  COL_VERTEX(-6562, 1536, -4866);
	  COL_VERTEX(-6598, 717, -4975);
	  COL_VERTEX(-6671, 717, -4975);
	  COL_VERTEX(-6128, 1485, -5373);
	  COL_VERTEX(-6164, 717, -5409);
	  COL_VERTEX(-6598, 1485, -4975);
	  COL_VERTEX(-6164, 1485, -5409);
	  COL_VERTEX(-5114, 1536, -3418);
	  COL_VERTEX(-4716, 1536, -4034);
	  COL_VERTEX(-7431, 717, -5735);
	  COL_VERTEX(-7431, 1536, -5735);
	  COL_VERTEX(-6924, 1536, -6242);
	  COL_VERTEX(-6960, 1434, -6206);
	  COL_VERTEX(-6924, 717, -6242);
	  COL_VERTEX(-2869, 512, -1318);
	  COL_VERTEX(-2580, 512, -1753);
	  COL_VERTEX(-2942, 512, -1391);
	  COL_VERTEX(-5476, 1536, -4794);
	  COL_VERTEX(-665, -1074, 922);
	  COL_VERTEX(-613, 410, -716);
	  COL_VERTEX(-451, 410, -716);
	  COL_VERTEX(-665, 410, -767);
	  COL_VERTEX(-767, 256, -716);
	  COL_VERTEX(-767, 219, -665);
	  COL_VERTEX(-716, 410, -767);
	  COL_VERTEX(-1330, -101, -1595);
	  COL_VERTEX(-1228, 410, -5119);
	  COL_VERTEX(-1330, 307, -5119);
	  COL_VERTEX(-1330, -101, -5119);
	  COL_VERTEX(-818, 410, -5119);
	  COL_VERTEX(-716, 307, -5119);
	  COL_VERTEX(-716, -101, -5119);
	  COL_VERTEX(-818, 307, -716);
	  COL_VERTEX(-1228, 307, -716);
	  COL_VERTEX(-716, 205, -716);
	  COL_VERTEX(-716, -456, -613);
	  COL_VERTEX(-1228, -460, 358);
	  COL_VERTEX(-1330, -562, 358);
	  COL_VERTEX(-1330, -1074, 358);
	  COL_VERTEX(-1177, -818, 870);
	  COL_VERTEX(-1330, -1074, 870);
	  COL_VERTEX(-818, -460, 358);
	  COL_VERTEX(-869, -818, 870);
	  COL_VERTEX(-716, -562, 358);
	  COL_VERTEX(-716, -1074, 870);
	  COL_VERTEX(-716, -1074, 358);
	  COL_VERTEX(-1177, -1074, 922);
	  COL_VERTEX(-1177, -818, 922);
	  COL_VERTEX(-252, 256, -914);
	  COL_VERTEX(-252, 0, -914);
	  COL_VERTEX(-361, 256, -806);
	  COL_VERTEX(-144, 0, -1023);
	  COL_VERTEX(-325, 0, -770);
	  COL_VERTEX(-325, 256, -770);
	  COL_VERTEX(-1685, 256, -806);
	  COL_VERTEX(-1595, 410, -716);
	  COL_VERTEX(-1595, 0, -716);
	  COL_VERTEX(-1685, 0, -806);
	  COL_VERTEX(-1794, 256, -914);
	  COL_VERTEX(-1721, 256, -770);
	  COL_VERTEX(-1902, 410, -1023);
	  COL_VERTEX(-1830, 256, -878);
	  COL_VERTEX(-252, 0, -1059);
	  COL_VERTEX(-444, 0, -1323);
	  COL_VERTEX(-716, 307, -1595);
	  COL_VERTEX(-1228, 410, -1595);
	  COL_VERTEX(-451, 0, -716);
	  COL_VERTEX(-836, 0, -1027);
	  COL_VERTEX(-767, 0, -716);
	  COL_VERTEX(-1330, 132, -613);
	  COL_VERTEX(-1381, 410, -767);
	  COL_VERTEX(-1433, 0, -716);
	  COL_VERTEX(-1210, 0, -1027);
	  COL_VERTEX(-1330, 410, -767);
	  COL_VERTEX(-1279, 219, -665);
	  COL_VERTEX(-767, 410, -716);
	  COL_VERTEX(-1279, 256, -716);
	  COL_VERTEX(-1279, 410, -716);
	  COL_VERTEX(-144, 410, -1023);
	  COL_VERTEX(-716, -76, -1595);
	  COL_VERTEX(-1177, -76, -1177);
	  COL_VERTEX(-1421, -76, -1504);
	  COL_VERTEX(-1330, -76, -1595);
	  COL_VERTEX(-1902, -76, -1023);
	  COL_VERTEX(-836, -25, -1027);
	  COL_VERTEX(-847, -25, -1077);
	  COL_VERTEX(-847, -50, -1077);
	  COL_VERTEX(-858, -50, -1127);
	  COL_VERTEX(-625, -50, -1504);
	  COL_VERTEX(-1210, -25, -1027);
	  COL_VERTEX(-1602, -25, -1323);
	  COL_VERTEX(-1511, -25, -1414);
	  COL_VERTEX(-1540, 0, -806);
	  COL_VERTEX(-1177, -127, -1177);
	  COL_VERTEX(-1199, -50, -1077);
	  COL_VERTEX(-1511, -50, -1414);
	  COL_VERTEX(-1421, -50, -1504);
	  COL_VERTEX(-1188, -76, -1127);
	  COL_VERTEX(-1188, -50, -1127);
	  COL_VERTEX(-1177, -101, -1177);
	  COL_VERTEX(-1100, -101, -5119);
	  COL_VERTEX(-1100, 154, -5119);
	  COL_VERTEX(-946, 154, -5119);
	  COL_VERTEX(-946, -101, -5221);
	  COL_VERTEX(-946, 154, -5221);
	  COL_VERTEX(-858, -76, -1127);
	  COL_VERTEX(-767, -383, -716);
	  COL_VERTEX(-716, -1049, 358);
	  COL_VERTEX(-1330, -1049, 358);
	  COL_VERTEX(-716, -1023, 320);
	  COL_VERTEX(-1330, -1023, 320);
	  COL_VERTEX(-716, -997, 282);
	  COL_VERTEX(-1330, -997, 282);
	  COL_VERTEX(-716, -972, 243);
	  COL_VERTEX(-1330, -972, 243);
	  COL_VERTEX(-716, -946, 205);
	  COL_VERTEX(-1330, -946, 205);
	  COL_VERTEX(-716, -921, 166);
	  COL_VERTEX(-1330, -921, 166);
	  COL_VERTEX(-716, -895, 128);
	  COL_VERTEX(-1330, -869, 90);
	  COL_VERTEX(-716, -844, 51);
	  COL_VERTEX(-716, -869, 90);
	  COL_VERTEX(-1330, -895, 128);
	  COL_VERTEX(-1330, -844, 51);
	  COL_VERTEX(-716, -818, 13);
	  COL_VERTEX(-1330, -818, 13);
	  COL_VERTEX(-716, -793, -25);
	  COL_VERTEX(-1330, -793, -25);
	  COL_VERTEX(-716, -767, -63);
	  COL_VERTEX(-1330, -767, -63);
	  COL_VERTEX(-716, -741, -101);
	  COL_VERTEX(-716, -690, -178);
	  COL_VERTEX(-1330, -716, -140);
	  COL_VERTEX(-1330, -690, -178);
	  COL_VERTEX(-716, -665, -217);
	  COL_VERTEX(-1330, -665, -217);
	  COL_VERTEX(-716, -639, -255);
	  COL_VERTEX(-716, -716, -140);
	  COL_VERTEX(-1330, -741, -101);
	  COL_VERTEX(-1330, -639, -255);
	  COL_VERTEX(-716, -613, -293);
	  COL_VERTEX(-1330, -613, -293);
	  COL_VERTEX(-716, -588, -332);
	  COL_VERTEX(-1330, -588, -332);
	  COL_VERTEX(-716, -562, -370);
	  COL_VERTEX(-1330, -562, -370);
	  COL_VERTEX(-716, -537, -409);
	  COL_VERTEX(-1330, -537, -409);
	  COL_VERTEX(-716, -511, -447);
	  COL_VERTEX(-1330, -511, -447);
	  COL_VERTEX(-716, -485, -485);
	  COL_VERTEX(-1330, -485, -485);
	  COL_VERTEX(-716, -460, -524);
	  COL_VERTEX(-767, -332, -716);
	  COL_VERTEX(-1279, -357, -677);
	  COL_VERTEX(-1279, -332, -716);
	  COL_VERTEX(-776, -306, -754);
	  COL_VERTEX(-1270, -306, -754);
	  COL_VERTEX(-784, -281, -793);
	  COL_VERTEX(-1253, -255, -831);
	  COL_VERTEX(-793, -255, -831);
	  COL_VERTEX(-1262, -281, -793);
	  COL_VERTEX(-801, -229, -869);
	  COL_VERTEX(-810, -204, -908);
	  COL_VERTEX(-1245, -229, -869);
	  COL_VERTEX(-1236, -204, -908);
	  COL_VERTEX(-818, -178, -946);
	  COL_VERTEX(-869, -101, -1177);
	  COL_VERTEX(-1199, -127, -1074);
	  COL_VERTEX(-716, -460, -562);
	  COL_VERTEX(-716, -434, -562);
	  COL_VERTEX(-1330, -434, -562);
	  COL_VERTEX(-716, -409, -601);
	  COL_VERTEX(-1330, -409, -601);
	  COL_VERTEX(-716, -383, -639);
	  COL_VERTEX(-1330, -383, -639);
	  COL_VERTEX(-767, -357, -677);
	  COL_VERTEX(-847, -127, -1074);
	  COL_VERTEX(-1215, -153, -1005);
	  COL_VERTEX(-831, -153, -1005);
	  COL_VERTEX(-1228, -178, -946);
	  COL_VERTEX(-1202, -101, -5221);
	  COL_VERTEX(-1202, 307, -5221);
	  COL_VERTEX(-844, 307, -5529);
	  COL_VERTEX(-1202, 307, -5529);
	  COL_VERTEX(-844, -101, -5221);
	  COL_VERTEX(-1100, 154, -5221);
	  COL_VERTEX(-433, 0, -733);
	  COL_VERTEX(-1902, 0, -1023);
	  COL_VERTEX(-1794, 0, -1059);
	  COL_VERTEX(-1228, 614, -460);
	  COL_VERTEX(-869, 614, -460);
	  COL_VERTEX(-1177, 51, 154);
	  COL_VERTEX(-1177, 0, 154);
	  COL_VERTEX(-1177, 614, -409);
	  COL_VERTEX(-1177, 614, -460);
	  COL_VERTEX(-818, 614, -409);
	  COL_VERTEX(-818, 51, 154);
	  COL_VERTEX(-818, 0, 154);
	  COL_VERTEX(-818, 614, -460);
	  COL_VERTEX(-613, 384, -204);
	  COL_VERTEX(-818, 384, -204);
	  COL_VERTEX(-613, 384, -409);
	  COL_VERTEX(-511, 384, -306);
	  COL_VERTEX(-1433, 384, -409);
	  COL_VERTEX(-1535, 384, -511);
	  COL_VERTEX(-1535, 384, -306);
	  COL_VERTEX(-1535, 0, -306);
	  COL_VERTEX(-1433, 384, -204);
	  COL_VERTEX(-869, 0, 154);
	  COL_VERTEX(-818, 0, 205);
	  COL_VERTEX(-869, 512, -409);
	  COL_VERTEX(-1433, 256, -409);
	  COL_VERTEX(-613, 256, -409);
	  COL_VERTEX(-289, 256, -733);
	  COL_VERTEX(-613, 0, -409);
	  COL_VERTEX(-1228, 512, -409);
	  COL_VERTEX(-1757, 256, -733);
	  COL_VERTEX(-511, 0, 922);
	  COL_VERTEX(-511, 0, 512);
	  COL_VERTEX(-613, -50, 563);
	  COL_VERTEX(-613, -50, 870);
	  COL_VERTEX(-818, 0, 1229);
	  COL_VERTEX(-1177, -50, 1126);
	  COL_VERTEX(-1228, 0, 1229);
	  COL_VERTEX(-1433, -50, 870);
	  COL_VERTEX(-1535, 0, 922);
	  COL_VERTEX(-1433, -50, 563);
	  COL_VERTEX(-1177, -50, 307);
	  COL_VERTEX(-1228, 0, 205);
	  COL_VERTEX(-869, -50, 307);
	  COL_VERTEX(-460, 0, 1382);
	  COL_VERTEX(-613, 0, 1382);
	  COL_VERTEX(-665, 0, 1536);
	  COL_VERTEX(-1586, 0, 1382);
	  COL_VERTEX(-1433, 0, 1382);
	  COL_VERTEX(-1637, 0, 1434);
	  COL_VERTEX(-1535, 512, -1023);
	  COL_VERTEX(-2047, 512, -1023);
	  COL_VERTEX(-2149, 512, -1637);
	  COL_VERTEX(-2420, 512, -1478);
	  COL_VERTEX(-2457, 512, -1637);
	  COL_VERTEX(-2493, 512, -1550);
	  COL_VERTEX(-2507, 768, -1536);
	  COL_VERTEX(-2779, 512, -1264);
	  COL_VERTEX(-2670, 512, -1228);
	  COL_VERTEX(-2724, 768, -1318);
	  COL_VERTEX(-2761, 512, -1355);
	  COL_VERTEX(-2543, 512, -1572);
	  COL_VERTEX(-2761, 768, -1355);
	  COL_VERTEX(-2779, 973, -1264);
	  COL_VERTEX(-2493, 973, -1550);
	  COL_VERTEX(-511, 512, -1023);
	  COL_VERTEX(-767, 512, -1023);
	  COL_VERTEX(-1279, 512, -921);
	  COL_VERTEX(-767, 512, -921);
	  COL_VERTEX(819, 614, -1228);
	  COL_VERTEX(734, 614, -1313);
	  COL_VERTEX(409, 614, -1494);
	  COL_VERTEX(614, 614, -1023);
	  COL_VERTEX(156, 0, 253);
	  COL_VERTEX(463, 0, 561);
	  COL_VERTEX(102, 1024, -1637);
	  COL_VERTEX(-1535, 1415, -1302);
	  COL_VERTEX(-511, 1415, -1302);
	  COL_VERTEX(-511, 1024, -1023);
	  COL_VERTEX(-2149, 1024, -1637);
	  COL_VERTEX(-1535, 1024, -1023);
	  COL_VERTEX(-2457, 1741, -253);
	  COL_VERTEX(-3071, 1024, -1023);
	  COL_VERTEX(-3071, 1024, 0);
	  COL_VERTEX(-2457, 1024, -1637);
	  COL_VERTEX(1024, 1024, -1023);
	  COL_VERTEX(1024, 1024, 0);
	  COL_VERTEX(-511, 1024, 1536);
	  COL_VERTEX(-1535, 1024, 1536);
	  COL_VERTEX(-1281, 1741, 922);
	  COL_VERTEX(-180, 256, -842);
	  COL_VERTEX(0, 0, -1023);
	  COL_VERTEX(333, 256, -1023);
	  COL_VERTEX(-2268, 26, 246);
	  COL_VERTEX(-2268, 51, 246);
	  COL_VERTEX(-2305, 51, 210);
	  COL_VERTEX(-2305, 77, 210);
	  COL_VERTEX(-2341, 77, 174);
	  COL_VERTEX(-2341, 102, 174);
	  COL_VERTEX(-2377, 102, 138);
	  COL_VERTEX(-2377, 128, 138);
	  COL_VERTEX(-2413, 128, 101);
	  COL_VERTEX(-2413, 154, 101);
	  COL_VERTEX(-2449, 154, 65);
	  COL_VERTEX(-2449, 179, 65);
	  COL_VERTEX(-2486, 179, 29);
	  COL_VERTEX(-2486, 205, 29);
	  COL_VERTEX(-3071, 205, 0);
	  COL_VERTEX(439, 179, 29);
	  COL_VERTEX(402, 179, 65);
	  COL_VERTEX(402, 154, 65);
	  COL_VERTEX(366, 154, 101);
	  COL_VERTEX(366, 128, 101);
	  COL_VERTEX(330, 128, 138);
	  COL_VERTEX(330, 102, 138);
	  COL_VERTEX(294, 102, 174);
	  COL_VERTEX(294, 77, 174);
	  COL_VERTEX(258, 77, 210);
	  COL_VERTEX(258, 51, 210);
	  COL_VERTEX(221, 51, 246);
	  COL_VERTEX(221, 26, 246);
	  COL_VERTEX(-3071, 461, -716);
	  COL_VERTEX(-3071, 461, -869);
	  COL_VERTEX(-2969, 205, -613);
	  COL_VERTEX(-2559, 205, -101);
	  COL_VERTEX(-921, 717, 1536);
	  COL_VERTEX(-1330, 410, 1536);
	  COL_VERTEX(-511, 0, 1536);
	  COL_VERTEX(1024, 461, -306);
	  COL_VERTEX(1024, 461, -153);
	  COL_VERTEX(1024, 205, -1023);
	  COL_VERTEX(-1125, 717, 1536);
	  COL_VERTEX(-2203, 0, 253);
	  COL_VERTEX(-2866, 1024, -1228);
	  COL_VERTEX(662, 870, -1385);
	  COL_VERTEX(553, 614, -1494);
	  COL_VERTEX(553, 870, -1494);
	  COL_VERTEX(698, 614, -1421);
	  COL_VERTEX(662, 614, -1385);
	  COL_VERTEX(410, 614, -1637);
	  COL_VERTEX(-613, 512, -409);
	  COL_VERTEX(-255, 512, -767);
	  COL_VERTEX(102, 614, -1637);
	  COL_VERTEX(512, 205, -101);
	  COL_VERTEX(1024, 205, 0);
	  COL_VERTEX(-2559, 205, -1023);
	  COL_VERTEX(-2866, 205, -1228);
	  COL_VERTEX(-1330, 0, 3174);
	  COL_VERTEX(-289, 0, -733);
	  COL_VERTEX(-216, 256, -878);
	  COL_VERTEX(-216, 0, -878);
	  COL_VERTEX(-1866, 256, -842);
	  COL_VERTEX(-2047, 0, -1023);
	  COL_VERTEX(-1721, 0, -770);
	  COL_VERTEX(-1177, 256, 2150);
	  COL_VERTEX(-716, 410, 2150);
	  COL_VERTEX(-1330, 0, 2150);
	  COL_VERTEX(-716, 0, 1536);
	  COL_VERTEX(-716, 0, 2150);
	  COL_VERTEX(-716, 410, 1536);
	  COL_VERTEX(-1535, 0, 512);
	  COL_VERTEX(-818, 0, -204);
	  COL_VERTEX(-2510, 26, 561);
	  COL_VERTEX(614, 205, -1023);
	  COL_VERTEX(-2661, 0, -1023);
	  COL_VERTEX(512, 0, -1023);
	  COL_VERTEX(435, 0, -1023);
	  COL_VERTEX(77, 0, -921);
	  COL_VERTEX(512, 0, -101);
	  COL_VERTEX(-35, 0, -842);
	  COL_VERTEX(-108, 0, -914);
	  COL_VERTEX(-289, 0, -589);
	  COL_VERTEX(-2011, 0, -842);
	  COL_VERTEX(-1757, 0, -589);
	  COL_VERTEX(-1938, 0, -914);
	  COL_VERTEX(-2482, 0, -921);
	  COL_VERTEX(-2124, 0, -921);
	  COL_VERTEX(-1228, 0, -204);
	  COL_VERTEX(-2969, 205, -972);
	  COL_VERTEX(-3071, 205, -1023);
	  COL_VERTEX(512, 205, -1023);
	  COL_VERTEX(922, 205, -50);
	  COL_VERTEX(922, 205, -409);
	  COL_VERTEX(-1177, 512, -1023);
	  COL_VERTEX(-1279, 512, -1740);
	  COL_VERTEX(-1381, 512, -1535);
	  COL_VERTEX(-767, 512, -1740);
	  COL_VERTEX(-767, 512, -1125);
	  COL_VERTEX(-2610, 307, -4351);
	  COL_VERTEX(-3097, -409, -1740);
	  COL_VERTEX(-2687, 410, -4351);
	  COL_VERTEX(-1509, -409, -1740);
	  COL_VERTEX(-1996, 307, -4351);
	  COL_VERTEX(-2175, -204, -2277);
	  COL_VERTEX(-2175, -127, -2226);
	  COL_VERTEX(-2482, -204, -2277);
	  COL_VERTEX(-2482, -127, -2226);
	  COL_VERTEX(-2021, 51, -1740);
	  COL_VERTEX(-2431, 51, -2047);
	  COL_VERTEX(-2596, -204, -2834);
	  COL_VERTEX(-2046, -204, -2940);
	  COL_VERTEX(-1919, -204, -2866);
	  COL_VERTEX(-1959, -204, -2834);
	  COL_VERTEX(-2431, -178, -2226);
	  COL_VERTEX(-2431, -204, -2226);
	  COL_VERTEX(-2533, -409, -2991);
	  COL_VERTEX(-2431, -178, -2201);
	  COL_VERTEX(-2431, -153, -2201);
	  COL_VERTEX(-2431, -153, -2175);
	  COL_VERTEX(-2431, -127, -2175);
	  COL_VERTEX(-2431, -127, -2149);
	  COL_VERTEX(-2431, -101, -2149);
	  COL_VERTEX(-2431, -101, -2124);
	  COL_VERTEX(-2431, -76, -2124);
	  COL_VERTEX(-2431, -76, -2098);
	  COL_VERTEX(-2431, -50, -2098);
	  COL_VERTEX(-2431, -50, -2073);
	  COL_VERTEX(-2431, -25, -2073);
	  COL_VERTEX(-2431, -25, -2047);
	  COL_VERTEX(-2153, 0, -1996);
	  COL_VERTEX(-2453, 0, -1996);
	  COL_VERTEX(-2431, 0, -1996);
	  COL_VERTEX(-2431, 51, -1996);
	  COL_VERTEX(-2482, 410, -1125);
	  COL_VERTEX(-2124, 410, -1125);
	  COL_VERTEX(-2380, 256, -1125);
	  COL_VERTEX(-2226, 0, -1074);
	  COL_VERTEX(-2226, 0, -1125);
	  COL_VERTEX(-2226, 0, -1023);
	  COL_VERTEX(-3097, -204, -1740);
	  COL_VERTEX(-1867, -409, -3239);
	  COL_VERTEX(-2688, -409, -3239);
	  COL_VERTEX(-2482, 0, -1125);
	  COL_VERTEX(-2124, 0, -1125);
	  COL_VERTEX(-2482, 0, -1228);
	  COL_VERTEX(2253, 307, -1842);
	  COL_VERTEX(4301, 410, -537);
	  COL_VERTEX(2253, 1024, 1382);
	  COL_VERTEX(2253, 307, 1997);
	  COL_VERTEX(3573, 307, 1997);
	  COL_VERTEX(4836, 307, 743);
	  COL_VERTEX(4403, 307, 307);
	  COL_VERTEX(4146, 358, -943);
	  COL_VERTEX(3422, 358, -1667);
	  COL_VERTEX(2355, 358, -1791);
	  COL_VERTEX(3174, 358, -1791);
	  COL_VERTEX(2355, 768, -1791);
	  COL_VERTEX(3174, 358, 1331);
	  COL_VERTEX(2355, 358, 1331);
	  COL_VERTEX(3174, 768, 1331);
	  COL_VERTEX(4146, 358, 484);
	  COL_VERTEX(3422, 358, 1208);
	  COL_VERTEX(4146, 768, 484);
	  COL_VERTEX(4301, 1229, -613);
	  COL_VERTEX(4301, 1229, 154);
	  COL_VERTEX(4301, 410, 77);
	  COL_VERTEX(3277, 307, 1280);
	  COL_VERTEX(1126, 205, -409);
	  COL_VERTEX(1229, 205, -511);
	  COL_VERTEX(1229, 205, -50);
	  COL_VERTEX(1229, 205, 51);
	  COL_VERTEX(1229, 1229, 0);
	  COL_VERTEX(1126, 1229, 0);
	  COL_VERTEX(1229, 1229, -460);
	  COL_VERTEX(4198, 1229, 205);
	  COL_VERTEX(4250, 1229, -613);
	  COL_VERTEX(4198, 1229, -665);
	  COL_VERTEX(2465, 1638, 768);
	  COL_VERTEX(1741, 1638, -504);
	  COL_VERTEX(3789, 1638, 44);
	  COL_VERTEX(3789, 1638, -504);
	  COL_VERTEX(3065, 1638, -1228);
	  COL_VERTEX(2465, 1638, -1228);
	  COL_VERTEX(1178, 1229, -409);
	  COL_VERTEX(1126, 307, -409);
	  COL_VERTEX(1178, 1229, -50);
	  COL_VERTEX(1126, 1229, -50);
	  COL_VERTEX(1891, 819, 1208);
	  COL_VERTEX(2036, 819, 1352);
	  COL_VERTEX(1891, 1024, -1667);
	  COL_VERTEX(2036, 1024, -1812);
	  COL_VERTEX(2036, 819, -1812);
	  COL_VERTEX(2036, 1024, 1352);
	  COL_VERTEX(3385, 358, 1171);
	  COL_VERTEX(3385, 768, 1171);
	  COL_VERTEX(3458, 358, 1244);
	  COL_VERTEX(4182, 358, 520);
	  COL_VERTEX(3458, 768, -1704);
	  COL_VERTEX(3458, 358, -1704);
	  COL_VERTEX(2355, 768, -1740);
	  COL_VERTEX(2355, 768, -1842);
	  COL_VERTEX(2355, 358, -1842);
	  COL_VERTEX(2355, 768, 1382);
	  COL_VERTEX(3174, 768, 1382);
	  COL_VERTEX(4836, 307, -1203);
	  COL_VERTEX(3573, 307, -2457);
	  COL_VERTEX(2253, 307, -2457);
	  COL_VERTEX(1971, 205, -511);
	  COL_VERTEX(1971, 282, -511);
	  COL_VERTEX(1894, 230, -511);
	  COL_VERTEX(1920, 230, -511);
	  COL_VERTEX(1920, 256, -511);
	  COL_VERTEX(1946, 256, -511);
	  COL_VERTEX(1946, 282, -511);
	  COL_VERTEX(1024, 205, -306);
	  COL_VERTEX(1024, 205, -153);
	  COL_VERTEX(-537, -306, -4505);
	  COL_VERTEX(-537, -306, -3685);
	  COL_VERTEX(77, 0, -1228);
	  COL_VERTEX(538, 0, -1842);
	  COL_VERTEX(538, 0, -1125);
	  COL_VERTEX(435, 0, -1125);
	  COL_VERTEX(1050, 512, -4300);
	  COL_VERTEX(1050, -306, -4300);
	  COL_VERTEX(1050, -306, -1945);
	  COL_VERTEX(845, 512, -1740);
	  COL_VERTEX(-332, -101, -1740);
	  COL_VERTEX(-25, 77, -1740);
	  COL_VERTEX(589, -101, -1970);
	  COL_VERTEX(589, 0, -1970);
	  COL_VERTEX(589, 0, -1919);
	  COL_VERTEX(589, 77, -1842);
	  COL_VERTEX(538, -101, -1970);
	  COL_VERTEX(-76, -101, -1970);
	  COL_VERTEX(-25, 0, -1919);
	  COL_VERTEX(-25, 0, -1970);
	  COL_VERTEX(-25, -101, -1970);
	  COL_VERTEX(-25, 77, -1842);
	  COL_VERTEX(-229, -306, -2559);
	  COL_VERTEX(435, -101, -2713);
	  COL_VERTEX(77, -101, -2713);
	  COL_VERTEX(-25, -101, -2559);
	  COL_VERTEX(-50, -204, -4505);
	  COL_VERTEX(845, -306, -4505);
	  COL_VERTEX(-332, 512, -4505);
	  COL_VERTEX(538, 666, -2252);
	  COL_VERTEX(742, 512, -4197);
	  COL_VERTEX(1050, 512, -1740);
	  COL_VERTEX(-332, -306, -4402);
	  COL_VERTEX(-434, -306, -4300);
	  COL_VERTEX(-537, -306, -4300);
	  COL_VERTEX(742, -101, -2661);
	  COL_VERTEX(-537, -101, -2661);
	  COL_VERTEX(-537, -101, -1740);
	  COL_VERTEX(435, 410, -1125);
	  COL_VERTEX(77, 410, -1125);
	  COL_VERTEX(-25, 0, -1740);
	  COL_VERTEX(179, 0, -1074);
	  COL_VERTEX(179, 0, -1023);
	  COL_VERTEX(333, 0, -1023);
	  COL_VERTEX(614, 0, -1023);
	  COL_VERTEX(77, -306, -2713);
	  COL_VERTEX(435, -306, -2713);
	  COL_VERTEX(538, -306, -2559);
	  COL_VERTEX(947, -306, -4300);
	  COL_VERTEX(845, -306, -4402);
	  COL_VERTEX(1050, -101, -1945);
	  COL_VERTEX(947, -101, -1945);
	  COL_VERTEX(845, -101, -1842);
	  COL_VERTEX(-434, -101, -1945);
	  COL_VERTEX(-537, -101, -1945);
	  COL_VERTEX(-332, -101, -1842);
	  COL_VERTEX(538, -76, -1919);
	  COL_VERTEX(538, -101, -1919);
	  COL_VERTEX(-25, -101, -1919);
	  COL_VERTEX(538, -76, -1893);
	  COL_VERTEX(538, -50, -1893);
	  COL_VERTEX(538, -50, -1868);
	  COL_VERTEX(538, -25, -1868);
	  COL_VERTEX(538, -25, -1842);
	  COL_VERTEX(-537, -306, -1945);
	  COL_VERTEX(-4402, 205, -50);
	  COL_VERTEX(-4402, 205, -869);
	  COL_VERTEX(-5221, 205, -869);
	  COL_VERTEX(-4121, 282, -306);
	  COL_VERTEX(-4146, 282, -306);
	  COL_VERTEX(-4121, 256, -306);
	  COL_VERTEX(-4095, 256, -306);
	  COL_VERTEX(-4095, 230, -306);
	  COL_VERTEX(-4069, 230, -306);
	  COL_VERTEX(-4069, 205, -306);
	  COL_VERTEX(-4069, 205, -613);
	  COL_VERTEX(-4197, 205, -306);
	  COL_VERTEX(-4146, 358, -255);
	  COL_VERTEX(-4069, 282, -255);
	  COL_VERTEX(-4018, 282, -255);
	  COL_VERTEX(-4146, 307, -613);
	  COL_VERTEX(-4146, 307, -306);
	  COL_VERTEX(-4146, 358, -613);
	  COL_VERTEX(-4197, 205, -613);
	  COL_VERTEX(-4069, 282, -613);
	  COL_VERTEX(-4018, 282, -613);
	  COL_VERTEX(-4914, 205, -1484);
	  COL_VERTEX(-4914, 205, -1279);
	  COL_VERTEX(-5017, 205, -1177);
	  COL_VERTEX(-5221, 205, -1177);
	  COL_VERTEX(-3378, 205, -1177);
	  COL_VERTEX(-3481, 205, -1279);
	  COL_VERTEX(-3481, 205, -1484);
	  COL_VERTEX(-4914, 205, 563);
	  COL_VERTEX(-4914, 205, 358);
	  COL_VERTEX(-5017, 205, 256);
	  COL_VERTEX(-5221, 410, -153);
	  COL_VERTEX(-3481, 205, 563);
	  COL_VERTEX(-3481, 205, 358);
	  COL_VERTEX(-3378, 205, 256);
	  COL_VERTEX(-3173, 205, 256);
	  COL_VERTEX(-3071, 205, -869);
	  COL_VERTEX(-3071, 205, -716);
	  COL_VERTEX(-3650, 1434, -1074);
	  COL_VERTEX(-3583, 1434, -1007);
	  COL_VERTEX(-3583, 1434, 86);
	  COL_VERTEX(-4745, 1434, -1074);
	  COL_VERTEX(-4745, 1434, 154);
	  COL_VERTEX(-4812, 1434, 86);
	  COL_VERTEX(-4812, 1434, -1007);
	  COL_VERTEX(-3583, 1434, -1074);
	  COL_VERTEX(-3583, 1434, 154);
	  COL_VERTEX(-4812, 1434, -1074);
	  COL_VERTEX(-3173, 205, -613);
	  COL_VERTEX(-3173, 205, -972);
	  COL_VERTEX(1833, 1229, -2205);
	  COL_VERTEX(1374, 1229, -2205);
	  COL_VERTEX(1374, 1229, -2665);
	  COL_VERTEX(1845, 1024, -2713);
	  COL_VERTEX(1699, 1229, -2665);
	  COL_VERTEX(1784, 614, -2869);
	  COL_VERTEX(1833, 1229, -2531);
	  COL_VERTEX(1875, 768, -2815);
	  COL_VERTEX(1983, 922, -2706);
	  COL_VERTEX(1983, 768, -2706);
	  COL_VERTEX(590, 870, -1530);
	  COL_VERTEX(734, 870, -1457);
	  COL_VERTEX(2038, 614, -2254);
	  COL_VERTEX(1169, 614, -2254);
	  COL_VERTEX(1169, 614, -2616);
	  COL_VERTEX(1374, 1229, -2339);
	  COL_VERTEX(1507, 1229, -2205);
	  COL_VERTEX(1699, 1229, -2205);
	  COL_VERTEX(626, 1126, -1566);
	  COL_VERTEX(734, 1126, -1457);
	  COL_VERTEX(2002, 922, -1928);
	  COL_VERTEX(2038, 1024, -1964);
	  COL_VERTEX(2074, 1024, -2001);
	  COL_VERTEX(2002, 768, -1928);
	  COL_VERTEX(2110, 922, -2037);
	  COL_VERTEX(807, 614, -1385);
	  COL_VERTEX(1223, 768, -2706);
	  COL_VERTEX(1332, 768, -2815);
	  COL_VERTEX(1332, 922, -2815);
	  COL_VERTEX(1259, 1024, -2743);
	  COL_VERTEX(1296, 1024, -2779);
	  COL_VERTEX(626, 614, -1711);
	  COL_VERTEX(-2942, 1536, -1246);
	  COL_VERTEX(-2942, 512, -1246);
	  COL_VERTEX(-2435, 1536, -1753);
	  COL_VERTEX(-3521, 538, -1825);
	  COL_VERTEX(-3521, 512, -1825);
	  COL_VERTEX(-3539, 538, -1843);
	  COL_VERTEX(-3539, 563, -1843);
	  COL_VERTEX(-3557, 563, -1861);
	  COL_VERTEX(-3557, 589, -1861);
	  COL_VERTEX(-3575, 589, -1879);
	  COL_VERTEX(-3575, 614, -1879);
	  COL_VERTEX(-3593, 614, -1898);
	  COL_VERTEX(-3593, 640, -1898);
	  COL_VERTEX(-3611, 640, -1916);
	  COL_VERTEX(-3611, 666, -1916);
	  COL_VERTEX(-3630, 666, -1934);
	  COL_VERTEX(-3630, 691, -1934);
	  COL_VERTEX(-3648, 691, -1952);
	  COL_VERTEX(-3648, 717, -1952);
	  COL_VERTEX(-2942, 717, -1246);
	  COL_VERTEX(-3159, 512, -2477);
	  COL_VERTEX(-3268, 1536, -2585);
	  COL_VERTEX(-3268, 717, -2585);
	  COL_VERTEX(-3666, 1485, -2042);
	  COL_VERTEX(-3702, 1485, -2079);
	  COL_VERTEX(-3666, 1536, -1970);
	  COL_VERTEX(-3774, 1536, -2079);
	  COL_VERTEX(-5114, 1485, -3491);
	  COL_VERTEX(-5114, 717, -3418);
	  COL_VERTEX(-5150, 1485, -3527);
	  COL_VERTEX(-5223, 1536, -3527);
	  COL_VERTEX(-4716, 717, -4034);
	  COL_VERTEX(-6562, 1485, -4939);
	  COL_VERTEX(-6562, 717, -4866);
	  COL_VERTEX(-6164, 1536, -5482);
	  COL_VERTEX(-6164, 717, -5482);
	  COL_VERTEX(-6671, 1536, -4975);
	  COL_VERTEX(-7395, 819, -5771);
	  COL_VERTEX(-7395, 1434, -5771);
	  COL_VERTEX(-6960, 819, -6206);
	  COL_VERTEX(-2507, 512, -1680);
	  COL_VERTEX(-5983, 1536, -4287);
	  COL_VERTEX(-1381, -1074, 1434);
	  COL_VERTEX(-665, -1074, 1434);
	  COL_VERTEX(-1381, -1074, 922);
	  COL_VERTEX(-613, 0, -716);
	  COL_VERTEX(-665, 0, -767);
	  COL_VERTEX(-716, 0, -767);
	  COL_VERTEX(-767, -420, -665);
	  COL_VERTEX(-1330, 410, -1595);
	  COL_VERTEX(-716, 410, -1595);
	  COL_VERTEX(-716, 132, -613);
	  COL_VERTEX(-716, -101, -1595);
	  COL_VERTEX(-1330, 307, -1595);
	  COL_VERTEX(-818, 410, -1595);
	  COL_VERTEX(-1330, 205, -716);
	  COL_VERTEX(-1330, -562, 870);
	  COL_VERTEX(-1228, -460, 870);
	  COL_VERTEX(-1177, -1074, 870);
	  COL_VERTEX(-818, -460, 870);
	  COL_VERTEX(-716, -562, 870);
	  COL_VERTEX(-869, -1074, 870);
	  COL_VERTEX(-869, -1074, 922);
	  COL_VERTEX(-869, -818, 922);
	  COL_VERTEX(-361, 0, -806);
	  COL_VERTEX(-1830, 0, -878);
	  COL_VERTEX(-1794, 0, -914);
	  COL_VERTEX(-180, 0, -987);
	  COL_VERTEX(-506, 0, -806);
	  COL_VERTEX(-1330, -456, -613);
	  COL_VERTEX(-1433, 410, -716);
	  COL_VERTEX(-1381, 0, -767);
	  COL_VERTEX(-1279, 0, -716);
	  COL_VERTEX(-1279, -420, -665);
	  COL_VERTEX(-1279, -383, -716);
	  COL_VERTEX(-1330, 0, -767);
	  COL_VERTEX(-144, -76, -1023);
	  COL_VERTEX(-869, -76, -1177);
	  COL_VERTEX(-625, -76, -1504);
	  COL_VERTEX(-444, -25, -1323);
	  COL_VERTEX(-535, -25, -1414);
	  COL_VERTEX(-535, -50, -1414);
	  COL_VERTEX(-1602, 0, -1323);
	  COL_VERTEX(-1199, -25, -1077);
	  COL_VERTEX(-1866, 0, -987);
	  COL_VERTEX(-1613, 0, -733);
	  COL_VERTEX(-946, -101, -5119);
	  COL_VERTEX(-1100, -101, -5221);
	  COL_VERTEX(-869, -127, -1177);
	  COL_VERTEX(-716, -1049, 320);
	  COL_VERTEX(-1330, -1049, 320);
	  COL_VERTEX(-716, -1023, 282);
	  COL_VERTEX(-1330, -1023, 282);
	  COL_VERTEX(-716, -997, 243);
	  COL_VERTEX(-1330, -997, 243);
	  COL_VERTEX(-716, -972, 205);
	  COL_VERTEX(-1330, -972, 205);
	  COL_VERTEX(-716, -946, 166);
	  COL_VERTEX(-1330, -946, 166);
	  COL_VERTEX(-716, -921, 128);
	  COL_VERTEX(-1330, -921, 128);
	  COL_VERTEX(-716, -869, 51);
	  COL_VERTEX(-1330, -869, 51);
	  COL_VERTEX(-1330, -895, 90);
	  COL_VERTEX(-716, -895, 90);
	  COL_VERTEX(-716, -844, 13);
	  COL_VERTEX(-1330, -844, 13);
	  COL_VERTEX(-716, -818, -25);
	  COL_VERTEX(-1330, -818, -25);
	  COL_VERTEX(-716, -793, -63);
	  COL_VERTEX(-1330, -793, -63);
	  COL_VERTEX(-716, -767, -101);
	  COL_VERTEX(-1330, -767, -101);
	  COL_VERTEX(-1330, -716, -178);
	  COL_VERTEX(-716, -716, -178);
	  COL_VERTEX(-716, -690, -217);
	  COL_VERTEX(-1330, -690, -217);
	  COL_VERTEX(-716, -665, -255);
	  COL_VERTEX(-1330, -665, -255);
	  COL_VERTEX(-1330, -741, -140);
	  COL_VERTEX(-716, -741, -140);
	  COL_VERTEX(-716, -639, -293);
	  COL_VERTEX(-1330, -639, -293);
	  COL_VERTEX(-716, -613, -332);
	  COL_VERTEX(-1330, -613, -332);
	  COL_VERTEX(-716, -588, -370);
	  COL_VERTEX(-1330, -588, -370);
	  COL_VERTEX(-716, -562, -409);
	  COL_VERTEX(-1330, -562, -409);
	  COL_VERTEX(-716, -537, -447);
	  COL_VERTEX(-1330, -537, -447);
	  COL_VERTEX(-716, -511, -485);
	  COL_VERTEX(-1330, -511, -485);
	  COL_VERTEX(-716, -485, -524);
	  COL_VERTEX(-1330, -485, -524);
	  COL_VERTEX(-1330, -460, -524);
	  COL_VERTEX(-1279, -357, -716);
	  COL_VERTEX(-767, -357, -716);
	  COL_VERTEX(-776, -332, -754);
	  COL_VERTEX(-1270, -332, -754);
	  COL_VERTEX(-784, -306, -793);
	  COL_VERTEX(-1262, -306, -793);
	  COL_VERTEX(-801, -255, -869);
	  COL_VERTEX(-1245, -255, -869);
	  COL_VERTEX(-1253, -281, -831);
	  COL_VERTEX(-793, -281, -831);
	  COL_VERTEX(-1236, -229, -908);
	  COL_VERTEX(-810, -229, -908);
	  COL_VERTEX(-818, -204, -946);
	  COL_VERTEX(-1228, -204, -946);
	  COL_VERTEX(-724, -460, -524);
	  COL_VERTEX(-716, -460, -527);
	  COL_VERTEX(-1330, -460, -562);
	  COL_VERTEX(-716, -434, -601);
	  COL_VERTEX(-1330, -434, -601);
	  COL_VERTEX(-716, -409, -639);
	  COL_VERTEX(-1330, -409, -639);
	  COL_VERTEX(-716, -383, -677);
	  COL_VERTEX(-1330, -383, -677);
	  COL_VERTEX(-1279, -383, -677);
	  COL_VERTEX(-767, -383, -677);
	  COL_VERTEX(-1199, -153, -1074);
	  COL_VERTEX(-847, -153, -1074);
	  COL_VERTEX(-1215, -178, -1005);
	  COL_VERTEX(-831, -178, -1005);
	  COL_VERTEX(-844, -101, -5529);
	  COL_VERTEX(-1202, -101, -5529);
	  COL_VERTEX(-844, 307, -5221);
	  COL_VERTEX(-1177, 512, -460);
	  COL_VERTEX(-1228, 512, -460);
	  COL_VERTEX(-818, 512, -460);
	  COL_VERTEX(-869, 512, -460);
	  COL_VERTEX(-1228, 0, 154);
	  COL_VERTEX(-1228, 51, 154);
	  COL_VERTEX(-1228, 0, -460);
	  COL_VERTEX(-1177, 0, -460);
	  COL_VERTEX(-1228, 614, -409);
	  COL_VERTEX(-869, 51, 154);
	  COL_VERTEX(-869, 0, -460);
	  COL_VERTEX(-818, 0, -460);
	  COL_VERTEX(-869, 614, -409);
	  COL_VERTEX(-511, 0, -306);
	  COL_VERTEX(-613, 0, -204);
	  COL_VERTEX(-511, 0, -511);
	  COL_VERTEX(-511, 384, -511);
	  COL_VERTEX(-818, 384, -409);
	  COL_VERTEX(-1535, 0, -511);
	  COL_VERTEX(-1433, 0, -204);
	  COL_VERTEX(-1228, 384, -204);
	  COL_VERTEX(-1228, 384, -409);
	  COL_VERTEX(-1177, 512, -409);
	  COL_VERTEX(-818, 512, -409);
	  COL_VERTEX(-1433, 0, -409);
	  COL_VERTEX(-1757, 0, -733);
	  COL_VERTEX(-869, -50, 1126);
	  COL_VERTEX(-1535, 0, 1536);
	  COL_VERTEX(-2559, 0, -101);
	  COL_VERTEX(-409, 0, 1434);
	  COL_VERTEX(-1381, 0, 1536);
	  COL_VERTEX(-1433, 512, -409);
	  COL_VERTEX(-2661, 512, -1023);
	  COL_VERTEX(-2507, 512, -1536);
	  COL_VERTEX(-2743, 512, -1300);
	  COL_VERTEX(-2866, 512, -1228);
	  COL_VERTEX(-2724, 512, -1318);
	  COL_VERTEX(-1279, 512, -1023);
	  COL_VERTEX(-2457, 1741, -769);
	  COL_VERTEX(-2202, 1741, -1023);
	  COL_VERTEX(662, 614, -1240);
	  COL_VERTEX(481, 614, -1566);
	  COL_VERTEX(0, 614, -1023);
	  COL_VERTEX(819, 205, -1228);
	  COL_VERTEX(463, 26, 561);
	  COL_VERTEX(500, 26, 524);
	  COL_VERTEX(155, 1741, -1023);
	  COL_VERTEX(410, 1024, -1637);
	  COL_VERTEX(-765, 1741, 922);
	  COL_VERTEX(410, 1741, -253);
	  COL_VERTEX(410, 1741, -769);
	  COL_VERTEX(-180, 0, -842);
	  COL_VERTEX(-2547, 26, 524);
	  COL_VERTEX(-2547, 51, 524);
	  COL_VERTEX(-2583, 51, 488);
	  COL_VERTEX(-2583, 77, 488);
	  COL_VERTEX(-2619, 77, 452);
	  COL_VERTEX(-2619, 102, 452);
	  COL_VERTEX(-2655, 102, 416);
	  COL_VERTEX(-2655, 128, 416);
	  COL_VERTEX(-2691, 128, 380);
	  COL_VERTEX(-2691, 154, 380);
	  COL_VERTEX(-2728, 154, 343);
	  COL_VERTEX(-2728, 179, 343);
	  COL_VERTEX(-2764, 179, 307);
	  COL_VERTEX(-2764, 205, 307);
	  COL_VERTEX(-2457, 205, 0);
	  COL_VERTEX(717, 179, 307);
	  COL_VERTEX(717, 205, 307);
	  COL_VERTEX(439, 205, 29);
	  COL_VERTEX(681, 179, 343);
	  COL_VERTEX(681, 154, 343);
	  COL_VERTEX(644, 154, 380);
	  COL_VERTEX(644, 128, 380);
	  COL_VERTEX(608, 128, 416);
	  COL_VERTEX(608, 102, 416);
	  COL_VERTEX(572, 102, 452);
	  COL_VERTEX(572, 77, 452);
	  COL_VERTEX(536, 77, 488);
	  COL_VERTEX(536, 51, 488);
	  COL_VERTEX(500, 51, 524);
	  COL_VERTEX(-3071, 205, -613);
	  COL_VERTEX(-1330, 0, 1536);
	  COL_VERTEX(-3071, 0, 0);
	  COL_VERTEX(-1330, 410, 2150);
	  COL_VERTEX(-1125, 717, 2150);
	  COL_VERTEX(-2510, 0, 561);
	  COL_VERTEX(1024, 0, 0);
	  COL_VERTEX(-255, 614, -1279);
	  COL_VERTEX(410, 205, 0);
	  COL_VERTEX(1024, 205, -50);
	  COL_VERTEX(-1866, 0, -842);
	  COL_VERTEX(1024, 205, -409);
	  COL_VERTEX(-2661, 205, -1023);
	  COL_VERTEX(-716, 0, 3174);
	  COL_VERTEX(-1177, 0, 2150);
	  COL_VERTEX(-869, 256, 2150);
	  COL_VERTEX(-869, 0, 2150);
	  COL_VERTEX(-921, 717, 2150);
	  COL_VERTEX(-2559, 0, -1023);
	  COL_VERTEX(435, 0, -921);
	  COL_VERTEX(77, 0, -1023);
	  COL_VERTEX(-361, 0, -661);
	  COL_VERTEX(-1685, 0, -661);
	  COL_VERTEX(-2124, 0, -1023);
	  COL_VERTEX(-2482, 0, -1023);
	  COL_VERTEX(-3071, 205, -972);
	  COL_TRI_INIT(SURFACE_DEFAULT, 1977);
	  COL_TRI(181, 182, 183);
	  COL_TRI(183, 184, 185);
	  COL_TRI(183, 182, 184);
	  COL_TRI(181, 186, 182);
	  COL_TRI(187, 188, 185);
	  COL_TRI(185, 189, 183);
	  COL_TRI(185, 188, 189);
	  COL_TRI(190, 187, 185);
	  COL_TRI(191, 185, 184);
	  COL_TRI(191, 190, 185);
	  COL_TRI(183, 189, 192);
	  COL_TRI(183, 192, 181);
	  COL_TRI(186, 194, 182);
	  COL_TRI(182, 193, 184);
	  COL_TRI(182, 194, 193);
	  COL_TRI(189, 194, 1018);
	  COL_TRI(186, 1018, 194);
	  COL_TRI(188, 193, 194);
	  COL_TRI(188, 194, 189);
	  COL_TRI(195, 184, 193);
	  COL_TRI(198, 1022, 199);
	  COL_TRI(195, 191, 184);
	  COL_TRI(189, 1018, 192);
	  COL_TRI(196, 1019, 1020);
	  COL_TRI(196, 1021, 1019);
	  COL_TRI(197, 195, 198);
	  COL_TRI(198, 199, 197);
	  COL_TRI(199, 1022, 187);
	  COL_TRI(199, 187, 196);
	  COL_TRI(197, 199, 196);
	  COL_TRI(197, 196, 1020);
	  COL_TRI(197, 1020, 195);
	  COL_TRI(104, 113, 116);
	  COL_TRI(104, 116, 107);
	  COL_TRI(102, 104, 203);
	  COL_TRI(206, 204, 205);
	  COL_TRI(200, 1024, 201);
	  COL_TRI(200, 201, 289);
	  COL_TRI(201, 203, 1025);
	  COL_TRI(201, 1025, 289);
	  COL_TRI(202, 1025, 1023);
	  COL_TRI(203, 1023, 1025);
	  COL_TRI(102, 203, 201);
	  COL_TRI(204, 203, 205);
	  COL_TRI(203, 204, 1023);
	  COL_TRI(205, 286, 207);
	  COL_TRI(205, 207, 202);
	  COL_TRI(206, 205, 202);
	  COL_TRI(209, 208, 211);
	  COL_TRI(207, 1026, 288);
	  COL_TRI(207, 286, 1026);
	  COL_TRI(202, 1027, 206);
	  COL_TRI(202, 1023, 1027);
	  COL_TRI(208, 1028, 210);
	  COL_TRI(208, 210, 211);
	  COL_TRI(210, 1028, 212);
	  COL_TRI(211, 210, 1029);
	  COL_TRI(212, 1029, 210);
	  COL_TRI(211, 1029, 213);
	  COL_TRI(209, 211, 213);
	  COL_TRI(213, 1029, 255);
	  COL_TRI(212, 255, 1029);
	  COL_TRI(213, 255, 248);
	  COL_TRI(209, 213, 248);
	  COL_TRI(214, 248, 255);
	  COL_TRI(215, 217, 218);
	  COL_TRI(215, 1030, 217);
	  COL_TRI(217, 1030, 219);
	  COL_TRI(218, 217, 1031);
	  COL_TRI(219, 1031, 217);
	  COL_TRI(218, 1031, 220);
	  COL_TRI(216, 215, 218);
	  COL_TRI(216, 218, 220);
	  COL_TRI(220, 1031, 254);
	  COL_TRI(219, 254, 1031);
	  COL_TRI(220, 254, 1033);
	  COL_TRI(216, 220, 1033);
	  COL_TRI(221, 280, 222);
	  COL_TRI(222, 1034, 224);
	  COL_TRI(222, 280, 1034);
	  COL_TRI(222, 224, 221);
	  COL_TRI(221, 283, 280);
	  COL_TRI(223, 280, 219);
	  COL_TRI(224, 1034, 223);
	  COL_TRI(224, 223, 225);
	  COL_TRI(224, 225, 221);
	  COL_TRI(225, 223, 1035);
	  COL_TRI(223, 1036, 1035);
	  COL_TRI(223, 209, 1036);
	  COL_TRI(223, 219, 209);
	  COL_TRI(225, 1035, 226);
	  COL_TRI(221, 225, 226);
	  COL_TRI(221, 226, 227);
	  COL_TRI(230, 1039, 1038);
	  COL_TRI(226, 1035, 1037);
	  COL_TRI(226, 1037, 228);
	  COL_TRI(227, 226, 229);
	  COL_TRI(226, 228, 229);
	  COL_TRI(228, 1037, 1036);
	  COL_TRI(228, 1036, 229);
	  COL_TRI(229, 1036, 278);
	  COL_TRI(229, 278, 227);
	  COL_TRI(221, 227, 287);
	  COL_TRI(230, 1038, 232);
	  COL_TRI(231, 1038, 1041);
	  COL_TRI(232, 1038, 231);
	  COL_TRI(231, 1042, 234);
	  COL_TRI(231, 1041, 1042);
	  COL_TRI(233, 1042, 1043);
	  COL_TRI(234, 1042, 233);
	  COL_TRI(233, 1044, 236);
	  COL_TRI(233, 1043, 1044);
	  COL_TRI(235, 1044, 1045);
	  COL_TRI(236, 1044, 235);
	  COL_TRI(235, 1046, 237);
	  COL_TRI(235, 1045, 1046);
	  COL_TRI(242, 1051, 1052);
	  COL_TRI(237, 1046, 1047);
	  COL_TRI(237, 1047, 238);
	  COL_TRI(238, 1047, 1048);
	  COL_TRI(238, 1048, 239);
	  COL_TRI(239, 1048, 1049);
	  COL_TRI(239, 1049, 240);
	  COL_TRI(240, 1049, 1050);
	  COL_TRI(240, 1050, 241);
	  COL_TRI(241, 1050, 1051);
	  COL_TRI(241, 1051, 242);
	  COL_TRI(248, 247, 1032);
	  COL_TRI(242, 1052, 244);
	  COL_TRI(243, 1052, 1053);
	  COL_TRI(244, 1052, 243);
	  COL_TRI(245, 243, 1053);
	  COL_TRI(245, 271, 243);
	  COL_TRI(246, 247, 214);
	  COL_TRI(246, 1054, 247);
	  COL_TRI(247, 249, 1032);
	  COL_TRI(247, 1054, 249);
	  COL_TRI(214, 247, 248);
	  COL_TRI(249, 1054, 1055);
	  COL_TRI(249, 1055, 252);
	  COL_TRI(248, 1032, 273);
	  COL_TRI(250, 1055, 253);
	  COL_TRI(250, 252, 1055);
	  COL_TRI(251, 250, 253);
	  COL_TRI(252, 258, 259);
	  COL_TRI(252, 274, 258);
	  COL_TRI(257, 1058, 258);
	  COL_TRI(253, 1055, 1056);
	  COL_TRI(253, 1056, 1057);
	  COL_TRI(251, 253, 254);
	  COL_TRI(254, 253, 1057);
	  COL_TRI(255, 271, 246);
	  COL_TRI(255, 246, 214);
	  COL_TRI(254, 1057, 1033);
	  COL_TRI(256, 1058, 257);
	  COL_TRI(262, 264, 265);
	  COL_TRI(258, 1058, 1059);
	  COL_TRI(256, 1059, 1058);
	  COL_TRI(258, 1059, 261);
	  COL_TRI(258, 266, 1060);
	  COL_TRI(258, 261, 266);
	  COL_TRI(259, 258, 1060);
	  COL_TRI(257, 258, 274);
	  COL_TRI(260, 1059, 256);
	  COL_TRI(260, 261, 1059);
	  COL_TRI(261, 270, 266);
	  COL_TRI(267, 1061, 1063);
	  COL_TRI(263, 1061, 264);
	  COL_TRI(264, 1061, 1062);
	  COL_TRI(264, 1062, 269);
	  COL_TRI(263, 1063, 1061);
	  COL_TRI(265, 269, 1060);
	  COL_TRI(265, 264, 269);
	  COL_TRI(266, 1061, 267);
	  COL_TRI(266, 1062, 1061);
	  COL_TRI(270, 1062, 266);
	  COL_TRI(267, 1063, 268);
	  COL_TRI(268, 265, 267);
	  COL_TRI(267, 1060, 266);
	  COL_TRI(267, 265, 1060);
	  COL_TRI(268, 262, 265);
	  COL_TRI(269, 259, 1060);
	  COL_TRI(271, 245, 1056);
	  COL_TRI(260, 256, 288);
	  COL_TRI(257, 274, 200);
	  COL_TRI(245, 1033, 1057);
	  COL_TRI(271, 1056, 246);
	  COL_TRI(200, 251, 1064);
	  COL_TRI(245, 1057, 1056);
	  COL_TRI(272, 276, 273);
	  COL_TRI(272, 273, 288);
	  COL_TRI(273, 1032, 260);
	  COL_TRI(273, 260, 288);
	  COL_TRI(200, 274, 251);
	  COL_TRI(274, 250, 251);
	  COL_TRI(251, 275, 1064);
	  COL_TRI(273, 209, 248);
	  COL_TRI(273, 276, 209);
	  COL_TRI(254, 275, 251);
	  COL_TRI(254, 219, 275);
	  COL_TRI(279, 277, 286);
	  COL_TRI(275, 281, 1064);
	  COL_TRI(276, 272, 277);
	  COL_TRI(209, 277, 1036);
	  COL_TRI(277, 209, 276);
	  COL_TRI(278, 1036, 277);
	  COL_TRI(279, 278, 277);
	  COL_TRI(280, 281, 219);
	  COL_TRI(281, 275, 219);
	  COL_TRI(282, 201, 281);
	  COL_TRI(283, 282, 281);
	  COL_TRI(283, 281, 280);
	  COL_TRI(284, 1065, 279);
	  COL_TRI(285, 1065, 284);
	  COL_TRI(284, 279, 286);
	  COL_TRI(282, 285, 201);
	  COL_TRI(286, 102, 201);
	  COL_TRI(287, 279, 1065);
	  COL_TRI(285, 287, 1065);
	  COL_TRI(287, 278, 279);
	  COL_TRI(285, 1040, 287);
	  COL_TRI(282, 283, 1040);
	  COL_TRI(282, 1040, 1066);
	  COL_TRI(282, 1066, 285);
	  COL_TRI(285, 1066, 1040);
	  COL_TRI(260, 249, 270);
	  COL_TRI(221, 287, 1040);
	  COL_TRI(288, 289, 207);
	  COL_TRI(288, 200, 289);
	  COL_TRI(289, 202, 207);
	  COL_TRI(289, 1025, 202);
	  COL_TRI(260, 270, 261);
	  COL_TRI(205, 113, 114);
	  COL_TRI(290, 1067, 1068);
	  COL_TRI(290, 1069, 1067);
	  COL_TRI(249, 1069, 290);
	  COL_TRI(290, 270, 249);
	  COL_TRI(290, 1068, 270);
	  COL_TRI(249, 259, 1069);
	  COL_TRI(259, 1067, 1069);
	  COL_TRI(249, 252, 259);
	  COL_TRI(286, 114, 102);
	  COL_TRI(286, 205, 114);
	  COL_TRI(293, 374, 375);
	  COL_TRI(291, 168, 165);
	  COL_TRI(168, 174, 180);
	  COL_TRI(168, 180, 171);
	  COL_TRI(171, 304, 172);
	  COL_TRI(292, 374, 1070);
	  COL_TRI(292, 375, 374);
	  COL_TRI(376, 1074, 1073);
	  COL_TRI(293, 371, 374);
	  COL_TRI(294, 295, 1072);
	  COL_TRI(294, 1073, 295);
	  COL_TRI(295, 1074, 296);
	  COL_TRI(295, 1073, 1074);
	  COL_TRI(295, 297, 1072);
	  COL_TRI(295, 296, 297);
	  COL_TRI(296, 1074, 1075);
	  COL_TRI(296, 1075, 1076);
	  COL_TRI(297, 296, 1076);
	  COL_TRI(297, 294, 1072);
	  COL_TRI(297, 376, 294);
	  COL_TRI(298, 376, 297);
	  COL_TRI(297, 1076, 298);
	  COL_TRI(298, 1076, 1075);
	  COL_TRI(376, 1073, 294);
	  COL_TRI(302, 1082, 1083);
	  COL_TRI(298, 377, 376);
	  COL_TRI(298, 1075, 377);
	  COL_TRI(299, 300, 1077);
	  COL_TRI(300, 1078, 1077);
	  COL_TRI(301, 1079, 1080);
	  COL_TRI(301, 1081, 1079);
	  COL_TRI(302, 1084, 1082);
	  COL_TRI(303, 1085, 1086);
	  COL_TRI(303, 1087, 1085);
	  COL_TRI(304, 329, 1088);
	  COL_TRI(304, 1071, 329);
	  COL_TRI(304, 305, 172);
	  COL_TRI(309, 306, 388);
	  COL_TRI(305, 310, 388);
	  COL_TRI(305, 380, 310);
	  COL_TRI(306, 305, 388);
	  COL_TRI(307, 291, 1089);
	  COL_TRI(307, 1090, 291);
	  COL_TRI(306, 291, 165);
	  COL_TRI(308, 306, 309);
	  COL_TRI(308, 1091, 306);
	  COL_TRI(315, 1093, 1092);
	  COL_TRI(310, 311, 388);
	  COL_TRI(311, 330, 388);
	  COL_TRI(312, 308, 309);
	  COL_TRI(313, 312, 309);
	  COL_TRI(314, 315, 316);
	  COL_TRI(315, 1092, 316);
	  COL_TRI(316, 1092, 339);
	  COL_TRI(316, 339, 1094);
	  COL_TRI(314, 316, 1094);
	  COL_TRI(314, 339, 1095);
	  COL_TRI(314, 1094, 339);
	  COL_TRI(317, 1096, 1097);
	  COL_TRI(317, 1098, 1096);
	  COL_TRI(318, 385, 325);
	  COL_TRI(318, 1099, 385);
	  COL_TRI(318, 325, 1089);
	  COL_TRI(319, 1100, 1088);
	  COL_TRI(319, 1101, 1100);
	  COL_TRI(319, 381, 1101);
	  COL_TRI(320, 326, 1102);
	  COL_TRI(321, 1103, 320);
	  COL_TRI(322, 320, 1102);
	  COL_TRI(321, 320, 322);
	  COL_TRI(320, 1104, 326);
	  COL_TRI(320, 1105, 1104);
	  COL_TRI(320, 1106, 1105);
	  COL_TRI(320, 1107, 1106);
	  COL_TRI(320, 1103, 1107);
	  COL_TRI(323, 1103, 321);
	  COL_TRI(323, 1107, 1103);
	  COL_TRI(324, 1107, 323);
	  COL_TRI(324, 1106, 1107);
	  COL_TRI(319, 1106, 324);
	  COL_TRI(319, 1105, 1106);
	  COL_TRI(325, 1104, 1105);
	  COL_TRI(325, 1105, 319);
	  COL_TRI(326, 1104, 325);
	  COL_TRI(327, 326, 325);
	  COL_TRI(328, 326, 327);
	  COL_TRI(328, 1102, 326);
	  COL_TRI(330, 335, 1093);
	  COL_TRI(322, 1102, 328);
	  COL_TRI(329, 307, 1089);
	  COL_TRI(291, 1090, 1071);
	  COL_TRI(329, 1089, 1088);
	  COL_TRI(291, 1071, 304);
	  COL_TRI(330, 334, 335);
	  COL_TRI(333, 1095, 313);
	  COL_TRI(311, 1098, 334);
	  COL_TRI(331, 313, 1095);
	  COL_TRI(331, 332, 313);
	  COL_TRI(332, 322, 312);
	  COL_TRI(332, 1096, 322);
	  COL_TRI(333, 313, 309);
	  COL_TRI(338, 1111, 1110);
	  COL_TRI(311, 321, 1098);
	  COL_TRI(334, 1098, 1108);
	  COL_TRI(335, 334, 336);
	  COL_TRI(334, 1108, 336);
	  COL_TRI(336, 1108, 391);
	  COL_TRI(337, 336, 1109);
	  COL_TRI(336, 391, 1109);
	  COL_TRI(335, 336, 337);
	  COL_TRI(337, 1109, 1092);
	  COL_TRI(338, 1110, 340);
	  COL_TRI(328, 348, 322);
	  COL_TRI(340, 1110, 1096);
	  COL_TRI(339, 338, 340);
	  COL_TRI(341, 340, 332);
	  COL_TRI(340, 1096, 332);
	  COL_TRI(339, 340, 341);
	  COL_TRI(341, 332, 331);
	  COL_TRI(342, 322, 348);
	  COL_TRI(342, 312, 322);
	  COL_TRI(348, 1112, 342);
	  COL_TRI(343, 321, 311);
	  COL_TRI(321, 343, 323);
	  COL_TRI(344, 1114, 343);
	  COL_TRI(343, 311, 344);
	  COL_TRI(343, 345, 323);
	  COL_TRI(343, 1115, 345);
	  COL_TRI(343, 1114, 1115);
	  COL_TRI(345, 346, 323);
	  COL_TRI(346, 310, 323);
	  COL_TRI(345, 1116, 346);
	  COL_TRI(345, 1115, 1116);
	  COL_TRI(346, 344, 310);
	  COL_TRI(346, 347, 344);
	  COL_TRI(346, 1116, 347);
	  COL_TRI(344, 311, 310);
	  COL_TRI(344, 347, 1114);
	  COL_TRI(347, 1116, 1115);
	  COL_TRI(347, 1115, 1114);
	  COL_TRI(308, 352, 367);
	  COL_TRI(348, 350, 1112);
	  COL_TRI(349, 350, 348);
	  COL_TRI(349, 1117, 350);
	  COL_TRI(350, 1113, 1112);
	  COL_TRI(350, 1117, 1113);
	  COL_TRI(342, 1112, 1113);
	  COL_TRI(342, 1113, 351);
	  COL_TRI(308, 342, 351);
	  COL_TRI(308, 312, 342);
	  COL_TRI(351, 1113, 1117);
	  COL_TRI(351, 1117, 349);
	  COL_TRI(328, 308, 351);
	  COL_TRI(328, 351, 349);
	  COL_TRI(328, 349, 348);
	  COL_TRI(352, 308, 328);
	  COL_TRI(308, 367, 1091);
	  COL_TRI(353, 352, 328);
	  COL_TRI(353, 328, 327);
	  COL_TRI(327, 1118, 1091);
	  COL_TRI(327, 1119, 1118);
	  COL_TRI(327, 1091, 367);
	  COL_TRI(327, 367, 366);
	  COL_TRI(327, 366, 353);
	  COL_TRI(354, 355, 1119);
	  COL_TRI(355, 1118, 1119);
	  COL_TRI(354, 1119, 357);
	  COL_TRI(356, 1118, 1120);
	  COL_TRI(355, 1120, 1118);
	  COL_TRI(361, 379, 1123);
	  COL_TRI(356, 1120, 1121);
	  COL_TRI(357, 356, 1121);
	  COL_TRI(357, 1121, 354);
	  COL_TRI(358, 1122, 359);
	  COL_TRI(359, 382, 358);
	  COL_TRI(359, 360, 382);
	  COL_TRI(360, 379, 382);
	  COL_TRI(360, 1123, 379);
	  COL_TRI(358, 361, 1122);
	  COL_TRI(361, 1123, 1122);
	  COL_TRI(367, 1128, 366);
	  COL_TRI(362, 1124, 1125);
	  COL_TRI(362, 378, 1124);
	  COL_TRI(363, 378, 362);
	  COL_TRI(363, 365, 378);
	  COL_TRI(364, 1125, 1124);
	  COL_TRI(364, 1126, 1125);
	  COL_TRI(365, 363, 1126);
	  COL_TRI(365, 1126, 364);
	  COL_TRI(366, 1127, 353);
	  COL_TRI(366, 1128, 1127);
	  COL_TRI(371, 1129, 1130);
	  COL_TRI(367, 369, 1128);
	  COL_TRI(368, 353, 1127);
	  COL_TRI(368, 352, 353);
	  COL_TRI(369, 352, 368);
	  COL_TRI(369, 367, 352);
	  COL_TRI(370, 371, 293);
	  COL_TRI(370, 1129, 371);
	  COL_TRI(371, 1130, 374);
	  COL_TRI(377, 1074, 376);
	  COL_TRI(372, 1129, 370);
	  COL_TRI(372, 1130, 1129);
	  COL_TRI(373, 1130, 372);
	  COL_TRI(373, 1131, 1130);
	  COL_TRI(374, 1131, 1070);
	  COL_TRI(374, 1130, 1131);
	  COL_TRI(292, 1131, 373);
	  COL_TRI(292, 1070, 1131);
	  COL_TRI(292, 373, 372);
	  COL_TRI(292, 372, 375);
	  COL_TRI(375, 372, 370);
	  COL_TRI(375, 370, 293);
	  COL_TRI(377, 1075, 1074);
	  COL_TRI(378, 380, 324);
	  COL_TRI(378, 365, 380);
	  COL_TRI(379, 380, 305);
	  COL_TRI(380, 361, 324);
	  COL_TRI(380, 379, 361);
	  COL_TRI(380, 364, 310);
	  COL_TRI(380, 365, 364);
	  COL_TRI(323, 364, 1124);
	  COL_TRI(323, 310, 364);
	  COL_TRI(378, 324, 323);
	  COL_TRI(323, 1124, 378);
	  COL_TRI(382, 305, 381);
	  COL_TRI(381, 324, 361);
	  COL_TRI(306, 356, 357);
	  COL_TRI(306, 1118, 356);
	  COL_TRI(306, 1091, 1118);
	  COL_TRI(357, 385, 306);
	  COL_TRI(357, 1119, 327);
	  COL_TRI(357, 327, 385);
	  COL_TRI(382, 379, 305);
	  COL_TRI(381, 361, 358);
	  COL_TRI(383, 381, 305);
	  COL_TRI(383, 1101, 381);
	  COL_TRI(381, 358, 382);
	  COL_TRI(384, 1101, 383);
	  COL_TRI(384, 1100, 1101);
	  COL_TRI(385, 386, 306);
	  COL_TRI(385, 1099, 386);
	  COL_TRI(386, 1099, 318);
	  COL_TRI(386, 318, 387);
	  COL_TRI(387, 318, 1089);
	  COL_TRI(387, 1089, 291);
	  COL_TRI(304, 1100, 384);
	  COL_TRI(304, 1088, 1100);
	  COL_TRI(388, 1093, 1132);
	  COL_TRI(388, 330, 1093);
	  COL_TRI(393, 1134, 315);
	  COL_TRI(389, 1092, 391);
	  COL_TRI(390, 389, 391);
	  COL_TRI(391, 1111, 339);
	  COL_TRI(391, 398, 390);
	  COL_TRI(391, 339, 398);
	  COL_TRI(339, 402, 398);
	  COL_TRI(392, 1134, 393);
	  COL_TRI(393, 315, 314);
	  COL_TRI(309, 388, 1133);
	  COL_TRI(392, 1135, 1134);
	  COL_TRI(394, 1135, 392);
	  COL_TRI(394, 1136, 1135);
	  COL_TRI(395, 1137, 394);
	  COL_TRI(394, 1137, 1136);
	  COL_TRI(396, 1137, 395);
	  COL_TRI(396, 1138, 1137);
	  COL_TRI(397, 1138, 396);
	  COL_TRI(397, 1133, 1138);
	  COL_TRI(309, 1133, 397);
	  COL_TRI(389, 401, 403);
	  COL_TRI(398, 400, 390);
	  COL_TRI(398, 399, 400);
	  COL_TRI(399, 963, 400);
	  COL_TRI(399, 964, 963);
	  COL_TRI(390, 401, 389);
	  COL_TRI(390, 400, 401);
	  COL_TRI(400, 1139, 401);
	  COL_TRI(400, 963, 1139);
	  COL_TRI(401, 1140, 403);
	  COL_TRI(401, 1139, 1140);
	  COL_TRI(389, 403, 402);
	  COL_TRI(402, 399, 398);
	  COL_TRI(402, 403, 399);
	  COL_TRI(403, 1140, 964);
	  COL_TRI(403, 964, 399);
	  COL_TRI(150, 152, 1141);
	  COL_TRI(152, 161, 164);
	  COL_TRI(152, 164, 155);
	  COL_TRI(406, 1146, 408);
	  COL_TRI(404, 405, 162);
	  COL_TRI(405, 161, 162);
	  COL_TRI(404, 162, 150);
	  COL_TRI(404, 150, 1142);
	  COL_TRI(150, 1141, 1142);
	  COL_TRI(406, 408, 1143);
	  COL_TRI(407, 1143, 408);
	  COL_TRI(407, 408, 1144);
	  COL_TRI(408, 1145, 1144);
	  COL_TRI(408, 1146, 1145);
	  COL_TRI(412, 416, 442);
	  COL_TRI(407, 409, 1143);
	  COL_TRI(409, 406, 1143);
	  COL_TRI(410, 1147, 1148);
	  COL_TRI(410, 1148, 1149);
	  COL_TRI(411, 412, 442);
	  COL_TRI(411, 415, 412);
	  COL_TRI(411, 442, 1150);
	  COL_TRI(413, 414, 1151);
	  COL_TRI(413, 1152, 414);
	  COL_TRI(414, 420, 1151);
	  COL_TRI(415, 1153, 1154);
	  COL_TRI(415, 1154, 1155);
	  COL_TRI(415, 1155, 1156);
	  COL_TRI(415, 1156, 412);
	  COL_TRI(420, 423, 421);
	  COL_TRI(416, 412, 1156);
	  COL_TRI(416, 1156, 417);
	  COL_TRI(417, 1156, 1155);
	  COL_TRI(417, 1155, 418);
	  COL_TRI(418, 1155, 1154);
	  COL_TRI(418, 1154, 419);
	  COL_TRI(419, 1154, 1153);
	  COL_TRI(419, 1153, 1157);
	  COL_TRI(420, 414, 422);
	  COL_TRI(420, 422, 423);
	  COL_TRI(422, 1159, 423);
	  COL_TRI(423, 1159, 1160);
	  COL_TRI(423, 1160, 421);
	  COL_TRI(421, 1158, 420);
	  COL_TRI(421, 1160, 1161);
	  COL_TRI(421, 1161, 1158);
	  COL_TRI(422, 1162, 1159);
	  COL_TRI(414, 1162, 422);
	  COL_TRI(414, 1152, 1162);
	  COL_TRI(424, 1161, 1160);
	  COL_TRI(424, 1160, 1159);
	  COL_TRI(424, 1159, 1162);
	  COL_TRI(424, 1162, 1152);
	  COL_TRI(425, 416, 417);
	  COL_TRI(426, 1165, 1166);
	  COL_TRI(425, 417, 418);
	  COL_TRI(425, 418, 419);
	  COL_TRI(419, 1157, 425);
	  COL_TRI(117, 1163, 448);
	  COL_TRI(117, 448, 121);
	  COL_TRI(426, 1164, 1165);
	  COL_TRI(427, 1167, 429);
	  COL_TRI(427, 429, 1168);
	  COL_TRI(428, 427, 1168);
	  COL_TRI(429, 430, 1169);
	  COL_TRI(429, 1167, 430);
	  COL_TRI(428, 1168, 465);
	  COL_TRI(430, 428, 465);
	  COL_TRI(430, 465, 1169);
	  COL_TRI(431, 433, 434);
	  COL_TRI(432, 433, 431);
	  COL_TRI(433, 432, 1170);
	  COL_TRI(433, 1170, 434);
	  COL_TRI(434, 1170, 435);
	  COL_TRI(435, 1170, 432);
	  COL_TRI(431, 434, 436);
	  COL_TRI(434, 435, 436);
	  COL_TRI(435, 432, 1171);
	  COL_TRI(432, 431, 1171);
	  COL_TRI(436, 435, 1172);
	  COL_TRI(436, 1172, 437);
	  COL_TRI(437, 431, 436);
	  COL_TRI(438, 1172, 435);
	  COL_TRI(442, 441, 1150);
	  COL_TRI(437, 439, 431);
	  COL_TRI(438, 435, 1171);
	  COL_TRI(439, 438, 1171);
	  COL_TRI(439, 1171, 431);
	  COL_TRI(440, 413, 471);
	  COL_TRI(413, 1151, 471);
	  COL_TRI(441, 440, 471);
	  COL_TRI(441, 471, 1150);
	  COL_TRI(447, 121, 1176);
	  COL_TRI(443, 1173, 444);
	  COL_TRI(444, 1173, 429);
	  COL_TRI(444, 429, 1169);
	  COL_TRI(443, 1174, 1173);
	  COL_TRI(445, 1174, 443);
	  COL_TRI(445, 1175, 1174);
	  COL_TRI(446, 447, 1176);
	  COL_TRI(446, 1176, 451);
	  COL_TRI(447, 404, 121);
	  COL_TRI(448, 14, 121);
	  COL_TRI(449, 450, 1177);
	  COL_TRI(450, 117, 1142);
	  COL_TRI(450, 1142, 1177);
	  COL_TRI(449, 1177, 1178);
	  COL_TRI(451, 449, 1178);
	  COL_TRI(451, 1178, 446);
	  COL_TRI(442, 455, 1179);
	  COL_TRI(442, 1179, 441);
	  COL_TRI(452, 455, 442);
	  COL_TRI(441, 1179, 1180);
	  COL_TRI(453, 1180, 1179);
	  COL_TRI(453, 1179, 455);
	  COL_TRI(441, 1180, 440);
	  COL_TRI(452, 1145, 455);
	  COL_TRI(454, 453, 455);
	  COL_TRI(455, 458, 454);
	  COL_TRI(455, 1145, 457);
	  COL_TRI(455, 457, 458);
	  COL_TRI(440, 1180, 453);
	  COL_TRI(440, 453, 413);
	  COL_TRI(458, 459, 460);
	  COL_TRI(413, 453, 409);
	  COL_TRI(454, 456, 453);
	  COL_TRI(456, 409, 453);
	  COL_TRI(413, 409, 1181);
	  COL_TRI(457, 456, 1182);
	  COL_TRI(457, 1182, 459);
	  COL_TRI(458, 457, 459);
	  COL_TRI(459, 1182, 1183);
	  COL_TRI(459, 1183, 1184);
	  COL_TRI(460, 459, 1184);
	  COL_TRI(454, 460, 462);
	  COL_TRI(461, 1182, 462);
	  COL_TRI(462, 456, 454);
	  COL_TRI(462, 1182, 456);
	  COL_TRI(461, 1183, 1182);
	  COL_TRI(460, 1184, 927);
	  COL_TRI(454, 458, 460);
	  COL_TRI(463, 1189, 464);
	  COL_TRI(462, 460, 927);
	  COL_TRI(462, 927, 461);
	  COL_TRI(17, 1186, 19);
	  COL_TRI(19, 1186, 466);
	  COL_TRI(19, 466, 21);
	  COL_TRI(17, 1187, 1186);
	  COL_TRI(15, 1187, 17);
	  COL_TRI(15, 1188, 1187);
	  COL_TRI(448, 10, 9);
	  COL_TRI(464, 1189, 1148);
	  COL_TRI(464, 1148, 1147);
	  COL_TRI(463, 1190, 1189);
	  COL_TRI(465, 1190, 463);
	  COL_TRI(465, 1168, 1190);
	  COL_TRI(10, 448, 1188);
	  COL_TRI(10, 1188, 15);
	  COL_TRI(448, 9, 14);
	  COL_TRI(469, 1194, 470);
	  COL_TRI(466, 1163, 43);
	  COL_TRI(466, 43, 21);
	  COL_TRI(410, 1191, 1192);
	  COL_TRI(410, 1192, 467);
	  COL_TRI(467, 1192, 1193);
	  COL_TRI(467, 1193, 468);
	  COL_TRI(468, 1193, 411);
	  COL_TRI(468, 411, 1150);
	  COL_TRI(470, 1194, 1195);
	  COL_TRI(470, 1195, 478);
	  COL_TRI(469, 1196, 1194);
	  COL_TRI(471, 1196, 469);
	  COL_TRI(471, 1151, 1196);
	  COL_TRI(472, 1197, 473);
	  COL_TRI(473, 1197, 1198);
	  COL_TRI(473, 1198, 1199);
	  COL_TRI(407, 1144, 1204);
	  COL_TRI(472, 1200, 1197);
	  COL_TRI(474, 1200, 472);
	  COL_TRI(474, 1201, 1200);
	  COL_TRI(474, 1202, 1201);
	  COL_TRI(475, 1202, 474);
	  COL_TRI(476, 1203, 1202);
	  COL_TRI(476, 1202, 475);
	  COL_TRI(477, 1203, 476);
	  COL_TRI(477, 1204, 1203);
	  COL_TRI(407, 1204, 477);
	  COL_TRI(478, 1175, 445);
	  COL_TRI(478, 1205, 1175);
	  COL_TRI(23, 44, 1163);
	  COL_TRI(44, 43, 1163);
	  COL_TRI(117, 23, 1163);
	  COL_TRI(479, 100, 99);
	  COL_TRI(100, 91, 88);
	  COL_TRI(100, 88, 95);
	  COL_TRI(96, 95, 481);
	  COL_TRI(480, 96, 481);
	  COL_TRI(481, 1206, 480);
	  COL_TRI(481, 538, 1206);
	  COL_TRI(480, 1206, 543);
	  COL_TRI(480, 99, 96);
	  COL_TRI(480, 483, 99);
	  COL_TRI(480, 482, 483);
	  COL_TRI(480, 492, 482);
	  COL_TRI(480, 543, 492);
	  COL_TRI(482, 1207, 483);
	  COL_TRI(482, 544, 1207);
	  COL_TRI(486, 1212, 487);
	  COL_TRI(483, 1207, 1208);
	  COL_TRI(483, 479, 99);
	  COL_TRI(483, 1208, 479);
	  COL_TRI(484, 1209, 485);
	  COL_TRI(484, 1210, 1209);
	  COL_TRI(485, 1209, 1211);
	  COL_TRI(485, 1211, 486);
	  COL_TRI(486, 1211, 1212);
	  COL_TRI(492, 494, 491);
	  COL_TRI(487, 1212, 1213);
	  COL_TRI(487, 1213, 488);
	  COL_TRI(488, 1213, 1214);
	  COL_TRI(488, 1214, 489);
	  COL_TRI(489, 1214, 1215);
	  COL_TRI(489, 1215, 1216);
	  COL_TRI(490, 491, 495);
	  COL_TRI(490, 1217, 491);
	  COL_TRI(491, 1218, 495);
	  COL_TRI(491, 494, 1218);
	  COL_TRI(492, 491, 498);
	  COL_TRI(493, 1218, 494);
	  COL_TRI(494, 543, 493);
	  COL_TRI(493, 1219, 1218);
	  COL_TRI(495, 1218, 1219);
	  COL_TRI(490, 495, 497);
	  COL_TRI(495, 1219, 497);
	  COL_TRI(493, 1220, 1219);
	  COL_TRI(496, 1219, 1220);
	  COL_TRI(497, 1219, 496);
	  COL_TRI(490, 497, 496);
	  COL_TRI(496, 493, 490);
	  COL_TRI(496, 1220, 493);
	  COL_TRI(498, 1221, 501);
	  COL_TRI(498, 1222, 1221);
	  COL_TRI(499, 500, 504);
	  COL_TRI(499, 544, 500);
	  COL_TRI(500, 1223, 504);
	  COL_TRI(500, 503, 1223);
	  COL_TRI(501, 500, 482);
	  COL_TRI(501, 503, 500);
	  COL_TRI(502, 1223, 503);
	  COL_TRI(503, 1224, 502);
	  COL_TRI(502, 1225, 1223);
	  COL_TRI(504, 1223, 1225);
	  COL_TRI(499, 504, 506);
	  COL_TRI(504, 1225, 506);
	  COL_TRI(502, 1226, 1225);
	  COL_TRI(505, 1225, 1226);
	  COL_TRI(506, 1225, 505);
	  COL_TRI(499, 506, 505);
	  COL_TRI(505, 1226, 502);
	  COL_TRI(505, 502, 499);
	  COL_TRI(507, 1227, 536);
	  COL_TRI(507, 1228, 1227);
	  COL_TRI(508, 1228, 507);
	  COL_TRI(508, 1229, 1228);
	  COL_TRI(509, 1230, 1229);
	  COL_TRI(509, 1229, 508);
	  COL_TRI(510, 527, 530);
	  COL_TRI(510, 1231, 527);
	  COL_TRI(511, 1231, 510);
	  COL_TRI(511, 1232, 1231);
	  COL_TRI(512, 1232, 511);
	  COL_TRI(512, 1233, 1232);
	  COL_TRI(513, 1234, 1235);
	  COL_TRI(513, 1235, 514);
	  COL_TRI(514, 1235, 1236);
	  COL_TRI(514, 1236, 515);
	  COL_TRI(515, 1236, 517);
	  COL_TRI(515, 517, 535);
	  COL_TRI(516, 517, 1230);
	  COL_TRI(516, 1237, 517);
	  COL_TRI(517, 521, 535);
	  COL_TRI(517, 1237, 521);
	  COL_TRI(518, 1238, 534);
	  COL_TRI(518, 1239, 1238);
	  COL_TRI(519, 1239, 518);
	  COL_TRI(519, 1240, 1239);
	  COL_TRI(520, 1240, 519);
	  COL_TRI(520, 1241, 1240);
	  COL_TRI(521, 509, 535);
	  COL_TRI(521, 522, 509);
	  COL_TRI(526, 532, 531);
	  COL_TRI(522, 516, 1230);
	  COL_TRI(522, 1230, 509);
	  COL_TRI(523, 525, 526);
	  COL_TRI(523, 524, 525);
	  COL_TRI(524, 1242, 525);
	  COL_TRI(524, 1243, 1242);
	  COL_TRI(525, 957, 532);
	  COL_TRI(525, 1242, 957);
	  COL_TRI(526, 525, 532);
	  COL_TRI(527, 526, 531);
	  COL_TRI(531, 532, 529);
	  COL_TRI(528, 524, 523);
	  COL_TRI(528, 529, 524);
	  COL_TRI(529, 1243, 524);
	  COL_TRI(529, 956, 1243);
	  COL_TRI(528, 523, 1241);
	  COL_TRI(530, 527, 531);
	  COL_TRI(530, 531, 528);
	  COL_TRI(531, 529, 528);
	  COL_TRI(532, 956, 529);
	  COL_TRI(532, 957, 956);
	  COL_TRI(520, 528, 1241);
	  COL_TRI(530, 528, 520);
	  COL_TRI(520, 1245, 530);
	  COL_TRI(530, 1244, 512);
	  COL_TRI(530, 1245, 1244);
	  COL_TRI(520, 1246, 1245);
	  COL_TRI(509, 1249, 535);
	  COL_TRI(512, 1244, 1247);
	  COL_TRI(512, 1247, 536);
	  COL_TRI(533, 1246, 520);
	  COL_TRI(534, 533, 520);
	  COL_TRI(513, 533, 534);
	  COL_TRI(513, 1248, 533);
	  COL_TRI(535, 1248, 513);
	  COL_TRI(535, 1249, 1248);
	  COL_TRI(513, 534, 1238);
	  COL_TRI(509, 1250, 1249);
	  COL_TRI(536, 1250, 509);
	  COL_TRI(536, 1247, 1250);
	  COL_TRI(512, 1227, 1233);
	  COL_TRI(512, 536, 1227);
	  COL_TRI(513, 1238, 1234);
	  COL_TRI(540, 543, 1206);
	  COL_TRI(484, 1221, 1222);
	  COL_TRI(484, 1222, 1210);
	  COL_TRI(537, 1251, 1252);
	  COL_TRI(537, 1253, 1251);
	  COL_TRI(538, 539, 1206);
	  COL_TRI(539, 540, 1206);
	  COL_TRI(544, 546, 541);
	  COL_TRI(541, 542, 1207);
	  COL_TRI(541, 1207, 544);
	  COL_TRI(542, 1208, 1207);
	  COL_TRI(540, 1254, 545);
	  COL_TRI(543, 540, 545);
	  COL_TRI(544, 543, 545);
	  COL_TRI(544, 545, 546);
	  COL_TRI(545, 1255, 546);
	  COL_TRI(545, 1254, 1255);
	  COL_TRI(546, 1255, 541);
	  COL_TRI(548, 551, 550);
	  COL_TRI(547, 1256, 1257);
	  COL_TRI(547, 1257, 1258);
	  COL_TRI(548, 550, 549);
	  COL_TRI(549, 550, 1259);
	  COL_TRI(549, 1259, 1260);
	  COL_TRI(548, 549, 1261);
	  COL_TRI(550, 551, 1259);
	  COL_TRI(551, 552, 1259);
	  COL_TRI(552, 553, 1259);
	  COL_TRI(553, 1260, 1259);
	  COL_TRI(553, 1262, 1260);
	  COL_TRI(553, 554, 555);
	  COL_TRI(554, 1264, 555);
	  COL_TRI(555, 1265, 557);
	  COL_TRI(555, 1264, 1265);
	  COL_TRI(556, 555, 557);
	  COL_TRI(556, 579, 555);
	  COL_TRI(555, 579, 553);
	  COL_TRI(552, 554, 553);
	  COL_TRI(553, 579, 1262);
	  COL_TRI(548, 1263, 551);
	  COL_TRI(551, 554, 552);
	  COL_TRI(551, 1264, 554);
	  COL_TRI(551, 1265, 1264);
	  COL_TRI(551, 1263, 1265);
	  COL_TRI(557, 1263, 548);
	  COL_TRI(557, 1265, 1263);
	  COL_TRI(556, 557, 548);
	  COL_TRI(561, 1261, 549);
	  COL_TRI(548, 1261, 556);
	  COL_TRI(558, 574, 1266);
	  COL_TRI(558, 573, 574);
	  COL_TRI(558, 560, 573);
	  COL_TRI(558, 972, 560);
	  COL_TRI(559, 574, 1267);
	  COL_TRI(559, 1266, 574);
	  COL_TRI(560, 972, 559);
	  COL_TRI(560, 559, 1267);
	  COL_TRI(549, 582, 561);
	  COL_TRI(561, 562, 1261);
	  COL_TRI(562, 556, 1261);
	  COL_TRI(549, 1260, 582);
	  COL_TRI(562, 1268, 556);
	  COL_TRI(562, 590, 1268);
	  COL_TRI(562, 578, 590);
	  COL_TRI(562, 1269, 578);
	  COL_TRI(562, 1270, 1269);
	  COL_TRI(569, 1273, 571);
	  COL_TRI(563, 564, 575);
	  COL_TRI(564, 1271, 575);
	  COL_TRI(565, 1271, 1272);
	  COL_TRI(565, 575, 1271);
	  COL_TRI(566, 1272, 1273);
	  COL_TRI(566, 1273, 580);
	  COL_TRI(566, 567, 1272);
	  COL_TRI(567, 565, 1272);
	  COL_TRI(568, 580, 1273);
	  COL_TRI(569, 568, 1273);
	  COL_TRI(574, 573, 576);
	  COL_TRI(568, 589, 580);
	  COL_TRI(570, 571, 579);
	  COL_TRI(571, 1262, 579);
	  COL_TRI(570, 569, 571);
	  COL_TRI(572, 570, 1268);
	  COL_TRI(572, 591, 570);
	  COL_TRI(570, 591, 569);
	  COL_TRI(573, 594, 576);
	  COL_TRI(575, 594, 1269);
	  COL_TRI(575, 576, 594);
	  COL_TRI(576, 1275, 577);
	  COL_TRI(576, 1274, 1275);
	  COL_TRI(565, 576, 575);
	  COL_TRI(565, 1274, 576);
	  COL_TRI(574, 576, 577);
	  COL_TRI(567, 1275, 1274);
	  COL_TRI(567, 1274, 565);
	  COL_TRI(566, 1275, 567);
	  COL_TRI(566, 577, 1275);
	  COL_TRI(577, 1281, 560);
	  COL_TRI(578, 577, 566);
	  COL_TRI(578, 1281, 577);
	  COL_TRI(577, 1267, 574);
	  COL_TRI(577, 560, 1267);
	  COL_TRI(581, 1270, 562);
	  COL_TRI(575, 1270, 563);
	  COL_TRI(575, 1269, 1270);
	  COL_TRI(579, 556, 1268);
	  COL_TRI(579, 1268, 570);
	  COL_TRI(580, 578, 566);
	  COL_TRI(580, 590, 578);
	  COL_TRI(562, 585, 581);
	  COL_TRI(562, 584, 585);
	  COL_TRI(562, 561, 584);
	  COL_TRI(582, 583, 561);
	  COL_TRI(583, 584, 561);
	  COL_TRI(584, 1283, 585);
	  COL_TRI(584, 1284, 1283);
	  COL_TRI(583, 1284, 584);
	  COL_TRI(585, 1283, 1282);
	  COL_TRI(585, 1282, 581);
	  COL_TRI(581, 587, 586);
	  COL_TRI(581, 1282, 587);
	  COL_TRI(581, 563, 1270);
	  COL_TRI(581, 586, 563);
	  COL_TRI(587, 1283, 1284);
	  COL_TRI(587, 1282, 1283);
	  COL_TRI(586, 1285, 588);
	  COL_TRI(586, 587, 1285);
	  COL_TRI(563, 586, 588);
	  COL_TRI(587, 1286, 1285);
	  COL_TRI(587, 1284, 1286);
	  COL_TRI(583, 1286, 1284);
	  COL_TRI(588, 1286, 583);
	  COL_TRI(588, 1285, 1286);
	  COL_TRI(582, 588, 583);
	  COL_TRI(582, 564, 588);
	  COL_TRI(564, 563, 588);
	  COL_TRI(568, 1276, 589);
	  COL_TRI(568, 1277, 1276);
	  COL_TRI(569, 1277, 568);
	  COL_TRI(589, 1279, 593);
	  COL_TRI(589, 1276, 1279);
	  COL_TRI(590, 589, 593);
	  COL_TRI(590, 580, 589);
	  COL_TRI(572, 1280, 591);
	  COL_TRI(591, 1278, 569);
	  COL_TRI(591, 1280, 1278);
	  COL_TRI(569, 1278, 1277);
	  COL_TRI(572, 592, 1280);
	  COL_TRI(592, 1278, 1280);
	  COL_TRI(592, 1277, 1278);
	  COL_TRI(592, 1276, 1277);
	  COL_TRI(592, 1279, 1276);
	  COL_TRI(593, 1279, 592);
	  COL_TRI(593, 592, 572);
	  COL_TRI(590, 593, 572);
	  COL_TRI(597, 895, 598);
	  COL_TRI(572, 1268, 590);
	  COL_TRI(594, 595, 1287);
	  COL_TRI(594, 1281, 595);
	  COL_TRI(595, 1269, 1287);
	  COL_TRI(595, 578, 1269);
	  COL_TRI(596, 597, 1288);
	  COL_TRI(597, 1289, 1288);
	  COL_TRI(597, 598, 1289);
	  COL_TRI(598, 896, 600);
	  COL_TRI(598, 895, 896);
	  COL_TRI(596, 1288, 1290);
	  COL_TRI(599, 600, 596);
	  COL_TRI(599, 596, 1290);
	  COL_TRI(600, 601, 596);
	  COL_TRI(600, 896, 601);
	  COL_TRI(597, 897, 895);
	  COL_TRI(601, 897, 597);
	  COL_TRI(601, 597, 596);
	  COL_TRI(602, 660, 656);
	  COL_TRI(602, 603, 660);
	  COL_TRI(78, 621, 603);
	  COL_TRI(78, 603, 79);
	  COL_TRI(603, 80, 79);
	  COL_TRI(603, 602, 80);
	  COL_TRI(80, 602, 604);
	  COL_TRI(80, 604, 77);
	  COL_TRI(604, 78, 77);
	  COL_TRI(604, 621, 78);
	  COL_TRI(605, 1291, 606);
	  COL_TRI(606, 1291, 1292);
	  COL_TRI(607, 1293, 1291);
	  COL_TRI(607, 1291, 605);
	  COL_TRI(608, 1294, 607);
	  COL_TRI(607, 1294, 1293);
	  COL_TRI(609, 1295, 1294);
	  COL_TRI(609, 1294, 608);
	  COL_TRI(615, 1300, 614);
	  COL_TRI(610, 1295, 609);
	  COL_TRI(610, 1296, 1295);
	  COL_TRI(611, 1296, 610);
	  COL_TRI(611, 1297, 1296);
	  COL_TRI(612, 1297, 611);
	  COL_TRI(612, 1298, 1297);
	  COL_TRI(612, 1299, 1298);
	  COL_TRI(613, 1299, 612);
	  COL_TRI(614, 1300, 1299);
	  COL_TRI(614, 1299, 613);
	  COL_TRI(620, 1306, 1305);
	  COL_TRI(615, 1301, 1300);
	  COL_TRI(616, 1302, 615);
	  COL_TRI(615, 1302, 1301);
	  COL_TRI(617, 1303, 1302);
	  COL_TRI(617, 1302, 616);
	  COL_TRI(617, 1304, 1303);
	  COL_TRI(618, 1304, 617);
	  COL_TRI(619, 1305, 1304);
	  COL_TRI(619, 1304, 618);
	  COL_TRI(620, 1305, 619);
	  COL_TRI(625, 628, 626);
	  COL_TRI(621, 1306, 620);
	  COL_TRI(621, 604, 1306);
	  COL_TRI(622, 1307, 1289);
	  COL_TRI(623, 622, 1289);
	  COL_TRI(599, 624, 1308);
	  COL_TRI(624, 625, 1308);
	  COL_TRI(628, 1312, 630);
	  COL_TRI(626, 628, 630);
	  COL_TRI(626, 630, 627);
	  COL_TRI(627, 630, 1309);
	  COL_TRI(627, 1309, 1310);
	  COL_TRI(625, 629, 628);
	  COL_TRI(628, 1311, 1312);
	  COL_TRI(632, 1312, 631);
	  COL_TRI(629, 1311, 628);
	  COL_TRI(629, 1313, 1311);
	  COL_TRI(630, 1314, 1309);
	  COL_TRI(630, 1312, 1314);
	  COL_TRI(631, 1312, 1311);
	  COL_TRI(631, 1311, 633);
	  COL_TRI(635, 640, 642);
	  COL_TRI(632, 1314, 1312);
	  COL_TRI(633, 1313, 622);
	  COL_TRI(633, 1311, 1313);
	  COL_TRI(634, 640, 635);
	  COL_TRI(634, 637, 640);
	  COL_TRI(635, 642, 641);
	  COL_TRI(639, 1317, 638);
	  COL_TRI(636, 1315, 654);
	  COL_TRI(636, 654, 1316);
	  COL_TRI(637, 654, 1315);
	  COL_TRI(637, 1315, 640);
	  COL_TRI(638, 1317, 1315);
	  COL_TRI(638, 1315, 636);
	  COL_TRI(639, 1318, 1317);
	  COL_TRI(640, 1317, 642);
	  COL_TRI(640, 1315, 1317);
	  COL_TRI(641, 642, 655);
	  COL_TRI(641, 655, 1319);
	  COL_TRI(642, 1317, 1318);
	  COL_TRI(642, 1318, 655);
	  COL_TRI(643, 646, 650);
	  COL_TRI(643, 650, 644);
	  COL_TRI(644, 653, 651);
	  COL_TRI(644, 650, 653);
	  COL_TRI(645, 1320, 647);
	  COL_TRI(645, 647, 1321);
	  COL_TRI(646, 647, 650);
	  COL_TRI(647, 1320, 650);
	  COL_TRI(651, 1322, 1323);
	  COL_TRI(648, 652, 1320);
	  COL_TRI(648, 1320, 645);
	  COL_TRI(649, 652, 648);
	  COL_TRI(650, 652, 653);
	  COL_TRI(650, 1320, 652);
	  COL_TRI(651, 653, 1322);
	  COL_TRI(654, 1288, 1307);
	  COL_TRI(652, 1324, 1322);
	  COL_TRI(653, 652, 1322);
	  COL_TRI(649, 1324, 652);
	  COL_TRI(624, 637, 634);
	  COL_TRI(624, 1290, 637);
	  COL_TRI(654, 1307, 1316);
	  COL_TRI(657, 658, 1318);
	  COL_TRI(655, 660, 1319);
	  COL_TRI(655, 658, 660);
	  COL_TRI(656, 657, 1318);
	  COL_TRI(656, 1318, 639);
	  COL_TRI(654, 1290, 1288);
	  COL_TRI(654, 637, 1290);
	  COL_TRI(661, 662, 663);
	  COL_TRI(658, 655, 1318);
	  COL_TRI(657, 656, 1325);
	  COL_TRI(657, 1325, 1326);
	  COL_TRI(657, 1326, 659);
	  COL_TRI(659, 658, 657);
	  COL_TRI(660, 1325, 656);
	  COL_TRI(660, 1327, 1325);
	  COL_TRI(659, 1327, 660);
	  COL_TRI(659, 660, 658);
	  COL_TRI(661, 663, 1289);
	  COL_TRI(665, 1330, 1331);
	  COL_TRI(662, 1328, 599);
	  COL_TRI(661, 1328, 662);
	  COL_TRI(663, 662, 606);
	  COL_TRI(662, 599, 606);
	  COL_TRI(663, 1292, 1289);
	  COL_TRI(663, 606, 1292);
	  COL_TRI(664, 602, 603);
	  COL_TRI(664, 1329, 602);
	  COL_TRI(665, 1332, 1330);
	  COL_TRI(666, 1333, 1334);
	  COL_TRI(666, 1334, 668);
	  COL_TRI(666, 667, 1333);
	  COL_TRI(667, 713, 1333);
	  COL_TRI(668, 1335, 671);
	  COL_TRI(668, 1334, 1335);
	  COL_TRI(669, 753, 1336);
	  COL_TRI(672, 815, 1340);
	  COL_TRI(670, 1336, 682);
	  COL_TRI(669, 1336, 670);
	  COL_TRI(670, 682, 1339);
	  COL_TRI(671, 1335, 715);
	  COL_TRI(671, 715, 722);
	  COL_TRI(672, 746, 815);
	  COL_TRI(673, 1341, 674);
	  COL_TRI(674, 672, 675);
	  COL_TRI(674, 1341, 672);
	  COL_TRI(675, 672, 1340);
	  COL_TRI(675, 1340, 678);
	  COL_TRI(673, 712, 1341);
	  COL_TRI(676, 712, 673);
	  COL_TRI(676, 1342, 712);
	  COL_TRI(677, 1342, 676);
	  COL_TRI(677, 711, 1342);
	  COL_TRI(678, 711, 677);
	  COL_TRI(678, 1340, 711);
	  COL_TRI(679, 683, 680);
	  COL_TRI(680, 683, 684);
	  COL_TRI(680, 684, 1343);
	  COL_TRI(679, 688, 683);
	  COL_TRI(681, 688, 679);
	  COL_TRI(681, 690, 688);
	  COL_TRI(682, 692, 690);
	  COL_TRI(682, 690, 1339);
	  COL_TRI(683, 1344, 684);
	  COL_TRI(684, 687, 685);
	  COL_TRI(684, 1344, 687);
	  COL_TRI(685, 687, 691);
	  COL_TRI(686, 687, 1345);
	  COL_TRI(687, 1344, 1345);
	  COL_TRI(686, 1346, 687);
	  COL_TRI(685, 691, 692);
	  COL_TRI(683, 1345, 1344);
	  COL_TRI(688, 1345, 683);
	  COL_TRI(688, 1347, 1345);
	  COL_TRI(689, 686, 1345);
	  COL_TRI(689, 1345, 1347);
	  COL_TRI(691, 689, 1347);
	  COL_TRI(690, 1347, 688);
	  COL_TRI(690, 1348, 1347);
	  COL_TRI(691, 1347, 1348);
	  COL_TRI(692, 691, 690);
	  COL_TRI(691, 1348, 690);
	  COL_TRI(691, 1349, 689);
	  COL_TRI(693, 1349, 1346);
	  COL_TRI(693, 1350, 1349);
	  COL_TRI(689, 1350, 1351);
	  COL_TRI(689, 1349, 1350);
	  COL_TRI(697, 695, 984);
	  COL_TRI(694, 693, 1346);
	  COL_TRI(694, 1346, 686);
	  COL_TRI(686, 689, 1351);
	  COL_TRI(686, 1351, 694);
	  COL_TRI(695, 696, 984);
	  COL_TRI(696, 985, 984);
	  COL_TRI(700, 699, 1352);
	  COL_TRI(698, 695, 725);
	  COL_TRI(698, 696, 695);
	  COL_TRI(695, 697, 667);
	  COL_TRI(695, 667, 725);
	  COL_TRI(697, 984, 700);
	  COL_TRI(699, 985, 696);
	  COL_TRI(699, 696, 1352);
	  COL_TRI(700, 1352, 697);
	  COL_TRI(704, 1354, 1353);
	  COL_TRI(697, 1352, 713);
	  COL_TRI(697, 713, 667);
	  COL_TRI(701, 704, 988);
	  COL_TRI(701, 988, 706);
	  COL_TRI(702, 701, 705);
	  COL_TRI(702, 703, 701);
	  COL_TRI(703, 704, 701);
	  COL_TRI(704, 1353, 988);
	  COL_TRI(705, 1354, 836);
	  COL_TRI(706, 705, 701);
	  COL_TRI(706, 708, 705);
	  COL_TRI(707, 705, 836);
	  COL_TRI(707, 702, 705);
	  COL_TRI(708, 1353, 1354);
	  COL_TRI(708, 1354, 705);
	  COL_TRI(709, 1355, 698);
	  COL_TRI(714, 713, 1356);
	  COL_TRI(711, 1338, 1342);
	  COL_TRI(712, 1337, 1341);
	  COL_TRI(667, 1337, 1338);
	  COL_TRI(667, 702, 1337);
	  COL_TRI(667, 1338, 725);
	  COL_TRI(713, 835, 1356);
	  COL_TRI(716, 684, 1357);
	  COL_TRI(684, 685, 1357);
	  COL_TRI(717, 718, 1358);
	  COL_TRI(717, 1359, 718);
	  COL_TRI(718, 702, 1358);
	  COL_TRI(718, 703, 702);
	  COL_TRI(702, 707, 1337);
	  COL_TRI(719, 703, 1360);
	  COL_TRI(720, 1359, 717);
	  COL_TRI(716, 1357, 1361);
	  COL_TRI(716, 1361, 721);
	  COL_TRI(721, 1361, 1362);
	  COL_TRI(721, 1362, 723);
	  COL_TRI(722, 679, 680);
	  COL_TRI(722, 680, 724);
	  COL_TRI(679, 722, 669);
	  COL_TRI(723, 724, 680);
	  COL_TRI(724, 1363, 720);
	  COL_TRI(720, 1363, 1359);
	  COL_TRI(715, 713, 714);
	  COL_TRI(725, 1338, 726);
	  COL_TRI(725, 726, 1364);
	  COL_TRI(726, 815, 1365);
	  COL_TRI(726, 1340, 815);
	  COL_TRI(726, 752, 1366);
	  COL_TRI(726, 1365, 752);
	  COL_TRI(727, 672, 729);
	  COL_TRI(728, 727, 729);
	  COL_TRI(729, 1337, 707);
	  COL_TRI(730, 729, 707);
	  COL_TRI(710, 709, 698);
	  COL_TRI(714, 710, 1367);
	  COL_TRI(731, 714, 1367);
	  COL_TRI(710, 1356, 709);
	  COL_TRI(710, 714, 1356);
	  COL_TRI(731, 1367, 1368);
	  COL_TRI(732, 731, 1368);
	  COL_TRI(733, 1368, 1369);
	  COL_TRI(733, 732, 1368);
	  COL_TRI(734, 733, 1369);
	  COL_TRI(738, 737, 736);
	  COL_TRI(734, 1369, 735);
	  COL_TRI(735, 752, 734);
	  COL_TRI(735, 1366, 752);
	  COL_TRI(724, 1360, 1363);
	  COL_TRI(736, 1360, 1362);
	  COL_TRI(736, 719, 1360);
	  COL_TRI(737, 1370, 719);
	  COL_TRI(737, 719, 736);
	  COL_TRI(743, 742, 741);
	  COL_TRI(739, 719, 1370);
	  COL_TRI(739, 703, 719);
	  COL_TRI(740, 746, 736);
	  COL_TRI(740, 736, 1362);
	  COL_TRI(738, 736, 1371);
	  COL_TRI(741, 1371, 736);
	  COL_TRI(742, 738, 1371);
	  COL_TRI(742, 1371, 741);
	  COL_TRI(748, 673, 674);
	  COL_TRI(743, 741, 745);
	  COL_TRI(744, 745, 741);
	  COL_TRI(745, 728, 743);
	  COL_TRI(745, 744, 728);
	  COL_TRI(728, 744, 727);
	  COL_TRI(746, 727, 744);
	  COL_TRI(727, 746, 672);
	  COL_TRI(747, 748, 675);
	  COL_TRI(748, 676, 673);
	  COL_TRI(748, 674, 675);
	  COL_TRI(748, 1375, 834);
	  COL_TRI(749, 1374, 678);
	  COL_TRI(749, 678, 677);
	  COL_TRI(749, 677, 676);
	  COL_TRI(748, 749, 676);
	  COL_TRI(750, 1375, 747);
	  COL_TRI(750, 747, 1374);
	  COL_TRI(751, 750, 1374);
	  COL_TRI(751, 1374, 749);
	  COL_TRI(748, 747, 1375);
	  COL_TRI(749, 834, 751);
	  COL_TRI(749, 748, 834);
	  COL_TRI(733, 734, 752);
	  COL_TRI(752, 1365, 815);
	  COL_TRI(731, 732, 733);
	  COL_TRI(753, 731, 815);
	  COL_TRI(753, 715, 731);
	  COL_TRI(715, 714, 731);
	  COL_TRI(753, 815, 1376);
	  COL_TRI(754, 755, 685);
	  COL_TRI(754, 685, 692);
	  COL_TRI(755, 1377, 1378);
	  COL_TRI(755, 754, 1377);
	  COL_TRI(756, 1378, 1377);
	  COL_TRI(756, 757, 1378);
	  COL_TRI(757, 756, 1379);
	  COL_TRI(757, 1379, 1380);
	  COL_TRI(758, 1380, 1379);
	  COL_TRI(758, 759, 1380);
	  COL_TRI(759, 758, 1381);
	  COL_TRI(759, 1381, 1382);
	  COL_TRI(760, 761, 1382);
	  COL_TRI(760, 1382, 1381);
	  COL_TRI(761, 760, 1383);
	  COL_TRI(761, 1383, 1384);
	  COL_TRI(762, 1384, 1383);
	  COL_TRI(762, 763, 1384);
	  COL_TRI(763, 1385, 1386);
	  COL_TRI(763, 762, 1385);
	  COL_TRI(764, 1386, 1385);
	  COL_TRI(764, 765, 1386);
	  COL_TRI(765, 1387, 1388);
	  COL_TRI(765, 764, 1387);
	  COL_TRI(766, 1388, 1387);
	  COL_TRI(766, 770, 1388);
	  COL_TRI(767, 769, 1389);
	  COL_TRI(767, 1389, 1390);
	  COL_TRI(768, 1390, 1389);
	  COL_TRI(768, 771, 1390);
	  COL_TRI(769, 1391, 1392);
	  COL_TRI(769, 767, 1391);
	  COL_TRI(770, 1392, 1391);
	  COL_TRI(770, 766, 1392);
	  COL_TRI(771, 768, 1393);
	  COL_TRI(771, 1393, 1394);
	  COL_TRI(772, 1394, 1393);
	  COL_TRI(772, 773, 1394);
	  COL_TRI(773, 1395, 1396);
	  COL_TRI(773, 772, 1395);
	  COL_TRI(774, 775, 1396);
	  COL_TRI(774, 1396, 1395);
	  COL_TRI(775, 1397, 1398);
	  COL_TRI(775, 774, 1397);
	  COL_TRI(776, 777, 1398);
	  COL_TRI(776, 1398, 1397);
	  COL_TRI(777, 1399, 1400);
	  COL_TRI(777, 776, 1399);
	  COL_TRI(778, 786, 1400);
	  COL_TRI(778, 1400, 1399);
	  COL_TRI(779, 1401, 1402);
	  COL_TRI(779, 781, 1401);
	  COL_TRI(783, 782, 1405);
	  COL_TRI(780, 1402, 1401);
	  COL_TRI(781, 1403, 1404);
	  COL_TRI(781, 779, 1403);
	  COL_TRI(782, 1404, 1403);
	  COL_TRI(782, 783, 1404);
	  COL_TRI(783, 1405, 1406);
	  COL_TRI(784, 787, 1406);
	  COL_TRI(784, 1406, 1405);
	  COL_TRI(780, 785, 1402);
	  COL_TRI(785, 1407, 1408);
	  COL_TRI(785, 780, 1407);
	  COL_TRI(786, 1408, 1407);
	  COL_TRI(789, 788, 1411);
	  COL_TRI(786, 778, 1408);
	  COL_TRI(787, 784, 1409);
	  COL_TRI(787, 1409, 1410);
	  COL_TRI(788, 789, 1410);
	  COL_TRI(788, 1410, 1409);
	  COL_TRI(789, 1411, 1412);
	  COL_TRI(790, 1412, 1411);
	  COL_TRI(790, 791, 1412);
	  COL_TRI(791, 1413, 1414);
	  COL_TRI(791, 790, 1413);
	  COL_TRI(792, 793, 1414);
	  COL_TRI(792, 1414, 1413);
	  COL_TRI(793, 1415, 1416);
	  COL_TRI(793, 792, 1415);
	  COL_TRI(794, 795, 1416);
	  COL_TRI(794, 1416, 1415);
	  COL_TRI(795, 794, 1417);
	  COL_TRI(795, 1417, 1418);
	  COL_TRI(796, 797, 1418);
	  COL_TRI(796, 1418, 1417);
	  COL_TRI(797, 1419, 1420);
	  COL_TRI(797, 796, 1419);
	  COL_TRI(798, 1420, 1419);
	  COL_TRI(798, 799, 1420);
	  COL_TRI(799, 798, 1421);
	  COL_TRI(799, 1421, 1422);
	  COL_TRI(800, 1422, 1421);
	  COL_TRI(800, 1423, 1422);
	  COL_TRI(801, 803, 1424);
	  COL_TRI(801, 1424, 1425);
	  COL_TRI(805, 1428, 1429);
	  COL_TRI(802, 1425, 1424);
	  COL_TRI(802, 824, 1425);
	  COL_TRI(803, 1426, 1427);
	  COL_TRI(803, 801, 1426);
	  COL_TRI(804, 805, 1427);
	  COL_TRI(804, 1427, 1426);
	  COL_TRI(805, 804, 1428);
	  COL_TRI(806, 1429, 1428);
	  COL_TRI(807, 1430, 1431);
	  COL_TRI(807, 808, 1430);
	  COL_TRI(808, 807, 1432);
	  COL_TRI(808, 1432, 1433);
	  COL_TRI(811, 813, 1434);
	  COL_TRI(809, 1433, 1432);
	  COL_TRI(809, 806, 1433);
	  COL_TRI(806, 809, 1429);
	  COL_TRI(810, 812, 1431);
	  COL_TRI(810, 1431, 1430);
	  COL_TRI(811, 1434, 1435);
	  COL_TRI(812, 1435, 1434);
	  COL_TRI(812, 810, 1435);
	  COL_TRI(813, 811, 1436);
	  COL_TRI(813, 1436, 1437);
	  COL_TRI(814, 1437, 1436);
	  COL_TRI(814, 828, 1437);
	  COL_TRI(815, 746, 740);
	  COL_TRI(815, 740, 1376);
	  COL_TRI(816, 1376, 740);
	  COL_TRI(817, 1423, 1438);
	  COL_TRI(817, 1438, 1439);
	  COL_TRI(817, 1440, 1423);
	  COL_TRI(818, 819, 1440);
	  COL_TRI(818, 1440, 817);
	  COL_TRI(819, 818, 1441);
	  COL_TRI(819, 1441, 1442);
	  COL_TRI(820, 1442, 1441);
	  COL_TRI(820, 821, 1442);
	  COL_TRI(821, 820, 1443);
	  COL_TRI(821, 1443, 1444);
	  COL_TRI(822, 1444, 1443);
	  COL_TRI(822, 823, 1444);
	  COL_TRI(823, 822, 1445);
	  COL_TRI(823, 1445, 1446);
	  COL_TRI(826, 827, 1450);
	  COL_TRI(824, 802, 1447);
	  COL_TRI(824, 1447, 1448);
	  COL_TRI(816, 825, 1376);
	  COL_TRI(825, 816, 1449);
	  COL_TRI(825, 1449, 1450);
	  COL_TRI(826, 1450, 1449);
	  COL_TRI(831, 1453, 833);
	  COL_TRI(827, 826, 1451);
	  COL_TRI(827, 1451, 1452);
	  COL_TRI(828, 814, 1452);
	  COL_TRI(828, 1452, 1451);
	  COL_TRI(829, 833, 1453);
	  COL_TRI(829, 1453, 1454);
	  COL_TRI(830, 829, 1454);
	  COL_TRI(831, 833, 1455);
	  COL_TRI(834, 829, 830);
	  COL_TRI(832, 1454, 1453);
	  COL_TRI(832, 1453, 831);
	  COL_TRI(830, 1454, 832);
	  COL_TRI(832, 1455, 830);
	  COL_TRI(832, 831, 1455);
	  COL_TRI(833, 751, 1455);
	  COL_TRI(833, 750, 751);
	  COL_TRI(751, 834, 830);
	  COL_TRI(751, 830, 1455);
	  COL_TRI(834, 1375, 829);
	  COL_TRI(838, 843, 1456);
	  COL_TRI(835, 1355, 709);
	  COL_TRI(835, 709, 1356);
	  COL_TRI(836, 837, 1370);
	  COL_TRI(836, 1372, 837);
	  COL_TRI(837, 739, 1370);
	  COL_TRI(739, 837, 1372);
	  COL_TRI(739, 1372, 1373);
	  COL_TRI(739, 1373, 703);
	  COL_TRI(838, 1460, 1461);
	  COL_TRI(838, 1456, 1457);
	  COL_TRI(839, 847, 1458);
	  COL_TRI(839, 1458, 1459);
	  COL_TRI(840, 1460, 841);
	  COL_TRI(840, 1461, 1460);
	  COL_TRI(841, 842, 840);
	  COL_TRI(842, 1461, 840);
	  COL_TRI(838, 1462, 1460);
	  COL_TRI(841, 1463, 843);
	  COL_TRI(841, 843, 842);
	  COL_TRI(842, 1464, 1461);
	  COL_TRI(838, 1461, 1464);
	  COL_TRI(843, 838, 1464);
	  COL_TRI(843, 1464, 842);
	  COL_TRI(844, 1465, 845);
	  COL_TRI(845, 1465, 857);
	  COL_TRI(845, 857, 846);
	  COL_TRI(846, 844, 845);
	  COL_TRI(839, 1466, 857);
	  COL_TRI(839, 857, 1465);
	  COL_TRI(850, 848, 851);
	  COL_TRI(846, 1467, 847);
	  COL_TRI(846, 847, 844);
	  COL_TRI(844, 1468, 1465);
	  COL_TRI(839, 1465, 1468);
	  COL_TRI(847, 1468, 844);
	  COL_TRI(847, 839, 1468);
	  COL_TRI(848, 1469, 851);
	  COL_TRI(849, 1470, 848);
	  COL_TRI(848, 1470, 1469);
	  COL_TRI(850, 849, 848);
	  COL_TRI(851, 1469, 1471);
	  COL_TRI(851, 1471, 1472);
	  COL_TRI(850, 851, 1472);
	  COL_TRI(849, 996, 1470);
	  COL_TRI(850, 1473, 849);
	  COL_TRI(852, 853, 854);
	  COL_TRI(853, 1474, 855);
	  COL_TRI(853, 855, 854);
	  COL_TRI(858, 841, 877);
	  COL_TRI(854, 855, 856);
	  COL_TRI(855, 1475, 856);
	  COL_TRI(852, 854, 856);
	  COL_TRI(852, 856, 1476);
	  COL_TRI(856, 1475, 1012);
	  COL_TRI(856, 1012, 1476);
	  COL_TRI(852, 1476, 1477);
	  COL_TRI(857, 84, 841);
	  COL_TRI(841, 1460, 877);
	  COL_TRI(858, 857, 841);
	  COL_TRI(858, 846, 857);
	  COL_TRI(857, 82, 84);
	  COL_TRI(859, 1478, 81);
	  COL_TRI(859, 81, 83);
	  COL_TRI(860, 861, 1479);
	  COL_TRI(861, 26, 1479);
	  COL_TRI(862, 39, 26);
	  COL_TRI(863, 862, 26);
	  COL_TRI(26, 52, 1479);
	  COL_TRI(860, 1479, 864);
	  COL_TRI(860, 864, 48);
	  COL_TRI(864, 49, 48);
	  COL_TRI(865, 48, 47);
	  COL_TRI(865, 1480, 48);
	  COL_TRI(866, 869, 1482);
	  COL_TRI(867, 868, 869);
	  COL_TRI(867, 869, 866);
	  COL_TRI(868, 5, 869);
	  COL_TRI(869, 5, 1482);
	  COL_TRI(868, 3, 5);
	  COL_TRI(5, 1, 1482);
	  COL_TRI(866, 1482, 870);
	  COL_TRI(870, 1482, 871);
	  COL_TRI(871, 1482, 1);
	  COL_TRI(871, 1, 0);
	  COL_TRI(870, 871, 872);
	  COL_TRI(872, 871, 873);
	  COL_TRI(873, 871, 0);
	  COL_TRI(878, 4, 6);
	  COL_TRI(873, 0, 2);
	  COL_TRI(874, 873, 875);
	  COL_TRI(872, 873, 874);
	  COL_TRI(875, 873, 2);
	  COL_TRI(875, 2, 7);
	  COL_TRI(875, 877, 995);
	  COL_TRI(875, 876, 877);
	  COL_TRI(874, 875, 995);
	  COL_TRI(875, 7, 4);
	  COL_TRI(876, 875, 4);
	  COL_TRI(877, 876, 878);
	  COL_TRI(878, 876, 4);
	  COL_TRI(880, 28, 27);
	  COL_TRI(877, 878, 858);
	  COL_TRI(878, 867, 858);
	  COL_TRI(878, 868, 867);
	  COL_TRI(878, 6, 3);
	  COL_TRI(868, 878, 3);
	  COL_TRI(879, 56, 1485);
	  COL_TRI(879, 27, 56);
	  COL_TRI(880, 27, 879);
	  COL_TRI(885, 887, 886);
	  COL_TRI(881, 28, 880);
	  COL_TRI(881, 57, 28);
	  COL_TRI(882, 60, 883);
	  COL_TRI(883, 59, 1486);
	  COL_TRI(883, 60, 59);
	  COL_TRI(882, 58, 60);
	  COL_TRI(884, 58, 882);
	  COL_TRI(884, 29, 58);
	  COL_TRI(886, 887, 888);
	  COL_TRI(888, 889, 890);
	  COL_TRI(887, 889, 888);
	  COL_TRI(889, 899, 890);
	  COL_TRI(889, 919, 899);
	  COL_TRI(888, 893, 1488);
	  COL_TRI(886, 888, 1488);
	  COL_TRI(890, 893, 888);
	  COL_TRI(891, 1489, 890);
	  COL_TRI(891, 890, 899);
	  COL_TRI(891, 894, 897);
	  COL_TRI(892, 1491, 1488);
	  COL_TRI(893, 892, 1488);
	  COL_TRI(892, 1492, 894);
	  COL_TRI(894, 898, 892);
	  COL_TRI(893, 1490, 892);
	  COL_TRI(894, 899, 898);
	  COL_TRI(894, 891, 899);
	  COL_TRI(891, 897, 601);
	  COL_TRI(900, 901, 903);
	  COL_TRI(895, 1489, 896);
	  COL_TRI(896, 1489, 891);
	  COL_TRI(896, 891, 601);
	  COL_TRI(895, 1492, 1489);
	  COL_TRI(897, 894, 895);
	  COL_TRI(894, 1492, 895);
	  COL_TRI(898, 899, 968);
	  COL_TRI(899, 919, 968);
	  COL_TRI(885, 886, 1487);
	  COL_TRI(901, 902, 903);
	  COL_TRI(901, 1493, 902);
	  COL_TRI(902, 1493, 885);
	  COL_TRI(903, 902, 1487);
	  COL_TRI(902, 885, 1487);
	  COL_TRI(903, 1487, 975);
	  COL_TRI(900, 903, 975);
	  COL_TRI(890, 1490, 893);
	  COL_TRI(904, 905, 1496);
	  COL_TRI(905, 906, 1496);
	  COL_TRI(905, 1497, 906);
	  COL_TRI(906, 1497, 974);
	  COL_TRI(906, 974, 1498);
	  COL_TRI(907, 1496, 906);
	  COL_TRI(907, 906, 1498);
	  COL_TRI(907, 904, 1496);
	  COL_TRI(63, 1003, 61);
	  COL_TRI(63, 1000, 1003);
	  COL_TRI(908, 1003, 867);
	  COL_TRI(908, 61, 1003);
	  COL_TRI(127, 1500, 1501);
	  COL_TRI(908, 64, 61);
	  COL_TRI(870, 962, 908);
	  COL_TRI(908, 65, 64);
	  COL_TRI(908, 909, 128);
	  COL_TRI(909, 908, 962);
	  COL_TRI(909, 1500, 128);
	  COL_TRI(910, 912, 913);
	  COL_TRI(911, 912, 1502);
	  COL_TRI(912, 1503, 1502);
	  COL_TRI(912, 910, 1503);
	  COL_TRI(913, 912, 911);
	  COL_TRI(913, 911, 915);
	  COL_TRI(914, 911, 1495);
	  COL_TRI(911, 1502, 1495);
	  COL_TRI(915, 911, 914);
	  COL_TRI(916, 1504, 924);
	  COL_TRI(916, 1505, 1504);
	  COL_TRI(916, 1495, 1502);
	  COL_TRI(922, 1504, 1505);
	  COL_TRI(916, 1506, 1505);
	  COL_TRI(916, 1502, 1506);
	  COL_TRI(917, 1494, 916);
	  COL_TRI(919, 1494, 917);
	  COL_TRI(919, 1495, 1494);
	  COL_TRI(916, 1494, 1495);
	  COL_TRI(919, 914, 1495);
	  COL_TRI(920, 1502, 1503);
	  COL_TRI(920, 1506, 1502);
	  COL_TRI(921, 1505, 1506);
	  COL_TRI(921, 1506, 920);
	  COL_TRI(922, 1505, 921);
	  COL_TRI(923, 924, 922);
	  COL_TRI(924, 1504, 922);
	  COL_TRI(914, 919, 889);
	  COL_TRI(917, 916, 918);
	  COL_TRI(918, 916, 924);
	  COL_TRI(918, 924, 923);
	  COL_TRI(925, 926, 36);
	  COL_TRI(925, 36, 39);
	  COL_TRI(36, 926, 461);
	  COL_TRI(36, 461, 927);
	  COL_TRI(926, 1183, 461);
	  COL_TRI(927, 1185, 37);
	  COL_TRI(36, 927, 37);
	  COL_TRI(927, 1184, 1185);
	  COL_TRI(928, 997, 130);
	  COL_TRI(928, 1508, 997);
	  COL_TRI(929, 1508, 928);
	  COL_TRI(929, 1509, 1508);
	  COL_TRI(930, 1509, 929);
	  COL_TRI(930, 1510, 1509);
	  COL_TRI(931, 1510, 930);
	  COL_TRI(931, 1511, 1510);
	  COL_TRI(932, 1511, 931);
	  COL_TRI(932, 1512, 1511);
	  COL_TRI(933, 1512, 932);
	  COL_TRI(933, 1513, 1512);
	  COL_TRI(934, 1514, 1513);
	  COL_TRI(934, 1513, 933);
	  COL_TRI(935, 1514, 934);
	  COL_TRI(935, 1515, 1514);
	  COL_TRI(936, 1515, 935);
	  COL_TRI(936, 1516, 1515);
	  COL_TRI(937, 1516, 936);
	  COL_TRI(937, 1517, 1516);
	  COL_TRI(938, 1517, 937);
	  COL_TRI(938, 1518, 1517);
	  COL_TRI(939, 1518, 938);
	  COL_TRI(939, 1519, 1518);
	  COL_TRI(940, 1519, 939);
	  COL_TRI(940, 1520, 1519);
	  COL_TRI(941, 1520, 940);
	  COL_TRI(941, 1521, 1520);
	  COL_TRI(945, 1527, 1526);
	  COL_TRI(942, 1521, 1522);
	  COL_TRI(943, 1523, 1524);
	  COL_TRI(943, 1524, 1525);
	  COL_TRI(944, 1523, 943);
	  COL_TRI(944, 1526, 1523);
	  COL_TRI(945, 1526, 944);
	  COL_TRI(946, 1527, 945);
	  COL_TRI(946, 1528, 1527);
	  COL_TRI(947, 1528, 946);
	  COL_TRI(947, 1529, 1528);
	  COL_TRI(948, 1529, 947);
	  COL_TRI(948, 1530, 1529);
	  COL_TRI(949, 1530, 948);
	  COL_TRI(949, 1531, 1530);
	  COL_TRI(950, 1532, 1531);
	  COL_TRI(950, 1531, 949);
	  COL_TRI(951, 1532, 950);
	  COL_TRI(951, 1533, 1532);
	  COL_TRI(952, 1533, 951);
	  COL_TRI(952, 1534, 1533);
	  COL_TRI(953, 1534, 952);
	  COL_TRI(953, 1535, 1534);
	  COL_TRI(954, 1536, 1535);
	  COL_TRI(954, 1535, 953);
	  COL_TRI(955, 1536, 954);
	  COL_TRI(955, 1501, 1536);
	  COL_TRI(127, 1501, 955);
	  COL_TRI(956, 957, 917);
	  COL_TRI(957, 1014, 917);
	  COL_TRI(957, 1242, 1014);
	  COL_TRI(959, 958, 942);
	  COL_TRI(917, 1014, 981);
	  COL_TRI(956, 917, 918);
	  COL_TRI(942, 956, 918);
	  COL_TRI(942, 1243, 956);
	  COL_TRI(942, 1522, 959);
	  COL_TRI(958, 1537, 942);
	  COL_TRI(964, 1140, 979);
	  COL_TRI(960, 923, 922);
	  COL_TRI(960, 966, 923);
	  COL_TRI(961, 1538, 1483);
	  COL_TRI(962, 992, 994);
	  COL_TRI(963, 964, 921);
	  COL_TRI(964, 979, 921);
	  COL_TRI(963, 921, 920);
	  COL_TRI(965, 963, 920);
	  COL_TRI(965, 1139, 963);
	  COL_TRI(917, 981, 968);
	  COL_TRI(923, 961, 1483);
	  COL_TRI(966, 961, 923);
	  COL_TRI(923, 1483, 1539);
	  COL_TRI(923, 1539, 918);
	  COL_TRI(968, 1491, 892);
	  COL_TRI(870, 1483, 962);
	  COL_TRI(870, 872, 1483);
	  COL_TRI(967, 1542, 1483);
	  COL_TRI(921, 962, 922);
	  COL_TRI(921, 1543, 962);
	  COL_TRI(968, 892, 898);
	  COL_TRI(914, 889, 887);
	  COL_TRI(913, 900, 910);
	  COL_TRI(900, 977, 910);
	  COL_TRI(910, 977, 974);
	  COL_TRI(910, 974, 1503);
	  COL_TRI(914, 887, 885);
	  COL_TRI(914, 885, 915);
	  COL_TRI(181, 900, 913);
	  COL_TRI(186, 181, 913);
	  COL_TRI(181, 192, 900);
	  COL_TRI(186, 913, 915);
	  COL_TRI(885, 186, 915);
	  COL_TRI(885, 1018, 186);
	  COL_TRI(969, 971, 1266);
	  COL_TRI(970, 1266, 971);
	  COL_TRI(971, 920, 1503);
	  COL_TRI(971, 969, 920);
	  COL_TRI(974, 971, 1503);
	  COL_TRI(969, 1266, 559);
	  COL_TRI(972, 969, 559);
	  COL_TRI(972, 973, 969);
	  COL_TRI(973, 904, 969);
	  COL_TRI(904, 920, 969);
	  COL_TRI(904, 965, 920);
	  COL_TRI(970, 972, 558);
	  COL_TRI(970, 973, 972);
	  COL_TRI(970, 558, 1266);
	  COL_TRI(974, 970, 971);
	  COL_TRI(904, 1499, 965);
	  COL_TRI(975, 976, 900);
	  COL_TRI(976, 1544, 900);
	  COL_TRI(976, 1498, 1544);
	  COL_TRI(977, 1544, 1498);
	  COL_TRI(974, 977, 1498);
	  COL_TRI(965, 1499, 1015);
	  COL_TRI(262, 263, 264);
	  COL_TRI(978, 1524, 979);
	  COL_TRI(978, 1545, 1524);
	  COL_TRI(979, 1546, 1016);
	  COL_TRI(978, 979, 1016);
	  COL_TRI(268, 1063, 987);
	  COL_TRI(268, 987, 47);
	  COL_TRI(262, 268, 47);
	  COL_TRI(980, 981, 1014);
	  COL_TRI(981, 1549, 51);
	  COL_TRI(981, 51, 76);
	  COL_TRI(982, 993, 991);
	  COL_TRI(982, 1550, 993);
	  COL_TRI(262, 47, 51);
	  COL_TRI(863, 983, 862);
	  COL_TRI(983, 1507, 985);
	  COL_TRI(983, 985, 699);
	  COL_TRI(700, 925, 862);
	  COL_TRI(700, 984, 925);
	  COL_TRI(862, 983, 700);
	  COL_TRI(983, 699, 700);
	  COL_TRI(862, 925, 39);
	  COL_TRI(984, 985, 925);
	  COL_TRI(985, 1507, 925);
	  COL_TRI(925, 1507, 926);
	  COL_TRI(986, 1547, 1353);
	  COL_TRI(986, 1353, 708);
	  COL_TRI(706, 1481, 865);
	  COL_TRI(706, 988, 1481);
	  COL_TRI(989, 1551, 991);
	  COL_TRI(865, 708, 706);
	  COL_TRI(865, 986, 708);
	  COL_TRI(986, 865, 47);
	  COL_TRI(865, 1481, 1480);
	  COL_TRI(987, 986, 47);
	  COL_TRI(987, 1547, 986);
	  COL_TRI(988, 1547, 1481);
	  COL_TRI(988, 1353, 1547);
	  COL_TRI(993, 1553, 1552);
	  COL_TRI(990, 989, 1540);
	  COL_TRI(990, 1552, 989);
	  COL_TRI(991, 992, 1538);
	  COL_TRI(991, 993, 992);
	  COL_TRI(961, 991, 1538);
	  COL_TRI(961, 1540, 991);
	  COL_TRI(989, 991, 1540);
	  COL_TRI(966, 1541, 1540);
	  COL_TRI(966, 1540, 961);
	  COL_TRI(990, 1540, 1541);
	  COL_TRI(992, 993, 990);
	  COL_TRI(990, 993, 1552);
	  COL_TRI(995, 1484, 967);
	  COL_TRI(994, 990, 1554);
	  COL_TRI(992, 990, 994);
	  COL_TRI(990, 1541, 1554);
	  COL_TRI(960, 1541, 966);
	  COL_TRI(960, 1554, 1541);
	  COL_TRI(994, 1554, 960);
	  COL_TRI(962, 994, 922);
	  COL_TRI(994, 960, 922);
	  COL_TRI(995, 877, 1012);
	  COL_TRI(874, 995, 967);
	  COL_TRI(908, 867, 866);
	  COL_TRI(996, 858, 867);
	  COL_TRI(967, 34, 33);
	  COL_TRI(967, 1484, 34);
	  COL_TRI(967, 33, 71);
	  COL_TRI(997, 967, 144);
	  COL_TRI(997, 1542, 967);
	  COL_TRI(967, 1483, 872);
	  COL_TRI(1000, 1001, 1556);
	  COL_TRI(998, 38, 37);
	  COL_TRI(998, 1499, 38);
	  COL_TRI(999, 263, 262);
	  COL_TRI(999, 262, 51);
	  COL_TRI(34, 1555, 69);
	  COL_TRI(34, 1484, 1555);
	  COL_TRI(1003, 1004, 1006);
	  COL_TRI(1001, 1002, 1556);
	  COL_TRI(1002, 1557, 926);
	  COL_TRI(1001, 1557, 1002);
	  COL_TRI(1003, 1556, 1002);
	  COL_TRI(1004, 1002, 926);
	  COL_TRI(1003, 1002, 1004);
	  COL_TRI(1003, 1000, 1556);
	  COL_TRI(1004, 926, 1005);
	  COL_TRI(1005, 1558, 1006);
	  COL_TRI(1005, 1006, 1004);
	  COL_TRI(1009, 987, 1011);
	  COL_TRI(1006, 1558, 996);
	  COL_TRI(1003, 1006, 867);
	  COL_TRI(867, 1006, 996);
	  COL_TRI(1007, 1011, 1484);
	  COL_TRI(1008, 1007, 1484);
	  COL_TRI(1007, 1559, 1009);
	  COL_TRI(1007, 1008, 1559);
	  COL_TRI(1009, 1011, 1007);
	  COL_TRI(987, 1560, 1011);
	  COL_TRI(1010, 1011, 1560);
	  COL_TRI(959, 980, 1013);
	  COL_TRI(1011, 1010, 1484);
	  COL_TRI(995, 1008, 1484);
	  COL_TRI(1010, 1560, 1561);
	  COL_TRI(1010, 1561, 1555);
	  COL_TRI(1010, 1555, 1484);
	  COL_TRI(1012, 1559, 1008);
	  COL_TRI(1012, 1008, 995);
	  COL_TRI(980, 1014, 1013);
	  COL_TRI(959, 1013, 958);
	  COL_TRI(1013, 1537, 958);
	  COL_TRI(1014, 1562, 1013);
	  COL_TRI(1013, 1562, 1537);
	  COL_TRI(1015, 1016, 1017);
	  COL_TRI(1015, 978, 1016);
	  COL_TRI(1016, 1548, 1017);
	  COL_TRI(1016, 1546, 1548);
	  COL_TRI(1017, 1548, 965);
	  COL_TRI(1015, 1017, 965);
	  COL_TRI_INIT(SURFACE_VERY_SLIPPERY, 55);
	  COL_TRI(20, 18, 19);
	  COL_TRI(8, 9, 10);
	  COL_TRI(8, 11, 9);
	  COL_TRI(12, 8, 10);
	  COL_TRI(9, 11, 13);
	  COL_TRI(9, 13, 14);
	  COL_TRI(12, 10, 15);
	  COL_TRI(16, 12, 17);
	  COL_TRI(12, 15, 17);
	  COL_TRI(18, 16, 17);
	  COL_TRI(18, 17, 19);
	  COL_TRI(24, 48, 49);
	  COL_TRI(20, 19, 21);
	  COL_TRI(22, 20, 21);
	  COL_TRI(22, 21, 43);
	  COL_TRI(22, 43, 44);
	  COL_TRI(22, 44, 45);
	  COL_TRI(23, 45, 44);
	  COL_TRI(23, 46, 45);
	  COL_TRI(24, 47, 48);
	  COL_TRI(24, 40, 47);
	  COL_TRI(24, 49, 50);
	  COL_TRI(25, 52, 26);
	  COL_TRI(25, 26, 53);
	  COL_TRI(26, 54, 53);
	  COL_TRI(26, 39, 54);
	  COL_TRI(27, 28, 55);
	  COL_TRI(27, 55, 56);
	  COL_TRI(28, 57, 55);
	  COL_TRI(29, 30, 58);
	  COL_TRI(33, 34, 67);
	  COL_TRI(30, 59, 60);
	  COL_TRI(30, 60, 58);
	  COL_TRI(31, 32, 61);
	  COL_TRI(32, 62, 63);
	  COL_TRI(32, 63, 61);
	  COL_TRI(31, 61, 64);
	  COL_TRI(31, 65, 66);
	  COL_TRI(31, 64, 65);
	  COL_TRI(34, 68, 67);
	  COL_TRI(34, 69, 68);
	  COL_TRI(33, 67, 70);
	  COL_TRI(35, 33, 70);
	  COL_TRI(35, 71, 33);
	  COL_TRI(36, 37, 72);
	  COL_TRI(37, 38, 72);
	  COL_TRI(38, 73, 72);
	  COL_TRI(36, 72, 74);
	  COL_TRI(36, 74, 75);
	  COL_TRI(39, 36, 54);
	  COL_TRI(36, 75, 54);
	  COL_TRI(40, 41, 51);
	  COL_TRI(41, 42, 51);
	  COL_TRI(42, 76, 51);
	  COL_TRI(40, 51, 47);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 2);
	  COL_TRI(81, 82, 83);
	  COL_TRI(81, 84, 82);
	  COL_TRI_INIT(SURFACE_LOOK_UP_WARP, 6);
	  COL_TRI(0, 1, 2);
	  COL_TRI(1, 3, 4);
	  COL_TRI(1, 4, 2);
	  COL_TRI(1, 5, 3);
	  COL_TRI(3, 6, 4);
	  COL_TRI(4, 7, 2);
	  COL_TRI_INIT(SURFACE_NO_CAM_COLLISION, 54);
	  COL_TRI(123, 12, 16);
	  COL_TRI(117, 46, 23);
	  COL_TRI(117, 118, 46);
	  COL_TRI(45, 46, 118);
	  COL_TRI(45, 118, 119);
	  COL_TRI(120, 121, 14);
	  COL_TRI(120, 14, 13);
	  COL_TRI(120, 13, 11);
	  COL_TRI(122, 120, 11);
	  COL_TRI(123, 124, 12);
	  COL_TRI(125, 18, 20);
	  COL_TRI(125, 138, 18);
	  COL_TRI(20, 119, 125);
	  COL_TRI(20, 22, 119);
	  COL_TRI(22, 45, 119);
	  COL_TRI(24, 50, 139);
	  COL_TRI(16, 138, 123);
	  COL_TRI(16, 18, 138);
	  COL_TRI(122, 11, 8);
	  COL_TRI(8, 12, 124);
	  COL_TRI(8, 124, 122);
	  COL_TRI(24, 139, 137);
	  COL_TRI(129, 62, 32);
	  COL_TRI(126, 140, 25);
	  COL_TRI(126, 25, 53);
	  COL_TRI(66, 127, 141);
	  COL_TRI(66, 141, 32);
	  COL_TRI(66, 32, 31);
	  COL_TRI(127, 66, 65);
	  COL_TRI(128, 127, 65);
	  COL_TRI(129, 142, 62);
	  COL_TRI(131, 74, 72);
	  COL_TRI(130, 71, 35);
	  COL_TRI(67, 143, 130);
	  COL_TRI(67, 130, 35);
	  COL_TRI(130, 144, 71);
	  COL_TRI(67, 35, 70);
	  COL_TRI(68, 145, 146);
	  COL_TRI(68, 146, 67);
	  COL_TRI(131, 147, 74);
	  COL_TRI(134, 54, 75);
	  COL_TRI(132, 131, 73);
	  COL_TRI(131, 72, 73);
	  COL_TRI(133, 75, 74);
	  COL_TRI(133, 74, 147);
	  COL_TRI(134, 126, 53);
	  COL_TRI(134, 53, 54);
	  COL_TRI(133, 134, 75);
	  COL_TRI(135, 148, 42);
	  COL_TRI(135, 42, 41);
	  COL_TRI(136, 135, 41);
	  COL_TRI(136, 41, 40);
	  COL_TRI(137, 136, 24);
	  COL_TRI(136, 40, 24);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_A6, 2);
	  COL_TRI(93, 94, 95);
	  COL_TRI(93, 95, 96);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_A7, 2);
	  COL_TRI(97, 98, 94);
	  COL_TRI(97, 94, 93);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_A8, 2);
	  COL_TRI(99, 100, 98);
	  COL_TRI(99, 98, 97);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_A9, 2);
	  COL_TRI(101, 102, 103);
	  COL_TRI(101, 104, 102);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_AA, 2);
	  COL_TRI(109, 101, 103);
	  COL_TRI(109, 103, 110);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_AB, 2);
	  COL_TRI(113, 109, 110);
	  COL_TRI(113, 110, 114);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_AC, 2);
	  COL_TRI(149, 150, 151);
	  COL_TRI(149, 152, 150);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_AD, 2);
	  COL_TRI(157, 151, 158);
	  COL_TRI(157, 149, 151);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_AE, 2);
	  COL_TRI(161, 158, 162);
	  COL_TRI(161, 157, 158);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_AF, 2);
	  COL_TRI(170, 171, 172);
	  COL_TRI(170, 169, 171);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_B0, 2);
	  COL_TRI(167, 166, 169);
	  COL_TRI(167, 169, 170);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_B1, 2);
	  COL_TRI(165, 166, 167);
	  COL_TRI(165, 168, 166);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_D3, 2);
	  COL_TRI(85, 86, 87);
	  COL_TRI(85, 88, 86);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_D4, 2);
	  COL_TRI(87, 86, 89);
	  COL_TRI(87, 89, 90);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_D5, 2);
	  COL_TRI(90, 91, 92);
	  COL_TRI(90, 89, 91);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_D6, 2);
	  COL_TRI(105, 106, 107);
	  COL_TRI(105, 107, 108);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_D7, 2);
	  COL_TRI(108, 111, 112);
	  COL_TRI(108, 112, 105);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_D8, 2);
	  COL_TRI(111, 115, 112);
	  COL_TRI(111, 116, 115);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_D9, 2);
	  COL_TRI(153, 154, 155);
	  COL_TRI(153, 155, 156);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_DA, 2);
	  COL_TRI(156, 159, 160);
	  COL_TRI(156, 160, 153);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_DB, 2);
	  COL_TRI(159, 163, 160);
	  COL_TRI(159, 164, 163);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_DC, 2);
	  COL_TRI(179, 180, 178);
	  COL_TRI(179, 178, 177);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_DD, 2);
	  COL_TRI(177, 178, 176);
	  COL_TRI(177, 176, 173);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_DE, 2);
	  COL_TRI(173, 174, 175);
	  COL_TRI(173, 176, 174);
	  COL_TRI_INIT(SURFACE_TRAPDOOR, 2);
	  COL_TRI(77, 78, 79);
	  COL_TRI(77, 79, 80);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(11);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start,        /*pos*/ -1023,    0,  1152, /*yaw*/ 128); // unused, probably an early way to set initial position
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_wooden_door,       /*pos*/  -271,    0,  -824, /*yaw*/  32);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_wooden_door,       /*pos*/ -1775,    0,  -824, /*yaw*/ 224);
	  SPECIAL_OBJECT_WITH_YAW_AND_PARAM(/*preset*/ special_castle_door_warp,  /*pos*/ -1100,    0,  2202, /*yaw*/   0, /*bhvParam2*/ 0);
	  SPECIAL_OBJECT_WITH_YAW_AND_PARAM(/*preset*/ special_castle_door_warp,  /*pos*/ -946,     0,  2202, /*yaw*/ 128, /*bhvParam2*/ 1);
	  SPECIAL_OBJECT_WITH_YAW_AND_PARAM(/*preset*/ special_wooden_door_warp,  /*pos*/ -1023, -101, -5170, /*yaw*/   0, /*bhvParam2*/ 2);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_0stars_door,       /*pos*/ -3122,  205,  -793, /*yaw*/  64);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_1star_door,        /*pos*/   256,    0, -1074, /*yaw*/   0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_1star_door,        /*pos*/   644,  614, -1476, /*yaw*/ 224);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_3star_door,        /*pos*/  1075,  205,  -229, /*yaw*/ 192);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_3star_door,        /*pos*/ -2303,    0, -1074, /*yaw*/   0);
	  COL_END();
	}

	function inside_castle_seg7_area_2_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x688);
	  COL_VERTEX(-4860, 1306, 3036);
	  COL_VERTEX(-4991, 1306, 3036);
	  COL_VERTEX(-4991, 1306, 3415);
	  COL_VERTEX(-4860, 1306, 3415);
	  COL_VERTEX(-4860, 1306, 2903);
	  COL_VERTEX(-4991, 1306, 2903);
	  COL_VERTEX(-4991, 1306, 3005);
	  COL_VERTEX(-4860, 1306, 3005);
	  COL_VERTEX(-5068, 1306, -3291);
	  COL_VERTEX(-5614, 1306, -3291);
	  COL_VERTEX(-5614, 1306, -3189);
	  COL_VERTEX(-5068, 1306, -3189);
	  COL_VERTEX(-5614, 1306, -3701);
	  COL_VERTEX(-5068, 1306, -3322);
	  COL_VERTEX(-5068, 1306, -3701);
	  COL_VERTEX(-5614, 1306, -3322);
	  COL_VERTEX(-4729, 1306, 3036);
	  COL_VERTEX(-4729, 1306, 3415);
	  COL_VERTEX(-4729, 1306, 2903);
	  COL_VERTEX(-4729, 1306, 3005);
	  COL_VERTEX(-4522, 1306, -3291);
	  COL_VERTEX(-4522, 1306, -3189);
	  COL_VERTEX(-4522, 1306, -3322);
	  COL_VERTEX(-4522, 1306, -3701);
	  COL_VERTEX(-127, 4813, -3248);
	  COL_VERTEX(-127, 5120, -3248);
	  COL_VERTEX(-127, 5120, -3453);
	  COL_VERTEX(-127, 4813, -3453);
	  COL_VERTEX(-332, 4813, -3248);
	  COL_VERTEX(-332, 5120, -3453);
	  COL_VERTEX(-332, 4813, -3453);
	  COL_VERTEX(-332, 5120, -3248);
	  COL_VERTEX(-3513, 3021, 5989);
	  COL_VERTEX(-3513, 2816, 5784);
	  COL_VERTEX(-3513, 3021, 5784);
	  COL_VERTEX(-3308, 2816, 5784);
	  COL_VERTEX(-3308, 3021, 5784);
	  COL_VERTEX(-3308, 2816, 5989);
	  COL_VERTEX(-3513, 2816, 5989);
	  COL_VERTEX(-3308, 3021, 5989);
	  COL_VERTEX(2900, 3021, 5784);
	  COL_VERTEX(3105, 3021, 5784);
	  COL_VERTEX(3105, 3021, 5989);
	  COL_VERTEX(2900, 3021, 5989);
	  COL_VERTEX(3105, 2816, 5784);
	  COL_VERTEX(3105, 2816, 5989);
	  COL_VERTEX(2900, 2816, 5989);
	  COL_VERTEX(2900, 2816, 5784);
	  COL_VERTEX(-4598, 1306, 3415);
	  COL_VERTEX(-4598, 1306, 3036);
	  COL_VERTEX(-4598, 1306, 2903);
	  COL_VERTEX(-4598, 1306, 3005);
	  COL_VERTEX(-3976, 1306, -3291);
	  COL_VERTEX(-3976, 1306, -3189);
	  COL_VERTEX(-3976, 1306, -3322);
	  COL_VERTEX(-3976, 1306, -3701);
	  COL_VERTEX(0, 3968, 956);
	  COL_VERTEX(-409, 3968, 1008);
	  COL_VERTEX(0, 3968, 1008);
	  COL_VERTEX(-409, 3968, 956);
	  COL_VERTEX(-409, 3942, 1008);
	  COL_VERTEX(0, 3942, 1008);
	  COL_VERTEX(0, 3994, 956);
	  COL_VERTEX(-409, 3994, 956);
	  COL_VERTEX(0, 3994, 905);
	  COL_VERTEX(-409, 3994, 905);
	  COL_VERTEX(0, 3942, 1059);
	  COL_VERTEX(-409, 3942, 1059);
	  COL_VERTEX(-409, 3917, 1059);
	  COL_VERTEX(0, 3917, 1059);
	  COL_VERTEX(-1772, 2765, 6992);
	  COL_VERTEX(-1813, 2765, 6992);
	  COL_VERTEX(-1813, 2867, 6992);
	  COL_VERTEX(-1772, 2847, 6992);
	  COL_VERTEX(-1813, 2765, 7197);
	  COL_VERTEX(-1813, 2867, 7197);
	  COL_VERTEX(-1813, 2765, 6603);
	  COL_VERTEX(-1772, 2847, 6603);
	  COL_VERTEX(-1813, 2867, 6603);
	  COL_VERTEX(-1772, 2765, 6603);
	  COL_VERTEX(-1813, 2867, 6518);
	  COL_VERTEX(-1813, 2765, 6518);
	  COL_VERTEX(-1977, 2765, 6296);
	  COL_VERTEX(-2006, 2765, 6325);
	  COL_VERTEX(-2006, 2867, 6325);
	  COL_VERTEX(-1977, 2847, 6296);
	  COL_VERTEX(1364, 2765, 6603);
	  COL_VERTEX(1405, 2867, 6518);
	  COL_VERTEX(1405, 2765, 6992);
	  COL_VERTEX(1405, 2867, 6992);
	  COL_VERTEX(1405, 2765, 6518);
	  COL_VERTEX(1598, 2765, 6325);
	  COL_VERTEX(-789, 3174, 4604);
	  COL_VERTEX(-745, 3174, 4772);
	  COL_VERTEX(420, 3174, 4615);
	  COL_VERTEX(381, 3174, 4604);
	  COL_VERTEX(-745, 3277, 4772);
	  COL_VERTEX(3103, 1408, 3210);
	  COL_VERTEX(3206, 1408, 3108);
	  COL_VERTEX(3103, 1613, 3108);
	  COL_VERTEX(3206, 1613, 3210);
	  COL_VERTEX(3820, 1613, 2800);
	  COL_VERTEX(3718, 1613, 2698);
	  COL_VERTEX(3820, 1408, 2698);
	  COL_VERTEX(3718, 1408, 2800);
	  COL_VERTEX(3922, 1408, 752);
	  COL_VERTEX(4025, 1408, 650);
	  COL_VERTEX(3922, 1613, 650);
	  COL_VERTEX(4025, 1613, 752);
	  COL_VERTEX(3308, 1613, 343);
	  COL_VERTEX(3206, 1613, 240);
	  COL_VERTEX(3308, 1408, 240);
	  COL_VERTEX(3206, 1408, 343);
	  COL_VERTEX(3206, 1408, 1367);
	  COL_VERTEX(3308, 1408, 1264);
	  COL_VERTEX(3206, 1613, 1264);
	  COL_VERTEX(3308, 1613, 1367);
	  COL_VERTEX(3206, 1613, 1367);
	  COL_VERTEX(3103, 1613, 3210);
	  COL_VERTEX(3718, 1613, 2800);
	  COL_VERTEX(3922, 1613, 752);
	  COL_VERTEX(3206, 1613, 343);
	  COL_VERTEX(1405, 2867, 6603);
	  COL_VERTEX(1364, 2847, 6603);
	  COL_VERTEX(1405, 2765, 6603);
	  COL_VERTEX(1364, 2765, 6992);
	  COL_VERTEX(1364, 2847, 6992);
	  COL_VERTEX(1405, 2765, 7197);
	  COL_VERTEX(1405, 2867, 7197);
	  COL_VERTEX(1598, 2867, 6325);
	  COL_VERTEX(1569, 2765, 6296);
	  COL_VERTEX(1569, 2847, 6296);
	  COL_VERTEX(-829, 3174, 4615);
	  COL_VERTEX(-829, 3256, 4615);
	  COL_VERTEX(-789, 3277, 4604);
	  COL_VERTEX(420, 3256, 4615);
	  COL_VERTEX(381, 3277, 4604);
	  COL_VERTEX(336, 3174, 4772);
	  COL_VERTEX(336, 3277, 4772);
	  COL_VERTEX(3103, 1408, 3108);
	  COL_VERTEX(3206, 1408, 3210);
	  COL_VERTEX(3206, 1613, 3108);
	  COL_VERTEX(3820, 1408, 2800);
	  COL_VERTEX(3820, 1613, 2698);
	  COL_VERTEX(3718, 1408, 2698);
	  COL_VERTEX(3922, 1408, 650);
	  COL_VERTEX(4025, 1613, 650);
	  COL_VERTEX(4025, 1408, 752);
	  COL_VERTEX(3308, 1408, 343);
	  COL_VERTEX(3206, 1408, 240);
	  COL_VERTEX(3308, 1613, 240);
	  COL_VERTEX(3206, 1408, 1264);
	  COL_VERTEX(3308, 1613, 1264);
	  COL_VERTEX(3308, 1408, 1367);
	  COL_VERTEX(-1772, 2847, 7197);
	  COL_VERTEX(-1772, 2847, 6501);
	  COL_VERTEX(1364, 2847, 6501);
	  COL_VERTEX(1364, 2847, 7197);
	  COL_VERTEX(-776, 3256, 4813);
	  COL_VERTEX(367, 3256, 4813);
	  COL_VERTEX(-409, 2611, 7232);
	  COL_VERTEX(-409, 3123, 7232);
	  COL_VERTEX(-409, 3123, 7642);
	  COL_VERTEX(-409, 2611, 7642);
	  COL_VERTEX(0, 2611, 7642);
	  COL_VERTEX(0, 3123, 7232);
	  COL_VERTEX(0, 2611, 7232);
	  COL_VERTEX(0, 3123, 7642);
	  COL_VERTEX(0, 3123, 7130);
	  COL_VERTEX(0, 2714, 7232);
	  COL_VERTEX(0, 2714, 7130);
	  COL_VERTEX(-409, 2714, 7130);
	  COL_VERTEX(-409, 3123, 7130);
	  COL_VERTEX(-409, 2714, 7232);
	  COL_VERTEX(-802, 1203, 4153);
	  COL_VERTEX(-716, 1203, 3844);
	  COL_VERTEX(-802, 1203, 3844);
	  COL_VERTEX(-716, 1203, 4153);
	  COL_VERTEX(-802, 1203, 3813);
	  COL_VERTEX(-716, 1203, 3728);
	  COL_VERTEX(-802, 1203, 3728);
	  COL_VERTEX(-716, 1203, 3813);
	  COL_VERTEX(0, 2611, 7263);
	  COL_VERTEX(-136, 2611, 7641);
	  COL_VERTEX(0, 2611, 7641);
	  COL_VERTEX(-136, 2611, 7263);
	  COL_VERTEX(-761, 1203, -142);
	  COL_VERTEX(-966, 1203, -40);
	  COL_VERTEX(-761, 1203, -40);
	  COL_VERTEX(-966, 1203, -142);
	  COL_VERTEX(-966, 1203, -173);
	  COL_VERTEX(-761, 1203, -552);
	  COL_VERTEX(-966, 1203, -552);
	  COL_VERTEX(-761, 1203, -173);
	  COL_VERTEX(-631, 1203, 4153);
	  COL_VERTEX(-631, 1203, 3844);
	  COL_VERTEX(-631, 1203, 3813);
	  COL_VERTEX(-631, 1203, 3728);
	  COL_VERTEX(-272, 2611, 7641);
	  COL_VERTEX(-272, 2611, 7263);
	  COL_VERTEX(-556, 1203, -142);
	  COL_VERTEX(-556, 1203, -40);
	  COL_VERTEX(-556, 1203, -173);
	  COL_VERTEX(-556, 1203, -552);
	  COL_VERTEX(-546, 1203, 3844);
	  COL_VERTEX(-546, 1203, 4153);
	  COL_VERTEX(-546, 1203, 3728);
	  COL_VERTEX(-546, 1203, 3813);
	  COL_VERTEX(-409, 2611, 7263);
	  COL_VERTEX(-409, 2611, 7641);
	  COL_VERTEX(-351, 1203, -142);
	  COL_VERTEX(-351, 1203, -40);
	  COL_VERTEX(-351, 1203, -173);
	  COL_VERTEX(-351, 1203, -552);
	  COL_VERTEX(1364, 2765, 7197);
	  COL_VERTEX(1364, 2765, 6501);
	  COL_VERTEX(-1772, 2765, 6501);
	  COL_VERTEX(-1772, 2765, 7197);
	  COL_VERTEX(-776, 3174, 4813);
	  COL_VERTEX(367, 3174, 4813);
	  COL_VERTEX(3462, 1408, -680);
	  COL_VERTEX(3308, 1408, -680);
	  COL_VERTEX(3308, 1408, -301);
	  COL_VERTEX(3462, 1408, -301);
	  COL_VERTEX(3615, 1408, -680);
	  COL_VERTEX(3615, 1408, -301);
	  COL_VERTEX(3769, 1408, -680);
	  COL_VERTEX(3769, 1408, -301);
	  COL_VERTEX(282, 5018, -2685);
	  COL_VERTEX(230, 5837, -2736);
	  COL_VERTEX(230, 5018, -2736);
	  COL_VERTEX(282, 5837, -2685);
	  COL_VERTEX(230, 5837, -2839);
	  COL_VERTEX(230, 5018, -2839);
	  COL_VERTEX(282, 5837, -2890);
	  COL_VERTEX(282, 5018, -2890);
	  COL_VERTEX(-690, 5018, -2890);
	  COL_VERTEX(-690, 5837, -2890);
	  COL_VERTEX(-639, 5837, -2839);
	  COL_VERTEX(-639, 5018, -2839);
	  COL_VERTEX(-639, 5837, -2736);
	  COL_VERTEX(-639, 5018, -2736);
	  COL_VERTEX(-588, 5018, -3811);
	  COL_VERTEX(-588, 5018, -3760);
	  COL_VERTEX(-639, 5018, -3709);
	  COL_VERTEX(282, 5018, -3709);
	  COL_VERTEX(230, 5018, -3709);
	  COL_VERTEX(179, 5018, -3760);
	  COL_VERTEX(282, 5837, -2787);
	  COL_VERTEX(282, 5837, -3811);
	  COL_VERTEX(-25, 5018, -3555);
	  COL_VERTEX(-690, 5018, -2787);
	  COL_VERTEX(-409, 5734, -1091);
	  COL_VERTEX(-409, 4992, -1091);
	  COL_VERTEX(-434, 5018, -3555);
	  COL_VERTEX(-690, 5837, -2787);
	  COL_VERTEX(-690, 5837, -3811);
	  COL_VERTEX(-25, 5120, -3555);
	  COL_VERTEX(-434, 5120, -3555);
	  COL_VERTEX(-434, 5018, -3146);
	  COL_VERTEX(-434, 5120, -3146);
	  COL_VERTEX(-25, 5018, -3146);
	  COL_VERTEX(-460, 3174, 3721);
	  COL_VERTEX(51, 3174, 3619);
	  COL_VERTEX(-460, 3174, 3619);
	  COL_VERTEX(358, 3174, 3721);
	  COL_VERTEX(-921, 3174, 3465);
	  COL_VERTEX(154, 3174, 2544);
	  COL_VERTEX(512, 4198, 2800);
	  COL_VERTEX(-767, 3174, 3721);
	  COL_VERTEX(-357, 3430, 3721);
	  COL_VERTEX(-562, 3174, 2544);
	  COL_VERTEX(-921, 4198, 3465);
	  COL_VERTEX(0, 4992, -1091);
	  COL_VERTEX(0, 3174, 2544);
	  COL_VERTEX(0, 4198, 2544);
	  COL_VERTEX(0, 3405, 2134);
	  COL_VERTEX(0, 3405, 2083);
	  COL_VERTEX(512, 4198, 3721);
	  COL_VERTEX(-511, 3174, 2595);
	  COL_VERTEX(-460, 3174, 2595);
	  COL_VERTEX(-409, 3174, 2544);
	  COL_VERTEX(102, 3174, 2595);
	  COL_VERTEX(51, 3174, 2595);
	  COL_VERTEX(154, 4198, 2544);
	  COL_VERTEX(512, 4198, 3465);
	  COL_VERTEX(-767, 4198, 3721);
	  COL_VERTEX(-921, 4198, 2851);
	  COL_VERTEX(-50, 3430, 3772);
	  COL_VERTEX(-357, 3430, 3772);
	  COL_VERTEX(-357, 3174, 3824);
	  COL_VERTEX(-50, 3174, 3772);
	  COL_VERTEX(-357, 3174, 3772);
	  COL_VERTEX(-50, 3430, 3721);
	  COL_VERTEX(0, 3430, 2032);
	  COL_VERTEX(0, 3430, 2083);
	  COL_VERTEX(0, 3456, 1980);
	  COL_VERTEX(0, 3456, 2032);
	  COL_VERTEX(0, 3482, 1980);
	  COL_VERTEX(0, 3482, 1929);
	  COL_VERTEX(0, 3507, 1929);
	  COL_VERTEX(0, 3507, 1878);
	  COL_VERTEX(0, 3533, 1878);
	  COL_VERTEX(0, 3533, 1827);
	  COL_VERTEX(0, 3584, 1724);
	  COL_VERTEX(0, 3584, 1776);
	  COL_VERTEX(0, 3558, 1827);
	  COL_VERTEX(0, 3558, 1776);
	  COL_VERTEX(0, 3200, 2492);
	  COL_VERTEX(0, 3200, 2544);
	  COL_VERTEX(0, 3226, 2492);
	  COL_VERTEX(0, 3226, 2441);
	  COL_VERTEX(0, 3251, 2441);
	  COL_VERTEX(0, 3251, 2390);
	  COL_VERTEX(0, 3277, 2390);
	  COL_VERTEX(0, 3277, 2339);
	  COL_VERTEX(0, 3354, 2185);
	  COL_VERTEX(0, 3354, 2236);
	  COL_VERTEX(0, 3379, 2185);
	  COL_VERTEX(0, 3379, 2134);
	  COL_VERTEX(0, 3328, 2236);
	  COL_VERTEX(0, 3328, 2288);
	  COL_VERTEX(0, 3302, 2288);
	  COL_VERTEX(0, 3302, 2339);
	  COL_VERTEX(0, 3814, 1315);
	  COL_VERTEX(0, 3814, 1264);
	  COL_VERTEX(0, 3840, 1264);
	  COL_VERTEX(0, 3840, 1212);
	  COL_VERTEX(0, 3917, 1110);
	  COL_VERTEX(0, 3891, 1110);
	  COL_VERTEX(0, 3891, 1161);
	  COL_VERTEX(0, 3866, 1212);
	  COL_VERTEX(0, 3866, 1161);
	  COL_VERTEX(0, 3712, 1520);
	  COL_VERTEX(0, 3712, 1468);
	  COL_VERTEX(0, 3738, 1468);
	  COL_VERTEX(0, 3738, 1417);
	  COL_VERTEX(0, 3789, 1315);
	  COL_VERTEX(0, 3789, 1366);
	  COL_VERTEX(0, 3763, 1417);
	  COL_VERTEX(0, 3763, 1366);
	  COL_VERTEX(0, 3686, 1520);
	  COL_VERTEX(0, 3686, 1571);
	  COL_VERTEX(0, 3661, 1571);
	  COL_VERTEX(0, 3661, 1622);
	  COL_VERTEX(0, 3635, 1622);
	  COL_VERTEX(0, 3635, 1673);
	  COL_VERTEX(0, 3610, 1673);
	  COL_VERTEX(0, 3610, 1724);
	  COL_VERTEX(0, 4019, 905);
	  COL_VERTEX(0, 4019, 854);
	  COL_VERTEX(0, 4045, 854);
	  COL_VERTEX(0, 4045, 803);
	  COL_VERTEX(0, 4070, 803);
	  COL_VERTEX(0, 4070, 752);
	  COL_VERTEX(0, 4096, 752);
	  COL_VERTEX(0, 4429, 35);
	  COL_VERTEX(0, 4429, 86);
	  COL_VERTEX(0, 4454, 35);
	  COL_VERTEX(0, 4454, -15);
	  COL_VERTEX(0, 4480, -15);
	  COL_VERTEX(0, 4480, -67);
	  COL_VERTEX(0, 4506, -67);
	  COL_VERTEX(0, 4506, -118);
	  COL_VERTEX(0, 4582, -271);
	  COL_VERTEX(0, 4582, -220);
	  COL_VERTEX(0, 4608, -271);
	  COL_VERTEX(0, 4608, -323);
	  COL_VERTEX(0, 4557, -220);
	  COL_VERTEX(0, 4557, -169);
	  COL_VERTEX(0, 4531, -169);
	  COL_VERTEX(0, 4531, -118);
	  COL_VERTEX(0, 4659, -425);
	  COL_VERTEX(0, 4685, -476);
	  COL_VERTEX(0, 4685, -425);
	  COL_VERTEX(0, 4710, -476);
	  COL_VERTEX(0, 4710, -527);
	  COL_VERTEX(0, 4736, -527);
	  COL_VERTEX(0, 4736, -579);
	  COL_VERTEX(0, 4762, -579);
	  COL_VERTEX(0, 4762, -630);
	  COL_VERTEX(0, 4813, -732);
	  COL_VERTEX(0, 4813, -681);
	  COL_VERTEX(0, 4787, -630);
	  COL_VERTEX(0, 4787, -681);
	  COL_VERTEX(0, 4659, -374);
	  COL_VERTEX(0, 4634, -374);
	  COL_VERTEX(0, 4634, -323);
	  COL_VERTEX(0, 4122, 700);
	  COL_VERTEX(0, 4122, 649);
	  COL_VERTEX(0, 4147, 649);
	  COL_VERTEX(0, 4147, 598);
	  COL_VERTEX(0, 4198, 496);
	  COL_VERTEX(0, 4198, 547);
	  COL_VERTEX(0, 4173, 598);
	  COL_VERTEX(0, 4173, 547);
	  COL_VERTEX(0, 4096, 700);
	  COL_VERTEX(0, 4378, 137);
	  COL_VERTEX(0, 4378, 188);
	  COL_VERTEX(0, 4403, 137);
	  COL_VERTEX(0, 4403, 86);
	  COL_VERTEX(0, 4352, 188);
	  COL_VERTEX(0, 4352, 240);
	  COL_VERTEX(0, 4326, 240);
	  COL_VERTEX(0, 4326, 291);
	  COL_VERTEX(0, 4301, 291);
	  COL_VERTEX(0, 4301, 342);
	  COL_VERTEX(0, 4275, 393);
	  COL_VERTEX(0, 4275, 342);
	  COL_VERTEX(0, 4250, 444);
	  COL_VERTEX(0, 4250, 393);
	  COL_VERTEX(0, 4224, 444);
	  COL_VERTEX(0, 4224, 496);
	  COL_VERTEX(0, 4838, -732);
	  COL_VERTEX(0, 4915, -937);
	  COL_VERTEX(0, 4915, -886);
	  COL_VERTEX(0, 4941, -937);
	  COL_VERTEX(0, 4941, -988);
	  COL_VERTEX(0, 4890, -886);
	  COL_VERTEX(0, 4890, -835);
	  COL_VERTEX(0, 4864, -835);
	  COL_VERTEX(0, 4864, -783);
	  COL_VERTEX(0, 4838, -783);
	  COL_VERTEX(0, 5018, -1091);
	  COL_VERTEX(0, 4992, -1039);
	  COL_VERTEX(0, 4966, -1039);
	  COL_VERTEX(0, 4966, -988);
	  COL_VERTEX(2081, 2253, 4813);
	  COL_VERTEX(51, 2253, 4915);
	  COL_VERTEX(-460, 2253, 4915);
	  COL_VERTEX(51, 2253, 4813);
	  COL_VERTEX(632, 3174, 3824);
	  COL_VERTEX(-50, 3430, 3824);
	  COL_VERTEX(51, 3174, 3824);
	  COL_VERTEX(-460, 3174, 3926);
	  COL_VERTEX(-1041, 3174, 3824);
	  COL_VERTEX(-613, 2253, 7232);
	  COL_VERTEX(-818, 2253, 7232);
	  COL_VERTEX(102, 2253, 7130);
	  COL_VERTEX(205, 2253, 7232);
	  COL_VERTEX(-921, 2253, 7335);
	  COL_VERTEX(410, 2253, 7232);
	  COL_VERTEX(-1535, 3686, 6925);
	  COL_VERTEX(-1228, 3379, 6925);
	  COL_VERTEX(1126, 4198, 6925);
	  COL_VERTEX(1126, 3686, 6925);
	  COL_VERTEX(-921, 3482, 6925);
	  COL_VERTEX(-1535, 4198, 6925);
	  COL_VERTEX(512, 3482, 6925);
	  COL_VERTEX(-204, 3584, 6925);
	  COL_VERTEX(-409, 3482, 6925);
	  COL_VERTEX(0, 2253, 7130);
	  COL_VERTEX(0, 3482, 6925);
	  COL_VERTEX(307, 3379, 6925);
	  COL_VERTEX(-952, 3040, 7334);
	  COL_VERTEX(-716, 3379, 6925);
	  COL_VERTEX(819, 3379, 6925);
	  COL_VERTEX(-357, 2714, 7027);
	  COL_VERTEX(-2489, 3379, 6091);
	  COL_VERTEX(-2489, 2970, 6091);
	  COL_VERTEX(-2899, 3379, 5681);
	  COL_VERTEX(-3206, 3789, 5374);
	  COL_VERTEX(-2899, 3789, 6091);
	  COL_VERTEX(-2899, 3379, 6091);
	  COL_VERTEX(-3616, 3789, 6398);
	  COL_VERTEX(-3923, 3789, 6091);
	  COL_VERTEX(-3206, 3789, 6398);
	  COL_VERTEX(-3616, 3789, 5374);
	  COL_VERTEX(-3923, 3789, 5681);
	  COL_VERTEX(-2899, 2970, 6091);
	  COL_VERTEX(-3257, 2970, 6040);
	  COL_VERTEX(-3206, 2970, 5374);
	  COL_VERTEX(-2899, 2970, 5681);
	  COL_VERTEX(-3923, 2970, 5681);
	  COL_VERTEX(-3616, 2970, 5374);
	  COL_VERTEX(-3923, 2970, 6091);
	  COL_VERTEX(-3257, 3021, 5733);
	  COL_VERTEX(-3564, 3021, 5733);
	  COL_VERTEX(-3257, 2970, 5733);
	  COL_VERTEX(-3564, 3021, 6040);
	  COL_VERTEX(-3564, 2970, 6040);
	  COL_VERTEX(2849, 3021, 5733);
	  COL_VERTEX(3156, 3021, 6040);
	  COL_VERTEX(3156, 2970, 5733);
	  COL_VERTEX(2849, 2970, 6040);
	  COL_VERTEX(2849, 3021, 6040);
	  COL_VERTEX(2797, 2970, 6398);
	  COL_VERTEX(3156, 2970, 6040);
	  COL_VERTEX(2849, 2970, 5733);
	  COL_VERTEX(2490, 3379, 5681);
	  COL_VERTEX(2490, 3379, 6091);
	  COL_VERTEX(2081, 3379, 6091);
	  COL_VERTEX(2490, 2970, 6091);
	  COL_VERTEX(2797, 3789, 6398);
	  COL_VERTEX(2081, 3379, 5681);
	  COL_VERTEX(2490, 3789, 5681);
	  COL_VERTEX(2490, 3789, 6091);
	  COL_VERTEX(2797, 3789, 5374);
	  COL_VERTEX(3207, 3789, 5374);
	  COL_VERTEX(3514, 3789, 5681);
	  COL_VERTEX(3514, 3789, 6091);
	  COL_VERTEX(3207, 3789, 6398);
	  COL_VERTEX(367, 2970, 4813);
	  COL_VERTEX(614, 2765, 4915);
	  COL_VERTEX(-50, 2509, 4813);
	  COL_VERTEX(826, 2560, 5078);
	  COL_VERTEX(989, 2355, 5290);
	  COL_VERTEX(-921, 3087, 7335);
	  COL_VERTEX(1057, 2253, 7320);
	  COL_VERTEX(1364, 2253, 6501);
	  COL_VERTEX(-1977, 2253, 6296);
	  COL_VERTEX(-1772, 2253, 6501);
	  COL_VERTEX(-1977, 4198, 7115);
	  COL_VERTEX(-2284, 4198, 6808);
	  COL_VERTEX(-1465, 4198, 7320);
	  COL_VERTEX(2081, 4198, 6296);
	  COL_VERTEX(1876, 4198, 6808);
	  COL_VERTEX(1569, 4198, 7115);
	  COL_VERTEX(2081, 2970, 6091);
	  COL_VERTEX(2081, 2253, 5272);
	  COL_VERTEX(1569, 2253, 6296);
	  COL_VERTEX(-2489, 2765, 6296);
	  COL_VERTEX(-2489, 2253, 6296);
	  COL_VERTEX(-2489, 4198, 5272);
	  COL_VERTEX(-2489, 4198, 6296);
	  COL_VERTEX(-50, 3174, 3824);
	  COL_VERTEX(-357, 3430, 3824);
	  COL_VERTEX(632, 4198, 3824);
	  COL_VERTEX(-1535, 4198, 4028);
	  COL_VERTEX(-50, 2253, 4813);
	  COL_VERTEX(-357, 2509, 4813);
	  COL_VERTEX(-50, 2253, 4762);
	  COL_VERTEX(-776, 2253, 4813);
	  COL_VERTEX(-1023, 2970, 4915);
	  COL_VERTEX(-1500, 2253, 5537);
	  COL_VERTEX(1876, 4198, 4778);
	  COL_VERTEX(-1535, 2970, 4028);
	  COL_VERTEX(-1023, 2765, 4915);
	  COL_VERTEX(-1959, 2765, 4354);
	  COL_VERTEX(-1398, 2560, 5290);
	  COL_VERTEX(-2285, 2560, 4778);
	  COL_VERTEX(-1500, 2355, 5537);
	  COL_VERTEX(-2285, 4198, 4778);
	  COL_VERTEX(-1959, 4198, 4354);
	  COL_VERTEX(-1235, 2765, 5078);
	  COL_VERTEX(1126, 4198, 4028);
	  COL_VERTEX(1551, 4198, 4354);
	  COL_VERTEX(1876, 2560, 4778);
	  COL_VERTEX(989, 2560, 5290);
	  COL_VERTEX(2081, 2355, 5272);
	  COL_VERTEX(826, 2765, 5078);
	  COL_VERTEX(1126, 2970, 4028);
	  COL_VERTEX(614, 2970, 4915);
	  COL_VERTEX(-3771, 1306, -3291);
	  COL_VERTEX(-5040, 1306, 3005);
	  COL_VERTEX(-4283, 1306, 1316);
	  COL_VERTEX(-5614, 1510, -3291);
	  COL_VERTEX(-3975, 1510, -3291);
	  COL_VERTEX(-5307, 1306, 1316);
	  COL_VERTEX(-5307, 2330, 1316);
	  COL_VERTEX(-4939, 1306, 1418);
	  COL_VERTEX(-7252, 1306, 1316);
	  COL_VERTEX(-5307, 1306, 2340);
	  COL_VERTEX(-4598, 1355, 3005);
	  COL_VERTEX(-4549, 1306, 3005);
	  COL_VERTEX(-4991, 1355, 3005);
	  COL_VERTEX(-5307, 2330, 2340);
	  COL_VERTEX(-2747, 1203, 2135);
	  COL_VERTEX(-2747, 1459, 1904);
	  COL_VERTEX(-2849, 1203, 2007);
	  COL_VERTEX(-2849, 1203, 1648);
	  COL_VERTEX(-2747, 1203, 1520);
	  COL_VERTEX(-3566, 1203, 1520);
	  COL_VERTEX(-4283, 1357, 1520);
	  COL_VERTEX(-4283, 1459, 2135);
	  COL_VERTEX(-4897, 1357, 2135);
	  COL_VERTEX(-3975, 3149, -3291);
	  COL_VERTEX(-5614, 3149, -3291);
	  COL_VERTEX(-3771, 3354, -3291);
	  COL_VERTEX(-4991, 1748, 3005);
	  COL_VERTEX(-4598, 1748, 3005);
	  COL_VERTEX(-4283, 2330, 2340);
	  COL_VERTEX(-4549, 1797, 3005);
	  COL_VERTEX(-7252, 2330, 1316);
	  COL_VERTEX(-7252, 1306, 2340);
	  COL_VERTEX(-4897, 1357, 1520);
	  COL_VERTEX(-5102, 1357, 1725);
	  COL_VERTEX(-5102, 1357, 1930);
	  COL_VERTEX(-3822, 1357, 2135);
	  COL_VERTEX(-3822, 1331, 1520);
	  COL_VERTEX(-3771, 1306, 1520);
	  COL_VERTEX(-3771, 1331, 1520);
	  COL_VERTEX(-3719, 1280, 1520);
	  COL_VERTEX(-3719, 1306, 1520);
	  COL_VERTEX(-4283, 2330, 1316);
	  COL_VERTEX(-4487, 2534, 2135);
	  COL_VERTEX(-2695, 1459, 1751);
	  COL_VERTEX(-2695, 1203, 1751);
	  COL_VERTEX(-2695, 1203, 1904);
	  COL_VERTEX(-2695, 1459, 1904);
	  COL_VERTEX(-2747, 1459, 1751);
	  COL_VERTEX(-4283, 1818, 1930);
	  COL_VERTEX(-4283, 1818, 1725);
	  COL_VERTEX(-4283, 1613, 2135);
	  COL_VERTEX(-4283, 1613, 1520);
	  COL_VERTEX(-4283, 1306, 1520);
	  COL_VERTEX(-2747, 1613, 2135);
	  COL_VERTEX(-3617, 1229, 1520);
	  COL_VERTEX(-3617, 1254, 1520);
	  COL_VERTEX(-3566, 1229, 1520);
	  COL_VERTEX(-3668, 1254, 1520);
	  COL_VERTEX(-3668, 1280, 1520);
	  COL_VERTEX(7455, 1408, 3927);
	  COL_VERTEX(7455, 1408, -271);
	  COL_VERTEX(4281, 1408, 3415);
	  COL_VERTEX(4332, 1408, 3517);
	  COL_VERTEX(4332, 1408, 138);
	  COL_VERTEX(1823, 1203, 1648);
	  COL_VERTEX(1823, 1203, 2007);
	  COL_VERTEX(1721, 1408, 2084);
	  COL_VERTEX(2258, 1229, 1648);
	  COL_VERTEX(1721, 1203, 1572);
	  COL_VERTEX(2284, 1229, 2003);
	  COL_VERTEX(2284, 1229, 1652);
	  COL_VERTEX(2310, 1254, 2000);
	  COL_VERTEX(2310, 1254, 1656);
	  COL_VERTEX(2335, 1280, 1996);
	  COL_VERTEX(2386, 1331, 1667);
	  COL_VERTEX(2386, 1331, 1989);
	  COL_VERTEX(2412, 1357, 1985);
	  COL_VERTEX(2412, 1382, 1670);
	  COL_VERTEX(2438, 1382, 1981);
	  COL_VERTEX(3308, 2022, -271);
	  COL_VERTEX(3154, 2125, -271);
	  COL_VERTEX(3922, 1408, -271);
	  COL_VERTEX(3154, 1408, -271);
	  COL_VERTEX(3052, 1408, 3824);
	  COL_VERTEX(4025, 1408, 3824);
	  COL_VERTEX(3129, 1408, 3824);
	  COL_VERTEX(3180, 2167, 3927);
	  COL_VERTEX(3897, 1408, 3876);
	  COL_VERTEX(3897, 1408, 3927);
	  COL_VERTEX(3948, 1408, 3824);
	  COL_VERTEX(4025, 1408, -168);
	  COL_VERTEX(3948, 1408, -168);
	  COL_VERTEX(3897, 1408, -219);
	  COL_VERTEX(3180, 2167, -219);
	  COL_VERTEX(3180, 1408, -219);
	  COL_VERTEX(3129, 1408, -168);
	  COL_VERTEX(3052, 2125, -168);
	  COL_VERTEX(4281, 1408, 87);
	  COL_VERTEX(2745, 1408, 855);
	  COL_VERTEX(1721, 1459, 1751);
	  COL_VERTEX(1670, 1408, 1751);
	  COL_VERTEX(1721, 1408, 1751);
	  COL_VERTEX(1670, 1459, 1904);
	  COL_VERTEX(1721, 1408, 1904);
	  COL_VERTEX(1721, 1203, 2186);
	  COL_VERTEX(1721, 2125, 1469);
	  COL_VERTEX(1670, 1459, 1751);
	  COL_VERTEX(1721, 1459, 1904);
	  COL_VERTEX(4332, 1408, 1008);
	  COL_VERTEX(4281, 2159, 1162);
	  COL_VERTEX(4281, 1408, 1162);
	  COL_VERTEX(4230, 1408, 1111);
	  COL_VERTEX(4230, 1408, 1060);
	  COL_VERTEX(4281, 2159, 2647);
	  COL_VERTEX(4332, 1408, 2493);
	  COL_VERTEX(4230, 1408, 2596);
	  COL_VERTEX(4230, 1408, 2544);
	  COL_VERTEX(4281, 1408, 2647);
	  COL_VERTEX(2745, 1408, 3415);
	  COL_VERTEX(2745, 2125, 138);
	  COL_VERTEX(3052, 2330, 265);
	  COL_VERTEX(3282, 2330, 36);
	  COL_VERTEX(2847, 1408, 1060);
	  COL_VERTEX(3052, 2330, 2186);
	  COL_VERTEX(2745, 2125, 3517);
	  COL_VERTEX(2745, 1408, 2493);
	  COL_VERTEX(2745, 2125, 2493);
	  COL_VERTEX(2847, 1408, 957);
	  COL_VERTEX(2745, 1408, 1162);
	  COL_VERTEX(1721, 1408, 2186);
	  COL_VERTEX(2847, 1408, 2596);
	  COL_VERTEX(2847, 1408, 2698);
	  COL_VERTEX(1670, 1203, 1904);
	  COL_VERTEX(2438, 1408, 1981);
	  COL_VERTEX(2335, 1306, 1996);
	  COL_VERTEX(2361, 1306, 1992);
	  COL_VERTEX(2361, 1331, 1992);
	  COL_VERTEX(2796, 1408, 87);
	  COL_VERTEX(2847, 1408, 138);
	  COL_VERTEX(2847, 1408, 189);
	  COL_VERTEX(2796, 1408, 240);
	  COL_VERTEX(4332, 2125, 138);
	  COL_VERTEX(4332, 2125, 3517);
	  COL_VERTEX(4025, 2330, 265);
	  COL_VERTEX(3922, 2125, -271);
	  COL_VERTEX(3922, 2125, 3927);
	  COL_VERTEX(4230, 1408, 3466);
	  COL_VERTEX(4230, 1408, 3517);
	  COL_VERTEX(4281, 1408, 3568);
	  COL_VERTEX(2796, 1408, 3415);
	  COL_VERTEX(2847, 1408, 3466);
	  COL_VERTEX(2847, 1408, 3517);
	  COL_VERTEX(3154, 2125, 3927);
	  COL_VERTEX(4281, 1408, 240);
	  COL_VERTEX(4230, 1408, 189);
	  COL_VERTEX(4230, 1408, 138);
	  COL_VERTEX(4332, 1408, 240);
	  COL_VERTEX(4025, 2330, 3620);
	  COL_VERTEX(3154, 1408, 3927);
	  COL_VERTEX(-1196, 1203, 3813);
	  COL_VERTEX(-2114, 1203, 3283);
	  COL_VERTEX(-1279, 1203, 2458);
	  COL_VERTEX(-187, 1203, 3762);
	  COL_VERTEX(781, 1203, 3283);
	  COL_VERTEX(-460, 1203, 1280);
	  COL_VERTEX(-462, 1203, 2355);
	  COL_VERTEX(781, 1203, 387);
	  COL_VERTEX(-351, 1306, -142);
	  COL_VERTEX(-1196, 1203, -142);
	  COL_VERTEX(-136, 1203, -142);
	  COL_VERTEX(-351, 1920, -142);
	  COL_VERTEX(-1586, 1203, 1209);
	  COL_VERTEX(-1893, 1203, 1741);
	  COL_VERTEX(-1811, 1203, 1434);
	  COL_VERTEX(-2114, 1203, 387);
	  COL_VERTEX(-613, 1203, 1126);
	  COL_VERTEX(-1279, 1203, 1126);
	  COL_VERTEX(-1177, 1203, 1126);
	  COL_VERTEX(-818, 1203, 1024);
	  COL_VERTEX(51, 2253, 4608);
	  COL_VERTEX(-2542, 1203, 1648);
	  COL_VERTEX(-2542, 1203, 2007);
	  COL_VERTEX(-2644, 1203, 2365);
	  COL_VERTEX(-2644, 1459, 1751);
	  COL_VERTEX(-2644, 1203, 1305);
	  COL_VERTEX(-2226, 2022, 581);
	  COL_VERTEX(1311, 1203, 2160);
	  COL_VERTEX(1618, 1203, 2160);
	  COL_VERTEX(1311, 1715, 2160);
	  COL_VERTEX(1516, 1203, 2007);
	  COL_VERTEX(1311, 1203, 1510);
	  COL_VERTEX(1311, 1203, 1305);
	  COL_VERTEX(1516, 1203, 1648);
	  COL_VERTEX(1618, 1715, 1510);
	  COL_VERTEX(1618, 1203, 1510);
	  COL_VERTEX(-802, 1613, 3813);
	  COL_VERTEX(-1043, 1203, 3813);
	  COL_VERTEX(-1094, 1203, 3762);
	  COL_VERTEX(-546, 1613, 3813);
	  COL_VERTEX(-290, 1203, 3813);
	  COL_VERTEX(-50, 2509, 4762);
	  COL_VERTEX(-357, 2509, 4762);
	  COL_VERTEX(-50, 2253, 4710);
	  COL_VERTEX(51, 2253, 4710);
	  COL_VERTEX(-357, 2509, 4710);
	  COL_VERTEX(154, 2022, 2458);
	  COL_VERTEX(51, 2381, 2458);
	  COL_VERTEX(154, 1715, 2458);
	  COL_VERTEX(-562, 1408, 2458);
	  COL_VERTEX(-562, 2022, 2458);
	  COL_VERTEX(1311, 2022, 3813);
	  COL_VERTEX(-2644, 2022, 3813);
	  COL_VERTEX(51, 1715, 2458);
	  COL_VERTEX(154, 1203, 2458);
	  COL_VERTEX(51, 1357, 1741);
	  COL_VERTEX(51, 2227, 3789);
	  COL_VERTEX(-2644, 1459, 1904);
	  COL_VERTEX(587, 1203, 436);
	  COL_VERTEX(-562, 2022, 1741);
	  COL_VERTEX(154, 2022, 1741);
	  COL_VERTEX(-50, 2509, 4710);
	  COL_VERTEX(154, 2253, 4506);
	  COL_VERTEX(-665, 2253, 4506);
	  COL_VERTEX(-562, 2253, 4506);
	  COL_VERTEX(-460, 2253, 4608);
	  COL_VERTEX(-665, 3046, 3994);
	  COL_VERTEX(-665, 3046, 4710);
	  COL_VERTEX(-460, 2253, 3789);
	  COL_VERTEX(-665, 2253, 3994);
	  COL_VERTEX(256, 3046, 3994);
	  COL_VERTEX(51, 3046, 3789);
	  COL_VERTEX(-665, 2253, 4608);
	  COL_VERTEX(-460, 3046, 3789);
	  COL_VERTEX(-460, 2022, 1741);
	  COL_VERTEX(-1586, 2022, 2324);
	  COL_VERTEX(-1279, 2022, 1126);
	  COL_VERTEX(-613, 2022, 1126);
	  COL_VERTEX(-1074, 1459, 1126);
	  COL_VERTEX(-1074, 1203, 1126);
	  COL_VERTEX(154, 2022, 3686);
	  COL_VERTEX(-1811, 2022, 2048);
	  COL_VERTEX(-1893, 2022, 1741);
	  COL_VERTEX(-1586, 2022, 1209);
	  COL_VERTEX(-1811, 2022, 1434);
	  COL_VERTEX(1311, 1920, 1956);
	  COL_VERTEX(893, 2022, 3089);
	  COL_VERTEX(1311, 1920, 1715);
	  COL_VERTEX(1311, 1715, 1510);
	  COL_VERTEX(1618, 1715, 2160);
	  COL_VERTEX(587, 1203, 3395);
	  COL_VERTEX(587, 1203, 3234);
	  COL_VERTEX(893, 1203, 3089);
	  COL_VERTEX(893, 2022, 581);
	  COL_VERTEX(732, 1203, 581);
	  COL_VERTEX(-2226, 1203, 581);
	  COL_VERTEX(-1920, 1203, 436);
	  COL_VERTEX(-1920, 1203, 275);
	  COL_VERTEX(-2226, 1203, 3089);
	  COL_VERTEX(-2226, 2022, 3089);
	  COL_VERTEX(-2065, 1203, 3089);
	  COL_VERTEX(-1920, 1203, 3234);
	  COL_VERTEX(-238, 1203, 3762);
	  COL_VERTEX(-1145, 1203, 3762);
	  COL_VERTEX(-966, 1920, -142);
	  COL_VERTEX(1618, 1459, 1904);
	  COL_VERTEX(1618, 1203, 1751);
	  COL_VERTEX(1670, 1203, 1751);
	  COL_VERTEX(893, 1203, 581);
	  COL_VERTEX(-1920, 2022, 275);
	  COL_VERTEX(587, 2022, 3395);
	  COL_VERTEX(-1196, 2022, 3813);
	  COL_VERTEX(-921, 1203, 1126);
	  COL_VERTEX(-921, 1203, 1178);
	  COL_VERTEX(-1074, 1203, 1178);
	  COL_VERTEX(-921, 1459, 1126);
	  COL_VERTEX(-921, 1459, 1178);
	  COL_VERTEX(-1074, 1459, 1178);
	  COL_VERTEX(-460, 2227, 3789);
	  COL_VERTEX(-460, 2227, 3738);
	  COL_VERTEX(-460, 2202, 3738);
	  COL_VERTEX(-460, 2202, 3686);
	  COL_VERTEX(-460, 2176, 3686);
	  COL_VERTEX(-460, 2176, 3635);
	  COL_VERTEX(-460, 2150, 3635);
	  COL_VERTEX(-460, 2150, 3584);
	  COL_VERTEX(-460, 2125, 3584);
	  COL_VERTEX(-460, 2125, 3533);
	  COL_VERTEX(-460, 2099, 3533);
	  COL_VERTEX(-460, 2099, 3482);
	  COL_VERTEX(-460, 2048, 3379);
	  COL_VERTEX(-460, 2074, 3430);
	  COL_VERTEX(-460, 2048, 3430);
	  COL_VERTEX(-460, 2074, 3482);
	  COL_VERTEX(-460, 1638, 2560);
	  COL_VERTEX(-460, 1638, 2611);
	  COL_VERTEX(-460, 1664, 2611);
	  COL_VERTEX(-460, 1664, 2662);
	  COL_VERTEX(-460, 1715, 2765);
	  COL_VERTEX(-460, 1715, 2714);
	  COL_VERTEX(-460, 1690, 2714);
	  COL_VERTEX(-460, 1690, 2662);
	  COL_VERTEX(-460, 1766, 2867);
	  COL_VERTEX(-460, 1766, 2816);
	  COL_VERTEX(-460, 1741, 2816);
	  COL_VERTEX(-460, 1741, 2765);
	  COL_VERTEX(-460, 1792, 2867);
	  COL_VERTEX(-460, 1818, 2918);
	  COL_VERTEX(-460, 1792, 2918);
	  COL_VERTEX(-460, 1818, 2970);
	  COL_VERTEX(-460, 1843, 2970);
	  COL_VERTEX(-460, 1843, 3021);
	  COL_VERTEX(-460, 1869, 3021);
	  COL_VERTEX(-460, 1869, 3072);
	  COL_VERTEX(-460, 1894, 3072);
	  COL_VERTEX(-460, 1920, 3123);
	  COL_VERTEX(-460, 1894, 3123);
	  COL_VERTEX(-460, 1920, 3174);
	  COL_VERTEX(-460, 2022, 3379);
	  COL_VERTEX(-460, 2022, 3328);
	  COL_VERTEX(-460, 1997, 3328);
	  COL_VERTEX(-460, 1997, 3277);
	  COL_VERTEX(-460, 1946, 3174);
	  COL_VERTEX(-460, 1971, 3226);
	  COL_VERTEX(-460, 1946, 3226);
	  COL_VERTEX(-460, 1971, 3277);
	  COL_VERTEX(-460, 1562, 2458);
	  COL_VERTEX(-460, 1562, 2406);
	  COL_VERTEX(-460, 1536, 2406);
	  COL_VERTEX(-460, 1536, 2355);
	  COL_VERTEX(-460, 1587, 2458);
	  COL_VERTEX(-460, 1587, 2509);
	  COL_VERTEX(-460, 1613, 2509);
	  COL_VERTEX(-460, 1613, 2560);
	  COL_VERTEX(-460, 1510, 2355);
	  COL_VERTEX(-460, 1510, 2304);
	  COL_VERTEX(-460, 1485, 2304);
	  COL_VERTEX(-460, 1485, 2253);
	  COL_VERTEX(-460, 1459, 2253);
	  COL_VERTEX(-460, 1459, 2202);
	  COL_VERTEX(-460, 1434, 2202);
	  COL_VERTEX(-460, 1434, 2150);
	  COL_VERTEX(-460, 1408, 2150);
	  COL_VERTEX(-460, 1408, 2099);
	  COL_VERTEX(-460, 1382, 2099);
	  COL_VERTEX(-460, 1382, 2048);
	  COL_VERTEX(-460, 1331, 1946);
	  COL_VERTEX(-460, 1357, 1997);
	  COL_VERTEX(-460, 1331, 1997);
	  COL_VERTEX(-460, 1357, 2048);
	  COL_VERTEX(-460, 1280, 1843);
	  COL_VERTEX(-460, 1280, 1894);
	  COL_VERTEX(-460, 1306, 1894);
	  COL_VERTEX(-460, 1306, 1946);
	  COL_VERTEX(-460, 1254, 1792);
	  COL_VERTEX(-460, 1229, 1792);
	  COL_VERTEX(-460, 1254, 1843);
	  COL_VERTEX(-460, 1229, 1741);
	  COL_VERTEX(-460, 1203, 1741);
	  COL_VERTEX(-665, 512, 3021);
	  COL_VERTEX(-767, 1203, 1229);
	  COL_VERTEX(-818, 1203, 1229);
	  COL_VERTEX(-1177, 1203, 1741);
	  COL_VERTEX(-767, 1203, 1741);
	  COL_VERTEX(-1207, 602, 1813);
	  COL_VERTEX(-767, 512, 2355);
	  COL_VERTEX(-1279, 1818, 1843);
	  COL_VERTEX(-1207, 1818, 1813);
	  COL_VERTEX(-767, 614, 1741);
	  COL_VERTEX(-1351, 1818, 1813);
	  COL_VERTEX(-1381, 512, 2560);
	  COL_VERTEX(-665, 512, 2560);
	  COL_VERTEX(-1279, 512, 2355);
	  COL_VERTEX(-767, 922, 2355);
	  COL_VERTEX(-1279, 512, 2867);
	  COL_VERTEX(-767, 512, 2867);
	  COL_VERTEX(-1279, 512, 2970);
	  COL_VERTEX(-767, 1818, 2253);
	  COL_VERTEX(-1526, 1818, 2253);
	  COL_VERTEX(-1526, 1818, 1229);
	  COL_VERTEX(-921, 1459, 1229);
	  COL_VERTEX(-1074, 1459, 1229);
	  COL_VERTEX(-869, 1126, 1741);
	  COL_VERTEX(-1381, 1152, 1242);
	  COL_VERTEX(-1381, 1152, 1229);
	  COL_VERTEX(-1177, 1818, 1741);
	  COL_VERTEX(-1177, 1203, 1229);
	  COL_VERTEX(-1279, 1203, 1741);
	  COL_VERTEX(-836, 1178, 1997);
	  COL_VERTEX(-1279, 1178, 1741);
	  COL_VERTEX(-917, 1152, 2103);
	  COL_VERTEX(-1279, 1152, 1741);
	  COL_VERTEX(-1023, 1126, 2184);
	  COL_VERTEX(-1279, 1126, 1741);
	  COL_VERTEX(-1146, 1101, 2235);
	  COL_VERTEX(-1279, 1101, 1741);
	  COL_VERTEX(-1279, 1075, 2253);
	  COL_VERTEX(-1279, 1075, 1741);
	  COL_VERTEX(-1279, 1050, 1741);
	  COL_VERTEX(-1279, 1024, 1741);
	  COL_VERTEX(-1279, 998, 1741);
	  COL_VERTEX(-1279, 973, 1741);
	  COL_VERTEX(-1279, 947, 1741);
	  COL_VERTEX(-1774, 922, 1873);
	  COL_VERTEX(-1279, 922, 1741);
	  COL_VERTEX(-1791, 896, 1741);
	  COL_VERTEX(-1279, 896, 1741);
	  COL_VERTEX(-1722, 870, 1485);
	  COL_VERTEX(-1279, 870, 1741);
	  COL_VERTEX(-1641, 845, 1379);
	  COL_VERTEX(-1641, 819, 1379);
	  COL_VERTEX(-1535, 819, 1297);
	  COL_VERTEX(-1279, 819, 1741);
	  COL_VERTEX(-1412, 794, 1246);
	  COL_VERTEX(-1279, 794, 1741);
	  COL_VERTEX(-1279, 768, 1229);
	  COL_VERTEX(-1279, 768, 1741);
	  COL_VERTEX(-1279, 742, 1741);
	  COL_VERTEX(-1279, 717, 1741);
	  COL_VERTEX(-1279, 691, 1741);
	  COL_VERTEX(-1279, 666, 1741);
	  COL_VERTEX(-1279, 640, 1741);
	  COL_VERTEX(-784, 614, 1608);
	  COL_VERTEX(-1381, 1024, 2970);
	  COL_VERTEX(-1202, 1178, 2816);
	  COL_VERTEX(-844, 1178, 2816);
	  COL_VERTEX(-665, 1024, 2970);
	  COL_VERTEX(-665, 1024, 2560);
	  COL_VERTEX(-1381, 1024, 2560);
	  COL_VERTEX(-1177, 1024, 2355);
	  COL_VERTEX(-1279, 922, 2355);
	  COL_VERTEX(-869, 1024, 2355);
	  COL_VERTEX(-665, 512, 2970);
	  COL_VERTEX(-869, 512, 2970);
	  COL_VERTEX(-869, 768, 2970);
	  COL_VERTEX(-1381, 512, 2970);
	  COL_VERTEX(-1177, 768, 3021);
	  COL_VERTEX(-869, 768, 3021);
	  COL_VERTEX(-767, 1818, 1229);
	  COL_VERTEX(-767, 1818, 1741);
	  COL_VERTEX(-784, 1818, 1873);
	  COL_VERTEX(-836, 1818, 1997);
	  COL_VERTEX(-917, 1818, 2103);
	  COL_VERTEX(-1023, 1818, 2184);
	  COL_VERTEX(-1146, 1818, 2235);
	  COL_VERTEX(-1279, 1818, 2253);
	  COL_VERTEX(-1412, 1818, 2235);
	  COL_VERTEX(-1535, 1818, 2184);
	  COL_VERTEX(-1641, 1818, 2103);
	  COL_VERTEX(-1722, 1818, 1997);
	  COL_VERTEX(-1774, 1818, 1873);
	  COL_VERTEX(-1791, 1818, 1741);
	  COL_VERTEX(-1279, 597, 1843);
	  COL_VERTEX(-1279, 1152, 1638);
	  COL_VERTEX(-1351, 1152, 1668);
	  COL_VERTEX(-1381, 1818, 1741);
	  COL_VERTEX(-1207, 1152, 1668);
	  COL_VERTEX(-1177, 1152, 1741);
	  COL_VERTEX(-1279, 1152, 1229);
	  COL_VERTEX(-1146, 1152, 1246);
	  COL_VERTEX(-1023, 1152, 1297);
	  COL_VERTEX(-917, 1152, 1379);
	  COL_VERTEX(-836, 1152, 1485);
	  COL_VERTEX(-784, 1152, 1608);
	  COL_VERTEX(-1774, 1818, 1608);
	  COL_VERTEX(-1722, 1818, 1485);
	  COL_VERTEX(-1641, 1818, 1379);
	  COL_VERTEX(-1535, 1818, 1297);
	  COL_VERTEX(-1412, 1818, 1246);
	  COL_VERTEX(-690, 5837, -2685);
	  COL_VERTEX(-690, 5018, -2685);
	  COL_VERTEX(-588, 5837, -3760);
	  COL_VERTEX(-588, 5837, -3811);
	  COL_VERTEX(-639, 5837, -3709);
	  COL_VERTEX(-690, 5837, -3709);
	  COL_VERTEX(-690, 5018, -3709);
	  COL_VERTEX(230, 5837, -3709);
	  COL_VERTEX(282, 5837, -3709);
	  COL_VERTEX(179, 5837, -3760);
	  COL_VERTEX(179, 5837, -3811);
	  COL_VERTEX(179, 5018, -3811);
	  COL_VERTEX(0, 5734, -1091);
	  COL_VERTEX(282, 5018, -2787);
	  COL_VERTEX(0, 3891, 2544);
	  COL_VERTEX(-409, 5018, -1091);
	  COL_VERTEX(-690, 5018, -3811);
	  COL_VERTEX(282, 5018, -3811);
	  COL_VERTEX(-409, 3891, 2544);
	  COL_VERTEX(-25, 5120, -3146);
	  COL_VERTEX(51, 3174, 3721);
	  COL_VERTEX(512, 3174, 3465);
	  COL_VERTEX(-50, 3174, 3721);
	  COL_VERTEX(358, 4198, 3721);
	  COL_VERTEX(512, 3174, 2800);
	  COL_VERTEX(-357, 3174, 3721);
	  COL_VERTEX(-921, 3174, 2851);
	  COL_VERTEX(-409, 4992, -1039);
	  COL_VERTEX(-409, 4198, 2544);
	  COL_VERTEX(-409, 3405, 2134);
	  COL_VERTEX(-409, 3379, 2134);
	  COL_VERTEX(-409, 3405, 2083);
	  COL_VERTEX(-921, 4198, 2544);
	  COL_VERTEX(512, 4198, 2544);
	  COL_VERTEX(-921, 4198, 3721);
	  COL_VERTEX(-511, 4198, 2595);
	  COL_VERTEX(-562, 4198, 2544);
	  COL_VERTEX(-460, 4198, 2595);
	  COL_VERTEX(102, 4198, 2595);
	  COL_VERTEX(51, 4198, 2595);
	  COL_VERTEX(-409, 3430, 2083);
	  COL_VERTEX(-409, 3430, 2032);
	  COL_VERTEX(-409, 3456, 2032);
	  COL_VERTEX(-409, 3456, 1980);
	  COL_VERTEX(-409, 3482, 1980);
	  COL_VERTEX(-409, 3482, 1929);
	  COL_VERTEX(-409, 3507, 1929);
	  COL_VERTEX(-409, 3507, 1878);
	  COL_VERTEX(-409, 3533, 1878);
	  COL_VERTEX(-409, 3533, 1827);
	  COL_VERTEX(-409, 3584, 1776);
	  COL_VERTEX(-409, 3584, 1724);
	  COL_VERTEX(-409, 3558, 1776);
	  COL_VERTEX(-409, 3558, 1827);
	  COL_VERTEX(-409, 3200, 2492);
	  COL_VERTEX(-409, 3200, 2544);
	  COL_VERTEX(-409, 3226, 2492);
	  COL_VERTEX(-409, 3226, 2441);
	  COL_VERTEX(-409, 3251, 2441);
	  COL_VERTEX(-409, 3251, 2390);
	  COL_VERTEX(-409, 3277, 2390);
	  COL_VERTEX(-409, 3277, 2339);
	  COL_VERTEX(-409, 3354, 2236);
	  COL_VERTEX(-409, 3354, 2185);
	  COL_VERTEX(-409, 3328, 2236);
	  COL_VERTEX(-409, 3379, 2185);
	  COL_VERTEX(-409, 3328, 2288);
	  COL_VERTEX(-409, 3302, 2288);
	  COL_VERTEX(-409, 3302, 2339);
	  COL_VERTEX(-409, 3814, 1315);
	  COL_VERTEX(-409, 3789, 1315);
	  COL_VERTEX(-409, 3814, 1264);
	  COL_VERTEX(-409, 3840, 1264);
	  COL_VERTEX(-409, 3840, 1212);
	  COL_VERTEX(-409, 3917, 1110);
	  COL_VERTEX(-409, 3891, 1110);
	  COL_VERTEX(-409, 3891, 1161);
	  COL_VERTEX(-409, 3866, 1161);
	  COL_VERTEX(-409, 3866, 1212);
	  COL_VERTEX(-409, 3686, 1520);
	  COL_VERTEX(-409, 3712, 1520);
	  COL_VERTEX(-409, 3712, 1468);
	  COL_VERTEX(-409, 3738, 1468);
	  COL_VERTEX(-409, 3738, 1417);
	  COL_VERTEX(-409, 3789, 1366);
	  COL_VERTEX(-409, 3763, 1366);
	  COL_VERTEX(-409, 3763, 1417);
	  COL_VERTEX(-409, 3686, 1571);
	  COL_VERTEX(-409, 3661, 1571);
	  COL_VERTEX(-409, 3661, 1622);
	  COL_VERTEX(-409, 3635, 1622);
	  COL_VERTEX(-409, 3635, 1673);
	  COL_VERTEX(-409, 3610, 1673);
	  COL_VERTEX(-409, 3610, 1724);
	  COL_VERTEX(-409, 4019, 905);
	  COL_VERTEX(-409, 4019, 854);
	  COL_VERTEX(-409, 4045, 854);
	  COL_VERTEX(-409, 4045, 803);
	  COL_VERTEX(-409, 4070, 803);
	  COL_VERTEX(-409, 4070, 752);
	  COL_VERTEX(-409, 4096, 752);
	  COL_VERTEX(-409, 4429, 35);
	  COL_VERTEX(-409, 4429, 86);
	  COL_VERTEX(-409, 4403, 86);
	  COL_VERTEX(-409, 4454, 35);
	  COL_VERTEX(-409, 4454, -15);
	  COL_VERTEX(-409, 4480, -15);
	  COL_VERTEX(-409, 4480, -67);
	  COL_VERTEX(-409, 4506, -67);
	  COL_VERTEX(-409, 4506, -118);
	  COL_VERTEX(-409, 4582, -220);
	  COL_VERTEX(-409, 4582, -271);
	  COL_VERTEX(-409, 4557, -220);
	  COL_VERTEX(-409, 4608, -271);
	  COL_VERTEX(-409, 4608, -323);
	  COL_VERTEX(-409, 4557, -169);
	  COL_VERTEX(-409, 4531, -169);
	  COL_VERTEX(-409, 4531, -118);
	  COL_VERTEX(-409, 4659, -374);
	  COL_VERTEX(-409, 4659, -425);
	  COL_VERTEX(-409, 4685, -425);
	  COL_VERTEX(-409, 4685, -476);
	  COL_VERTEX(-409, 4710, -476);
	  COL_VERTEX(-409, 4710, -527);
	  COL_VERTEX(-409, 4736, -527);
	  COL_VERTEX(-409, 4736, -579);
	  COL_VERTEX(-409, 4762, -579);
	  COL_VERTEX(-409, 4762, -630);
	  COL_VERTEX(-409, 4813, -681);
	  COL_VERTEX(-409, 4813, -732);
	  COL_VERTEX(-409, 4787, -681);
	  COL_VERTEX(-409, 4787, -630);
	  COL_VERTEX(-409, 4634, -374);
	  COL_VERTEX(-409, 4634, -323);
	  COL_VERTEX(-409, 4122, 700);
	  COL_VERTEX(-409, 4096, 700);
	  COL_VERTEX(-409, 4122, 649);
	  COL_VERTEX(-409, 4147, 649);
	  COL_VERTEX(-409, 4147, 598);
	  COL_VERTEX(-409, 4198, 547);
	  COL_VERTEX(-409, 4198, 496);
	  COL_VERTEX(-409, 4173, 547);
	  COL_VERTEX(-409, 4173, 598);
	  COL_VERTEX(-409, 4378, 188);
	  COL_VERTEX(-409, 4378, 137);
	  COL_VERTEX(-409, 4352, 188);
	  COL_VERTEX(-409, 4403, 137);
	  COL_VERTEX(-409, 4352, 240);
	  COL_VERTEX(-409, 4326, 240);
	  COL_VERTEX(-409, 4326, 291);
	  COL_VERTEX(-409, 4301, 291);
	  COL_VERTEX(-409, 4301, 342);
	  COL_VERTEX(-409, 4275, 342);
	  COL_VERTEX(-409, 4275, 393);
	  COL_VERTEX(-409, 4250, 393);
	  COL_VERTEX(-409, 4250, 444);
	  COL_VERTEX(-409, 4224, 444);
	  COL_VERTEX(-409, 4224, 496);
	  COL_VERTEX(-409, 4838, -732);
	  COL_VERTEX(-409, 4915, -886);
	  COL_VERTEX(-409, 4915, -937);
	  COL_VERTEX(-409, 4890, -886);
	  COL_VERTEX(-409, 4941, -937);
	  COL_VERTEX(-409, 4941, -988);
	  COL_VERTEX(-409, 4890, -835);
	  COL_VERTEX(-409, 4864, -835);
	  COL_VERTEX(-409, 4864, -783);
	  COL_VERTEX(-409, 4838, -783);
	  COL_VERTEX(-409, 4966, -1039);
	  COL_VERTEX(-409, 4966, -988);
	  COL_VERTEX(2081, 2253, 7371);
	  COL_VERTEX(-2489, 2253, 7371);
	  COL_VERTEX(-2489, 2253, 4813);
	  COL_VERTEX(-460, 2253, 4813);
	  COL_VERTEX(51, 3174, 3926);
	  COL_VERTEX(-460, 3174, 3824);
	  COL_VERTEX(632, 2970, 3824);
	  COL_VERTEX(-1041, 2970, 3824);
	  COL_VERTEX(-776, 2970, 4813);
	  COL_VERTEX(-1041, 4198, 3824);
	  COL_VERTEX(-613, 3090, 7232);
	  COL_VERTEX(-511, 3232, 7130);
	  COL_VERTEX(-511, 2253, 7130);
	  COL_VERTEX(205, 3090, 7232);
	  COL_VERTEX(102, 3232, 7130);
	  COL_VERTEX(410, 3087, 7232);
	  COL_VERTEX(-921, 3024, 7335);
	  COL_VERTEX(-818, 3087, 7232);
	  COL_VERTEX(512, 3024, 7335);
	  COL_VERTEX(512, 2253, 7335);
	  COL_VERTEX(-511, 3355, 7130);
	  COL_VERTEX(-409, 2253, 7130);
	  COL_VERTEX(102, 3355, 7130);
	  COL_VERTEX(-1797, 3578, 7187);
	  COL_VERTEX(-1797, 4198, 7187);
	  COL_VERTEX(-1918, 3528, 7308);
	  COL_VERTEX(1388, 4198, 7187);
	  COL_VERTEX(1388, 3578, 7187);
	  COL_VERTEX(-1335, 2923, 7323);
	  COL_VERTEX(1509, 3528, 7308);
	  COL_VERTEX(927, 2923, 7323);
	  COL_VERTEX(-204, 4506, 6925);
	  COL_VERTEX(543, 3040, 7334);
	  COL_VERTEX(-357, 2253, 7027);
	  COL_VERTEX(-50, 2714, 7027);
	  COL_VERTEX(-50, 2253, 7027);
	  COL_VERTEX(-330, 3292, 7130);
	  COL_VERTEX(-204, 3355, 7130);
	  COL_VERTEX(-747, 2937, 7335);
	  COL_VERTEX(-78, 3292, 7130);
	  COL_VERTEX(-952, 3039, 7335);
	  COL_VERTEX(339, 2937, 7335);
	  COL_VERTEX(543, 3039, 7335);
	  COL_VERTEX(-2489, 2970, 5681);
	  COL_VERTEX(-2899, 3789, 5681);
	  COL_VERTEX(-3206, 2970, 6398);
	  COL_VERTEX(-2489, 3379, 5681);
	  COL_VERTEX(-3616, 2970, 6398);
	  COL_VERTEX(-3564, 2970, 5733);
	  COL_VERTEX(-3257, 3021, 6040);
	  COL_VERTEX(3156, 3021, 5733);
	  COL_VERTEX(3207, 2970, 6398);
	  COL_VERTEX(3514, 2970, 6091);
	  COL_VERTEX(2490, 2970, 5681);
	  COL_VERTEX(3514, 2970, 5681);
	  COL_VERTEX(3207, 2970, 5374);
	  COL_VERTEX(2797, 2970, 5374);
	  COL_VERTEX(2081, 2970, 5681);
	  COL_VERTEX(367, 2253, 4813);
	  COL_VERTEX(614, 2253, 4915);
	  COL_VERTEX(826, 2253, 5078);
	  COL_VERTEX(989, 2253, 5290);
	  COL_VERTEX(1092, 2253, 5537);
	  COL_VERTEX(1092, 2355, 5537);
	  COL_VERTEX(-1465, 2253, 7320);
	  COL_VERTEX(-1465, 3087, 7320);
	  COL_VERTEX(512, 3087, 7335);
	  COL_VERTEX(1057, 3087, 7320);
	  COL_VERTEX(1364, 2253, 7197);
	  COL_VERTEX(-1772, 2253, 7197);
	  COL_VERTEX(2081, 2765, 6296);
	  COL_VERTEX(-2284, 2765, 6808);
	  COL_VERTEX(-1977, 2765, 7115);
	  COL_VERTEX(-1977, 2253, 7115);
	  COL_VERTEX(1876, 2765, 6808);
	  COL_VERTEX(1569, 2765, 7115);
	  COL_VERTEX(1569, 2253, 7115);
	  COL_VERTEX(1057, 4198, 7320);
	  COL_VERTEX(2081, 2253, 6296);
	  COL_VERTEX(2081, 4198, 5272);
	  COL_VERTEX(2081, 2765, 7197);
	  COL_VERTEX(-2489, 2765, 7197);
	  COL_VERTEX(-2489, 2253, 5272);
	  COL_VERTEX(1126, 2765, 4028);
	  COL_VERTEX(1551, 2765, 4354);
	  COL_VERTEX(-357, 2253, 4813);
	  COL_VERTEX(-357, 2253, 4762);
	  COL_VERTEX(-1023, 2253, 4915);
	  COL_VERTEX(-2489, 2355, 5272);
	  COL_VERTEX(-2285, 2355, 4778);
	  COL_VERTEX(1876, 2355, 4778);
	  COL_VERTEX(-1535, 2765, 4028);
	  COL_VERTEX(-1959, 2560, 4354);
	  COL_VERTEX(-1235, 2560, 5078);
	  COL_VERTEX(-1398, 2355, 5290);
	  COL_VERTEX(-1398, 2253, 5290);
	  COL_VERTEX(-1235, 2253, 5078);
	  COL_VERTEX(1551, 2560, 4354);
	  COL_VERTEX(-5819, 1306, -3291);
	  COL_VERTEX(-4283, 1306, 2340);
	  COL_VERTEX(-5819, 3354, -3291);
	  COL_VERTEX(-4283, 1306, 1418);
	  COL_VERTEX(-5204, 1306, 1683);
	  COL_VERTEX(-5102, 2534, 1520);
	  COL_VERTEX(-5102, 2534, 2135);
	  COL_VERTEX(-4283, 1306, 2237);
	  COL_VERTEX(-5204, 1306, 1972);
	  COL_VERTEX(-4939, 1306, 2237);
	  COL_VERTEX(-7252, 2330, 2340);
	  COL_VERTEX(-2747, 1203, 2007);
	  COL_VERTEX(-3566, 1203, 2135);
	  COL_VERTEX(-2747, 1203, 1904);
	  COL_VERTEX(-2747, 1203, 1648);
	  COL_VERTEX(-3566, 1229, 2135);
	  COL_VERTEX(-2747, 1613, 1520);
	  COL_VERTEX(-2747, 1203, 1751);
	  COL_VERTEX(-4283, 1459, 1531);
	  COL_VERTEX(-4283, 1357, 1531);
	  COL_VERTEX(-4283, 1459, 1520);
	  COL_VERTEX(-3617, 1229, 2135);
	  COL_VERTEX(-4283, 1357, 2135);
	  COL_VERTEX(-4283, 1357, 2125);
	  COL_VERTEX(-4283, 1459, 2125);
	  COL_VERTEX(-5040, 1797, 3005);
	  COL_VERTEX(-4487, 2534, 1520);
	  COL_VERTEX(-3822, 1357, 1520);
	  COL_VERTEX(-3822, 1331, 2135);
	  COL_VERTEX(-3771, 1331, 2135);
	  COL_VERTEX(-3771, 1306, 2135);
	  COL_VERTEX(-3719, 1306, 2135);
	  COL_VERTEX(-3719, 1280, 2135);
	  COL_VERTEX(-2747, 1818, 1930);
	  COL_VERTEX(-4283, 1306, 2135);
	  COL_VERTEX(-2747, 1818, 1725);
	  COL_VERTEX(-4283, 1203, 2135);
	  COL_VERTEX(-4283, 1203, 1520);
	  COL_VERTEX(-3617, 1254, 2135);
	  COL_VERTEX(-3668, 1254, 2135);
	  COL_VERTEX(-3668, 1280, 2135);
	  COL_VERTEX(4332, 1408, 3927);
	  COL_VERTEX(4332, 1408, -271);
	  COL_VERTEX(3308, 1408, -271);
	  COL_VERTEX(3769, 1408, -271);
	  COL_VERTEX(4281, 2208, 3415);
	  COL_VERTEX(4281, 2208, 240);
	  COL_VERTEX(2745, 1408, 138);
	  COL_VERTEX(2745, 1408, 3517);
	  COL_VERTEX(2258, 1203, 1648);
	  COL_VERTEX(2258, 1203, 2007);
	  COL_VERTEX(1721, 1203, 2084);
	  COL_VERTEX(1721, 1203, 2007);
	  COL_VERTEX(2438, 1203, 1981);
	  COL_VERTEX(2258, 1229, 2007);
	  COL_VERTEX(1721, 1203, 1648);
	  COL_VERTEX(2438, 1203, 1674);
	  COL_VERTEX(2438, 1408, 1674);
	  COL_VERTEX(1721, 1408, 1572);
	  COL_VERTEX(2284, 1254, 2003);
	  COL_VERTEX(2284, 1254, 1652);
	  COL_VERTEX(2310, 1280, 2000);
	  COL_VERTEX(2310, 1280, 1656);
	  COL_VERTEX(2386, 1357, 1989);
	  COL_VERTEX(2386, 1357, 1667);
	  COL_VERTEX(2361, 1331, 1663);
	  COL_VERTEX(2335, 1280, 1659);
	  COL_VERTEX(2412, 1357, 1670);
	  COL_VERTEX(2412, 1382, 1985);
	  COL_VERTEX(2438, 1382, 1674);
	  COL_VERTEX(2361, 1306, 1663);
	  COL_VERTEX(3769, 2022, -271);
	  COL_VERTEX(3308, 1562, -271);
	  COL_VERTEX(3769, 1562, -271);
	  COL_VERTEX(2796, 1408, 3568);
	  COL_VERTEX(2796, 2125, 3568);
	  COL_VERTEX(3052, 2125, 3824);
	  COL_VERTEX(4025, 2125, 3824);
	  COL_VERTEX(4281, 2125, 3568);
	  COL_VERTEX(3129, 2167, 3824);
	  COL_VERTEX(3052, 2167, 3824);
	  COL_VERTEX(3180, 2167, 3876);
	  COL_VERTEX(3180, 1408, 3876);
	  COL_VERTEX(3180, 1408, 3927);
	  COL_VERTEX(3897, 2167, 3876);
	  COL_VERTEX(3948, 2167, 3824);
	  COL_VERTEX(4025, 2167, 3824);
	  COL_VERTEX(3897, 2167, 3927);
	  COL_VERTEX(3180, 2125, 3927);
	  COL_VERTEX(3897, 2125, 3927);
	  COL_VERTEX(4025, 2167, -168);
	  COL_VERTEX(3948, 2167, -168);
	  COL_VERTEX(3897, 2167, -219);
	  COL_VERTEX(3897, 2167, -271);
	  COL_VERTEX(3897, 1408, -271);
	  COL_VERTEX(3180, 1408, -271);
	  COL_VERTEX(3180, 2167, -271);
	  COL_VERTEX(3129, 2167, -168);
	  COL_VERTEX(3052, 2167, -168);
	  COL_VERTEX(3052, 1408, -168);
	  COL_VERTEX(2796, 2125, 87);
	  COL_VERTEX(4281, 2125, 87);
	  COL_VERTEX(4025, 2125, -168);
	  COL_VERTEX(2745, 1408, 240);
	  COL_VERTEX(2745, 2125, 240);
	  COL_VERTEX(2745, 2125, 855);
	  COL_VERTEX(1721, 1203, 1751);
	  COL_VERTEX(1721, 1203, 1469);
	  COL_VERTEX(1670, 1408, 1904);
	  COL_VERTEX(1721, 1203, 1904);
	  COL_VERTEX(1721, 1408, 1469);
	  COL_VERTEX(1721, 2125, 2186);
	  COL_VERTEX(4281, 1408, 1008);
	  COL_VERTEX(4281, 2159, 1008);
	  COL_VERTEX(4332, 2125, 1008);
	  COL_VERTEX(4332, 1408, 1162);
	  COL_VERTEX(4332, 2125, 1162);
	  COL_VERTEX(4230, 2193, 1111);
	  COL_VERTEX(4230, 2193, 1060);
	  COL_VERTEX(4332, 1408, 2647);
	  COL_VERTEX(4332, 2125, 2647);
	  COL_VERTEX(4281, 2159, 2493);
	  COL_VERTEX(4332, 2125, 2493);
	  COL_VERTEX(4281, 1408, 2493);
	  COL_VERTEX(4230, 2193, 2544);
	  COL_VERTEX(4230, 2193, 2596);
	  COL_VERTEX(2745, 1408, 2800);
	  COL_VERTEX(2745, 2125, 2800);
	  COL_VERTEX(2745, 2125, 3415);
	  COL_VERTEX(2745, 2125, 1162);
	  COL_VERTEX(3052, 2330, 1469);
	  COL_VERTEX(2847, 2193, 1060);
	  COL_VERTEX(3052, 2330, 3390);
	  COL_VERTEX(2847, 2193, 2596);
	  COL_VERTEX(3282, 2330, 3620);
	  COL_VERTEX(2847, 2193, 957);
	  COL_VERTEX(2847, 2193, 2698);
	  COL_VERTEX(2335, 1306, 1659);
	  COL_VERTEX(2796, 2208, 87);
	  COL_VERTEX(2847, 2208, 138);
	  COL_VERTEX(2847, 2208, 189);
	  COL_VERTEX(2796, 2208, 240);
	  COL_VERTEX(2745, 2208, 240);
	  COL_VERTEX(3795, 2330, 36);
	  COL_VERTEX(4025, 2330, 3390);
	  COL_VERTEX(3795, 2330, 3620);
	  COL_VERTEX(4332, 2208, 3415);
	  COL_VERTEX(4332, 1408, 3415);
	  COL_VERTEX(4230, 2208, 3466);
	  COL_VERTEX(4230, 2208, 3517);
	  COL_VERTEX(4281, 2208, 3568);
	  COL_VERTEX(2847, 2208, 3466);
	  COL_VERTEX(2847, 2208, 3517);
	  COL_VERTEX(2796, 2208, 3568);
	  COL_VERTEX(2796, 2208, 3415);
	  COL_VERTEX(2745, 2208, 3415);
	  COL_VERTEX(4230, 2208, 189);
	  COL_VERTEX(4230, 2208, 138);
	  COL_VERTEX(4281, 2208, 87);
	  COL_VERTEX(4332, 2208, 240);
	  COL_VERTEX(3052, 2330, 3620);
	  COL_VERTEX(3052, 2330, 36);
	  COL_VERTEX(4025, 2330, 36);
	  COL_VERTEX(3922, 1408, 3927);
	  COL_VERTEX(-136, 1203, 3813);
	  COL_VERTEX(-1145, 2022, 3762);
	  COL_VERTEX(-1586, 1203, 2324);
	  COL_VERTEX(-1811, 1203, 2048);
	  COL_VERTEX(-2644, 1203, 2007);
	  COL_VERTEX(-2644, 1203, 1648);
	  COL_VERTEX(-2644, 1203, 1904);
	  COL_VERTEX(-1094, 2022, 3762);
	  COL_VERTEX(-136, 2022, 3813);
	  COL_VERTEX(1311, 1203, 2365);
	  COL_VERTEX(-1177, 1203, 1024);
	  COL_VERTEX(-187, 2022, 3762);
	  COL_VERTEX(-966, 1306, -142);
	  COL_VERTEX(-1196, 2022, -142);
	  COL_VERTEX(587, 1203, 275);
	  COL_VERTEX(587, 2022, 275);
	  COL_VERTEX(-136, 2022, -142);
	  COL_VERTEX(-818, 1203, 1126);
	  COL_VERTEX(-460, 2253, 4710);
	  COL_VERTEX(-2644, 2022, 2365);
	  COL_VERTEX(-2644, 2022, 1305);
	  COL_VERTEX(-2644, 1203, 1751);
	  COL_VERTEX(1618, 1203, 2007);
	  COL_VERTEX(1618, 1203, 1648);
	  COL_VERTEX(1311, 2022, 1305);
	  COL_VERTEX(1618, 1459, 1751);
	  COL_VERTEX(-802, 1357, 3813);
	  COL_VERTEX(-1043, 2022, 3813);
	  COL_VERTEX(-546, 1357, 3813);
	  COL_VERTEX(-290, 2022, 3813);
	  COL_VERTEX(-357, 2253, 4710);
	  COL_VERTEX(-460, 3046, 4710);
	  COL_VERTEX(51, 3046, 4710);
	  COL_VERTEX(51, 3046, 4608);
	  COL_VERTEX(51, 2022, 1741);
	  COL_VERTEX(51, 2022, 2458);
	  COL_VERTEX(154, 1408, 2458);
	  COL_VERTEX(-562, 2022, 3686);
	  COL_VERTEX(-562, 2022, 2355);
	  COL_VERTEX(154, 1357, 1741);
	  COL_VERTEX(154, 1203, 1741);
	  COL_VERTEX(51, 1203, 1741);
	  COL_VERTEX(51, 1526, 2458);
	  COL_VERTEX(51, 1562, 2458);
	  COL_VERTEX(587, 2022, 436);
	  COL_VERTEX(-2644, 2022, -142);
	  COL_VERTEX(1311, 2022, 693);
	  COL_VERTEX(154, 3046, 4506);
	  COL_VERTEX(256, 3046, 4506);
	  COL_VERTEX(256, 2253, 4506);
	  COL_VERTEX(-665, 3046, 4506);
	  COL_VERTEX(-562, 3046, 4506);
	  COL_VERTEX(-460, 3046, 4608);
	  COL_VERTEX(51, 2253, 3789);
	  COL_VERTEX(256, 2253, 3994);
	  COL_VERTEX(256, 3046, 4710);
	  COL_VERTEX(256, 2253, 4608);
	  COL_VERTEX(-460, 2022, 1280);
	  COL_VERTEX(-1279, 2022, 2458);
	  COL_VERTEX(1311, 2022, 2365);
	  COL_VERTEX(1618, 1920, 1956);
	  COL_VERTEX(1618, 1920, 1715);
	  COL_VERTEX(1618, 1203, 1904);
	  COL_VERTEX(587, 2022, 3234);
	  COL_VERTEX(732, 2022, 3089);
	  COL_VERTEX(732, 1203, 3089);
	  COL_VERTEX(732, 2022, 581);
	  COL_VERTEX(-2065, 1203, 581);
	  COL_VERTEX(-2065, 2022, 581);
	  COL_VERTEX(-1920, 2022, 436);
	  COL_VERTEX(-2065, 2022, 3089);
	  COL_VERTEX(-1920, 2022, 3234);
	  COL_VERTEX(-1920, 2022, 3395);
	  COL_VERTEX(-1920, 1203, 3395);
	  COL_VERTEX(-238, 2022, 3762);
	  COL_VERTEX(-1074, 1203, 1229);
	  COL_VERTEX(-921, 1203, 1229);
	  COL_VERTEX(51, 2227, 3738);
	  COL_VERTEX(51, 2202, 3738);
	  COL_VERTEX(51, 2202, 3686);
	  COL_VERTEX(51, 2176, 3686);
	  COL_VERTEX(51, 2176, 3635);
	  COL_VERTEX(51, 2150, 3635);
	  COL_VERTEX(51, 2150, 3584);
	  COL_VERTEX(51, 2125, 3584);
	  COL_VERTEX(51, 2125, 3533);
	  COL_VERTEX(51, 2099, 3533);
	  COL_VERTEX(51, 2099, 3482);
	  COL_VERTEX(51, 2074, 3482);
	  COL_VERTEX(51, 2048, 3379);
	  COL_VERTEX(51, 2022, 3379);
	  COL_VERTEX(51, 2048, 3430);
	  COL_VERTEX(51, 2074, 3430);
	  COL_VERTEX(51, 1638, 2560);
	  COL_VERTEX(51, 1613, 2560);
	  COL_VERTEX(51, 1638, 2611);
	  COL_VERTEX(51, 1664, 2611);
	  COL_VERTEX(51, 1664, 2662);
	  COL_VERTEX(51, 1715, 2765);
	  COL_VERTEX(51, 1715, 2714);
	  COL_VERTEX(51, 1690, 2714);
	  COL_VERTEX(51, 1690, 2662);
	  COL_VERTEX(51, 1766, 2867);
	  COL_VERTEX(51, 1766, 2816);
	  COL_VERTEX(51, 1741, 2816);
	  COL_VERTEX(51, 1741, 2765);
	  COL_VERTEX(51, 1792, 2867);
	  COL_VERTEX(51, 1792, 2918);
	  COL_VERTEX(51, 1818, 2918);
	  COL_VERTEX(51, 1818, 2970);
	  COL_VERTEX(51, 1843, 2970);
	  COL_VERTEX(51, 1843, 3021);
	  COL_VERTEX(51, 1869, 3021);
	  COL_VERTEX(51, 1869, 3072);
	  COL_VERTEX(51, 1894, 3072);
	  COL_VERTEX(51, 1894, 3123);
	  COL_VERTEX(51, 1920, 3123);
	  COL_VERTEX(51, 1920, 3174);
	  COL_VERTEX(51, 2022, 3328);
	  COL_VERTEX(51, 1997, 3328);
	  COL_VERTEX(51, 1997, 3277);
	  COL_VERTEX(51, 1971, 3277);
	  COL_VERTEX(51, 1946, 3174);
	  COL_VERTEX(51, 1946, 3226);
	  COL_VERTEX(51, 1971, 3226);
	  COL_VERTEX(51, 1562, 2406);
	  COL_VERTEX(51, 1536, 2406);
	  COL_VERTEX(51, 1536, 2355);
	  COL_VERTEX(51, 1510, 2355);
	  COL_VERTEX(51, 1587, 2458);
	  COL_VERTEX(51, 1587, 2509);
	  COL_VERTEX(51, 1613, 2509);
	  COL_VERTEX(51, 1510, 2304);
	  COL_VERTEX(51, 1485, 2304);
	  COL_VERTEX(51, 1485, 2253);
	  COL_VERTEX(51, 1459, 2253);
	  COL_VERTEX(51, 1459, 2202);
	  COL_VERTEX(51, 1434, 2202);
	  COL_VERTEX(51, 1434, 2150);
	  COL_VERTEX(51, 1408, 2150);
	  COL_VERTEX(51, 1408, 2099);
	  COL_VERTEX(51, 1382, 2099);
	  COL_VERTEX(51, 1382, 2048);
	  COL_VERTEX(51, 1357, 2048);
	  COL_VERTEX(51, 1331, 1946);
	  COL_VERTEX(51, 1306, 1946);
	  COL_VERTEX(51, 1331, 1997);
	  COL_VERTEX(51, 1357, 1997);
	  COL_VERTEX(51, 1280, 1843);
	  COL_VERTEX(51, 1254, 1843);
	  COL_VERTEX(51, 1280, 1894);
	  COL_VERTEX(51, 1306, 1894);
	  COL_VERTEX(51, 1254, 1792);
	  COL_VERTEX(51, 1229, 1792);
	  COL_VERTEX(51, 1229, 1741);
	  COL_VERTEX(-1381, 512, 3430);
	  COL_VERTEX(-665, 512, 3430);
	  COL_VERTEX(-1381, 512, 3021);
	  COL_VERTEX(-818, 1203, 1331);
	  COL_VERTEX(-1177, 1203, 1331);
	  COL_VERTEX(-1177, 614, 1741);
	  COL_VERTEX(-1351, 602, 1813);
	  COL_VERTEX(-767, 1024, 1741);
	  COL_VERTEX(-1279, 1007, 1843);
	  COL_VERTEX(-1177, 1126, 1741);
	  COL_VERTEX(-767, 512, 2970);
	  COL_VERTEX(-1791, 1818, 1574);
	  COL_VERTEX(-1791, 1818, 1907);
	  COL_VERTEX(-1177, 1818, 1229);
	  COL_VERTEX(-767, 1152, 1741);
	  COL_VERTEX(-1381, 1152, 1741);
	  COL_VERTEX(-1381, 1818, 1242);
	  COL_VERTEX(-767, 1152, 1229);
	  COL_VERTEX(-784, 1178, 1873);
	  COL_VERTEX(-784, 1203, 1873);
	  COL_VERTEX(-836, 1152, 1997);
	  COL_VERTEX(-917, 1126, 2103);
	  COL_VERTEX(-1023, 1101, 2184);
	  COL_VERTEX(-1146, 1075, 2235);
	  COL_VERTEX(-1279, 1050, 2253);
	  COL_VERTEX(-1412, 1024, 2235);
	  COL_VERTEX(-1412, 1050, 2235);
	  COL_VERTEX(-1535, 1024, 2184);
	  COL_VERTEX(-1535, 998, 2184);
	  COL_VERTEX(-1641, 998, 2103);
	  COL_VERTEX(-1641, 973, 2103);
	  COL_VERTEX(-1722, 947, 1997);
	  COL_VERTEX(-1722, 973, 1997);
	  COL_VERTEX(-1774, 947, 1873);
	  COL_VERTEX(-1791, 922, 1741);
	  COL_VERTEX(-1774, 870, 1608);
	  COL_VERTEX(-1774, 896, 1608);
	  COL_VERTEX(-1279, 845, 1741);
	  COL_VERTEX(-1722, 845, 1485);
	  COL_VERTEX(-1535, 794, 1297);
	  COL_VERTEX(-1412, 768, 1246);
	  COL_VERTEX(-1279, 742, 1229);
	  COL_VERTEX(-1146, 717, 1246);
	  COL_VERTEX(-1146, 742, 1246);
	  COL_VERTEX(-1023, 717, 1297);
	  COL_VERTEX(-1023, 691, 1297);
	  COL_VERTEX(-917, 691, 1379);
	  COL_VERTEX(-917, 666, 1379);
	  COL_VERTEX(-836, 666, 1485);
	  COL_VERTEX(-836, 640, 1485);
	  COL_VERTEX(-784, 640, 1608);
	  COL_VERTEX(-1279, 614, 1741);
	  COL_VERTEX(-844, 1178, 2560);
	  COL_VERTEX(-1202, 1178, 2560);
	  COL_VERTEX(-1177, 512, 2970);
	  COL_VERTEX(-1177, 512, 3021);
	  COL_VERTEX(-869, 512, 3021);
	  COL_VERTEX(-1177, 768, 2970);
	  COL_VERTEX(-1351, 626, 1668);
	  COL_VERTEX(-1381, 614, 1741);
	  COL_VERTEX(-1279, 631, 1638);
	  COL_VERTEX(-1207, 626, 1668);
	  COL_VERTEX(-1207, 614, 1668);
	  COL_VERTEX(-1279, 1818, 1229);
	  COL_TRI_INIT(SURFACE_DEFAULT, 1799);
	  COL_TRI(239, 238, 240);
	  COL_TRI(228, 229, 230);
	  COL_TRI(228, 231, 229);
	  COL_TRI(230, 229, 232);
	  COL_TRI(230, 232, 233);
	  COL_TRI(233, 232, 234);
	  COL_TRI(233, 234, 235);
	  COL_TRI(236, 237, 238);
	  COL_TRI(236, 238, 239);
	  COL_TRI(244, 1026, 1027);
	  COL_TRI(239, 240, 241);
	  COL_TRI(241, 240, 1021);
	  COL_TRI(241, 1021, 1022);
	  COL_TRI(242, 1023, 243);
	  COL_TRI(242, 1024, 1023);
	  COL_TRI(243, 1023, 1025);
	  COL_TRI(243, 1025, 244);
	  COL_TRI(244, 1025, 1026);
	  COL_TRI(245, 1028, 246);
	  COL_TRI(245, 1029, 1028);
	  COL_TRI(246, 1028, 1030);
	  COL_TRI(246, 1030, 247);
	  COL_TRI(247, 1030, 1031);
	  COL_TRI(247, 1031, 1032);
	  COL_TRI(248, 423, 1033);
	  COL_TRI(248, 1034, 423);
	  COL_TRI(248, 1033, 252);
	  COL_TRI(248, 252, 255);
	  COL_TRI(252, 1036, 251);
	  COL_TRI(250, 261, 1034);
	  COL_TRI(250, 1034, 1038);
	  COL_TRI(251, 1034, 261);
	  COL_TRI(251, 423, 1034);
	  COL_TRI(249, 1038, 1034);
	  COL_TRI(249, 1034, 248);
	  COL_TRI(251, 1036, 423);
	  COL_TRI(252, 1035, 1039);
	  COL_TRI(252, 1033, 1035);
	  COL_TRI(253, 252, 1039);
	  COL_TRI(255, 251, 1037);
	  COL_TRI(252, 251, 255);
	  COL_TRI(254, 1037, 251);
	  COL_TRI(251, 261, 259);
	  COL_TRI(251, 259, 254);
	  COL_TRI(255, 1037, 256);
	  COL_TRI(256, 1037, 1038);
	  COL_TRI(256, 1038, 249);
	  COL_TRI(248, 255, 256);
	  COL_TRI(248, 256, 249);
	  COL_TRI(254, 1038, 1037);
	  COL_TRI(250, 257, 1040);
	  COL_TRI(254, 258, 257);
	  COL_TRI(26, 1040, 257);
	  COL_TRI(254, 257, 250);
	  COL_TRI(257, 258, 29);
	  COL_TRI(257, 29, 26);
	  COL_TRI(258, 31, 29);
	  COL_TRI(26, 25, 1040);
	  COL_TRI(259, 260, 258);
	  COL_TRI(259, 258, 254);
	  COL_TRI(258, 260, 31);
	  COL_TRI(260, 25, 31);
	  COL_TRI(261, 1040, 260);
	  COL_TRI(261, 260, 259);
	  COL_TRI(260, 1040, 25);
	  COL_TRI(250, 1040, 261);
	  COL_TRI(267, 1042, 1045);
	  COL_TRI(254, 250, 1038);
	  COL_TRI(262, 1041, 263);
	  COL_TRI(262, 263, 264);
	  COL_TRI(263, 1041, 265);
	  COL_TRI(264, 263, 1042);
	  COL_TRI(263, 265, 1042);
	  COL_TRI(265, 1043, 293);
	  COL_TRI(265, 293, 1044);
	  COL_TRI(266, 264, 1042);
	  COL_TRI(267, 266, 1042);
	  COL_TRI(266, 269, 264);
	  COL_TRI(269, 262, 264);
	  COL_TRI(270, 269, 286);
	  COL_TRI(270, 1046, 269);
	  COL_TRI(267, 271, 266);
	  COL_TRI(271, 1047, 266);
	  COL_TRI(272, 266, 1047);
	  COL_TRI(273, 253, 1048);
	  COL_TRI(253, 1039, 281);
	  COL_TRI(274, 1033, 273);
	  COL_TRI(274, 1035, 1033);
	  COL_TRI(273, 1048, 424);
	  COL_TRI(275, 1039, 1035);
	  COL_TRI(275, 1049, 1039);
	  COL_TRI(279, 1056, 1057);
	  COL_TRI(276, 1050, 1051);
	  COL_TRI(276, 1051, 319);
	  COL_TRI(277, 1050, 276);
	  COL_TRI(277, 1052, 1050);
	  COL_TRI(278, 1053, 1054);
	  COL_TRI(278, 1055, 1053);
	  COL_TRI(279, 1057, 271);
	  COL_TRI(280, 1056, 279);
	  COL_TRI(280, 1058, 1056);
	  COL_TRI(281, 1058, 280);
	  COL_TRI(281, 1049, 1058);
	  COL_TRI(267, 1059, 282);
	  COL_TRI(267, 284, 1059);
	  COL_TRI(282, 1059, 1060);
	  COL_TRI(285, 1042, 265);
	  COL_TRI(282, 1060, 283);
	  COL_TRI(283, 1060, 275);
	  COL_TRI(283, 275, 274);
	  COL_TRI(284, 1045, 268);
	  COL_TRI(284, 267, 1045);
	  COL_TRI(268, 1045, 1042);
	  COL_TRI(268, 1042, 285);
	  COL_TRI(285, 265, 1044);
	  COL_TRI(272, 1047, 287);
	  COL_TRI(286, 266, 272);
	  COL_TRI(287, 1047, 271);
	  COL_TRI(287, 271, 1057);
	  COL_TRI(288, 289, 270);
	  COL_TRI(288, 270, 293);
	  COL_TRI(289, 292, 1046);
	  COL_TRI(289, 1046, 270);
	  COL_TRI(290, 291, 292);
	  COL_TRI(291, 288, 293);
	  COL_TRI(291, 293, 1043);
	  COL_TRI(292, 291, 1043);
	  COL_TRI(292, 1043, 1046);
	  COL_TRI(293, 270, 286);
	  COL_TRI(293, 286, 1044);
	  COL_TRI(286, 269, 266);
	  COL_TRI(294, 1061, 295);
	  COL_TRI(294, 1062, 1061);
	  COL_TRI(295, 1052, 277);
	  COL_TRI(295, 1061, 1052);
	  COL_TRI(299, 1065, 298);
	  COL_TRI(296, 1063, 297);
	  COL_TRI(296, 1064, 1063);
	  COL_TRI(297, 1062, 294);
	  COL_TRI(297, 1063, 1062);
	  COL_TRI(298, 1065, 1064);
	  COL_TRI(298, 1064, 296);
	  COL_TRI(302, 1069, 1068);
	  COL_TRI(299, 1066, 1065);
	  COL_TRI(300, 1067, 1066);
	  COL_TRI(300, 1066, 299);
	  COL_TRI(301, 1068, 1067);
	  COL_TRI(301, 1067, 300);
	  COL_TRI(302, 1068, 301);
	  COL_TRI(306, 1070, 303);
	  COL_TRI(303, 1070, 1069);
	  COL_TRI(303, 1069, 302);
	  COL_TRI(304, 1071, 305);
	  COL_TRI(304, 1072, 1071);
	  COL_TRI(305, 1073, 307);
	  COL_TRI(305, 1071, 1073);
	  COL_TRI(309, 281, 274);
	  COL_TRI(306, 1074, 1070);
	  COL_TRI(307, 1073, 1074);
	  COL_TRI(307, 1074, 306);
	  COL_TRI(308, 1075, 1076);
	  COL_TRI(308, 1076, 309);
	  COL_TRI(309, 1076, 281);
	  COL_TRI(313, 1079, 312);
	  COL_TRI(310, 1077, 1075);
	  COL_TRI(310, 1075, 308);
	  COL_TRI(311, 1078, 1077);
	  COL_TRI(311, 1077, 310);
	  COL_TRI(312, 1079, 1078);
	  COL_TRI(312, 1078, 311);
	  COL_TRI(316, 1084, 1083);
	  COL_TRI(313, 1080, 1079);
	  COL_TRI(314, 1081, 1080);
	  COL_TRI(314, 1080, 313);
	  COL_TRI(315, 1082, 1081);
	  COL_TRI(315, 1081, 314);
	  COL_TRI(316, 1083, 317);
	  COL_TRI(320, 1085, 1087);
	  COL_TRI(317, 1085, 320);
	  COL_TRI(317, 1083, 1085);
	  COL_TRI(318, 1086, 1084);
	  COL_TRI(318, 1084, 316);
	  COL_TRI(319, 1051, 1086);
	  COL_TRI(319, 1086, 318);
	  COL_TRI(323, 1089, 1082);
	  COL_TRI(320, 1087, 321);
	  COL_TRI(321, 1088, 322);
	  COL_TRI(321, 1087, 1088);
	  COL_TRI(322, 1089, 323);
	  COL_TRI(322, 1088, 1089);
	  COL_TRI(323, 1082, 315);
	  COL_TRI(327, 1093, 326);
	  COL_TRI(324, 1090, 1091);
	  COL_TRI(324, 1091, 337);
	  COL_TRI(325, 1090, 324);
	  COL_TRI(325, 1092, 1090);
	  COL_TRI(326, 1093, 1092);
	  COL_TRI(326, 1092, 325);
	  COL_TRI(329, 1096, 1097);
	  COL_TRI(327, 1094, 1093);
	  COL_TRI(69, 68, 1095);
	  COL_TRI(69, 1095, 328);
	  COL_TRI(328, 1096, 329);
	  COL_TRI(328, 1095, 1096);
	  COL_TRI(329, 1097, 330);
	  COL_TRI(333, 1100, 341);
	  COL_TRI(330, 1097, 1098);
	  COL_TRI(330, 1098, 332);
	  COL_TRI(331, 1099, 1094);
	  COL_TRI(331, 1094, 327);
	  COL_TRI(332, 1098, 1099);
	  COL_TRI(332, 1099, 331);
	  COL_TRI(336, 1103, 335);
	  COL_TRI(333, 1101, 1100);
	  COL_TRI(334, 1102, 1101);
	  COL_TRI(334, 1101, 333);
	  COL_TRI(335, 1103, 1102);
	  COL_TRI(335, 1102, 334);
	  COL_TRI(336, 1104, 1103);
	  COL_TRI(340, 1106, 1107);
	  COL_TRI(337, 1105, 338);
	  COL_TRI(337, 1091, 1105);
	  COL_TRI(338, 1106, 340);
	  COL_TRI(338, 1105, 1106);
	  COL_TRI(339, 1107, 1104);
	  COL_TRI(339, 1104, 336);
	  COL_TRI(343, 1109, 1110);
	  COL_TRI(340, 1107, 339);
	  COL_TRI(341, 1100, 1108);
	  COL_TRI(341, 1108, 342);
	  COL_TRI(342, 1109, 343);
	  COL_TRI(342, 1108, 1109);
	  COL_TRI(343, 1110, 344);
	  COL_TRI(347, 1113, 1114);
	  COL_TRI(344, 1111, 345);
	  COL_TRI(344, 1110, 1111);
	  COL_TRI(345, 1112, 346);
	  COL_TRI(345, 1111, 1112);
	  COL_TRI(346, 1113, 347);
	  COL_TRI(346, 1112, 1113);
	  COL_TRI(350, 1115, 349);
	  COL_TRI(347, 1114, 348);
	  COL_TRI(348, 1114, 1072);
	  COL_TRI(348, 1072, 304);
	  COL_TRI(349, 65, 64);
	  COL_TRI(349, 1115, 65);
	  COL_TRI(350, 1116, 1115);
	  COL_TRI(354, 1120, 1119);
	  COL_TRI(351, 1117, 1116);
	  COL_TRI(351, 1116, 350);
	  COL_TRI(352, 1118, 1117);
	  COL_TRI(352, 1117, 351);
	  COL_TRI(353, 1119, 1118);
	  COL_TRI(353, 1118, 352);
	  COL_TRI(357, 1124, 400);
	  COL_TRI(354, 1119, 353);
	  COL_TRI(355, 1120, 354);
	  COL_TRI(355, 1121, 1120);
	  COL_TRI(356, 1122, 1123);
	  COL_TRI(356, 1123, 357);
	  COL_TRI(357, 1123, 1124);
	  COL_TRI(361, 1128, 1127);
	  COL_TRI(358, 1125, 1122);
	  COL_TRI(358, 1122, 356);
	  COL_TRI(359, 1125, 358);
	  COL_TRI(359, 1126, 1125);
	  COL_TRI(360, 1127, 1126);
	  COL_TRI(360, 1126, 359);
	  COL_TRI(364, 1132, 1131);
	  COL_TRI(361, 1127, 360);
	  COL_TRI(362, 1128, 361);
	  COL_TRI(362, 1129, 1128);
	  COL_TRI(363, 1130, 1129);
	  COL_TRI(363, 1129, 362);
	  COL_TRI(364, 1131, 365);
	  COL_TRI(368, 1136, 369);
	  COL_TRI(365, 1133, 368);
	  COL_TRI(365, 1131, 1133);
	  COL_TRI(366, 1134, 1132);
	  COL_TRI(366, 1132, 364);
	  COL_TRI(367, 1135, 1134);
	  COL_TRI(367, 1134, 366);
	  COL_TRI(371, 1138, 1130);
	  COL_TRI(368, 1133, 1136);
	  COL_TRI(369, 1137, 370);
	  COL_TRI(369, 1136, 1137);
	  COL_TRI(370, 1137, 1138);
	  COL_TRI(370, 1138, 371);
	  COL_TRI(371, 1130, 363);
	  COL_TRI(375, 1143, 1142);
	  COL_TRI(372, 1139, 385);
	  COL_TRI(372, 1140, 1139);
	  COL_TRI(373, 1141, 374);
	  COL_TRI(373, 1142, 1141);
	  COL_TRI(374, 1140, 372);
	  COL_TRI(374, 1141, 1140);
	  COL_TRI(378, 1145, 377);
	  COL_TRI(375, 1142, 373);
	  COL_TRI(376, 1144, 1143);
	  COL_TRI(376, 1143, 375);
	  COL_TRI(377, 1144, 376);
	  COL_TRI(377, 1145, 1144);
	  COL_TRI(378, 1146, 1145);
	  COL_TRI(382, 1151, 384);
	  COL_TRI(379, 1147, 1146);
	  COL_TRI(379, 1146, 378);
	  COL_TRI(380, 1148, 1147);
	  COL_TRI(380, 1147, 379);
	  COL_TRI(381, 1149, 382);
	  COL_TRI(381, 1150, 1149);
	  COL_TRI(385, 1139, 1153);
	  COL_TRI(382, 1149, 1151);
	  COL_TRI(383, 1152, 1148);
	  COL_TRI(383, 1148, 380);
	  COL_TRI(384, 1152, 383);
	  COL_TRI(384, 1151, 1152);
	  COL_TRI(385, 1153, 386);
	  COL_TRI(389, 1157, 1155);
	  COL_TRI(386, 1153, 1154);
	  COL_TRI(386, 1154, 387);
	  COL_TRI(387, 1154, 1135);
	  COL_TRI(387, 1135, 367);
	  COL_TRI(388, 1155, 1156);
	  COL_TRI(388, 1156, 396);
	  COL_TRI(392, 1161, 1160);
	  COL_TRI(389, 1155, 388);
	  COL_TRI(390, 1158, 1157);
	  COL_TRI(390, 1157, 389);
	  COL_TRI(391, 1158, 390);
	  COL_TRI(391, 1159, 1158);
	  COL_TRI(392, 1160, 393);
	  COL_TRI(396, 1121, 355);
	  COL_TRI(393, 1162, 395);
	  COL_TRI(393, 1160, 1162);
	  COL_TRI(394, 1163, 1159);
	  COL_TRI(394, 1159, 391);
	  COL_TRI(395, 1162, 1163);
	  COL_TRI(395, 1163, 394);
	  COL_TRI(399, 1165, 397);
	  COL_TRI(396, 1156, 1121);
	  COL_TRI(397, 1164, 398);
	  COL_TRI(397, 1165, 1164);
	  COL_TRI(398, 1164, 1166);
	  COL_TRI(398, 1166, 401);
	  COL_TRI(399, 1167, 1165);
	  COL_TRI(403, 1170, 404);
	  COL_TRI(400, 1124, 1167);
	  COL_TRI(400, 1167, 399);
	  COL_TRI(401, 1168, 402);
	  COL_TRI(401, 1166, 1168);
	  COL_TRI(402, 1168, 1169);
	  COL_TRI(402, 1169, 403);
	  COL_TRI(406, 1172, 1173);
	  COL_TRI(403, 1169, 1170);
	  COL_TRI(404, 1171, 405);
	  COL_TRI(404, 1170, 1171);
	  COL_TRI(405, 1171, 1172);
	  COL_TRI(405, 1172, 406);
	  COL_TRI(406, 1173, 408);
	  COL_TRI(410, 1175, 1176);
	  COL_TRI(407, 1174, 1175);
	  COL_TRI(407, 1175, 410);
	  COL_TRI(408, 1173, 1174);
	  COL_TRI(408, 1174, 407);
	  COL_TRI(409, 1176, 1177);
	  COL_TRI(409, 1177, 411);
	  COL_TRI(413, 1179, 1150);
	  COL_TRI(410, 1176, 409);
	  COL_TRI(411, 1177, 1178);
	  COL_TRI(411, 1178, 412);
	  COL_TRI(412, 1178, 1161);
	  COL_TRI(412, 1161, 392);
	  COL_TRI(413, 1150, 381);
	  COL_TRI(417, 1184, 1183);
	  COL_TRI(414, 1180, 415);
	  COL_TRI(414, 1181, 1180);
	  COL_TRI(415, 1182, 418);
	  COL_TRI(415, 1180, 1182);
	  COL_TRI(416, 1181, 414);
	  COL_TRI(416, 1183, 1181);
	  COL_TRI(420, 1187, 421);
	  COL_TRI(417, 1183, 416);
	  COL_TRI(418, 1185, 419);
	  COL_TRI(418, 1182, 1185);
	  COL_TRI(419, 1186, 420);
	  COL_TRI(419, 1185, 1186);
	  COL_TRI(420, 1186, 1187);
	  COL_TRI(424, 1189, 425);
	  COL_TRI(421, 1188, 422);
	  COL_TRI(421, 1187, 1188);
	  COL_TRI(422, 1179, 413);
	  COL_TRI(422, 1188, 1179);
	  COL_TRI(423, 253, 273);
	  COL_TRI(423, 1036, 253);
	  COL_TRI(28, 27, 30);
	  COL_TRI(424, 1048, 1189);
	  COL_TRI(425, 1190, 426);
	  COL_TRI(425, 1189, 1190);
	  COL_TRI(426, 1184, 417);
	  COL_TRI(426, 1190, 1184);
	  COL_TRI(28, 24, 27);
	  COL_TRI(208, 166, 160);
	  COL_TRI(208, 182, 166);
	  COL_TRI(169, 160, 166);
	  COL_TRI(169, 173, 160);
	  COL_TRI(427, 428, 1191);
	  COL_TRI(427, 430, 428);
	  COL_TRI(428, 429, 1192);
	  COL_TRI(428, 1192, 1191);
	  COL_TRI(429, 1193, 1192);
	  COL_TRI(429, 1194, 1193);
	  COL_TRI(430, 1194, 429);
	  COL_TRI(430, 429, 428);
	  COL_TRI(219, 431, 1195);
	  COL_TRI(431, 433, 1195);
	  COL_TRI(432, 525, 431);
	  COL_TRI(432, 431, 527);
	  COL_TRI(433, 1196, 434);
	  COL_TRI(433, 434, 1195);
	  COL_TRI(436, 1201, 1202);
	  COL_TRI(218, 1195, 434);
	  COL_TRI(218, 219, 1195);
	  COL_TRI(434, 1196, 435);
	  COL_TRI(218, 434, 435);
	  COL_TRI(435, 1198, 1199);
	  COL_TRI(435, 1199, 218);
	  COL_TRI(435, 526, 1200);
	  COL_TRI(435, 290, 526);
	  COL_TRI(440, 1208, 437);
	  COL_TRI(436, 1202, 1203);
	  COL_TRI(438, 1204, 439);
	  COL_TRI(438, 1205, 1204);
	  COL_TRI(439, 1204, 1206);
	  COL_TRI(439, 1206, 441);
	  COL_TRI(440, 1207, 1208);
	  COL_TRI(172, 1212, 1203);
	  COL_TRI(437, 1208, 1201);
	  COL_TRI(437, 1201, 436);
	  COL_TRI(441, 1206, 1209);
	  COL_TRI(441, 1209, 1210);
	  COL_TRI(172, 1203, 1211);
	  COL_TRI(168, 172, 1211);
	  COL_TRI(444, 1217, 1218);
	  COL_TRI(438, 168, 1213);
	  COL_TRI(438, 451, 168);
	  COL_TRI(168, 1211, 1213);
	  COL_TRI(442, 1214, 1215);
	  COL_TRI(442, 1215, 447);
	  COL_TRI(443, 1216, 442);
	  COL_TRI(444, 1218, 445);
	  COL_TRI(445, 1220, 1221);
	  COL_TRI(445, 1221, 456);
	  COL_TRI(446, 443, 447);
	  COL_TRI(443, 442, 447);
	  COL_TRI(447, 1222, 444);
	  COL_TRI(444, 456, 448);
	  COL_TRI(444, 445, 456);
	  COL_TRI(448, 453, 452);
	  COL_TRI(448, 449, 444);
	  COL_TRI(448, 452, 449);
	  COL_TRI(449, 447, 444);
	  COL_TRI(449, 446, 447);
	  COL_TRI(449, 450, 446);
	  COL_TRI(450, 455, 446);
	  COL_TRI(449, 1228, 1227);
	  COL_TRI(171, 457, 1224);
	  COL_TRI(171, 1224, 1212);
	  COL_TRI(170, 457, 171);
	  COL_TRI(170, 1225, 457);
	  COL_TRI(451, 1225, 170);
	  COL_TRI(451, 1226, 1225);
	  COL_TRI(449, 1227, 450);
	  COL_TRI(452, 1228, 449);
	  COL_TRI(443, 1219, 1216);
	  COL_TRI(450, 1229, 455);
	  COL_TRI(450, 1227, 1229);
	  COL_TRI(452, 1230, 1228);
	  COL_TRI(453, 1230, 452);
	  COL_TRI(454, 1219, 443);
	  COL_TRI(446, 454, 443);
	  COL_TRI(455, 1231, 446);
	  COL_TRI(456, 1221, 1223);
	  COL_TRI(456, 1223, 448);
	  COL_TRI(448, 1233, 1232);
	  COL_TRI(448, 1232, 453);
	  COL_TRI(455, 1229, 1231);
	  COL_TRI(453, 1232, 1230);
	  COL_TRI(172, 165, 161);
	  COL_TRI(459, 472, 469);
	  COL_TRI(172, 168, 165);
	  COL_TRI(173, 169, 170);
	  COL_TRI(173, 170, 171);
	  COL_TRI(457, 1225, 1226);
	  COL_TRI(457, 1226, 1224);
	  COL_TRI(458, 459, 469);
	  COL_TRI(463, 1237, 458);
	  COL_TRI(460, 472, 1234);
	  COL_TRI(461, 471, 472);
	  COL_TRI(461, 472, 1235);
	  COL_TRI(459, 1234, 472);
	  COL_TRI(458, 469, 463);
	  COL_TRI(462, 469, 1236);
	  COL_TRI(460, 1234, 1237);
	  COL_TRI(463, 460, 1237);
	  COL_TRI(464, 475, 465);
	  COL_TRI(465, 473, 468);
	  COL_TRI(465, 475, 473);
	  COL_TRI(465, 468, 467);
	  COL_TRI(465, 467, 461);
	  COL_TRI(465, 461, 1235);
	  COL_TRI(465, 1235, 462);
	  COL_TRI(465, 462, 466);
	  COL_TRI(465, 466, 464);
	  COL_TRI(466, 1236, 1238);
	  COL_TRI(466, 1238, 464);
	  COL_TRI(462, 1236, 466);
	  COL_TRI(464, 1238, 475);
	  COL_TRI(467, 471, 461);
	  COL_TRI(467, 474, 471);
	  COL_TRI(468, 474, 467);
	  COL_TRI(468, 473, 474);
	  COL_TRI(463, 462, 1235);
	  COL_TRI(463, 1235, 460);
	  COL_TRI(469, 470, 1236);
	  COL_TRI(469, 472, 478);
	  COL_TRI(469, 478, 470);
	  COL_TRI(476, 34, 36);
	  COL_TRI(470, 480, 1238);
	  COL_TRI(470, 1238, 1236);
	  COL_TRI(471, 1239, 478);
	  COL_TRI(472, 471, 478);
	  COL_TRI(471, 474, 1239);
	  COL_TRI(473, 480, 1239);
	  COL_TRI(474, 473, 1239);
	  COL_TRI(473, 475, 480);
	  COL_TRI(475, 1238, 480);
	  COL_TRI(476, 477, 34);
	  COL_TRI(476, 39, 1240);
	  COL_TRI(477, 32, 34);
	  COL_TRI(476, 36, 39);
	  COL_TRI(477, 479, 32);
	  COL_TRI(478, 1239, 477);
	  COL_TRI(478, 477, 476);
	  COL_TRI(479, 39, 32);
	  COL_TRI(479, 1240, 39);
	  COL_TRI(480, 479, 477);
	  COL_TRI(481, 1241, 483);
	  COL_TRI(478, 1240, 470);
	  COL_TRI(478, 476, 1240);
	  COL_TRI(480, 477, 1239);
	  COL_TRI(480, 470, 1240);
	  COL_TRI(480, 1240, 479);
	  COL_TRI(481, 483, 488);
	  COL_TRI(40, 1241, 481);
	  COL_TRI(41, 482, 1241);
	  COL_TRI(40, 41, 1241);
	  COL_TRI(482, 485, 484);
	  COL_TRI(482, 484, 487);
	  COL_TRI(483, 1241, 482);
	  COL_TRI(483, 482, 487);
	  COL_TRI(41, 42, 482);
	  COL_TRI(42, 485, 482);
	  COL_TRI(485, 40, 481);
	  COL_TRI(484, 485, 481);
	  COL_TRI(484, 481, 488);
	  COL_TRI(42, 43, 485);
	  COL_TRI(485, 43, 40);
	  COL_TRI(44, 47, 46);
	  COL_TRI(44, 46, 45);
	  COL_TRI(486, 1242, 487);
	  COL_TRI(486, 487, 484);
	  COL_TRI(489, 495, 496);
	  COL_TRI(487, 1242, 1243);
	  COL_TRI(483, 487, 1243);
	  COL_TRI(484, 488, 1244);
	  COL_TRI(484, 1244, 492);
	  COL_TRI(486, 484, 492);
	  COL_TRI(483, 1243, 1245);
	  COL_TRI(488, 483, 1246);
	  COL_TRI(483, 1245, 1246);
	  COL_TRI(488, 1246, 1247);
	  COL_TRI(488, 1247, 1244);
	  COL_TRI(494, 1244, 489);
	  COL_TRI(489, 496, 490);
	  COL_TRI(490, 492, 518);
	  COL_TRI(490, 518, 491);
	  COL_TRI(491, 489, 490);
	  COL_TRI(492, 1248, 518);
	  COL_TRI(491, 494, 489);
	  COL_TRI(493, 486, 492);
	  COL_TRI(493, 492, 496);
	  COL_TRI(492, 1244, 1248);
	  COL_TRI(494, 1248, 1244);
	  COL_TRI(496, 500, 501);
	  COL_TRI(495, 1244, 1247);
	  COL_TRI(495, 1247, 497);
	  COL_TRI(496, 495, 497);
	  COL_TRI(497, 1247, 1246);
	  COL_TRI(497, 1246, 498);
	  COL_TRI(496, 497, 498);
	  COL_TRI(498, 1246, 1245);
	  COL_TRI(498, 1245, 499);
	  COL_TRI(496, 498, 499);
	  COL_TRI(499, 1245, 1243);
	  COL_TRI(499, 1243, 500);
	  COL_TRI(496, 499, 500);
	  COL_TRI(500, 1243, 1242);
	  COL_TRI(500, 1242, 501);
	  COL_TRI(501, 1242, 486);
	  COL_TRI(496, 501, 493);
	  COL_TRI(501, 486, 493);
	  COL_TRI(502, 1249, 1250);
	  COL_TRI(502, 1250, 552);
	  COL_TRI(503, 1250, 1251);
	  COL_TRI(504, 1249, 159);
	  COL_TRI(504, 529, 1249);
	  COL_TRI(507, 1255, 1256);
	  COL_TRI(503, 1251, 550);
	  COL_TRI(505, 1251, 1252);
	  COL_TRI(505, 1252, 548);
	  COL_TRI(506, 1252, 1253);
	  COL_TRI(506, 1253, 1254);
	  COL_TRI(507, 440, 1255);
	  COL_TRI(510, 155, 511);
	  COL_TRI(508, 1210, 1257);
	  COL_TRI(508, 1257, 1258);
	  COL_TRI(214, 509, 1259);
	  COL_TRI(214, 215, 509);
	  COL_TRI(509, 156, 131);
	  COL_TRI(509, 131, 520);
	  COL_TRI(511, 216, 217);
	  COL_TRI(511, 217, 1260);
	  COL_TRI(512, 1262, 513);
	  COL_TRI(513, 1262, 521);
	  COL_TRI(513, 521, 524);
	  COL_TRI(512, 1263, 1262);
	  COL_TRI(514, 1264, 512);
	  COL_TRI(515, 1265, 516);
	  COL_TRI(516, 1265, 1266);
	  COL_TRI(516, 1266, 517);
	  COL_TRI(517, 1267, 508);
	  COL_TRI(517, 508, 1268);
	  COL_TRI(515, 1261, 1265);
	  COL_TRI(518, 519, 1269);
	  COL_TRI(518, 1248, 519);
	  COL_TRI(491, 518, 1269);
	  COL_TRI(215, 1271, 1261);
	  COL_TRI(519, 1248, 494);
	  COL_TRI(519, 494, 1270);
	  COL_TRI(491, 1269, 515);
	  COL_TRI(494, 491, 515);
	  COL_TRI(494, 515, 1270);
	  COL_TRI(520, 130, 1261);
	  COL_TRI(520, 1261, 1269);
	  COL_TRI(215, 214, 1271);
	  COL_TRI(510, 85, 155);
	  COL_TRI(215, 1261, 130);
	  COL_TRI(521, 216, 82);
	  COL_TRI(521, 217, 216);
	  COL_TRI(521, 1272, 217);
	  COL_TRI(522, 521, 82);
	  COL_TRI(522, 82, 510);
	  COL_TRI(523, 458, 1237);
	  COL_TRI(523, 524, 458);
	  COL_TRI(523, 1237, 1234);
	  COL_TRI(523, 1234, 1273);
	  COL_TRI(524, 459, 458);
	  COL_TRI(524, 522, 459);
	  COL_TRI(522, 1273, 1234);
	  COL_TRI(522, 1234, 459);
	  COL_TRI(525, 432, 288);
	  COL_TRI(526, 432, 527);
	  COL_TRI(528, 1198, 1200);
	  COL_TRI(290, 525, 291);
	  COL_TRI(527, 551, 545);
	  COL_TRI(527, 1197, 551);
	  COL_TRI(526, 527, 1200);
	  COL_TRI(526, 290, 292);
	  COL_TRI(526, 292, 289);
	  COL_TRI(529, 504, 753);
	  COL_TRI(530, 504, 159);
	  COL_TRI(531, 1276, 529);
	  COL_TRI(530, 159, 158);
	  COL_TRI(530, 1277, 754);
	  COL_TRI(530, 1276, 1277);
	  COL_TRI(532, 530, 158);
	  COL_TRI(532, 1276, 530);
	  COL_TRI(533, 1278, 532);
	  COL_TRI(533, 532, 1199);
	  COL_TRI(531, 1277, 1276);
	  COL_TRI(534, 541, 1279);
	  COL_TRI(534, 1279, 1273);
	  COL_TRI(523, 1279, 1280);
	  COL_TRI(519, 1254, 1253);
	  COL_TRI(519, 549, 1254);
	  COL_TRI(535, 1281, 549);
	  COL_TRI(535, 549, 1270);
	  COL_TRI(514, 1255, 1264);
	  COL_TRI(536, 537, 533);
	  COL_TRI(533, 1199, 1198);
	  COL_TRI(533, 1198, 536);
	  COL_TRI(541, 1280, 1279);
	  COL_TRI(536, 1282, 537);
	  COL_TRI(537, 1282, 538);
	  COL_TRI(537, 538, 544);
	  COL_TRI(538, 1283, 1284);
	  COL_TRI(538, 1284, 544);
	  COL_TRI(539, 1284, 1283);
	  COL_TRI(540, 1285, 539);
	  COL_TRI(539, 1283, 540);
	  COL_TRI(540, 1280, 1285);
	  COL_TRI(541, 1285, 1280);
	  COL_TRI(523, 1280, 542);
	  COL_TRI(542, 540, 1283);
	  COL_TRI(542, 1283, 543);
	  COL_TRI(543, 538, 1282);
	  COL_TRI(543, 1282, 528);
	  COL_TRI(528, 536, 1198);
	  COL_TRI(541, 534, 1286);
	  COL_TRI(541, 1286, 1285);
	  COL_TRI(539, 1286, 1287);
	  COL_TRI(539, 1287, 1284);
	  COL_TRI(544, 1287, 1278);
	  COL_TRI(544, 1278, 537);
	  COL_TRI(545, 1274, 1275);
	  COL_TRI(545, 1275, 546);
	  COL_TRI(546, 1288, 547);
	  COL_TRI(546, 547, 535);
	  COL_TRI(552, 1274, 551);
	  COL_TRI(547, 505, 548);
	  COL_TRI(548, 1281, 547);
	  COL_TRI(548, 506, 1281);
	  COL_TRI(549, 1281, 506);
	  COL_TRI(547, 1288, 505);
	  COL_TRI(549, 506, 1254);
	  COL_TRI(550, 1275, 1274);
	  COL_TRI(550, 1274, 503);
	  COL_TRI(550, 505, 1288);
	  COL_TRI(550, 1288, 1275);
	  COL_TRI(551, 502, 552);
	  COL_TRI(552, 503, 1274);
	  COL_TRI(529, 753, 531);
	  COL_TRI(551, 1197, 502);
	  COL_TRI(219, 502, 1197);
	  COL_TRI(219, 1197, 431);
	  COL_TRI(525, 288, 291);
	  COL_TRI(432, 526, 289);
	  COL_TRI(432, 289, 288);
	  COL_TRI(50, 51, 564);
	  COL_TRI(504, 530, 754);
	  COL_TRI(504, 754, 753);
	  COL_TRI(54, 15, 9);
	  COL_TRI(54, 9, 52);
	  COL_TRI(10, 9, 1289);
	  COL_TRI(553, 52, 53);
	  COL_TRI(558, 10, 1289);
	  COL_TRI(51, 6, 1);
	  COL_TRI(51, 1, 49);
	  COL_TRI(554, 6, 5);
	  COL_TRI(555, 553, 53);
	  COL_TRI(556, 1289, 553);
	  COL_TRI(557, 556, 553);
	  COL_TRI(558, 555, 53);
	  COL_TRI(558, 53, 10);
	  COL_TRI(562, 5, 50);
	  COL_TRI(556, 1291, 1289);
	  COL_TRI(559, 558, 1289);
	  COL_TRI(559, 1289, 1291);
	  COL_TRI(560, 1292, 555);
	  COL_TRI(560, 555, 558);
	  COL_TRI(561, 558, 559);
	  COL_TRI(562, 50, 1290);
	  COL_TRI(50, 564, 1290);
	  COL_TRI(563, 564, 554);
	  COL_TRI(563, 582, 564);
	  COL_TRI(564, 582, 1290);
	  COL_TRI(562, 554, 5);
	  COL_TRI(565, 563, 554);
	  COL_TRI(562, 1290, 1296);
	  COL_TRI(562, 584, 1299);
	  COL_TRI(566, 562, 1299);
	  COL_TRI(567, 1300, 569);
	  COL_TRI(567, 569, 1301);
	  COL_TRI(568, 567, 606);
	  COL_TRI(568, 1302, 567);
	  COL_TRI(569, 1300, 1303);
	  COL_TRI(569, 1303, 570);
	  COL_TRI(569, 570, 572);
	  COL_TRI(569, 572, 1301);
	  COL_TRI(570, 1303, 571);
	  COL_TRI(570, 571, 572);
	  COL_TRI(571, 600, 1305);
	  COL_TRI(571, 1306, 600);
	  COL_TRI(572, 1304, 1301);
	  COL_TRI(572, 609, 1304);
	  COL_TRI(573, 1307, 1308);
	  COL_TRI(573, 1309, 1307);
	  COL_TRI(574, 1311, 1312);
	  COL_TRI(574, 1312, 1313);
	  COL_TRI(575, 1296, 1311);
	  COL_TRI(557, 553, 578);
	  COL_TRI(576, 557, 578);
	  COL_TRI(556, 577, 1291);
	  COL_TRI(577, 578, 1291);
	  COL_TRI(577, 576, 578);
	  COL_TRI(562, 566, 554);
	  COL_TRI(578, 559, 1291);
	  COL_TRI(578, 594, 559);
	  COL_TRI(555, 594, 578);
	  COL_TRI(555, 578, 553);
	  COL_TRI(579, 565, 554);
	  COL_TRI(579, 554, 1314);
	  COL_TRI(580, 579, 1314);
	  COL_TRI(566, 1314, 554);
	  COL_TRI(580, 1314, 582);
	  COL_TRI(581, 1314, 566);
	  COL_TRI(581, 582, 1314);
	  COL_TRI(563, 580, 582);
	  COL_TRI(582, 581, 1290);
	  COL_TRI(561, 583, 1299);
	  COL_TRI(561, 1299, 584);
	  COL_TRI(583, 561, 559);
	  COL_TRI(583, 559, 566);
	  COL_TRI(583, 566, 1299);
	  COL_TRI(584, 562, 558);
	  COL_TRI(584, 558, 561);
	  COL_TRI(558, 1293, 560);
	  COL_TRI(558, 562, 1293);
	  COL_TRI(585, 1293, 586);
	  COL_TRI(586, 1293, 1297);
	  COL_TRI(585, 560, 1293);
	  COL_TRI(562, 1297, 1293);
	  COL_TRI(585, 586, 587);
	  COL_TRI(573, 1292, 560);
	  COL_TRI(573, 560, 585);
	  COL_TRI(562, 1296, 1298);
	  COL_TRI(562, 1298, 1297);
	  COL_TRI(586, 1297, 587);
	  COL_TRI(587, 1297, 1298);
	  COL_TRI(587, 1298, 575);
	  COL_TRI(575, 1298, 1296);
	  COL_TRI(585, 587, 575);
	  COL_TRI(588, 1316, 585);
	  COL_TRI(588, 585, 575);
	  COL_TRI(589, 588, 1317);
	  COL_TRI(589, 1316, 588);
	  COL_TRI(590, 591, 1318);
	  COL_TRI(591, 589, 1317);
	  COL_TRI(591, 1317, 1318);
	  COL_TRI(590, 1318, 1319);
	  COL_TRI(592, 593, 1320);
	  COL_TRI(593, 1319, 1320);
	  COL_TRI(593, 590, 1319);
	  COL_TRI(592, 1320, 1321);
	  COL_TRI(594, 1315, 1294);
	  COL_TRI(594, 1294, 559);
	  COL_TRI(581, 1315, 594);
	  COL_TRI(559, 1294, 1295);
	  COL_TRI(559, 1295, 566);
	  COL_TRI(581, 595, 1315);
	  COL_TRI(566, 595, 581);
	  COL_TRI(566, 1295, 595);
	  COL_TRI(595, 1295, 1294);
	  COL_TRI(595, 1294, 1315);
	  COL_TRI(596, 1306, 597);
	  COL_TRI(597, 1306, 1302);
	  COL_TRI(597, 1302, 598);
	  COL_TRI(601, 606, 603);
	  COL_TRI(598, 1302, 568);
	  COL_TRI(598, 568, 599);
	  COL_TRI(596, 600, 1306);
	  COL_TRI(599, 600, 596);
	  COL_TRI(599, 568, 600);
	  COL_TRI(600, 568, 606);
	  COL_TRI(600, 606, 1305);
	  COL_TRI(601, 1322, 606);
	  COL_TRI(602, 1322, 601);
	  COL_TRI(601, 603, 581);
	  COL_TRI(603, 1290, 581);
	  COL_TRI(603, 1323, 1290);
	  COL_TRI(602, 601, 581);
	  COL_TRI(602, 581, 594);
	  COL_TRI(602, 1324, 1322);
	  COL_TRI(604, 1324, 602);
	  COL_TRI(604, 602, 594);
	  COL_TRI(604, 594, 555);
	  COL_TRI(604, 1305, 1324);
	  COL_TRI(605, 604, 555);
	  COL_TRI(607, 608, 1327);
	  COL_TRI(606, 1324, 1305);
	  COL_TRI(606, 1322, 1324);
	  COL_TRI(606, 567, 1325);
	  COL_TRI(606, 1325, 603);
	  COL_TRI(604, 1326, 571);
	  COL_TRI(604, 571, 1305);
	  COL_TRI(607, 1327, 1310);
	  COL_TRI(608, 1328, 1327);
	  COL_TRI(608, 610, 1328);
	  COL_TRI(609, 607, 1310);
	  COL_TRI(609, 1310, 1304);
	  COL_TRI(610, 611, 1329);
	  COL_TRI(611, 592, 1321);
	  COL_TRI(611, 1321, 1329);
	  COL_TRI(614, 1335, 706);
	  COL_TRI(610, 1329, 1328);
	  COL_TRI(612, 613, 1330);
	  COL_TRI(613, 1331, 1330);
	  COL_TRI(227, 1332, 1333);
	  COL_TRI(227, 222, 1332);
	  COL_TRI(614, 1334, 1335);
	  COL_TRI(619, 1342, 1340);
	  COL_TRI(615, 616, 1336);
	  COL_TRI(616, 634, 635);
	  COL_TRI(616, 635, 1336);
	  COL_TRI(615, 1336, 1337);
	  COL_TRI(617, 618, 1338);
	  COL_TRI(618, 1339, 1338);
	  COL_TRI(618, 1340, 1339);
	  COL_TRI(618, 1341, 1340);
	  COL_TRI(620, 1339, 1343);
	  COL_TRI(620, 1338, 1339);
	  COL_TRI(621, 617, 1338);
	  COL_TRI(621, 1344, 617);
	  COL_TRI(621, 1345, 1346);
	  COL_TRI(621, 1346, 1347);
	  COL_TRI(622, 623, 620);
	  COL_TRI(622, 620, 1343);
	  COL_TRI(623, 622, 1348);
	  COL_TRI(623, 1348, 1349);
	  COL_TRI(624, 1349, 1348);
	  COL_TRI(624, 625, 1349);
	  COL_TRI(625, 624, 1350);
	  COL_TRI(625, 1350, 1351);
	  COL_TRI(626, 1351, 1350);
	  COL_TRI(627, 628, 1352);
	  COL_TRI(627, 1352, 1353);
	  COL_TRI(628, 627, 1354);
	  COL_TRI(629, 1353, 1352);
	  COL_TRI(628, 1354, 689);
	  COL_TRI(630, 1356, 629);
	  COL_TRI(630, 629, 1357);
	  COL_TRI(629, 1356, 1353);
	  COL_TRI(631, 630, 1357);
	  COL_TRI(617, 1344, 1341);
	  COL_TRI(617, 1341, 618);
	  COL_TRI(637, 1366, 1367);
	  COL_TRI(632, 1360, 697);
	  COL_TRI(632, 697, 633);
	  COL_TRI(633, 1361, 632);
	  COL_TRI(634, 697, 1360);
	  COL_TRI(633, 635, 1361);
	  COL_TRI(634, 1360, 1362);
	  COL_TRI(635, 634, 1362);
	  COL_TRI(635, 1362, 1361);
	  COL_TRI(636, 1363, 1364);
	  COL_TRI(636, 1364, 1365);
	  COL_TRI(640, 1374, 642);
	  COL_TRI(637, 1367, 701);
	  COL_TRI(636, 1368, 638);
	  COL_TRI(636, 1369, 1368);
	  COL_TRI(638, 1368, 1370);
	  COL_TRI(638, 1370, 1371);
	  COL_TRI(639, 1371, 1370);
	  COL_TRI(639, 1372, 1371);
	  COL_TRI(640, 1373, 1374);
	  COL_TRI(643, 1379, 1380);
	  COL_TRI(642, 1374, 1375);
	  COL_TRI(642, 1375, 637);
	  COL_TRI(641, 1376, 1373);
	  COL_TRI(641, 1373, 640);
	  COL_TRI(641, 1372, 1377);
	  COL_TRI(641, 1377, 1378);
	  COL_TRI(647, 1386, 648);
	  COL_TRI(644, 1380, 1381);
	  COL_TRI(643, 1380, 644);
	  COL_TRI(644, 1381, 645);
	  COL_TRI(645, 1381, 1382);
	  COL_TRI(645, 1382, 1383);
	  COL_TRI(646, 647, 1384);
	  COL_TRI(646, 1384, 1385);
	  COL_TRI(647, 646, 1386);
	  COL_TRI(651, 1392, 1393);
	  COL_TRI(648, 1386, 1387);
	  COL_TRI(648, 1387, 1388);
	  COL_TRI(649, 1389, 690);
	  COL_TRI(649, 690, 1388);
	  COL_TRI(650, 1390, 1391);
	  COL_TRI(650, 1391, 643);
	  COL_TRI(651, 1393, 1394);
	  COL_TRI(652, 659, 653);
	  COL_TRI(652, 653, 654);
	  COL_TRI(653, 819, 1395);
	  COL_TRI(653, 1395, 654);
	  COL_TRI(654, 1395, 1396);
	  COL_TRI(655, 656, 1397);
	  COL_TRI(655, 660, 656);
	  COL_TRI(654, 1396, 1399);
	  COL_TRI(656, 1398, 685);
	  COL_TRI(656, 685, 1397);
	  COL_TRI(657, 1398, 656);
	  COL_TRI(658, 652, 1399);
	  COL_TRI(652, 654, 1399);
	  COL_TRI(659, 652, 660);
	  COL_TRI(656, 660, 682);
	  COL_TRI(660, 1400, 682);
	  COL_TRI(659, 660, 655);
	  COL_TRI(657, 656, 682);
	  COL_TRI(661, 1401, 1402);
	  COL_TRI(661, 1402, 1403);
	  COL_TRI(662, 663, 1404);
	  COL_TRI(662, 1404, 1405);
	  COL_TRI(663, 1406, 664);
	  COL_TRI(663, 662, 1406);
	  COL_TRI(664, 1406, 1407);
	  COL_TRI(664, 1407, 665);
	  COL_TRI(665, 1407, 1402);
	  COL_TRI(665, 1402, 1401);
	  COL_TRI(666, 670, 1408);
	  COL_TRI(666, 1408, 1409);
	  COL_TRI(670, 1414, 668);
	  COL_TRI(667, 1410, 1411);
	  COL_TRI(667, 1412, 1410);
	  COL_TRI(668, 1413, 669);
	  COL_TRI(669, 1413, 1410);
	  COL_TRI(669, 1410, 1412);
	  COL_TRI(670, 666, 1414);
	  COL_TRI(668, 1414, 1413);
	  COL_TRI(671, 1415, 1416);
	  COL_TRI(671, 1416, 1417);
	  COL_TRI(672, 673, 1418);
	  COL_TRI(673, 1419, 1418);
	  COL_TRI(674, 673, 672);
	  COL_TRI(676, 1400, 658);
	  COL_TRI(675, 1418, 681);
	  COL_TRI(675, 1420, 1418);
	  COL_TRI(658, 1418, 1419);
	  COL_TRI(676, 658, 1419);
	  COL_TRI(677, 679, 1421);
	  COL_TRI(678, 679, 1422);
	  COL_TRI(679, 1400, 676);
	  COL_TRI(679, 676, 1421);
	  COL_TRI(680, 1420, 675);
	  COL_TRI(677, 1421, 1423);
	  COL_TRI(660, 658, 1400);
	  COL_TRI(660, 652, 658);
	  COL_TRI(651, 1394, 1424);
	  COL_TRI(651, 1424, 680);
	  COL_TRI(680, 1424, 1420);
	  COL_TRI(681, 1418, 658);
	  COL_TRI(681, 658, 1399);
	  COL_TRI(678, 1422, 683);
	  COL_TRI(682, 679, 678);
	  COL_TRI(683, 1422, 1425);
	  COL_TRI(683, 1425, 684);
	  COL_TRI(684, 1425, 1416);
	  COL_TRI(684, 1416, 1415);
	  COL_TRI(685, 1398, 1395);
	  COL_TRI(685, 1395, 819);
	  COL_TRI(682, 1400, 679);
	  COL_TRI(619, 686, 1342);
	  COL_TRI(686, 619, 682);
	  COL_TRI(681, 1346, 686);
	  COL_TRI(686, 682, 678);
	  COL_TRI(686, 678, 681);
	  COL_TRI(689, 1359, 688);
	  COL_TRI(686, 1346, 1358);
	  COL_TRI(686, 1358, 631);
	  COL_TRI(631, 1358, 630);
	  COL_TRI(626, 1355, 1351);
	  COL_TRI(687, 1355, 626);
	  COL_TRI(687, 1426, 1355);
	  COL_TRI(688, 1426, 687);
	  COL_TRI(688, 1359, 1426);
	  COL_TRI(691, 1429, 692);
	  COL_TRI(689, 1354, 1359);
	  COL_TRI(681, 1347, 1346);
	  COL_TRI(681, 1399, 1347);
	  COL_TRI(690, 1427, 1428);
	  COL_TRI(690, 1428, 691);
	  COL_TRI(691, 1428, 1429);
	  COL_TRI(692, 1429, 1430);
	  COL_TRI(692, 1430, 693);
	  COL_TRI(693, 1430, 1431);
	  COL_TRI(693, 1431, 1392);
	  COL_TRI(694, 696, 697);
	  COL_TRI(695, 696, 694);
	  COL_TRI(696, 1432, 697);
	  COL_TRI(695, 1433, 696);
	  COL_TRI(697, 1432, 674);
	  COL_TRI(697, 674, 633);
	  COL_TRI(699, 1437, 1334);
	  COL_TRI(633, 674, 672);
	  COL_TRI(698, 1434, 1433);
	  COL_TRI(698, 1433, 695);
	  COL_TRI(699, 1334, 614);
	  COL_TRI(614, 1334, 1435);
	  COL_TRI(614, 1435, 1436);
	  COL_TRI(704, 1442, 1363);
	  COL_TRI(700, 1437, 699);
	  COL_TRI(700, 1438, 1437);
	  COL_TRI(701, 1438, 700);
	  COL_TRI(701, 1439, 1438);
	  COL_TRI(702, 1440, 703);
	  COL_TRI(703, 1440, 1441);
	  COL_TRI(703, 1441, 704);
	  COL_TRI(704, 1441, 1442);
	  COL_TRI(707, 1446, 708);
	  COL_TRI(702, 1443, 1440);
	  COL_TRI(671, 1443, 702);
	  COL_TRI(671, 1444, 1443);
	  COL_TRI(677, 1423, 705);
	  COL_TRI(705, 1423, 1434);
	  COL_TRI(705, 1434, 698);
	  COL_TRI(706, 1445, 707);
	  COL_TRI(707, 1445, 1446);
	  COL_TRI(710, 1450, 1451);
	  COL_TRI(708, 1446, 1447);
	  COL_TRI(708, 1447, 650);
	  COL_TRI(706, 1335, 1445);
	  COL_TRI(709, 1335, 706);
	  COL_TRI(709, 1448, 1335);
	  COL_TRI(710, 1449, 1450);
	  COL_TRI(189, 210, 212);
	  COL_TRI(711, 1452, 615);
	  COL_TRI(711, 615, 1337);
	  COL_TRI(207, 176, 204);
	  COL_TRI(206, 207, 1453);
	  COL_TRI(207, 178, 176);
	  COL_TRI(712, 178, 180);
	  COL_TRI(189, 212, 190);
	  COL_TRI(713, 712, 180);
	  COL_TRI(712, 823, 1454);
	  COL_TRI(712, 1454, 815);
	  COL_TRI(713, 180, 206);
	  COL_TRI(713, 727, 733);
	  COL_TRI(713, 734, 735);
	  COL_TRI(713, 733, 734);
	  COL_TRI(719, 187, 727);
	  COL_TRI(714, 713, 716);
	  COL_TRI(206, 1453, 716);
	  COL_TRI(713, 206, 716);
	  COL_TRI(715, 1461, 1453);
	  COL_TRI(716, 744, 719);
	  COL_TRI(716, 1462, 744);
	  COL_TRI(717, 718, 716);
	  COL_TRI(718, 714, 716);
	  COL_TRI(717, 716, 719);
	  COL_TRI(719, 211, 187);
	  COL_TRI(187, 189, 721);
	  COL_TRI(187, 721, 727);
	  COL_TRI(720, 1465, 721);
	  COL_TRI(720, 721, 722);
	  COL_TRI(721, 1465, 816);
	  COL_TRI(721, 816, 1466);
	  COL_TRI(722, 1467, 1468);
	  COL_TRI(722, 1468, 1469);
	  COL_TRI(719, 722, 211);
	  COL_TRI(722, 210, 211);
	  COL_TRI(713, 725, 727);
	  COL_TRI(724, 729, 727);
	  COL_TRI(725, 726, 727);
	  COL_TRI(726, 724, 727);
	  COL_TRI(719, 727, 1463);
	  COL_TRI(727, 729, 1463);
	  COL_TRI(727, 737, 733);
	  COL_TRI(728, 717, 719);
	  COL_TRI(719, 731, 728);
	  COL_TRI(719, 1463, 731);
	  COL_TRI(729, 730, 1463);
	  COL_TRI(730, 731, 1463);
	  COL_TRI(730, 1470, 731);
	  COL_TRI(731, 1470, 728);
	  COL_TRI(732, 777, 1471);
	  COL_TRI(732, 1471, 756);
	  COL_TRI(733, 1457, 734);
	  COL_TRI(734, 1457, 735);
	  COL_TRI(733, 1458, 1457);
	  COL_TRI(735, 769, 1472);
	  COL_TRI(735, 1459, 769);
	  COL_TRI(736, 737, 1473);
	  COL_TRI(736, 1474, 737);
	  COL_TRI(737, 1458, 733);
	  COL_TRI(738, 1473, 737);
	  COL_TRI(738, 737, 807);
	  COL_TRI(769, 736, 1473);
	  COL_TRI(769, 1473, 1472);
	  COL_TRI(745, 1476, 747);
	  COL_TRI(739, 740, 742);
	  COL_TRI(740, 1475, 742);
	  COL_TRI(741, 801, 740);
	  COL_TRI(741, 740, 739);
	  COL_TRI(742, 1475, 1476);
	  COL_TRI(742, 1476, 745);
	  COL_TRI(743, 739, 742);
	  COL_TRI(743, 742, 745);
	  COL_TRI(743, 745, 747);
	  COL_TRI(744, 743, 800);
	  COL_TRI(746, 747, 1478);
	  COL_TRI(747, 818, 1478);
	  COL_TRI(743, 747, 746);
	  COL_TRI(748, 1479, 749);
	  COL_TRI(748, 749, 1480);
	  COL_TRI(749, 1479, 1481);
	  COL_TRI(749, 1481, 752);
	  COL_TRI(750, 1480, 749);
	  COL_TRI(753, 757, 773);
	  COL_TRI(751, 748, 1480);
	  COL_TRI(751, 1480, 1482);
	  COL_TRI(750, 1460, 1480);
	  COL_TRI(752, 751, 1482);
	  COL_TRI(752, 1481, 751);
	  COL_TRI(753, 754, 757);
	  COL_TRI(756, 755, 773);
	  COL_TRI(754, 1277, 1483);
	  COL_TRI(754, 1483, 757);
	  COL_TRI(531, 773, 755);
	  COL_TRI(531, 753, 773);
	  COL_TRI(755, 1277, 531);
	  COL_TRI(755, 1483, 1277);
	  COL_TRI(757, 1483, 1471);
	  COL_TRI(758, 1487, 772);
	  COL_TRI(758, 1488, 1487);
	  COL_TRI(759, 1487, 1488);
	  COL_TRI(760, 1488, 758);
	  COL_TRI(760, 765, 1488);
	  COL_TRI(760, 758, 792);
	  COL_TRI(761, 1489, 792);
	  COL_TRI(762, 761, 1490);
	  COL_TRI(761, 792, 1490);
	  COL_TRI(760, 792, 1489);
	  COL_TRI(763, 764, 1490);
	  COL_TRI(763, 1490, 792);
	  COL_TRI(764, 1491, 1490);
	  COL_TRI(760, 766, 1492);
	  COL_TRI(765, 760, 1492);
	  COL_TRI(766, 1493, 1492);
	  COL_TRI(767, 765, 1492);
	  COL_TRI(765, 1494, 1495);
	  COL_TRI(765, 767, 1494);
	  COL_TRI(768, 759, 1496);
	  COL_TRI(768, 783, 759);
	  COL_TRI(598, 1474, 597);
	  COL_TRI(599, 769, 1459);
	  COL_TRI(599, 1459, 598);
	  COL_TRI(596, 769, 599);
	  COL_TRI(596, 736, 769);
	  COL_TRI(597, 736, 596);
	  COL_TRI(597, 1474, 736);
	  COL_TRI(757, 1471, 1484);
	  COL_TRI(598, 1459, 1474);
	  COL_TRI(770, 1497, 1468);
	  COL_TRI(770, 1468, 1467);
	  COL_TRI(771, 1498, 1469);
	  COL_TRI(772, 771, 1469);
	  COL_TRI(772, 1469, 1499);
	  COL_TRI(773, 1484, 1485);
	  COL_TRI(773, 757, 1484);
	  COL_TRI(756, 773, 1485);
	  COL_TRI(756, 1485, 1486);
	  COL_TRI(756, 1486, 732);
	  COL_TRI(732, 1500, 774);
	  COL_TRI(774, 1500, 1501);
	  COL_TRI(774, 1501, 1502);
	  COL_TRI(732, 1486, 1500);
	  COL_TRI(775, 1503, 1504);
	  COL_TRI(776, 1504, 1505);
	  COL_TRI(775, 1504, 776);
	  COL_TRI(776, 1505, 777);
	  COL_TRI(777, 1505, 1484);
	  COL_TRI(777, 1484, 1471);
	  COL_TRI(775, 778, 1503);
	  COL_TRI(775, 781, 778);
	  COL_TRI(778, 781, 780);
	  COL_TRI(778, 780, 785);
	  COL_TRI(779, 778, 785);
	  COL_TRI(780, 781, 1506);
	  COL_TRI(781, 1507, 1506);
	  COL_TRI(781, 784, 1507);
	  COL_TRI(779, 782, 1508);
	  COL_TRI(782, 1502, 1501);
	  COL_TRI(782, 1507, 1502);
	  COL_TRI(783, 1507, 782);
	  COL_TRI(779, 783, 782);
	  COL_TRI(783, 1506, 1507);
	  COL_TRI(784, 1509, 1507);
	  COL_TRI(783, 785, 1487);
	  COL_TRI(779, 785, 783);
	  COL_TRI(713, 714, 1455);
	  COL_TRI(785, 786, 1487);
	  COL_TRI(786, 717, 1510);
	  COL_TRI(786, 910, 717);
	  COL_TRI(787, 1455, 714);
	  COL_TRI(787, 714, 1511);
	  COL_TRI(788, 728, 827);
	  COL_TRI(728, 824, 827);
	  COL_TRI(788, 789, 728);
	  COL_TRI(767, 1492, 1493);
	  COL_TRI(767, 1493, 1494);
	  COL_TRI(790, 791, 788);
	  COL_TRI(791, 729, 788);
	  COL_TRI(788, 827, 790);
	  COL_TRI(789, 717, 728);
	  COL_TRI(789, 1510, 717);
	  COL_TRI(788, 729, 724);
	  COL_TRI(771, 1491, 764);
	  COL_TRI(771, 764, 1498);
	  COL_TRI(772, 1499, 763);
	  COL_TRI(792, 772, 763);
	  COL_TRI(793, 1455, 787);
	  COL_TRI(713, 1455, 1456);
	  COL_TRI(713, 1456, 725);
	  COL_TRI(794, 725, 1456);
	  COL_TRI(794, 1456, 793);
	  COL_TRI(793, 1456, 1455);
	  COL_TRI(795, 724, 726);
	  COL_TRI(788, 724, 795);
	  COL_TRI(795, 726, 796);
	  COL_TRI(796, 726, 725);
	  COL_TRI(796, 725, 794);
	  COL_TRI(797, 801, 741);
	  COL_TRI(797, 741, 1512);
	  COL_TRI(800, 799, 1477);
	  COL_TRI(741, 739, 1462);
	  COL_TRI(798, 1512, 1462);
	  COL_TRI(798, 1462, 804);
	  COL_TRI(741, 1462, 1512);
	  COL_TRI(799, 797, 1512);
	  COL_TRI(799, 1512, 1477);
	  COL_TRI(799, 1513, 797);
	  COL_TRI(797, 1513, 801);
	  COL_TRI(744, 800, 1477);
	  COL_TRI(743, 746, 800);
	  COL_TRI(800, 746, 1514);
	  COL_TRI(801, 1514, 746);
	  COL_TRI(800, 1514, 799);
	  COL_TRI(799, 1514, 1513);
	  COL_TRI(801, 1513, 1514);
	  COL_TRI(801, 817, 740);
	  COL_TRI(801, 746, 1478);
	  COL_TRI(801, 1478, 817);
	  COL_TRI(802, 822, 1516);
	  COL_TRI(802, 1516, 803);
	  COL_TRI(803, 1516, 1517);
	  COL_TRI(803, 1517, 1518);
	  COL_TRI(804, 1518, 1517);
	  COL_TRI(804, 1517, 798);
	  COL_TRI(805, 1519, 806);
	  COL_TRI(805, 806, 820);
	  COL_TRI(806, 1519, 1497);
	  COL_TRI(806, 1497, 770);
	  COL_TRI(811, 812, 810);
	  COL_TRI(807, 1520, 1521);
	  COL_TRI(807, 1521, 738);
	  COL_TRI(808, 1522, 1521);
	  COL_TRI(808, 1521, 1520);
	  COL_TRI(809, 1522, 808);
	  COL_TRI(809, 821, 1522);
	  COL_TRI(810, 1472, 811);
	  COL_TRI(811, 1523, 812);
	  COL_TRI(752, 1527, 814);
	  COL_TRI(812, 1523, 1524);
	  COL_TRI(812, 1524, 813);
	  COL_TRI(810, 735, 1472);
	  COL_TRI(813, 1524, 1525);
	  COL_TRI(813, 1525, 1526);
	  COL_TRI(752, 1482, 1527);
	  COL_TRI(816, 723, 1469);
	  COL_TRI(814, 1527, 1464);
	  COL_TRI(814, 1464, 715);
	  COL_TRI(715, 1464, 1461);
	  COL_TRI(815, 1454, 1460);
	  COL_TRI(815, 1460, 750);
	  COL_TRI(816, 1469, 1466);
	  COL_TRI(817, 685, 1515);
	  COL_TRI(723, 720, 722);
	  COL_TRI(723, 722, 1469);
	  COL_TRI(817, 1515, 740);
	  COL_TRI(655, 817, 1478);
	  COL_TRI(655, 1478, 659);
	  COL_TRI(817, 655, 685);
	  COL_TRI(821, 809, 721);
	  COL_TRI(818, 819, 659);
	  COL_TRI(818, 659, 1478);
	  COL_TRI(819, 1515, 685);
	  COL_TRI(819, 818, 1515);
	  COL_TRI(820, 744, 1477);
	  COL_TRI(820, 1477, 805);
	  COL_TRI(766, 1489, 761);
	  COL_TRI(821, 721, 1466);
	  COL_TRI(822, 1453, 1461);
	  COL_TRI(822, 802, 1453);
	  COL_TRI(823, 712, 1526);
	  COL_TRI(823, 1526, 1525);
	  COL_TRI(714, 766, 761);
	  COL_TRI(761, 762, 1511);
	  COL_TRI(714, 761, 1511);
	  COL_TRI(824, 791, 826);
	  COL_TRI(824, 826, 825);
	  COL_TRI(825, 826, 1528);
	  COL_TRI(825, 1528, 1529);
	  COL_TRI(791, 790, 829);
	  COL_TRI(791, 829, 826);
	  COL_TRI(826, 829, 933);
	  COL_TRI(826, 933, 1528);
	  COL_TRI(827, 824, 825);
	  COL_TRI(827, 825, 828);
	  COL_TRI(828, 825, 1529);
	  COL_TRI(828, 1529, 932);
	  COL_TRI(790, 827, 828);
	  COL_TRI(790, 828, 829);
	  COL_TRI(831, 1530, 1531);
	  COL_TRI(829, 828, 932);
	  COL_TRI(829, 932, 933);
	  COL_TRI(780, 1506, 768);
	  COL_TRI(780, 768, 830);
	  COL_TRI(830, 768, 1530);
	  COL_TRI(830, 1530, 831);
	  COL_TRI(834, 1534, 835);
	  COL_TRI(831, 1531, 832);
	  COL_TRI(832, 1531, 1532);
	  COL_TRI(832, 1532, 833);
	  COL_TRI(833, 1532, 1533);
	  COL_TRI(833, 1533, 834);
	  COL_TRI(834, 1533, 1534);
	  COL_TRI(835, 1534, 1535);
	  COL_TRI(835, 1535, 836);
	  COL_TRI(836, 1535, 1536);
	  COL_TRI(836, 1536, 837);
	  COL_TRI(837, 1536, 1537);
	  COL_TRI(837, 1537, 838);
	  COL_TRI(838, 1537, 1538);
	  COL_TRI(838, 1538, 839);
	  COL_TRI(839, 1538, 1539);
	  COL_TRI(839, 1539, 840);
	  COL_TRI(840, 1539, 1540);
	  COL_TRI(840, 1540, 841);
	  COL_TRI(841, 1540, 1541);
	  COL_TRI(841, 1541, 845);
	  COL_TRI(842, 1542, 1543);
	  COL_TRI(842, 1543, 870);
	  COL_TRI(843, 1544, 844);
	  COL_TRI(844, 1544, 1542);
	  COL_TRI(844, 1542, 842);
	  COL_TRI(843, 1545, 1544);
	  COL_TRI(845, 1541, 1545);
	  COL_TRI(845, 1545, 843);
	  COL_TRI(846, 1546, 1547);
	  COL_TRI(846, 1547, 885);
	  COL_TRI(847, 1548, 1546);
	  COL_TRI(847, 1546, 846);
	  COL_TRI(848, 1548, 847);
	  COL_TRI(848, 1549, 1548);
	  COL_TRI(849, 1549, 848);
	  COL_TRI(849, 1550, 1549);
	  COL_TRI(850, 1551, 1552);
	  COL_TRI(850, 1552, 851);
	  COL_TRI(851, 1552, 1553);
	  COL_TRI(851, 1553, 852);
	  COL_TRI(852, 1553, 1554);
	  COL_TRI(852, 1554, 853);
	  COL_TRI(853, 1554, 1550);
	  COL_TRI(853, 1550, 849);
	  COL_TRI(854, 1555, 1556);
	  COL_TRI(854, 1556, 855);
	  COL_TRI(855, 1556, 1557);
	  COL_TRI(855, 1557, 856);
	  COL_TRI(856, 1557, 1558);
	  COL_TRI(856, 1558, 857);
	  COL_TRI(857, 1558, 1551);
	  COL_TRI(857, 1551, 850);
	  COL_TRI(858, 1559, 1555);
	  COL_TRI(858, 1555, 854);
	  COL_TRI(859, 1560, 860);
	  COL_TRI(860, 1560, 1559);
	  COL_TRI(860, 1559, 858);
	  COL_TRI(859, 1561, 1560);
	  COL_TRI(861, 1562, 1561);
	  COL_TRI(861, 1561, 859);
	  COL_TRI(862, 1563, 1562);
	  COL_TRI(862, 1562, 861);
	  COL_TRI(863, 1564, 1563);
	  COL_TRI(863, 1563, 862);
	  COL_TRI(864, 1564, 863);
	  COL_TRI(864, 1565, 1564);
	  COL_TRI(865, 1566, 1565);
	  COL_TRI(865, 1565, 864);
	  COL_TRI(866, 1567, 1566);
	  COL_TRI(866, 1566, 865);
	  COL_TRI(867, 1568, 868);
	  COL_TRI(868, 1568, 1567);
	  COL_TRI(868, 1567, 866);
	  COL_TRI(867, 1569, 1568);
	  COL_TRI(869, 1570, 1569);
	  COL_TRI(869, 1569, 867);
	  COL_TRI(870, 1543, 1571);
	  COL_TRI(870, 1571, 871);
	  COL_TRI(871, 1571, 1572);
	  COL_TRI(871, 1572, 872);
	  COL_TRI(872, 1572, 1573);
	  COL_TRI(872, 1573, 873);
	  COL_TRI(873, 1573, 1574);
	  COL_TRI(873, 1574, 877);
	  COL_TRI(874, 1575, 1570);
	  COL_TRI(874, 1570, 869);
	  COL_TRI(875, 1576, 876);
	  COL_TRI(876, 1576, 1575);
	  COL_TRI(876, 1575, 874);
	  COL_TRI(875, 1577, 1576);
	  COL_TRI(877, 1574, 1577);
	  COL_TRI(877, 1577, 875);
	  COL_TRI(878, 1496, 1578);
	  COL_TRI(878, 1578, 879);
	  COL_TRI(879, 1579, 880);
	  COL_TRI(879, 1578, 1579);
	  COL_TRI(880, 1579, 1580);
	  COL_TRI(880, 1580, 881);
	  COL_TRI(881, 1580, 1581);
	  COL_TRI(881, 1581, 886);
	  COL_TRI(882, 1582, 1496);
	  COL_TRI(882, 1496, 878);
	  COL_TRI(883, 1582, 882);
	  COL_TRI(883, 1583, 1582);
	  COL_TRI(884, 1583, 883);
	  COL_TRI(884, 1584, 1583);
	  COL_TRI(885, 1547, 1584);
	  COL_TRI(885, 1584, 884);
	  COL_TRI(886, 1581, 1585);
	  COL_TRI(886, 1585, 887);
	  COL_TRI(887, 1586, 888);
	  COL_TRI(887, 1585, 1586);
	  COL_TRI(888, 1586, 1587);
	  COL_TRI(888, 1587, 889);
	  COL_TRI(889, 1587, 1588);
	  COL_TRI(889, 1588, 890);
	  COL_TRI(890, 1588, 1589);
	  COL_TRI(890, 1589, 891);
	  COL_TRI(891, 1589, 1590);
	  COL_TRI(891, 1590, 892);
	  COL_TRI(892, 1590, 1591);
	  COL_TRI(892, 1591, 893);
	  COL_TRI(893, 1591, 1592);
	  COL_TRI(893, 1592, 894);
	  COL_TRI(894, 1592, 1593);
	  COL_TRI(894, 1593, 895);
	  COL_TRI(895, 1594, 896);
	  COL_TRI(895, 1593, 1594);
	  COL_TRI(896, 1594, 1595);
	  COL_TRI(896, 1595, 897);
	  COL_TRI(897, 1595, 1596);
	  COL_TRI(897, 1596, 901);
	  COL_TRI(898, 1597, 1598);
	  COL_TRI(898, 1598, 905);
	  COL_TRI(899, 1599, 900);
	  COL_TRI(900, 1599, 1597);
	  COL_TRI(900, 1597, 898);
	  COL_TRI(899, 1600, 1599);
	  COL_TRI(901, 1596, 1600);
	  COL_TRI(901, 1600, 899);
	  COL_TRI(902, 1601, 1602);
	  COL_TRI(902, 1602, 908);
	  COL_TRI(903, 1601, 902);
	  COL_TRI(903, 1603, 1601);
	  COL_TRI(904, 1603, 903);
	  COL_TRI(904, 1604, 1603);
	  COL_TRI(905, 1598, 1604);
	  COL_TRI(905, 1604, 904);
	  COL_TRI(906, 1605, 1606);
	  COL_TRI(906, 1606, 907);
	  COL_TRI(910, 786, 785);
	  COL_TRI(907, 1606, 1607);
	  COL_TRI(907, 1607, 909);
	  COL_TRI(908, 1602, 1605);
	  COL_TRI(908, 1605, 906);
	  COL_TRI(909, 1607, 1494);
	  COL_TRI(909, 1494, 910);
	  COL_TRI(914, 1611, 1612);
	  COL_TRI(910, 785, 830);
	  COL_TRI(911, 1608, 1609);
	  COL_TRI(911, 1610, 1608);
	  COL_TRI(912, 913, 1611);
	  COL_TRI(913, 938, 1612);
	  COL_TRI(913, 1612, 1611);
	  COL_TRI(920, 1613, 916);
	  COL_TRI(914, 915, 1611);
	  COL_TRI(915, 912, 1611);
	  COL_TRI(916, 1004, 924);
	  COL_TRI(917, 916, 924);
	  COL_TRI(917, 920, 916);
	  COL_TRI(918, 1004, 916);
	  COL_TRI(918, 916, 919);
	  COL_TRI(919, 916, 1613);
	  COL_TRI(925, 920, 917);
	  COL_TRI(921, 1004, 918);
	  COL_TRI(921, 1614, 1004);
	  COL_TRI(922, 924, 982);
	  COL_TRI(923, 924, 922);
	  COL_TRI(923, 917, 924);
	  COL_TRI(924, 1004, 982);
	  COL_TRI(931, 929, 1619);
	  COL_TRI(926, 927, 923);
	  COL_TRI(927, 984, 923);
	  COL_TRI(927, 1618, 984);
	  COL_TRI(928, 927, 926);
	  COL_TRI(928, 1618, 927);
	  COL_TRI(926, 923, 922);
	  COL_TRI(926, 987, 928);
	  COL_TRI(926, 922, 987);
	  COL_TRI(929, 930, 1619);
	  COL_TRI(930, 1620, 1619);
	  COL_TRI(931, 990, 929);
	  COL_TRI(932, 912, 990);
	  COL_TRI(933, 990, 1621);
	  COL_TRI(933, 932, 990);
	  COL_TRI(934, 1617, 1009);
	  COL_TRI(934, 1009, 1622);
	  COL_TRI(934, 1622, 1615);
	  COL_TRI(935, 1623, 1007);
	  COL_TRI(938, 1528, 933);
	  COL_TRI(935, 1007, 1624);
	  COL_TRI(936, 1625, 1622);
	  COL_TRI(936, 1622, 1623);
	  COL_TRI(937, 914, 938);
	  COL_TRI(937, 938, 1621);
	  COL_TRI(938, 933, 1621);
	  COL_TRI(943, 1629, 942);
	  COL_TRI(939, 1626, 1627);
	  COL_TRI(939, 941, 1626);
	  COL_TRI(940, 1626, 941);
	  COL_TRI(915, 939, 1627);
	  COL_TRI(941, 943, 1628);
	  COL_TRI(941, 1628, 940);
	  COL_TRI(942, 1628, 943);
	  COL_TRI(943, 945, 1629);
	  COL_TRI(949, 1632, 948);
	  COL_TRI(944, 1629, 945);
	  COL_TRI(945, 947, 1630);
	  COL_TRI(945, 1630, 944);
	  COL_TRI(946, 1630, 947);
	  COL_TRI(947, 949, 1631);
	  COL_TRI(947, 1631, 946);
	  COL_TRI(948, 1631, 949);
	  COL_TRI(949, 950, 1632);
	  COL_TRI(952, 953, 1638);
	  COL_TRI(950, 1634, 1632);
	  COL_TRI(950, 951, 1633);
	  COL_TRI(950, 1633, 1634);
	  COL_TRI(951, 1635, 1633);
	  COL_TRI(951, 952, 1636);
	  COL_TRI(951, 1636, 1635);
	  COL_TRI(952, 1637, 1636);
	  COL_TRI(952, 1638, 1637);
	  COL_TRI(956, 957, 1642);
	  COL_TRI(953, 1640, 1638);
	  COL_TRI(953, 954, 1639);
	  COL_TRI(953, 1639, 1640);
	  COL_TRI(954, 1641, 1639);
	  COL_TRI(954, 956, 955);
	  COL_TRI(954, 955, 1641);
	  COL_TRI(955, 956, 1642);
	  COL_TRI(956, 958, 957);
	  COL_TRI(962, 1645, 964);
	  COL_TRI(957, 958, 1644);
	  COL_TRI(958, 960, 1643);
	  COL_TRI(958, 1643, 1644);
	  COL_TRI(959, 1643, 960);
	  COL_TRI(960, 1645, 1646);
	  COL_TRI(960, 1646, 959);
	  COL_TRI(961, 1646, 1645);
	  COL_TRI(962, 961, 1645);
	  COL_TRI(968, 1649, 967);
	  COL_TRI(963, 962, 964);
	  COL_TRI(964, 966, 1647);
	  COL_TRI(964, 1647, 963);
	  COL_TRI(965, 1647, 966);
	  COL_TRI(966, 1648, 965);
	  COL_TRI(966, 968, 1648);
	  COL_TRI(967, 1648, 968);
	  COL_TRI(968, 969, 1649);
	  COL_TRI(971, 972, 1655);
	  COL_TRI(969, 1651, 1649);
	  COL_TRI(969, 970, 1650);
	  COL_TRI(969, 1650, 1651);
	  COL_TRI(970, 1652, 1650);
	  COL_TRI(970, 971, 1653);
	  COL_TRI(970, 1653, 1652);
	  COL_TRI(971, 1654, 1653);
	  COL_TRI(971, 1655, 1654);
	  COL_TRI(975, 977, 978);
	  COL_TRI(972, 1656, 1655);
	  COL_TRI(973, 1656, 972);
	  COL_TRI(973, 1657, 1656);
	  COL_TRI(973, 1658, 1657);
	  COL_TRI(973, 1659, 974);
	  COL_TRI(973, 974, 1658);
	  COL_TRI(974, 1659, 920);
	  COL_TRI(975, 976, 977);
	  COL_TRI(925, 979, 1660);
	  COL_TRI(977, 976, 1660);
	  COL_TRI(978, 977, 1660);
	  COL_TRI(979, 984, 978);
	  COL_TRI(976, 980, 1661);
	  COL_TRI(976, 1661, 1660);
	  COL_TRI(976, 975, 980);
	  COL_TRI(980, 982, 1661);
	  COL_TRI(981, 1660, 1661);
	  COL_TRI(982, 981, 1661);
	  COL_TRI(981, 983, 1660);
	  COL_TRI(983, 925, 1660);
	  COL_TRI(978, 1660, 979);
	  COL_TRI(978, 984, 986);
	  COL_TRI(984, 985, 986);
	  COL_TRI(985, 1662, 1663);
	  COL_TRI(985, 1663, 1664);
	  COL_TRI(975, 978, 986);
	  COL_TRI(975, 986, 1665);
	  COL_TRI(986, 1664, 989);
	  COL_TRI(986, 985, 1664);
	  COL_TRI(987, 975, 1665);
	  COL_TRI(987, 1665, 1662);
	  COL_TRI(988, 1662, 1665);
	  COL_TRI(988, 1663, 1662);
	  COL_TRI(979, 923, 984);
	  COL_TRI(917, 923, 925);
	  COL_TRI(923, 979, 925);
	  COL_TRI(922, 982, 980);
	  COL_TRI(975, 987, 922);
	  COL_TRI(975, 922, 980);
	  COL_TRI(992, 940, 993);
	  COL_TRI(989, 988, 1665);
	  COL_TRI(989, 1665, 986);
	  COL_TRI(990, 915, 991);
	  COL_TRI(991, 915, 1627);
	  COL_TRI(991, 1627, 992);
	  COL_TRI(992, 1626, 940);
	  COL_TRI(993, 942, 994);
	  COL_TRI(993, 1628, 942);
	  COL_TRI(994, 1629, 944);
	  COL_TRI(994, 944, 995);
	  COL_TRI(995, 1630, 946);
	  COL_TRI(995, 946, 996);
	  COL_TRI(996, 1631, 948);
	  COL_TRI(996, 948, 997);
	  COL_TRI(997, 1632, 1634);
	  COL_TRI(997, 1634, 998);
	  COL_TRI(998, 1633, 1635);
	  COL_TRI(998, 1635, 999);
	  COL_TRI(999, 1636, 1637);
	  COL_TRI(999, 1637, 1000);
	  COL_TRI(1000, 1638, 1640);
	  COL_TRI(1000, 1640, 1001);
	  COL_TRI(1004, 1616, 982);
	  COL_TRI(1001, 1641, 1002);
	  COL_TRI(1001, 1639, 1641);
	  COL_TRI(1002, 955, 1642);
	  COL_TRI(1002, 1642, 1003);
	  COL_TRI(1003, 957, 1644);
	  COL_TRI(1003, 1644, 1016);
	  COL_TRI(982, 951, 1617);
	  COL_TRI(982, 1617, 981);
	  COL_TRI(1005, 1666, 1006);
	  COL_TRI(1006, 1666, 1667);
	  COL_TRI(1006, 1667, 1623);
	  COL_TRI(1007, 1667, 1614);
	  COL_TRI(1008, 1668, 1005);
	  COL_TRI(1005, 1668, 1666);
	  COL_TRI(1008, 1669, 1668);
	  COL_TRI(1009, 1613, 1670);
	  COL_TRI(1009, 1670, 1008);
	  COL_TRI(932, 1529, 912);
	  COL_TRI(1010, 1649, 1651);
	  COL_TRI(1010, 1651, 1011);
	  COL_TRI(1011, 1650, 1652);
	  COL_TRI(1011, 1652, 1012);
	  COL_TRI(1012, 1653, 1654);
	  COL_TRI(1012, 1654, 1013);
	  COL_TRI(1013, 1655, 1656);
	  COL_TRI(1013, 1656, 1014);
	  COL_TRI(1014, 1657, 1658);
	  COL_TRI(1014, 1658, 1015);
	  COL_TRI(981, 1617, 934);
	  COL_TRI(1015, 920, 1622);
	  COL_TRI(1015, 974, 920);
	  COL_TRI(1007, 1614, 921);
	  COL_TRI(919, 1613, 937);
	  COL_TRI(1016, 959, 1017);
	  COL_TRI(925, 1615, 920);
	  COL_TRI(981, 934, 983);
	  COL_TRI(983, 934, 1615);
	  COL_TRI(983, 1615, 925);
	  COL_TRI(990, 912, 915);
	  COL_TRI(1016, 1643, 959);
	  COL_TRI(1017, 961, 1018);
	  COL_TRI(1017, 1646, 961);
	  COL_TRI(1018, 962, 963);
	  COL_TRI(1018, 963, 1019);
	  COL_TRI(1019, 1647, 965);
	  COL_TRI(1019, 965, 1020);
	  COL_TRI(1020, 1648, 967);
	  COL_TRI(1020, 967, 1671);
	  COL_TRI_INIT(SURFACE_VERY_SLIPPERY, 18);
	  COL_TRI(87, 123, 122);
	  COL_TRI(73, 75, 154);
	  COL_TRI(73, 72, 75);
	  COL_TRI(85, 84, 80);
	  COL_TRI(85, 80, 155);
	  COL_TRI(80, 78, 77);
	  COL_TRI(80, 77, 155);
	  COL_TRI(87, 156, 123);
	  COL_TRI(87, 129, 156);
	  COL_TRI(158, 138, 96);
	  COL_TRI(129, 131, 156);
	  COL_TRI(157, 128, 89);
	  COL_TRI(157, 89, 126);
	  COL_TRI(158, 159, 138);
	  COL_TRI(159, 135, 138);
	  COL_TRI(135, 136, 138);
	  COL_TRI(158, 134, 133);
	  COL_TRI(158, 96, 134);
	  COL_TRI_INIT(SURFACE_INSTANT_WARP_1B, 12);
	  COL_TRI(64, 65, 63);
	  COL_TRI(56, 57, 58);
	  COL_TRI(56, 59, 57);
	  COL_TRI(58, 60, 61);
	  COL_TRI(58, 57, 60);
	  COL_TRI(62, 63, 59);
	  COL_TRI(62, 59, 56);
	  COL_TRI(66, 67, 68);
	  COL_TRI(64, 63, 62);
	  COL_TRI(61, 60, 67);
	  COL_TRI(61, 67, 66);
	  COL_TRI(66, 68, 69);
	  COL_TRI_INIT(SURFACE_WALL_MISC, 32);
	  COL_TRI(34, 33, 35);
	  COL_TRI(24, 25, 26);
	  COL_TRI(24, 26, 27);
	  COL_TRI(28, 25, 24);
	  COL_TRI(27, 26, 29);
	  COL_TRI(27, 29, 30);
	  COL_TRI(30, 29, 31);
	  COL_TRI(30, 31, 28);
	  COL_TRI(28, 31, 25);
	  COL_TRI(32, 33, 34);
	  COL_TRI(34, 35, 36);
	  COL_TRI(42, 45, 46);
	  COL_TRI(36, 35, 37);
	  COL_TRI(36, 37, 39);
	  COL_TRI(32, 38, 33);
	  COL_TRI(39, 37, 38);
	  COL_TRI(39, 38, 32);
	  COL_TRI(40, 44, 41);
	  COL_TRI(41, 45, 42);
	  COL_TRI(41, 44, 45);
	  COL_TRI(42, 46, 43);
	  COL_TRI(40, 47, 44);
	  COL_TRI(43, 46, 47);
	  COL_TRI(43, 47, 40);
	  COL_TRI(161, 171, 172);
	  COL_TRI(160, 161, 162);
	  COL_TRI(160, 162, 163);
	  COL_TRI(164, 165, 166);
	  COL_TRI(164, 167, 165);
	  COL_TRI(168, 169, 165);
	  COL_TRI(168, 170, 169);
	  COL_TRI(161, 173, 171);
	  COL_TRI_INIT(SURFACE_NO_CAM_COLLISION, 96);
	  COL_TRI(82, 83, 84);
	  COL_TRI(70, 71, 72);
	  COL_TRI(70, 72, 73);
	  COL_TRI(74, 75, 72);
	  COL_TRI(74, 72, 71);
	  COL_TRI(76, 77, 78);
	  COL_TRI(76, 79, 77);
	  COL_TRI(76, 78, 80);
	  COL_TRI(76, 80, 81);
	  COL_TRI(82, 84, 85);
	  COL_TRI(80, 84, 83);
	  COL_TRI(80, 83, 81);
	  COL_TRI(86, 122, 123);
	  COL_TRI(86, 124, 122);
	  COL_TRI(87, 122, 124);
	  COL_TRI(87, 124, 90);
	  COL_TRI(88, 125, 126);
	  COL_TRI(88, 126, 89);
	  COL_TRI(89, 128, 127);
	  COL_TRI(89, 127, 88);
	  COL_TRI(90, 91, 129);
	  COL_TRI(91, 130, 131);
	  COL_TRI(91, 131, 129);
	  COL_TRI(90, 129, 87);
	  COL_TRI(92, 132, 133);
	  COL_TRI(96, 138, 137);
	  COL_TRI(93, 92, 134);
	  COL_TRI(92, 133, 134);
	  COL_TRI(93, 134, 96);
	  COL_TRI(94, 95, 135);
	  COL_TRI(95, 136, 135);
	  COL_TRI(95, 137, 138);
	  COL_TRI(95, 138, 136);
	  COL_TRI(96, 137, 93);
	  COL_TRI(100, 97, 140);
	  COL_TRI(97, 118, 99);
	  COL_TRI(97, 99, 139);
	  COL_TRI(98, 100, 140);
	  COL_TRI(98, 141, 100);
	  COL_TRI(99, 98, 139);
	  COL_TRI(99, 141, 98);
	  COL_TRI(103, 143, 101);
	  COL_TRI(100, 118, 97);
	  COL_TRI(101, 104, 142);
	  COL_TRI(101, 119, 104);
	  COL_TRI(102, 143, 103);
	  COL_TRI(102, 103, 144);
	  COL_TRI(103, 101, 142);
	  COL_TRI(107, 106, 145);
	  COL_TRI(104, 102, 144);
	  COL_TRI(104, 119, 102);
	  COL_TRI(105, 120, 107);
	  COL_TRI(105, 107, 145);
	  COL_TRI(106, 146, 108);
	  COL_TRI(106, 108, 147);
	  COL_TRI(110, 150, 111);
	  COL_TRI(107, 146, 106);
	  COL_TRI(108, 105, 147);
	  COL_TRI(108, 120, 105);
	  COL_TRI(109, 112, 148);
	  COL_TRI(109, 121, 112);
	  COL_TRI(110, 111, 149);
	  COL_TRI(114, 152, 116);
	  COL_TRI(111, 109, 148);
	  COL_TRI(111, 150, 109);
	  COL_TRI(112, 110, 149);
	  COL_TRI(112, 121, 110);
	  COL_TRI(113, 117, 115);
	  COL_TRI(113, 115, 151);
	  COL_TRI(117, 116, 152);
	  COL_TRI(114, 116, 153);
	  COL_TRI(115, 152, 114);
	  COL_TRI(115, 114, 151);
	  COL_TRI(116, 113, 153);
	  COL_TRI(116, 117, 113);
	  COL_TRI(117, 152, 115);
	  COL_TRI(121, 109, 150);
	  COL_TRI(118, 100, 141);
	  COL_TRI(118, 141, 99);
	  COL_TRI(119, 143, 102);
	  COL_TRI(119, 101, 143);
	  COL_TRI(120, 108, 146);
	  COL_TRI(120, 146, 107);
	  COL_TRI(121, 150, 110);
	  COL_TRI(70, 154, 217);
	  COL_TRI(214, 157, 125);
	  COL_TRI(157, 126, 125);
	  COL_TRI(123, 156, 215);
	  COL_TRI(86, 123, 215);
	  COL_TRI(216, 155, 77);
	  COL_TRI(216, 77, 79);
	  COL_TRI(135, 159, 219);
	  COL_TRI(70, 73, 154);
	  COL_TRI(218, 158, 132);
	  COL_TRI(158, 133, 132);
	  COL_TRI(94, 135, 219);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_BE, 2);
	  COL_TRI(186, 187, 188);
	  COL_TRI(186, 189, 187);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_BF, 2);
	  COL_TRI(200, 188, 201);
	  COL_TRI(200, 186, 188);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_C0, 2);
	  COL_TRI(210, 201, 211);
	  COL_TRI(210, 200, 201);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_C1, 2);
	  COL_TRI(19, 50, 18);
	  COL_TRI(19, 51, 50);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_C2, 2);
	  COL_TRI(7, 18, 4);
	  COL_TRI(7, 19, 18);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_C3, 2);
	  COL_TRI(4, 5, 6);
	  COL_TRI(4, 6, 7);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_C4, 2);
	  COL_TRI(196, 206, 197);
	  COL_TRI(196, 207, 206);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_C5, 2);
	  COL_TRI(181, 196, 197);
	  COL_TRI(181, 197, 179);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_C6, 2);
	  COL_TRI(178, 179, 180);
	  COL_TRI(178, 181, 179);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_CD, 2);
	  COL_TRI(8, 9, 10);
	  COL_TRI(8, 10, 11);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_CE, 2);
	  COL_TRI(20, 11, 21);
	  COL_TRI(20, 8, 11);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_CF, 2);
	  COL_TRI(52, 20, 21);
	  COL_TRI(52, 21, 53);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_EB, 2);
	  COL_TRI(190, 191, 192);
	  COL_TRI(190, 193, 191);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_EC, 2);
	  COL_TRI(193, 202, 203);
	  COL_TRI(193, 203, 191);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_ED, 2);
	  COL_TRI(202, 212, 213);
	  COL_TRI(202, 213, 203);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_EE, 2);
	  COL_TRI(17, 48, 49);
	  COL_TRI(17, 49, 16);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_EF, 2);
	  COL_TRI(3, 16, 0);
	  COL_TRI(3, 17, 16);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_F0, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_F1, 2);
	  COL_TRI(194, 204, 195);
	  COL_TRI(194, 205, 204);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_F2, 2);
	  COL_TRI(177, 194, 195);
	  COL_TRI(177, 195, 175);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_F3, 2);
	  COL_TRI(174, 175, 176);
	  COL_TRI(174, 177, 175);
	  COL_TRI_INIT(SURFACE_TTC_PAINTING_1, 2);
	  COL_TRI(182, 183, 184);
	  COL_TRI(182, 185, 183);
	  COL_TRI_INIT(SURFACE_TTC_PAINTING_2, 2);
	  COL_TRI(185, 198, 183);
	  COL_TRI(185, 199, 198);
	  COL_TRI_INIT(SURFACE_TTC_PAINTING_3, 2);
	  COL_TRI(199, 208, 209);
	  COL_TRI(199, 209, 198);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_F7, 2);
	  COL_TRI(220, 221, 222);
	  COL_TRI(220, 222, 223);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_F8, 2);
	  COL_TRI(224, 220, 223);
	  COL_TRI(224, 223, 225);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_F9, 2);
	  COL_TRI(226, 224, 225);
	  COL_TRI(226, 225, 227);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_FA, 2);
	  COL_TRI(12, 13, 14);
	  COL_TRI(12, 15, 13);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_FB, 2);
	  COL_TRI(14, 22, 23);
	  COL_TRI(14, 13, 22);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_FC, 2);
	  COL_TRI(23, 54, 55);
	  COL_TRI(23, 22, 54);
	  COL_TRI_INIT(SURFACE_WOBBLING_WARP, 2);
	  COL_TRI(38, 35, 33);
	  COL_TRI(38, 37, 35);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(4);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_0stars_door, /*pos*/ -2695, 1203,  1828, /*yaw*/  64);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_0stars_door, /*pos*/  6994, 1203,  1828, /*yaw*/  64);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_0stars_door, /*pos*/  1670, 1203,  1828, /*yaw*/ 192);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_wooden_door, /*pos*/  -997, 1203,  1178, /*yaw*/   0);
	  COL_END();
	}

	function inside_castle_seg7_area_3_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x443);
	  COL_VERTEX(2304, -1381, -3045);
	  COL_VERTEX(2867, -1381, -2482);
	  COL_VERTEX(2867, -1381, -2841);
	  COL_VERTEX(2662, -1381, -3045);
	  COL_VERTEX(2099, -1381, -2841);
	  COL_VERTEX(2099, -1381, -2482);
	  COL_VERTEX(2304, -1381, -2277);
	  COL_VERTEX(2662, -1381, -2277);
	  COL_VERTEX(-1074, -1125, -3941);
	  COL_VERTEX(-1689, -511, -3941);
	  COL_VERTEX(-1689, -1125, -3941);
	  COL_VERTEX(-1074, -511, -3941);
	  COL_VERTEX(-2713, -1074, -1074);
	  COL_VERTEX(-3122, -562, -1074);
	  COL_VERTEX(-2713, -562, -1074);
	  COL_VERTEX(-3122, -1074, -1074);
	  COL_VERTEX(1649, -972, -1827);
	  COL_VERTEX(3277, -992, -1868);
	  COL_VERTEX(1690, -992, -1868);
	  COL_VERTEX(1649, -972, -3496);
	  COL_VERTEX(3277, -972, -1827);
	  COL_VERTEX(1690, -992, -3455);
	  COL_VERTEX(3277, -992, -3455);
	  COL_VERTEX(3277, -972, -3496);
	  COL_VERTEX(-1893, -972, 1546);
	  COL_VERTEX(-1893, -992, 1587);
	  COL_VERTEX(-1586, -992, 1587);
	  COL_VERTEX(-1586, -972, 1546);
	  COL_VERTEX(-419, -972, 1775);
	  COL_VERTEX(-648, -972, 1546);
	  COL_VERTEX(-665, -992, 1587);
	  COL_VERTEX(-1177, -992, 1587);
	  COL_VERTEX(-1177, -972, 1546);
	  COL_VERTEX(-460, -992, 1792);
	  COL_VERTEX(-460, -992, 2816);
	  COL_VERTEX(-562, -1074, 1178);
	  COL_VERTEX(-419, -972, 2816);
	  COL_VERTEX(-101, -767, 666);
	  COL_VERTEX(-562, -767, 666);
	  COL_VERTEX(-101, -1074, 1178);
	  COL_VERTEX(4250, -972, 1894);
	  COL_VERTEX(4250, -1279, 2099);
	  COL_VERTEX(4250, -972, 2099);
	  COL_VERTEX(4045, -1279, 2099);
	  COL_VERTEX(4045, -972, 2099);
	  COL_VERTEX(4045, -1279, 1894);
	  COL_VERTEX(4045, -972, 1894);
	  COL_VERTEX(4250, -1279, 1894);
	  COL_VERTEX(2099, -1689, -2841);
	  COL_VERTEX(2304, -1689, -3045);
	  COL_VERTEX(2662, -1689, -3045);
	  COL_VERTEX(2099, -1689, -2482);
	  COL_VERTEX(2867, -1689, -2841);
	  COL_VERTEX(2867, -1689, -2482);
	  COL_VERTEX(2662, -1689, -2277);
	  COL_VERTEX(2304, -1689, -2277);
	  COL_VERTEX(3994, -972, 1843);
	  COL_VERTEX(4301, -972, 1843);
	  COL_VERTEX(4352, -1074, 1792);
	  COL_VERTEX(3942, -1074, 1792);
	  COL_VERTEX(4301, -972, 2150);
	  COL_VERTEX(3994, -972, 2150);
	  COL_VERTEX(3942, -1074, 2202);
	  COL_VERTEX(4352, -1074, 2202);
	  COL_VERTEX(5376, -1177, -972);
	  COL_VERTEX(6605, -1586, -50);
	  COL_VERTEX(1280, -1689, -972);
	  COL_VERTEX(1178, -1689, -972);
	  COL_VERTEX(1178, -1689, -50);
	  COL_VERTEX(3738, -2429, -50);
	  COL_VERTEX(5376, -1177, -50);
	  COL_VERTEX(3738, -2429, -972);
	  COL_VERTEX(6605, -1586, -972);
	  COL_VERTEX(5888, -1177, -972);
	  COL_VERTEX(5888, -1177, -50);
	  COL_VERTEX(2099, -2508, -50);
	  COL_VERTEX(2099, -2508, -972);
	  COL_VERTEX(1280, -1689, -50);
	  COL_VERTEX(7834, -1586, -1279);
	  COL_VERTEX(7629, -1586, 256);
	  COL_VERTEX(7834, -1586, 256);
	  COL_VERTEX(7629, -1586, -1279);
	  COL_VERTEX(1649, -1074, -3496);
	  COL_VERTEX(1649, -1074, -1827);
	  COL_VERTEX(3277, -1074, -3496);
	  COL_VERTEX(3277, -1074, -1827);
	  COL_VERTEX(-419, -1074, 1775);
	  COL_VERTEX(-648, -1074, 1546);
	  COL_VERTEX(-1177, -1074, 1546);
	  COL_VERTEX(-419, -1074, 2816);
	  COL_VERTEX(-1586, -1074, 1546);
	  COL_VERTEX(-1893, -1074, 1546);
	  COL_VERTEX(-1484, -1177, -3941);
	  COL_VERTEX(-1689, -1177, -3941);
	  COL_VERTEX(-1689, -1177, -3839);
	  COL_VERTEX(-1484, -1177, -3839);
	  COL_VERTEX(-1689, -1177, -3972);
	  COL_VERTEX(-1484, -1177, -4351);
	  COL_VERTEX(-1689, -1177, -4351);
	  COL_VERTEX(-1484, -1177, -3972);
	  COL_VERTEX(-1279, -1177, -3941);
	  COL_VERTEX(-1279, -1177, -3839);
	  COL_VERTEX(-1279, -1177, -4351);
	  COL_VERTEX(-1279, -1177, -3972);
	  COL_VERTEX(-1074, -1177, -3941);
	  COL_VERTEX(-1074, -1177, -3839);
	  COL_VERTEX(-1074, -1177, -4351);
	  COL_VERTEX(-1074, -1177, -3972);
	  COL_VERTEX(1280, -1074, -2841);
	  COL_VERTEX(1178, -1074, -2841);
	  COL_VERTEX(1178, -1074, -2482);
	  COL_VERTEX(1280, -1074, -2482);
	  COL_VERTEX(-2610, -1177, -1177);
	  COL_VERTEX(-2815, -1177, -1177);
	  COL_VERTEX(-2815, -1177, -1074);
	  COL_VERTEX(-2610, -1177, -1074);
	  COL_VERTEX(-2815, -1177, -665);
	  COL_VERTEX(-2610, -1177, -1043);
	  COL_VERTEX(-2815, -1177, -1043);
	  COL_VERTEX(-2610, -1177, -665);
	  COL_VERTEX(-3020, -1177, -1177);
	  COL_VERTEX(-3020, -1177, -1074);
	  COL_VERTEX(-3020, -1177, -665);
	  COL_VERTEX(-3020, -1177, -1043);
	  COL_VERTEX(563, -1074, 1587);
	  COL_VERTEX(410, -1074, 1741);
	  COL_VERTEX(461, -1074, 1741);
	  COL_VERTEX(563, -1074, 2406);
	  COL_VERTEX(358, -1074, 1792);
	  COL_VERTEX(358, -1074, 2202);
	  COL_VERTEX(461, -1074, 2253);
	  COL_VERTEX(410, -1074, 2253);
	  COL_VERTEX(3866, -1074, 2406);
	  COL_VERTEX(3866, -1074, 1587);
	  COL_VERTEX(5530, -1074, 2406);
	  COL_VERTEX(5530, -1074, 1587);
	  COL_VERTEX(3456, -1074, 2406);
	  COL_VERTEX(3456, -1074, 1587);
	  COL_VERTEX(-3225, -1177, -1177);
	  COL_VERTEX(-3225, -1177, -1074);
	  COL_VERTEX(-3225, -1177, -665);
	  COL_VERTEX(-3225, -1177, -1043);
	  COL_VERTEX(5530, -255, 1587);
	  COL_VERTEX(3533, -255, 2406);
	  COL_VERTEX(3533, -255, 1587);
	  COL_VERTEX(5530, -255, 2406);
	  COL_VERTEX(3533, -1074, 2406);
	  COL_VERTEX(3533, -1074, 1587);
	  COL_VERTEX(3482, -1074, 1638);
	  COL_VERTEX(3430, -306, 1638);
	  COL_VERTEX(3430, -1074, 1638);
	  COL_VERTEX(3482, -306, 1638);
	  COL_VERTEX(3379, -255, 1587);
	  COL_VERTEX(3379, -255, 2406);
	  COL_VERTEX(3430, -306, 2355);
	  COL_VERTEX(3482, -306, 2355);
	  COL_VERTEX(3379, -1074, 2406);
	  COL_VERTEX(3430, -1074, 2355);
	  COL_VERTEX(3482, -1074, 2355);
	  COL_VERTEX(2611, -255, 2406);
	  COL_VERTEX(2662, -306, 2355);
	  COL_VERTEX(2714, -306, 2355);
	  COL_VERTEX(2662, -1074, 2355);
	  COL_VERTEX(2714, -1074, 2355);
	  COL_VERTEX(2611, -1074, 2406);
	  COL_VERTEX(2714, -1074, 1638);
	  COL_VERTEX(2662, -1074, 1638);
	  COL_VERTEX(2765, -1074, 1587);
	  COL_VERTEX(1997, -1074, 1587);
	  COL_VERTEX(1946, -1074, 1638);
	  COL_VERTEX(1894, -1074, 1638);
	  COL_VERTEX(1843, -1074, 2406);
	  COL_VERTEX(1894, -1074, 2355);
	  COL_VERTEX(1946, -1074, 2355);
	  COL_VERTEX(1946, -306, 2355);
	  COL_VERTEX(1894, -306, 2355);
	  COL_VERTEX(1843, -255, 2406);
	  COL_VERTEX(1075, -255, 2406);
	  COL_VERTEX(1126, -306, 2355);
	  COL_VERTEX(1178, -306, 2355);
	  COL_VERTEX(1075, -1074, 2406);
	  COL_VERTEX(1126, -1074, 2355);
	  COL_VERTEX(1178, -1074, 2355);
	  COL_VERTEX(1229, -1074, 1587);
	  COL_VERTEX(1178, -1074, 1638);
	  COL_VERTEX(1126, -1074, 1638);
	  COL_VERTEX(358, -818, 1843);
	  COL_VERTEX(307, -1074, 1843);
	  COL_VERTEX(358, -818, 2150);
	  COL_VERTEX(358, -1074, 2150);
	  COL_VERTEX(563, -255, 2406);
	  COL_VERTEX(307, -818, 1843);
	  COL_VERTEX(307, -1074, 2150);
	  COL_VERTEX(358, -255, 1792);
	  COL_VERTEX(11008, -1586, -1279);
	  COL_VERTEX(-562, -767, -460);
	  COL_VERTEX(-562, -767, 154);
	  COL_VERTEX(-511, -767, 154);
	  COL_VERTEX(-153, -767, -460);
	  COL_VERTEX(1178, -1177, -972);
	  COL_VERTEX(768, -1177, -1177);
	  COL_VERTEX(870, -1177, -1049);
	  COL_VERTEX(870, -1177, -690);
	  COL_VERTEX(5376, -255, -972);
	  COL_VERTEX(3635, -2508, -921);
	  COL_VERTEX(3686, -2469, -101);
	  COL_VERTEX(5376, -255, -50);
	  COL_VERTEX(3686, -2508, -921);
	  COL_VERTEX(3584, -2508, -921);
	  COL_VERTEX(3584, -2508, -101);
	  COL_VERTEX(3533, -2508, -50);
	  COL_VERTEX(6605, -1586, -1279);
	  COL_VERTEX(6605, -1177, -50);
	  COL_VERTEX(6605, -1177, -1279);
	  COL_VERTEX(5888, -255, -1279);
	  COL_VERTEX(6605, -1586, 256);
	  COL_VERTEX(5888, -1177, -1279);
	  COL_VERTEX(-562, -306, 154);
	  COL_VERTEX(51, -306, 154);
	  COL_VERTEX(410, -562, -460);
	  COL_VERTEX(768, -1177, -460);
	  COL_VERTEX(-153, -1177, -460);
	  COL_VERTEX(410, -562, 154);
	  COL_VERTEX(-153, -767, 154);
	  COL_VERTEX(717, -921, -946);
	  COL_VERTEX(768, -921, -946);
	  COL_VERTEX(768, -921, -793);
	  COL_VERTEX(768, -1177, -793);
	  COL_VERTEX(717, -921, -793);
	  COL_VERTEX(-255, -511, 154);
	  COL_VERTEX(-409, -511, 154);
	  COL_VERTEX(-153, -972, -460);
	  COL_VERTEX(-255, -511, 256);
	  COL_VERTEX(-409, -511, 256);
	  COL_VERTEX(-255, -511, 205);
	  COL_VERTEX(-409, -511, 205);
	  COL_VERTEX(-255, -767, 205);
	  COL_VERTEX(-255, -767, 256);
	  COL_VERTEX(-409, -767, 205);
	  COL_VERTEX(-409, -767, 256);
	  COL_VERTEX(0, -972, -460);
	  COL_VERTEX(0, -1177, 154);
	  COL_VERTEX(7629, -255, 154);
	  COL_VERTEX(7731, -255, 51);
	  COL_VERTEX(7834, -255, 51);
	  COL_VERTEX(7629, -255, -1177);
	  COL_VERTEX(7731, -255, -1074);
	  COL_VERTEX(7629, -255, -1279);
	  COL_VERTEX(5581, -255, -153);
	  COL_VERTEX(5478, -255, -153);
	  COL_VERTEX(5888, -255, 256);
	  COL_VERTEX(5581, -255, -869);
	  COL_VERTEX(5478, -255, -869);
	  COL_VERTEX(7834, -1330, -434);
	  COL_VERTEX(7834, -1586, -434);
	  COL_VERTEX(7834, -1586, -588);
	  COL_VERTEX(7834, -1330, -588);
	  COL_VERTEX(7834, -1586, -1074);
	  COL_VERTEX(1997, -562, -1177);
	  COL_VERTEX(1178, -1177, -50);
	  COL_VERTEX(1894, -1381, -972);
	  COL_VERTEX(1997, -1177, 154);
	  COL_VERTEX(2202, -562, 154);
	  COL_VERTEX(2202, -562, -50);
	  COL_VERTEX(1997, -1177, -1177);
	  COL_VERTEX(2202, -562, -972);
	  COL_VERTEX(2099, -1586, -972);
	  COL_VERTEX(3635, -1586, -972);
	  COL_VERTEX(1894, -1177, -50);
	  COL_VERTEX(1894, -1381, -50);
	  COL_VERTEX(2099, -1586, -50);
	  COL_VERTEX(1178, -1074, -3762);
	  COL_VERTEX(1690, -1074, -3455);
	  COL_VERTEX(1690, -1074, -1868);
	  COL_VERTEX(1178, -665, -2892);
	  COL_VERTEX(1178, -1074, -2277);
	  COL_VERTEX(1178, -1074, -3660);
	  COL_VERTEX(1178, -1074, -3045);
	  COL_VERTEX(1229, -1074, -2994);
	  COL_VERTEX(1229, -1074, -2943);
	  COL_VERTEX(1178, -1074, -2431);
	  COL_VERTEX(1229, -1074, -2380);
	  COL_VERTEX(1229, -1074, -2329);
	  COL_VERTEX(3635, -357, -1663);
	  COL_VERTEX(3635, -1074, -3660);
	  COL_VERTEX(3277, -1279, -2482);
	  COL_VERTEX(1280, -1074, -3762);
	  COL_VERTEX(3533, -1074, -1561);
	  COL_VERTEX(1178, -1074, -1663);
	  COL_VERTEX(1229, -1074, -1663);
	  COL_VERTEX(1280, -1074, -1612);
	  COL_VERTEX(1280, -1074, -3711);
	  COL_VERTEX(1229, -1074, -3660);
	  COL_VERTEX(3584, -1074, -3660);
	  COL_VERTEX(3533, -1074, -3711);
	  COL_VERTEX(3533, -1074, -1612);
	  COL_VERTEX(3584, -1074, -1663);
	  COL_VERTEX(3277, -1279, -2841);
	  COL_VERTEX(3328, -1381, -2482);
	  COL_VERTEX(3277, -1228, -2482);
	  COL_VERTEX(3277, -1177, -2482);
	  COL_VERTEX(3328, -1177, -2482);
	  COL_VERTEX(3200, -1330, -2482);
	  COL_VERTEX(3149, -1330, -2482);
	  COL_VERTEX(3149, -1381, -2482);
	  COL_VERTEX(3277, -1381, -2431);
	  COL_VERTEX(3149, -1330, -2431);
	  COL_VERTEX(3277, -1381, -2892);
	  COL_VERTEX(3200, -1330, -2892);
	  COL_VERTEX(3149, -1330, -2892);
	  COL_VERTEX(3277, -1228, -2892);
	  COL_VERTEX(3149, -1381, -2892);
	  COL_VERTEX(3149, -1330, -2841);
	  COL_VERTEX(3328, -1381, -2841);
	  COL_VERTEX(3277, -1177, -2892);
	  COL_VERTEX(3328, -1177, -2892);
	  COL_VERTEX(3277, -1381, -1868);
	  COL_VERTEX(3328, -1279, -2047);
	  COL_VERTEX(3328, -1253, -2047);
	  COL_VERTEX(3328, -1253, -2021);
	  COL_VERTEX(3635, -1253, -2021);
	  COL_VERTEX(3328, -1228, -2021);
	  COL_VERTEX(3328, -1228, -1996);
	  COL_VERTEX(3635, -1228, -1996);
	  COL_VERTEX(3328, -1202, -1996);
	  COL_VERTEX(3328, -1202, -1970);
	  COL_VERTEX(3635, -1202, -1970);
	  COL_VERTEX(3328, -1177, -1970);
	  COL_VERTEX(3328, -1177, -1945);
	  COL_VERTEX(3328, -1151, -1945);
	  COL_VERTEX(3328, -1151, -1919);
	  COL_VERTEX(3635, -1151, -1919);
	  COL_VERTEX(3328, -1125, -1919);
	  COL_VERTEX(3328, -1125, -1893);
	  COL_VERTEX(3635, -1125, -1893);
	  COL_VERTEX(3328, -1100, -1893);
	  COL_VERTEX(3328, -1100, -1868);
	  COL_VERTEX(3635, -1100, -1868);
	  COL_VERTEX(3328, -1279, -1801);
	  COL_VERTEX(3277, -972, -1801);
	  COL_VERTEX(3277, -972, -1893);
	  COL_VERTEX(3277, -1049, -1893);
	  COL_VERTEX(3277, -1202, -2047);
	  COL_VERTEX(3277, -1177, -2431);
	  COL_VERTEX(3328, -1177, -2431);
	  COL_VERTEX(3277, -1279, -1801);
	  COL_VERTEX(3277, -1202, -2098);
	  COL_VERTEX(3635, -1074, -3455);
	  COL_VERTEX(1690, -1381, -3455);
	  COL_VERTEX(1690, -1381, -1868);
	  COL_VERTEX(3635, -1074, -1561);
	  COL_VERTEX(1178, -818, -2585);
	  COL_VERTEX(1178, -818, -2738);
	  COL_VERTEX(3635, -357, -1561);
	  COL_VERTEX(1126, -818, -2738);
	  COL_VERTEX(1178, -1074, -2738);
	  COL_VERTEX(1126, -1074, -2738);
	  COL_VERTEX(1075, -818, -2585);
	  COL_VERTEX(1126, -818, -2585);
	  COL_VERTEX(3277, -1279, -3522);
	  COL_VERTEX(3328, -1279, -3522);
	  COL_VERTEX(3328, -1279, -2892);
	  COL_VERTEX(3277, -1202, -3225);
	  COL_VERTEX(3277, -972, -3522);
	  COL_VERTEX(3328, -972, -1801);
	  COL_VERTEX(3200, -1356, -2482);
	  COL_VERTEX(3200, -1381, -2482);
	  COL_VERTEX(3226, -1356, -2482);
	  COL_VERTEX(3226, -1330, -2482);
	  COL_VERTEX(3251, -1330, -2482);
	  COL_VERTEX(3251, -1305, -2482);
	  COL_VERTEX(3277, -1305, -2482);
	  COL_VERTEX(3277, -1049, -3429);
	  COL_VERTEX(3277, -972, -3429);
	  COL_VERTEX(3277, -1202, -3276);
	  COL_VERTEX(3328, -1100, -3429);
	  COL_VERTEX(3328, -1100, -3455);
	  COL_VERTEX(3328, -1125, -3429);
	  COL_VERTEX(3328, -1125, -3404);
	  COL_VERTEX(3328, -1151, -3404);
	  COL_VERTEX(3328, -1151, -3378);
	  COL_VERTEX(3328, -1177, -3378);
	  COL_VERTEX(3328, -1177, -3353);
	  COL_VERTEX(3328, -1202, -3353);
	  COL_VERTEX(3328, -1202, -3327);
	  COL_VERTEX(3328, -1228, -3327);
	  COL_VERTEX(3328, -1228, -3301);
	  COL_VERTEX(3328, -1253, -3301);
	  COL_VERTEX(3328, -1253, -3276);
	  COL_VERTEX(3328, -1279, -3276);
	  COL_VERTEX(870, -1074, -2303);
	  COL_VERTEX(1075, -1074, -2405);
	  COL_VERTEX(973, -1074, -2482);
	  COL_VERTEX(666, -1074, -2508);
	  COL_VERTEX(1075, -1074, -2841);
	  COL_VERTEX(1075, -1074, -2917);
	  COL_VERTEX(870, -1074, -3020);
	  COL_VERTEX(666, -1074, -2815);
	  COL_VERTEX(1075, -562, -2917);
	  COL_VERTEX(358, -1177, -562);
	  COL_VERTEX(666, -1177, -562);
	  COL_VERTEX(563, -1177, -690);
	  COL_VERTEX(358, -1177, -1177);
	  COL_VERTEX(51, -1279, -562);
	  COL_VERTEX(563, -1177, -1049);
	  COL_VERTEX(-3378, -1279, 1075);
	  COL_VERTEX(-2917, -1279, 1280);
	  COL_VERTEX(-3276, -1279, 1382);
	  COL_VERTEX(-3378, -1279, 1382);
	  COL_VERTEX(-562, -1177, -3429);
	  COL_VERTEX(-3225, -1177, -1689);
	  COL_VERTEX(666, -562, -562);
	  COL_VERTEX(-1074, -1194, -1791);
	  COL_VERTEX(-1177, -1279, -2815);
	  COL_VERTEX(-2201, -1177, -3429);
	  COL_VERTEX(-1791, -480, -3839);
	  COL_VERTEX(-2201, -562, -3429);
	  COL_VERTEX(-3634, -562, -1484);
	  COL_VERTEX(-4146, -562, -1381);
	  COL_VERTEX(-3532, -1279, 256);
	  COL_VERTEX(-3532, -562, 256);
	  COL_VERTEX(-4044, -1381, -1484);
	  COL_VERTEX(-4044, -1381, -1433);
	  COL_VERTEX(-4095, -1381, -1381);
	  COL_VERTEX(-3583, -1381, -1381);
	  COL_VERTEX(-3634, -1381, -1433);
	  COL_VERTEX(-3532, -1381, -1381);
	  COL_VERTEX(-4146, -562, -1484);
	  COL_VERTEX(-4146, -562, -1074);
	  COL_VERTEX(-3225, -562, -3429);
	  COL_VERTEX(-562, -562, -3429);
	  COL_VERTEX(-1791, -1279, -2815);
	  COL_VERTEX(-2508, -1279, -2815);
	  COL_VERTEX(-1689, -562, -2713);
	  COL_VERTEX(-2610, -1279, -2713);
	  COL_VERTEX(-1689, -1279, -1893);
	  COL_VERTEX(-1791, -562, -1791);
	  COL_VERTEX(-460, -1279, -2815);
	  COL_VERTEX(-460, -1279, -1893);
	  COL_VERTEX(-562, -562, -1791);
	  COL_VERTEX(-562, -1279, -2917);
	  COL_VERTEX(-1074, -1279, -2917);
	  COL_VERTEX(-562, -562, -1074);
	  COL_VERTEX(-460, -562, -562);
	  COL_VERTEX(-562, -1279, -665);
	  COL_VERTEX(-511, -1279, -665);
	  COL_VERTEX(-460, -1279, -613);
	  COL_VERTEX(-562, -1279, -1074);
	  COL_VERTEX(-665, -1279, -1177);
	  COL_VERTEX(-1074, -1279, -1791);
	  COL_VERTEX(-2098, -1177, -1177);
	  COL_VERTEX(-1177, -1177, -1996);
	  COL_VERTEX(-1996, -1177, -1791);
	  COL_VERTEX(-2098, -1177, 256);
	  COL_VERTEX(-1996, -1177, -1740);
	  COL_VERTEX(-2047, -1177, -1689);
	  COL_VERTEX(-1484, -562, -1177);
	  COL_VERTEX(-1586, -1177, -1074);
	  COL_VERTEX(-2815, -562, 1075);
	  COL_VERTEX(-2713, -562, 973);
	  COL_VERTEX(-3481, -1279, 973);
	  COL_VERTEX(-3429, -1279, 358);
	  COL_VERTEX(-4146, -1279, -255);
	  COL_VERTEX(-4146, -1381, -972);
	  COL_VERTEX(-3532, -1279, -255);
	  COL_VERTEX(-3173, -1023, 1382);
	  COL_VERTEX(-3020, -1023, 1382);
	  COL_VERTEX(-2815, -1279, 1382);
	  COL_VERTEX(-3020, -1023, 1434);
	  COL_VERTEX(-3173, -1023, 1485);
	  COL_VERTEX(-3173, -1023, 1434);
	  COL_VERTEX(-3173, -1279, 1485);
	  COL_VERTEX(-3173, -1279, 1434);
	  COL_VERTEX(-1637, -1177, 870);
	  COL_VERTEX(-1689, -1177, 922);
	  COL_VERTEX(-1689, -1177, 973);
	  COL_VERTEX(-4146, -1279, 870);
	  COL_VERTEX(-4095, -1279, 870);
	  COL_VERTEX(-4044, -1279, 922);
	  COL_VERTEX(-2098, -1177, 973);
	  COL_VERTEX(-2815, -1279, 1075);
	  COL_VERTEX(-2815, -562, 1382);
	  COL_VERTEX(-3378, -562, 1382);
	  COL_VERTEX(51, -562, -1381);
	  COL_VERTEX(1075, -562, -2405);
	  COL_VERTEX(563, -562, -1177);
	  COL_VERTEX(-1074, -470, -3890);
	  COL_VERTEX(-1023, -480, -3839);
	  COL_VERTEX(-1740, -480, -3839);
	  COL_VERTEX(-1689, -470, -3890);
	  COL_VERTEX(-1074, -460, -3941);
	  COL_VERTEX(51, -562, -3429);
	  COL_VERTEX(563, -1177, -562);
	  COL_VERTEX(-562, -1279, -562);
	  COL_VERTEX(51, -1279, -3429);
	  COL_VERTEX(-3225, -1279, -3429);
	  COL_VERTEX(-3225, -1279, -1074);
	  COL_VERTEX(-665, -1177, -3327);
	  COL_VERTEX(-2098, -1177, -3327);
	  COL_VERTEX(-562, -1279, -1791);
	  COL_VERTEX(-1177, -1279, -2713);
	  COL_VERTEX(666, -921, -793);
	  COL_VERTEX(666, -921, -946);
	  COL_VERTEX(717, -1177, -793);
	  COL_VERTEX(666, -1177, -1074);
	  COL_VERTEX(614, -562, -1074);
	  COL_VERTEX(563, -562, -1125);
	  COL_VERTEX(666, -1305, -3122);
	  COL_VERTEX(51, -1279, -1893);
	  COL_VERTEX(358, -1279, -2815);
	  COL_VERTEX(358, -1305, -2815);
	  COL_VERTEX(358, -1279, -2508);
	  COL_VERTEX(666, -1279, -2201);
	  COL_VERTEX(666, -562, -665);
	  COL_VERTEX(614, -562, -665);
	  COL_VERTEX(614, -1177, -665);
	  COL_VERTEX(-3122, -562, -3378);
	  COL_VERTEX(-3173, -562, -3327);
	  COL_VERTEX(-3225, -562, -3327);
	  COL_VERTEX(-2815, -1279, 358);
	  COL_VERTEX(-562, -806, 1075);
	  COL_VERTEX(-101, -429, 1075);
	  COL_VERTEX(-562, -460, 1178);
	  COL_VERTEX(-3276, -1279, 1587);
	  COL_VERTEX(-2917, -1279, 1485);
	  COL_VERTEX(-2917, -1279, 1587);
	  COL_VERTEX(-2815, -1279, 1485);
	  COL_VERTEX(-2815, -1279, 1997);
	  COL_VERTEX(-2713, -1279, 2202);
	  COL_VERTEX(-3364, -1279, 2123);
	  COL_VERTEX(-3168, -1279, 2533);
	  COL_VERTEX(-2713, -665, 2202);
	  COL_VERTEX(-2815, -665, 1997);
	  COL_VERTEX(154, -1074, 1741);
	  COL_VERTEX(51, -1074, 2714);
	  COL_VERTEX(154, -1074, 2253);
	  COL_VERTEX(256, -1074, 1562);
	  COL_VERTEX(256, -1074, 2432);
	  COL_VERTEX(-101, -767, 256);
	  COL_VERTEX(-153, -767, 256);
	  COL_VERTEX(-511, -767, 358);
	  COL_VERTEX(-3020, -1023, 1485);
	  COL_VERTEX(-562, -306, 666);
	  COL_VERTEX(-562, -767, 256);
	  COL_VERTEX(-562, -306, 256);
	  COL_VERTEX(-101, -306, 256);
	  COL_VERTEX(-101, -460, 1178);
	  COL_VERTEX(-613, -1074, 1178);
	  COL_VERTEX(-1228, -1074, 1587);
	  COL_VERTEX(-1893, -1279, 2099);
	  COL_VERTEX(-50, -1279, 2816);
	  COL_VERTEX(-1893, -1279, 2202);
	  COL_VERTEX(-1279, -1279, 2816);
	  COL_VERTEX(256, -1074, 1715);
	  COL_VERTEX(256, -818, 1843);
	  COL_VERTEX(256, -818, 2150);
	  COL_VERTEX(51, -357, 2714);
	  COL_VERTEX(0, -357, 1280);
	  COL_VERTEX(-460, -1074, 1792);
	  COL_VERTEX(256, -1074, 2150);
	  COL_VERTEX(256, -1074, 1843);
	  COL_VERTEX(-50, -357, 1229);
	  COL_VERTEX(-50, -357, 1178);
	  COL_VERTEX(-665, -1074, 1587);
	  COL_VERTEX(-1893, -1074, 1587);
	  COL_VERTEX(-818, -1074, 973);
	  COL_VERTEX(-869, -818, 973);
	  COL_VERTEX(-1228, -357, 973);
	  COL_VERTEX(-869, -818, 922);
	  COL_VERTEX(-1177, -1074, 973);
	  COL_VERTEX(-1177, -818, 973);
	  COL_VERTEX(-869, -818, 870);
	  COL_VERTEX(-1177, -1074, 922);
	  COL_VERTEX(-1177, -818, 922);
	  COL_VERTEX(-1177, -818, 870);
	  COL_VERTEX(-1433, -357, 1178);
	  COL_VERTEX(-1893, -357, 1178);
	  COL_VERTEX(-1381, -357, 2714);
	  COL_VERTEX(-1791, -357, 2304);
	  COL_VERTEX(-1791, -665, 2304);
	  COL_VERTEX(-1454, -562, 2641);
	  COL_VERTEX(-1719, -562, 2376);
	  COL_VERTEX(-1833, -562, 2489);
	  COL_VERTEX(-1586, -946, 1536);
	  COL_VERTEX(-1586, -1177, 1766);
	  COL_VERTEX(-1586, -1279, 1818);
	  COL_VERTEX(-1535, -1177, 1766);
	  COL_VERTEX(-1228, -946, 1536);
	  COL_VERTEX(-1228, -1177, 1766);
	  COL_VERTEX(-1228, -1279, 1818);
	  COL_VERTEX(-1177, -1177, 1766);
	  COL_VERTEX(-1535, -1100, 1613);
	  COL_VERTEX(-1535, -1100, 1587);
	  COL_VERTEX(-1535, -1125, 1613);
	  COL_VERTEX(-1535, -1125, 1638);
	  COL_VERTEX(-1535, -1151, 1638);
	  COL_VERTEX(-1535, -1151, 1664);
	  COL_VERTEX(-1535, -1177, 1664);
	  COL_VERTEX(-1535, -1177, 1690);
	  COL_VERTEX(-1535, -1202, 1690);
	  COL_VERTEX(-1535, -1202, 1715);
	  COL_VERTEX(-1535, -1228, 1715);
	  COL_VERTEX(-1535, -1228, 1741);
	  COL_VERTEX(-1535, -1253, 1741);
	  COL_VERTEX(-1535, -1253, 1766);
	  COL_VERTEX(-1535, -1279, 1766);
	  COL_VERTEX(-1791, -357, 2202);
	  COL_VERTEX(-1791, -1279, 2304);
	  COL_VERTEX(-1177, -357, 2816);
	  COL_VERTEX(-1279, -357, 2714);
	  COL_VERTEX(205, -357, 2381);
	  COL_VERTEX(205, -357, 2330);
	  COL_VERTEX(256, -357, 2278);
	  COL_VERTEX(205, -357, 1613);
	  COL_VERTEX(205, -357, 1664);
	  COL_VERTEX(256, -357, 1562);
	  COL_VERTEX(-1842, -357, 1280);
	  COL_VERTEX(-1791, -357, 1229);
	  COL_VERTEX(-1893, -357, 1280);
	  COL_VERTEX(0, -357, 2714);
	  COL_VERTEX(-50, -357, 2765);
	  COL_VERTEX(-1791, -1074, 1178);
	  COL_VERTEX(-818, -357, 973);
	  COL_VERTEX(-1562, -1279, 2862);
	  COL_VERTEX(-1893, -1279, 2406);
	  COL_VERTEX(-1381, -1279, 2714);
	  COL_VERTEX(-2098, -665, 2509);
	  COL_VERTEX(-1893, -665, 2406);
	  COL_VERTEX(-1562, -665, 2862);
	  COL_VERTEX(-1381, -665, 2714);
	  COL_VERTEX(-1623, -562, 2779);
	  COL_VERTEX(-2075, -562, 2609);
	  COL_VERTEX(-2098, -1279, 2509);
	  COL_VERTEX(-1972, -1279, 3058);
	  COL_VERTEX(-1972, -665, 3058);
	  COL_VERTEX(-1995, -562, 2958);
	  COL_VERTEX(-2430, -1279, 3058);
	  COL_VERTEX(-2303, -1279, 2509);
	  COL_VERTEX(-2303, -665, 2509);
	  COL_VERTEX(-2430, -665, 3058);
	  COL_VERTEX(-2839, -665, 2862);
	  COL_VERTEX(-2407, -562, 2958);
	  COL_VERTEX(-2326, -562, 2609);
	  COL_VERTEX(-2839, -1279, 2862);
	  COL_VERTEX(-2508, -1279, 2406);
	  COL_VERTEX(-2508, -665, 2406);
	  COL_VERTEX(-2779, -562, 2779);
	  COL_VERTEX(-2568, -562, 2489);
	  COL_VERTEX(-3168, -665, 2533);
	  COL_VERTEX(-3085, -562, 2472);
	  COL_VERTEX(-2795, -562, 2262);
	  COL_VERTEX(-2915, -562, 2020);
	  COL_VERTEX(-3364, -665, 2123);
	  COL_VERTEX(-3378, -665, 1485);
	  COL_VERTEX(-3264, -562, 2100);
	  COL_VERTEX(-1535, -946, 1536);
	  COL_VERTEX(-1177, -1279, 1818);
	  COL_VERTEX(-1177, -946, 1536);
	  COL_VERTEX(-1228, -997, 1587);
	  COL_VERTEX(-1535, -946, 1587);
	  COL_VERTEX(-1177, -946, 1587);
	  COL_VERTEX(-1586, -997, 1587);
	  COL_VERTEX(-1535, -1279, 1818);
	  COL_VERTEX(-1228, -460, 358);
	  COL_VERTEX(-1330, -562, 358);
	  COL_VERTEX(-1330, -1074, 358);
	  COL_VERTEX(-1330, -1074, 870);
	  COL_VERTEX(-818, -460, 358);
	  COL_VERTEX(-716, -562, 358);
	  COL_VERTEX(-716, -1074, 870);
	  COL_VERTEX(-716, -1074, 358);
	  COL_VERTEX(3379, -1074, 1587);
	  COL_VERTEX(2611, -255, 1587);
	  COL_VERTEX(2662, -306, 1638);
	  COL_VERTEX(2714, -306, 1638);
	  COL_VERTEX(2765, -255, 1587);
	  COL_VERTEX(2765, -255, 2406);
	  COL_VERTEX(2765, -1074, 2406);
	  COL_VERTEX(2611, -1074, 1587);
	  COL_VERTEX(1946, -306, 1638);
	  COL_VERTEX(1997, -255, 1587);
	  COL_VERTEX(1894, -306, 1638);
	  COL_VERTEX(1843, -255, 1587);
	  COL_VERTEX(1843, -1074, 1587);
	  COL_VERTEX(1997, -255, 2406);
	  COL_VERTEX(1997, -1074, 2406);
	  COL_VERTEX(1126, -306, 1638);
	  COL_VERTEX(1075, -255, 1587);
	  COL_VERTEX(1178, -306, 1638);
	  COL_VERTEX(1229, -255, 1587);
	  COL_VERTEX(1229, -255, 2406);
	  COL_VERTEX(1229, -1074, 2406);
	  COL_VERTEX(1075, -1074, 1587);
	  COL_VERTEX(358, -1074, 1843);
	  COL_VERTEX(358, -255, 2202);
	  COL_VERTEX(307, -818, 2150);
	  COL_VERTEX(563, -255, 1587);
	  COL_VERTEX(7936, -1586, -1279);
	  COL_VERTEX(7936, -1586, 230);
	  COL_VERTEX(11008, -1586, 230);
	  COL_VERTEX(-511, -767, 51);
	  COL_VERTEX(-153, -767, 51);
	  COL_VERTEX(768, -1177, -1049);
	  COL_VERTEX(768, -1177, -690);
	  COL_VERTEX(3738, -1508, -972);
	  COL_VERTEX(3686, -2469, -921);
	  COL_VERTEX(3738, -1508, -50);
	  COL_VERTEX(3635, -2508, -101);
	  COL_VERTEX(3686, -1547, -921);
	  COL_VERTEX(3686, -1547, -101);
	  COL_VERTEX(3635, -1586, -50);
	  COL_VERTEX(3584, -1586, -921);
	  COL_VERTEX(3533, -1586, -972);
	  COL_VERTEX(3533, -2508, -972);
	  COL_VERTEX(3584, -1586, -101);
	  COL_VERTEX(3686, -2508, -101);
	  COL_VERTEX(3533, -1586, -50);
	  COL_VERTEX(7834, -255, -1279);
	  COL_VERTEX(7834, -255, 256);
	  COL_VERTEX(6605, -1177, -972);
	  COL_VERTEX(6605, -1177, 256);
	  COL_VERTEX(5888, -1177, 256);
	  COL_VERTEX(7629, -255, 256);
	  COL_VERTEX(-562, -306, -460);
	  COL_VERTEX(51, -306, -460);
	  COL_VERTEX(768, -562, -460);
	  COL_VERTEX(768, -562, 154);
	  COL_VERTEX(-255, -767, 154);
	  COL_VERTEX(768, -1177, -946);
	  COL_VERTEX(768, -562, -1177);
	  COL_VERTEX(717, -1177, -946);
	  COL_VERTEX(-409, -767, 154);
	  COL_VERTEX(-153, -972, 154);
	  COL_VERTEX(0, -972, 154);
	  COL_VERTEX(0, -1177, -460);
	  COL_VERTEX(7629, -1586, 154);
	  COL_VERTEX(7731, -1586, 51);
	  COL_VERTEX(7834, -1586, 51);
	  COL_VERTEX(7731, -1586, -1074);
	  COL_VERTEX(7834, -255, -1074);
	  COL_VERTEX(7629, -1586, -1177);
	  COL_VERTEX(5478, -1177, -153);
	  COL_VERTEX(5581, -1177, -153);
	  COL_VERTEX(5581, -1177, -869);
	  COL_VERTEX(5478, -1177, -869);
	  COL_VERTEX(7936, -1586, -434);
	  COL_VERTEX(7936, -1586, -588);
	  COL_VERTEX(7936, -1330, -588);
	  COL_VERTEX(7936, -1330, -434);
	  COL_VERTEX(1894, -1177, -972);
	  COL_VERTEX(1997, -562, 154);
	  COL_VERTEX(-153, -1177, 154);
	  COL_VERTEX(2202, -562, -1177);
	  COL_VERTEX(2202, -1177, -50);
	  COL_VERTEX(2202, -1177, -972);
	  COL_VERTEX(3635, -2508, -50);
	  COL_VERTEX(3635, -2508, -972);
	  COL_VERTEX(1178, -1074, -1561);
	  COL_VERTEX(1178, -357, -2431);
	  COL_VERTEX(1178, -665, -2431);
	  COL_VERTEX(1178, -357, -2892);
	  COL_VERTEX(1178, -357, -2277);
	  COL_VERTEX(1178, -357, -1663);
	  COL_VERTEX(1178, -357, -3045);
	  COL_VERTEX(1178, -357, -3660);
	  COL_VERTEX(1229, -357, -2994);
	  COL_VERTEX(1229, -357, -2943);
	  COL_VERTEX(1178, -1074, -2892);
	  COL_VERTEX(1229, -357, -2380);
	  COL_VERTEX(1229, -357, -2329);
	  COL_VERTEX(3635, -357, -3660);
	  COL_VERTEX(3635, -1074, -1663);
	  COL_VERTEX(3635, -1279, -3660);
	  COL_VERTEX(3635, -1279, -1663);
	  COL_VERTEX(3328, -1279, -2482);
	  COL_VERTEX(3328, -1279, -2841);
	  COL_VERTEX(3533, -357, -3762);
	  COL_VERTEX(1280, -357, -3762);
	  COL_VERTEX(3533, -1074, -3762);
	  COL_VERTEX(1280, -1074, -1561);
	  COL_VERTEX(1280, -357, -1561);
	  COL_VERTEX(3533, -357, -1561);
	  COL_VERTEX(1229, -357, -1663);
	  COL_VERTEX(1280, -357, -1612);
	  COL_VERTEX(1280, -357, -3711);
	  COL_VERTEX(1229, -357, -3660);
	  COL_VERTEX(3584, -357, -3660);
	  COL_VERTEX(3533, -357, -3711);
	  COL_VERTEX(3533, -357, -1612);
	  COL_VERTEX(3584, -357, -1663);
	  COL_VERTEX(3277, -1305, -2841);
	  COL_VERTEX(3328, -1279, -2431);
	  COL_VERTEX(3277, -1228, -2431);
	  COL_VERTEX(3200, -1330, -2431);
	  COL_VERTEX(3149, -1381, -2431);
	  COL_VERTEX(3277, -1228, -2841);
	  COL_VERTEX(3200, -1330, -2841);
	  COL_VERTEX(3277, -1177, -2841);
	  COL_VERTEX(3149, -1381, -2841);
	  COL_VERTEX(3328, -1177, -2841);
	  COL_VERTEX(3277, -1279, -1868);
	  COL_VERTEX(3277, -1279, -2431);
	  COL_VERTEX(3277, -1279, -2892);
	  COL_VERTEX(3277, -1279, -3455);
	  COL_VERTEX(3277, -1381, -3455);
	  COL_VERTEX(3635, -1279, -3276);
	  COL_VERTEX(3635, -1279, -2047);
	  COL_VERTEX(3635, -1253, -2047);
	  COL_VERTEX(3635, -1228, -2021);
	  COL_VERTEX(3635, -1202, -1996);
	  COL_VERTEX(3635, -1177, -1970);
	  COL_VERTEX(3635, -1177, -1945);
	  COL_VERTEX(3635, -1151, -1945);
	  COL_VERTEX(3635, -1125, -1919);
	  COL_VERTEX(3635, -1100, -1893);
	  COL_VERTEX(3328, -1202, -2098);
	  COL_VERTEX(3328, -1202, -2047);
	  COL_VERTEX(3328, -1049, -1893);
	  COL_VERTEX(3328, -972, -1893);
	  COL_VERTEX(3328, -1074, -1868);
	  COL_VERTEX(3635, -1074, -1868);
	  COL_VERTEX(3328, -1074, -3455);
	  COL_VERTEX(3635, -1100, -3455);
	  COL_VERTEX(3635, -1074, -3762);
	  COL_VERTEX(1178, -1074, -2585);
	  COL_VERTEX(1178, -357, -1561);
	  COL_VERTEX(1178, -357, -3762);
	  COL_VERTEX(3635, -357, -3762);
	  COL_VERTEX(1075, -1074, -2738);
	  COL_VERTEX(1075, -818, -2738);
	  COL_VERTEX(1126, -1074, -2585);
	  COL_VERTEX(1075, -1074, -2585);
	  COL_VERTEX(3328, -1202, -3225);
	  COL_VERTEX(3328, -972, -3522);
	  COL_VERTEX(3328, -972, -3429);
	  COL_VERTEX(3328, -1049, -3429);
	  COL_VERTEX(3328, -1202, -3276);
	  COL_VERTEX(3328, -1074, -3522);
	  COL_VERTEX(3277, -1074, -3522);
	  COL_VERTEX(3277, -1074, -1801);
	  COL_VERTEX(3328, -1074, -1801);
	  COL_VERTEX(3200, -1356, -2841);
	  COL_VERTEX(3200, -1381, -2841);
	  COL_VERTEX(3226, -1356, -2841);
	  COL_VERTEX(3226, -1330, -2841);
	  COL_VERTEX(3251, -1330, -2841);
	  COL_VERTEX(3251, -1305, -2841);
	  COL_VERTEX(3635, -1100, -3429);
	  COL_VERTEX(3635, -1125, -3429);
	  COL_VERTEX(3635, -1125, -3404);
	  COL_VERTEX(3635, -1151, -3404);
	  COL_VERTEX(3635, -1151, -3378);
	  COL_VERTEX(3635, -1177, -3378);
	  COL_VERTEX(3635, -1177, -3353);
	  COL_VERTEX(3635, -1202, -3353);
	  COL_VERTEX(3635, -1202, -3327);
	  COL_VERTEX(3635, -1228, -3327);
	  COL_VERTEX(3635, -1228, -3301);
	  COL_VERTEX(3635, -1253, -3301);
	  COL_VERTEX(3635, -1253, -3276);
	  COL_VERTEX(1075, -1074, -2482);
	  COL_VERTEX(973, -1074, -2841);
	  COL_VERTEX(870, -1305, -2303);
	  COL_VERTEX(666, -1305, -2508);
	  COL_VERTEX(666, -1305, -2815);
	  COL_VERTEX(870, -1305, -3020);
	  COL_VERTEX(666, -1177, -690);
	  COL_VERTEX(666, -1177, -1049);
	  COL_VERTEX(51, -1279, -1381);
	  COL_VERTEX(666, -1177, -1177);
	  COL_VERTEX(-3276, -1279, 1280);
	  COL_VERTEX(-2917, -1279, 1382);
	  COL_VERTEX(-2610, -1177, -1689);
	  COL_VERTEX(-2610, -1279, -2610);
	  COL_VERTEX(-3225, -1279, -2610);
	  COL_VERTEX(51, -562, -562);
	  COL_VERTEX(51, -562, -1177);
	  COL_VERTEX(666, -562, -1177);
	  COL_VERTEX(-1177, -562, -1893);
	  COL_VERTEX(-1177, -1177, -1893);
	  COL_VERTEX(-1074, -562, -1791);
	  COL_VERTEX(-1177, -562, -2815);
	  COL_VERTEX(-1177, -1279, -1893);
	  COL_VERTEX(-2098, -1279, -3327);
	  COL_VERTEX(-2201, -1279, -3429);
	  COL_VERTEX(-1791, -1177, -3839);
	  COL_VERTEX(-1740, -1177, -3839);
	  COL_VERTEX(-1689, -460, -3941);
	  COL_VERTEX(-562, -1279, -3429);
	  COL_VERTEX(-665, -1279, -3327);
	  COL_VERTEX(-3225, -562, -1074);
	  COL_VERTEX(-1689, -1177, -3890);
	  COL_VERTEX(-1074, -1177, -3890);
	  COL_VERTEX(-2610, -562, -1074);
	  COL_VERTEX(-3634, -1381, -1484);
	  COL_VERTEX(-4044, -562, -1484);
	  COL_VERTEX(-4146, -562, 870);
	  COL_VERTEX(-4146, -1381, 870);
	  COL_VERTEX(-4146, -1381, -1381);
	  COL_VERTEX(-3429, -562, 358);
	  COL_VERTEX(-3532, -562, -1381);
	  COL_VERTEX(-3532, -1381, 256);
	  COL_VERTEX(-4044, -562, -1433);
	  COL_VERTEX(-4095, -562, -1381);
	  COL_VERTEX(-3634, -562, -1433);
	  COL_VERTEX(-3583, -562, -1381);
	  COL_VERTEX(-3532, -562, -1484);
	  COL_VERTEX(-3532, -562, -1074);
	  COL_VERTEX(-1586, -562, 973);
	  COL_VERTEX(-1586, -562, -1074);
	  COL_VERTEX(-4146, -562, 973);
	  COL_VERTEX(-562, -562, -562);
	  COL_VERTEX(-2508, -562, -2815);
	  COL_VERTEX(-2610, -562, -2713);
	  COL_VERTEX(-1791, -562, -2815);
	  COL_VERTEX(-1689, -1279, -2713);
	  COL_VERTEX(-2610, -1279, -1074);
	  COL_VERTEX(-1689, -562, -1893);
	  COL_VERTEX(-1689, -1177, -1893);
	  COL_VERTEX(-562, -562, -2917);
	  COL_VERTEX(-460, -562, -2815);
	  COL_VERTEX(-460, -562, -1893);
	  COL_VERTEX(-1791, -1177, -1791);
	  COL_VERTEX(-1074, -562, -2917);
	  COL_VERTEX(-562, -562, -665);
	  COL_VERTEX(563, -562, -562);
	  COL_VERTEX(563, -1279, -562);
	  COL_VERTEX(-460, -1279, -562);
	  COL_VERTEX(-511, -562, -665);
	  COL_VERTEX(-460, -562, -613);
	  COL_VERTEX(-665, -562, -1177);
	  COL_VERTEX(-1484, -1279, -1177);
	  COL_VERTEX(-1177, -1177, -1177);
	  COL_VERTEX(-2098, -1177, -1893);
	  COL_VERTEX(-1689, -1177, -1996);
	  COL_VERTEX(-1996, -562, -1791);
	  COL_VERTEX(-2098, -1177, -1689);
	  COL_VERTEX(-2098, -562, -1689);
	  COL_VERTEX(-2098, -562, 256);
	  COL_VERTEX(-1996, -562, -1740);
	  COL_VERTEX(-2047, -562, -1689);
	  COL_VERTEX(-1484, -1177, -1177);
	  COL_VERTEX(-1586, -1177, 870);
	  COL_VERTEX(-1586, -562, 870);
	  COL_VERTEX(-2713, -1270, 973);
	  COL_VERTEX(-1689, -1185, 973);
	  COL_VERTEX(-1689, -562, 973);
	  COL_VERTEX(-4044, -562, 973);
	  COL_VERTEX(-3481, -562, 973);
	  COL_VERTEX(-4044, -1279, 973);
	  COL_VERTEX(-2201, -562, 358);
	  COL_VERTEX(-2201, -1191, 358);
	  COL_VERTEX(-2201, -1279, 358);
	  COL_VERTEX(-3532, -1381, -972);
	  COL_VERTEX(-3532, -1381, -1484);
	  COL_VERTEX(-4146, -1381, -1484);
	  COL_VERTEX(-4146, -1279, 973);
	  COL_VERTEX(-3173, -1279, 1382);
	  COL_VERTEX(-3020, -1279, 1382);
	  COL_VERTEX(-3020, -1279, 1434);
	  COL_VERTEX(-3020, -1279, 1485);
	  COL_VERTEX(-1637, -562, 870);
	  COL_VERTEX(-1689, -562, 922);
	  COL_VERTEX(-4095, -562, 870);
	  COL_VERTEX(-4044, -562, 922);
	  COL_VERTEX(-1586, -1177, 973);
	  COL_VERTEX(-3378, -562, 1075);
	  COL_VERTEX(256, -562, -1177);
	  COL_VERTEX(51, -562, -1893);
	  COL_VERTEX(51, -1330, -1893);
	  COL_VERTEX(256, -1279, -1177);
	  COL_VERTEX(563, -1279, -1177);
	  COL_VERTEX(-1023, -1177, -3839);
	  COL_VERTEX(-972, -1177, -3839);
	  COL_VERTEX(-972, -480, -3839);
	  COL_VERTEX(1075, -1330, -2405);
	  COL_VERTEX(563, -562, -613);
	  COL_VERTEX(563, -1177, -613);
	  COL_VERTEX(-3225, -1279, -3327);
	  COL_VERTEX(-3122, -562, -3429);
	  COL_VERTEX(-3122, -1279, -3429);
	  COL_VERTEX(666, -1177, -793);
	  COL_VERTEX(666, -1177, -946);
	  COL_VERTEX(666, -1177, -665);
	  COL_VERTEX(666, -562, -1074);
	  COL_VERTEX(51, -1330, -3429);
	  COL_VERTEX(1075, -1330, -2917);
	  COL_VERTEX(614, -1177, -1074);
	  COL_VERTEX(563, -1177, -1125);
	  COL_VERTEX(563, -1177, -1177);
	  COL_VERTEX(358, -1305, -2508);
	  COL_VERTEX(666, -1305, -2201);
	  COL_VERTEX(666, -1279, -3122);
	  COL_VERTEX(-3122, -1279, -3378);
	  COL_VERTEX(-3173, -1279, -3327);
	  COL_VERTEX(-101, -858, 1178);
	  COL_VERTEX(-562, -858, 1178);
	  COL_VERTEX(-101, -806, 1075);
	  COL_VERTEX(-562, -429, 1075);
	  COL_VERTEX(-3276, -1279, 1485);
	  COL_VERTEX(-3378, -1279, 1485);
	  COL_VERTEX(-3276, -562, 1485);
	  COL_VERTEX(-2815, -665, 1485);
	  COL_VERTEX(51, -1074, 1280);
	  COL_VERTEX(256, -1074, 1741);
	  COL_VERTEX(256, -1074, 2253);
	  COL_VERTEX(51, -357, 1280);
	  COL_VERTEX(256, -357, 2432);
	  COL_VERTEX(-153, -767, 358);
	  COL_VERTEX(-511, -767, 256);
	  COL_VERTEX(-2917, -562, 1485);
	  COL_VERTEX(-101, -306, 666);
	  COL_VERTEX(-50, -1074, 1178);
	  COL_VERTEX(-613, -357, 1178);
	  COL_VERTEX(-1535, -1074, 1587);
	  COL_VERTEX(-1228, -1100, 1587);
	  COL_VERTEX(-1177, -1279, 1587);
	  COL_VERTEX(-665, -1279, 1587);
	  COL_VERTEX(-1893, -1279, 1587);
	  COL_VERTEX(-1586, -1279, 1587);
	  COL_VERTEX(-1893, -1279, 1280);
	  COL_VERTEX(-1893, -357, 2099);
	  COL_VERTEX(-50, -357, 2816);
	  COL_VERTEX(-1177, -1279, 2816);
	  COL_VERTEX(-460, -1279, 1587);
	  COL_VERTEX(-460, -1279, 2816);
	  COL_VERTEX(256, -357, 1715);
	  COL_VERTEX(256, -1074, 2278);
	  COL_VERTEX(0, -1074, 2714);
	  COL_VERTEX(-460, -1074, 2816);
	  COL_VERTEX(51, -1074, 2816);
	  COL_VERTEX(51, -1074, 1178);
	  COL_VERTEX(0, -1074, 1280);
	  COL_VERTEX(-50, -1074, 2765);
	  COL_VERTEX(-50, -1074, 1229);
	  COL_VERTEX(-1433, -1074, 1178);
	  COL_VERTEX(-1228, -1074, 973);
	  COL_VERTEX(-1893, -1074, 1178);
	  COL_VERTEX(-869, -1074, 973);
	  COL_VERTEX(-869, -1074, 922);
	  COL_VERTEX(-869, -1074, 870);
	  COL_VERTEX(-1177, -1074, 870);
	  COL_VERTEX(256, -357, 2816);
	  COL_VERTEX(-1893, -357, 2816);
	  COL_VERTEX(256, -357, 1178);
	  COL_VERTEX(-1535, -1074, 1536);
	  COL_VERTEX(-1586, -1074, 1536);
	  COL_VERTEX(-1535, -997, 1587);
	  COL_VERTEX(-1535, -1177, 1818);
	  COL_VERTEX(-1586, -1177, 1818);
	  COL_VERTEX(-1177, -1074, 1536);
	  COL_VERTEX(-1228, -1074, 1536);
	  COL_VERTEX(-1177, -997, 1587);
	  COL_VERTEX(-1177, -1177, 1818);
	  COL_VERTEX(-1228, -1177, 1818);
	  COL_VERTEX(-1228, -1100, 1613);
	  COL_VERTEX(-1228, -1125, 1613);
	  COL_VERTEX(-1228, -1125, 1638);
	  COL_VERTEX(-1228, -1151, 1638);
	  COL_VERTEX(-1228, -1151, 1664);
	  COL_VERTEX(-1228, -1177, 1664);
	  COL_VERTEX(-1228, -1177, 1690);
	  COL_VERTEX(-1228, -1202, 1690);
	  COL_VERTEX(-1228, -1202, 1715);
	  COL_VERTEX(-1228, -1228, 1715);
	  COL_VERTEX(-1228, -1228, 1741);
	  COL_VERTEX(-1228, -1253, 1741);
	  COL_VERTEX(-1228, -1253, 1766);
	  COL_VERTEX(-1228, -1279, 1766);
	  COL_VERTEX(-1791, -1279, 2202);
	  COL_VERTEX(-1279, -1279, 2714);
	  COL_VERTEX(205, -1074, 2381);
	  COL_VERTEX(205, -1074, 2330);
	  COL_VERTEX(205, -1074, 1664);
	  COL_VERTEX(205, -1074, 1613);
	  COL_VERTEX(-1791, -1074, 1229);
	  COL_VERTEX(-1791, -357, 1178);
	  COL_VERTEX(-1842, -1074, 1280);
	  COL_VERTEX(-1893, -1074, 1280);
	  COL_VERTEX(-50, -1074, 2816);
	  COL_VERTEX(-460, -1279, 1792);
	  COL_VERTEX(-1586, -946, 1587);
	  COL_VERTEX(-1177, -1279, 1536);
	  COL_VERTEX(-1228, -946, 1587);
	  COL_VERTEX(-1228, -1279, 1536);
	  COL_VERTEX(-1586, -1279, 1536);
	  COL_VERTEX(-1535, -1279, 1536);
	  COL_VERTEX(-1330, -562, 870);
	  COL_VERTEX(-1228, -460, 870);
	  COL_VERTEX(-818, -460, 870);
	  COL_VERTEX(-716, -562, 870);
	  COL_TRI_INIT(SURFACE_DEFAULT, 1255);
	  COL_TRI(142, 143, 144);
	  COL_TRI(142, 145, 143);
	  COL_TRI(145, 146, 143);
	  COL_TRI(145, 134, 146);
	  COL_TRI(147, 142, 144);
	  COL_TRI(147, 135, 142);
	  COL_TRI(148, 149, 150);
	  COL_TRI(148, 151, 149);
	  COL_TRI(150, 149, 152);
	  COL_TRI(150, 152, 671);
	  COL_TRI(147, 151, 148);
	  COL_TRI(147, 144, 151);
	  COL_TRI(153, 149, 154);
	  COL_TRI(153, 152, 149);
	  COL_TRI(154, 151, 155);
	  COL_TRI(154, 149, 151);
	  COL_TRI(155, 151, 144);
	  COL_TRI(155, 144, 143);
	  COL_TRI(156, 154, 157);
	  COL_TRI(156, 153, 154);
	  COL_TRI(157, 154, 155);
	  COL_TRI(157, 155, 158);
	  COL_TRI(158, 143, 146);
	  COL_TRI(158, 155, 143);
	  COL_TRI(163, 676, 677);
	  COL_TRI(159, 672, 673);
	  COL_TRI(159, 673, 160);
	  COL_TRI(160, 673, 674);
	  COL_TRI(160, 674, 161);
	  COL_TRI(161, 674, 675);
	  COL_TRI(161, 675, 676);
	  COL_TRI(162, 161, 163);
	  COL_TRI(163, 161, 676);
	  COL_TRI(162, 160, 161);
	  COL_TRI(164, 160, 162);
	  COL_TRI(164, 159, 160);
	  COL_TRI(165, 673, 166);
	  COL_TRI(166, 673, 672);
	  COL_TRI(166, 672, 678);
	  COL_TRI(165, 674, 673);
	  COL_TRI(167, 674, 165);
	  COL_TRI(170, 682, 683);
	  COL_TRI(167, 675, 674);
	  COL_TRI(168, 679, 169);
	  COL_TRI(168, 680, 679);
	  COL_TRI(169, 681, 170);
	  COL_TRI(169, 679, 681);
	  COL_TRI(170, 681, 682);
	  COL_TRI(175, 679, 174);
	  COL_TRI(171, 175, 172);
	  COL_TRI(171, 176, 175);
	  COL_TRI(172, 175, 174);
	  COL_TRI(172, 174, 173);
	  COL_TRI(173, 684, 685);
	  COL_TRI(173, 174, 684);
	  COL_TRI(174, 680, 684);
	  COL_TRI(174, 679, 680);
	  COL_TRI(178, 686, 688);
	  COL_TRI(175, 681, 679);
	  COL_TRI(176, 681, 175);
	  COL_TRI(176, 682, 681);
	  COL_TRI(177, 686, 178);
	  COL_TRI(177, 687, 686);
	  COL_TRI(178, 688, 179);
	  COL_TRI(179, 688, 689);
	  COL_TRI(179, 689, 690);
	  COL_TRI(180, 178, 181);
	  COL_TRI(180, 177, 178);
	  COL_TRI(181, 178, 179);
	  COL_TRI(181, 179, 182);
	  COL_TRI(182, 690, 691);
	  COL_TRI(182, 179, 690);
	  COL_TRI(187, 693, 186);
	  COL_TRI(183, 688, 184);
	  COL_TRI(183, 689, 688);
	  COL_TRI(184, 686, 185);
	  COL_TRI(184, 688, 686);
	  COL_TRI(185, 686, 687);
	  COL_TRI(185, 687, 692);
	  COL_TRI(186, 693, 128);
	  COL_TRI(187, 186, 191);
	  COL_TRI(186, 128, 193);
	  COL_TRI(188, 186, 193);
	  COL_TRI(188, 193, 694);
	  COL_TRI(189, 695, 188);
	  COL_TRI(129, 188, 694);
	  COL_TRI(129, 189, 188);
	  COL_TRI(190, 129, 694);
	  COL_TRI(190, 127, 129);
	  COL_TRI(189, 192, 695);
	  COL_TRI(191, 188, 695);
	  COL_TRI(191, 186, 188);
	  COL_TRI(192, 189, 693);
	  COL_TRI(192, 693, 187);
	  COL_TRI(156, 127, 190);
	  COL_TRI(156, 190, 153);
	  COL_TRI(190, 694, 193);
	  COL_TRI(190, 193, 696);
	  COL_TRI(153, 190, 696);
	  COL_TRI(41, 45, 43);
	  COL_TRI(193, 128, 124);
	  COL_TRI(193, 124, 696);
	  COL_TRI(153, 696, 152);
	  COL_TRI(124, 152, 696);
	  COL_TRI(124, 671, 152);
	  COL_TRI(41, 47, 45);
	  COL_TRI(197, 223, 701);
	  COL_TRI(79, 81, 211);
	  COL_TRI(194, 697, 698);
	  COL_TRI(194, 698, 699);
	  COL_TRI(195, 196, 700);
	  COL_TRI(196, 197, 700);
	  COL_TRI(197, 701, 700);
	  COL_TRI(203, 71, 64);
	  COL_TRI(198, 700, 701);
	  COL_TRI(198, 195, 700);
	  COL_TRI(199, 201, 202);
	  COL_TRI(199, 200, 201);
	  COL_TRI(200, 702, 201);
	  COL_TRI(201, 702, 703);
	  COL_TRI(201, 703, 202);
	  COL_TRI(202, 703, 220);
	  COL_TRI(199, 202, 220);
	  COL_TRI(203, 704, 71);
	  COL_TRI(71, 704, 708);
	  COL_TRI(71, 705, 205);
	  COL_TRI(71, 205, 69);
	  COL_TRI(70, 69, 706);
	  COL_TRI(204, 707, 205);
	  COL_TRI(204, 205, 705);
	  COL_TRI(71, 708, 705);
	  COL_TRI(207, 708, 711);
	  COL_TRI(205, 709, 706);
	  COL_TRI(205, 706, 69);
	  COL_TRI(206, 267, 203);
	  COL_TRI(70, 706, 206);
	  COL_TRI(206, 710, 267);
	  COL_TRI(207, 711, 208);
	  COL_TRI(208, 711, 712);
	  COL_TRI(208, 712, 713);
	  COL_TRI(209, 714, 709);
	  COL_TRI(209, 709, 715);
	  COL_TRI(210, 714, 209);
	  COL_TRI(210, 716, 714);
	  COL_TRI(206, 214, 717);
	  COL_TRI(206, 717, 718);
	  COL_TRI(206, 718, 250);
	  COL_TRI(206, 203, 214);
	  COL_TRI(72, 719, 73);
	  COL_TRI(74, 212, 65);
	  COL_TRI(65, 212, 720);
	  COL_TRI(65, 720, 215);
	  COL_TRI(214, 211, 81);
	  COL_TRI(211, 213, 719);
	  COL_TRI(211, 719, 72);
	  COL_TRI(212, 74, 721);
	  COL_TRI(212, 721, 720);
	  COL_TRI(213, 73, 719);
	  COL_TRI(213, 216, 73);
	  COL_TRI(214, 81, 247);
	  COL_TRI(211, 215, 79);
	  COL_TRI(214, 216, 211);
	  COL_TRI(215, 721, 250);
	  COL_TRI(215, 250, 722);
	  COL_TRI(215, 722, 79);
	  COL_TRI(216, 70, 721);
	  COL_TRI(216, 64, 70);
	  COL_TRI(220, 725, 219);
	  COL_TRI(217, 196, 195);
	  COL_TRI(217, 195, 723);
	  COL_TRI(218, 217, 723);
	  COL_TRI(218, 723, 724);
	  COL_TRI(218, 724, 219);
	  COL_TRI(218, 219, 222);
	  COL_TRI(219, 725, 726);
	  COL_TRI(219, 726, 222);
	  COL_TRI(222, 261, 223);
	  COL_TRI(221, 220, 219);
	  COL_TRI(198, 219, 724);
	  COL_TRI(198, 221, 219);
	  COL_TRI(195, 198, 723);
	  COL_TRI(198, 724, 723);
	  COL_TRI(218, 222, 223);
	  COL_TRI(217, 218, 229);
	  COL_TRI(218, 223, 229);
	  COL_TRI(223, 727, 229);
	  COL_TRI(224, 728, 225);
	  COL_TRI(225, 728, 200);
	  COL_TRI(225, 200, 729);
	  COL_TRI(226, 225, 729);
	  COL_TRI(227, 728, 730);
	  COL_TRI(224, 730, 728);
	  COL_TRI(226, 729, 725);
	  COL_TRI(226, 227, 503);
	  COL_TRI(226, 503, 228);
	  COL_TRI(220, 226, 725);
	  COL_TRI(220, 227, 226);
	  COL_TRI(227, 730, 503);
	  COL_TRI(228, 224, 225);
	  COL_TRI(228, 225, 226);
	  COL_TRI(229, 230, 217);
	  COL_TRI(230, 196, 217);
	  COL_TRI(230, 731, 196);
	  COL_TRI(231, 198, 223);
	  COL_TRI(231, 223, 732);
	  COL_TRI(232, 234, 236);
	  COL_TRI(233, 234, 232);
	  COL_TRI(233, 235, 234);
	  COL_TRI(234, 229, 727);
	  COL_TRI(234, 727, 236);
	  COL_TRI(235, 229, 234);
	  COL_TRI(236, 727, 731);
	  COL_TRI(232, 236, 237);
	  COL_TRI(237, 236, 238);
	  COL_TRI(236, 731, 238);
	  COL_TRI(240, 241, 734);
	  COL_TRI(235, 230, 229);
	  COL_TRI(238, 731, 230);
	  COL_TRI(237, 238, 239);
	  COL_TRI(239, 238, 235);
	  COL_TRI(238, 230, 235);
	  COL_TRI(239, 235, 233);
	  COL_TRI(231, 733, 240);
	  COL_TRI(240, 733, 241);
	  COL_TRI(241, 268, 259);
	  COL_TRI(241, 261, 268);
	  COL_TRI(241, 259, 220);
	  COL_TRI(241, 220, 734);
	  COL_TRI(231, 732, 733);
	  COL_TRI(242, 79, 722);
	  COL_TRI(243, 735, 242);
	  COL_TRI(242, 735, 79);
	  COL_TRI(247, 81, 740);
	  COL_TRI(243, 736, 735);
	  COL_TRI(244, 736, 243);
	  COL_TRI(244, 737, 736);
	  COL_TRI(245, 738, 246);
	  COL_TRI(246, 738, 257);
	  COL_TRI(246, 257, 739);
	  COL_TRI(245, 740, 738);
	  COL_TRI(247, 740, 245);
	  COL_TRI(252, 743, 251);
	  COL_TRI(248, 741, 249);
	  COL_TRI(249, 741, 70);
	  COL_TRI(249, 70, 206);
	  COL_TRI(248, 742, 741);
	  COL_TRI(250, 742, 248);
	  COL_TRI(250, 721, 742);
	  COL_TRI(251, 743, 216);
	  COL_TRI(251, 216, 214);
	  COL_TRI(256, 748, 253);
	  COL_TRI(252, 744, 743);
	  COL_TRI(203, 744, 252);
	  COL_TRI(203, 64, 744);
	  COL_TRI(253, 745, 254);
	  COL_TRI(254, 745, 746);
	  COL_TRI(254, 746, 255);
	  COL_TRI(255, 746, 747);
	  COL_TRI(255, 747, 256);
	  COL_TRI(253, 748, 745);
	  COL_TRI(256, 747, 748);
	  COL_TRI(259, 199, 220);
	  COL_TRI(256, 253, 244);
	  COL_TRI(253, 737, 244);
	  COL_TRI(253, 254, 737);
	  COL_TRI(256, 244, 739);
	  COL_TRI(257, 256, 739);
	  COL_TRI(257, 255, 256);
	  COL_TRI(258, 200, 264);
	  COL_TRI(258, 729, 200);
	  COL_TRI(262, 726, 729);
	  COL_TRI(199, 260, 749);
	  COL_TRI(260, 268, 749);
	  COL_TRI(260, 269, 268);
	  COL_TRI(222, 750, 261);
	  COL_TRI(261, 751, 223);
	  COL_TRI(262, 729, 752);
	  COL_TRI(199, 66, 260);
	  COL_TRI(263, 261, 750);
	  COL_TRI(263, 753, 261);
	  COL_TRI(264, 261, 753);
	  COL_TRI(264, 268, 261);
	  COL_TRI(264, 749, 268);
	  COL_TRI(199, 264, 200);
	  COL_TRI(199, 749, 264);
	  COL_TRI(258, 264, 754);
	  COL_TRI(264, 753, 754);
	  COL_TRI(265, 753, 263);
	  COL_TRI(265, 754, 753);
	  COL_TRI(258, 754, 265);
	  COL_TRI(76, 75, 755);
	  COL_TRI(199, 67, 66);
	  COL_TRI(199, 68, 67);
	  COL_TRI(66, 76, 266);
	  COL_TRI(66, 266, 260);
	  COL_TRI(266, 269, 260);
	  COL_TRI(76, 712, 266);
	  COL_TRI(266, 270, 269);
	  COL_TRI(267, 270, 266);
	  COL_TRI(76, 713, 712);
	  COL_TRI(76, 755, 756);
	  COL_TRI(270, 210, 75);
	  COL_TRI(268, 269, 259);
	  COL_TRI(269, 270, 77);
	  COL_TRI(269, 68, 259);
	  COL_TRI(269, 77, 68);
	  COL_TRI(270, 75, 77);
	  COL_TRI(199, 259, 68);
	  COL_TRI(270, 716, 210);
	  COL_TRI(267, 710, 270);
	  COL_TRI(275, 761, 762);
	  COL_TRI(271, 109, 108);
	  COL_TRI(272, 271, 108);
	  COL_TRI(273, 272, 108);
	  COL_TRI(273, 108, 111);
	  COL_TRI(273, 111, 757);
	  COL_TRI(111, 110, 757);
	  COL_TRI(274, 758, 759);
	  COL_TRI(274, 760, 758);
	  COL_TRI(278, 766, 279);
	  COL_TRI(275, 762, 288);
	  COL_TRI(276, 763, 277);
	  COL_TRI(276, 764, 763);
	  COL_TRI(277, 763, 765);
	  COL_TRI(277, 765, 278);
	  COL_TRI(278, 765, 766);
	  COL_TRI(283, 770, 284);
	  COL_TRI(279, 766, 760);
	  COL_TRI(279, 760, 767);
	  COL_TRI(280, 758, 768);
	  COL_TRI(280, 768, 281);
	  COL_TRI(281, 768, 769);
	  COL_TRI(281, 769, 282);
	  COL_TRI(282, 769, 761);
	  COL_TRI(282, 761, 275);
	  COL_TRI(286, 778, 776);
	  COL_TRI(283, 284, 771);
	  COL_TRI(284, 772, 773);
	  COL_TRI(284, 773, 771);
	  COL_TRI(285, 774, 775);
	  COL_TRI(285, 775, 297);
	  COL_TRI(286, 776, 777);
	  COL_TRI(286, 784, 291);
	  COL_TRI(287, 779, 780);
	  COL_TRI(287, 780, 781);
	  COL_TRI(288, 762, 782);
	  COL_TRI(288, 782, 289);
	  COL_TRI(289, 782, 783);
	  COL_TRI(289, 783, 290);
	  COL_TRI(290, 783, 780);
	  COL_TRI(290, 780, 779);
	  COL_TRI(291, 784, 785);
	  COL_TRI(286, 777, 784);
	  COL_TRI(291, 785, 292);
	  COL_TRI(292, 785, 764);
	  COL_TRI(292, 764, 276);
	  COL_TRI(284, 770, 786);
	  COL_TRI(284, 786, 293);
	  COL_TRI(293, 786, 787);
	  COL_TRI(296, 283, 771);
	  COL_TRI(293, 787, 294);
	  COL_TRI(294, 787, 776);
	  COL_TRI(294, 776, 778);
	  COL_TRI(287, 781, 788);
	  COL_TRI(287, 788, 295);
	  COL_TRI(295, 788, 789);
	  COL_TRI(295, 789, 296);
	  COL_TRI(296, 789, 283);
	  COL_TRI(297, 790, 371);
	  COL_TRI(297, 371, 285);
	  COL_TRI(298, 300, 301);
	  COL_TRI(298, 303, 302);
	  COL_TRI(298, 302, 299);
	  COL_TRI(298, 299, 300);
	  COL_TRI(298, 304, 303);
	  COL_TRI(299, 343, 300);
	  COL_TRI(300, 343, 344);
	  COL_TRI(300, 344, 301);
	  COL_TRI(304, 794, 306);
	  COL_TRI(301, 344, 791);
	  COL_TRI(301, 791, 774);
	  COL_TRI(302, 792, 299);
	  COL_TRI(299, 792, 343);
	  COL_TRI(303, 793, 302);
	  COL_TRI(302, 793, 792);
	  COL_TRI(303, 306, 793);
	  COL_TRI(304, 306, 303);
	  COL_TRI(310, 797, 314);
	  COL_TRI(305, 793, 306);
	  COL_TRI(306, 794, 305);
	  COL_TRI(305, 792, 793);
	  COL_TRI(307, 309, 308);
	  COL_TRI(307, 308, 310);
	  COL_TRI(307, 311, 309);
	  COL_TRI(308, 795, 310);
	  COL_TRI(309, 796, 308);
	  COL_TRI(308, 796, 795);
	  COL_TRI(310, 795, 797);
	  COL_TRI(311, 312, 309);
	  COL_TRI(309, 312, 796);
	  COL_TRI(311, 798, 312);
	  COL_TRI(312, 798, 313);
	  COL_TRI(313, 799, 797);
	  COL_TRI(313, 797, 795);
	  COL_TRI(313, 795, 796);
	  COL_TRI(313, 796, 312);
	  COL_TRI(314, 797, 799);
	  COL_TRI(315, 799, 775);
	  COL_TRI(314, 799, 315);
	  COL_TRI(316, 800, 801);
	  COL_TRI(18, 316, 349);
	  COL_TRI(316, 801, 305);
	  COL_TRI(307, 802, 803);
	  COL_TRI(307, 803, 804);
	  COL_TRI(317, 805, 389);
	  COL_TRI(317, 806, 805);
	  COL_TRI(18, 17, 316);
	  COL_TRI(325, 809, 324);
	  COL_TRI(318, 806, 317);
	  COL_TRI(318, 807, 806);
	  COL_TRI(319, 807, 318);
	  COL_TRI(320, 807, 319);
	  COL_TRI(321, 320, 319);
	  COL_TRI(321, 808, 320);
	  COL_TRI(322, 808, 321);
	  COL_TRI(323, 808, 322);
	  COL_TRI(324, 323, 322);
	  COL_TRI(324, 809, 323);
	  COL_TRI(332, 813, 331);
	  COL_TRI(326, 809, 325);
	  COL_TRI(327, 326, 325);
	  COL_TRI(327, 810, 326);
	  COL_TRI(328, 810, 327);
	  COL_TRI(328, 811, 810);
	  COL_TRI(329, 811, 328);
	  COL_TRI(329, 812, 811);
	  COL_TRI(330, 812, 329);
	  COL_TRI(331, 812, 330);
	  COL_TRI(332, 331, 330);
	  COL_TRI(338, 818, 364);
	  COL_TRI(333, 813, 332);
	  COL_TRI(334, 813, 333);
	  COL_TRI(335, 334, 333);
	  COL_TRI(335, 814, 334);
	  COL_TRI(336, 814, 335);
	  COL_TRI(337, 814, 336);
	  COL_TRI(338, 791, 815);
	  COL_TRI(338, 815, 816);
	  COL_TRI(338, 816, 817);
	  COL_TRI(338, 817, 818);
	  COL_TRI(344, 815, 791);
	  COL_TRI(339, 818, 340);
	  COL_TRI(340, 818, 817);
	  COL_TRI(339, 364, 818);
	  COL_TRI(340, 817, 341);
	  COL_TRI(341, 817, 816);
	  COL_TRI(342, 816, 815);
	  COL_TRI(341, 816, 342);
	  COL_TRI(342, 815, 346);
	  COL_TRI(343, 346, 815);
	  COL_TRI(343, 815, 344);
	  COL_TRI(347, 376, 822);
	  COL_TRI(345, 342, 346);
	  COL_TRI(345, 341, 342);
	  COL_TRI(345, 340, 341);
	  COL_TRI(346, 801, 345);
	  COL_TRI(345, 339, 340);
	  COL_TRI(337, 336, 819);
	  COL_TRI(337, 819, 820);
	  COL_TRI(347, 821, 376);
	  COL_TRI(7, 349, 316);
	  COL_TRI(348, 804, 22);
	  COL_TRI(348, 22, 21);
	  COL_TRI(18, 349, 348);
	  COL_TRI(18, 348, 21);
	  COL_TRI(6, 5, 349);
	  COL_TRI(349, 4, 348);
	  COL_TRI(349, 5, 4);
	  COL_TRI(7, 6, 349);
	  COL_TRI(350, 273, 757);
	  COL_TRI(4, 0, 348);
	  COL_TRI(0, 804, 348);
	  COL_TRI(1, 7, 316);
	  COL_TRI(2, 316, 804);
	  COL_TRI(2, 1, 316);
	  COL_TRI(3, 2, 804);
	  COL_TRI(0, 3, 804);
	  COL_TRI(350, 820, 273);
	  COL_TRI(353, 825, 826);
	  COL_TRI(271, 347, 823);
	  COL_TRI(271, 272, 347);
	  COL_TRI(351, 352, 274);
	  COL_TRI(352, 767, 274);
	  COL_TRI(352, 355, 767);
	  COL_TRI(351, 274, 759);
	  COL_TRI(280, 824, 351);
	  COL_TRI(280, 351, 759);
	  COL_TRI(355, 356, 830);
	  COL_TRI(353, 826, 827);
	  COL_TRI(352, 354, 356);
	  COL_TRI(352, 356, 355);
	  COL_TRI(354, 828, 356);
	  COL_TRI(354, 829, 828);
	  COL_TRI(355, 830, 824);
	  COL_TRI(356, 831, 830);
	  COL_TRI(356, 828, 831);
	  COL_TRI(357, 358, 830);
	  COL_TRI(358, 351, 824);
	  COL_TRI(358, 824, 830);
	  COL_TRI(357, 830, 831);
	  COL_TRI(351, 358, 354);
	  COL_TRI(351, 354, 352);
	  COL_TRI(315, 362, 314);
	  COL_TRI(358, 829, 354);
	  COL_TRI(358, 357, 829);
	  COL_TRI(359, 374, 372);
	  COL_TRI(359, 372, 373);
	  COL_TRI(359, 362, 374);
	  COL_TRI(359, 802, 362);
	  COL_TRI(359, 373, 363);
	  COL_TRI(315, 832, 362);
	  COL_TRI(360, 833, 834);
	  COL_TRI(360, 834, 835);
	  COL_TRI(360, 835, 836);
	  COL_TRI(360, 836, 832);
	  COL_TRI(360, 832, 361);
	  COL_TRI(361, 832, 315);
	  COL_TRI(362, 802, 314);
	  COL_TRI(343, 801, 346);
	  COL_TRI(366, 841, 842);
	  COL_TRI(363, 833, 837);
	  COL_TRI(363, 837, 838);
	  COL_TRI(364, 339, 839);
	  COL_TRI(364, 839, 840);
	  COL_TRI(315, 775, 361);
	  COL_TRI(365, 841, 366);
	  COL_TRI(372, 834, 373);
	  COL_TRI(367, 843, 841);
	  COL_TRI(367, 841, 365);
	  COL_TRI(368, 843, 367);
	  COL_TRI(368, 844, 843);
	  COL_TRI(369, 844, 368);
	  COL_TRI(369, 845, 844);
	  COL_TRI(370, 845, 369);
	  COL_TRI(370, 846, 845);
	  COL_TRI(371, 846, 370);
	  COL_TRI(371, 790, 846);
	  COL_TRI(376, 847, 822);
	  COL_TRI(373, 834, 833);
	  COL_TRI(373, 833, 363);
	  COL_TRI(372, 835, 834);
	  COL_TRI(374, 835, 372);
	  COL_TRI(374, 836, 835);
	  COL_TRI(362, 836, 374);
	  COL_TRI(362, 832, 836);
	  COL_TRI(375, 847, 376);
	  COL_TRI(382, 852, 381);
	  COL_TRI(377, 847, 375);
	  COL_TRI(377, 848, 847);
	  COL_TRI(378, 849, 377);
	  COL_TRI(377, 849, 848);
	  COL_TRI(379, 849, 378);
	  COL_TRI(379, 850, 849);
	  COL_TRI(380, 851, 379);
	  COL_TRI(379, 851, 850);
	  COL_TRI(381, 852, 851);
	  COL_TRI(381, 851, 380);
	  COL_TRI(387, 857, 386);
	  COL_TRI(382, 853, 852);
	  COL_TRI(383, 853, 382);
	  COL_TRI(383, 854, 853);
	  COL_TRI(383, 855, 854);
	  COL_TRI(384, 855, 383);
	  COL_TRI(385, 856, 855);
	  COL_TRI(385, 855, 384);
	  COL_TRI(386, 857, 385);
	  COL_TRI(385, 857, 856);
	  COL_TRI(387, 858, 857);
	  COL_TRI(388, 859, 387);
	  COL_TRI(387, 859, 858);
	  COL_TRI(389, 859, 388);
	  COL_TRI(389, 805, 859);
	  COL_TRI(107, 96, 93);
	  COL_TRI(107, 93, 104);
	  COL_TRI(115, 139, 141);
	  COL_TRI(115, 141, 117);
	  COL_TRI(390, 391, 392);
	  COL_TRI(391, 860, 392);
	  COL_TRI(392, 860, 394);
	  COL_TRI(392, 394, 861);
	  COL_TRI(393, 390, 392);
	  COL_TRI(393, 392, 861);
	  COL_TRI(394, 395, 861);
	  COL_TRI(395, 396, 861);
	  COL_TRI(396, 397, 861);
	  COL_TRI(397, 393, 861);
	  COL_TRI(357, 831, 391);
	  COL_TRI(357, 391, 484);
	  COL_TRI(400, 866, 401);
	  COL_TRI(393, 862, 390);
	  COL_TRI(393, 863, 862);
	  COL_TRI(397, 863, 393);
	  COL_TRI(397, 864, 863);
	  COL_TRI(396, 864, 397);
	  COL_TRI(396, 865, 864);
	  COL_TRI(398, 395, 828);
	  COL_TRI(399, 400, 401);
	  COL_TRI(401, 866, 867);
	  COL_TRI(402, 399, 401);
	  COL_TRI(402, 401, 404);
	  COL_TRI(401, 867, 404);
	  COL_TRI(403, 399, 402);
	  COL_TRI(403, 402, 868);
	  COL_TRI(402, 404, 869);
	  COL_TRI(404, 867, 869);
	  COL_TRI(405, 406, 519);
	  COL_TRI(406, 467, 519);
	  COL_TRI(405, 870, 406);
	  COL_TRI(407, 406, 870);
	  COL_TRI(407, 871, 406);
	  COL_TRI(406, 871, 467);
	  COL_TRI(405, 408, 870);
	  COL_TRI(408, 407, 870);
	  COL_TRI(409, 94, 414);
	  COL_TRI(94, 93, 414);
	  COL_TRI(409, 105, 94);
	  COL_TRI(409, 104, 105);
	  COL_TRI(112, 872, 410);
	  COL_TRI(112, 410, 138);
	  COL_TRI(410, 872, 873);
	  COL_TRI(410, 873, 874);
	  COL_TRI(411, 875, 876);
	  COL_TRI(411, 876, 877);
	  COL_TRI(412, 878, 879);
	  COL_TRI(412, 880, 878);
	  COL_TRI(413, 878, 881);
	  COL_TRI(413, 882, 878);
	  COL_TRI(414, 883, 498);
	  COL_TRI(414, 498, 497);
	  COL_TRI(414, 497, 409);
	  COL_TRI(414, 884, 883);
	  COL_TRI(414, 885, 415);
	  COL_TRI(414, 415, 416);
	  COL_TRI(139, 13, 15);
	  COL_TRI(415, 885, 886);
	  COL_TRI(415, 886, 488);
	  COL_TRI(416, 887, 490);
	  COL_TRI(416, 490, 430);
	  COL_TRI(115, 139, 15);
	  COL_TRI(139, 890, 13);
	  COL_TRI(418, 897, 898);
	  COL_TRI(115, 15, 12);
	  COL_TRI(115, 12, 14);
	  COL_TRI(115, 14, 893);
	  COL_TRI(417, 421, 894);
	  COL_TRI(417, 895, 421);
	  COL_TRI(418, 896, 897);
	  COL_TRI(419, 899, 420);
	  COL_TRI(420, 900, 426);
	  COL_TRI(420, 426, 901);
	  COL_TRI(421, 902, 422);
	  COL_TRI(421, 895, 902);
	  COL_TRI(422, 902, 903);
	  COL_TRI(422, 903, 423);
	  COL_TRI(423, 903, 418);
	  COL_TRI(427, 907, 428);
	  COL_TRI(423, 418, 898);
	  COL_TRI(424, 904, 425);
	  COL_TRI(425, 904, 417);
	  COL_TRI(425, 417, 894);
	  COL_TRI(424, 905, 904);
	  COL_TRI(426, 900, 905);
	  COL_TRI(426, 905, 424);
	  COL_TRI(427, 906, 907);
	  COL_TRI(431, 432, 912);
	  COL_TRI(428, 908, 910);
	  COL_TRI(428, 909, 908);
	  COL_TRI(429, 430, 442);
	  COL_TRI(429, 442, 890);
	  COL_TRI(430, 491, 875);
	  COL_TRI(430, 875, 911);
	  COL_TRI(432, 434, 913);
	  COL_TRI(432, 913, 912);
	  COL_TRI(431, 912, 914);
	  COL_TRI(433, 915, 431);
	  COL_TRI(433, 431, 914);
	  COL_TRI(434, 893, 913);
	  COL_TRI(434, 916, 893);
	  COL_TRI(435, 915, 433);
	  COL_TRI(435, 433, 917);
	  COL_TRI(436, 918, 917);
	  COL_TRI(437, 440, 919);
	  COL_TRI(438, 437, 920);
	  COL_TRI(437, 919, 920);
	  COL_TRI(438, 920, 921);
	  COL_TRI(439, 499, 438);
	  COL_TRI(439, 438, 921);
	  COL_TRI(443, 925, 926);
	  COL_TRI(440, 923, 919);
	  COL_TRI(440, 441, 923);
	  COL_TRI(441, 413, 881);
	  COL_TRI(441, 881, 923);
	  COL_TRI(442, 924, 444);
	  COL_TRI(442, 444, 447);
	  COL_TRI(443, 926, 927);
	  COL_TRI(444, 928, 445);
	  COL_TRI(444, 924, 928);
	  COL_TRI(445, 928, 929);
	  COL_TRI(445, 929, 446);
	  COL_TRI(446, 929, 443);
	  COL_TRI(446, 443, 927);
	  COL_TRI(447, 448, 930);
	  COL_TRI(450, 879, 933);
	  COL_TRI(448, 931, 456);
	  COL_TRI(448, 456, 930);
	  COL_TRI(447, 930, 442);
	  COL_TRI(449, 439, 880);
	  COL_TRI(449, 499, 439);
	  COL_TRI(450, 932, 879);
	  COL_TRI(453, 937, 938);
	  COL_TRI(451, 934, 918);
	  COL_TRI(451, 918, 879);
	  COL_TRI(436, 922, 918);
	  COL_TRI(452, 436, 935);
	  COL_TRI(452, 922, 436);
	  COL_TRI(453, 936, 937);
	  COL_TRI(452, 935, 939);
	  COL_TRI(452, 939, 454);
	  COL_TRI(454, 939, 940);
	  COL_TRI(454, 940, 455);
	  COL_TRI(455, 940, 937);
	  COL_TRI(455, 937, 936);
	  COL_TRI(456, 941, 457);
	  COL_TRI(456, 457, 909);
	  COL_TRI(457, 942, 943);
	  COL_TRI(457, 943, 909);
	  COL_TRI(458, 944, 480);
	  COL_TRI(458, 459, 944);
	  COL_TRI(459, 945, 944);
	  COL_TRI(459, 946, 945);
	  COL_TRI(460, 947, 948);
	  COL_TRI(460, 949, 947);
	  COL_TRI(453, 938, 950);
	  COL_TRI(453, 950, 951);
	  COL_TRI(464, 956, 419);
	  COL_TRI(461, 952, 950);
	  COL_TRI(461, 950, 899);
	  COL_TRI(419, 461, 899);
	  COL_TRI(462, 953, 463);
	  COL_TRI(463, 953, 954);
	  COL_TRI(463, 954, 955);
	  COL_TRI(462, 464, 953);
	  COL_TRI(464, 462, 956);
	  COL_TRI(468, 959, 960);
	  COL_TRI(465, 408, 482);
	  COL_TRI(465, 957, 408);
	  COL_TRI(466, 465, 482);
	  COL_TRI(466, 482, 481);
	  COL_TRI(467, 466, 481);
	  COL_TRI(467, 958, 466);
	  COL_TRI(466, 959, 468);
	  COL_TRI(466, 958, 959);
	  COL_TRI(465, 468, 470);
	  COL_TRI(468, 960, 541);
	  COL_TRI(469, 472, 470);
	  COL_TRI(470, 472, 957);
	  COL_TRI(470, 957, 465);
	  COL_TRI(469, 471, 472);
	  COL_TRI(465, 466, 468);
	  COL_TRI(474, 961, 473);
	  COL_TRI(470, 468, 541);
	  COL_TRI(470, 541, 469);
	  COL_TRI(471, 959, 472);
	  COL_TRI(472, 959, 958);
	  COL_TRI(472, 958, 957);
	  COL_TRI(471, 960, 959);
	  COL_TRI(473, 961, 943);
	  COL_TRI(473, 943, 942);
	  COL_TRI(478, 947, 949);
	  COL_TRI(474, 962, 961);
	  COL_TRI(475, 962, 474);
	  COL_TRI(475, 946, 962);
	  COL_TRI(476, 896, 963);
	  COL_TRI(476, 963, 477);
	  COL_TRI(477, 963, 964);
	  COL_TRI(477, 964, 478);
	  COL_TRI(478, 964, 947);
	  COL_TRI(479, 453, 519);
	  COL_TRI(480, 479, 519);
	  COL_TRI(479, 965, 941);
	  COL_TRI(479, 941, 450);
	  COL_TRI(480, 481, 458);
	  COL_TRI(480, 467, 481);
	  COL_TRI(481, 482, 948);
	  COL_TRI(481, 948, 459);
	  COL_TRI(483, 508, 868);
	  COL_TRI(405, 948, 966);
	  COL_TRI(405, 460, 948);
	  COL_TRI(482, 405, 966);
	  COL_TRI(482, 408, 405);
	  COL_TRI(483, 967, 876);
	  COL_TRI(483, 968, 508);
	  COL_TRI(486, 892, 972);
	  COL_TRI(484, 969, 968);
	  COL_TRI(485, 967, 970);
	  COL_TRI(485, 970, 971);
	  COL_TRI(486, 972, 487);
	  COL_TRI(487, 973, 974);
	  COL_TRI(487, 972, 973);
	  COL_TRI(488, 891, 489);
	  COL_TRI(489, 891, 93);
	  COL_TRI(489, 93, 887);
	  COL_TRI(490, 887, 9);
	  COL_TRI(488, 886, 891);
	  COL_TRI(490, 104, 892);
	  COL_TRI(490, 892, 486);
	  COL_TRI(409, 430, 974);
	  COL_TRI(409, 974, 973);
	  COL_TRI(491, 484, 968);
	  COL_TRI(491, 398, 484);
	  COL_TRI(492, 976, 977);
	  COL_TRI(492, 925, 976);
	  COL_TRI(493, 403, 868);
	  COL_TRI(495, 441, 494);
	  COL_TRI(494, 493, 868);
	  COL_TRI(494, 440, 493);
	  COL_TRI(441, 440, 494);
	  COL_TRI(398, 829, 357);
	  COL_TRI(357, 484, 398);
	  COL_TRI(398, 828, 829);
	  COL_TRI(497, 888, 409);
	  COL_TRI(491, 430, 888);
	  COL_TRI(491, 888, 494);
	  COL_TRI(496, 978, 518);
	  COL_TRI(496, 518, 890);
	  COL_TRI(416, 979, 980);
	  COL_TRI(416, 980, 884);
	  COL_TRI(441, 495, 434);
	  COL_TRI(498, 889, 497);
	  COL_TRI(498, 883, 889);
	  COL_TRI(499, 932, 447);
	  COL_TRI(499, 879, 932);
	  COL_TRI(495, 874, 873);
	  COL_TRI(495, 873, 434);
	  COL_TRI(497, 889, 888);
	  COL_TRI(441, 434, 915);
	  COL_TRI(500, 441, 915);
	  COL_TRI(500, 915, 934);
	  COL_TRI(500, 934, 451);
	  COL_TRI(490, 9, 11);
	  COL_TRI(502, 982, 730);
	  COL_TRI(8, 10, 93);
	  COL_TRI(8, 93, 104);
	  COL_TRI(501, 224, 228);
	  COL_TRI(501, 502, 224);
	  COL_TRI(228, 503, 981);
	  COL_TRI(228, 981, 501);
	  COL_TRI(504, 982, 502);
	  COL_TRI(503, 730, 982);
	  COL_TRI(502, 730, 224);
	  COL_TRI(503, 982, 981);
	  COL_TRI(501, 983, 513);
	  COL_TRI(501, 981, 983);
	  COL_TRI(502, 501, 513);
	  COL_TRI(502, 513, 984);
	  COL_TRI(504, 502, 984);
	  COL_TRI(506, 988, 987);
	  COL_TRI(491, 985, 986);
	  COL_TRI(491, 986, 398);
	  COL_TRI(484, 975, 969);
	  COL_TRI(505, 504, 984);
	  COL_TRI(506, 987, 505);
	  COL_TRI(505, 987, 504);
	  COL_TRI(509, 992, 494);
	  COL_TRI(485, 988, 506);
	  COL_TRI(485, 989, 988);
	  COL_TRI(507, 510, 990);
	  COL_TRI(507, 862, 865);
	  COL_TRI(507, 991, 862);
	  COL_TRI(507, 990, 991);
	  COL_TRI(508, 511, 509);
	  COL_TRI(508, 509, 494);
	  COL_TRI(512, 991, 990);
	  COL_TRI(508, 512, 511);
	  COL_TRI(510, 507, 992);
	  COL_TRI(510, 992, 509);
	  COL_TRI(511, 510, 509);
	  COL_TRI(511, 990, 510);
	  COL_TRI(511, 512, 990);
	  COL_TRI(518, 994, 517);
	  COL_TRI(513, 983, 515);
	  COL_TRI(513, 515, 514);
	  COL_TRI(514, 515, 976);
	  COL_TRI(515, 977, 976);
	  COL_TRI(516, 980, 979);
	  COL_TRI(516, 993, 980);
	  COL_TRI(517, 993, 516);
	  COL_TRI(517, 994, 993);
	  COL_TRI(520, 997, 995);
	  COL_TRI(518, 978, 994);
	  COL_TRI(519, 419, 405);
	  COL_TRI(419, 956, 405);
	  COL_TRI(483, 868, 970);
	  COL_TRI(483, 970, 967);
	  COL_TRI(520, 995, 996);
	  COL_TRI(525, 523, 529);
	  COL_TRI(522, 996, 995);
	  COL_TRI(522, 995, 546);
	  COL_TRI(521, 997, 520);
	  COL_TRI(521, 520, 998);
	  COL_TRI(523, 999, 1000);
	  COL_TRI(523, 1000, 529);
	  COL_TRI(524, 999, 523);
	  COL_TRI(524, 523, 525);
	  COL_TRI(532, 526, 527);
	  COL_TRI(526, 524, 525);
	  COL_TRI(527, 526, 525);
	  COL_TRI(527, 525, 529);
	  COL_TRI(528, 529, 530);
	  COL_TRI(529, 1000, 653);
	  COL_TRI(529, 653, 652);
	  COL_TRI(530, 529, 652);
	  COL_TRI(528, 527, 529);
	  COL_TRI(531, 532, 527);
	  COL_TRI(531, 527, 528);
	  COL_TRI(534, 1007, 537);
	  COL_TRI(533, 536, 1003);
	  COL_TRI(534, 533, 1003);
	  COL_TRI(535, 1004, 533);
	  COL_TRI(534, 535, 533);
	  COL_TRI(533, 1004, 536);
	  COL_TRI(535, 1005, 1004);
	  COL_TRI(536, 615, 1006);
	  COL_TRI(536, 1006, 1003);
	  COL_TRI(537, 1005, 535);
	  COL_TRI(534, 537, 535);
	  COL_TRI(37, 538, 1008);
	  COL_TRI(538, 539, 1008);
	  COL_TRI(539, 1009, 540);
	  COL_TRI(539, 540, 1008);
	  COL_TRI(38, 1008, 540);
	  COL_TRI(38, 37, 1008);
	  COL_TRI(38, 540, 543);
	  COL_TRI(540, 1009, 543);
	  COL_TRI(469, 541, 1010);
	  COL_TRI(541, 1002, 1010);
	  COL_TRI(541, 526, 1002);
	  COL_TRI(541, 960, 526);
	  COL_TRI(239, 233, 543);
	  COL_TRI(469, 1010, 1001);
	  COL_TRI(469, 1001, 653);
	  COL_TRI(469, 653, 1000);
	  COL_TRI(471, 469, 1000);
	  COL_TRI(521, 998, 542);
	  COL_TRI(521, 542, 1011);
	  COL_TRI(542, 544, 545);
	  COL_TRI(542, 545, 1011);
	  COL_TRI(522, 562, 1013);
	  COL_TRI(543, 233, 544);
	  COL_TRI(544, 233, 232);
	  COL_TRI(544, 232, 545);
	  COL_TRI(545, 232, 538);
	  COL_TRI(538, 232, 237);
	  COL_TRI(522, 546, 562);
	  COL_TRI(546, 39, 1012);
	  COL_TRI(546, 1012, 562);
	  COL_TRI(26, 25, 1018);
	  COL_TRI(547, 35, 522);
	  COL_TRI(547, 522, 1013);
	  COL_TRI(548, 1014, 592);
	  COL_TRI(548, 592, 1015);
	  COL_TRI(30, 1016, 1017);
	  COL_TRI(30, 31, 1016);
	  COL_TRI(552, 1025, 1024);
	  COL_TRI(26, 1018, 1019);
	  COL_TRI(549, 1020, 618);
	  COL_TRI(549, 618, 1021);
	  COL_TRI(550, 608, 1022);
	  COL_TRI(550, 1023, 608);
	  COL_TRI(551, 552, 1024);
	  COL_TRI(551, 1024, 1018);
	  COL_TRI(553, 554, 1026);
	  COL_TRI(553, 560, 554);
	  COL_TRI(554, 555, 612);
	  COL_TRI(554, 612, 1026);
	  COL_TRI(555, 1027, 612);
	  COL_TRI(555, 559, 1027);
	  COL_TRI(534, 556, 1007);
	  COL_TRI(559, 187, 560);
	  COL_TRI(556, 534, 1028);
	  COL_TRI(556, 1028, 619);
	  COL_TRI(557, 1003, 1006);
	  COL_TRI(558, 1029, 1030);
	  COL_TRI(558, 1030, 1031);
	  COL_TRI(559, 192, 187);
	  COL_TRI(561, 1032, 557);
	  COL_TRI(554, 191, 695);
	  COL_TRI(554, 695, 555);
	  COL_TRI(560, 187, 191);
	  COL_TRI(560, 191, 554);
	  COL_TRI(192, 559, 555);
	  COL_TRI(192, 555, 695);
	  COL_TRI(563, 565, 1035);
	  COL_TRI(557, 1032, 1003);
	  COL_TRI(561, 1034, 1032);
	  COL_TRI(562, 1034, 561);
	  COL_TRI(562, 1012, 1034);
	  COL_TRI(558, 1031, 547);
	  COL_TRI(563, 558, 547);
	  COL_TRI(563, 547, 565);
	  COL_TRI(564, 563, 1035);
	  COL_TRI(567, 569, 570);
	  COL_TRI(565, 1036, 1035);
	  COL_TRI(564, 1035, 1037);
	  COL_TRI(566, 622, 567);
	  COL_TRI(566, 565, 622);
	  COL_TRI(567, 570, 566);
	  COL_TRI(566, 1038, 565);
	  COL_TRI(568, 1038, 566);
	  COL_TRI(567, 1036, 569);
	  COL_TRI(568, 1039, 1038);
	  COL_TRI(569, 1038, 1039);
	  COL_TRI(570, 569, 572);
	  COL_TRI(570, 572, 573);
	  COL_TRI(569, 1039, 572);
	  COL_TRI(571, 1040, 1039);
	  COL_TRI(571, 1039, 568);
	  COL_TRI(572, 1039, 1040);
	  COL_TRI(572, 1040, 1041);
	  COL_TRI(573, 572, 1041);
	  COL_TRI(573, 1041, 574);
	  COL_TRI(574, 568, 573);
	  COL_TRI(573, 568, 566);
	  COL_TRI(573, 566, 570);
	  COL_TRI(574, 571, 568);
	  COL_TRI(522, 38, 542);
	  COL_TRI(38, 544, 542);
	  COL_TRI(522, 35, 38);
	  COL_TRI(575, 622, 1013);
	  COL_TRI(545, 37, 1011);
	  COL_TRI(37, 546, 1011);
	  COL_TRI(37, 39, 546);
	  COL_TRI(37, 545, 538);
	  COL_TRI(38, 543, 544);
	  COL_TRI(575, 567, 622);
	  COL_TRI(582, 627, 579);
	  COL_TRI(576, 1042, 1043);
	  COL_TRI(576, 1044, 1042);
	  COL_TRI(577, 629, 580);
	  COL_TRI(578, 577, 580);
	  COL_TRI(578, 580, 581);
	  COL_TRI(579, 578, 581);
	  COL_TRI(580, 582, 581);
	  COL_TRI(581, 582, 579);
	  COL_TRI(579, 627, 624);
	  COL_TRI(579, 624, 607);
	  COL_TRI(583, 655, 1045);
	  COL_TRI(583, 1045, 1046);
	  COL_TRI(584, 1047, 661);
	  COL_TRI(584, 586, 1047);
	  COL_TRI(585, 662, 1048);
	  COL_TRI(585, 1048, 1049);
	  COL_TRI(584, 1049, 586);
	  COL_TRI(586, 1049, 1048);
	  COL_TRI(587, 657, 1050);
	  COL_TRI(587, 1050, 1051);
	  COL_TRI(588, 1052, 658);
	  COL_TRI(588, 590, 1052);
	  COL_TRI(589, 656, 1053);
	  COL_TRI(589, 1053, 1054);
	  COL_TRI(588, 1054, 590);
	  COL_TRI(590, 1054, 1053);
	  COL_TRI(591, 1055, 592);
	  COL_TRI(592, 1055, 1015);
	  COL_TRI(593, 1056, 1055);
	  COL_TRI(593, 1055, 591);
	  COL_TRI(594, 1057, 593);
	  COL_TRI(593, 1057, 1056);
	  COL_TRI(595, 1057, 594);
	  COL_TRI(595, 1058, 1057);
	  COL_TRI(596, 1059, 595);
	  COL_TRI(595, 1059, 1058);
	  COL_TRI(597, 1060, 1059);
	  COL_TRI(597, 1059, 596);
	  COL_TRI(603, 1065, 602);
	  COL_TRI(598, 1060, 597);
	  COL_TRI(598, 1061, 1060);
	  COL_TRI(599, 1061, 598);
	  COL_TRI(599, 1062, 1061);
	  COL_TRI(599, 1063, 1062);
	  COL_TRI(600, 1063, 599);
	  COL_TRI(601, 1064, 1063);
	  COL_TRI(601, 1063, 600);
	  COL_TRI(602, 1064, 601);
	  COL_TRI(602, 1065, 1064);
	  COL_TRI(578, 607, 1069);
	  COL_TRI(603, 1066, 1065);
	  COL_TRI(604, 1067, 603);
	  COL_TRI(603, 1067, 1066);
	  COL_TRI(605, 1067, 604);
	  COL_TRI(605, 1068, 1067);
	  COL_TRI(578, 1069, 606);
	  COL_TRI(606, 1069, 549);
	  COL_TRI(606, 549, 1021);
	  COL_TRI(610, 1071, 537);
	  COL_TRI(607, 623, 625);
	  COL_TRI(607, 624, 623);
	  COL_TRI(608, 1070, 609);
	  COL_TRI(609, 1070, 625);
	  COL_TRI(609, 625, 577);
	  COL_TRI(608, 1023, 1070);
	  COL_TRI(610, 537, 1007);
	  COL_TRI(611, 1071, 610);
	  COL_TRI(615, 536, 1074);
	  COL_TRI(611, 1072, 1071);
	  COL_TRI(612, 1072, 611);
	  COL_TRI(612, 1027, 1072);
	  COL_TRI(613, 1073, 614);
	  COL_TRI(614, 1073, 553);
	  COL_TRI(614, 553, 1026);
	  COL_TRI(613, 1074, 1073);
	  COL_TRI(615, 1074, 613);
	  COL_TRI(620, 1033, 1079);
	  COL_TRI(616, 1075, 617);
	  COL_TRI(617, 1075, 621);
	  COL_TRI(617, 621, 1076);
	  COL_TRI(616, 1077, 1075);
	  COL_TRI(618, 1077, 616);
	  COL_TRI(618, 1078, 1077);
	  COL_TRI(619, 1028, 1033);
	  COL_TRI(619, 1033, 620);
	  COL_TRI(622, 547, 1013);
	  COL_TRI(620, 1079, 1022);
	  COL_TRI(621, 1035, 575);
	  COL_TRI(621, 575, 1076);
	  COL_TRI(575, 1035, 1036);
	  COL_TRI(575, 1036, 567);
	  COL_TRI(622, 565, 547);
	  COL_TRI(625, 628, 629);
	  COL_TRI(33, 1025, 34);
	  COL_TRI(30, 1080, 33);
	  COL_TRI(33, 1080, 1025);
	  COL_TRI(30, 1017, 1080);
	  COL_TRI(623, 633, 634);
	  COL_TRI(623, 634, 628);
	  COL_TRI(624, 633, 623);
	  COL_TRI(625, 623, 628);
	  COL_TRI(626, 632, 624);
	  COL_TRI(627, 626, 624);
	  COL_TRI(624, 632, 633);
	  COL_TRI(628, 634, 635);
	  COL_TRI(628, 635, 630);
	  COL_TRI(629, 628, 630);
	  COL_TRI(629, 630, 580);
	  COL_TRI(630, 635, 631);
	  COL_TRI(630, 631, 582);
	  COL_TRI(580, 630, 582);
	  COL_TRI(582, 631, 627);
	  COL_TRI(631, 626, 627);
	  COL_TRI(632, 636, 633);
	  COL_TRI(633, 639, 634);
	  COL_TRI(633, 636, 639);
	  COL_TRI(626, 637, 632);
	  COL_TRI(632, 637, 636);
	  COL_TRI(634, 639, 641);
	  COL_TRI(634, 641, 635);
	  COL_TRI(635, 641, 642);
	  COL_TRI(635, 642, 631);
	  COL_TRI(631, 638, 626);
	  COL_TRI(631, 642, 638);
	  COL_TRI(626, 638, 637);
	  COL_TRI(636, 643, 640);
	  COL_TRI(636, 640, 639);
	  COL_TRI(637, 643, 636);
	  COL_TRI(639, 640, 641);
	  COL_TRI(644, 528, 530);
	  COL_TRI(637, 644, 643);
	  COL_TRI(638, 644, 637);
	  COL_TRI(640, 646, 641);
	  COL_TRI(641, 646, 647);
	  COL_TRI(641, 647, 642);
	  COL_TRI(642, 647, 645);
	  COL_TRI(642, 645, 638);
	  COL_TRI(638, 645, 644);
	  COL_TRI(643, 530, 648);
	  COL_TRI(643, 648, 640);
	  COL_TRI(644, 530, 643);
	  COL_TRI(645, 528, 644);
	  COL_TRI(650, 651, 531);
	  COL_TRI(640, 648, 649);
	  COL_TRI(640, 649, 646);
	  COL_TRI(646, 650, 647);
	  COL_TRI(646, 649, 650);
	  COL_TRI(647, 650, 531);
	  COL_TRI(647, 531, 645);
	  COL_TRI(645, 531, 528);
	  COL_TRI(530, 652, 648);
	  COL_TRI(648, 652, 654);
	  COL_TRI(648, 654, 649);
	  COL_TRI(649, 654, 651);
	  COL_TRI(649, 651, 650);
	  COL_TRI(651, 532, 531);
	  COL_TRI(652, 653, 654);
	  COL_TRI(653, 1001, 654);
	  COL_TRI(654, 1001, 1010);
	  COL_TRI(654, 1010, 651);
	  COL_TRI(651, 1002, 532);
	  COL_TRI(651, 1010, 1002);
	  COL_TRI(532, 1002, 526);
	  COL_TRI(655, 583, 1081);
	  COL_TRI(655, 1081, 659);
	  COL_TRI(590, 656, 657);
	  COL_TRI(656, 1082, 657);
	  COL_TRI(657, 660, 1052);
	  COL_TRI(657, 1083, 660);
	  COL_TRI(657, 587, 1083);
	  COL_TRI(658, 1083, 587);
	  COL_TRI(587, 1084, 589);
	  COL_TRI(658, 587, 589);
	  COL_TRI(659, 1081, 661);
	  COL_TRI(659, 661, 1047);
	  COL_TRI(661, 1081, 583);
	  COL_TRI(660, 1083, 658);
	  COL_TRI(660, 658, 1052);
	  COL_TRI(589, 588, 658);
	  COL_TRI(589, 1054, 588);
	  COL_TRI(661, 583, 585);
	  COL_TRI(585, 584, 661);
	  COL_TRI(590, 1053, 656);
	  COL_TRI(583, 1085, 585);
	  COL_TRI(585, 1049, 584);
	  COL_TRI(586, 1048, 662);
	  COL_TRI(586, 662, 655);
	  COL_TRI(662, 1086, 655);
	  COL_TRI(655, 659, 1047);
	  COL_TRI(663, 1087, 664);
	  COL_TRI(664, 1087, 666);
	  COL_TRI(664, 666, 665);
	  COL_TRI(665, 666, 669);
	  COL_TRI(574, 666, 1088);
	  COL_TRI(666, 1087, 1088);
	  COL_TRI(574, 1041, 666);
	  COL_TRI(665, 669, 670);
	  COL_TRI(663, 1088, 1087);
	  COL_TRI(667, 1088, 663);
	  COL_TRI(667, 1089, 1088);
	  COL_TRI(571, 574, 1088);
	  COL_TRI(571, 1088, 1089);
	  COL_TRI(669, 571, 1089);
	  COL_TRI(668, 1089, 667);
	  COL_TRI(668, 1090, 1089);
	  COL_TRI(669, 1089, 1090);
	  COL_TRI(669, 1090, 668);
	  COL_TRI(670, 669, 668);
	  COL_TRI(669, 1040, 571);
	  COL_TRI_INIT(SURFACE_FLOWING_WATER, 2);
	  COL_TRI_SPECIAL(78, 79, 80, 0xC0);
	  COL_TRI_SPECIAL(78, 81, 79, 0xC0);
	  COL_TRI_INIT(SURFACE_VERY_SLIPPERY, 16);
	  COL_TRI(28, 29, 30);
	  COL_TRI(16, 17, 18);
	  COL_TRI(19, 16, 18);
	  COL_TRI(16, 20, 17);
	  COL_TRI(19, 18, 21);
	  COL_TRI(19, 22, 23);
	  COL_TRI(19, 21, 22);
	  COL_TRI(24, 25, 26);
	  COL_TRI(24, 26, 27);
	  COL_TRI(35, 39, 37);
	  COL_TRI(29, 31, 30);
	  COL_TRI(29, 32, 31);
	  COL_TRI(28, 30, 33);
	  COL_TRI(34, 28, 33);
	  COL_TRI(34, 36, 28);
	  COL_TRI(35, 37, 38);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 24);
	  COL_TRI(58, 60, 63);
	  COL_TRI(56, 57, 58);
	  COL_TRI(56, 58, 59);
	  COL_TRI(60, 61, 62);
	  COL_TRI(60, 62, 63);
	  COL_TRI(62, 56, 59);
	  COL_TRI(62, 61, 56);
	  COL_TRI(64, 71, 69);
	  COL_TRI(58, 57, 60);
	  COL_TRI(44, 56, 61);
	  COL_TRI(44, 46, 56);
	  COL_TRI(60, 42, 44);
	  COL_TRI(60, 44, 61);
	  COL_TRI(40, 57, 56);
	  COL_TRI(40, 56, 46);
	  COL_TRI(60, 57, 40);
	  COL_TRI(60, 40, 42);
	  COL_TRI(64, 69, 70);
	  COL_TRI(65, 72, 73);
	  COL_TRI(65, 73, 74);
	  COL_TRI(66, 75, 76);
	  COL_TRI(67, 77, 66);
	  COL_TRI(66, 77, 75);
	  COL_TRI(68, 77, 67);
	  COL_TRI_INIT(SURFACE_WALL_MISC, 24);
	  COL_TRI(5, 48, 4);
	  COL_TRI(40, 41, 42);
	  COL_TRI(42, 43, 44);
	  COL_TRI(42, 41, 43);
	  COL_TRI(44, 43, 45);
	  COL_TRI(44, 45, 46);
	  COL_TRI(40, 47, 41);
	  COL_TRI(46, 45, 47);
	  COL_TRI(46, 47, 40);
	  COL_TRI(4, 48, 49);
	  COL_TRI(4, 49, 0);
	  COL_TRI(1, 54, 7);
	  COL_TRI(0, 49, 50);
	  COL_TRI(0, 50, 3);
	  COL_TRI(5, 51, 48);
	  COL_TRI(3, 50, 52);
	  COL_TRI(3, 52, 2);
	  COL_TRI(2, 52, 53);
	  COL_TRI(2, 53, 1);
	  COL_TRI(1, 53, 54);
	  COL_TRI(7, 54, 55);
	  COL_TRI(7, 55, 6);
	  COL_TRI(6, 55, 51);
	  COL_TRI(6, 51, 5);
	  COL_TRI_INIT(SURFACE_CAMERA_BOUNDARY, 10);
	  COL_TRI(12, 13, 14);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(0, 4, 5);
	  COL_TRI(0, 5, 6);
	  COL_TRI(0, 6, 7);
	  COL_TRI(0, 7, 1);
	  COL_TRI(8, 9, 10);
	  COL_TRI(8, 11, 9);
	  COL_TRI(12, 15, 13);
	  COL_TRI_INIT(SURFACE_NO_CAM_COLLISION, 14);
	  COL_TRI(32, 29, 87);
	  COL_TRI(16, 19, 82);
	  COL_TRI(16, 82, 83);
	  COL_TRI(83, 20, 16);
	  COL_TRI(19, 84, 82);
	  COL_TRI(83, 85, 20);
	  COL_TRI(19, 23, 84);
	  COL_TRI(29, 28, 86);
	  COL_TRI(29, 86, 87);
	  COL_TRI(24, 27, 90);
	  COL_TRI(32, 87, 88);
	  COL_TRI(28, 36, 89);
	  COL_TRI(28, 89, 86);
	  COL_TRI(24, 90, 91);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_B2, 2);
	  COL_TRI(92, 93, 94);
	  COL_TRI(92, 94, 95);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_B3, 2);
	  COL_TRI(100, 92, 95);
	  COL_TRI(100, 95, 101);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_B4, 2);
	  COL_TRI(104, 101, 105);
	  COL_TRI(104, 100, 101);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_B5, 2);
	  COL_TRI(112, 113, 114);
	  COL_TRI(112, 114, 115);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_B6, 2);
	  COL_TRI(113, 120, 121);
	  COL_TRI(113, 121, 114);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_B7, 2);
	  COL_TRI(120, 138, 139);
	  COL_TRI(120, 139, 121);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_BB, 18);
	  COL_TRI(124, 125, 126);
	  COL_TRI(127, 124, 126);
	  COL_TRI(126, 125, 128);
	  COL_TRI(126, 128, 129);
	  COL_TRI(127, 126, 130);
	  COL_TRI(126, 129, 130);
	  COL_TRI(127, 130, 131);
	  COL_TRI(129, 131, 130);
	  COL_TRI(132, 59, 133);
	  COL_TRI(132, 62, 59);
	  COL_TRI(63, 62, 132);
	  COL_TRI(63, 132, 134);
	  COL_TRI(133, 59, 58);
	  COL_TRI(133, 58, 135);
	  COL_TRI(58, 63, 134);
	  COL_TRI(58, 134, 135);
	  COL_TRI(124, 127, 136);
	  COL_TRI(124, 136, 137);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_D0, 2);
	  COL_TRI(108, 109, 110);
	  COL_TRI(108, 110, 111);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_DF, 2);
	  COL_TRI(96, 97, 98);
	  COL_TRI(96, 99, 97);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_E0, 2);
	  COL_TRI(99, 102, 97);
	  COL_TRI(99, 103, 102);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_E1, 2);
	  COL_TRI(103, 106, 102);
	  COL_TRI(103, 107, 106);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_E2, 2);
	  COL_TRI(116, 117, 118);
	  COL_TRI(116, 119, 117);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_E3, 2);
	  COL_TRI(122, 116, 118);
	  COL_TRI(122, 118, 123);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_E4, 2);
	  COL_TRI(140, 122, 123);
	  COL_TRI(140, 123, 141);
	  COL_TRI_INIT(SURFACE_WOBBLING_WARP, 6);
	  COL_TRI(49, 51, 55);
	  COL_TRI(49, 48, 51);
	  COL_TRI(49, 55, 54);
	  COL_TRI(49, 54, 53);
	  COL_TRI(49, 53, 52);
	  COL_TRI(49, 52, 50);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(5);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_wooden_door,     /*pos*/ -3097, -1279,  1434, /*yaw*/   0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_wooden_door,     /*pos*/  -332,  -767,   205, /*yaw*/   0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_wooden_door,     /*pos*/   717, -1177,  -869, /*yaw*/ 192);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_0stars_door,     /*pos*/  1126, -1074, -2661, /*yaw*/ 192);
	  SPECIAL_OBJECT_WITH_YAW_AND_PARAM(/*preset*/ special_metal_door_warp, /*pos*/  7885, -1586,  -511, /*yaw*/ 192, /*bhvParam2*/ 2);
	  COL_WATER_BOX_INIT(3);
	  COL_WATER_BOX(1, 973, -1279, 5786, 256, -1228);
	  COL_WATER_BOX(0, -3225, -4146, 870, -255, -1228);
	  COL_WATER_BOX(2, 5786, -1330, 8038, 410, -1228);
	  COL_END();
	}

	function inside_castle_seg7_collision_ddd_warp() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x12);
	  COL_VERTEX(3866, -1074, 1587);
	  COL_VERTEX(3487, -1074, 1864);
	  COL_VERTEX(3866, -1074, 1864);
	  COL_VERTEX(3487, -1074, 1587);
	  COL_VERTEX(3487, -1074, 2135);
	  COL_VERTEX(3866, -1074, 2135);
	  COL_VERTEX(3487, -1074, 2406);
	  COL_VERTEX(3866, -1074, 2406);
	  COL_VERTEX(5939, -1074, 1587);
	  COL_VERTEX(5530, -1074, 1587);
	  COL_VERTEX(5530, -1074, 1864);
	  COL_VERTEX(5939, -1074, 1864);
	  COL_VERTEX(5530, -1074, 2135);
	  COL_VERTEX(5939, -1074, 2135);
	  COL_VERTEX(5530, -1074, 2406);
	  COL_VERTEX(5939, -1074, 2406);
	  COL_VERTEX(3456, -1074, 1587);
	  COL_VERTEX(3456, -1074, 2406);
	  COL_TRI_INIT(SURFACE_DEFAULT, 8);
	  COL_TRI(3, 16, 17);
	  COL_TRI(3, 17, 6);
	  COL_TRI(8, 9, 10);
	  COL_TRI(8, 10, 11);
	  COL_TRI(11, 10, 12);
	  COL_TRI(11, 12, 13);
	  COL_TRI(13, 12, 14);
	  COL_TRI(13, 14, 15);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_E8, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_E9, 2);
	  COL_TRI(2, 1, 4);
	  COL_TRI(2, 4, 5);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_EA, 2);
	  COL_TRI(5, 6, 7);
	  COL_TRI(5, 4, 6);
	  COL_TRI_STOP();
	  COL_END();
	}

	function inside_castle_seg7_collision_ddd_warp_2() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x12);
	  COL_VERTEX(5939, -1074, 1587);
	  COL_VERTEX(5560, -1074, 1864);
	  COL_VERTEX(5939, -1074, 1864);
	  COL_VERTEX(5560, -1074, 1587);
	  COL_VERTEX(5560, -1074, 2135);
	  COL_VERTEX(5939, -1074, 2135);
	  COL_VERTEX(5560, -1074, 2406);
	  COL_VERTEX(5939, -1074, 2406);
	  COL_VERTEX(5530, -1074, 1587);
	  COL_VERTEX(5530, -1074, 2406);
	  COL_VERTEX(3866, -1074, 1864);
	  COL_VERTEX(3456, -1074, 2135);
	  COL_VERTEX(3866, -1074, 2135);
	  COL_VERTEX(3456, -1074, 2406);
	  COL_VERTEX(3866, -1074, 2406);
	  COL_VERTEX(3456, -1074, 1864);
	  COL_VERTEX(3866, -1074, 1587);
	  COL_VERTEX(3456, -1074, 1587);
	  COL_TRI_INIT(SURFACE_DEFAULT, 8);
	  COL_TRI(8, 9, 6);
	  COL_TRI(8, 6, 3);
	  COL_TRI(10, 11, 12);
	  COL_TRI(12, 13, 14);
	  COL_TRI(12, 11, 13);
	  COL_TRI(10, 15, 11);
	  COL_TRI(16, 15, 10);
	  COL_TRI(16, 17, 15);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_E8, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_E9, 2);
	  COL_TRI(2, 4, 5);
	  COL_TRI(2, 1, 4);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_EA, 2);
	  COL_TRI(5, 4, 6);
	  COL_TRI(5, 6, 7);
	  COL_TRI_STOP();
	  COL_END();
	}

	function inside_castle_seg7_collision_star_door() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(-80, 0, -20);
	  COL_VERTEX(-80, 256, 20);
	  COL_VERTEX(-80, 256, -20);
	  COL_VERTEX(80, 256, 20);
	  COL_VERTEX(80, 256, -20);
	  COL_VERTEX(80, 0, -20);
	  COL_VERTEX(-80, 0, 20);
	  COL_VERTEX(80, 0, 20);
	  COL_TRI_INIT(SURFACE_DEFAULT, 8);
	  COL_TRI(2, 3, 4);
	  COL_TRI(2, 1, 3);
	  COL_TRI(5, 2, 4);
	  COL_TRI(5, 0, 2);
	  COL_TRI(6, 3, 1);
	  COL_TRI(6, 7, 3);
	  COL_TRI(5, 6, 0);
	  COL_TRI(5, 7, 6);
	  COL_TRI_STOP();
	  COL_END();
	}

	function inside_castle_seg7_collision_floor_trap() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x4);
	  COL_VERTEX(358, 0, -306);
	  COL_VERTEX(0, 0, -306);
	  COL_VERTEX(0, 0, 307);
	  COL_VERTEX(358, 0, 307);
	  COL_TRI_INIT(SURFACE_DEFAULT, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI_STOP();
	  COL_END();
	}

	function inside_castle_seg7_collision_water_level_pillar() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(-153, 0, -153);
	  COL_VERTEX(-153, -409, 154);
	  COL_VERTEX(-153, 0, 154);
	  COL_VERTEX(154, 0, -153);
	  COL_VERTEX(154, 0, 154);
	  COL_VERTEX(154, -409, 154);
	  COL_VERTEX(154, -409, -153);
	  COL_VERTEX(-153, -409, -153);
	  COL_TRI_INIT(SURFACE_DEFAULT, 10);
	  COL_TRI(0, 1, 2);
	  COL_TRI(2, 3, 0);
	  COL_TRI(2, 4, 3);
	  COL_TRI(2, 5, 4);
	  COL_TRI(2, 1, 5);
	  COL_TRI(4, 5, 6);
	  COL_TRI(4, 6, 3);
	  COL_TRI(0, 7, 1);
	  COL_TRI(3, 6, 7);
	  COL_TRI(3, 7, 0);
	  COL_TRI_STOP();
	  COL_END();
	}

	var castle_inside = [
	  inside_castle_seg7_area_1_collision,
	  inside_castle_seg7_area_2_collision,
	  inside_castle_seg7_area_3_collision,
	  inside_castle_seg7_collision_ddd_warp,
	  inside_castle_seg7_collision_ddd_warp_2,
	  inside_castle_seg7_collision_star_door,
	  inside_castle_seg7_collision_floor_trap,
	  inside_castle_seg7_collision_water_level_pillar
	];

	function ccm_seg7_area_1_collision(cmds) {
	  COL_INIT();
	  COL_VERTEX_INIT(0x299);
	  COL_VERTEX(-942, -511, 2286);
	  COL_VERTEX(-1102, 768, 1962);
	  COL_VERTEX(-1102, -511, 1962);
	  COL_VERTEX(-942, 768, 2286);
	  COL_VERTEX(-617, -511, 2126);
	  COL_VERTEX(-3235, 1045, 1509);
	  COL_VERTEX(-3235, 789, 1509);
	  COL_VERTEX(-778, 768, 1801);
	  COL_VERTEX(-617, 768, 2126);
	  COL_VERTEX(256, 1382, 2696);
	  COL_VERTEX(-3071, 1040, 1024);
	  COL_VERTEX(-778, -511, 1801);
	  COL_VERTEX(-50, 1280, 2048);
	  COL_VERTEX(-50, 512, 2048);
	  COL_VERTEX(5039, -4607, -1191);
	  COL_VERTEX(4005, -4607, 1924);
	  COL_VERTEX(768, -1074, -4453);
	  COL_VERTEX(-1706, 2926, -492);
	  COL_VERTEX(-1995, 2721, -203);
	  COL_VERTEX(-2311, -2774, -3066);
	  COL_VERTEX(-1845, -2518, -3279);
	  COL_VERTEX(-1845, -2774, -3279);
	  COL_VERTEX(-1632, -2518, -2813);
	  COL_VERTEX(-2311, -2518, -3067);
	  COL_VERTEX(-2098, -2774, -2601);
	  COL_VERTEX(-1632, -2774, -2813);
	  COL_VERTEX(-1632, -2723, -2813);
	  COL_VERTEX(-524, -2735, -2916);
	  COL_VERTEX(-567, -2735, -3009);
	  COL_VERTEX(2879, -3979, 3958);
	  COL_VERTEX(2654, -3979, 4167);
	  COL_VERTEX(2654, -3530, 4167);
	  COL_VERTEX(2239, -3993, 4623);
	  COL_VERTEX(2239, -4607, 4623);
	  COL_VERTEX(2740, -4607, 3808);
	  COL_VERTEX(2740, -4351, 3808);
	  COL_VERTEX(2566, -3530, 3621);
	  COL_VERTEX(-385, 3123, -1280);
	  COL_VERTEX(-385, 2888, -1280);
	  COL_VERTEX(-385, 2827, -1690);
	  COL_VERTEX(23, 2806, -1834);
	  COL_VERTEX(-764, 2806, -1833);
	  COL_VERTEX(-764, 2560, -1833);
	  COL_VERTEX(2560, 2560, -1279);
	  COL_VERTEX(2737, 2560, -1177);
	  COL_VERTEX(2737, 2560, -972);
	  COL_VERTEX(2560, 2560, -869);
	  COL_VERTEX(2382, 2560, -972);
	  COL_VERTEX(2382, 2560, -1177);
	  COL_VERTEX(-4387, -1438, 1721);
	  COL_VERTEX(-4387, -1447, 1925);
	  COL_VERTEX(-4210, -1437, 1618);
	  COL_VERTEX(-4033, -1455, 1925);
	  COL_VERTEX(-4210, -1456, 2027);
	  COL_VERTEX(-4210, -1344, 2028);
	  COL_VERTEX(-4033, -1445, 1721);
	  COL_VERTEX(2566, -4351, 3621);
	  COL_VERTEX(2753, -4351, 3447);
	  COL_VERTEX(2391, -4607, 3433);
	  COL_VERTEX(2391, -2303, 3433);
	  COL_VERTEX(3682, -4095, 2895);
	  COL_VERTEX(4299, -3358, 960);
	  COL_VERTEX(3682, -4126, 2895);
	  COL_VERTEX(1482, -5164, -3421);
	  COL_VERTEX(1942, -5119, 2025);
	  COL_VERTEX(2927, -4351, 3634);
	  COL_VERTEX(4551, -3358, 228);
	  COL_VERTEX(4540, -2559, 260);
	  COL_VERTEX(4096, -2559, 0);
	  COL_VERTEX(3979, -3071, 800);
	  COL_VERTEX(1940, -4125, 2033);
	  COL_VERTEX(-897, 2693, -1742);
	  COL_VERTEX(-882, 2714, -2028);
	  COL_VERTEX(-867, 2693, -2008);
	  COL_VERTEX(23, 2693, -2008);
	  COL_VERTEX(23, 2714, -2028);
	  COL_VERTEX(-867, 2560, -1434);
	  COL_VERTEX(-867, 2693, -1434);
	  COL_VERTEX(-882, 2714, -1434);
	  COL_VERTEX(-4382, -1945, 5414);
	  COL_VERTEX(-3892, -1945, 6246);
	  COL_VERTEX(-3268, -1740, 6246);
	  COL_VERTEX(4077, -4607, -1403);
	  COL_VERTEX(4529, -1791, 292);
	  COL_VERTEX(2519, -4898, 1538);
	  COL_VERTEX(2427, -4694, 1160);
	  COL_VERTEX(2713, -4694, 1602);
	  COL_VERTEX(3132, -4898, 986);
	  COL_VERTEX(3132, -4694, 986);
	  COL_VERTEX(2745, -4694, 858);
	  COL_VERTEX(2939, -4694, 1569);
	  COL_VERTEX(4790, -4607, 5511);
	  COL_VERTEX(4790, -5119, 5511);
	  COL_VERTEX(5989, -5119, -3076);
	  COL_VERTEX(5989, -4607, -3076);
	  COL_VERTEX(5990, -4607, -3076);
	  COL_VERTEX(5490, -5119, -3189);
	  COL_VERTEX(5490, -4607, -3189);
	  COL_VERTEX(4240, -4607, -1490);
	  COL_VERTEX(4350, 41, -2633);
	  COL_VERTEX(4096, -818, 0);
	  COL_VERTEX(4413, -577, -4089);
	  COL_VERTEX(4525, 144, -3360);
	  COL_VERTEX(-1329, -4889, -4308);
	  COL_VERTEX(4551, -3071, 228);
	  COL_VERTEX(3004, -4607, 4617);
	  COL_VERTEX(3268, -4812, 5055);
	  COL_VERTEX(3268, -4607, 5055);
	  COL_VERTEX(3251, -4607, 4168);
	  COL_VERTEX(4027, -4607, 4596);
	  COL_VERTEX(3780, -4607, 5045);
	  COL_VERTEX(3763, -4607, 4158);
	  COL_VERTEX(1792, -5119, 6654);
	  COL_VERTEX(768, -5119, 6654);
	  COL_VERTEX(2450, -1535, 2332);
	  COL_VERTEX(2579, -2303, 3259);
	  COL_VERTEX(4096, -3071, 0);
	  COL_VERTEX(3707, -1227, 552);
	  COL_VERTEX(4096, -1228, 0);
	  COL_VERTEX(768, -4607, 5118);
	  COL_VERTEX(-1414, -3071, 3522);
	  COL_VERTEX(4262, -1228, 975);
	  COL_VERTEX(3553, -1607, 769);
	  COL_VERTEX(4075, -1607, 1104);
	  COL_VERTEX(768, -972, -3327);
	  COL_VERTEX(3072, -409, -3020);
	  COL_VERTEX(768, 154, -3327);
	  COL_VERTEX(-3071, -511, -3071);
	  COL_VERTEX(-3071, -1228, -2047);
	  COL_VERTEX(-3964, 819, -2785);
	  COL_VERTEX(1485, 3072, 256);
	  COL_VERTEX(2033, 2195, -194);
	  COL_VERTEX(1946, 1531, 1741);
	  COL_VERTEX(168, 1229, 2511);
	  COL_VERTEX(4096, 1685, 1843);
	  COL_VERTEX(2057, 1737, 2920);
	  COL_VERTEX(2057, 1276, 2920);
	  COL_VERTEX(-3892, -1945, 6605);
	  COL_VERTEX(-3268, -1919, 6246);
	  COL_VERTEX(-3268, -3327, 6246);
	  COL_VERTEX(-3327, -3583, 3840);
	  COL_VERTEX(-4360, -1945, 5999);
	  COL_VERTEX(-4360, -2149, 5999);
	  COL_VERTEX(-6398, -3327, 3943);
	  COL_VERTEX(-6398, -1740, 3943);
	  COL_VERTEX(-4914, -4095, 0);
	  COL_VERTEX(3072, 2560, -1914);
	  COL_VERTEX(3072, 2560, -511);
	  COL_VERTEX(2617, 2359, -2483);
	  COL_VERTEX(945, 2560, -2203);
	  COL_VERTEX(1445, 3072, -2287);
	  COL_VERTEX(2816, 2560, -767);
	  COL_VERTEX(23, 2560, -3073);
	  COL_VERTEX(3072, 2304, -3327);
	  COL_VERTEX(23, 1741, -3073);
	  COL_VERTEX(768, 818, -2610);
	  COL_VERTEX(638, 2765, -2152);
	  COL_VERTEX(23, 3471, -2049);
	  COL_VERTEX(3072, 1022, -2559);
	  COL_VERTEX(4096, 1792, -2559);
	  COL_VERTEX(4096, 1327, 1843);
	  COL_VERTEX(3072, 807, -511);
	  COL_VERTEX(3072, -204, -2559);
	  COL_VERTEX(768, 154, -2610);
	  COL_VERTEX(-2024, 2662, -3073);
	  COL_VERTEX(-3045, 1842, -1970);
	  COL_VERTEX(3072, -409, -2559);
	  COL_VERTEX(-1005, 410, -2562);
	  COL_VERTEX(3072, -818, -511);
	  COL_VERTEX(2048, -818, 1024);
	  COL_VERTEX(-50, -511, 2048);
	  COL_VERTEX(-1000, 3471, -513);
	  COL_VERTEX(512, 3072, 256);
	  COL_VERTEX(512, 3072, -511);
	  COL_VERTEX(-2139, 2867, -926);
	  COL_VERTEX(23, 3471, -1281);
	  COL_VERTEX(-1000, 2560, -1281);
	  COL_VERTEX(23, 2560, -1281);
	  COL_VERTEX(-2429, 2150, -636);
	  COL_VERTEX(2048, -511, 2048);
	  COL_VERTEX(-4874, -1410, -2465);
	  COL_VERTEX(-4490, -1228, -3765);
	  COL_VERTEX(-5631, -1330, 0);
	  COL_VERTEX(-3839, -1228, -4351);
	  COL_VERTEX(-4402, -1535, 3789);
	  COL_VERTEX(-3327, -1535, 3840);
	  COL_VERTEX(-4095, -1330, -1023);
	  COL_VERTEX(-3327, -4607, 3840);
	  COL_VERTEX(-2114, 2458, -951);
	  COL_VERTEX(2048, 1229, 2048);
	  COL_VERTEX(-1500, -5137, -3507);
	  COL_VERTEX(-1500, -4881, -3507);
	  COL_VERTEX(-2442, -5132, -3555);
	  COL_VERTEX(-2442, -4876, -3553);
	  COL_VERTEX(-2559, -4351, -3583);
	  COL_VERTEX(-5119, -5119, -5119);
	  COL_VERTEX(-1500, -4626, -3507);
	  COL_VERTEX(-4905, -4858, -4236);
	  COL_VERTEX(1380, -3628, -3729);
	  COL_VERTEX(2048, 2560, -767);
	  COL_VERTEX(-3045, 2816, -1970);
	  COL_VERTEX(-3071, 277, 1024);
	  COL_VERTEX(-3574, 1090, 1394);
	  COL_VERTEX(-3071, -511, 1024);
	  COL_VERTEX(512, 4096, -511);
	  COL_VERTEX(512, 4096, 256);
	  COL_VERTEX(-579, -3948, -2539);
	  COL_VERTEX(191, -3180, -3762);
	  COL_VERTEX(450, -4189, -2583);
	  COL_VERTEX(1394, -3628, -2624);
	  COL_VERTEX(-1025, -4606, -2520);
	  COL_VERTEX(-1222, -2042, -2511);
	  COL_VERTEX(450, -3165, -2583);
	  COL_VERTEX(-2558, -4350, -2454);
	  COL_VERTEX(763, -2661, -2597);
	  COL_VERTEX(-2559, -3839, -3583);
	  COL_VERTEX(-5119, -4351, -5375);
	  COL_VERTEX(-5119, -1842, -5375);
	  COL_VERTEX(763, -2661, -4709);
	  COL_VERTEX(763, -1330, -2596);
	  COL_VERTEX(3362, -2764, 2735);
	  COL_VERTEX(-3292, -4607, 5501);
	  COL_VERTEX(-3071, -1433, 1024);
	  COL_VERTEX(-4095, 563, -1023);
	  COL_VERTEX(-4536, 819, -983);
	  COL_VERTEX(498, -1535, 3204);
	  COL_VERTEX(3979, -3327, 800);
	  COL_VERTEX(-5119, -4607, 0);
	  COL_VERTEX(-4607, -5119, 4608);
	  COL_VERTEX(34, -2543, -3499);
	  COL_VERTEX(-692, -2764, -3291);
	  COL_VERTEX(-695, -2531, -3289);
	  COL_VERTEX(-1969, -3962, -3033);
	  COL_VERTEX(-634, -3736, -3607);
	  COL_VERTEX(4134, -4505, 1535);
	  COL_VERTEX(4134, -4607, 1535);
	  COL_VERTEX(5000, -4504, -1074);
	  COL_VERTEX(4005, -4505, 1924);
	  COL_VERTEX(3682, -4505, 2895);
	  COL_VERTEX(3682, -4607, 2895);
	  COL_VERTEX(768, -1279, -4453);
	  COL_VERTEX(-5119, -2047, -5375);
	  COL_VERTEX(-1501, 2721, -492);
	  COL_VERTEX(-1501, 2926, -492);
	  COL_VERTEX(-1706, 2721, -492);
	  COL_VERTEX(-1953, 2824, -58);
	  COL_VERTEX(-1953, 2619, -58);
	  COL_VERTEX(-1995, 2926, -203);
	  COL_VERTEX(-2558, -1841, -2454);
	  COL_VERTEX(-2311, -2518, -3066);
	  COL_VERTEX(-2311, -2774, -3067);
	  COL_VERTEX(-2098, -2518, -2601);
	  COL_VERTEX(-2098, -2518, -2600);
	  COL_VERTEX(-2098, -2774, -2600);
	  COL_VERTEX(-524, -2531, -2916);
	  COL_VERTEX(-1675, -2723, -2906);
	  COL_VERTEX(-1675, -2518, -2906);
	  COL_VERTEX(-567, -2531, -3009);
	  COL_VERTEX(2879, -3530, 3958);
	  COL_VERTEX(2178, -3788, 3655);
	  COL_VERTEX(2178, -3530, 3655);
	  COL_VERTEX(2914, -4607, 3996);
	  COL_VERTEX(1751, -4607, 4098);
	  COL_VERTEX(1751, -3788, 4098);
	  COL_VERTEX(2914, -3993, 3996);
	  COL_VERTEX(2927, -4607, 3634);
	  COL_VERTEX(-385, 3123, -1690);
	  COL_VERTEX(23, 3123, -1690);
	  COL_VERTEX(23, 2827, -1690);
	  COL_VERTEX(23, 2560, -1834);
	  COL_VERTEX(-764, 2888, -1280);
	  COL_VERTEX(-764, 2560, -1280);
	  COL_VERTEX(2737, 2662, -1177);
	  COL_VERTEX(2560, 2662, -1279);
	  COL_VERTEX(2737, 2662, -972);
	  COL_VERTEX(2560, 2662, -869);
	  COL_VERTEX(2382, 2662, -972);
	  COL_VERTEX(2382, 2662, -1177);
	  COL_VERTEX(-4210, -1344, 1618);
	  COL_VERTEX(-4387, -1344, 1721);
	  COL_VERTEX(-4033, -1344, 1721);
	  COL_VERTEX(-4387, -1344, 1925);
	  COL_VERTEX(-4033, -1344, 1925);
	  COL_VERTEX(3362, -4095, 2735);
	  COL_VERTEX(2753, -2303, 3447);
	  COL_VERTEX(2566, -2303, 3621);
	  COL_VERTEX(2391, -3530, 3433);
	  COL_VERTEX(768, -1535, 5118);
	  COL_VERTEX(2228, -1535, 3309);
	  COL_VERTEX(3521, -3358, 571);
	  COL_VERTEX(3864, -3358, -115);
	  COL_VERTEX(4299, -3327, 960);
	  COL_VERTEX(498, -511, 3204);
	  COL_VERTEX(2681, -2744, 2005);
	  COL_VERTEX(3657, -3071, 622);
	  COL_VERTEX(4299, -3071, 960);
	  COL_VERTEX(-867, 2693, -1742);
	  COL_VERTEX(-882, 2714, -1742);
	  COL_VERTEX(-867, 2560, -1742);
	  COL_VERTEX(-897, 2560, -1742);
	  COL_VERTEX(-897, 2693, -2049);
	  COL_VERTEX(23, 2693, -2049);
	  COL_VERTEX(-882, 2714, -1281);
	  COL_VERTEX(-867, 2693, -1281);
	  COL_VERTEX(-897, 2693, -1434);
	  COL_VERTEX(-897, 2693, -1281);
	  COL_VERTEX(-897, 2560, -1434);
	  COL_VERTEX(-5213, -1740, 4792);
	  COL_VERTEX(-3268, -1740, 5668);
	  COL_VERTEX(-3892, -2149, 6246);
	  COL_VERTEX(-3371, -2149, 6246);
	  COL_VERTEX(-3268, -2149, 6246);
	  COL_VERTEX(2713, -4898, 1602);
	  COL_VERTEX(2519, -4694, 1538);
	  COL_VERTEX(2427, -4898, 1160);
	  COL_VERTEX(2939, -4898, 1569);
	  COL_VERTEX(4240, -5119, -1490);
	  COL_VERTEX(4606, -1228, 67);
	  COL_VERTEX(1380, -5164, -3729);
	  COL_VERTEX(1380, -4908, -3729);
	  COL_VERTEX(3068, -4694, 1181);
	  COL_VERTEX(2745, -4898, 858);
	  COL_VERTEX(6537, -5119, -852);
	  COL_VERTEX(6537, -4607, -852);
	  COL_VERTEX(1792, -4607, 6654);
	  COL_VERTEX(3682, -5119, 2895);
	  COL_VERTEX(4413, -65, -4089);
	  COL_VERTEX(-1329, -5145, -4308);
	  COL_VERTEX(3004, -4812, 4617);
	  COL_VERTEX(4027, -4812, 4596);
	  COL_VERTEX(3780, -4812, 5045);
	  COL_VERTEX(3763, -4812, 4158);
	  COL_VERTEX(3251, -4812, 4168);
	  COL_VERTEX(922, -4607, 6654);
	  COL_VERTEX(3228, -818, 1230);
	  COL_VERTEX(768, -4607, 6654);
	  COL_VERTEX(768, -4607, 6552);
	  COL_VERTEX(768, -4607, 6296);
	  COL_VERTEX(4099, -1227, 851);
	  COL_VERTEX(-2776, -1535, 1910);
	  COL_VERTEX(-3071, -1125, -3071);
	  COL_VERTEX(-3071, -511, -2047);
	  COL_VERTEX(-3318, 819, -3055);
	  COL_VERTEX(2048, 2304, -511);
	  COL_VERTEX(2042, 2261, -387);
	  COL_VERTEX(1959, 1631, 1450);
	  COL_VERTEX(2016, 2062, 192);
	  COL_VERTEX(2048, 2560, -2047);
	  COL_VERTEX(1994, 1481, 2623);
	  COL_VERTEX(-3892, -2149, 6605);
	  COL_VERTEX(-3268, -2149, 6297);
	  COL_VERTEX(-3268, -2149, 6553);
	  COL_VERTEX(-3268, -2149, 6605);
	  COL_VERTEX(768, -4607, 6224);
	  COL_VERTEX(768, -5119, 5118);
	  COL_VERTEX(-5387, -1740, 4976);
	  COL_VERTEX(-6423, -3839, 103);
	  COL_VERTEX(2617, 2703, -2483);
	  COL_VERTEX(3072, 2201, -1914);
	  COL_VERTEX(3072, 1685, 1331);
	  COL_VERTEX(2662, 2304, -511);
	  COL_VERTEX(23, 2560, -2049);
	  COL_VERTEX(-2024, 2150, -3073);
	  COL_VERTEX(945, 2560, -3073);
	  COL_VERTEX(3072, 1894, -3327);
	  COL_VERTEX(638, 2765, -3073);
	  COL_VERTEX(-1005, 1637, -2562);
	  COL_VERTEX(4096, 2304, -2559);
	  COL_VERTEX(-3045, 768, -1970);
	  COL_VERTEX(-3608, 819, -864);
	  COL_VERTEX(-1020, 2048, 3);
	  COL_VERTEX(-2429, 2867, -636);
	  COL_VERTEX(-50, 5632, -153);
	  COL_VERTEX(2048, 840, 1024);
	  COL_VERTEX(-1000, 3471, -1281);
	  COL_VERTEX(-2024, 2560, -1536);
	  COL_VERTEX(-4874, -1740, -2465);
	  COL_VERTEX(-5631, -1740, 0);
	  COL_VERTEX(-4490, -1740, -3765);
	  COL_VERTEX(-4402, -1740, 3789);
	  COL_VERTEX(-3268, -1535, 5668);
	  COL_VERTEX(-3327, -5119, 3840);
	  COL_VERTEX(-2230, -5139, -4501);
	  COL_VERTEX(-2230, -4883, -4501);
	  COL_VERTEX(-4905, -4499, -4234);
	  COL_VERTEX(1394, -4908, -2624);
	  COL_VERTEX(-5119, -4863, -5119);
	  COL_VERTEX(-3203, 1095, 1412);
	  COL_VERTEX(23, 3471, -769);
	  COL_VERTEX(-1983, -3966, -2478);
	  COL_VERTEX(-6423, -1740, 103);
	  COL_VERTEX(-3292, -5119, 5501);
	  COL_VERTEX(-4607, -4607, 4608);
	  COL_VERTEX(-2776, -511, 1910);
	  COL_VERTEX(-5119, -5119, 0);
	  COL_VERTEX(121, -2573, -2661);
	  COL_VERTEX(-355, -2764, -2548);
	  COL_VERTEX(-355, -2531, -2547);
	  COL_VERTEX(-1228, -3583, 5734);
	  COL_VERTEX(-1330, -3583, 5837);
	  COL_VERTEX(-1330, -3583, 6144);
	  COL_VERTEX(-1228, -3583, 6246);
	  COL_VERTEX(-1023, -3583, 6246);
	  COL_VERTEX(-921, -3583, 6144);
	  COL_VERTEX(-1125, -4044, 5990);
	  COL_VERTEX(-1023, -3583, 5734);
	  COL_VERTEX(-921, -3583, 5837);
	  COL_VERTEX(1192, -4607, 5626);
	  COL_VERTEX(2953, -2621, 2700);
	  COL_VERTEX(3162, -2627, 2924);
	  COL_VERTEX(3097, -2822, 1860);
	  COL_VERTEX(524, 3134, -717);
	  COL_VERTEX(73, 3457, -1739);
	  COL_VERTEX(590, 3222, -1106);
	  COL_VERTEX(949, 3072, -1271);
	  COL_VERTEX(129, 3442, -1811);
	  COL_VERTEX(774, 3072, -72);
	  COL_VERTEX(970, 3072, 59);
	  COL_VERTEX(837, 3072, -1);
	  COL_VERTEX(1379, 3072, 53);
	  COL_VERTEX(834, 3072, -145);
	  COL_VERTEX(921, -4607, 6603);
	  COL_VERTEX(1177, -4607, 6244);
	  COL_VERTEX(1192, -4607, 5831);
	  COL_VERTEX(922, -4607, 6224);
	  COL_VERTEX(988, -4607, 5831);
	  COL_VERTEX(988, -4607, 5626);
	  COL_VERTEX(1775, -4607, 4425);
	  COL_VERTEX(1786, -4607, 4136);
	  COL_VERTEX(-5144, -1740, 4720);
	  COL_VERTEX(-4940, -1740, 4714);
	  COL_VERTEX(-4947, -1740, 4509);
	  COL_VERTEX(-5151, -1740, 4516);
	  COL_VERTEX(-2024, 2560, -2766);
	  COL_VERTEX(4199, -4607, 1340);
	  COL_VERTEX(4328, -4607, 952);
	  COL_VERTEX(1636, -4607, 4275);
	  COL_VERTEX(3152, -2758, 2510);
	  COL_VERTEX(2958, -2818, 1710);
	  COL_VERTEX(3255, -2909, 1291);
	  COL_VERTEX(3394, -2913, 1441);
	  COL_VERTEX(131, 3441, -1668);
	  COL_VERTEX(251, 3407, -1752);
	  COL_VERTEX(350, 3282, -827);
	  COL_VERTEX(640, 3084, -791);
	  COL_VERTEX(1358, 3072, -1277);
	  COL_VERTEX(938, 3072, -85);
	  COL_VERTEX(1178, -4607, 6603);
	  COL_VERTEX(922, -4607, 6244);
	  COL_VERTEX(1925, -4607, 4286);
	  COL_VERTEX(-2638, 2560, -1946);
	  COL_VERTEX(-4547, -1453, 2113);
	  COL_VERTEX(-4603, -1455, 2184);
	  COL_VERTEX(-4545, -1460, 2256);
	  COL_VERTEX(-4425, -1458, 2174);
	  COL_VERTEX(-5056, -1370, -1347);
	  COL_VERTEX(-5033, -1380, -1629);
	  COL_VERTEX(-4238, -1359, -164);
	  COL_VERTEX(2163, 1630, 1460);
	  COL_VERTEX(1757, 1508, 1770);
	  COL_VERTEX(1792, 1471, 1968);
	  COL_VERTEX(2247, 2261, -378);
	  COL_VERTEX(2220, 2062, 201);
	  COL_VERTEX(37, 1229, 2233);
	  COL_VERTEX(1980, 1481, 2008);
	  COL_VERTEX(3277, 2253, -2764);
	  COL_VERTEX(3860, -470, -2720);
	  COL_VERTEX(2838, -814, -3593);
	  COL_VERTEX(1591, 1445, 1999);
	  COL_VERTEX(4062, -440, -3386);
	  COL_VERTEX(3686, -613, -3225);
	  COL_VERTEX(2668, -646, -3969);
	  COL_VERTEX(-4361, -1353, -225);
	  COL_VERTEX(-4915, -1369, -1433);
	  COL_VERTEX(-5119, -1374, -1417);
	  COL_VERTEX(-4417, -1355, -153);
	  COL_VERTEX(-4261, -1374, 247);
	  COL_VERTEX(2238, 2194, -185);
	  COL_VERTEX(1556, 1482, 1801);
	  COL_VERTEX(-3104, 1092, 1121);
	  COL_VERTEX(3884, -511, -3566);
	  COL_VERTEX(-8191, -8191, -8191);
	  COL_VERTEX(-8191, -8191, 8192);
	  COL_VERTEX(8192, -8191, 8192);
	  COL_VERTEX(8192, -8191, -8191);
	  COL_VERTEX(3068, -4584, 1181);
	  COL_VERTEX(4134, -4709, 1535);
	  COL_VERTEX(3068, -4789, 1181);
	  COL_VERTEX(3520, -4591, -179);
	  COL_VERTEX(3520, -4796, -179);
	  COL_VERTEX(3132, -4796, 986);
	  COL_VERTEX(3132, -4591, 986);
	  COL_VERTEX(2745, -4592, 858);
	  COL_VERTEX(2745, -4796, 858);
	  COL_VERTEX(3132, -4796, -308);
	  COL_VERTEX(3132, -4591, -308);
	  COL_VERTEX(3045, -4875, -481);
	  COL_VERTEX(3045, -4670, -481);
	  COL_VERTEX(3691, -4649, -265);
	  COL_VERTEX(2939, -4789, 1569);
	  COL_VERTEX(4005, -4709, 1924);
	  COL_VERTEX(-5387, -1637, 4976);
	  COL_VERTEX(-4360, -1842, 5999);
	  COL_VERTEX(-3892, -1842, 6605);
	  COL_VERTEX(4096, 2406, -2559);
	  COL_VERTEX(3782, -1141, 1845);
	  COL_VERTEX(3401, -1344, 1530);
	  COL_VERTEX(2222, -1433, 3317);
	  COL_VERTEX(2852, -1535, 2490);
	  COL_VERTEX(3002, -1332, 2631);
	  COL_VERTEX(2057, 1840, 2920);
	  COL_VERTEX(-3235, 1148, 1509);
	  COL_VERTEX(-3298, -4505, 5194);
	  COL_VERTEX(-3292, -4505, 5501);
	  COL_VERTEX(-3327, -4505, 3840);
	  COL_VERTEX(-4607, -4505, 4608);
	  COL_VERTEX(-889, -3571, -3398);
	  COL_VERTEX(-2139, 2970, -926);
	  COL_VERTEX(-1386, -1535, 4683);
	  COL_VERTEX(-3327, -1433, 3840);
	  COL_VERTEX(-1407, -1740, 4480);
	  COL_VERTEX(2566, -2201, 3621);
	  COL_VERTEX(-283, 2918, -1383);
	  COL_VERTEX(-283, 3123, -1383);
	  COL_VERTEX(-78, 3123, -1588);
	  COL_VERTEX(-78, 2918, -1383);
	  COL_VERTEX(-283, 2918, -1588);
	  COL_VERTEX(-283, 3123, -1588);
	  COL_VERTEX(-5151, -2252, 4516);
	  COL_VERTEX(-3721, -4607, 4691);
	  COL_VERTEX(-3721, -5119, 4691);
	  COL_VERTEX(-3714, -4607, 4896);
	  COL_VERTEX(-3510, -4607, 4889);
	  COL_VERTEX(-3516, -4607, 4684);
	  COL_VERTEX(988, -5119, 5626);
	  COL_VERTEX(4077, -5119, -1403);
	  COL_VERTEX(5040, -5119, -1194);
	  COL_VERTEX(2391, -1535, 3433);
	  COL_VERTEX(-4914, -4607, 0);
	  COL_VERTEX(3691, -4854, -265);
	  COL_VERTEX(2939, -4584, 1569);
	  COL_VERTEX(-6398, -1637, 3943);
	  COL_VERTEX(3604, 2406, -2928);
	  COL_VERTEX(3604, 2304, -2928);
	  COL_VERTEX(4096, 2090, -1038);
	  COL_VERTEX(4096, 2192, -1038);
	  COL_VERTEX(3766, -1330, 1627);
	  COL_VERTEX(3794, -1345, 1829);
	  COL_VERTEX(3754, -1126, 1643);
	  COL_VERTEX(3603, -1330, 1503);
	  COL_VERTEX(3591, -1126, 1519);
	  COL_VERTEX(3388, -1140, 1546);
	  COL_VERTEX(2839, -1331, 2507);
	  COL_VERTEX(2235, -1637, 3301);
	  COL_VERTEX(2811, -1317, 2304);
	  COL_VERTEX(2824, -1521, 2288);
	  COL_VERTEX(2398, -1637, 3425);
	  COL_VERTEX(2385, -1433, 3441);
	  COL_VERTEX(3015, -1536, 2614);
	  COL_VERTEX(3217, -1521, 2587);
	  COL_VERTEX(3205, -1318, 2604);
	  COL_VERTEX(256, 1485, 2696);
	  COL_VERTEX(-3071, 1142, 1024);
	  COL_VERTEX(-50, 1382, 2048);
	  COL_VERTEX(-3298, -4607, 5194);
	  COL_VERTEX(-3314, -4607, 4454);
	  COL_VERTEX(-3314, -4505, 4454);
	  COL_VERTEX(-4720, -4607, 3590);
	  COL_VERTEX(-4720, -4505, 3590);
	  COL_VERTEX(191, -3078, -3762);
	  COL_VERTEX(-889, -3469, -3398);
	  COL_VERTEX(-1969, -3859, -3033);
	  COL_VERTEX(-2139, 2765, -926);
	  COL_VERTEX(-2429, 2765, -636);
	  COL_VERTEX(-2429, 2970, -636);
	  COL_VERTEX(805, -1637, 5320);
	  COL_VERTEX(-1386, -1740, 4683);
	  COL_VERTEX(805, -1433, 5320);
	  COL_VERTEX(-3323, -1637, 4045);
	  COL_VERTEX(-3323, -1433, 4045);
	  COL_VERTEX(-1407, -1535, 4480);
	  COL_VERTEX(-3327, -1637, 3840);
	  COL_VERTEX(768, -1433, 5118);
	  COL_VERTEX(768, -1637, 5118);
	  COL_VERTEX(2566, -2405, 3621);
	  COL_VERTEX(-78, 3123, -1383);
	  COL_VERTEX(-78, 2918, -1588);
	  COL_VERTEX(-5144, -2252, 4720);
	  COL_VERTEX(-4940, -2252, 4714);
	  COL_VERTEX(-4947, -2252, 4509);
	  COL_VERTEX(-3516, -5119, 4684);
	  COL_VERTEX(-3714, -5119, 4896);
	  COL_VERTEX(-3510, -5119, 4889);
	  COL_VERTEX(988, -5119, 5831);
	  COL_VERTEX(1192, -5119, 5831);
	  COL_VERTEX(1192, -5119, 5626);
	  COL_VERTEX(-897, 2560, -2049);
	  COL_VERTEX(-867, 2560, -2008);
	  COL_VERTEX(23, 2560, -2008);
	  COL_VERTEX(-897, 2560, -1281);
	  COL_VERTEX(-867, 2560, -1281);
	  COL_VERTEX(-3371, -2149, 6605);
	  COL_VERTEX(4262, -1125, 975);
	  COL_VERTEX(4262, -1330, 975);
	  COL_VERTEX(4099, -1330, 851);
	  COL_VERTEX(4099, -1125, 851);
	  COL_VERTEX(768, -4505, 6224);
	  COL_VERTEX(768, -4505, 6296);
	  COL_VERTEX(922, -4607, 6296);
	  COL_VERTEX(768, -4505, 6552);
	  COL_VERTEX(768, -4505, 6654);
	  COL_VERTEX(-3268, -1919, 6297);
	  COL_VERTEX(-3371, -2149, 6297);
	  COL_VERTEX(-3268, -1919, 6605);
	  COL_VERTEX(-3371, -2149, 6553);
	  COL_VERTEX(-3268, -1919, 6553);
	  COL_VERTEX(922, -4607, 6552);
	  COL_VERTEX(768, -1074, -3429);
	  COL_VERTEX(-3124, -1228, -3159);
	  COL_VERTEX(4005, -4607, 1923);
	  COL_VERTEX(3520, -4694, -179);
	  COL_VERTEX(3132, -4694, -308);
	  COL_VERTEX(2845, -1433, 2499);
	  COL_VERTEX(3008, -1434, 2622);
	  COL_VERTEX(-1386, -1637, 4683);
	  COL_VERTEX(-1407, -1637, 4480);
	  COL_VERTEX(-3323, -1535, 4045);
	  COL_VERTEX(805, -1535, 5320);
	  COL_VERTEX(-4545, -1459, 2256);
	  COL_VERTEX(-4501, -1459, 2226);
	  COL_VERTEX(-5058, -1319, -1490);
	  COL_VERTEX(-5119, -1319, -1417);
	  COL_VERTEX(-5056, -1319, -1347);
	  COL_VERTEX(547, 3227, -719);
	  COL_VERTEX(834, 3123, -145);
	  COL_VERTEX(774, 3123, -72);
	  COL_VERTEX(837, 3123, -1);
	  COL_VERTEX(23, 3123, -1280);
	  COL_VERTEX(-1995, 2824, -203);
	  COL_VERTEX(-1706, 2824, -492);
	  COL_VERTEX(-4516, -1387, 2183);
	  COL_VERTEX(-4330, -1287, -155);
	  COL_VERTEX(-5047, -1247, -1421);
	  COL_VERTEX(159, 3479, -1743);
	  COL_VERTEX(574, 3243, -793);
	  COL_VERTEX(846, 3195, -76);
	  COL_VERTEX(922, -4607, 6603);
	  COL_VERTEX(4099, -1228, 851);
	  COL_VERTEX(3605, -1228, 1500);
	  COL_VERTEX(3768, -1228, 1624);
	  COL_VERTEX(-2024, 2560, -1537);
	  COL_VERTEX(3185, -4807, -470);
	  COL_VERTEX(3574, -4807, -341);
	  COL_VERTEX(-1571, 2747, -358);
	  COL_VERTEX(-1861, 2747, -69);
	  COL_VERTEX(3124, -1507, 2470);
	  COL_VERTEX(2961, -1506, 2346);
	  COL_VERTEX(3072, 2560, -767);
	  COL_VERTEX(3516, -4709, 4607);
	  COL_VERTEX(3500, -1337, 1638);
	  COL_VERTEX(3663, -1337, 1762);
	  COL_VERTEX(-716, -8089, 5837);
	  COL_VERTEX(-716, -8089, 6246);
	  COL_VERTEX(922, -8089, 6246);
	  COL_VERTEX(922, -8089, 5837);
	  COL_TRI_INIT(SURFACE_DEFAULT, 458);
	  COL_TRI(11, 8, 4);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(4, 3, 0);
	  COL_TRI(5, 6, 3);
	  COL_TRI(1, 3, 6);
	  COL_TRI(3, 1, 7);
	  COL_TRI(3, 7, 8);
	  COL_TRI(4, 8, 3);
	  COL_TRI(9, 3, 8);
	  COL_TRI(6, 10, 1);
	  COL_TRI(2, 1, 7);
	  COL_TRI(7, 1, 10);
	  COL_TRI(2, 7, 11);
	  COL_TRI(11, 7, 8);
	  COL_TRI(12, 8, 7);
	  COL_TRI(10, 12, 7);
	  COL_TRI(12, 13, 8);
	  COL_TRI(9, 8, 13);
	  COL_TRI(14, 234, 235);
	  COL_TRI(14, 236, 234);
	  COL_TRI(15, 237, 238);
	  COL_TRI(15, 238, 239);
	  COL_TRI(16, 218, 219);
	  COL_TRI(16, 240, 241);
	  COL_TRI(16, 241, 217);
	  COL_TRI(16, 219, 217);
	  COL_TRI(17, 242, 243);
	  COL_TRI(17, 244, 242);
	  COL_TRI(18, 245, 246);
	  COL_TRI(18, 247, 245);
	  COL_TRI(19, 249, 20);
	  COL_TRI(20, 21, 19);
	  COL_TRI(21, 20, 22);
	  COL_TRI(22, 25, 21);
	  COL_TRI(23, 250, 24);
	  COL_TRI(24, 251, 23);
	  COL_TRI(25, 22, 252);
	  COL_TRI(25, 252, 253);
	  COL_TRI(26, 27, 22);
	  COL_TRI(27, 254, 22);
	  COL_TRI(28, 255, 256);
	  COL_TRI(28, 256, 257);
	  COL_TRI(29, 258, 31);
	  COL_TRI(30, 31, 259);
	  COL_TRI(31, 260, 259);
	  COL_TRI(29, 31, 30);
	  COL_TRI(32, 33, 261);
	  COL_TRI(33, 32, 262);
	  COL_TRI(35, 34, 265);
	  COL_TRI(32, 263, 262);
	  COL_TRI(32, 261, 264);
	  COL_TRI(34, 264, 261);
	  COL_TRI(34, 35, 264);
	  COL_TRI(35, 56, 264);
	  COL_TRI(29, 264, 56);
	  COL_TRI(36, 29, 56);
	  COL_TRI(35, 265, 65);
	  COL_TRI(37, 266, 39);
	  COL_TRI(38, 37, 39);
	  COL_TRI(39, 266, 267);
	  COL_TRI(39, 267, 268);
	  COL_TRI(40, 269, 42);
	  COL_TRI(40, 42, 41);
	  COL_TRI(45, 274, 275);
	  COL_TRI(41, 42, 270);
	  COL_TRI(42, 271, 270);
	  COL_TRI(43, 272, 44);
	  COL_TRI(43, 273, 272);
	  COL_TRI(44, 274, 45);
	  COL_TRI(44, 272, 274);
	  COL_TRI(49, 279, 278);
	  COL_TRI(45, 275, 46);
	  COL_TRI(46, 275, 276);
	  COL_TRI(46, 276, 47);
	  COL_TRI(47, 277, 48);
	  COL_TRI(47, 276, 277);
	  COL_TRI(48, 277, 273);
	  COL_TRI(48, 273, 43);
	  COL_TRI(49, 278, 51);
	  COL_TRI(50, 281, 279);
	  COL_TRI(50, 279, 49);
	  COL_TRI(51, 278, 280);
	  COL_TRI(51, 280, 55);
	  COL_TRI(52, 54, 53);
	  COL_TRI(52, 282, 54);
	  COL_TRI(53, 54, 50);
	  COL_TRI(54, 281, 50);
	  COL_TRI(55, 282, 52);
	  COL_TRI(55, 280, 282);
	  COL_TRI(56, 57, 36);
	  COL_TRI(57, 283, 220);
	  COL_TRI(57, 220, 284);
	  COL_TRI(57, 285, 36);
	  COL_TRI(57, 284, 285);
	  COL_TRI(36, 285, 59);
	  COL_TRI(58, 59, 287);
	  COL_TRI(36, 59, 286);
	  COL_TRI(59, 114, 288);
	  COL_TRI(60, 62, 61);
	  COL_TRI(61, 62, 289);
	  COL_TRI(62, 70, 289);
	  COL_TRI(63, 290, 289);
	  COL_TRI(64, 63, 289);
	  COL_TRI(61, 290, 66);
	  COL_TRI(61, 289, 290);
	  COL_TRI(60, 61, 291);
	  COL_TRI(65, 239, 60);
	  COL_TRI(65, 265, 239);
	  COL_TRI(61, 104, 295);
	  COL_TRI(61, 66, 104);
	  COL_TRI(66, 82, 236);
	  COL_TRI(66, 290, 63);
	  COL_TRI(63, 82, 66);
	  COL_TRI(67, 104, 14);
	  COL_TRI(68, 104, 67);
	  COL_TRI(68, 116, 104);
	  COL_TRI(69, 291, 295);
	  COL_TRI(69, 226, 291);
	  COL_TRI(70, 64, 289);
	  COL_TRI(71, 296, 297);
	  COL_TRI(71, 298, 296);
	  COL_TRI(71, 299, 298);
	  COL_TRI(72, 71, 297);
	  COL_TRI(72, 300, 71);
	  COL_TRI(73, 297, 296);
	  COL_TRI(73, 72, 297);
	  COL_TRI(74, 72, 73);
	  COL_TRI(75, 300, 72);
	  COL_TRI(74, 75, 72);
	  COL_TRI(75, 301, 300);
	  COL_TRI(76, 78, 77);
	  COL_TRI(81, 138, 308);
	  COL_TRI(77, 78, 302);
	  COL_TRI(76, 304, 78);
	  COL_TRI(78, 304, 305);
	  COL_TRI(78, 305, 302);
	  COL_TRI(77, 302, 303);
	  COL_TRI(76, 306, 304);
	  COL_TRI(79, 81, 307);
	  COL_TRI(80, 138, 81);
	  COL_TRI(82, 14, 236);
	  COL_TRI(83, 14, 98);
	  COL_TRI(83, 67, 14);
	  COL_TRI(14, 104, 236);
	  COL_TRI(84, 312, 86);
	  COL_TRI(84, 86, 313);
	  COL_TRI(85, 84, 313);
	  COL_TRI(85, 314, 84);
	  COL_TRI(90, 315, 87);
	  COL_TRI(86, 312, 315);
	  COL_TRI(86, 315, 90);
	  COL_TRI(87, 88, 320);
	  COL_TRI(88, 321, 89);
	  COL_TRI(88, 87, 321);
	  COL_TRI(89, 321, 314);
	  COL_TRI(89, 314, 85);
	  COL_TRI(87, 320, 90);
	  COL_TRI(91, 322, 323);
	  COL_TRI(91, 92, 322);
	  COL_TRI(92, 91, 324);
	  COL_TRI(92, 112, 325);
	  COL_TRI(92, 324, 112);
	  COL_TRI(93, 94, 322);
	  COL_TRI(94, 323, 322);
	  COL_TRI(95, 93, 96);
	  COL_TRI(102, 98, 101);
	  COL_TRI(95, 96, 97);
	  COL_TRI(96, 316, 98);
	  COL_TRI(97, 96, 98);
	  COL_TRI(98, 316, 318);
	  COL_TRI(99, 100, 98);
	  COL_TRI(83, 98, 317);
	  COL_TRI(100, 317, 98);
	  COL_TRI(99, 98, 102);
	  COL_TRI(101, 98, 218);
	  COL_TRI(106, 329, 330);
	  COL_TRI(103, 319, 318);
	  COL_TRI(103, 318, 327);
	  COL_TRI(98, 318, 319);
	  COL_TRI(104, 66, 236);
	  COL_TRI(105, 106, 107);
	  COL_TRI(105, 328, 106);
	  COL_TRI(106, 331, 329);
	  COL_TRI(108, 332, 328);
	  COL_TRI(108, 328, 105);
	  COL_TRI(106, 328, 332);
	  COL_TRI(106, 332, 331);
	  COL_TRI(109, 331, 111);
	  COL_TRI(109, 329, 331);
	  COL_TRI(110, 330, 329);
	  COL_TRI(107, 330, 110);
	  COL_TRI(107, 106, 330);
	  COL_TRI(110, 329, 109);
	  COL_TRI(111, 332, 108);
	  COL_TRI(111, 331, 332);
	  COL_TRI(112, 324, 333);
	  COL_TRI(113, 112, 333);
	  COL_TRI(114, 292, 225);
	  COL_TRI(120, 225, 339);
	  COL_TRI(114, 122, 117);
	  COL_TRI(118, 117, 338);
	  COL_TRI(117, 122, 338);
	  COL_TRI(117, 118, 334);
	  COL_TRI(117, 334, 114);
	  COL_TRI(119, 225, 120);
	  COL_TRI(121, 83, 317);
	  COL_TRI(59, 115, 114);
	  COL_TRI(115, 293, 114);
	  COL_TRI(114, 293, 294);
	  COL_TRI(114, 294, 116);
	  COL_TRI(116, 122, 114);
	  COL_TRI(118, 317, 100);
	  COL_TRI(100, 334, 118);
	  COL_TRI(118, 121, 317);
	  COL_TRI(122, 68, 123);
	  COL_TRI(116, 68, 122);
	  COL_TRI(68, 67, 123);
	  COL_TRI(122, 123, 338);
	  COL_TRI(118, 338, 121);
	  COL_TRI(121, 123, 83);
	  COL_TRI(123, 121, 338);
	  COL_TRI(124, 340, 127);
	  COL_TRI(125, 124, 126);
	  COL_TRI(126, 124, 127);
	  COL_TRI(127, 223, 224);
	  COL_TRI(128, 341, 127);
	  COL_TRI(128, 127, 340);
	  COL_TRI(127, 341, 223);
	  COL_TRI(129, 127, 224);
	  COL_TRI(127, 129, 342);
	  COL_TRI(126, 127, 342);
	  COL_TRI(130, 343, 199);
	  COL_TRI(131, 344, 130);
	  COL_TRI(132, 345, 130);
	  COL_TRI(130, 346, 131);
	  COL_TRI(130, 345, 346);
	  COL_TRI(130, 347, 150);
	  COL_TRI(130, 199, 347);
	  COL_TRI(12, 130, 172);
	  COL_TRI(136, 135, 9);
	  COL_TRI(130, 344, 343);
	  COL_TRI(133, 9, 348);
	  COL_TRI(9, 135, 348);
	  COL_TRI(134, 348, 135);
	  COL_TRI(135, 160, 134);
	  COL_TRI(135, 136, 160);
	  COL_TRI(137, 309, 80);
	  COL_TRI(80, 309, 310);
	  COL_TRI(80, 310, 138);
	  COL_TRI(138, 311, 308);
	  COL_TRI(137, 349, 309);
	  COL_TRI(139, 120, 311);
	  COL_TRI(140, 139, 143);
	  COL_TRI(139, 311, 350);
	  COL_TRI(140, 187, 120);
	  COL_TRI(139, 350, 351);
	  COL_TRI(139, 351, 352);
	  COL_TRI(119, 113, 353);
	  COL_TRI(119, 354, 113);
	  COL_TRI(113, 333, 335);
	  COL_TRI(113, 335, 336);
	  COL_TRI(113, 336, 337);
	  COL_TRI(113, 337, 353);
	  COL_TRI(146, 358, 148);
	  COL_TRI(141, 349, 137);
	  COL_TRI(141, 142, 349);
	  COL_TRI(142, 141, 355);
	  COL_TRI(143, 142, 355);
	  COL_TRI(144, 143, 355);
	  COL_TRI(143, 145, 140);
	  COL_TRI(145, 143, 356);
	  COL_TRI(146, 148, 357);
	  COL_TRI(146, 147, 358);
	  COL_TRI(147, 359, 358);
	  COL_TRI(148, 149, 357);
	  COL_TRI(149, 150, 357);
	  COL_TRI(150, 149, 156);
	  COL_TRI(150, 156, 157);
	  COL_TRI(151, 360, 147);
	  COL_TRI(152, 154, 362);
	  COL_TRI(153, 154, 363);
	  COL_TRI(153, 364, 154);
	  COL_TRI(154, 152, 365);
	  COL_TRI(154, 365, 363);
	  COL_TRI(154, 366, 362);
	  COL_TRI(155, 366, 154);
	  COL_TRI(155, 154, 364);
	  COL_TRI(152, 362, 164);
	  COL_TRI(156, 361, 157);
	  COL_TRI(158, 159, 161);
	  COL_TRI(157, 361, 177);
	  COL_TRI(158, 162, 155);
	  COL_TRI(158, 155, 364);
	  COL_TRI(158, 364, 159);
	  COL_TRI(159, 364, 153);
	  COL_TRI(160, 159, 367);
	  COL_TRI(159, 153, 367);
	  COL_TRI(161, 159, 160);
	  COL_TRI(160, 367, 134);
	  COL_TRI(162, 166, 155);
	  COL_TRI(163, 366, 155);
	  COL_TRI(164, 362, 200);
	  COL_TRI(165, 200, 362);
	  COL_TRI(166, 162, 99);
	  COL_TRI(163, 155, 166);
	  COL_TRI(161, 168, 158);
	  COL_TRI(165, 362, 366);
	  COL_TRI(167, 165, 366);
	  COL_TRI(167, 368, 165);
	  COL_TRI(163, 167, 366);
	  COL_TRI(165, 368, 369);
	  COL_TRI(168, 162, 158);
	  COL_TRI(169, 168, 161);
	  COL_TRI(170, 12, 370);
	  COL_TRI(171, 370, 12);
	  COL_TRI(172, 205, 12);
	  COL_TRI(173, 205, 172);
	  COL_TRI(174, 188, 171);
	  COL_TRI(170, 370, 178);
	  COL_TRI(157, 177, 175);
	  COL_TRI(175, 177, 374);
	  COL_TRI(176, 375, 374);
	  COL_TRI(177, 176, 374);
	  COL_TRI(10, 371, 200);
	  COL_TRI(178, 10, 203);
	  COL_TRI(203, 170, 178);
	  COL_TRI(181, 376, 180);
	  COL_TRI(10, 178, 371);
	  COL_TRI(13, 189, 136);
	  COL_TRI(179, 189, 13);
	  COL_TRI(179, 13, 170);
	  COL_TRI(180, 376, 377);
	  COL_TRI(180, 377, 182);
	  COL_TRI(185, 380, 308);
	  COL_TRI(181, 378, 376);
	  COL_TRI(182, 377, 379);
	  COL_TRI(182, 379, 184);
	  COL_TRI(183, 378, 181);
	  COL_TRI(184, 379, 308);
	  COL_TRI(184, 308, 380);
	  COL_TRI(186, 223, 341);
	  COL_TRI(119, 58, 287);
	  COL_TRI(187, 354, 119);
	  COL_TRI(174, 371, 188);
	  COL_TRI(188, 371, 178);
	  COL_TRI(186, 341, 128);
	  COL_TRI(191, 193, 194);
	  COL_TRI(189, 160, 136);
	  COL_TRI(190, 192, 193);
	  COL_TRI(103, 190, 191);
	  COL_TRI(103, 327, 190);
	  COL_TRI(191, 190, 193);
	  COL_TRI(192, 382, 383);
	  COL_TRI(193, 192, 383);
	  COL_TRI(194, 193, 197);
	  COL_TRI(195, 383, 382);
	  COL_TRI(196, 191, 194);
	  COL_TRI(197, 384, 194);
	  COL_TRI(191, 196, 319);
	  COL_TRI(98, 319, 198);
	  COL_TRI(198, 319, 385);
	  COL_TRI(5, 3, 9);
	  COL_TRI(9, 13, 136);
	  COL_TRI(199, 360, 151);
	  COL_TRI(199, 343, 360);
	  COL_TRI(200, 165, 369);
	  COL_TRI(10, 200, 369);
	  COL_TRI(10, 6, 201);
	  COL_TRI(202, 201, 6);
	  COL_TRI(6, 5, 202);
	  COL_TRI(186, 203, 201);
	  COL_TRI(186, 201, 223);
	  COL_TRI(5, 9, 387);
	  COL_TRI(173, 204, 205);
	  COL_TRI(202, 5, 387);
	  COL_TRI(204, 372, 205);
	  COL_TRI(171, 204, 388);
	  COL_TRI(12, 372, 171);
	  COL_TRI(204, 171, 372);
	  COL_TRI(205, 372, 12);
	  COL_TRI(206, 208, 210);
	  COL_TRI(207, 212, 208);
	  COL_TRI(208, 212, 209);
	  COL_TRI(208, 385, 210);
	  COL_TRI(209, 385, 208);
	  COL_TRI(214, 212, 211);
	  COL_TRI(210, 213, 389);
	  COL_TRI(206, 210, 389);
	  COL_TRI(198, 385, 209);
	  COL_TRI(211, 389, 213);
	  COL_TRI(212, 389, 211);
	  COL_TRI(213, 248, 211);
	  COL_TRI(213, 194, 215);
	  COL_TRI(209, 212, 214);
	  COL_TRI(215, 194, 384);
	  COL_TRI(215, 384, 216);
	  COL_TRI(215, 217, 248);
	  COL_TRI(215, 248, 213);
	  COL_TRI(216, 217, 215);
	  COL_TRI(216, 145, 356);
	  COL_TRI(216, 384, 145);
	  COL_TRI(217, 216, 356);
	  COL_TRI(214, 218, 209);
	  COL_TRI(218, 198, 209);
	  COL_TRI(98, 198, 218);
	  COL_TRI(217, 356, 390);
	  COL_TRI(219, 211, 248);
	  COL_TRI(214, 211, 219);
	  COL_TRI(219, 248, 217);
	  COL_TRI(218, 214, 219);
	  COL_TRI(221, 228, 391);
	  COL_TRI(220, 226, 69);
	  COL_TRI(139, 140, 120);
	  COL_TRI(187, 381, 354);
	  COL_TRI(221, 381, 187);
	  COL_TRI(221, 391, 381);
	  COL_TRI(221, 392, 228);
	  COL_TRI(224, 223, 202);
	  COL_TRI(143, 390, 356);
	  COL_TRI(143, 144, 390);
	  COL_TRI(186, 222, 203);
	  COL_TRI(222, 339, 393);
	  COL_TRI(222, 393, 203);
	  COL_TRI(223, 201, 202);
	  COL_TRI(9, 133, 387);
	  COL_TRI(169, 161, 373);
	  COL_TRI(169, 373, 189);
	  COL_TRI(169, 189, 179);
	  COL_TRI(161, 160, 189);
	  COL_TRI(161, 189, 373);
	  COL_TRI(119, 287, 225);
	  COL_TRI(226, 220, 283);
	  COL_TRI(119, 120, 187);
	  COL_TRI(204, 173, 388);
	  COL_TRI(225, 292, 393);
	  COL_TRI(225, 393, 339);
	  COL_TRI(229, 395, 396);
	  COL_TRI(195, 386, 383);
	  COL_TRI(227, 386, 195);
	  COL_TRI(227, 195, 394);
	  COL_TRI(228, 392, 227);
	  COL_TRI(228, 227, 394);
	  COL_TRI(207, 208, 233);
	  COL_TRI(230, 229, 396);
	  COL_TRI(229, 230, 231);
	  COL_TRI(231, 230, 397);
	  COL_TRI(230, 396, 397);
	  COL_TRI(206, 389, 232);
	  COL_TRI(206, 233, 208);
	  COL_TRI(232, 233, 206);
	  COL_TRI(233, 232, 207);
	  COL_TRI(218, 16, 101);
	  COL_TRI(102, 101, 326);
	  COL_TRI(36, 258, 29);
	  COL_TRI(12, 478, 130);
	  COL_TRI(478, 459, 130);
	  COL_TRI(459, 132, 130);
	  COL_TRI_INIT(SURFACE_DEATH_PLANE, 2);
	  COL_TRI(481, 482, 483);
	  COL_TRI(481, 483, 484);
	  COL_TRI_INIT(SURFACE_VERY_SLIPPERY, 101);
	  COL_TRI(114, 179, 292);
	  COL_TRI(334, 179, 114);
	  COL_TRI(222, 182, 51);
	  COL_TRI(182, 49, 51);
	  COL_TRI(182, 451, 49);
	  COL_TRI(182, 452, 451);
	  COL_TRI(182, 184, 452);
	  COL_TRI(184, 453, 452);
	  COL_TRI(454, 453, 184);
	  COL_TRI(53, 454, 184);
	  COL_TRI(222, 52, 184);
	  COL_TRI(52, 53, 184);
	  COL_TRI(186, 457, 222);
	  COL_TRI(454, 50, 451);
	  COL_TRI(49, 451, 50);
	  COL_TRI(454, 53, 50);
	  COL_TRI(222, 55, 52);
	  COL_TRI(222, 51, 55);
	  COL_TRI(186, 455, 182);
	  COL_TRI(182, 472, 186);
	  COL_TRI(186, 472, 457);
	  COL_TRI(180, 474, 456);
	  COL_TRI(455, 474, 182);
	  COL_TRI(186, 473, 455);
	  COL_TRI(182, 475, 472);
	  COL_TRI(182, 222, 476);
	  COL_TRI(182, 476, 475);
	  COL_TRI(182, 474, 180);
	  COL_TRI(456, 473, 180);
	  COL_TRI(186, 180, 473);
	  COL_TRI(180, 128, 181);
	  COL_TRI(180, 186, 128);
	  COL_TRI(457, 476, 222);
	  COL_TRI(222, 185, 339);
	  COL_TRI(184, 185, 222);
	  COL_TRI(458, 345, 132);
	  COL_TRI(132, 464, 359);
	  COL_TRI(458, 132, 359);
	  COL_TRI(459, 460, 132);
	  COL_TRI(460, 464, 132);
	  COL_TRI(461, 359, 360);
	  COL_TRI(458, 359, 462);
	  COL_TRI(358, 359, 134);
	  COL_TRI(359, 477, 462);
	  COL_TRI(359, 348, 134);
	  COL_TRI(461, 477, 359);
	  COL_TRI(462, 477, 131);
	  COL_TRI(346, 462, 131);
	  COL_TRI(360, 343, 461);
	  COL_TRI(343, 344, 461);
	  COL_TRI(12, 463, 464);
	  COL_TRI(463, 348, 464);
	  COL_TRI(463, 133, 348);
	  COL_TRI(464, 348, 359);
	  COL_TRI(464, 468, 12);
	  COL_TRI(464, 460, 468);
	  COL_TRI(465, 148, 358);
	  COL_TRI(465, 358, 367);
	  COL_TRI(465, 149, 148);
	  COL_TRI(465, 153, 363);
	  COL_TRI(465, 363, 149);
	  COL_TRI(465, 367, 153);
	  COL_TRI(365, 149, 363);
	  COL_TRI(365, 156, 149);
	  COL_TRI(120, 185, 308);
	  COL_TRI(358, 134, 367);
	  COL_TRI(308, 311, 120);
	  COL_TRI(120, 339, 185);
	  COL_TRI(380, 185, 184);
	  COL_TRI(202, 387, 479);
	  COL_TRI(360, 359, 147);
	  COL_TRI(368, 167, 342);
	  COL_TRI(167, 163, 342);
	  COL_TRI(342, 129, 368);
	  COL_TRI(163, 126, 342);
	  COL_TRI(369, 368, 129);
	  COL_TRI(369, 129, 224);
	  COL_TRI(202, 479, 10);
	  COL_TRI(463, 479, 387);
	  COL_TRI(133, 463, 387);
	  COL_TRI(166, 125, 126);
	  COL_TRI(163, 166, 126);
	  COL_TRI(466, 125, 166);
	  COL_TRI(99, 466, 166);
	  COL_TRI(466, 470, 125);
	  COL_TRI(467, 125, 470);
	  COL_TRI(369, 224, 10);
	  COL_TRI(224, 202, 10);
	  COL_TRI(12, 10, 479);
	  COL_TRI(463, 12, 479);
	  COL_TRI(468, 478, 12);
	  COL_TRI(407, 324, 91);
	  COL_TRI(467, 470, 480);
	  COL_TRI(99, 469, 466);
	  COL_TRI(99, 102, 469);
	  COL_TRI(469, 470, 466);
	  COL_TRI(470, 469, 480);
	  COL_TRI(469, 102, 326);
	  COL_TRI(469, 326, 480);
	  COL_TRI(326, 471, 480);
	  COL_TRI(471, 467, 480);
	  COL_TRI_INIT(SURFACE_SLIPPERY, 140);
	  COL_TRI(398, 399, 400);
	  COL_TRI(398, 400, 401);
	  COL_TRI(398, 401, 402);
	  COL_TRI(398, 402, 403);
	  COL_TRI(404, 398, 405);
	  COL_TRI(404, 399, 398);
	  COL_TRI(398, 406, 405);
	  COL_TRI(398, 403, 406);
	  COL_TRI(404, 400, 399);
	  COL_TRI(404, 401, 400);
	  COL_TRI(404, 402, 401);
	  COL_TRI(404, 403, 402);
	  COL_TRI(404, 406, 403);
	  COL_TRI(404, 405, 406);
	  COL_TRI(85, 313, 86);
	  COL_TRI(85, 86, 90);
	  COL_TRI(85, 90, 320);
	  COL_TRI(88, 85, 320);
	  COL_TRI(119, 91, 107);
	  COL_TRI(88, 89, 85);
	  COL_TRI(91, 323, 434);
	  COL_TRI(323, 435, 434);
	  COL_TRI(323, 14, 435);
	  COL_TRI(323, 94, 14);
	  COL_TRI(14, 94, 98);
	  COL_TRI(91, 434, 239);
	  COL_TRI(91, 110, 107);
	  COL_TRI(11, 4, 170);
	  COL_TRI(94, 97, 98);
	  COL_TRI(203, 393, 2);
	  COL_TRI(393, 0, 2);
	  COL_TRI(393, 292, 0);
	  COL_TRI(292, 170, 4);
	  COL_TRI(4, 0, 292);
	  COL_TRI(170, 292, 179);
	  COL_TRI(203, 2, 11);
	  COL_TRI(220, 409, 284);
	  COL_TRI(408, 437, 293);
	  COL_TRI(409, 408, 284);
	  COL_TRI(408, 293, 284);
	  COL_TRI(293, 410, 438);
	  COL_TRI(410, 293, 437);
	  COL_TRI(293, 439, 294);
	  COL_TRI(293, 438, 439);
	  COL_TRI(293, 115, 284);
	  COL_TRI(388, 442, 441);
	  COL_TRI(220, 69, 440);
	  COL_TRI(410, 220, 440);
	  COL_TRI(410, 437, 220);
	  COL_TRI(69, 439, 440);
	  COL_TRI(69, 294, 439);
	  COL_TRI(388, 441, 412);
	  COL_TRI(388, 150, 442);
	  COL_TRI(150, 157, 442);
	  COL_TRI(413, 444, 150);
	  COL_TRI(388, 413, 150);
	  COL_TRI(150, 444, 173);
	  COL_TRI(150, 347, 357);
	  COL_TRI(150, 445, 130);
	  COL_TRI(414, 445, 150);
	  COL_TRI(173, 414, 150);
	  COL_TRI(415, 442, 157);
	  COL_TRI(173, 411, 388);
	  COL_TRI(411, 443, 388);
	  COL_TRI(412, 157, 175);
	  COL_TRI(412, 175, 388);
	  COL_TRI(412, 415, 157);
	  COL_TRI(374, 388, 175);
	  COL_TRI(388, 443, 413);
	  COL_TRI(173, 444, 411);
	  COL_TRI(416, 420, 173);
	  COL_TRI(172, 416, 173);
	  COL_TRI(172, 130, 417);
	  COL_TRI(172, 418, 416);
	  COL_TRI(417, 418, 172);
	  COL_TRI(418, 417, 446);
	  COL_TRI(414, 446, 417);
	  COL_TRI(130, 419, 417);
	  COL_TRI(419, 130, 445);
	  COL_TRI(420, 446, 414);
	  COL_TRI(414, 173, 420);
	  COL_TRI(421, 333, 447);
	  COL_TRI(407, 324, 91);
	  COL_TRI(324, 447, 333);
	  COL_TRI(422, 447, 324);
	  COL_TRI(423, 422, 324);
	  COL_TRI(407, 423, 324);
	  COL_TRI(424, 448, 422);
	  COL_TRI(424, 422, 423);
	  COL_TRI(425, 424, 423);
	  COL_TRI(353, 424, 425);
	  COL_TRI(425, 426, 119);
	  COL_TRI(353, 425, 119);
	  COL_TRI(119, 407, 91);
	  COL_TRI(426, 407, 119);
	  COL_TRI(33, 427, 119);
	  COL_TRI(33, 449, 427);
	  COL_TRI(427, 436, 119);
	  COL_TRI(107, 105, 119);
	  COL_TRI(105, 33, 119);
	  COL_TRI(119, 436, 262);
	  COL_TRI(428, 262, 436);
	  COL_TRI(91, 239, 111);
	  COL_TRI(91, 111, 109);
	  COL_TRI(91, 109, 110);
	  COL_TRI(105, 108, 265);
	  COL_TRI(105, 261, 33);
	  COL_TRI(261, 105, 265);
	  COL_TRI(261, 265, 34);
	  COL_TRI(108, 239, 265);
	  COL_TRI(108, 111, 239);
	  COL_TRI(429, 307, 430);
	  COL_TRI(307, 429, 144);
	  COL_TRI(141, 307, 355);
	  COL_TRI(430, 307, 81);
	  COL_TRI(431, 430, 379);
	  COL_TRI(379, 430, 81);
	  COL_TRI(141, 137, 80);
	  COL_TRI(141, 80, 79);
	  COL_TRI(307, 141, 79);
	  COL_TRI(432, 379, 144);
	  COL_TRI(390, 144, 379);
	  COL_TRI(433, 164, 200);
	  COL_TRI(433, 200, 450);
	  COL_TRI(152, 164, 433);
	  COL_TRI(371, 450, 200);
	  COL_TRI(375, 174, 374);
	  COL_TRI(174, 171, 374);
	  COL_TRI(188, 370, 171);
	  COL_TRI(374, 171, 388);
	  COL_TRI(144, 429, 432);
	  COL_TRI(432, 431, 379);
	  COL_TRI(379, 81, 308);
	  COL_TRI(377, 390, 379);
	  COL_TRI(217, 376, 378);
	  COL_TRI(217, 390, 376);
	  COL_TRI(376, 390, 377);
	  COL_TRI(144, 355, 307);
	  COL_TRI(370, 188, 178);
	  COL_TRI(357, 347, 146);
	  COL_TRI_INIT(SURFACE_WALL_MISC, 144);
	  COL_TRI(495, 494, 496);
	  COL_TRI(485, 486, 234);
	  COL_TRI(485, 487, 486);
	  COL_TRI(488, 489, 490);
	  COL_TRI(488, 490, 491);
	  COL_TRI(492, 493, 494);
	  COL_TRI(492, 494, 495);
	  COL_TRI(501, 355, 144);
	  COL_TRI(495, 496, 497);
	  COL_TRI(498, 489, 488);
	  COL_TRI(498, 539, 489);
	  COL_TRI(499, 540, 237);
	  COL_TRI(500, 499, 237);
	  COL_TRI(501, 144, 541);
	  COL_TRI(504, 367, 544);
	  COL_TRI(502, 141, 355);
	  COL_TRI(502, 355, 501);
	  COL_TRI(503, 137, 141);
	  COL_TRI(503, 141, 502);
	  COL_TRI(367, 504, 542);
	  COL_TRI(367, 542, 543);
	  COL_TRI(507, 553, 508);
	  COL_TRI(504, 544, 545);
	  COL_TRI(505, 546, 547);
	  COL_TRI(505, 548, 546);
	  COL_TRI(506, 549, 550);
	  COL_TRI(506, 550, 551);
	  COL_TRI(507, 508, 552);
	  COL_TRI(508, 555, 554);
	  COL_TRI(508, 554, 552);
	  COL_TRI(509, 556, 557);
	  COL_TRI(509, 558, 556);
	  COL_TRI(509, 559, 558);
	  COL_TRI(509, 560, 559);
	  COL_TRI(510, 135, 9);
	  COL_TRI(510, 9, 561);
	  COL_TRI(513, 221, 392);
	  COL_TRI(5, 511, 9);
	  COL_TRI(511, 561, 9);
	  COL_TRI(12, 562, 10);
	  COL_TRI(12, 563, 562);
	  COL_TRI(512, 564, 221);
	  COL_TRI(512, 221, 513);
	  COL_TRI(514, 565, 566);
	  COL_TRI(514, 187, 565);
	  COL_TRI(515, 567, 568);
	  COL_TRI(515, 392, 567);
	  COL_TRI(516, 207, 569);
	  COL_TRI(516, 569, 570);
	  COL_TRI(516, 571, 232);
	  COL_TRI(516, 570, 571);
	  COL_TRI(518, 577, 575);
	  COL_TRI(513, 392, 515);
	  COL_TRI(517, 244, 17);
	  COL_TRI(517, 572, 244);
	  COL_TRI(247, 573, 574);
	  COL_TRI(247, 18, 573);
	  COL_TRI(518, 575, 576);
	  COL_TRI(518, 576, 578);
	  COL_TRI(518, 578, 579);
	  COL_TRI(519, 520, 580);
	  COL_TRI(519, 581, 520);
	  COL_TRI(520, 582, 580);
	  COL_TRI(520, 583, 582);
	  COL_TRI(521, 575, 577);
	  COL_TRI(521, 584, 575);
	  COL_TRI(62, 64, 70);
	  COL_TRI(522, 527, 523);
	  COL_TRI(523, 525, 522);
	  COL_TRI(523, 585, 525);
	  COL_TRI(524, 525, 585);
	  COL_TRI(524, 586, 525);
	  COL_TRI(525, 586, 522);
	  COL_TRI(526, 522, 586);
	  COL_TRI(522, 526, 527);
	  COL_TRI(527, 526, 586);
	  COL_TRI(527, 586, 524);
	  COL_TRI(62, 239, 64);
	  COL_TRI(239, 325, 64);
	  COL_TRI(531, 591, 530);
	  COL_TRI(429, 528, 432);
	  COL_TRI(429, 587, 528);
	  COL_TRI(528, 588, 589);
	  COL_TRI(528, 587, 588);
	  COL_TRI(432, 528, 589);
	  COL_TRI(430, 588, 587);
	  COL_TRI(430, 587, 429);
	  COL_TRI(431, 589, 588);
	  COL_TRI(431, 588, 430);
	  COL_TRI(432, 589, 431);
	  COL_TRI(529, 530, 590);
	  COL_TRI(530, 591, 592);
	  COL_TRI(531, 530, 529);
	  COL_TRI(530, 592, 590);
	  COL_TRI(532, 591, 531);
	  COL_TRI(532, 592, 591);
	  COL_TRI(533, 590, 592);
	  COL_TRI(533, 592, 532);
	  COL_TRI(529, 590, 533);
	  COL_TRI(534, 593, 594);
	  COL_TRI(534, 594, 595);
	  COL_TRI(425, 593, 534);
	  COL_TRI(425, 534, 426);
	  COL_TRI(426, 534, 595);
	  COL_TRI(299, 71, 300);
	  COL_TRI(423, 594, 593);
	  COL_TRI(423, 593, 425);
	  COL_TRI(407, 595, 594);
	  COL_TRI(407, 594, 423);
	  COL_TRI(426, 595, 407);
	  COL_TRI(361, 596, 300);
	  COL_TRI(361, 300, 301);
	  COL_TRI(299, 300, 596);
	  COL_TRI(303, 600, 76);
	  COL_TRI(73, 298, 597);
	  COL_TRI(73, 296, 298);
	  COL_TRI(74, 597, 598);
	  COL_TRI(74, 73, 597);
	  COL_TRI(304, 306, 599);
	  COL_TRI(304, 599, 305);
	  COL_TRI(303, 76, 77);
	  COL_TRI(82, 535, 536);
	  COL_TRI(535, 82, 63);
	  COL_TRI(82, 536, 14);
	  COL_TRI(435, 14, 536);
	  COL_TRI(536, 325, 239);
	  COL_TRI(536, 239, 434);
	  COL_TRI(536, 434, 435);
	  COL_TRI(123, 67, 83);
	  COL_TRI(121, 123, 83);
	  COL_TRI(59, 537, 287);
	  COL_TRI(537, 59, 288);
	  COL_TRI(139, 349, 142);
	  COL_TRI(142, 143, 139);
	  COL_TRI(139, 352, 601);
	  COL_TRI(139, 601, 349);
	  COL_TRI(538, 140, 145);
	  COL_TRI(538, 187, 140);
	  COL_TRI(538, 145, 197);
	  COL_TRI(145, 384, 197);
	  COL_TRI(602, 546, 548);
	  COL_TRI(602, 603, 546);
	  COL_TRI(550, 549, 604);
	  COL_TRI(550, 604, 605);
	  COL_TRI_INIT(SURFACE_ICE, 4);
	  COL_TRI(249, 22, 20);
	  COL_TRI(249, 252, 22);
	  COL_TRI(257, 22, 254);
	  COL_TRI(257, 256, 22);
	  COL_TRI_INIT(SURFACE_HARD, 80);
	  COL_TRI(185, 624, 625);
	  COL_TRI(235, 320, 90);
	  COL_TRI(235, 90, 619);
	  COL_TRI(89, 620, 621);
	  COL_TRI(89, 88, 620);
	  COL_TRI(622, 288, 537);
	  COL_TRI(622, 537, 623);
	  COL_TRI(629, 454, 640);
	  COL_TRI(185, 626, 624);
	  COL_TRI(624, 287, 625);
	  COL_TRI(624, 627, 287);
	  COL_TRI(371, 638, 639);
	  COL_TRI(371, 639, 174);
	  COL_TRI(628, 629, 640);
	  COL_TRI(630, 631, 642);
	  COL_TRI(451, 640, 454);
	  COL_TRI(452, 628, 640);
	  COL_TRI(452, 640, 451);
	  COL_TRI(457, 472, 641);
	  COL_TRI(472, 475, 641);
	  COL_TRI(475, 476, 641);
	  COL_TRI(476, 457, 641);
	  COL_TRI(473, 630, 642);
	  COL_TRI(631, 632, 642);
	  COL_TRI(632, 631, 474);
	  COL_TRI(631, 630, 456);
	  COL_TRI(474, 631, 456);
	  COL_TRI(632, 473, 642);
	  COL_TRI(455, 632, 474);
	  COL_TRI(473, 632, 455);
	  COL_TRI(456, 630, 473);
	  COL_TRI(442, 415, 643);
	  COL_TRI(415, 412, 643);
	  COL_TRI(412, 441, 643);
	  COL_TRI(441, 442, 643);
	  COL_TRI(633, 444, 644);
	  COL_TRI(444, 633, 411);
	  COL_TRI(411, 633, 443);
	  COL_TRI(413, 644, 444);
	  COL_TRI(416, 635, 634);
	  COL_TRI(416, 634, 420);
	  COL_TRI(606, 607, 608);
	  COL_TRI(420, 634, 446);
	  COL_TRI(418, 635, 416);
	  COL_TRI(635, 636, 645);
	  COL_TRI(634, 635, 645);
	  COL_TRI(418, 636, 635);
	  COL_TRI(636, 446, 645);
	  COL_TRI(446, 634, 645);
	  COL_TRI(446, 636, 418);
	  COL_TRI(606, 448, 424);
	  COL_TRI(606, 608, 448);
	  COL_TRI(601, 615, 614);
	  COL_TRI(610, 333, 646);
	  COL_TRI(609, 610, 646);
	  COL_TRI(609, 646, 616);
	  COL_TRI(612, 611, 138);
	  COL_TRI(612, 138, 310);
	  COL_TRI(601, 613, 615);
	  COL_TRI(39, 41, 270);
	  COL_TRI(31, 258, 36);
	  COL_TRI(260, 31, 36);
	  COL_TRI(260, 36, 286);
	  COL_TRI(263, 32, 30);
	  COL_TRI(30, 259, 263);
	  COL_TRI(32, 264, 30);
	  COL_TRI(30, 264, 29);
	  COL_TRI(270, 38, 39);
	  COL_TRI(40, 41, 39);
	  COL_TRI(268, 40, 39);
	  COL_TRI(527, 266, 37);
	  COL_TRI(527, 37, 523);
	  COL_TRI(527, 524, 267);
	  COL_TRI(266, 527, 267);
	  COL_TRI(637, 523, 37);
	  COL_TRI(637, 585, 523);
	  COL_TRI(524, 585, 637);
	  COL_TRI(267, 524, 637);
	  COL_TRI(121, 647, 648);
	  COL_TRI(121, 648, 649);
	  COL_TRI_INIT(SURFACE_HARD_NOT_SLIPPERY, 106);
	  COL_TRI(478, 468, 460);
	  COL_TRI(309, 349, 614);
	  COL_TRI(309, 614, 612);
	  COL_TRI(612, 310, 309);
	  COL_TRI(349, 601, 614);
	  COL_TRI(614, 351, 612);
	  COL_TRI(351, 350, 612);
	  COL_TRI(417, 445, 414);
	  COL_TRI(417, 419, 445);
	  COL_TRI(438, 410, 440);
	  COL_TRI(478, 460, 459);
	  COL_TRI(436, 449, 428);
	  COL_TRI(436, 427, 449);
	  COL_TRI(408, 220, 437);
	  COL_TRI(408, 409, 220);
	  COL_TRI(438, 440, 439);
	  COL_TRI(447, 422, 608);
	  COL_TRI(458, 462, 346);
	  COL_TRI(345, 458, 346);
	  COL_TRI(131, 461, 344);
	  COL_TRI(131, 477, 461);
	  COL_TRI(447, 608, 616);
	  COL_TRI(421, 447, 616);
	  COL_TRI(620, 652, 651);
	  COL_TRI(422, 448, 608);
	  COL_TRI(337, 336, 616);
	  COL_TRI(337, 616, 608);
	  COL_TRI(287, 627, 285);
	  COL_TRI(287, 285, 59);
	  COL_TRI(620, 651, 621);
	  COL_TRI(347, 657, 146);
	  COL_TRI(638, 653, 639);
	  COL_TRI(638, 654, 653);
	  COL_TRI(622, 623, 655);
	  COL_TRI(622, 655, 656);
	  COL_TRI(633, 644, 443);
	  COL_TRI(443, 644, 413);
	  COL_TRI(347, 199, 657);
	  COL_TRI(147, 657, 151);
	  COL_TRI(277, 276, 275);
	  COL_TRI(277, 274, 272);
	  COL_TRI(277, 272, 273);
	  COL_TRI(277, 275, 274);
	  COL_TRI(279, 281, 54);
	  COL_TRI(279, 54, 282);
	  COL_TRI(279, 282, 280);
	  COL_TRI(279, 280, 278);
	  COL_TRI(226, 283, 60);
	  COL_TRI(283, 65, 60);
	  COL_TRI(283, 57, 65);
	  COL_TRI(226, 60, 291);
	  COL_TRI(56, 35, 65);
	  COL_TRI(56, 65, 57);
	  COL_TRI(168, 100, 162);
	  COL_TRI(59, 285, 284);
	  COL_TRI(59, 284, 115);
	  COL_TRI(116, 295, 104);
	  COL_TRI(116, 69, 295);
	  COL_TRI(116, 294, 69);
	  COL_TRI(100, 168, 169);
	  COL_TRI(100, 99, 162);
	  COL_TRI(100, 169, 334);
	  COL_TRI(169, 179, 334);
	  COL_TRI(225, 288, 114);
	  COL_TRI(288, 225, 287);
	  COL_TRI(537, 288, 287);
	  COL_TRI(174, 450, 371);
	  COL_TRI(174, 375, 450);
	  COL_TRI(375, 433, 450);
	  COL_TRI(361, 433, 375);
	  COL_TRI(156, 152, 361);
	  COL_TRI(156, 365, 152);
	  COL_TRI(361, 152, 433);
	  COL_TRI(650, 177, 361);
	  COL_TRI(650, 176, 177);
	  COL_TRI(531, 529, 392);
	  COL_TRI(529, 187, 392);
	  COL_TRI(392, 221, 531);
	  COL_TRI(221, 532, 531);
	  COL_TRI(221, 187, 532);
	  COL_TRI(80, 81, 79);
	  COL_TRI(532, 187, 533);
	  COL_TRI(529, 533, 187);
	  COL_TRI(109, 111, 658);
	  COL_TRI(111, 108, 658);
	  COL_TRI(108, 105, 658);
	  COL_TRI(110, 109, 658);
	  COL_TRI(107, 110, 658);
	  COL_TRI(105, 107, 658);
	  COL_TRI(197, 193, 383);
	  COL_TRI(386, 197, 383);
	  COL_TRI(191, 319, 103);
	  COL_TRI(385, 196, 210);
	  COL_TRI(385, 319, 196);
	  COL_TRI(210, 196, 194);
	  COL_TRI(213, 210, 194);
	  COL_TRI(187, 538, 392);
	  COL_TRI(538, 227, 392);
	  COL_TRI(386, 227, 538);
	  COL_TRI(397, 395, 229);
	  COL_TRI(229, 231, 397);
	  COL_TRI(212, 207, 232);
	  COL_TRI(212, 232, 389);
	  COL_TRI(197, 386, 538);
	  COL_TRI(659, 649, 648);
	  COL_TRI(659, 660, 649);
	  COL_TRI_INIT(SURFACE_VERTICAL_WIND, 2);
	  COL_TRI(661, 662, 663);
	  COL_TRI(661, 663, 664);
	  COL_TRI_INIT(SURFACE_NOISE_VERY_SLIPPERY, 15);
	  COL_TRI(617, 124, 125);
	  COL_TRI(618, 340, 617);
	  COL_TRI(124, 617, 340);
	  COL_TRI(125, 467, 617);
	  COL_TRI(183, 217, 378);
	  COL_TRI(183, 181, 618);
	  COL_TRI(183, 618, 16);
	  COL_TRI(217, 183, 16);
	  COL_TRI(16, 467, 471);
	  COL_TRI(16, 617, 467);
	  COL_TRI(16, 618, 617);
	  COL_TRI(471, 326, 101);
	  COL_TRI(16, 471, 101);
	  COL_TRI(340, 618, 128);
	  COL_TRI(618, 181, 128);
	  COL_TRI_INIT(SURFACE_NO_CAM_COLLISION, 15);
	  COL_TRI(611, 311, 138);
	  COL_TRI(606, 337, 607);
	  COL_TRI(606, 353, 337);
	  COL_TRI(606, 424, 353);
	  COL_TRI(608, 607, 337);
	  COL_TRI(609, 335, 610);
	  COL_TRI(609, 336, 335);
	  COL_TRI(350, 611, 612);
	  COL_TRI(611, 350, 311);
	  COL_TRI(352, 613, 601);
	  COL_TRI(613, 351, 615);
	  COL_TRI(613, 352, 351);
	  COL_TRI(614, 615, 351);
	  COL_TRI(333, 610, 335);
	  COL_TRI(336, 609, 616);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(21);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start,       /*pos*/ -1512,  2560, -2305, /*yaw*/ 100); // unused, probably an early way to set initial position
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03,     /*pos*/  -409,  2765, -1637, /*yaw*/   0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_04,     /*pos*/  2355, -4095,  4096, /*yaw*/   0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_05,     /*pos*/ -4210, -1446,  1874, /*yaw*/   0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_05,     /*pos*/  2560,  2560, -1023, /*yaw*/   0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_06,     /*pos*/  -818,   102,  2048, /*yaw*/   0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_07,     /*pos*/  -511, -3071, -3583, /*yaw*/   0);
	  SPECIAL_OBJECT(/*preset*/ special_snow_tree,        /*pos*/ -5201, -1740,  2994);
	  SPECIAL_OBJECT(/*preset*/ special_snow_tree,        /*pos*/  1989, -4607,  4949);
	  SPECIAL_OBJECT(/*preset*/ special_snow_tree,        /*pos*/  1248, -4607,  5474);
	  SPECIAL_OBJECT(/*preset*/ special_snow_tree,        /*pos*/ -5508, -1740,  4148);
	  SPECIAL_OBJECT(/*preset*/ special_snow_tree,        /*pos*/ -4576, -1740,  4814);
	  SPECIAL_OBJECT(/*preset*/ special_snow_tree,        /*pos*/  -488,  2560, -2305);
	  SPECIAL_OBJECT(/*preset*/ special_snow_tree,        /*pos*/ -5892, -1740,   811);
	  SPECIAL_OBJECT(/*preset*/ special_snow_tree,        /*pos*/ -3748, -4607,  4464);
	  SPECIAL_OBJECT(/*preset*/ special_snow_tree,        /*pos*/  2237,  2560, -1630);
	  SPECIAL_OBJECT(/*preset*/ special_snow_tree,        /*pos*/  2885,  2560, -1638);
	  SPECIAL_OBJECT(/*preset*/ special_snow_tree,        /*pos*/ -1146, -3583,  5919);
	  SPECIAL_OBJECT(/*preset*/ special_snow_tree,        /*pos*/ -1768,  2560, -1793);
	  SPECIAL_OBJECT(/*preset*/ special_snow_tree,        /*pos*/ -3443,   807, -2713);
	  SPECIAL_OBJECT_WITH_YAW_AND_PARAM(/*preset*/ special_wooden_door_warp, /*pos*/  2464, -4607,  4302, /*yaw*/ 158, /*bhvParam2*/ 20);
	  COL_WATER_BOX_INIT(1);
	  COL_WATER_BOX(0, 3137, 4228, 3925, 4945, -4638);
	  COL_END();
	}

	function ccm_seg7_area_2_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x2C4);
	  COL_VERTEX(8192, -8191, -8191);
	  COL_VERTEX(-8191, -8191, -8191);
	  COL_VERTEX(-8191, -8191, 8192);
	  COL_VERTEX(8192, -8191, 8192);
	  COL_VERTEX(-5477, -4812, -7679);
	  COL_VERTEX(-5682, -4812, -7372);
	  COL_VERTEX(-5682, -4812, -6450);
	  COL_VERTEX(-5477, -4812, -6450);
	  COL_VERTEX(-6706, -4812, -7679);
	  COL_VERTEX(-6706, -4812, -7372);
	  COL_VERTEX(-7576, -5836, -6450);
	  COL_VERTEX(-5682, -5836, -7372);
	  COL_VERTEX(-7576, -5836, -7372);
	  COL_VERTEX(-5682, -5836, -6450);
	  COL_VERTEX(-6296, -5836, -6450);
	  COL_VERTEX(-6706, -5836, -6143);
	  COL_VERTEX(-6296, -5836, -6143);
	  COL_VERTEX(-6706, -5836, -6450);
	  COL_VERTEX(-6348, 6656, -5529);
	  COL_VERTEX(-5119, 6656, -6553);
	  COL_VERTEX(-5119, 6656, -5529);
	  COL_VERTEX(-5119, 6656, -6757);
	  COL_VERTEX(-6348, 6656, -6757);
	  COL_VERTEX(-5119, 6656, -5733);
	  COL_VERTEX(-4709, 6656, -5733);
	  COL_VERTEX(-4709, 6656, -6553);
	  COL_VERTEX(-6338, -6074, -5800);
	  COL_VERTEX(-6614, -6074, -5800);
	  COL_VERTEX(-7167, -6112, -6143);
	  COL_VERTEX(-7167, -6074, -5800);
	  COL_VERTEX(-6338, -5860, -3876);
	  COL_VERTEX(-6614, -5860, -3876);
	  COL_VERTEX(-6706, -6112, -6143);
	  COL_VERTEX(-6296, -6112, -6143);
	  COL_VERTEX(-5785, -6112, -6143);
	  COL_VERTEX(-5785, -6074, -5800);
	  COL_VERTEX(-6061, -5830, -3600);
	  COL_VERTEX(-6061, -5860, -3876);
	  COL_VERTEX(-6891, -5830, -3600);
	  COL_VERTEX(-6891, -5860, -3876);
	  COL_VERTEX(-5785, -5830, -3600);
	  COL_VERTEX(-5785, -5799, -3326);
	  COL_VERTEX(-7167, -5830, -3600);
	  COL_VERTEX(-6911, -5799, -3326);
	  COL_VERTEX(-6092, -5799, -3326);
	  COL_VERTEX(-6061, -5553, -3600);
	  COL_VERTEX(-6891, -5553, -3600);
	  COL_VERTEX(-6338, -5584, -3876);
	  COL_VERTEX(-6614, -5584, -3876);
	  COL_VERTEX(-7167, -5523, -3326);
	  COL_VERTEX(-6891, -5584, -3876);
	  COL_VERTEX(-6338, -5798, -5800);
	  COL_VERTEX(-7167, -5836, -6143);
	  COL_VERTEX(-7167, -5799, -3326);
	  COL_VERTEX(-5785, -5523, -3326);
	  COL_VERTEX(-5785, -5553, -3600);
	  COL_VERTEX(-6061, -5584, -3876);
	  COL_VERTEX(-6092, -5523, -3326);
	  COL_VERTEX(-7167, -5553, -3600);
	  COL_VERTEX(-6911, -5523, -3326);
	  COL_VERTEX(-6614, -5798, -5800);
	  COL_VERTEX(-5785, -5836, -6143);
	  COL_VERTEX(-5785, -5798, -5800);
	  COL_VERTEX(-7167, -5798, -5800);
	  COL_VERTEX(-7576, -5600, -6716);
	  COL_VERTEX(-7576, -5703, -6716);
	  COL_VERTEX(-7576, -5703, -6819);
	  COL_VERTEX(-7576, -5600, -6819);
	  COL_VERTEX(-5254, 1685, -284);
	  COL_VERTEX(-4472, 1685, -284);
	  COL_VERTEX(-4450, 1894, -861);
	  COL_VERTEX(-5269, 1894, -861);
	  COL_VERTEX(-5080, -727, 6150);
	  COL_VERTEX(-4896, -776, 6150);
	  COL_VERTEX(-3221, 1741, -531);
	  COL_VERTEX(-4454, 2005, -755);
	  COL_VERTEX(-3212, 1741, -1352);
	  COL_VERTEX(-4030, 1843, -1600);
	  COL_VERTEX(-5350, 2048, -1761);
	  COL_VERTEX(-6324, -1569, 3246);
	  COL_VERTEX(-6325, -4210, -6450);
	  COL_VERTEX(-6251, -1496, 3246);
	  COL_VERTEX(-6424, -4237, -6450);
	  COL_VERTEX(-6424, -1595, 3246);
	  COL_VERTEX(-6245, -5375, -6450);
	  COL_VERTEX(-6366, -1528, 3834);
	  COL_VERTEX(-6464, -1554, 3821);
	  COL_VERTEX(-6293, -1455, 3844);
	  COL_VERTEX(-6524, -1569, 3246);
	  COL_VERTEX(-6563, -1528, 3808);
	  COL_VERTEX(-6597, -1496, 3246);
	  COL_VERTEX(-6706, -3839, -6450);
	  COL_VERTEX(-6635, -1455, 3799);
	  COL_VERTEX(-6623, -1396, 3246);
	  COL_VERTEX(-6662, -1355, 3795);
	  COL_VERTEX(-6597, -1297, 3246);
	  COL_VERTEX(-6524, -3865, -6450);
	  COL_VERTEX(-6635, -1256, 3799);
	  COL_VERTEX(-6524, -1224, 3246);
	  COL_VERTEX(-6563, -1183, 3808);
	  COL_VERTEX(-6424, -1197, 3246);
	  COL_VERTEX(-6325, -3865, -6450);
	  COL_VERTEX(-6464, -1156, 3821);
	  COL_VERTEX(-6324, -1224, 3246);
	  COL_VERTEX(-5477, -3839, -6450);
	  COL_VERTEX(-6366, -1183, 3834);
	  COL_VERTEX(-6251, -1297, 3246);
	  COL_VERTEX(-6293, -1256, 3844);
	  COL_VERTEX(-6225, -1396, 3246);
	  COL_VERTEX(-6252, -4137, -6450);
	  COL_VERTEX(-6267, -1355, 3847);
	  COL_VERTEX(-5239, -642, 6453);
	  COL_VERTEX(-5115, -770, 6486);
	  COL_VERTEX(-5343, -692, 6743);
	  COL_VERTEX(-5238, -813, 6804);
	  COL_VERTEX(-4946, -817, 6531);
	  COL_VERTEX(-5215, -592, 6150);
	  COL_VERTEX(-5094, -858, 6887);
	  COL_VERTEX(-4777, -770, 6577);
	  COL_VERTEX(-4712, -727, 6150);
	  COL_VERTEX(-4577, -592, 6150);
	  COL_VERTEX(-4950, -813, 6970);
	  COL_VERTEX(-4653, -642, 6610);
	  COL_VERTEX(-4608, -467, 6622);
	  COL_VERTEX(-4527, -408, 6150);
	  COL_VERTEX(-4844, -692, 7031);
	  COL_VERTEX(-4653, -292, 6610);
	  COL_VERTEX(-4577, -223, 6150);
	  COL_VERTEX(-4805, -525, 7053);
	  COL_VERTEX(-4712, -88, 6150);
	  COL_VERTEX(-4777, -164, 6577);
	  COL_VERTEX(-4844, -359, 7031);
	  COL_VERTEX(-4896, -39, 6150);
	  COL_VERTEX(-4946, -117, 6531);
	  COL_VERTEX(-4950, -237, 6970);
	  COL_VERTEX(-5115, -164, 6486);
	  COL_VERTEX(-5080, -88, 6150);
	  COL_VERTEX(-5094, -193, 6887);
	  COL_VERTEX(-5239, -292, 6453);
	  COL_VERTEX(-5215, -223, 6150);
	  COL_VERTEX(-5238, -237, 6804);
	  COL_VERTEX(-5265, -408, 6150);
	  COL_VERTEX(-5285, -467, 6441);
	  COL_VERTEX(-5343, -359, 6743);
	  COL_VERTEX(-5382, -525, 6721);
	  COL_VERTEX(-5521, -741, 6999);
	  COL_VERTEX(-5440, -857, 7081);
	  COL_VERTEX(-5328, -899, 7192);
	  COL_VERTEX(-5216, -857, 7304);
	  COL_VERTEX(-5134, -741, 7386);
	  COL_VERTEX(-5104, -583, 7416);
	  COL_VERTEX(-5134, -425, 7386);
	  COL_VERTEX(-5216, -309, 7304);
	  COL_VERTEX(-5328, -267, 7192);
	  COL_VERTEX(-5440, -309, 7081);
	  COL_VERTEX(-5521, -425, 6999);
	  COL_VERTEX(-5551, -583, 6969);
	  COL_VERTEX(-5763, -790, 7202);
	  COL_VERTEX(-5708, -900, 7297);
	  COL_VERTEX(-5633, -940, 7427);
	  COL_VERTEX(-5558, -900, 7557);
	  COL_VERTEX(-5503, -790, 7652);
	  COL_VERTEX(-5483, -640, 7687);
	  COL_VERTEX(-5503, -490, 7652);
	  COL_VERTEX(-5558, -380, 7557);
	  COL_VERTEX(-5633, -339, 7427);
	  COL_VERTEX(-5708, -380, 7297);
	  COL_VERTEX(-5763, -490, 7202);
	  COL_VERTEX(-5783, -640, 7167);
	  COL_VERTEX(-6053, -838, 7335);
	  COL_VERTEX(-6026, -943, 7436);
	  COL_VERTEX(-5989, -981, 7574);
	  COL_VERTEX(-5952, -943, 7712);
	  COL_VERTEX(-5925, -838, 7813);
	  COL_VERTEX(-5915, -696, 7850);
	  COL_VERTEX(-5925, -553, 7813);
	  COL_VERTEX(-5952, -449, 7712);
	  COL_VERTEX(-5989, -410, 7574);
	  COL_VERTEX(-6026, -449, 7436);
	  COL_VERTEX(-6053, -553, 7335);
	  COL_VERTEX(-6371, -886, 7390);
	  COL_VERTEX(-6371, -986, 7489);
	  COL_VERTEX(-6371, -1022, 7624);
	  COL_VERTEX(-6371, -986, 7760);
	  COL_VERTEX(-6371, -751, 7895);
	  COL_VERTEX(-6371, -615, 7859);
	  COL_VERTEX(-6371, -516, 7760);
	  COL_VERTEX(-6371, -480, 7624);
	  COL_VERTEX(-6371, -516, 7489);
	  COL_VERTEX(-6063, -696, 7299);
	  COL_VERTEX(-6371, -615, 7390);
	  COL_VERTEX(-6695, -934, 7359);
	  COL_VERTEX(-6719, -1028, 7450);
	  COL_VERTEX(-6752, -1063, 7574);
	  COL_VERTEX(-6371, -886, 7859);
	  COL_VERTEX(-6786, -1028, 7698);
	  COL_VERTEX(-6819, -805, 7823);
	  COL_VERTEX(-6810, -677, 7789);
	  COL_VERTEX(-6786, -582, 7698);
	  COL_VERTEX(-6752, -548, 7574);
	  COL_VERTEX(-6719, -582, 7450);
	  COL_VERTEX(-6695, -677, 7359);
	  COL_VERTEX(-6371, -751, 7353);
	  COL_VERTEX(-7002, -982, 7243);
	  COL_VERTEX(-7047, -1071, 7321);
	  COL_VERTEX(-7108, -1104, 7427);
	  COL_VERTEX(-7169, -1071, 7533);
	  COL_VERTEX(-6810, -934, 7789);
	  COL_VERTEX(-7230, -859, 7639);
	  COL_VERTEX(-7214, -737, 7610);
	  COL_VERTEX(-7169, -647, 7533);
	  COL_VERTEX(-7108, -615, 7427);
	  COL_VERTEX(-7047, -647, 7321);
	  COL_VERTEX(-7002, -737, 7243);
	  COL_VERTEX(-6686, -805, 7325);
	  COL_VERTEX(-7271, -1029, 7050);
	  COL_VERTEX(-7331, -1114, 7110);
	  COL_VERTEX(-7413, -1145, 7192);
	  COL_VERTEX(-7495, -1114, 7275);
	  COL_VERTEX(-7214, -982, 7610);
	  COL_VERTEX(-7578, -912, 7357);
	  COL_VERTEX(-7556, -796, 7335);
	  COL_VERTEX(-7495, -711, 7275);
	  COL_VERTEX(-7413, -680, 7192);
	  COL_VERTEX(-7331, -711, 7110);
	  COL_VERTEX(-6986, -859, 7215);
	  COL_VERTEX(-7271, -796, 7050);
	  COL_VERTEX(-7482, -1075, 6791);
	  COL_VERTEX(-7552, -1156, 6832);
	  COL_VERTEX(-7648, -1186, 6887);
	  COL_VERTEX(-7556, -1029, 7335);
	  COL_VERTEX(-7743, -1156, 6942);
	  COL_VERTEX(-7839, -965, 6997);
	  COL_VERTEX(-7813, -855, 6983);
	  COL_VERTEX(-7743, -774, 6942);
	  COL_VERTEX(-7648, -744, 6887);
	  COL_VERTEX(-7552, -774, 6832);
	  COL_VERTEX(-7482, -855, 6791);
	  COL_VERTEX(-7249, -912, 7028);
	  COL_VERTEX(-7620, -1122, 6484);
	  COL_VERTEX(-7694, -1199, 6504);
	  COL_VERTEX(-7795, -1227, 6531);
	  COL_VERTEX(-7896, -1199, 6559);
	  COL_VERTEX(-7813, -1075, 6983);
	  COL_VERTEX(-7997, -1017, 6586);
	  COL_VERTEX(-7970, -912, 6578);
	  COL_VERTEX(-7896, -835, 6559);
	  COL_VERTEX(-7795, -807, 6531);
	  COL_VERTEX(-7694, -835, 6504);
	  COL_VERTEX(-7620, -912, 6484);
	  COL_VERTEX(-7456, -965, 6777);
	  COL_VERTEX(-7673, -1168, 6150);
	  COL_VERTEX(-7746, -1241, 6150);
	  COL_VERTEX(-7845, -1268, 6150);
	  COL_VERTEX(-7945, -1241, 6150);
	  COL_VERTEX(-7970, -1122, 6578);
	  COL_VERTEX(-8044, -1068, 6150);
	  COL_VERTEX(-8018, -969, 6150);
	  COL_VERTEX(-7945, -896, 6150);
	  COL_VERTEX(-7845, -869, 6150);
	  COL_VERTEX(-7746, -896, 6150);
	  COL_VERTEX(-7592, -1017, 6477);
	  COL_VERTEX(-7673, -969, 6150);
	  COL_VERTEX(-7634, -1209, 5764);
	  COL_VERTEX(-7704, -1282, 5745);
	  COL_VERTEX(-7801, -1309, 5720);
	  COL_VERTEX(-8018, -1168, 6150);
	  COL_VERTEX(-7897, -1282, 5694);
	  COL_VERTEX(-7993, -1109, 5668);
	  COL_VERTEX(-7967, -1010, 5675);
	  COL_VERTEX(-7897, -937, 5694);
	  COL_VERTEX(-7801, -910, 5720);
	  COL_VERTEX(-7704, -937, 5745);
	  COL_VERTEX(-7646, -1068, 6150);
	  COL_VERTEX(-7608, -1109, 5771);
	  COL_VERTEX(-7458, -1250, 5455);
	  COL_VERTEX(-7520, -1323, 5417);
	  COL_VERTEX(-7605, -1350, 5364);
	  COL_VERTEX(-7967, -1209, 5675);
	  COL_VERTEX(-7751, -1250, 5274);
	  COL_VERTEX(-7774, -1150, 5260);
	  COL_VERTEX(-7751, -1051, 5274);
	  COL_VERTEX(-7689, -978, 5312);
	  COL_VERTEX(-7605, -951, 5364);
	  COL_VERTEX(-7634, -1010, 5764);
	  COL_VERTEX(-7435, -1150, 5469);
	  COL_VERTEX(-7208, -1291, 5178);
	  COL_VERTEX(-7265, -1364, 5133);
	  COL_VERTEX(-7689, -1323, 5312);
	  COL_VERTEX(-7344, -1391, 5072);
	  COL_VERTEX(-7422, -1364, 5011);
	  COL_VERTEX(-7480, -1291, 4966);
	  COL_VERTEX(-7480, -1092, 4966);
	  COL_VERTEX(-7422, -1019, 5011);
	  COL_VERTEX(-7520, -978, 5417);
	  COL_VERTEX(-7344, -992, 5072);
	  COL_VERTEX(-7265, -1019, 5133);
	  COL_VERTEX(-7458, -1051, 5455);
	  COL_VERTEX(-7208, -1092, 5178);
	  COL_VERTEX(-7187, -1191, 5195);
	  COL_VERTEX(-6947, -1332, 4930);
	  COL_VERTEX(-6999, -1405, 4879);
	  COL_VERTEX(-7071, -1432, 4809);
	  COL_VERTEX(-7501, -1191, 4949);
	  COL_VERTEX(-7194, -1332, 4689);
	  COL_VERTEX(-7194, -1133, 4689);
	  COL_VERTEX(-7142, -1060, 4740);
	  COL_VERTEX(-7071, -1033, 4809);
	  COL_VERTEX(-6947, -1133, 4930);
	  COL_VERTEX(-7142, -1405, 4740);
	  COL_VERTEX(-7213, -1232, 4670);
	  COL_VERTEX(-6999, -1060, 4879);
	  COL_VERTEX(-6928, -1232, 4948);
	  COL_VERTEX(-6743, -1446, 4638);
	  COL_VERTEX(-6690, -1373, 4689);
	  COL_VERTEX(-6814, -1472, 4568);
	  COL_VERTEX(-6885, -1446, 4499);
	  COL_VERTEX(-6937, -1373, 4448);
	  COL_VERTEX(-6957, -1273, 4429);
	  COL_VERTEX(-6763, -1314, 4158);
	  COL_VERTEX(-6937, -1174, 4448);
	  COL_VERTEX(-6885, -1101, 4499);
	  COL_VERTEX(-6814, -1074, 4568);
	  COL_VERTEX(-6743, -1101, 4638);
	  COL_VERTEX(-6690, -1174, 4689);
	  COL_VERTEX(-6671, -1273, 4707);
	  COL_VERTEX(-6440, -1215, 4341);
	  COL_VERTEX(-6417, -1314, 4355);
	  COL_VERTEX(-6440, -1414, 4341);
	  COL_VERTEX(-6503, -1487, 4305);
	  COL_VERTEX(-6590, -1513, 4256);
	  COL_VERTEX(-6676, -1487, 4207);
	  COL_VERTEX(-6740, -1414, 4171);
	  COL_VERTEX(-6740, -1215, 4171);
	  COL_VERTEX(-6676, -1142, 4207);
	  COL_VERTEX(-6590, -1115, 4256);
	  COL_VERTEX(-6503, -1142, 4305);
	  COL_VERTEX(-5438, 2157, -1709);
	  COL_VERTEX(-5781, 2310, -2989);
	  COL_VERTEX(-5269, 2619, -861);
	  COL_VERTEX(-4454, 2619, -755);
	  COL_VERTEX(-4773, 2928, -2093);
	  COL_VERTEX(-5438, 2771, -1709);
	  COL_VERTEX(-5254, 2619, -284);
	  COL_VERTEX(-3221, 1849, -422);
	  COL_VERTEX(-4472, 2619, -284);
	  COL_VERTEX(-3221, 2464, -422);
	  COL_VERTEX(-6296, -5426, -6501);
	  COL_VERTEX(-6706, -5426, -6501);
	  COL_VERTEX(-6245, -5836, -6501);
	  COL_VERTEX(-6245, -5836, -6450);
	  COL_VERTEX(-6757, -5375, -6450);
	  COL_VERTEX(-7576, -5426, -6450);
	  COL_VERTEX(-7576, -5836, -6911);
	  COL_VERTEX(-5477, -3839, -7679);
	  COL_VERTEX(-8191, -5836, -7372);
	  COL_VERTEX(-8191, -5068, -7372);
	  COL_VERTEX(-6706, -5836, -7372);
	  COL_VERTEX(-7576, -5426, -7372);
	  COL_VERTEX(-7679, -5580, -6911);
	  COL_VERTEX(-7576, -5836, -7065);
	  COL_VERTEX(-7679, -5836, -6911);
	  COL_VERTEX(-6706, -5426, -6143);
	  COL_VERTEX(-6296, -5426, -6143);
	  COL_VERTEX(-6706, -5836, -6501);
	  COL_VERTEX(-5784, -5836, -6143);
	  COL_VERTEX(-5784, -4198, -3326);
	  COL_VERTEX(-5119, 7322, -6553);
	  COL_VERTEX(-5938, 7680, -6245);
	  COL_VERTEX(-5119, 7680, -5529);
	  COL_VERTEX(-5119, 7680, -6757);
	  COL_VERTEX(-4709, 7322, -6553);
	  COL_VERTEX(-4709, 7322, -5733);
	  COL_VERTEX(-6348, 7680, -5529);
	  COL_VERTEX(-6348, 7680, -6757);
	  COL_VERTEX(-5938, 8038, -6041);
	  COL_VERTEX(-5733, 8038, -6245);
	  COL_VERTEX(-5938, 8038, -6245);
	  COL_VERTEX(6253, -2355, 1594);
	  COL_VERTEX(6253, -2378, 1700);
	  COL_VERTEX(6253, -2321, 1504);
	  COL_VERTEX(6255, -1170, -303);
	  COL_VERTEX(6255, -1144, -381);
	  COL_VERTEX(6253, -2992, 1700);
	  COL_VERTEX(6256, -2764, 5258);
	  COL_VERTEX(6150, -3470, 5664);
	  COL_VERTEX(-4450, 1894, -5118);
	  COL_VERTEX(-4450, 2509, -5118);
	  COL_VERTEX(-5350, 2355, -4218);
	  COL_VERTEX(-1902, -4300, 294);
	  COL_VERTEX(-1902, -4914, 294);
	  COL_VERTEX(-1864, -8191, 199);
	  COL_VERTEX(-158, -4709, 1919);
	  COL_VERTEX(-158, -4095, 1919);
	  COL_VERTEX(-4610, 2304, -3799);
	  COL_VERTEX(-4610, 1690, -3799);
	  COL_VERTEX(-4829, 2150, -2983);
	  COL_VERTEX(-4617, 1997, -2191);
	  COL_VERTEX(-4617, 1382, -2191);
	  COL_VERTEX(-5679, 2202, -2989);
	  COL_VERTEX(-4030, 1229, -1600);
	  COL_VERTEX(-3212, 1126, -1352);
	  COL_VERTEX(-254, 410, -1541);
	  COL_VERTEX(-254, 1024, -1541);
	  COL_VERTEX(1218, 154, -1980);
	  COL_VERTEX(1218, 768, -1980);
	  COL_VERTEX(-173, 1024, -719);
	  COL_VERTEX(2293, -50, -3038);
	  COL_VERTEX(2293, 563, -3038);
	  COL_VERTEX(2598, -255, -4354);
	  COL_VERTEX(2625, -171, -5167);
	  COL_VERTEX(2625, 442, -5167);
	  COL_VERTEX(3466, 287, -5105);
	  COL_VERTEX(2840, 434, -5585);
	  COL_VERTEX(6239, -821, -5279);
	  COL_VERTEX(6253, -1738, -870);
	  COL_VERTEX(6253, -1123, -870);
	  COL_VERTEX(7072, -1123, -870);
	  COL_VERTEX(7075, -1134, -469);
	  COL_VERTEX(6205, -811, -5368);
	  COL_VERTEX(6205, -197, -5368);
	  COL_VERTEX(6121, -797, -5437);
	  COL_VERTEX(6121, -182, -5437);
	  COL_VERTEX(6239, -206, -5279);
	  COL_VERTEX(5957, -767, -5473);
	  COL_VERTEX(5957, -153, -5473);
	  COL_VERTEX(4059, -437, -5372);
	  COL_VERTEX(4059, 176, -5372);
	  COL_VERTEX(4058, 347, -5964);
	  COL_VERTEX(3736, 236, -5322);
	  COL_VERTEX(3736, -378, -5322);
	  COL_VERTEX(3606, 263, -5277);
	  COL_VERTEX(3503, -336, -5219);
	  COL_VERTEX(3503, 278, -5219);
	  COL_VERTEX(480, 3686, -622);
	  COL_VERTEX(480, 3072, -622);
	  COL_VERTEX(2106, 3891, -872);
	  COL_VERTEX(2106, 3471, -872);
	  COL_VERTEX(4545, 4276, -2227);
	  COL_VERTEX(4545, 3662, -2227);
	  COL_VERTEX(5839, 3746, -3683);
	  COL_VERTEX(5188, 4715, -5317);
	  COL_VERTEX(5985, 3839, -5088);
	  COL_VERTEX(5731, 3945, -5260);
	  COL_VERTEX(5731, 4559, -5260);
	  COL_VERTEX(6128, 3761, -4766);
	  COL_VERTEX(6135, 3739, -4325);
	  COL_VERTEX(2106, 4086, -872);
	  COL_VERTEX(-1440, -4197, 1506);
	  COL_VERTEX(-2206, -4914, 1064);
	  COL_VERTEX(-1440, -4812, 1506);
	  COL_VERTEX(-2206, -4300, 1064);
	  COL_VERTEX(-871, -4197, 889);
	  COL_VERTEX(-173, -4709, 2895);
	  COL_VERTEX(-173, -4095, 2895);
	  COL_VERTEX(-448, -4607, 3720);
	  COL_VERTEX(-448, -3993, 3720);
	  COL_VERTEX(-448, -4505, 4370);
	  COL_VERTEX(-448, -3890, 4370);
	  COL_VERTEX(-165, -4402, 4890);
	  COL_VERTEX(-165, -3788, 4890);
	  COL_VERTEX(342, -4300, 5245);
	  COL_VERTEX(342, -3685, 5245);
	  COL_VERTEX(-1268, -3849, 4579);
	  COL_VERTEX(4303, -3890, 6106);
	  COL_VERTEX(4303, -3276, 6106);
	  COL_VERTEX(5112, -3788, 6200);
	  COL_VERTEX(5112, -3173, 6200);
	  COL_VERTEX(5747, -3655, 6073);
	  COL_VERTEX(5747, -3040, 6073);
	  COL_VERTEX(5980, -3563, 5918);
	  COL_VERTEX(5980, -2948, 5918);
	  COL_VERTEX(5907, -3010, 6459);
	  COL_VERTEX(6150, -2856, 5664);
	  COL_VERTEX(6275, -2917, 6213);
	  COL_VERTEX(-295, 3533, -645);
	  COL_VERTEX(-797, 3379, -840);
	  COL_VERTEX(-1052, 3277, -1208);
	  COL_VERTEX(-1088, 3226, -1622);
	  COL_VERTEX(-897, 3185, -2121);
	  COL_VERTEX(-752, 3072, -2986);
	  COL_VERTEX(-1582, 2406, -2989);
	  COL_VERTEX(-1582, 3021, -2989);
	  COL_VERTEX(-1644, 2970, -3411);
	  COL_VERTEX(-1644, 2355, -3411);
	  COL_VERTEX(-1822, 2918, -3789);
	  COL_VERTEX(-847, 3021, -3625);
	  COL_VERTEX(-2412, 2150, -4379);
	  COL_VERTEX(-2412, 2765, -4379);
	  COL_VERTEX(-1093, 2970, -4218);
	  COL_VERTEX(-3215, 2611, -4597);
	  COL_VERTEX(-1992, 2816, -5118);
	  COL_VERTEX(-4020, 1843, -4385);
	  COL_VERTEX(-3221, 2662, -5447);
	  COL_VERTEX(-4020, 2458, -4385);
	  COL_VERTEX(-4604, -4709, -340);
	  COL_VERTEX(-5733, -4812, -363);
	  COL_VERTEX(-5726, -4812, 443);
	  COL_VERTEX(-5733, -4197, -363);
	  COL_VERTEX(-4679, -4709, 483);
	  COL_VERTEX(6528, -2825, 5834);
	  COL_VERTEX(6907, -2784, 6005);
	  COL_VERTEX(6571, -2856, 6509);
	  COL_VERTEX(6067, -2948, 6845);
	  COL_VERTEX(4028, -3276, 6885);
	  COL_VERTEX(6993, -206, -5375);
	  COL_VERTEX(7238, -133, -5406);
	  COL_VERTEX(6255, -1134, -469);
	  COL_VERTEX(-6911, -4965, -626);
	  COL_VERTEX(-5958, -4914, -553);
	  COL_VERTEX(-6594, -4863, 7);
	  COL_VERTEX(-991, -4095, 2759);
	  COL_VERTEX(6060, 8, -6014);
	  COL_VERTEX(3596, 420, -5926);
	  COL_VERTEX(4060, 569, -6198);
	  COL_VERTEX(3192, 427, -5831);
	  COL_VERTEX(3530, 638, -6134);
	  COL_VERTEX(3080, 576, -5912);
	  COL_VERTEX(-792, -3747, 5451);
	  COL_VERTEX(-4688, -4607, 585);
	  COL_VERTEX(-5725, -4668, 589);
	  COL_VERTEX(-7167, -4197, -3326);
	  COL_VERTEX(-7167, -8191, -3326);
	  COL_VERTEX(-5784, -8191, -3326);
	  COL_VERTEX(-1268, -3993, 3587);
	  COL_VERTEX(3412, 358, -4153);
	  COL_VERTEX(6454, -66, -5967);
	  COL_VERTEX(6792, -137, -5770);
	  COL_VERTEX(7075, -2764, 5366);
	  COL_VERTEX(1649, 768, -1238);
	  COL_VERTEX(3052, 563, -2654);
	  COL_VERTEX(2598, 358, -4354);
	  COL_VERTEX(5132, 4289, -1404);
	  COL_VERTEX(6168, 4665, -6160);
	  COL_VERTEX(3825, 5012, -5324);
	  COL_VERTEX(6707, 4565, -5611);
	  COL_VERTEX(5985, 4453, -5088);
	  COL_VERTEX(6978, 4508, -4924);
	  COL_VERTEX(6128, 4376, -4766);
	  COL_VERTEX(6135, 4354, -4325);
	  COL_VERTEX(6977, 4464, -4141);
	  COL_VERTEX(6582, 4457, -3145);
	  COL_VERTEX(5839, 4360, -3683);
	  COL_VERTEX(1023, 5580, -5324);
	  COL_VERTEX(-1196, 6023, -5324);
	  COL_VERTEX(1246, 5557, -5324);
	  COL_VERTEX(-4141, 6427, -6962);
	  COL_VERTEX(-4141, 6427, -5324);
	  COL_VERTEX(-4709, 6615, -5733);
	  COL_VERTEX(-1987, 6077, -6962);
	  COL_VERTEX(-1844, 6067, -6962);
	  COL_VERTEX(-6708, -4728, 110);
	  COL_VERTEX(-1864, -4197, 199);
	  COL_VERTEX(-1864, -3583, 199);
	  COL_VERTEX(-6708, -4197, 110);
	  COL_VERTEX(-4618, -3839, -185);
	  COL_VERTEX(-1959, -3429, 439);
	  COL_VERTEX(-7056, -4821, -626);
	  COL_VERTEX(-6911, -4197, -3326);
	  COL_VERTEX(-6092, -4197, -820);
	  COL_VERTEX(-7056, -4197, -626);
	  COL_VERTEX(-5958, -4197, -553);
	  COL_VERTEX(-4665, -3839, 328);
	  COL_VERTEX(-2149, -3429, 919);
	  COL_VERTEX(-4688, -3993, 585);
	  COL_VERTEX(-5725, -4117, 589);
	  COL_VERTEX(-3221, -8191, -531);
	  COL_VERTEX(-1844, -8191, -2);
	  COL_VERTEX(-4665, 1946, -2162);
	  COL_VERTEX(-5425, -8191, -4316);
	  COL_VERTEX(-5425, -8191, -8191);
	  COL_VERTEX(-4527, 4711, 6150);
	  COL_VERTEX(-5265, 4711, 6150);
	  COL_VERTEX(-5254, 4712, -284);
	  COL_VERTEX(8192, -8191, -8176);
	  COL_VERTEX(8192, 0, -8176);
	  COL_VERTEX(-5027, -8191, 8192);
	  COL_VERTEX(-2244, -3583, 1159);
	  COL_VERTEX(-4104, 2774, -1432);
	  COL_VERTEX(-5013, 3082, -2989);
	  COL_VERTEX(-5425, 3091, -4316);
	  COL_VERTEX(-1864, 6572, 199);
	  COL_VERTEX(-2198, -4399, 1042);
	  COL_VERTEX(-5425, 2476, -4316);
	  COL_VERTEX(-6524, -4210, -6450);
	  COL_VERTEX(-6597, -4137, -6450);
	  COL_VERTEX(-6225, -4038, -6450);
	  COL_VERTEX(-6624, -4038, -6450);
	  COL_VERTEX(-6706, -5375, -6450);
	  COL_VERTEX(-6597, -3938, -6450);
	  COL_VERTEX(-6424, -3839, -6450);
	  COL_VERTEX(-6252, -3938, -6450);
	  COL_VERTEX(-6706, -3839, -7679);
	  COL_VERTEX(-5781, 2925, -2989);
	  COL_VERTEX(-6757, -5375, -6501);
	  COL_VERTEX(-6757, -5836, -6501);
	  COL_VERTEX(-6245, -5375, -6501);
	  COL_VERTEX(-6296, -5836, -6501);
	  COL_VERTEX(-6757, -5836, -6450);
	  COL_VERTEX(-6706, -5221, -6450);
	  COL_VERTEX(-6706, -5221, -7372);
	  COL_VERTEX(-7679, -5836, -7065);
	  COL_VERTEX(-7576, -5580, -6911);
	  COL_VERTEX(-7576, -5580, -7065);
	  COL_VERTEX(-7679, -5836, -6450);
	  COL_VERTEX(-7679, -5836, -7372);
	  COL_VERTEX(-8191, -5836, -6450);
	  COL_VERTEX(-8191, -5068, -6450);
	  COL_VERTEX(-6706, -5221, -7679);
	  COL_VERTEX(-7679, -5580, -7065);
	  COL_VERTEX(-5784, -4197, -6143);
	  COL_VERTEX(-7167, -4197, -6143);
	  COL_VERTEX(-7167, -8191, -6143);
	  COL_VERTEX(-5784, -8191, -6143);
	  COL_VERTEX(-5119, 7322, -5733);
	  COL_VERTEX(-5733, 7680, -6245);
	  COL_VERTEX(-5733, 7680, -6041);
	  COL_VERTEX(-5938, 7680, -6041);
	  COL_VERTEX(-5733, 8038, -6041);
	  COL_VERTEX(6253, -2935, 1504);
	  COL_VERTEX(6253, -2969, 1594);
	  COL_VERTEX(6255, -1784, -303);
	  COL_VERTEX(6255, -1758, -381);
	  COL_VERTEX(6255, -1749, -469);
	  COL_VERTEX(6256, -3378, 5258);
	  COL_VERTEX(-5350, 1741, -4218);
	  COL_VERTEX(-871, -4812, 889);
	  COL_VERTEX(-4829, 1536, -2983);
	  COL_VERTEX(-4594, -3993, -442);
	  COL_VERTEX(2758, 515, -5574);
	  COL_VERTEX(3466, -327, -5105);
	  COL_VERTEX(6127, 239, -6281);
	  COL_VERTEX(6580, 124, -6127);
	  COL_VERTEX(6957, 0, -5855);
	  COL_VERTEX(3606, -350, -5277);
	  COL_VERTEX(-295, 2918, -645);
	  COL_VERTEX(2106, 3277, -872);
	  COL_VERTEX(2334, 3891, -78);
	  COL_VERTEX(-797, 2765, -840);
	  COL_VERTEX(531, 3686, 198);
	  COL_VERTEX(5188, 4101, -5317);
	  COL_VERTEX(5342, 4768, -6710);
	  COL_VERTEX(3825, 5012, -6962);
	  COL_VERTEX(1246, 5557, -6962);
	  COL_VERTEX(-979, -4095, 2171);
	  COL_VERTEX(-979, -4709, 2171);
	  COL_VERTEX(6764, 4506, -3013);
	  COL_VERTEX(2334, 4086, -78);
	  COL_VERTEX(0, -3685, 6009);
	  COL_VERTEX(5081, -3153, 6611);
	  COL_VERTEX(5050, -3102, 7021);
	  COL_VERTEX(-1052, 2662, -1208);
	  COL_VERTEX(-1088, 2611, -1622);
	  COL_VERTEX(-897, 2570, -2121);
	  COL_VERTEX(-752, 2458, -2986);
	  COL_VERTEX(-847, 2406, -3625);
	  COL_VERTEX(-1691, 3174, -2337);
	  COL_VERTEX(-1691, 2560, -2337);
	  COL_VERTEX(-1921, 3277, -1739);
	  COL_VERTEX(-1822, 2304, -3789);
	  COL_VERTEX(-3215, 1997, -4597);
	  COL_VERTEX(-4594, -4607, -442);
	  COL_VERTEX(-6092, -5017, -820);
	  COL_VERTEX(-2244, -4197, 1159);
	  COL_VERTEX(-459, 3584, 169);
	  COL_VERTEX(-1328, 3482, -167);
	  COL_VERTEX(-1849, 3379, -920);
	  COL_VERTEX(7075, -1144, -381);
	  COL_VERTEX(7074, -1170, -303);
	  COL_VERTEX(7072, -2321, 1504);
	  COL_VERTEX(7072, -2355, 1594);
	  COL_VERTEX(7072, -2378, 1700);
	  COL_VERTEX(-6092, -4198, -3326);
	  COL_VERTEX(6256, 4710, -6343);
	  COL_VERTEX(6945, 4659, -5784);
	  COL_VERTEX(7255, 4608, -4975);
	  COL_VERTEX(1023, 5580, -6962);
	  COL_VERTEX(7255, 4557, -4080);
	  COL_VERTEX(-1196, 6023, -6962);
	  COL_VERTEX(-1478, 6054, -6962);
	  COL_VERTEX(-1478, 6054, -5324);
	  COL_VERTEX(-1987, 6077, -5324);
	  COL_VERTEX(-4709, 6615, -6962);
	  COL_VERTEX(-4709, 6615, -5324);
	  COL_VERTEX(-4709, 6615, -6553);
	  COL_VERTEX(-1844, 6067, -5324);
	  COL_VERTEX(-3221, 1690, -531);
	  COL_VERTEX(-4665, -8191, -2162);
	  COL_VERTEX(-3221, -8191, -422);
	  COL_VERTEX(-5350, -8191, -4218);
	  COL_VERTEX(-3221, 6572, -422);
	  COL_VERTEX(-5350, 2304, -4218);
	  COL_VERTEX(-5425, 6572, -4316);
	  COL_VERTEX(5222, -8191, -8176);
	  COL_VERTEX(-5425, 6572, -8191);
	  COL_VERTEX(5222, 8192, -8176);
	  COL_VERTEX(-1844, 6572, -2);
	  COL_VERTEX(-5425, 8192, -8191);
	  COL_VERTEX(-4472, 4712, -284);
	  COL_VERTEX(5222, 0, -8176);
	  COL_VERTEX(8192, 8192, -8176);
	  COL_VERTEX(8192, 8192, 8192);
	  COL_VERTEX(-5027, 8192, 8192);
	  COL_VERTEX(-5027, 6572, 8192);
	  COL_VERTEX(-4104, 6572, -1432);
	  COL_VERTEX(-4773, 6572, -2093);
	  COL_VERTEX(-5013, 6572, -2989);
	  COL_VERTEX(-1901, -4402, 291);
	  COL_TRI_INIT(SURFACE_DEFAULT, 1107);
	  COL_TRI(64, 65, 66);
	  COL_TRI(64, 66, 67);
	  COL_TRI(68, 69, 70);
	  COL_TRI(71, 68, 70);
	  COL_TRI(68, 72, 73);
	  COL_TRI(69, 68, 73);
	  COL_TRI(74, 70, 75);
	  COL_TRI(74, 76, 70);
	  COL_TRI(82, 6, 13);
	  COL_TRI(70, 78, 71);
	  COL_TRI(78, 397, 399);
	  COL_TRI(79, 80, 83);
	  COL_TRI(80, 82, 83);
	  COL_TRI(81, 109, 80);
	  COL_TRI(81, 80, 79);
	  COL_TRI(80, 109, 6);
	  COL_TRI(82, 80, 6);
	  COL_TRI(83, 82, 88);
	  COL_TRI(82, 584, 88);
	  COL_TRI(89, 88, 90);
	  COL_TRI(85, 79, 83);
	  COL_TRI(85, 83, 86);
	  COL_TRI(86, 83, 88);
	  COL_TRI(87, 79, 85);
	  COL_TRI(87, 81, 79);
	  COL_TRI(88, 584, 585);
	  COL_TRI(84, 584, 82);
	  COL_TRI(84, 585, 584);
	  COL_TRI(88, 585, 90);
	  COL_TRI(86, 88, 89);
	  COL_TRI(90, 585, 587);
	  COL_TRI(91, 587, 585);
	  COL_TRI(84, 91, 585);
	  COL_TRI(90, 587, 93);
	  COL_TRI(89, 90, 92);
	  COL_TRI(92, 90, 93);
	  COL_TRI(93, 587, 589);
	  COL_TRI(91, 589, 587);
	  COL_TRI(93, 589, 95);
	  COL_TRI(94, 93, 95);
	  COL_TRI(92, 93, 94);
	  COL_TRI(95, 589, 96);
	  COL_TRI(96, 589, 91);
	  COL_TRI(95, 96, 98);
	  COL_TRI(97, 95, 98);
	  COL_TRI(94, 95, 97);
	  COL_TRI(102, 103, 105);
	  COL_TRI(98, 96, 590);
	  COL_TRI(91, 590, 96);
	  COL_TRI(98, 590, 100);
	  COL_TRI(99, 98, 100);
	  COL_TRI(97, 98, 99);
	  COL_TRI(100, 590, 101);
	  COL_TRI(101, 590, 104);
	  COL_TRI(100, 101, 103);
	  COL_TRI(99, 100, 102);
	  COL_TRI(102, 100, 103);
	  COL_TRI(103, 101, 591);
	  COL_TRI(104, 591, 101);
	  COL_TRI(103, 591, 106);
	  COL_TRI(105, 103, 106);
	  COL_TRI(110, 81, 87);
	  COL_TRI(106, 591, 586);
	  COL_TRI(104, 586, 591);
	  COL_TRI(106, 586, 108);
	  COL_TRI(105, 106, 107);
	  COL_TRI(107, 106, 108);
	  COL_TRI(108, 586, 109);
	  COL_TRI(7, 586, 104);
	  COL_TRI(109, 586, 7);
	  COL_TRI(108, 109, 81);
	  COL_TRI(107, 108, 110);
	  COL_TRI(110, 108, 81);
	  COL_TRI(7, 6, 109);
	  COL_TRI(118, 122, 120);
	  COL_TRI(111, 112, 72);
	  COL_TRI(112, 114, 115);
	  COL_TRI(112, 115, 73);
	  COL_TRI(72, 112, 73);
	  COL_TRI(113, 114, 112);
	  COL_TRI(111, 113, 112);
	  COL_TRI(114, 117, 115);
	  COL_TRI(115, 117, 118);
	  COL_TRI(73, 115, 119);
	  COL_TRI(115, 118, 119);
	  COL_TRI(116, 111, 72);
	  COL_TRI(117, 121, 118);
	  COL_TRI(118, 121, 122);
	  COL_TRI(119, 118, 120);
	  COL_TRI(120, 122, 124);
	  COL_TRI(121, 125, 122);
	  COL_TRI(122, 125, 123);
	  COL_TRI(122, 123, 124);
	  COL_TRI(123, 126, 127);
	  COL_TRI(124, 123, 127);
	  COL_TRI(123, 128, 126);
	  COL_TRI(125, 128, 123);
	  COL_TRI(126, 130, 129);
	  COL_TRI(127, 126, 129);
	  COL_TRI(126, 131, 130);
	  COL_TRI(128, 131, 126);
	  COL_TRI(129, 130, 132);
	  COL_TRI(130, 133, 132);
	  COL_TRI(131, 134, 130);
	  COL_TRI(130, 134, 133);
	  COL_TRI(132, 133, 136);
	  COL_TRI(133, 135, 136);
	  COL_TRI(134, 137, 133);
	  COL_TRI(133, 137, 135);
	  COL_TRI(135, 138, 139);
	  COL_TRI(136, 135, 139);
	  COL_TRI(135, 140, 138);
	  COL_TRI(137, 140, 135);
	  COL_TRI(138, 142, 141);
	  COL_TRI(139, 138, 141);
	  COL_TRI(140, 143, 138);
	  COL_TRI(138, 143, 142);
	  COL_TRI(141, 142, 116);
	  COL_TRI(142, 111, 116);
	  COL_TRI(143, 144, 142);
	  COL_TRI(142, 144, 111);
	  COL_TRI(144, 113, 111);
	  COL_TRI(114, 146, 117);
	  COL_TRI(145, 146, 114);
	  COL_TRI(113, 145, 114);
	  COL_TRI(117, 147, 121);
	  COL_TRI(146, 147, 117);
	  COL_TRI(121, 148, 125);
	  COL_TRI(147, 148, 121);
	  COL_TRI(148, 149, 125);
	  COL_TRI(125, 149, 128);
	  COL_TRI(149, 150, 128);
	  COL_TRI(128, 150, 131);
	  COL_TRI(131, 151, 134);
	  COL_TRI(150, 151, 131);
	  COL_TRI(151, 152, 134);
	  COL_TRI(134, 152, 137);
	  COL_TRI(152, 153, 137);
	  COL_TRI(137, 153, 140);
	  COL_TRI(153, 154, 140);
	  COL_TRI(140, 154, 143);
	  COL_TRI(154, 155, 143);
	  COL_TRI(143, 155, 144);
	  COL_TRI(144, 156, 113);
	  COL_TRI(155, 156, 144);
	  COL_TRI(156, 145, 113);
	  COL_TRI(145, 157, 146);
	  COL_TRI(157, 158, 146);
	  COL_TRI(146, 158, 147);
	  COL_TRI(158, 159, 147);
	  COL_TRI(147, 159, 148);
	  COL_TRI(148, 160, 149);
	  COL_TRI(159, 160, 148);
	  COL_TRI(149, 161, 150);
	  COL_TRI(160, 161, 149);
	  COL_TRI(150, 162, 151);
	  COL_TRI(161, 162, 150);
	  COL_TRI(162, 163, 151);
	  COL_TRI(151, 163, 152);
	  COL_TRI(163, 164, 152);
	  COL_TRI(152, 164, 153);
	  COL_TRI(153, 165, 154);
	  COL_TRI(164, 165, 153);
	  COL_TRI(154, 166, 155);
	  COL_TRI(165, 166, 154);
	  COL_TRI(168, 169, 157);
	  COL_TRI(166, 167, 155);
	  COL_TRI(155, 167, 156);
	  COL_TRI(167, 168, 156);
	  COL_TRI(156, 168, 145);
	  COL_TRI(168, 157, 145);
	  COL_TRI(169, 170, 158);
	  COL_TRI(157, 169, 158);
	  COL_TRI(158, 170, 159);
	  COL_TRI(170, 171, 159);
	  COL_TRI(159, 171, 160);
	  COL_TRI(171, 172, 160);
	  COL_TRI(160, 172, 161);
	  COL_TRI(172, 173, 161);
	  COL_TRI(161, 173, 162);
	  COL_TRI(162, 174, 163);
	  COL_TRI(173, 174, 162);
	  COL_TRI(163, 175, 164);
	  COL_TRI(174, 175, 163);
	  COL_TRI(175, 176, 164);
	  COL_TRI(164, 176, 165);
	  COL_TRI(176, 177, 165);
	  COL_TRI(165, 177, 166);
	  COL_TRI(166, 178, 167);
	  COL_TRI(177, 178, 166);
	  COL_TRI(167, 179, 168);
	  COL_TRI(178, 179, 167);
	  COL_TRI(168, 189, 169);
	  COL_TRI(179, 189, 168);
	  COL_TRI(170, 181, 171);
	  COL_TRI(180, 181, 170);
	  COL_TRI(169, 180, 170);
	  COL_TRI(171, 182, 172);
	  COL_TRI(181, 182, 171);
	  COL_TRI(189, 180, 169);
	  COL_TRI(172, 183, 173);
	  COL_TRI(182, 183, 172);
	  COL_TRI(183, 194, 173);
	  COL_TRI(173, 194, 184);
	  COL_TRI(173, 184, 174);
	  COL_TRI(174, 184, 175);
	  COL_TRI(175, 185, 176);
	  COL_TRI(184, 185, 175);
	  COL_TRI(185, 186, 176);
	  COL_TRI(176, 186, 177);
	  COL_TRI(186, 187, 177);
	  COL_TRI(177, 187, 178);
	  COL_TRI(187, 188, 178);
	  COL_TRI(178, 188, 179);
	  COL_TRI(188, 190, 179);
	  COL_TRI(179, 190, 189);
	  COL_TRI(189, 202, 180);
	  COL_TRI(190, 202, 189);
	  COL_TRI(180, 191, 181);
	  COL_TRI(191, 192, 181);
	  COL_TRI(181, 192, 182);
	  COL_TRI(192, 193, 182);
	  COL_TRI(182, 193, 183);
	  COL_TRI(202, 191, 180);
	  COL_TRI(183, 195, 194);
	  COL_TRI(193, 195, 183);
	  COL_TRI(194, 196, 184);
	  COL_TRI(194, 207, 196);
	  COL_TRI(195, 207, 194);
	  COL_TRI(184, 196, 185);
	  COL_TRI(196, 197, 185);
	  COL_TRI(185, 197, 186);
	  COL_TRI(197, 198, 186);
	  COL_TRI(186, 198, 187);
	  COL_TRI(187, 199, 188);
	  COL_TRI(198, 199, 187);
	  COL_TRI(188, 200, 190);
	  COL_TRI(199, 200, 188);
	  COL_TRI(200, 201, 190);
	  COL_TRI(190, 201, 202);
	  COL_TRI(201, 214, 202);
	  COL_TRI(202, 214, 191);
	  COL_TRI(192, 204, 193);
	  COL_TRI(203, 204, 192);
	  COL_TRI(191, 203, 192);
	  COL_TRI(204, 205, 193);
	  COL_TRI(193, 205, 195);
	  COL_TRI(214, 203, 191);
	  COL_TRI(205, 206, 195);
	  COL_TRI(195, 206, 207);
	  COL_TRI(206, 219, 207);
	  COL_TRI(207, 208, 196);
	  COL_TRI(207, 219, 208);
	  COL_TRI(196, 208, 197);
	  COL_TRI(197, 209, 198);
	  COL_TRI(208, 209, 197);
	  COL_TRI(209, 210, 198);
	  COL_TRI(198, 210, 199);
	  COL_TRI(210, 211, 199);
	  COL_TRI(199, 211, 200);
	  COL_TRI(200, 212, 201);
	  COL_TRI(211, 212, 200);
	  COL_TRI(212, 213, 201);
	  COL_TRI(201, 213, 214);
	  COL_TRI(213, 225, 214);
	  COL_TRI(214, 225, 203);
	  COL_TRI(204, 216, 205);
	  COL_TRI(215, 216, 204);
	  COL_TRI(203, 215, 204);
	  COL_TRI(205, 217, 206);
	  COL_TRI(216, 217, 205);
	  COL_TRI(225, 215, 203);
	  COL_TRI(206, 218, 219);
	  COL_TRI(217, 218, 206);
	  COL_TRI(218, 230, 219);
	  COL_TRI(219, 230, 220);
	  COL_TRI(219, 220, 208);
	  COL_TRI(208, 220, 209);
	  COL_TRI(209, 221, 210);
	  COL_TRI(220, 221, 209);
	  COL_TRI(221, 222, 210);
	  COL_TRI(210, 222, 211);
	  COL_TRI(222, 223, 211);
	  COL_TRI(211, 223, 212);
	  COL_TRI(223, 224, 212);
	  COL_TRI(212, 224, 213);
	  COL_TRI(224, 226, 213);
	  COL_TRI(213, 226, 225);
	  COL_TRI(225, 238, 215);
	  COL_TRI(215, 227, 216);
	  COL_TRI(227, 228, 216);
	  COL_TRI(216, 228, 217);
	  COL_TRI(228, 229, 217);
	  COL_TRI(217, 229, 218);
	  COL_TRI(226, 238, 225);
	  COL_TRI(238, 227, 215);
	  COL_TRI(218, 231, 230);
	  COL_TRI(229, 231, 218);
	  COL_TRI(230, 232, 220);
	  COL_TRI(230, 243, 232);
	  COL_TRI(231, 243, 230);
	  COL_TRI(220, 232, 221);
	  COL_TRI(232, 233, 221);
	  COL_TRI(221, 233, 222);
	  COL_TRI(233, 234, 222);
	  COL_TRI(222, 234, 223);
	  COL_TRI(223, 235, 224);
	  COL_TRI(234, 235, 223);
	  COL_TRI(224, 236, 226);
	  COL_TRI(235, 236, 224);
	  COL_TRI(236, 237, 226);
	  COL_TRI(226, 237, 238);
	  COL_TRI(237, 250, 238);
	  COL_TRI(238, 250, 227);
	  COL_TRI(228, 240, 229);
	  COL_TRI(239, 240, 228);
	  COL_TRI(227, 239, 228);
	  COL_TRI(240, 241, 229);
	  COL_TRI(229, 241, 231);
	  COL_TRI(250, 239, 227);
	  COL_TRI(241, 242, 231);
	  COL_TRI(231, 242, 243);
	  COL_TRI(242, 255, 243);
	  COL_TRI(243, 244, 232);
	  COL_TRI(243, 255, 244);
	  COL_TRI(232, 244, 233);
	  COL_TRI(233, 245, 234);
	  COL_TRI(244, 245, 233);
	  COL_TRI(245, 246, 234);
	  COL_TRI(234, 246, 235);
	  COL_TRI(246, 247, 235);
	  COL_TRI(235, 247, 236);
	  COL_TRI(247, 248, 236);
	  COL_TRI(236, 248, 237);
	  COL_TRI(248, 249, 237);
	  COL_TRI(237, 249, 250);
	  COL_TRI(249, 261, 250);
	  COL_TRI(250, 261, 239);
	  COL_TRI(240, 252, 241);
	  COL_TRI(251, 252, 240);
	  COL_TRI(239, 251, 240);
	  COL_TRI(241, 253, 242);
	  COL_TRI(252, 253, 241);
	  COL_TRI(261, 251, 239);
	  COL_TRI(242, 254, 255);
	  COL_TRI(253, 254, 242);
	  COL_TRI(254, 266, 255);
	  COL_TRI(255, 266, 256);
	  COL_TRI(255, 256, 244);
	  COL_TRI(244, 256, 245);
	  COL_TRI(245, 257, 246);
	  COL_TRI(256, 257, 245);
	  COL_TRI(257, 258, 246);
	  COL_TRI(246, 258, 247);
	  COL_TRI(258, 259, 247);
	  COL_TRI(247, 259, 248);
	  COL_TRI(262, 273, 261);
	  COL_TRI(259, 260, 248);
	  COL_TRI(248, 260, 249);
	  COL_TRI(260, 262, 249);
	  COL_TRI(249, 262, 261);
	  COL_TRI(261, 273, 251);
	  COL_TRI(251, 263, 252);
	  COL_TRI(263, 264, 252);
	  COL_TRI(252, 264, 253);
	  COL_TRI(264, 265, 253);
	  COL_TRI(253, 265, 254);
	  COL_TRI(254, 267, 266);
	  COL_TRI(265, 267, 254);
	  COL_TRI(266, 268, 256);
	  COL_TRI(266, 278, 268);
	  COL_TRI(267, 278, 266);
	  COL_TRI(256, 268, 257);
	  COL_TRI(268, 269, 257);
	  COL_TRI(257, 269, 258);
	  COL_TRI(269, 270, 258);
	  COL_TRI(258, 270, 259);
	  COL_TRI(259, 271, 260);
	  COL_TRI(270, 271, 259);
	  COL_TRI(260, 272, 262);
	  COL_TRI(271, 272, 260);
	  COL_TRI(272, 284, 262);
	  COL_TRI(262, 284, 274);
	  COL_TRI(262, 274, 273);
	  COL_TRI(273, 274, 251);
	  COL_TRI(274, 263, 251);
	  COL_TRI(264, 276, 265);
	  COL_TRI(275, 276, 264);
	  COL_TRI(263, 275, 264);
	  COL_TRI(276, 277, 265);
	  COL_TRI(265, 277, 267);
	  COL_TRI(277, 288, 267);
	  COL_TRI(267, 288, 279);
	  COL_TRI(267, 279, 278);
	  COL_TRI(278, 279, 268);
	  COL_TRI(268, 280, 269);
	  COL_TRI(279, 280, 268);
	  COL_TRI(269, 281, 270);
	  COL_TRI(280, 281, 269);
	  COL_TRI(281, 282, 270);
	  COL_TRI(270, 282, 271);
	  COL_TRI(282, 283, 271);
	  COL_TRI(271, 283, 272);
	  COL_TRI(272, 294, 297);
	  COL_TRI(283, 294, 272);
	  COL_TRI(272, 297, 284);
	  COL_TRI(284, 297, 285);
	  COL_TRI(284, 285, 274);
	  COL_TRI(274, 285, 263);
	  COL_TRI(285, 275, 263);
	  COL_TRI(276, 287, 277);
	  COL_TRI(286, 287, 276);
	  COL_TRI(275, 286, 276);
	  COL_TRI(277, 289, 288);
	  COL_TRI(287, 289, 277);
	  COL_TRI(288, 290, 279);
	  COL_TRI(289, 290, 288);
	  COL_TRI(290, 291, 279);
	  COL_TRI(279, 291, 280);
	  COL_TRI(291, 303, 280);
	  COL_TRI(280, 292, 281);
	  COL_TRI(280, 303, 292);
	  COL_TRI(281, 292, 282);
	  COL_TRI(292, 293, 282);
	  COL_TRI(282, 293, 283);
	  COL_TRI(299, 300, 286);
	  COL_TRI(293, 295, 283);
	  COL_TRI(283, 295, 294);
	  COL_TRI(294, 296, 297);
	  COL_TRI(295, 296, 294);
	  COL_TRI(296, 298, 297);
	  COL_TRI(297, 298, 285);
	  COL_TRI(285, 299, 275);
	  COL_TRI(298, 299, 285);
	  COL_TRI(299, 286, 275);
	  COL_TRI(286, 300, 287);
	  COL_TRI(300, 301, 287);
	  COL_TRI(287, 301, 289);
	  COL_TRI(301, 302, 289);
	  COL_TRI(289, 302, 290);
	  COL_TRI(302, 309, 290);
	  COL_TRI(290, 304, 291);
	  COL_TRI(290, 309, 304);
	  COL_TRI(291, 304, 303);
	  COL_TRI(303, 305, 292);
	  COL_TRI(303, 310, 305);
	  COL_TRI(304, 310, 303);
	  COL_TRI(292, 305, 293);
	  COL_TRI(305, 306, 293);
	  COL_TRI(293, 306, 295);
	  COL_TRI(301, 315, 302);
	  COL_TRI(295, 307, 296);
	  COL_TRI(306, 307, 295);
	  COL_TRI(296, 308, 298);
	  COL_TRI(296, 311, 308);
	  COL_TRI(307, 311, 296);
	  COL_TRI(298, 308, 299);
	  COL_TRI(308, 312, 299);
	  COL_TRI(299, 312, 300);
	  COL_TRI(300, 313, 301);
	  COL_TRI(301, 313, 315);
	  COL_TRI(302, 315, 316);
	  COL_TRI(302, 316, 309);
	  COL_TRI(309, 316, 317);
	  COL_TRI(309, 317, 304);
	  COL_TRI(304, 318, 310);
	  COL_TRI(304, 317, 318);
	  COL_TRI(310, 320, 305);
	  COL_TRI(310, 318, 320);
	  COL_TRI(305, 321, 306);
	  COL_TRI(305, 320, 321);
	  COL_TRI(306, 321, 322);
	  COL_TRI(306, 322, 307);
	  COL_TRI(307, 322, 323);
	  COL_TRI(307, 323, 311);
	  COL_TRI(311, 324, 308);
	  COL_TRI(311, 323, 324);
	  COL_TRI(308, 325, 312);
	  COL_TRI(308, 324, 325);
	  COL_TRI(312, 314, 300);
	  COL_TRI(312, 325, 314);
	  COL_TRI(300, 314, 313);
	  COL_TRI(313, 330, 315);
	  COL_TRI(313, 329, 330);
	  COL_TRI(314, 329, 313);
	  COL_TRI(315, 331, 316);
	  COL_TRI(315, 330, 331);
	  COL_TRI(316, 332, 317);
	  COL_TRI(316, 331, 332);
	  COL_TRI(317, 332, 319);
	  COL_TRI(317, 319, 318);
	  COL_TRI(318, 319, 320);
	  COL_TRI(319, 333, 320);
	  COL_TRI(320, 334, 321);
	  COL_TRI(320, 333, 334);
	  COL_TRI(321, 334, 335);
	  COL_TRI(321, 335, 322);
	  COL_TRI(322, 335, 336);
	  COL_TRI(322, 336, 323);
	  COL_TRI(323, 336, 326);
	  COL_TRI(323, 326, 324);
	  COL_TRI(324, 326, 325);
	  COL_TRI(325, 327, 314);
	  COL_TRI(326, 327, 325);
	  COL_TRI(314, 328, 329);
	  COL_TRI(327, 328, 314);
	  COL_TRI(328, 85, 329);
	  COL_TRI(329, 85, 86);
	  COL_TRI(329, 86, 330);
	  COL_TRI(330, 86, 89);
	  COL_TRI(330, 89, 331);
	  COL_TRI(331, 92, 332);
	  COL_TRI(331, 89, 92);
	  COL_TRI(332, 94, 319);
	  COL_TRI(332, 92, 94);
	  COL_TRI(319, 94, 97);
	  COL_TRI(319, 97, 333);
	  COL_TRI(333, 97, 99);
	  COL_TRI(333, 99, 334);
	  COL_TRI(334, 102, 335);
	  COL_TRI(334, 99, 102);
	  COL_TRI(335, 105, 336);
	  COL_TRI(335, 102, 105);
	  COL_TRI(336, 107, 326);
	  COL_TRI(336, 105, 107);
	  COL_TRI(326, 107, 110);
	  COL_TRI(326, 110, 327);
	  COL_TRI(327, 110, 87);
	  COL_TRI(327, 87, 328);
	  COL_TRI(328, 87, 85);
	  COL_TRI(116, 72, 68);
	  COL_TRI(69, 345, 75);
	  COL_TRI(69, 73, 119);
	  COL_TRI(69, 119, 120);
	  COL_TRI(141, 116, 68);
	  COL_TRI(71, 343, 68);
	  COL_TRI(69, 120, 124);
	  COL_TRI(69, 75, 70);
	  COL_TRI(342, 341, 578);
	  COL_TRI(337, 78, 399);
	  COL_TRI(78, 337, 71);
	  COL_TRI(338, 342, 337);
	  COL_TRI(339, 337, 342);
	  COL_TRI(339, 71, 337);
	  COL_TRI(340, 339, 342);
	  COL_TRI(341, 342, 593);
	  COL_TRI(342, 578, 340);
	  COL_TRI(71, 339, 343);
	  COL_TRI(343, 340, 345);
	  COL_TRI(343, 339, 340);
	  COL_TRI(344, 74, 75);
	  COL_TRI(340, 344, 75);
	  COL_TRI(345, 340, 75);
	  COL_TRI(340, 346, 344);
	  COL_TRI(346, 340, 578);
	  COL_TRI(347, 348, 594);
	  COL_TRI(348, 595, 594);
	  COL_TRI(84, 596, 594);
	  COL_TRI(348, 364, 595);
	  COL_TRI(347, 594, 596);
	  COL_TRI(349, 347, 596);
	  COL_TRI(349, 597, 347);
	  COL_TRI(350, 349, 596);
	  COL_TRI(350, 596, 84);
	  COL_TRI(84, 594, 351);
	  COL_TRI(351, 594, 595);
	  COL_TRI(351, 595, 598);
	  COL_TRI(352, 17, 10);
	  COL_TRI(352, 599, 17);
	  COL_TRI(352, 600, 599);
	  COL_TRI(104, 91, 592);
	  COL_TRI(353, 65, 10);
	  COL_TRI(10, 64, 352);
	  COL_TRI(10, 65, 64);
	  COL_TRI(84, 588, 91);
	  COL_TRI(82, 13, 84);
	  COL_TRI(13, 350, 84);
	  COL_TRI(354, 4, 7);
	  COL_TRI(354, 7, 104);
	  COL_TRI(104, 592, 354);
	  COL_TRI(66, 353, 602);
	  COL_TRI(66, 602, 67);
	  COL_TRI(353, 66, 65);
	  COL_TRI(353, 601, 361);
	  COL_TRI(353, 360, 601);
	  COL_TRI(355, 604, 605);
	  COL_TRI(352, 602, 603);
	  COL_TRI(352, 67, 602);
	  COL_TRI(352, 64, 67);
	  COL_TRI(352, 358, 600);
	  COL_TRI(5, 11, 13);
	  COL_TRI(5, 13, 6);
	  COL_TRI(355, 606, 604);
	  COL_TRI(356, 606, 355);
	  COL_TRI(356, 607, 606);
	  COL_TRI(354, 8, 4);
	  COL_TRI(354, 592, 8);
	  COL_TRI(91, 608, 592);
	  COL_TRI(358, 603, 360);
	  COL_TRI(91, 599, 608);
	  COL_TRI(5, 357, 11);
	  COL_TRI(5, 9, 357);
	  COL_TRI(357, 600, 358);
	  COL_TRI(357, 358, 12);
	  COL_TRI(358, 360, 12);
	  COL_TRI(361, 602, 353);
	  COL_TRI(352, 603, 358);
	  COL_TRI(359, 603, 602);
	  COL_TRI(359, 609, 603);
	  COL_TRI(360, 603, 609);
	  COL_TRI(360, 609, 601);
	  COL_TRI(361, 359, 602);
	  COL_TRI(362, 363, 610);
	  COL_TRI(363, 362, 348);
	  COL_TRI(363, 348, 347);
	  COL_TRI(16, 347, 597);
	  COL_TRI(16, 363, 347);
	  COL_TRI(364, 362, 15);
	  COL_TRI(364, 348, 362);
	  COL_TRI(362, 610, 611);
	  COL_TRI(19, 370, 21);
	  COL_TRI(16, 365, 363);
	  COL_TRI(365, 610, 363);
	  COL_TRI(365, 52, 612);
	  COL_TRI(365, 612, 613);
	  COL_TRI(366, 611, 610);
	  COL_TRI(52, 362, 611);
	  COL_TRI(366, 521, 611);
	  COL_TRI(52, 15, 362);
	  COL_TRI(372, 23, 614);
	  COL_TRI(19, 367, 370);
	  COL_TRI(367, 19, 371);
	  COL_TRI(368, 370, 615);
	  COL_TRI(368, 374, 370);
	  COL_TRI(369, 615, 370);
	  COL_TRI(370, 614, 369);
	  COL_TRI(370, 367, 614);
	  COL_TRI(22, 370, 374);
	  COL_TRI(22, 21, 370);
	  COL_TRI(371, 372, 367);
	  COL_TRI(372, 614, 367);
	  COL_TRI(369, 614, 23);
	  COL_TRI(369, 616, 615);
	  COL_TRI(373, 616, 369);
	  COL_TRI(369, 23, 20);
	  COL_TRI(373, 369, 20);
	  COL_TRI(372, 24, 23);
	  COL_TRI(373, 20, 18);
	  COL_TRI(374, 368, 617);
	  COL_TRI(375, 368, 377);
	  COL_TRI(375, 617, 368);
	  COL_TRI(374, 617, 373);
	  COL_TRI(373, 18, 374);
	  COL_TRI(373, 617, 616);
	  COL_TRI(18, 22, 374);
	  COL_TRI(376, 615, 616);
	  COL_TRI(375, 618, 616);
	  COL_TRI(376, 616, 618);
	  COL_TRI(375, 616, 617);
	  COL_TRI(376, 618, 377);
	  COL_TRI(377, 618, 375);
	  COL_TRI(368, 376, 377);
	  COL_TRI(368, 615, 376);
	  COL_TRI(381, 622, 621);
	  COL_TRI(19, 25, 371);
	  COL_TRI(378, 380, 619);
	  COL_TRI(378, 619, 620);
	  COL_TRI(379, 378, 620);
	  COL_TRI(380, 381, 621);
	  COL_TRI(380, 621, 619);
	  COL_TRI(379, 620, 383);
	  COL_TRI(381, 382, 622);
	  COL_TRI(382, 507, 623);
	  COL_TRI(382, 623, 622);
	  COL_TRI(383, 624, 384);
	  COL_TRI(379, 383, 384);
	  COL_TRI(384, 624, 473);
	  COL_TRI(385, 473, 624);
	  COL_TRI(386, 625, 388);
	  COL_TRI(387, 386, 388);
	  COL_TRI(388, 338, 399);
	  COL_TRI(388, 583, 338);
	  COL_TRI(389, 452, 626);
	  COL_TRI(390, 389, 626);
	  COL_TRI(391, 552, 389);
	  COL_TRI(392, 626, 452);
	  COL_TRI(393, 392, 452);
	  COL_TRI(394, 395, 494);
	  COL_TRI(395, 394, 627);
	  COL_TRI(394, 396, 627);
	  COL_TRI(397, 398, 396);
	  COL_TRI(398, 627, 396);
	  COL_TRI(396, 394, 388);
	  COL_TRI(399, 396, 388);
	  COL_TRI(397, 396, 399);
	  COL_TRI(400, 398, 397);
	  COL_TRI(77, 400, 397);
	  COL_TRI(77, 397, 78);
	  COL_TRI(405, 403, 406);
	  COL_TRI(76, 77, 70);
	  COL_TRI(70, 77, 78);
	  COL_TRI(401, 400, 77);
	  COL_TRI(76, 401, 77);
	  COL_TRI(402, 401, 76);
	  COL_TRI(403, 402, 76);
	  COL_TRI(403, 76, 74);
	  COL_TRI(404, 402, 403);
	  COL_TRI(405, 404, 403);
	  COL_TRI(406, 403, 74);
	  COL_TRI(407, 404, 405);
	  COL_TRI(408, 407, 405);
	  COL_TRI(409, 407, 408);
	  COL_TRI(408, 531, 409);
	  COL_TRI(410, 409, 531);
	  COL_TRI(411, 410, 531);
	  COL_TRI(412, 413, 411);
	  COL_TRI(412, 411, 531);
	  COL_TRI(413, 629, 411);
	  COL_TRI(414, 415, 416);
	  COL_TRI(415, 623, 507);
	  COL_TRI(416, 415, 507);
	  COL_TRI(416, 423, 414);
	  COL_TRI(417, 416, 507);
	  COL_TRI(418, 417, 507);
	  COL_TRI(419, 414, 423);
	  COL_TRI(420, 419, 423);
	  COL_TRI(421, 419, 420);
	  COL_TRI(426, 427, 430);
	  COL_TRI(422, 421, 420);
	  COL_TRI(423, 527, 420);
	  COL_TRI(420, 527, 526);
	  COL_TRI(420, 526, 422);
	  COL_TRI(424, 421, 422);
	  COL_TRI(425, 424, 422);
	  COL_TRI(422, 512, 425);
	  COL_TRI(422, 526, 512);
	  COL_TRI(426, 424, 425);
	  COL_TRI(427, 426, 425);
	  COL_TRI(425, 512, 428);
	  COL_TRI(425, 428, 427);
	  COL_TRI(428, 429, 427);
	  COL_TRI(429, 430, 427);
	  COL_TRI(430, 429, 634);
	  COL_TRI(431, 429, 513);
	  COL_TRI(429, 428, 513);
	  COL_TRI(431, 634, 429);
	  COL_TRI(432, 634, 431);
	  COL_TRI(433, 431, 515);
	  COL_TRI(431, 513, 515);
	  COL_TRI(431, 433, 432);
	  COL_TRI(432, 433, 630);
	  COL_TRI(412, 433, 413);
	  COL_TRI(433, 515, 413);
	  COL_TRI(412, 630, 433);
	  COL_TRI(437, 447, 439);
	  COL_TRI(412, 531, 525);
	  COL_TRI(434, 435, 635);
	  COL_TRI(435, 434, 636);
	  COL_TRI(434, 635, 475);
	  COL_TRI(436, 636, 434);
	  COL_TRI(436, 434, 637);
	  COL_TRI(438, 439, 447);
	  COL_TRI(439, 438, 440);
	  COL_TRI(438, 542, 440);
	  COL_TRI(440, 539, 446);
	  COL_TRI(440, 542, 539);
	  COL_TRI(441, 640, 443);
	  COL_TRI(442, 444, 443);
	  COL_TRI(443, 444, 441);
	  COL_TRI(438, 541, 542);
	  COL_TRI(442, 536, 444);
	  COL_TRI(441, 641, 642);
	  COL_TRI(441, 642, 534);
	  COL_TRI(444, 641, 441);
	  COL_TRI(445, 536, 442);
	  COL_TRI(445, 538, 536);
	  COL_TRI(446, 538, 445);
	  COL_TRI(446, 539, 538);
	  COL_TRI(452, 448, 644);
	  COL_TRI(438, 532, 541);
	  COL_TRI(447, 532, 438);
	  COL_TRI(448, 450, 644);
	  COL_TRI(449, 450, 448);
	  COL_TRI(450, 645, 644);
	  COL_TRI(451, 449, 448);
	  COL_TRI(389, 448, 452);
	  COL_TRI(389, 451, 448);
	  COL_TRI(460, 518, 462);
	  COL_TRI(453, 392, 393);
	  COL_TRI(454, 453, 393);
	  COL_TRI(455, 453, 454);
	  COL_TRI(456, 455, 454);
	  COL_TRI(457, 455, 456);
	  COL_TRI(458, 457, 456);
	  COL_TRI(459, 457, 458);
	  COL_TRI(460, 459, 458);
	  COL_TRI(461, 459, 460);
	  COL_TRI(462, 461, 460);
	  COL_TRI(472, 469, 649);
	  COL_TRI(464, 461, 462);
	  COL_TRI(465, 464, 462);
	  COL_TRI(466, 464, 465);
	  COL_TRI(467, 466, 465);
	  COL_TRI(465, 504, 649);
	  COL_TRI(467, 465, 649);
	  COL_TRI(468, 466, 467);
	  COL_TRI(469, 468, 467);
	  COL_TRI(469, 467, 649);
	  COL_TRI(470, 468, 469);
	  COL_TRI(471, 470, 469);
	  COL_TRI(471, 469, 472);
	  COL_TRI(385, 470, 471);
	  COL_TRI(473, 385, 471);
	  COL_TRI(474, 471, 472);
	  COL_TRI(473, 471, 474);
	  COL_TRI(475, 635, 638);
	  COL_TRI(475, 638, 476);
	  COL_TRI(476, 638, 651);
	  COL_TRI(476, 651, 477);
	  COL_TRI(481, 657, 656);
	  COL_TRI(477, 651, 652);
	  COL_TRI(477, 652, 478);
	  COL_TRI(478, 652, 653);
	  COL_TRI(478, 653, 479);
	  COL_TRI(479, 653, 654);
	  COL_TRI(479, 654, 480);
	  COL_TRI(480, 654, 655);
	  COL_TRI(480, 655, 486);
	  COL_TRI(481, 482, 484);
	  COL_TRI(482, 481, 656);
	  COL_TRI(488, 485, 489);
	  COL_TRI(482, 656, 479);
	  COL_TRI(479, 656, 658);
	  COL_TRI(483, 484, 482);
	  COL_TRI(483, 482, 480);
	  COL_TRI(480, 482, 479);
	  COL_TRI(484, 483, 659);
	  COL_TRI(485, 483, 486);
	  COL_TRI(486, 483, 480);
	  COL_TRI(485, 659, 483);
	  COL_TRI(487, 659, 485);
	  COL_TRI(488, 487, 485);
	  COL_TRI(489, 485, 486);
	  COL_TRI(494, 492, 490);
	  COL_TRI(487, 488, 660);
	  COL_TRI(490, 660, 488);
	  COL_TRI(491, 488, 489);
	  COL_TRI(490, 488, 491);
	  COL_TRI(492, 660, 490);
	  COL_TRI(493, 490, 491);
	  COL_TRI(494, 490, 493);
	  COL_TRI(395, 492, 494);
	  COL_TRI(496, 661, 628);
	  COL_TRI(387, 494, 493);
	  COL_TRI(394, 494, 387);
	  COL_TRI(495, 496, 497);
	  COL_TRI(496, 509, 510);
	  COL_TRI(497, 496, 510);
	  COL_TRI(496, 495, 661);
	  COL_TRI(498, 509, 496);
	  COL_TRI(498, 496, 628);
	  COL_TRI(500, 473, 474);
	  COL_TRI(499, 495, 497);
	  COL_TRI(389, 661, 495);
	  COL_TRI(389, 552, 661);
	  COL_TRI(500, 528, 384);
	  COL_TRI(473, 500, 384);
	  COL_TRI(501, 528, 500);
	  COL_TRI(502, 501, 500);
	  COL_TRI(502, 500, 474);
	  COL_TRI(503, 502, 474);
	  COL_TRI(503, 474, 472);
	  COL_TRI(472, 649, 650);
	  COL_TRI(503, 472, 650);
	  COL_TRI(504, 465, 648);
	  COL_TRI(504, 650, 649);
	  COL_TRI(434, 639, 637);
	  COL_TRI(434, 475, 639);
	  COL_TRI(475, 664, 639);
	  COL_TRI(475, 476, 664);
	  COL_TRI(476, 665, 664);
	  COL_TRI(476, 477, 665);
	  COL_TRI(477, 666, 665);
	  COL_TRI(478, 666, 477);
	  COL_TRI(478, 658, 666);
	  COL_TRI(423, 416, 417);
	  COL_TRI(505, 423, 417);
	  COL_TRI(423, 505, 527);
	  COL_TRI(381, 669, 668);
	  COL_TRI(506, 505, 417);
	  COL_TRI(505, 506, 527);
	  COL_TRI(506, 633, 527);
	  COL_TRI(507, 382, 667);
	  COL_TRI(507, 667, 418);
	  COL_TRI(382, 668, 667);
	  COL_TRI(382, 381, 668);
	  COL_TRI(381, 380, 669);
	  COL_TRI(510, 551, 497);
	  COL_TRI(380, 378, 670);
	  COL_TRI(380, 670, 669);
	  COL_TRI(378, 379, 671);
	  COL_TRI(378, 671, 670);
	  COL_TRI(508, 510, 662);
	  COL_TRI(508, 551, 510);
	  COL_TRI(59, 557, 508);
	  COL_TRI(509, 662, 510);
	  COL_TRI(512, 514, 428);
	  COL_TRI(59, 508, 662);
	  COL_TRI(59, 662, 57);
	  COL_TRI(511, 454, 393);
	  COL_TRI(393, 644, 511);
	  COL_TRI(454, 511, 456);
	  COL_TRI(511, 524, 456);
	  COL_TRI(452, 644, 393);
	  COL_TRI(428, 514, 513);
	  COL_TRI(495, 451, 389);
	  COL_TRI(513, 516, 515);
	  COL_TRI(514, 516, 513);
	  COL_TRI(515, 517, 413);
	  COL_TRI(516, 517, 515);
	  COL_TRI(517, 629, 413);
	  COL_TRI(465, 462, 648);
	  COL_TRI(518, 648, 462);
	  COL_TRI(495, 499, 451);
	  COL_TRI(499, 497, 520);
	  COL_TRI(519, 499, 520);
	  COL_TRI(520, 497, 551);
	  COL_TRI(499, 663, 451);
	  COL_TRI(499, 519, 663);
	  COL_TRI(521, 558, 59);
	  COL_TRI(521, 59, 522);
	  COL_TRI(522, 59, 57);
	  COL_TRI(525, 531, 530);
	  COL_TRI(522, 57, 523);
	  COL_TRI(523, 57, 672);
	  COL_TRI(463, 518, 460);
	  COL_TRI(524, 463, 458);
	  COL_TRI(458, 463, 460);
	  COL_TRI(456, 524, 458);
	  COL_TRI(512, 631, 514);
	  COL_TRI(526, 631, 512);
	  COL_TRI(526, 632, 631);
	  COL_TRI(527, 632, 526);
	  COL_TRI(527, 633, 632);
	  COL_TRI(528, 671, 379);
	  COL_TRI(384, 528, 379);
	  COL_TRI(479, 658, 478);
	  COL_TRI(447, 647, 532);
	  COL_TRI(388, 394, 387);
	  COL_TRI(529, 405, 406);
	  COL_TRI(408, 405, 529);
	  COL_TRI(530, 408, 529);
	  COL_TRI(531, 408, 530);
	  COL_TRI(532, 646, 541);
	  COL_TRI(538, 535, 536);
	  COL_TRI(533, 673, 641);
	  COL_TRI(444, 533, 641);
	  COL_TRI(534, 642, 643);
	  COL_TRI(534, 643, 545);
	  COL_TRI(535, 673, 533);
	  COL_TRI(536, 535, 533);
	  COL_TRI(536, 533, 444);
	  COL_TRI(535, 674, 673);
	  COL_TRI(537, 674, 535);
	  COL_TRI(538, 537, 535);
	  COL_TRI(537, 675, 674);
	  COL_TRI(539, 537, 538);
	  COL_TRI(539, 540, 537);
	  COL_TRI(540, 675, 537);
	  COL_TRI(540, 677, 675);
	  COL_TRI(541, 677, 540);
	  COL_TRI(542, 541, 540);
	  COL_TRI(542, 540, 539);
	  COL_TRI(541, 646, 677);
	  COL_TRI(543, 678, 544);
	  COL_TRI(544, 678, 679);
	  COL_TRI(544, 679, 680);
	  COL_TRI(543, 676, 678);
	  COL_TRI(545, 676, 543);
	  COL_TRI(545, 643, 676);
	  COL_TRI(546, 547, 681);
	  COL_TRI(547, 682, 683);
	  COL_TRI(547, 546, 682);
	  COL_TRI(548, 25, 24);
	  COL_TRI(548, 684, 25);
	  COL_TRI(553, 555, 628);
	  COL_TRI(546, 681, 549);
	  COL_TRI(549, 681, 685);
	  COL_TRI(549, 685, 550);
	  COL_TRI(550, 685, 680);
	  COL_TRI(550, 680, 679);
	  COL_TRI(551, 508, 557);
	  COL_TRI(552, 553, 628);
	  COL_TRI(552, 628, 661);
	  COL_TRI(523, 672, 366);
	  COL_TRI(498, 561, 509);
	  COL_TRI(498, 554, 560);
	  COL_TRI(554, 498, 555);
	  COL_TRI(498, 560, 561);
	  COL_TRI(498, 628, 555);
	  COL_TRI(555, 562, 554);
	  COL_TRI(556, 562, 555);
	  COL_TRI(553, 556, 555);
	  COL_TRI(366, 610, 613);
	  COL_TRI(366, 613, 523);
	  COL_TRI(560, 559, 561);
	  COL_TRI(522, 611, 521);
	  COL_TRI(557, 558, 560);
	  COL_TRI(557, 59, 558);
	  COL_TRI(558, 672, 560);
	  COL_TRI(559, 672, 57);
	  COL_TRI(559, 560, 672);
	  COL_TRI(551, 557, 560);
	  COL_TRI(554, 551, 560);
	  COL_TRI(562, 565, 554);
	  COL_TRI(559, 57, 662);
	  COL_TRI(561, 559, 662);
	  COL_TRI(561, 662, 509);
	  COL_TRI(522, 612, 611);
	  COL_TRI(554, 520, 551);
	  COL_TRI(554, 565, 520);
	  COL_TRI(562, 564, 565);
	  COL_TRI(563, 564, 562);
	  COL_TRI(556, 563, 562);
	  COL_TRI(519, 564, 663);
	  COL_TRI(564, 577, 663);
	  COL_TRI(563, 577, 564);
	  COL_TRI(565, 564, 519);
	  COL_TRI(520, 565, 519);
	  COL_TRI(566, 568, 686);
	  COL_TRI(566, 687, 568);
	  COL_TRI(566, 74, 344);
	  COL_TRI(566, 344, 688);
	  COL_TRI(567, 688, 690);
	  COL_TRI(568, 687, 689);
	  COL_TRI(568, 689, 691);
	  COL_TRI(569, 388, 689);
	  COL_TRI(569, 583, 388);
	  COL_TRI(570, 692, 569);
	  COL_TRI(570, 693, 695);
	  COL_TRI(570, 694, 692);
	  COL_TRI(570, 695, 697);
	  COL_TRI(139, 572, 571);
	  COL_TRI(571, 136, 139);
	  COL_TRI(139, 141, 572);
	  COL_TRI(572, 141, 68);
	  COL_TRI(573, 572, 68);
	  COL_TRI(571, 124, 127);
	  COL_TRI(571, 127, 129);
	  COL_TRI(571, 129, 132);
	  COL_TRI(571, 132, 136);
	  COL_TRI(69, 124, 571);
	  COL_TRI(69, 571, 698);
	  COL_TRI(574, 699, 693);
	  COL_TRI(575, 700, 695);
	  COL_TRI(575, 695, 699);
	  COL_TRI(574, 575, 699);
	  COL_TRI(3, 702, 701);
	  COL_TRI(3, 576, 702);
	  COL_TRI(574, 3, 701);
	  COL_TRI(574, 701, 700);
	  COL_TRI(451, 663, 576);
	  COL_TRI(576, 391, 451);
	  COL_TRI(577, 703, 576);
	  COL_TRI(576, 663, 577);
	  COL_TRI(578, 704, 690);
	  COL_TRI(341, 704, 578);
	  COL_TRI(578, 690, 346);
	  COL_TRI(341, 705, 704);
	  COL_TRI(579, 705, 341);
	  COL_TRI(579, 706, 705);
	  COL_TRI(580, 706, 579);
	  COL_TRI(341, 593, 579);
	  COL_TRI(579, 593, 580);
	  COL_TRI(580, 692, 706);
	  COL_TRI(567, 690, 696);
	  COL_TRI(581, 567, 696);
	  COL_TRI(581, 391, 567);
	  COL_TRI(582, 391, 707);
	  COL_TRI(577, 563, 581);
	  COL_TRI(577, 581, 703);
	  COL_TRI(563, 556, 581);
	  COL_TRI(556, 553, 581);
	  COL_TRI(583, 580, 593);
	  COL_TRI(583, 593, 338);
	  COL_TRI(338, 593, 342);
	  COL_TRI(337, 399, 338);
	  COL_TRI(62, 26, 35);
	  COL_TRI(62, 51, 26);
	  COL_TRI(26, 51, 47);
	  COL_TRI(26, 47, 30);
	  COL_TRI(45, 40, 36);
	  COL_TRI(45, 55, 40);
	  COL_TRI(45, 37, 56);
	  COL_TRI(45, 36, 37);
	  COL_TRI(37, 47, 56);
	  COL_TRI(37, 30, 47);
	  COL_TRI(58, 46, 38);
	  COL_TRI(58, 38, 42);
	  COL_TRI(50, 39, 38);
	  COL_TRI(50, 38, 46);
	  COL_TRI(31, 50, 48);
	  COL_TRI(31, 39, 50);
	  COL_TRI(31, 60, 27);
	  COL_TRI(31, 48, 60);
	  COL_TRI(60, 29, 27);
	  COL_TRI(60, 63, 29);
	  COL_TRI_INIT(SURFACE_DEATH_PLANE, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI_INIT(SURFACE_ICE, 36);
	  COL_TRI(26, 27, 28);
	  COL_TRI(27, 29, 28);
	  COL_TRI(30, 31, 27);
	  COL_TRI(30, 27, 26);
	  COL_TRI(26, 28, 32);
	  COL_TRI(33, 34, 26);
	  COL_TRI(32, 33, 26);
	  COL_TRI(34, 35, 26);
	  COL_TRI(30, 36, 31);
	  COL_TRI(37, 36, 30);
	  COL_TRI(31, 38, 39);
	  COL_TRI(36, 38, 31);
	  COL_TRI(47, 45, 56);
	  COL_TRI(40, 41, 36);
	  COL_TRI(36, 41, 38);
	  COL_TRI(42, 38, 53);
	  COL_TRI(43, 53, 38);
	  COL_TRI(44, 43, 38);
	  COL_TRI(41, 44, 38);
	  COL_TRI(45, 54, 55);
	  COL_TRI(46, 54, 45);
	  COL_TRI(48, 45, 47);
	  COL_TRI(46, 57, 54);
	  COL_TRI(49, 46, 58);
	  COL_TRI(50, 46, 48);
	  COL_TRI(48, 46, 45);
	  COL_TRI(46, 49, 59);
	  COL_TRI(46, 59, 57);
	  COL_TRI(51, 48, 47);
	  COL_TRI(51, 60, 48);
	  COL_TRI(52, 60, 51);
	  COL_TRI(15, 52, 51);
	  COL_TRI(52, 63, 60);
	  COL_TRI(51, 16, 15);
	  COL_TRI(51, 61, 16);
	  COL_TRI(51, 62, 61);
	  COL_TRI_INIT(SURFACE_NO_CAM_COL_SLIPPERY, 12);
	  COL_TRI(14, 15, 16);
	  COL_TRI(4, 5, 6);
	  COL_TRI(4, 6, 7);
	  COL_TRI(4, 8, 9);
	  COL_TRI(4, 9, 5);
	  COL_TRI(10, 11, 12);
	  COL_TRI(10, 13, 11);
	  COL_TRI(19, 24, 25);
	  COL_TRI(14, 17, 15);
	  COL_TRI(18, 20, 21);
	  COL_TRI(18, 21, 22);
	  COL_TRI(19, 23, 24);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(2);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start,       /*pos*/ -5836,  7465, -6143, /*yaw*/ 64); // unused, probably an early way to set initial position
	  SPECIAL_OBJECT_WITH_YAW_AND_PARAM(/*preset*/ special_wooden_door_warp, /*pos*/ -7628, -5836, -6988, /*yaw*/ 64, /*bhvParam2*/ 20);
	  COL_END();
	}

	/**
	 * @license
	 * Copyright 2010-2023 Three.js Authors
	 * SPDX-License-Identifier: MIT
	 */
	const REVISION = '156';

	const MOUSE = { LEFT: 0, MIDDLE: 1, RIGHT: 2, ROTATE: 0, DOLLY: 1, PAN: 2 };
	const TOUCH = { ROTATE: 0, PAN: 1, DOLLY_PAN: 2, DOLLY_ROTATE: 3 };
	const CullFaceNone = 0;
	const CullFaceBack = 1;
	const CullFaceFront = 2;
	const PCFShadowMap = 1;
	const PCFSoftShadowMap = 2;
	const VSMShadowMap = 3;
	const FrontSide = 0;
	const BackSide = 1;
	const DoubleSide = 2;
	const NoBlending = 0;
	const NormalBlending = 1;
	const AdditiveBlending = 2;
	const SubtractiveBlending = 3;
	const MultiplyBlending = 4;
	const CustomBlending = 5;
	const AddEquation = 100;
	const SubtractEquation = 101;
	const ReverseSubtractEquation = 102;
	const MinEquation = 103;
	const MaxEquation = 104;
	const ZeroFactor = 200;
	const OneFactor = 201;
	const SrcColorFactor = 202;
	const OneMinusSrcColorFactor = 203;
	const SrcAlphaFactor = 204;
	const OneMinusSrcAlphaFactor = 205;
	const DstAlphaFactor = 206;
	const OneMinusDstAlphaFactor = 207;
	const DstColorFactor = 208;
	const OneMinusDstColorFactor = 209;
	const SrcAlphaSaturateFactor = 210;
	const NeverDepth = 0;
	const AlwaysDepth = 1;
	const LessDepth = 2;
	const LessEqualDepth = 3;
	const EqualDepth = 4;
	const GreaterEqualDepth = 5;
	const GreaterDepth = 6;
	const NotEqualDepth = 7;
	const MultiplyOperation = 0;
	const MixOperation = 1;
	const AddOperation = 2;
	const NoToneMapping = 0;
	const LinearToneMapping = 1;
	const ReinhardToneMapping = 2;
	const CineonToneMapping = 3;
	const ACESFilmicToneMapping = 4;
	const CustomToneMapping = 5;

	const UVMapping = 300;
	const CubeReflectionMapping = 301;
	const CubeRefractionMapping = 302;
	const EquirectangularReflectionMapping = 303;
	const EquirectangularRefractionMapping = 304;
	const CubeUVReflectionMapping = 306;
	const RepeatWrapping = 1000;
	const ClampToEdgeWrapping = 1001;
	const MirroredRepeatWrapping = 1002;
	const NearestFilter = 1003;
	const NearestMipmapNearestFilter = 1004;
	const NearestMipmapLinearFilter = 1005;
	const LinearFilter = 1006;
	const LinearMipmapNearestFilter = 1007;
	const LinearMipmapLinearFilter = 1008;
	const UnsignedByteType = 1009;
	const ByteType = 1010;
	const ShortType = 1011;
	const UnsignedShortType = 1012;
	const IntType = 1013;
	const UnsignedIntType = 1014;
	const FloatType = 1015;
	const HalfFloatType = 1016;
	const UnsignedShort4444Type = 1017;
	const UnsignedShort5551Type = 1018;
	const UnsignedInt248Type = 1020;
	const AlphaFormat = 1021;
	const RGBAFormat = 1023;
	const LuminanceFormat = 1024;
	const LuminanceAlphaFormat = 1025;
	const DepthFormat = 1026;
	const DepthStencilFormat = 1027;
	const RedFormat = 1028;
	const RedIntegerFormat = 1029;
	const RGFormat = 1030;
	const RGIntegerFormat = 1031;
	const RGBAIntegerFormat = 1033;

	const RGB_S3TC_DXT1_Format = 33776;
	const RGBA_S3TC_DXT1_Format = 33777;
	const RGBA_S3TC_DXT3_Format = 33778;
	const RGBA_S3TC_DXT5_Format = 33779;
	const RGB_PVRTC_4BPPV1_Format = 35840;
	const RGB_PVRTC_2BPPV1_Format = 35841;
	const RGBA_PVRTC_4BPPV1_Format = 35842;
	const RGBA_PVRTC_2BPPV1_Format = 35843;
	const RGB_ETC1_Format = 36196;
	const RGB_ETC2_Format = 37492;
	const RGBA_ETC2_EAC_Format = 37496;
	const RGBA_ASTC_4x4_Format = 37808;
	const RGBA_ASTC_5x4_Format = 37809;
	const RGBA_ASTC_5x5_Format = 37810;
	const RGBA_ASTC_6x5_Format = 37811;
	const RGBA_ASTC_6x6_Format = 37812;
	const RGBA_ASTC_8x5_Format = 37813;
	const RGBA_ASTC_8x6_Format = 37814;
	const RGBA_ASTC_8x8_Format = 37815;
	const RGBA_ASTC_10x5_Format = 37816;
	const RGBA_ASTC_10x6_Format = 37817;
	const RGBA_ASTC_10x8_Format = 37818;
	const RGBA_ASTC_10x10_Format = 37819;
	const RGBA_ASTC_12x10_Format = 37820;
	const RGBA_ASTC_12x12_Format = 37821;
	const RGBA_BPTC_Format = 36492;
	const RGB_BPTC_SIGNED_Format = 36494;
	const RGB_BPTC_UNSIGNED_Format = 36495;
	const RED_RGTC1_Format = 36283;
	const SIGNED_RED_RGTC1_Format = 36284;
	const RED_GREEN_RGTC2_Format = 36285;
	const SIGNED_RED_GREEN_RGTC2_Format = 36286;
	/** @deprecated Use LinearSRGBColorSpace or NoColorSpace in three.js r152+. */
	const LinearEncoding = 3000;
	/** @deprecated Use SRGBColorSpace in three.js r152+. */
	const sRGBEncoding = 3001;
	const BasicDepthPacking = 3200;
	const RGBADepthPacking = 3201;
	const TangentSpaceNormalMap = 0;
	const ObjectSpaceNormalMap = 1;

	// Color space string identifiers, matching CSS Color Module Level 4 and WebGPU names where available.
	const NoColorSpace = '';
	const SRGBColorSpace = 'srgb';
	const LinearSRGBColorSpace = 'srgb-linear';
	const DisplayP3ColorSpace = 'display-p3';
	const KeepStencilOp = 7680;
	const AlwaysStencilFunc = 519;

	const NeverCompare = 512;
	const LessCompare = 513;
	const EqualCompare = 514;
	const LessEqualCompare = 515;
	const GreaterCompare = 516;
	const NotEqualCompare = 517;
	const GreaterEqualCompare = 518;
	const AlwaysCompare = 519;

	const StaticDrawUsage = 35044;
	const GLSL3 = '300 es';

	const _SRGBAFormat = 1035; // fallback for WebGL 1

	const WebGLCoordinateSystem = 2000;
	const WebGPUCoordinateSystem = 2001;

	/**
	 * https://github.com/mrdoob/eventdispatcher.js/
	 */

	class EventDispatcher {

		addEventListener( type, listener ) {

			if ( this._listeners === undefined ) this._listeners = {};

			const listeners = this._listeners;

			if ( listeners[ type ] === undefined ) {

				listeners[ type ] = [];

			}

			if ( listeners[ type ].indexOf( listener ) === - 1 ) {

				listeners[ type ].push( listener );

			}

		}

		hasEventListener( type, listener ) {

			if ( this._listeners === undefined ) return false;

			const listeners = this._listeners;

			return listeners[ type ] !== undefined && listeners[ type ].indexOf( listener ) !== - 1;

		}

		removeEventListener( type, listener ) {

			if ( this._listeners === undefined ) return;

			const listeners = this._listeners;
			const listenerArray = listeners[ type ];

			if ( listenerArray !== undefined ) {

				const index = listenerArray.indexOf( listener );

				if ( index !== - 1 ) {

					listenerArray.splice( index, 1 );

				}

			}

		}

		dispatchEvent( event ) {

			if ( this._listeners === undefined ) return;

			const listeners = this._listeners;
			const listenerArray = listeners[ event.type ];

			if ( listenerArray !== undefined ) {

				event.target = this;

				// Make a copy, in case listeners are removed while iterating.
				const array = listenerArray.slice( 0 );

				for ( let i = 0, l = array.length; i < l; i ++ ) {

					array[ i ].call( this, event );

				}

				event.target = null;

			}

		}

	}

	const _lut = [ '00', '01', '02', '03', '04', '05', '06', '07', '08', '09', '0a', '0b', '0c', '0d', '0e', '0f', '10', '11', '12', '13', '14', '15', '16', '17', '18', '19', '1a', '1b', '1c', '1d', '1e', '1f', '20', '21', '22', '23', '24', '25', '26', '27', '28', '29', '2a', '2b', '2c', '2d', '2e', '2f', '30', '31', '32', '33', '34', '35', '36', '37', '38', '39', '3a', '3b', '3c', '3d', '3e', '3f', '40', '41', '42', '43', '44', '45', '46', '47', '48', '49', '4a', '4b', '4c', '4d', '4e', '4f', '50', '51', '52', '53', '54', '55', '56', '57', '58', '59', '5a', '5b', '5c', '5d', '5e', '5f', '60', '61', '62', '63', '64', '65', '66', '67', '68', '69', '6a', '6b', '6c', '6d', '6e', '6f', '70', '71', '72', '73', '74', '75', '76', '77', '78', '79', '7a', '7b', '7c', '7d', '7e', '7f', '80', '81', '82', '83', '84', '85', '86', '87', '88', '89', '8a', '8b', '8c', '8d', '8e', '8f', '90', '91', '92', '93', '94', '95', '96', '97', '98', '99', '9a', '9b', '9c', '9d', '9e', '9f', 'a0', 'a1', 'a2', 'a3', 'a4', 'a5', 'a6', 'a7', 'a8', 'a9', 'aa', 'ab', 'ac', 'ad', 'ae', 'af', 'b0', 'b1', 'b2', 'b3', 'b4', 'b5', 'b6', 'b7', 'b8', 'b9', 'ba', 'bb', 'bc', 'bd', 'be', 'bf', 'c0', 'c1', 'c2', 'c3', 'c4', 'c5', 'c6', 'c7', 'c8', 'c9', 'ca', 'cb', 'cc', 'cd', 'ce', 'cf', 'd0', 'd1', 'd2', 'd3', 'd4', 'd5', 'd6', 'd7', 'd8', 'd9', 'da', 'db', 'dc', 'dd', 'de', 'df', 'e0', 'e1', 'e2', 'e3', 'e4', 'e5', 'e6', 'e7', 'e8', 'e9', 'ea', 'eb', 'ec', 'ed', 'ee', 'ef', 'f0', 'f1', 'f2', 'f3', 'f4', 'f5', 'f6', 'f7', 'f8', 'f9', 'fa', 'fb', 'fc', 'fd', 'fe', 'ff' ];

	let _seed = 1234567;


	const DEG2RAD = Math.PI / 180;
	const RAD2DEG = 180 / Math.PI;

	// http://stackoverflow.com/questions/105034/how-to-create-a-guid-uuid-in-javascript/21963136#21963136
	function generateUUID() {

		const d0 = Math.random() * 0xffffffff | 0;
		const d1 = Math.random() * 0xffffffff | 0;
		const d2 = Math.random() * 0xffffffff | 0;
		const d3 = Math.random() * 0xffffffff | 0;
		const uuid = _lut[ d0 & 0xff ] + _lut[ d0 >> 8 & 0xff ] + _lut[ d0 >> 16 & 0xff ] + _lut[ d0 >> 24 & 0xff ] + '-' +
				_lut[ d1 & 0xff ] + _lut[ d1 >> 8 & 0xff ] + '-' + _lut[ d1 >> 16 & 0x0f | 0x40 ] + _lut[ d1 >> 24 & 0xff ] + '-' +
				_lut[ d2 & 0x3f | 0x80 ] + _lut[ d2 >> 8 & 0xff ] + '-' + _lut[ d2 >> 16 & 0xff ] + _lut[ d2 >> 24 & 0xff ] +
				_lut[ d3 & 0xff ] + _lut[ d3 >> 8 & 0xff ] + _lut[ d3 >> 16 & 0xff ] + _lut[ d3 >> 24 & 0xff ];

		// .toLowerCase() here flattens concatenated strings to save heap memory space.
		return uuid.toLowerCase();

	}

	function clamp( value, min, max ) {

		return Math.max( min, Math.min( max, value ) );

	}

	// compute euclidean modulo of m % n
	// https://en.wikipedia.org/wiki/Modulo_operation
	function euclideanModulo( n, m ) {

		return ( ( n % m ) + m ) % m;

	}

	// Linear mapping from range <a1, a2> to range <b1, b2>
	function mapLinear( x, a1, a2, b1, b2 ) {

		return b1 + ( x - a1 ) * ( b2 - b1 ) / ( a2 - a1 );

	}

	// https://www.gamedev.net/tutorials/programming/general-and-gameplay-programming/inverse-lerp-a-super-useful-yet-often-overlooked-function-r5230/
	function inverseLerp( x, y, value ) {

		if ( x !== y ) {

			return ( value - x ) / ( y - x );

		} else {

			return 0;

		}

	}

	// https://en.wikipedia.org/wiki/Linear_interpolation
	function lerp( x, y, t ) {

		return ( 1 - t ) * x + t * y;

	}

	// http://www.rorydriscoll.com/2016/03/07/frame-rate-independent-damping-using-lerp/
	function damp( x, y, lambda, dt ) {

		return lerp( x, y, 1 - Math.exp( - lambda * dt ) );

	}

	// https://www.desmos.com/calculator/vcsjnyz7x4
	function pingpong( x, length = 1 ) {

		return length - Math.abs( euclideanModulo( x, length * 2 ) - length );

	}

	// http://en.wikipedia.org/wiki/Smoothstep
	function smoothstep( x, min, max ) {

		if ( x <= min ) return 0;
		if ( x >= max ) return 1;

		x = ( x - min ) / ( max - min );

		return x * x * ( 3 - 2 * x );

	}

	function smootherstep( x, min, max ) {

		if ( x <= min ) return 0;
		if ( x >= max ) return 1;

		x = ( x - min ) / ( max - min );

		return x * x * x * ( x * ( x * 6 - 15 ) + 10 );

	}

	// Random integer from <low, high> interval
	function randInt( low, high ) {

		return low + Math.floor( Math.random() * ( high - low + 1 ) );

	}

	// Random float from <low, high> interval
	function randFloat( low, high ) {

		return low + Math.random() * ( high - low );

	}

	// Random float from <-range/2, range/2> interval
	function randFloatSpread( range ) {

		return range * ( 0.5 - Math.random() );

	}

	// Deterministic pseudo-random float in the interval [ 0, 1 ]
	function seededRandom( s ) {

		if ( s !== undefined ) _seed = s;

		// Mulberry32 generator

		let t = _seed += 0x6D2B79F5;

		t = Math.imul( t ^ t >>> 15, t | 1 );

		t ^= t + Math.imul( t ^ t >>> 7, t | 61 );

		return ( ( t ^ t >>> 14 ) >>> 0 ) / 4294967296;

	}

	function degToRad( degrees ) {

		return degrees * DEG2RAD;

	}

	function radToDeg( radians ) {

		return radians * RAD2DEG;

	}

	function isPowerOfTwo( value ) {

		return ( value & ( value - 1 ) ) === 0 && value !== 0;

	}

	function ceilPowerOfTwo( value ) {

		return Math.pow( 2, Math.ceil( Math.log( value ) / Math.LN2 ) );

	}

	function floorPowerOfTwo( value ) {

		return Math.pow( 2, Math.floor( Math.log( value ) / Math.LN2 ) );

	}

	function setQuaternionFromProperEuler( q, a, b, c, order ) {

		// Intrinsic Proper Euler Angles - see https://en.wikipedia.org/wiki/Euler_angles

		// rotations are applied to the axes in the order specified by 'order'
		// rotation by angle 'a' is applied first, then by angle 'b', then by angle 'c'
		// angles are in radians

		const cos = Math.cos;
		const sin = Math.sin;

		const c2 = cos( b / 2 );
		const s2 = sin( b / 2 );

		const c13 = cos( ( a + c ) / 2 );
		const s13 = sin( ( a + c ) / 2 );

		const c1_3 = cos( ( a - c ) / 2 );
		const s1_3 = sin( ( a - c ) / 2 );

		const c3_1 = cos( ( c - a ) / 2 );
		const s3_1 = sin( ( c - a ) / 2 );

		switch ( order ) {

			case 'XYX':
				q.set( c2 * s13, s2 * c1_3, s2 * s1_3, c2 * c13 );
				break;

			case 'YZY':
				q.set( s2 * s1_3, c2 * s13, s2 * c1_3, c2 * c13 );
				break;

			case 'ZXZ':
				q.set( s2 * c1_3, s2 * s1_3, c2 * s13, c2 * c13 );
				break;

			case 'XZX':
				q.set( c2 * s13, s2 * s3_1, s2 * c3_1, c2 * c13 );
				break;

			case 'YXY':
				q.set( s2 * c3_1, c2 * s13, s2 * s3_1, c2 * c13 );
				break;

			case 'ZYZ':
				q.set( s2 * s3_1, s2 * c3_1, c2 * s13, c2 * c13 );
				break;

			default:
				console.warn( 'THREE.MathUtils: .setQuaternionFromProperEuler() encountered an unknown order: ' + order );

		}

	}

	function denormalize( value, array ) {

		switch ( array.constructor ) {

			case Float32Array:

				return value;

			case Uint32Array:

				return value / 4294967295.0;

			case Uint16Array:

				return value / 65535.0;

			case Uint8Array:

				return value / 255.0;

			case Int32Array:

				return Math.max( value / 2147483647.0, - 1.0 );

			case Int16Array:

				return Math.max( value / 32767.0, - 1.0 );

			case Int8Array:

				return Math.max( value / 127.0, - 1.0 );

			default:

				throw new Error( 'Invalid component type.' );

		}

	}

	function normalize( value, array ) {

		switch ( array.constructor ) {

			case Float32Array:

				return value;

			case Uint32Array:

				return Math.round( value * 4294967295.0 );

			case Uint16Array:

				return Math.round( value * 65535.0 );

			case Uint8Array:

				return Math.round( value * 255.0 );

			case Int32Array:

				return Math.round( value * 2147483647.0 );

			case Int16Array:

				return Math.round( value * 32767.0 );

			case Int8Array:

				return Math.round( value * 127.0 );

			default:

				throw new Error( 'Invalid component type.' );

		}

	}

	const MathUtils = {
		DEG2RAD: DEG2RAD,
		RAD2DEG: RAD2DEG,
		generateUUID: generateUUID,
		clamp: clamp,
		euclideanModulo: euclideanModulo,
		mapLinear: mapLinear,
		inverseLerp: inverseLerp,
		lerp: lerp,
		damp: damp,
		pingpong: pingpong,
		smoothstep: smoothstep,
		smootherstep: smootherstep,
		randInt: randInt,
		randFloat: randFloat,
		randFloatSpread: randFloatSpread,
		seededRandom: seededRandom,
		degToRad: degToRad,
		radToDeg: radToDeg,
		isPowerOfTwo: isPowerOfTwo,
		ceilPowerOfTwo: ceilPowerOfTwo,
		floorPowerOfTwo: floorPowerOfTwo,
		setQuaternionFromProperEuler: setQuaternionFromProperEuler,
		normalize: normalize,
		denormalize: denormalize
	};

	class Vector2 {

		constructor( x = 0, y = 0 ) {

			Vector2.prototype.isVector2 = true;

			this.x = x;
			this.y = y;

		}

		get width() {

			return this.x;

		}

		set width( value ) {

			this.x = value;

		}

		get height() {

			return this.y;

		}

		set height( value ) {

			this.y = value;

		}

		set( x, y ) {

			this.x = x;
			this.y = y;

			return this;

		}

		setScalar( scalar ) {

			this.x = scalar;
			this.y = scalar;

			return this;

		}

		setX( x ) {

			this.x = x;

			return this;

		}

		setY( y ) {

			this.y = y;

			return this;

		}

		setComponent( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

			return this;

		}

		getComponent( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				default: throw new Error( 'index is out of range: ' + index );

			}

		}

		clone() {

			return new this.constructor( this.x, this.y );

		}

		copy( v ) {

			this.x = v.x;
			this.y = v.y;

			return this;

		}

		add( v ) {

			this.x += v.x;
			this.y += v.y;

			return this;

		}

		addScalar( s ) {

			this.x += s;
			this.y += s;

			return this;

		}

		addVectors( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;

			return this;

		}

		addScaledVector( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;

			return this;

		}

		sub( v ) {

			this.x -= v.x;
			this.y -= v.y;

			return this;

		}

		subScalar( s ) {

			this.x -= s;
			this.y -= s;

			return this;

		}

		subVectors( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;

			return this;

		}

		multiply( v ) {

			this.x *= v.x;
			this.y *= v.y;

			return this;

		}

		multiplyScalar( scalar ) {

			this.x *= scalar;
			this.y *= scalar;

			return this;

		}

		divide( v ) {

			this.x /= v.x;
			this.y /= v.y;

			return this;

		}

		divideScalar( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		}

		applyMatrix3( m ) {

			const x = this.x, y = this.y;
			const e = m.elements;

			this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ];
			this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ];

			return this;

		}

		min( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );

			return this;

		}

		max( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );

			return this;

		}

		clamp( min, max ) {

			// assumes min < max, componentwise

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );

			return this;

		}

		clampScalar( minVal, maxVal ) {

			this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
			this.y = Math.max( minVal, Math.min( maxVal, this.y ) );

			return this;

		}

		clampLength( min, max ) {

			const length = this.length();

			return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

		}

		floor() {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );

			return this;

		}

		ceil() {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );

			return this;

		}

		round() {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );

			return this;

		}

		roundToZero() {

			this.x = Math.trunc( this.x );
			this.y = Math.trunc( this.y );

			return this;

		}

		negate() {

			this.x = - this.x;
			this.y = - this.y;

			return this;

		}

		dot( v ) {

			return this.x * v.x + this.y * v.y;

		}

		cross( v ) {

			return this.x * v.y - this.y * v.x;

		}

		lengthSq() {

			return this.x * this.x + this.y * this.y;

		}

		length() {

			return Math.sqrt( this.x * this.x + this.y * this.y );

		}

		manhattanLength() {

			return Math.abs( this.x ) + Math.abs( this.y );

		}

		normalize() {

			return this.divideScalar( this.length() || 1 );

		}

		angle() {

			// computes the angle in radians with respect to the positive x-axis

			const angle = Math.atan2( - this.y, - this.x ) + Math.PI;

			return angle;

		}

		angleTo( v ) {

			const denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

			if ( denominator === 0 ) return Math.PI / 2;

			const theta = this.dot( v ) / denominator;

			// clamp, to handle numerical problems

			return Math.acos( clamp( theta, - 1, 1 ) );

		}

		distanceTo( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		}

		distanceToSquared( v ) {

			const dx = this.x - v.x, dy = this.y - v.y;
			return dx * dx + dy * dy;

		}

		manhattanDistanceTo( v ) {

			return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y );

		}

		setLength( length ) {

			return this.normalize().multiplyScalar( length );

		}

		lerp( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;

			return this;

		}

		lerpVectors( v1, v2, alpha ) {

			this.x = v1.x + ( v2.x - v1.x ) * alpha;
			this.y = v1.y + ( v2.y - v1.y ) * alpha;

			return this;

		}

		equals( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) );

		}

		fromArray( array, offset = 0 ) {

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];

			return this;

		}

		toArray( array = [], offset = 0 ) {

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;

			return array;

		}

		fromBufferAttribute( attribute, index ) {

			this.x = attribute.getX( index );
			this.y = attribute.getY( index );

			return this;

		}

		rotateAround( center, angle ) {

			const c = Math.cos( angle ), s = Math.sin( angle );

			const x = this.x - center.x;
			const y = this.y - center.y;

			this.x = x * c - y * s + center.x;
			this.y = x * s + y * c + center.y;

			return this;

		}

		random() {

			this.x = Math.random();
			this.y = Math.random();

			return this;

		}

		*[ Symbol.iterator ]() {

			yield this.x;
			yield this.y;

		}

	}

	class Matrix3 {

		constructor( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

			Matrix3.prototype.isMatrix3 = true;

			this.elements = [

				1, 0, 0,
				0, 1, 0,
				0, 0, 1

			];

			if ( n11 !== undefined ) {

				this.set( n11, n12, n13, n21, n22, n23, n31, n32, n33 );

			}

		}

		set( n11, n12, n13, n21, n22, n23, n31, n32, n33 ) {

			const te = this.elements;

			te[ 0 ] = n11; te[ 1 ] = n21; te[ 2 ] = n31;
			te[ 3 ] = n12; te[ 4 ] = n22; te[ 5 ] = n32;
			te[ 6 ] = n13; te[ 7 ] = n23; te[ 8 ] = n33;

			return this;

		}

		identity() {

			this.set(

				1, 0, 0,
				0, 1, 0,
				0, 0, 1

			);

			return this;

		}

		copy( m ) {

			const te = this.elements;
			const me = m.elements;

			te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ];
			te[ 3 ] = me[ 3 ]; te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ];
			te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ]; te[ 8 ] = me[ 8 ];

			return this;

		}

		extractBasis( xAxis, yAxis, zAxis ) {

			xAxis.setFromMatrix3Column( this, 0 );
			yAxis.setFromMatrix3Column( this, 1 );
			zAxis.setFromMatrix3Column( this, 2 );

			return this;

		}

		setFromMatrix4( m ) {

			const me = m.elements;

			this.set(

				me[ 0 ], me[ 4 ], me[ 8 ],
				me[ 1 ], me[ 5 ], me[ 9 ],
				me[ 2 ], me[ 6 ], me[ 10 ]

			);

			return this;

		}

		multiply( m ) {

			return this.multiplyMatrices( this, m );

		}

		premultiply( m ) {

			return this.multiplyMatrices( m, this );

		}

		multiplyMatrices( a, b ) {

			const ae = a.elements;
			const be = b.elements;
			const te = this.elements;

			const a11 = ae[ 0 ], a12 = ae[ 3 ], a13 = ae[ 6 ];
			const a21 = ae[ 1 ], a22 = ae[ 4 ], a23 = ae[ 7 ];
			const a31 = ae[ 2 ], a32 = ae[ 5 ], a33 = ae[ 8 ];

			const b11 = be[ 0 ], b12 = be[ 3 ], b13 = be[ 6 ];
			const b21 = be[ 1 ], b22 = be[ 4 ], b23 = be[ 7 ];
			const b31 = be[ 2 ], b32 = be[ 5 ], b33 = be[ 8 ];

			te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31;
			te[ 3 ] = a11 * b12 + a12 * b22 + a13 * b32;
			te[ 6 ] = a11 * b13 + a12 * b23 + a13 * b33;

			te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31;
			te[ 4 ] = a21 * b12 + a22 * b22 + a23 * b32;
			te[ 7 ] = a21 * b13 + a22 * b23 + a23 * b33;

			te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31;
			te[ 5 ] = a31 * b12 + a32 * b22 + a33 * b32;
			te[ 8 ] = a31 * b13 + a32 * b23 + a33 * b33;

			return this;

		}

		multiplyScalar( s ) {

			const te = this.elements;

			te[ 0 ] *= s; te[ 3 ] *= s; te[ 6 ] *= s;
			te[ 1 ] *= s; te[ 4 ] *= s; te[ 7 ] *= s;
			te[ 2 ] *= s; te[ 5 ] *= s; te[ 8 ] *= s;

			return this;

		}

		determinant() {

			const te = this.elements;

			const a = te[ 0 ], b = te[ 1 ], c = te[ 2 ],
				d = te[ 3 ], e = te[ 4 ], f = te[ 5 ],
				g = te[ 6 ], h = te[ 7 ], i = te[ 8 ];

			return a * e * i - a * f * h - b * d * i + b * f * g + c * d * h - c * e * g;

		}

		invert() {

			const te = this.elements,

				n11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ],
				n12 = te[ 3 ], n22 = te[ 4 ], n32 = te[ 5 ],
				n13 = te[ 6 ], n23 = te[ 7 ], n33 = te[ 8 ],

				t11 = n33 * n22 - n32 * n23,
				t12 = n32 * n13 - n33 * n12,
				t13 = n23 * n12 - n22 * n13,

				det = n11 * t11 + n21 * t12 + n31 * t13;

			if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0 );

			const detInv = 1 / det;

			te[ 0 ] = t11 * detInv;
			te[ 1 ] = ( n31 * n23 - n33 * n21 ) * detInv;
			te[ 2 ] = ( n32 * n21 - n31 * n22 ) * detInv;

			te[ 3 ] = t12 * detInv;
			te[ 4 ] = ( n33 * n11 - n31 * n13 ) * detInv;
			te[ 5 ] = ( n31 * n12 - n32 * n11 ) * detInv;

			te[ 6 ] = t13 * detInv;
			te[ 7 ] = ( n21 * n13 - n23 * n11 ) * detInv;
			te[ 8 ] = ( n22 * n11 - n21 * n12 ) * detInv;

			return this;

		}

		transpose() {

			let tmp;
			const m = this.elements;

			tmp = m[ 1 ]; m[ 1 ] = m[ 3 ]; m[ 3 ] = tmp;
			tmp = m[ 2 ]; m[ 2 ] = m[ 6 ]; m[ 6 ] = tmp;
			tmp = m[ 5 ]; m[ 5 ] = m[ 7 ]; m[ 7 ] = tmp;

			return this;

		}

		getNormalMatrix( matrix4 ) {

			return this.setFromMatrix4( matrix4 ).invert().transpose();

		}

		transposeIntoArray( r ) {

			const m = this.elements;

			r[ 0 ] = m[ 0 ];
			r[ 1 ] = m[ 3 ];
			r[ 2 ] = m[ 6 ];
			r[ 3 ] = m[ 1 ];
			r[ 4 ] = m[ 4 ];
			r[ 5 ] = m[ 7 ];
			r[ 6 ] = m[ 2 ];
			r[ 7 ] = m[ 5 ];
			r[ 8 ] = m[ 8 ];

			return this;

		}

		setUvTransform( tx, ty, sx, sy, rotation, cx, cy ) {

			const c = Math.cos( rotation );
			const s = Math.sin( rotation );

			this.set(
				sx * c, sx * s, - sx * ( c * cx + s * cy ) + cx + tx,
				- sy * s, sy * c, - sy * ( - s * cx + c * cy ) + cy + ty,
				0, 0, 1
			);

			return this;

		}

		//

		scale( sx, sy ) {

			this.premultiply( _m3.makeScale( sx, sy ) );

			return this;

		}

		rotate( theta ) {

			this.premultiply( _m3.makeRotation( - theta ) );

			return this;

		}

		translate( tx, ty ) {

			this.premultiply( _m3.makeTranslation( tx, ty ) );

			return this;

		}

		// for 2D Transforms

		makeTranslation( x, y ) {

			if ( x.isVector2 ) {

				this.set(

					1, 0, x.x,
					0, 1, x.y,
					0, 0, 1

				);

			} else {

				this.set(

					1, 0, x,
					0, 1, y,
					0, 0, 1

				);

			}

			return this;

		}

		makeRotation( theta ) {

			// counterclockwise

			const c = Math.cos( theta );
			const s = Math.sin( theta );

			this.set(

				c, - s, 0,
				s, c, 0,
				0, 0, 1

			);

			return this;

		}

		makeScale( x, y ) {

			this.set(

				x, 0, 0,
				0, y, 0,
				0, 0, 1

			);

			return this;

		}

		//

		equals( matrix ) {

			const te = this.elements;
			const me = matrix.elements;

			for ( let i = 0; i < 9; i ++ ) {

				if ( te[ i ] !== me[ i ] ) return false;

			}

			return true;

		}

		fromArray( array, offset = 0 ) {

			for ( let i = 0; i < 9; i ++ ) {

				this.elements[ i ] = array[ i + offset ];

			}

			return this;

		}

		toArray( array = [], offset = 0 ) {

			const te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];

			array[ offset + 3 ] = te[ 3 ];
			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];

			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];
			array[ offset + 8 ] = te[ 8 ];

			return array;

		}

		clone() {

			return new this.constructor().fromArray( this.elements );

		}

	}

	const _m3 = /*@__PURE__*/ new Matrix3();

	function arrayNeedsUint32( array ) {

		// assumes larger values usually on last

		for ( let i = array.length - 1; i >= 0; -- i ) {

			if ( array[ i ] >= 65535 ) return true; // account for PRIMITIVE_RESTART_FIXED_INDEX, #24565

		}

		return false;

	}

	function createElementNS( name ) {

		return document.createElementNS( 'http://www.w3.org/1999/xhtml', name );

	}

	function createCanvasElement() {

		const canvas = createElementNS( 'canvas' );
		canvas.style.display = 'block';
		return canvas;

	}

	const _cache = {};

	function warnOnce( message ) {

		if ( message in _cache ) return;

		_cache[ message ] = true;

		console.warn( message );

	}

	function SRGBToLinear( c ) {

		return ( c < 0.04045 ) ? c * 0.0773993808 : Math.pow( c * 0.9478672986 + 0.0521327014, 2.4 );

	}

	function LinearToSRGB( c ) {

		return ( c < 0.0031308 ) ? c * 12.92 : 1.055 * ( Math.pow( c, 0.41666 ) ) - 0.055;

	}

	/**
	 * Matrices converting P3 <-> Rec. 709 primaries, without gamut mapping
	 * or clipping. Based on W3C specifications for sRGB and Display P3,
	 * and ICC specifications for the D50 connection space. Values in/out
	 * are _linear_ sRGB and _linear_ Display P3.
	 *
	 * Note that both sRGB and Display P3 use the sRGB transfer functions.
	 *
	 * Reference:
	 * - http://www.russellcottrell.com/photo/matrixCalculator.htm
	 */

	const LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 = /*@__PURE__*/ new Matrix3().fromArray( [
		0.8224621, 0.0331941, 0.0170827,
		0.1775380, 0.9668058, 0.0723974,
		- 0.0000001, 0.0000001, 0.9105199
	] );

	const LINEAR_DISPLAY_P3_TO_LINEAR_SRGB = /*@__PURE__*/ new Matrix3().fromArray( [
		1.2249401, - 0.0420569, - 0.0196376,
		- 0.2249404, 1.0420571, - 0.0786361,
		0.0000001, 0.0000000, 1.0982735
	] );

	function DisplayP3ToLinearSRGB( color ) {

		// Display P3 uses the sRGB transfer functions
		return color.convertSRGBToLinear().applyMatrix3( LINEAR_DISPLAY_P3_TO_LINEAR_SRGB );

	}

	function LinearSRGBToDisplayP3( color ) {

		// Display P3 uses the sRGB transfer functions
		return color.applyMatrix3( LINEAR_SRGB_TO_LINEAR_DISPLAY_P3 ).convertLinearToSRGB();

	}

	// Conversions from <source> to Linear-sRGB reference space.
	const TO_LINEAR = {
		[ LinearSRGBColorSpace ]: ( color ) => color,
		[ SRGBColorSpace ]: ( color ) => color.convertSRGBToLinear(),
		[ DisplayP3ColorSpace ]: DisplayP3ToLinearSRGB,
	};

	// Conversions to <target> from Linear-sRGB reference space.
	const FROM_LINEAR = {
		[ LinearSRGBColorSpace ]: ( color ) => color,
		[ SRGBColorSpace ]: ( color ) => color.convertLinearToSRGB(),
		[ DisplayP3ColorSpace ]: LinearSRGBToDisplayP3,
	};

	const ColorManagement = {

		enabled: true,

		get legacyMode() {

			console.warn( 'THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.' );

			return ! this.enabled;

		},

		set legacyMode( legacyMode ) {

			console.warn( 'THREE.ColorManagement: .legacyMode=false renamed to .enabled=true in r150.' );

			this.enabled = ! legacyMode;

		},

		get workingColorSpace() {

			return LinearSRGBColorSpace;

		},

		set workingColorSpace( colorSpace ) {

			console.warn( 'THREE.ColorManagement: .workingColorSpace is readonly.' );

		},

		convert: function ( color, sourceColorSpace, targetColorSpace ) {

			if ( this.enabled === false || sourceColorSpace === targetColorSpace || ! sourceColorSpace || ! targetColorSpace ) {

				return color;

			}

			const sourceToLinear = TO_LINEAR[ sourceColorSpace ];
			const targetFromLinear = FROM_LINEAR[ targetColorSpace ];

			if ( sourceToLinear === undefined || targetFromLinear === undefined ) {

				throw new Error( `Unsupported color space conversion, "${ sourceColorSpace }" to "${ targetColorSpace }".` );

			}

			return targetFromLinear( sourceToLinear( color ) );

		},

		fromWorkingColorSpace: function ( color, targetColorSpace ) {

			return this.convert( color, this.workingColorSpace, targetColorSpace );

		},

		toWorkingColorSpace: function ( color, sourceColorSpace ) {

			return this.convert( color, sourceColorSpace, this.workingColorSpace );

		},

	};

	let _canvas;

	class ImageUtils {

		static getDataURL( image ) {

			if ( /^data:/i.test( image.src ) ) {

				return image.src;

			}

			if ( typeof HTMLCanvasElement === 'undefined' ) {

				return image.src;

			}

			let canvas;

			if ( image instanceof HTMLCanvasElement ) {

				canvas = image;

			} else {

				if ( _canvas === undefined ) _canvas = createElementNS( 'canvas' );

				_canvas.width = image.width;
				_canvas.height = image.height;

				const context = _canvas.getContext( '2d' );

				if ( image instanceof ImageData ) {

					context.putImageData( image, 0, 0 );

				} else {

					context.drawImage( image, 0, 0, image.width, image.height );

				}

				canvas = _canvas;

			}

			if ( canvas.width > 2048 || canvas.height > 2048 ) {

				console.warn( 'THREE.ImageUtils.getDataURL: Image converted to jpg for performance reasons', image );

				return canvas.toDataURL( 'image/jpeg', 0.6 );

			} else {

				return canvas.toDataURL( 'image/png' );

			}

		}

		static sRGBToLinear( image ) {

			if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
				( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
				( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {

				const canvas = createElementNS( 'canvas' );

				canvas.width = image.width;
				canvas.height = image.height;

				const context = canvas.getContext( '2d' );
				context.drawImage( image, 0, 0, image.width, image.height );

				const imageData = context.getImageData( 0, 0, image.width, image.height );
				const data = imageData.data;

				for ( let i = 0; i < data.length; i ++ ) {

					data[ i ] = SRGBToLinear( data[ i ] / 255 ) * 255;

				}

				context.putImageData( imageData, 0, 0 );

				return canvas;

			} else if ( image.data ) {

				const data = image.data.slice( 0 );

				for ( let i = 0; i < data.length; i ++ ) {

					if ( data instanceof Uint8Array || data instanceof Uint8ClampedArray ) {

						data[ i ] = Math.floor( SRGBToLinear( data[ i ] / 255 ) * 255 );

					} else {

						// assuming float

						data[ i ] = SRGBToLinear( data[ i ] );

					}

				}

				return {
					data: data,
					width: image.width,
					height: image.height
				};

			} else {

				console.warn( 'THREE.ImageUtils.sRGBToLinear(): Unsupported image type. No color space conversion applied.' );
				return image;

			}

		}

	}

	let sourceId = 0;

	class Source {

		constructor( data = null ) {

			this.isSource = true;

			Object.defineProperty( this, 'id', { value: sourceId ++ } );

			this.uuid = generateUUID();

			this.data = data;

			this.version = 0;

		}

		set needsUpdate( value ) {

			if ( value === true ) this.version ++;

		}

		toJSON( meta ) {

			const isRootObject = ( meta === undefined || typeof meta === 'string' );

			if ( ! isRootObject && meta.images[ this.uuid ] !== undefined ) {

				return meta.images[ this.uuid ];

			}

			const output = {
				uuid: this.uuid,
				url: ''
			};

			const data = this.data;

			if ( data !== null ) {

				let url;

				if ( Array.isArray( data ) ) {

					// cube texture

					url = [];

					for ( let i = 0, l = data.length; i < l; i ++ ) {

						if ( data[ i ].isDataTexture ) {

							url.push( serializeImage( data[ i ].image ) );

						} else {

							url.push( serializeImage( data[ i ] ) );

						}

					}

				} else {

					// texture

					url = serializeImage( data );

				}

				output.url = url;

			}

			if ( ! isRootObject ) {

				meta.images[ this.uuid ] = output;

			}

			return output;

		}

	}

	function serializeImage( image ) {

		if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
			( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
			( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {

			// default images

			return ImageUtils.getDataURL( image );

		} else {

			if ( image.data ) {

				// images of DataTexture

				return {
					data: Array.from( image.data ),
					width: image.width,
					height: image.height,
					type: image.data.constructor.name
				};

			} else {

				console.warn( 'THREE.Texture: Unable to serialize Texture.' );
				return {};

			}

		}

	}

	let _textureId = 0;

	class Texture extends EventDispatcher {

		constructor( image = Texture.DEFAULT_IMAGE, mapping = Texture.DEFAULT_MAPPING, wrapS = ClampToEdgeWrapping, wrapT = ClampToEdgeWrapping, magFilter = LinearFilter, minFilter = LinearMipmapLinearFilter, format = RGBAFormat, type = UnsignedByteType, anisotropy = Texture.DEFAULT_ANISOTROPY, colorSpace = NoColorSpace ) {

			super();

			this.isTexture = true;

			Object.defineProperty( this, 'id', { value: _textureId ++ } );

			this.uuid = generateUUID();

			this.name = '';

			this.source = new Source( image );
			this.mipmaps = [];

			this.mapping = mapping;
			this.channel = 0;

			this.wrapS = wrapS;
			this.wrapT = wrapT;

			this.magFilter = magFilter;
			this.minFilter = minFilter;

			this.anisotropy = anisotropy;

			this.format = format;
			this.internalFormat = null;
			this.type = type;

			this.offset = new Vector2( 0, 0 );
			this.repeat = new Vector2( 1, 1 );
			this.center = new Vector2( 0, 0 );
			this.rotation = 0;

			this.matrixAutoUpdate = true;
			this.matrix = new Matrix3();

			this.generateMipmaps = true;
			this.premultiplyAlpha = false;
			this.flipY = true;
			this.unpackAlignment = 4;	// valid values: 1, 2, 4, 8 (see http://www.khronos.org/opengles/sdk/docs/man/xhtml/glPixelStorei.xml)

			if ( typeof colorSpace === 'string' ) {

				this.colorSpace = colorSpace;

			} else { // @deprecated, r152

				warnOnce( 'THREE.Texture: Property .encoding has been replaced by .colorSpace.' );
				this.colorSpace = colorSpace === sRGBEncoding ? SRGBColorSpace : NoColorSpace;

			}


			this.userData = {};

			this.version = 0;
			this.onUpdate = null;

			this.isRenderTargetTexture = false; // indicates whether a texture belongs to a render target or not
			this.needsPMREMUpdate = false; // indicates whether this texture should be processed by PMREMGenerator or not (only relevant for render target textures)

		}

		get image() {

			return this.source.data;

		}

		set image( value = null ) {

			this.source.data = value;

		}

		updateMatrix() {

			this.matrix.setUvTransform( this.offset.x, this.offset.y, this.repeat.x, this.repeat.y, this.rotation, this.center.x, this.center.y );

		}

		clone() {

			return new this.constructor().copy( this );

		}

		copy( source ) {

			this.name = source.name;

			this.source = source.source;
			this.mipmaps = source.mipmaps.slice( 0 );

			this.mapping = source.mapping;
			this.channel = source.channel;

			this.wrapS = source.wrapS;
			this.wrapT = source.wrapT;

			this.magFilter = source.magFilter;
			this.minFilter = source.minFilter;

			this.anisotropy = source.anisotropy;

			this.format = source.format;
			this.internalFormat = source.internalFormat;
			this.type = source.type;

			this.offset.copy( source.offset );
			this.repeat.copy( source.repeat );
			this.center.copy( source.center );
			this.rotation = source.rotation;

			this.matrixAutoUpdate = source.matrixAutoUpdate;
			this.matrix.copy( source.matrix );

			this.generateMipmaps = source.generateMipmaps;
			this.premultiplyAlpha = source.premultiplyAlpha;
			this.flipY = source.flipY;
			this.unpackAlignment = source.unpackAlignment;
			this.colorSpace = source.colorSpace;

			this.userData = JSON.parse( JSON.stringify( source.userData ) );

			this.needsUpdate = true;

			return this;

		}

		toJSON( meta ) {

			const isRootObject = ( meta === undefined || typeof meta === 'string' );

			if ( ! isRootObject && meta.textures[ this.uuid ] !== undefined ) {

				return meta.textures[ this.uuid ];

			}

			const output = {

				metadata: {
					version: 4.6,
					type: 'Texture',
					generator: 'Texture.toJSON'
				},

				uuid: this.uuid,
				name: this.name,

				image: this.source.toJSON( meta ).uuid,

				mapping: this.mapping,
				channel: this.channel,

				repeat: [ this.repeat.x, this.repeat.y ],
				offset: [ this.offset.x, this.offset.y ],
				center: [ this.center.x, this.center.y ],
				rotation: this.rotation,

				wrap: [ this.wrapS, this.wrapT ],

				format: this.format,
				internalFormat: this.internalFormat,
				type: this.type,
				colorSpace: this.colorSpace,

				minFilter: this.minFilter,
				magFilter: this.magFilter,
				anisotropy: this.anisotropy,

				flipY: this.flipY,

				generateMipmaps: this.generateMipmaps,
				premultiplyAlpha: this.premultiplyAlpha,
				unpackAlignment: this.unpackAlignment

			};

			if ( Object.keys( this.userData ).length > 0 ) output.userData = this.userData;

			if ( ! isRootObject ) {

				meta.textures[ this.uuid ] = output;

			}

			return output;

		}

		dispose() {

			this.dispatchEvent( { type: 'dispose' } );

		}

		transformUv( uv ) {

			if ( this.mapping !== UVMapping ) return uv;

			uv.applyMatrix3( this.matrix );

			if ( uv.x < 0 || uv.x > 1 ) {

				switch ( this.wrapS ) {

					case RepeatWrapping:

						uv.x = uv.x - Math.floor( uv.x );
						break;

					case ClampToEdgeWrapping:

						uv.x = uv.x < 0 ? 0 : 1;
						break;

					case MirroredRepeatWrapping:

						if ( Math.abs( Math.floor( uv.x ) % 2 ) === 1 ) {

							uv.x = Math.ceil( uv.x ) - uv.x;

						} else {

							uv.x = uv.x - Math.floor( uv.x );

						}

						break;

				}

			}

			if ( uv.y < 0 || uv.y > 1 ) {

				switch ( this.wrapT ) {

					case RepeatWrapping:

						uv.y = uv.y - Math.floor( uv.y );
						break;

					case ClampToEdgeWrapping:

						uv.y = uv.y < 0 ? 0 : 1;
						break;

					case MirroredRepeatWrapping:

						if ( Math.abs( Math.floor( uv.y ) % 2 ) === 1 ) {

							uv.y = Math.ceil( uv.y ) - uv.y;

						} else {

							uv.y = uv.y - Math.floor( uv.y );

						}

						break;

				}

			}

			if ( this.flipY ) {

				uv.y = 1 - uv.y;

			}

			return uv;

		}

		set needsUpdate( value ) {

			if ( value === true ) {

				this.version ++;
				this.source.needsUpdate = true;

			}

		}

		get encoding() { // @deprecated, r152

			warnOnce( 'THREE.Texture: Property .encoding has been replaced by .colorSpace.' );
			return this.colorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding;

		}

		set encoding( encoding ) { // @deprecated, r152

			warnOnce( 'THREE.Texture: Property .encoding has been replaced by .colorSpace.' );
			this.colorSpace = encoding === sRGBEncoding ? SRGBColorSpace : NoColorSpace;

		}

	}

	Texture.DEFAULT_IMAGE = null;
	Texture.DEFAULT_MAPPING = UVMapping;
	Texture.DEFAULT_ANISOTROPY = 1;

	class Vector4 {

		constructor( x = 0, y = 0, z = 0, w = 1 ) {

			Vector4.prototype.isVector4 = true;

			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;

		}

		get width() {

			return this.z;

		}

		set width( value ) {

			this.z = value;

		}

		get height() {

			return this.w;

		}

		set height( value ) {

			this.w = value;

		}

		set( x, y, z, w ) {

			this.x = x;
			this.y = y;
			this.z = z;
			this.w = w;

			return this;

		}

		setScalar( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;
			this.w = scalar;

			return this;

		}

		setX( x ) {

			this.x = x;

			return this;

		}

		setY( y ) {

			this.y = y;

			return this;

		}

		setZ( z ) {

			this.z = z;

			return this;

		}

		setW( w ) {

			this.w = w;

			return this;

		}

		setComponent( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				case 3: this.w = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

			return this;

		}

		getComponent( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				case 3: return this.w;
				default: throw new Error( 'index is out of range: ' + index );

			}

		}

		clone() {

			return new this.constructor( this.x, this.y, this.z, this.w );

		}

		copy( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;
			this.w = ( v.w !== undefined ) ? v.w : 1;

			return this;

		}

		add( v ) {

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;
			this.w += v.w;

			return this;

		}

		addScalar( s ) {

			this.x += s;
			this.y += s;
			this.z += s;
			this.w += s;

			return this;

		}

		addVectors( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;
			this.w = a.w + b.w;

			return this;

		}

		addScaledVector( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;
			this.w += v.w * s;

			return this;

		}

		sub( v ) {

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;
			this.w -= v.w;

			return this;

		}

		subScalar( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;
			this.w -= s;

			return this;

		}

		subVectors( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;
			this.w = a.w - b.w;

			return this;

		}

		multiply( v ) {

			this.x *= v.x;
			this.y *= v.y;
			this.z *= v.z;
			this.w *= v.w;

			return this;

		}

		multiplyScalar( scalar ) {

			this.x *= scalar;
			this.y *= scalar;
			this.z *= scalar;
			this.w *= scalar;

			return this;

		}

		applyMatrix4( m ) {

			const x = this.x, y = this.y, z = this.z, w = this.w;
			const e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] * w;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] * w;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] * w;
			this.w = e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] * w;

			return this;

		}

		divideScalar( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		}

		setAxisAngleFromQuaternion( q ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/quaternionToAngle/index.htm

			// q is assumed to be normalized

			this.w = 2 * Math.acos( q.w );

			const s = Math.sqrt( 1 - q.w * q.w );

			if ( s < 0.0001 ) {

				this.x = 1;
				this.y = 0;
				this.z = 0;

			} else {

				this.x = q.x / s;
				this.y = q.y / s;
				this.z = q.z / s;

			}

			return this;

		}

		setAxisAngleFromRotationMatrix( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToAngle/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			let angle, x, y, z; // variables for result
			const epsilon = 0.01,		// margin to allow for rounding errors
				epsilon2 = 0.1,		// margin to distinguish between 0 and 180 degrees

				te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			if ( ( Math.abs( m12 - m21 ) < epsilon ) &&
			     ( Math.abs( m13 - m31 ) < epsilon ) &&
			     ( Math.abs( m23 - m32 ) < epsilon ) ) {

				// singularity found
				// first check for identity matrix which must have +1 for all terms
				// in leading diagonal and zero in other terms

				if ( ( Math.abs( m12 + m21 ) < epsilon2 ) &&
				     ( Math.abs( m13 + m31 ) < epsilon2 ) &&
				     ( Math.abs( m23 + m32 ) < epsilon2 ) &&
				     ( Math.abs( m11 + m22 + m33 - 3 ) < epsilon2 ) ) {

					// this singularity is identity matrix so angle = 0

					this.set( 1, 0, 0, 0 );

					return this; // zero angle, arbitrary axis

				}

				// otherwise this singularity is angle = 180

				angle = Math.PI;

				const xx = ( m11 + 1 ) / 2;
				const yy = ( m22 + 1 ) / 2;
				const zz = ( m33 + 1 ) / 2;
				const xy = ( m12 + m21 ) / 4;
				const xz = ( m13 + m31 ) / 4;
				const yz = ( m23 + m32 ) / 4;

				if ( ( xx > yy ) && ( xx > zz ) ) {

					// m11 is the largest diagonal term

					if ( xx < epsilon ) {

						x = 0;
						y = 0.707106781;
						z = 0.707106781;

					} else {

						x = Math.sqrt( xx );
						y = xy / x;
						z = xz / x;

					}

				} else if ( yy > zz ) {

					// m22 is the largest diagonal term

					if ( yy < epsilon ) {

						x = 0.707106781;
						y = 0;
						z = 0.707106781;

					} else {

						y = Math.sqrt( yy );
						x = xy / y;
						z = yz / y;

					}

				} else {

					// m33 is the largest diagonal term so base result on this

					if ( zz < epsilon ) {

						x = 0.707106781;
						y = 0.707106781;
						z = 0;

					} else {

						z = Math.sqrt( zz );
						x = xz / z;
						y = yz / z;

					}

				}

				this.set( x, y, z, angle );

				return this; // return 180 deg rotation

			}

			// as we have reached here there are no singularities so we can handle normally

			let s = Math.sqrt( ( m32 - m23 ) * ( m32 - m23 ) +
				( m13 - m31 ) * ( m13 - m31 ) +
				( m21 - m12 ) * ( m21 - m12 ) ); // used to normalize

			if ( Math.abs( s ) < 0.001 ) s = 1;

			// prevent divide by zero, should not happen if matrix is orthogonal and should be
			// caught by singularity test above, but I've left it in just in case

			this.x = ( m32 - m23 ) / s;
			this.y = ( m13 - m31 ) / s;
			this.z = ( m21 - m12 ) / s;
			this.w = Math.acos( ( m11 + m22 + m33 - 1 ) / 2 );

			return this;

		}

		min( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );
			this.w = Math.min( this.w, v.w );

			return this;

		}

		max( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );
			this.w = Math.max( this.w, v.w );

			return this;

		}

		clamp( min, max ) {

			// assumes min < max, componentwise

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );
			this.w = Math.max( min.w, Math.min( max.w, this.w ) );

			return this;

		}

		clampScalar( minVal, maxVal ) {

			this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
			this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
			this.z = Math.max( minVal, Math.min( maxVal, this.z ) );
			this.w = Math.max( minVal, Math.min( maxVal, this.w ) );

			return this;

		}

		clampLength( min, max ) {

			const length = this.length();

			return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

		}

		floor() {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );
			this.w = Math.floor( this.w );

			return this;

		}

		ceil() {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );
			this.w = Math.ceil( this.w );

			return this;

		}

		round() {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );
			this.w = Math.round( this.w );

			return this;

		}

		roundToZero() {

			this.x = Math.trunc( this.x );
			this.y = Math.trunc( this.y );
			this.z = Math.trunc( this.z );
			this.w = Math.trunc( this.w );

			return this;

		}

		negate() {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;
			this.w = - this.w;

			return this;

		}

		dot( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z + this.w * v.w;

		}

		lengthSq() {

			return this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w;

		}

		length() {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z + this.w * this.w );

		}

		manhattanLength() {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z ) + Math.abs( this.w );

		}

		normalize() {

			return this.divideScalar( this.length() || 1 );

		}

		setLength( length ) {

			return this.normalize().multiplyScalar( length );

		}

		lerp( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;
			this.w += ( v.w - this.w ) * alpha;

			return this;

		}

		lerpVectors( v1, v2, alpha ) {

			this.x = v1.x + ( v2.x - v1.x ) * alpha;
			this.y = v1.y + ( v2.y - v1.y ) * alpha;
			this.z = v1.z + ( v2.z - v1.z ) * alpha;
			this.w = v1.w + ( v2.w - v1.w ) * alpha;

			return this;

		}

		equals( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) && ( v.w === this.w ) );

		}

		fromArray( array, offset = 0 ) {

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];
			this.w = array[ offset + 3 ];

			return this;

		}

		toArray( array = [], offset = 0 ) {

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;
			array[ offset + 3 ] = this.w;

			return array;

		}

		fromBufferAttribute( attribute, index ) {

			this.x = attribute.getX( index );
			this.y = attribute.getY( index );
			this.z = attribute.getZ( index );
			this.w = attribute.getW( index );

			return this;

		}

		random() {

			this.x = Math.random();
			this.y = Math.random();
			this.z = Math.random();
			this.w = Math.random();

			return this;

		}

		*[ Symbol.iterator ]() {

			yield this.x;
			yield this.y;
			yield this.z;
			yield this.w;

		}

	}

	/*
	 In options, we can specify:
	 * Texture parameters for an auto-generated target texture
	 * depthBuffer/stencilBuffer: Booleans to indicate if we should generate these buffers
	*/
	class RenderTarget extends EventDispatcher {

		constructor( width = 1, height = 1, options = {} ) {

			super();

			this.isRenderTarget = true;

			this.width = width;
			this.height = height;
			this.depth = 1;

			this.scissor = new Vector4( 0, 0, width, height );
			this.scissorTest = false;

			this.viewport = new Vector4( 0, 0, width, height );

			const image = { width: width, height: height, depth: 1 };

			if ( options.encoding !== undefined ) {

				// @deprecated, r152
				warnOnce( 'THREE.WebGLRenderTarget: option.encoding has been replaced by option.colorSpace.' );
				options.colorSpace = options.encoding === sRGBEncoding ? SRGBColorSpace : NoColorSpace;

			}

			this.texture = new Texture( image, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace );
			this.texture.isRenderTargetTexture = true;

			this.texture.flipY = false;
			this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
			this.texture.internalFormat = options.internalFormat !== undefined ? options.internalFormat : null;
			this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;

			this.depthBuffer = options.depthBuffer !== undefined ? options.depthBuffer : true;
			this.stencilBuffer = options.stencilBuffer !== undefined ? options.stencilBuffer : false;

			this.depthTexture = options.depthTexture !== undefined ? options.depthTexture : null;

			this.samples = options.samples !== undefined ? options.samples : 0;

		}

		setSize( width, height, depth = 1 ) {

			if ( this.width !== width || this.height !== height || this.depth !== depth ) {

				this.width = width;
				this.height = height;
				this.depth = depth;

				this.texture.image.width = width;
				this.texture.image.height = height;
				this.texture.image.depth = depth;

				this.dispose();

			}

			this.viewport.set( 0, 0, width, height );
			this.scissor.set( 0, 0, width, height );

		}

		clone() {

			return new this.constructor().copy( this );

		}

		copy( source ) {

			this.width = source.width;
			this.height = source.height;
			this.depth = source.depth;

			this.scissor.copy( source.scissor );
			this.scissorTest = source.scissorTest;

			this.viewport.copy( source.viewport );

			this.texture = source.texture.clone();
			this.texture.isRenderTargetTexture = true;

			// ensure image object is not shared, see #20328

			const image = Object.assign( {}, source.texture.image );
			this.texture.source = new Source( image );

			this.depthBuffer = source.depthBuffer;
			this.stencilBuffer = source.stencilBuffer;

			if ( source.depthTexture !== null ) this.depthTexture = source.depthTexture.clone();

			this.samples = source.samples;

			return this;

		}

		dispose() {

			this.dispatchEvent( { type: 'dispose' } );

		}

	}

	class WebGLRenderTarget extends RenderTarget {

		constructor( width = 1, height = 1, options = {} ) {

			super( width, height, options );

			this.isWebGLRenderTarget = true;

		}

	}

	class DataArrayTexture extends Texture {

		constructor( data = null, width = 1, height = 1, depth = 1 ) {

			super( null );

			this.isDataArrayTexture = true;

			this.image = { data, width, height, depth };

			this.magFilter = NearestFilter;
			this.minFilter = NearestFilter;

			this.wrapR = ClampToEdgeWrapping;

			this.generateMipmaps = false;
			this.flipY = false;
			this.unpackAlignment = 1;

		}

	}

	class Data3DTexture extends Texture {

		constructor( data = null, width = 1, height = 1, depth = 1 ) {

			// We're going to add .setXXX() methods for setting properties later.
			// Users can still set in DataTexture3D directly.
			//
			//	const texture = new THREE.DataTexture3D( data, width, height, depth );
			// 	texture.anisotropy = 16;
			//
			// See #14839

			super( null );

			this.isData3DTexture = true;

			this.image = { data, width, height, depth };

			this.magFilter = NearestFilter;
			this.minFilter = NearestFilter;

			this.wrapR = ClampToEdgeWrapping;

			this.generateMipmaps = false;
			this.flipY = false;
			this.unpackAlignment = 1;

		}

	}

	class Quaternion {

		constructor( x = 0, y = 0, z = 0, w = 1 ) {

			this.isQuaternion = true;

			this._x = x;
			this._y = y;
			this._z = z;
			this._w = w;

		}

		static slerpFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1, t ) {

			// fuzz-free, array-based Quaternion SLERP operation

			let x0 = src0[ srcOffset0 + 0 ],
				y0 = src0[ srcOffset0 + 1 ],
				z0 = src0[ srcOffset0 + 2 ],
				w0 = src0[ srcOffset0 + 3 ];

			const x1 = src1[ srcOffset1 + 0 ],
				y1 = src1[ srcOffset1 + 1 ],
				z1 = src1[ srcOffset1 + 2 ],
				w1 = src1[ srcOffset1 + 3 ];

			if ( t === 0 ) {

				dst[ dstOffset + 0 ] = x0;
				dst[ dstOffset + 1 ] = y0;
				dst[ dstOffset + 2 ] = z0;
				dst[ dstOffset + 3 ] = w0;
				return;

			}

			if ( t === 1 ) {

				dst[ dstOffset + 0 ] = x1;
				dst[ dstOffset + 1 ] = y1;
				dst[ dstOffset + 2 ] = z1;
				dst[ dstOffset + 3 ] = w1;
				return;

			}

			if ( w0 !== w1 || x0 !== x1 || y0 !== y1 || z0 !== z1 ) {

				let s = 1 - t;
				const cos = x0 * x1 + y0 * y1 + z0 * z1 + w0 * w1,
					dir = ( cos >= 0 ? 1 : - 1 ),
					sqrSin = 1 - cos * cos;

				// Skip the Slerp for tiny steps to avoid numeric problems:
				if ( sqrSin > Number.EPSILON ) {

					const sin = Math.sqrt( sqrSin ),
						len = Math.atan2( sin, cos * dir );

					s = Math.sin( s * len ) / sin;
					t = Math.sin( t * len ) / sin;

				}

				const tDir = t * dir;

				x0 = x0 * s + x1 * tDir;
				y0 = y0 * s + y1 * tDir;
				z0 = z0 * s + z1 * tDir;
				w0 = w0 * s + w1 * tDir;

				// Normalize in case we just did a lerp:
				if ( s === 1 - t ) {

					const f = 1 / Math.sqrt( x0 * x0 + y0 * y0 + z0 * z0 + w0 * w0 );

					x0 *= f;
					y0 *= f;
					z0 *= f;
					w0 *= f;

				}

			}

			dst[ dstOffset ] = x0;
			dst[ dstOffset + 1 ] = y0;
			dst[ dstOffset + 2 ] = z0;
			dst[ dstOffset + 3 ] = w0;

		}

		static multiplyQuaternionsFlat( dst, dstOffset, src0, srcOffset0, src1, srcOffset1 ) {

			const x0 = src0[ srcOffset0 ];
			const y0 = src0[ srcOffset0 + 1 ];
			const z0 = src0[ srcOffset0 + 2 ];
			const w0 = src0[ srcOffset0 + 3 ];

			const x1 = src1[ srcOffset1 ];
			const y1 = src1[ srcOffset1 + 1 ];
			const z1 = src1[ srcOffset1 + 2 ];
			const w1 = src1[ srcOffset1 + 3 ];

			dst[ dstOffset ] = x0 * w1 + w0 * x1 + y0 * z1 - z0 * y1;
			dst[ dstOffset + 1 ] = y0 * w1 + w0 * y1 + z0 * x1 - x0 * z1;
			dst[ dstOffset + 2 ] = z0 * w1 + w0 * z1 + x0 * y1 - y0 * x1;
			dst[ dstOffset + 3 ] = w0 * w1 - x0 * x1 - y0 * y1 - z0 * z1;

			return dst;

		}

		get x() {

			return this._x;

		}

		set x( value ) {

			this._x = value;
			this._onChangeCallback();

		}

		get y() {

			return this._y;

		}

		set y( value ) {

			this._y = value;
			this._onChangeCallback();

		}

		get z() {

			return this._z;

		}

		set z( value ) {

			this._z = value;
			this._onChangeCallback();

		}

		get w() {

			return this._w;

		}

		set w( value ) {

			this._w = value;
			this._onChangeCallback();

		}

		set( x, y, z, w ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._w = w;

			this._onChangeCallback();

			return this;

		}

		clone() {

			return new this.constructor( this._x, this._y, this._z, this._w );

		}

		copy( quaternion ) {

			this._x = quaternion.x;
			this._y = quaternion.y;
			this._z = quaternion.z;
			this._w = quaternion.w;

			this._onChangeCallback();

			return this;

		}

		setFromEuler( euler, update ) {

			const x = euler._x, y = euler._y, z = euler._z, order = euler._order;

			// http://www.mathworks.com/matlabcentral/fileexchange/
			// 	20696-function-to-convert-between-dcm-euler-angles-quaternions-and-euler-vectors/
			//	content/SpinCalc.m

			const cos = Math.cos;
			const sin = Math.sin;

			const c1 = cos( x / 2 );
			const c2 = cos( y / 2 );
			const c3 = cos( z / 2 );

			const s1 = sin( x / 2 );
			const s2 = sin( y / 2 );
			const s3 = sin( z / 2 );

			switch ( order ) {

				case 'XYZ':
					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;
					break;

				case 'YXZ':
					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;
					break;

				case 'ZXY':
					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;
					break;

				case 'ZYX':
					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;
					break;

				case 'YZX':
					this._x = s1 * c2 * c3 + c1 * s2 * s3;
					this._y = c1 * s2 * c3 + s1 * c2 * s3;
					this._z = c1 * c2 * s3 - s1 * s2 * c3;
					this._w = c1 * c2 * c3 - s1 * s2 * s3;
					break;

				case 'XZY':
					this._x = s1 * c2 * c3 - c1 * s2 * s3;
					this._y = c1 * s2 * c3 - s1 * c2 * s3;
					this._z = c1 * c2 * s3 + s1 * s2 * c3;
					this._w = c1 * c2 * c3 + s1 * s2 * s3;
					break;

				default:
					console.warn( 'THREE.Quaternion: .setFromEuler() encountered an unknown order: ' + order );

			}

			if ( update !== false ) this._onChangeCallback();

			return this;

		}

		setFromAxisAngle( axis, angle ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/angleToQuaternion/index.htm

			// assumes axis is normalized

			const halfAngle = angle / 2, s = Math.sin( halfAngle );

			this._x = axis.x * s;
			this._y = axis.y * s;
			this._z = axis.z * s;
			this._w = Math.cos( halfAngle );

			this._onChangeCallback();

			return this;

		}

		setFromRotationMatrix( m ) {

			// http://www.euclideanspace.com/maths/geometry/rotations/conversions/matrixToQuaternion/index.htm

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			const te = m.elements,

				m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ],
				m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ],
				m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ],

				trace = m11 + m22 + m33;

			if ( trace > 0 ) {

				const s = 0.5 / Math.sqrt( trace + 1.0 );

				this._w = 0.25 / s;
				this._x = ( m32 - m23 ) * s;
				this._y = ( m13 - m31 ) * s;
				this._z = ( m21 - m12 ) * s;

			} else if ( m11 > m22 && m11 > m33 ) {

				const s = 2.0 * Math.sqrt( 1.0 + m11 - m22 - m33 );

				this._w = ( m32 - m23 ) / s;
				this._x = 0.25 * s;
				this._y = ( m12 + m21 ) / s;
				this._z = ( m13 + m31 ) / s;

			} else if ( m22 > m33 ) {

				const s = 2.0 * Math.sqrt( 1.0 + m22 - m11 - m33 );

				this._w = ( m13 - m31 ) / s;
				this._x = ( m12 + m21 ) / s;
				this._y = 0.25 * s;
				this._z = ( m23 + m32 ) / s;

			} else {

				const s = 2.0 * Math.sqrt( 1.0 + m33 - m11 - m22 );

				this._w = ( m21 - m12 ) / s;
				this._x = ( m13 + m31 ) / s;
				this._y = ( m23 + m32 ) / s;
				this._z = 0.25 * s;

			}

			this._onChangeCallback();

			return this;

		}

		setFromUnitVectors( vFrom, vTo ) {

			// assumes direction vectors vFrom and vTo are normalized

			let r = vFrom.dot( vTo ) + 1;

			if ( r < Number.EPSILON ) {

				// vFrom and vTo point in opposite directions

				r = 0;

				if ( Math.abs( vFrom.x ) > Math.abs( vFrom.z ) ) {

					this._x = - vFrom.y;
					this._y = vFrom.x;
					this._z = 0;
					this._w = r;

				} else {

					this._x = 0;
					this._y = - vFrom.z;
					this._z = vFrom.y;
					this._w = r;

				}

			} else {

				// crossVectors( vFrom, vTo ); // inlined to avoid cyclic dependency on Vector3

				this._x = vFrom.y * vTo.z - vFrom.z * vTo.y;
				this._y = vFrom.z * vTo.x - vFrom.x * vTo.z;
				this._z = vFrom.x * vTo.y - vFrom.y * vTo.x;
				this._w = r;

			}

			return this.normalize();

		}

		angleTo( q ) {

			return 2 * Math.acos( Math.abs( clamp( this.dot( q ), - 1, 1 ) ) );

		}

		rotateTowards( q, step ) {

			const angle = this.angleTo( q );

			if ( angle === 0 ) return this;

			const t = Math.min( 1, step / angle );

			this.slerp( q, t );

			return this;

		}

		identity() {

			return this.set( 0, 0, 0, 1 );

		}

		invert() {

			// quaternion is assumed to have unit length

			return this.conjugate();

		}

		conjugate() {

			this._x *= - 1;
			this._y *= - 1;
			this._z *= - 1;

			this._onChangeCallback();

			return this;

		}

		dot( v ) {

			return this._x * v._x + this._y * v._y + this._z * v._z + this._w * v._w;

		}

		lengthSq() {

			return this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w;

		}

		length() {

			return Math.sqrt( this._x * this._x + this._y * this._y + this._z * this._z + this._w * this._w );

		}

		normalize() {

			let l = this.length();

			if ( l === 0 ) {

				this._x = 0;
				this._y = 0;
				this._z = 0;
				this._w = 1;

			} else {

				l = 1 / l;

				this._x = this._x * l;
				this._y = this._y * l;
				this._z = this._z * l;
				this._w = this._w * l;

			}

			this._onChangeCallback();

			return this;

		}

		multiply( q ) {

			return this.multiplyQuaternions( this, q );

		}

		premultiply( q ) {

			return this.multiplyQuaternions( q, this );

		}

		multiplyQuaternions( a, b ) {

			// from http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/code/index.htm

			const qax = a._x, qay = a._y, qaz = a._z, qaw = a._w;
			const qbx = b._x, qby = b._y, qbz = b._z, qbw = b._w;

			this._x = qax * qbw + qaw * qbx + qay * qbz - qaz * qby;
			this._y = qay * qbw + qaw * qby + qaz * qbx - qax * qbz;
			this._z = qaz * qbw + qaw * qbz + qax * qby - qay * qbx;
			this._w = qaw * qbw - qax * qbx - qay * qby - qaz * qbz;

			this._onChangeCallback();

			return this;

		}

		slerp( qb, t ) {

			if ( t === 0 ) return this;
			if ( t === 1 ) return this.copy( qb );

			const x = this._x, y = this._y, z = this._z, w = this._w;

			// http://www.euclideanspace.com/maths/algebra/realNormedAlgebra/quaternions/slerp/

			let cosHalfTheta = w * qb._w + x * qb._x + y * qb._y + z * qb._z;

			if ( cosHalfTheta < 0 ) {

				this._w = - qb._w;
				this._x = - qb._x;
				this._y = - qb._y;
				this._z = - qb._z;

				cosHalfTheta = - cosHalfTheta;

			} else {

				this.copy( qb );

			}

			if ( cosHalfTheta >= 1.0 ) {

				this._w = w;
				this._x = x;
				this._y = y;
				this._z = z;

				return this;

			}

			const sqrSinHalfTheta = 1.0 - cosHalfTheta * cosHalfTheta;

			if ( sqrSinHalfTheta <= Number.EPSILON ) {

				const s = 1 - t;
				this._w = s * w + t * this._w;
				this._x = s * x + t * this._x;
				this._y = s * y + t * this._y;
				this._z = s * z + t * this._z;

				this.normalize();
				this._onChangeCallback();

				return this;

			}

			const sinHalfTheta = Math.sqrt( sqrSinHalfTheta );
			const halfTheta = Math.atan2( sinHalfTheta, cosHalfTheta );
			const ratioA = Math.sin( ( 1 - t ) * halfTheta ) / sinHalfTheta,
				ratioB = Math.sin( t * halfTheta ) / sinHalfTheta;

			this._w = ( w * ratioA + this._w * ratioB );
			this._x = ( x * ratioA + this._x * ratioB );
			this._y = ( y * ratioA + this._y * ratioB );
			this._z = ( z * ratioA + this._z * ratioB );

			this._onChangeCallback();

			return this;

		}

		slerpQuaternions( qa, qb, t ) {

			return this.copy( qa ).slerp( qb, t );

		}

		random() {

			// Derived from http://planning.cs.uiuc.edu/node198.html
			// Note, this source uses w, x, y, z ordering,
			// so we swap the order below.

			const u1 = Math.random();
			const sqrt1u1 = Math.sqrt( 1 - u1 );
			const sqrtu1 = Math.sqrt( u1 );

			const u2 = 2 * Math.PI * Math.random();

			const u3 = 2 * Math.PI * Math.random();

			return this.set(
				sqrt1u1 * Math.cos( u2 ),
				sqrtu1 * Math.sin( u3 ),
				sqrtu1 * Math.cos( u3 ),
				sqrt1u1 * Math.sin( u2 ),
			);

		}

		equals( quaternion ) {

			return ( quaternion._x === this._x ) && ( quaternion._y === this._y ) && ( quaternion._z === this._z ) && ( quaternion._w === this._w );

		}

		fromArray( array, offset = 0 ) {

			this._x = array[ offset ];
			this._y = array[ offset + 1 ];
			this._z = array[ offset + 2 ];
			this._w = array[ offset + 3 ];

			this._onChangeCallback();

			return this;

		}

		toArray( array = [], offset = 0 ) {

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._w;

			return array;

		}

		fromBufferAttribute( attribute, index ) {

			this._x = attribute.getX( index );
			this._y = attribute.getY( index );
			this._z = attribute.getZ( index );
			this._w = attribute.getW( index );

			return this;

		}

		toJSON() {

			return this.toArray();

		}

		_onChange( callback ) {

			this._onChangeCallback = callback;

			return this;

		}

		_onChangeCallback() {}

		*[ Symbol.iterator ]() {

			yield this._x;
			yield this._y;
			yield this._z;
			yield this._w;

		}

	}

	class Vector3 {

		constructor( x = 0, y = 0, z = 0 ) {

			Vector3.prototype.isVector3 = true;

			this.x = x;
			this.y = y;
			this.z = z;

		}

		set( x, y, z ) {

			if ( z === undefined ) z = this.z; // sprite.scale.set(x,y)

			this.x = x;
			this.y = y;
			this.z = z;

			return this;

		}

		setScalar( scalar ) {

			this.x = scalar;
			this.y = scalar;
			this.z = scalar;

			return this;

		}

		setX( x ) {

			this.x = x;

			return this;

		}

		setY( y ) {

			this.y = y;

			return this;

		}

		setZ( z ) {

			this.z = z;

			return this;

		}

		setComponent( index, value ) {

			switch ( index ) {

				case 0: this.x = value; break;
				case 1: this.y = value; break;
				case 2: this.z = value; break;
				default: throw new Error( 'index is out of range: ' + index );

			}

			return this;

		}

		getComponent( index ) {

			switch ( index ) {

				case 0: return this.x;
				case 1: return this.y;
				case 2: return this.z;
				default: throw new Error( 'index is out of range: ' + index );

			}

		}

		clone() {

			return new this.constructor( this.x, this.y, this.z );

		}

		copy( v ) {

			this.x = v.x;
			this.y = v.y;
			this.z = v.z;

			return this;

		}

		add( v ) {

			this.x += v.x;
			this.y += v.y;
			this.z += v.z;

			return this;

		}

		addScalar( s ) {

			this.x += s;
			this.y += s;
			this.z += s;

			return this;

		}

		addVectors( a, b ) {

			this.x = a.x + b.x;
			this.y = a.y + b.y;
			this.z = a.z + b.z;

			return this;

		}

		addScaledVector( v, s ) {

			this.x += v.x * s;
			this.y += v.y * s;
			this.z += v.z * s;

			return this;

		}

		sub( v ) {

			this.x -= v.x;
			this.y -= v.y;
			this.z -= v.z;

			return this;

		}

		subScalar( s ) {

			this.x -= s;
			this.y -= s;
			this.z -= s;

			return this;

		}

		subVectors( a, b ) {

			this.x = a.x - b.x;
			this.y = a.y - b.y;
			this.z = a.z - b.z;

			return this;

		}

		multiply( v ) {

			this.x *= v.x;
			this.y *= v.y;
			this.z *= v.z;

			return this;

		}

		multiplyScalar( scalar ) {

			this.x *= scalar;
			this.y *= scalar;
			this.z *= scalar;

			return this;

		}

		multiplyVectors( a, b ) {

			this.x = a.x * b.x;
			this.y = a.y * b.y;
			this.z = a.z * b.z;

			return this;

		}

		applyEuler( euler ) {

			return this.applyQuaternion( _quaternion$4.setFromEuler( euler ) );

		}

		applyAxisAngle( axis, angle ) {

			return this.applyQuaternion( _quaternion$4.setFromAxisAngle( axis, angle ) );

		}

		applyMatrix3( m ) {

			const x = this.x, y = this.y, z = this.z;
			const e = m.elements;

			this.x = e[ 0 ] * x + e[ 3 ] * y + e[ 6 ] * z;
			this.y = e[ 1 ] * x + e[ 4 ] * y + e[ 7 ] * z;
			this.z = e[ 2 ] * x + e[ 5 ] * y + e[ 8 ] * z;

			return this;

		}

		applyNormalMatrix( m ) {

			return this.applyMatrix3( m ).normalize();

		}

		applyMatrix4( m ) {

			const x = this.x, y = this.y, z = this.z;
			const e = m.elements;

			const w = 1 / ( e[ 3 ] * x + e[ 7 ] * y + e[ 11 ] * z + e[ 15 ] );

			this.x = ( e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z + e[ 12 ] ) * w;
			this.y = ( e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z + e[ 13 ] ) * w;
			this.z = ( e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z + e[ 14 ] ) * w;

			return this;

		}

		applyQuaternion( q ) {

			const x = this.x, y = this.y, z = this.z;
			const qx = q.x, qy = q.y, qz = q.z, qw = q.w;

			// calculate quat * vector

			const ix = qw * x + qy * z - qz * y;
			const iy = qw * y + qz * x - qx * z;
			const iz = qw * z + qx * y - qy * x;
			const iw = - qx * x - qy * y - qz * z;

			// calculate result * inverse quat

			this.x = ix * qw + iw * - qx + iy * - qz - iz * - qy;
			this.y = iy * qw + iw * - qy + iz * - qx - ix * - qz;
			this.z = iz * qw + iw * - qz + ix * - qy - iy * - qx;

			return this;

		}

		project( camera ) {

			return this.applyMatrix4( camera.matrixWorldInverse ).applyMatrix4( camera.projectionMatrix );

		}

		unproject( camera ) {

			return this.applyMatrix4( camera.projectionMatrixInverse ).applyMatrix4( camera.matrixWorld );

		}

		transformDirection( m ) {

			// input: THREE.Matrix4 affine matrix
			// vector interpreted as a direction

			const x = this.x, y = this.y, z = this.z;
			const e = m.elements;

			this.x = e[ 0 ] * x + e[ 4 ] * y + e[ 8 ] * z;
			this.y = e[ 1 ] * x + e[ 5 ] * y + e[ 9 ] * z;
			this.z = e[ 2 ] * x + e[ 6 ] * y + e[ 10 ] * z;

			return this.normalize();

		}

		divide( v ) {

			this.x /= v.x;
			this.y /= v.y;
			this.z /= v.z;

			return this;

		}

		divideScalar( scalar ) {

			return this.multiplyScalar( 1 / scalar );

		}

		min( v ) {

			this.x = Math.min( this.x, v.x );
			this.y = Math.min( this.y, v.y );
			this.z = Math.min( this.z, v.z );

			return this;

		}

		max( v ) {

			this.x = Math.max( this.x, v.x );
			this.y = Math.max( this.y, v.y );
			this.z = Math.max( this.z, v.z );

			return this;

		}

		clamp( min, max ) {

			// assumes min < max, componentwise

			this.x = Math.max( min.x, Math.min( max.x, this.x ) );
			this.y = Math.max( min.y, Math.min( max.y, this.y ) );
			this.z = Math.max( min.z, Math.min( max.z, this.z ) );

			return this;

		}

		clampScalar( minVal, maxVal ) {

			this.x = Math.max( minVal, Math.min( maxVal, this.x ) );
			this.y = Math.max( minVal, Math.min( maxVal, this.y ) );
			this.z = Math.max( minVal, Math.min( maxVal, this.z ) );

			return this;

		}

		clampLength( min, max ) {

			const length = this.length();

			return this.divideScalar( length || 1 ).multiplyScalar( Math.max( min, Math.min( max, length ) ) );

		}

		floor() {

			this.x = Math.floor( this.x );
			this.y = Math.floor( this.y );
			this.z = Math.floor( this.z );

			return this;

		}

		ceil() {

			this.x = Math.ceil( this.x );
			this.y = Math.ceil( this.y );
			this.z = Math.ceil( this.z );

			return this;

		}

		round() {

			this.x = Math.round( this.x );
			this.y = Math.round( this.y );
			this.z = Math.round( this.z );

			return this;

		}

		roundToZero() {

			this.x = Math.trunc( this.x );
			this.y = Math.trunc( this.y );
			this.z = Math.trunc( this.z );

			return this;

		}

		negate() {

			this.x = - this.x;
			this.y = - this.y;
			this.z = - this.z;

			return this;

		}

		dot( v ) {

			return this.x * v.x + this.y * v.y + this.z * v.z;

		}

		// TODO lengthSquared?

		lengthSq() {

			return this.x * this.x + this.y * this.y + this.z * this.z;

		}

		length() {

			return Math.sqrt( this.x * this.x + this.y * this.y + this.z * this.z );

		}

		manhattanLength() {

			return Math.abs( this.x ) + Math.abs( this.y ) + Math.abs( this.z );

		}

		normalize() {

			return this.divideScalar( this.length() || 1 );

		}

		setLength( length ) {

			return this.normalize().multiplyScalar( length );

		}

		lerp( v, alpha ) {

			this.x += ( v.x - this.x ) * alpha;
			this.y += ( v.y - this.y ) * alpha;
			this.z += ( v.z - this.z ) * alpha;

			return this;

		}

		lerpVectors( v1, v2, alpha ) {

			this.x = v1.x + ( v2.x - v1.x ) * alpha;
			this.y = v1.y + ( v2.y - v1.y ) * alpha;
			this.z = v1.z + ( v2.z - v1.z ) * alpha;

			return this;

		}

		cross( v ) {

			return this.crossVectors( this, v );

		}

		crossVectors( a, b ) {

			const ax = a.x, ay = a.y, az = a.z;
			const bx = b.x, by = b.y, bz = b.z;

			this.x = ay * bz - az * by;
			this.y = az * bx - ax * bz;
			this.z = ax * by - ay * bx;

			return this;

		}

		projectOnVector( v ) {

			const denominator = v.lengthSq();

			if ( denominator === 0 ) return this.set( 0, 0, 0 );

			const scalar = v.dot( this ) / denominator;

			return this.copy( v ).multiplyScalar( scalar );

		}

		projectOnPlane( planeNormal ) {

			_vector$b.copy( this ).projectOnVector( planeNormal );

			return this.sub( _vector$b );

		}

		reflect( normal ) {

			// reflect incident vector off plane orthogonal to normal
			// normal is assumed to have unit length

			return this.sub( _vector$b.copy( normal ).multiplyScalar( 2 * this.dot( normal ) ) );

		}

		angleTo( v ) {

			const denominator = Math.sqrt( this.lengthSq() * v.lengthSq() );

			if ( denominator === 0 ) return Math.PI / 2;

			const theta = this.dot( v ) / denominator;

			// clamp, to handle numerical problems

			return Math.acos( clamp( theta, - 1, 1 ) );

		}

		distanceTo( v ) {

			return Math.sqrt( this.distanceToSquared( v ) );

		}

		distanceToSquared( v ) {

			const dx = this.x - v.x, dy = this.y - v.y, dz = this.z - v.z;

			return dx * dx + dy * dy + dz * dz;

		}

		manhattanDistanceTo( v ) {

			return Math.abs( this.x - v.x ) + Math.abs( this.y - v.y ) + Math.abs( this.z - v.z );

		}

		setFromSpherical( s ) {

			return this.setFromSphericalCoords( s.radius, s.phi, s.theta );

		}

		setFromSphericalCoords( radius, phi, theta ) {

			const sinPhiRadius = Math.sin( phi ) * radius;

			this.x = sinPhiRadius * Math.sin( theta );
			this.y = Math.cos( phi ) * radius;
			this.z = sinPhiRadius * Math.cos( theta );

			return this;

		}

		setFromCylindrical( c ) {

			return this.setFromCylindricalCoords( c.radius, c.theta, c.y );

		}

		setFromCylindricalCoords( radius, theta, y ) {

			this.x = radius * Math.sin( theta );
			this.y = y;
			this.z = radius * Math.cos( theta );

			return this;

		}

		setFromMatrixPosition( m ) {

			const e = m.elements;

			this.x = e[ 12 ];
			this.y = e[ 13 ];
			this.z = e[ 14 ];

			return this;

		}

		setFromMatrixScale( m ) {

			const sx = this.setFromMatrixColumn( m, 0 ).length();
			const sy = this.setFromMatrixColumn( m, 1 ).length();
			const sz = this.setFromMatrixColumn( m, 2 ).length();

			this.x = sx;
			this.y = sy;
			this.z = sz;

			return this;

		}

		setFromMatrixColumn( m, index ) {

			return this.fromArray( m.elements, index * 4 );

		}

		setFromMatrix3Column( m, index ) {

			return this.fromArray( m.elements, index * 3 );

		}

		setFromEuler( e ) {

			this.x = e._x;
			this.y = e._y;
			this.z = e._z;

			return this;

		}

		setFromColor( c ) {

			this.x = c.r;
			this.y = c.g;
			this.z = c.b;

			return this;

		}

		equals( v ) {

			return ( ( v.x === this.x ) && ( v.y === this.y ) && ( v.z === this.z ) );

		}

		fromArray( array, offset = 0 ) {

			this.x = array[ offset ];
			this.y = array[ offset + 1 ];
			this.z = array[ offset + 2 ];

			return this;

		}

		toArray( array = [], offset = 0 ) {

			array[ offset ] = this.x;
			array[ offset + 1 ] = this.y;
			array[ offset + 2 ] = this.z;

			return array;

		}

		fromBufferAttribute( attribute, index ) {

			this.x = attribute.getX( index );
			this.y = attribute.getY( index );
			this.z = attribute.getZ( index );

			return this;

		}

		random() {

			this.x = Math.random();
			this.y = Math.random();
			this.z = Math.random();

			return this;

		}

		randomDirection() {

			// Derived from https://mathworld.wolfram.com/SpherePointPicking.html

			const u = ( Math.random() - 0.5 ) * 2;
			const t = Math.random() * Math.PI * 2;
			const f = Math.sqrt( 1 - u ** 2 );

			this.x = f * Math.cos( t );
			this.y = f * Math.sin( t );
			this.z = u;

			return this;

		}

		*[ Symbol.iterator ]() {

			yield this.x;
			yield this.y;
			yield this.z;

		}

	}

	const _vector$b = /*@__PURE__*/ new Vector3();
	const _quaternion$4 = /*@__PURE__*/ new Quaternion();

	class Box3 {

		constructor( min = new Vector3( + Infinity, + Infinity, + Infinity ), max = new Vector3( - Infinity, - Infinity, - Infinity ) ) {

			this.isBox3 = true;

			this.min = min;
			this.max = max;

		}

		set( min, max ) {

			this.min.copy( min );
			this.max.copy( max );

			return this;

		}

		setFromArray( array ) {

			this.makeEmpty();

			for ( let i = 0, il = array.length; i < il; i += 3 ) {

				this.expandByPoint( _vector$a.fromArray( array, i ) );

			}

			return this;

		}

		setFromBufferAttribute( attribute ) {

			this.makeEmpty();

			for ( let i = 0, il = attribute.count; i < il; i ++ ) {

				this.expandByPoint( _vector$a.fromBufferAttribute( attribute, i ) );

			}

			return this;

		}

		setFromPoints( points ) {

			this.makeEmpty();

			for ( let i = 0, il = points.length; i < il; i ++ ) {

				this.expandByPoint( points[ i ] );

			}

			return this;

		}

		setFromCenterAndSize( center, size ) {

			const halfSize = _vector$a.copy( size ).multiplyScalar( 0.5 );

			this.min.copy( center ).sub( halfSize );
			this.max.copy( center ).add( halfSize );

			return this;

		}

		setFromObject( object, precise = false ) {

			this.makeEmpty();

			return this.expandByObject( object, precise );

		}

		clone() {

			return new this.constructor().copy( this );

		}

		copy( box ) {

			this.min.copy( box.min );
			this.max.copy( box.max );

			return this;

		}

		makeEmpty() {

			this.min.x = this.min.y = this.min.z = + Infinity;
			this.max.x = this.max.y = this.max.z = - Infinity;

			return this;

		}

		isEmpty() {

			// this is a more robust check for empty than ( volume <= 0 ) because volume can get positive with two negative axes

			return ( this.max.x < this.min.x ) || ( this.max.y < this.min.y ) || ( this.max.z < this.min.z );

		}

		getCenter( target ) {

			return this.isEmpty() ? target.set( 0, 0, 0 ) : target.addVectors( this.min, this.max ).multiplyScalar( 0.5 );

		}

		getSize( target ) {

			return this.isEmpty() ? target.set( 0, 0, 0 ) : target.subVectors( this.max, this.min );

		}

		expandByPoint( point ) {

			this.min.min( point );
			this.max.max( point );

			return this;

		}

		expandByVector( vector ) {

			this.min.sub( vector );
			this.max.add( vector );

			return this;

		}

		expandByScalar( scalar ) {

			this.min.addScalar( - scalar );
			this.max.addScalar( scalar );

			return this;

		}

		expandByObject( object, precise = false ) {

			// Computes the world-axis-aligned bounding box of an object (including its children),
			// accounting for both the object's, and children's, world transforms

			object.updateWorldMatrix( false, false );

			if ( object.boundingBox !== undefined ) {

				if ( object.boundingBox === null ) {

					object.computeBoundingBox();

				}

				_box$3.copy( object.boundingBox );
				_box$3.applyMatrix4( object.matrixWorld );

				this.union( _box$3 );

			} else {

				const geometry = object.geometry;

				if ( geometry !== undefined ) {

					if ( precise && geometry.attributes !== undefined && geometry.attributes.position !== undefined ) {

						const position = geometry.attributes.position;
						for ( let i = 0, l = position.count; i < l; i ++ ) {

							_vector$a.fromBufferAttribute( position, i ).applyMatrix4( object.matrixWorld );
							this.expandByPoint( _vector$a );

						}

					} else {

						if ( geometry.boundingBox === null ) {

							geometry.computeBoundingBox();

						}

						_box$3.copy( geometry.boundingBox );
						_box$3.applyMatrix4( object.matrixWorld );

						this.union( _box$3 );

					}

				}

			}

			const children = object.children;

			for ( let i = 0, l = children.length; i < l; i ++ ) {

				this.expandByObject( children[ i ], precise );

			}

			return this;

		}

		containsPoint( point ) {

			return point.x < this.min.x || point.x > this.max.x ||
				point.y < this.min.y || point.y > this.max.y ||
				point.z < this.min.z || point.z > this.max.z ? false : true;

		}

		containsBox( box ) {

			return this.min.x <= box.min.x && box.max.x <= this.max.x &&
				this.min.y <= box.min.y && box.max.y <= this.max.y &&
				this.min.z <= box.min.z && box.max.z <= this.max.z;

		}

		getParameter( point, target ) {

			// This can potentially have a divide by zero if the box
			// has a size dimension of 0.

			return target.set(
				( point.x - this.min.x ) / ( this.max.x - this.min.x ),
				( point.y - this.min.y ) / ( this.max.y - this.min.y ),
				( point.z - this.min.z ) / ( this.max.z - this.min.z )
			);

		}

		intersectsBox( box ) {

			// using 6 splitting planes to rule out intersections.
			return box.max.x < this.min.x || box.min.x > this.max.x ||
				box.max.y < this.min.y || box.min.y > this.max.y ||
				box.max.z < this.min.z || box.min.z > this.max.z ? false : true;

		}

		intersectsSphere( sphere ) {

			// Find the point on the AABB closest to the sphere center.
			this.clampPoint( sphere.center, _vector$a );

			// If that point is inside the sphere, the AABB and sphere intersect.
			return _vector$a.distanceToSquared( sphere.center ) <= ( sphere.radius * sphere.radius );

		}

		intersectsPlane( plane ) {

			// We compute the minimum and maximum dot product values. If those values
			// are on the same side (back or front) of the plane, then there is no intersection.

			let min, max;

			if ( plane.normal.x > 0 ) {

				min = plane.normal.x * this.min.x;
				max = plane.normal.x * this.max.x;

			} else {

				min = plane.normal.x * this.max.x;
				max = plane.normal.x * this.min.x;

			}

			if ( plane.normal.y > 0 ) {

				min += plane.normal.y * this.min.y;
				max += plane.normal.y * this.max.y;

			} else {

				min += plane.normal.y * this.max.y;
				max += plane.normal.y * this.min.y;

			}

			if ( plane.normal.z > 0 ) {

				min += plane.normal.z * this.min.z;
				max += plane.normal.z * this.max.z;

			} else {

				min += plane.normal.z * this.max.z;
				max += plane.normal.z * this.min.z;

			}

			return ( min <= - plane.constant && max >= - plane.constant );

		}

		intersectsTriangle( triangle ) {

			if ( this.isEmpty() ) {

				return false;

			}

			// compute box center and extents
			this.getCenter( _center );
			_extents.subVectors( this.max, _center );

			// translate triangle to aabb origin
			_v0$2.subVectors( triangle.a, _center );
			_v1$7.subVectors( triangle.b, _center );
			_v2$4.subVectors( triangle.c, _center );

			// compute edge vectors for triangle
			_f0.subVectors( _v1$7, _v0$2 );
			_f1.subVectors( _v2$4, _v1$7 );
			_f2.subVectors( _v0$2, _v2$4 );

			// test against axes that are given by cross product combinations of the edges of the triangle and the edges of the aabb
			// make an axis testing of each of the 3 sides of the aabb against each of the 3 sides of the triangle = 9 axis of separation
			// axis_ij = u_i x f_j (u0, u1, u2 = face normals of aabb = x,y,z axes vectors since aabb is axis aligned)
			let axes = [
				0, - _f0.z, _f0.y, 0, - _f1.z, _f1.y, 0, - _f2.z, _f2.y,
				_f0.z, 0, - _f0.x, _f1.z, 0, - _f1.x, _f2.z, 0, - _f2.x,
				- _f0.y, _f0.x, 0, - _f1.y, _f1.x, 0, - _f2.y, _f2.x, 0
			];
			if ( ! satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents ) ) {

				return false;

			}

			// test 3 face normals from the aabb
			axes = [ 1, 0, 0, 0, 1, 0, 0, 0, 1 ];
			if ( ! satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents ) ) {

				return false;

			}

			// finally testing the face normal of the triangle
			// use already existing triangle edge vectors here
			_triangleNormal.crossVectors( _f0, _f1 );
			axes = [ _triangleNormal.x, _triangleNormal.y, _triangleNormal.z ];

			return satForAxes( axes, _v0$2, _v1$7, _v2$4, _extents );

		}

		clampPoint( point, target ) {

			return target.copy( point ).clamp( this.min, this.max );

		}

		distanceToPoint( point ) {

			return this.clampPoint( point, _vector$a ).distanceTo( point );

		}

		getBoundingSphere( target ) {

			if ( this.isEmpty() ) {

				target.makeEmpty();

			} else {

				this.getCenter( target.center );

				target.radius = this.getSize( _vector$a ).length() * 0.5;

			}

			return target;

		}

		intersect( box ) {

			this.min.max( box.min );
			this.max.min( box.max );

			// ensure that if there is no overlap, the result is fully empty, not slightly empty with non-inf/+inf values that will cause subsequence intersects to erroneously return valid values.
			if ( this.isEmpty() ) this.makeEmpty();

			return this;

		}

		union( box ) {

			this.min.min( box.min );
			this.max.max( box.max );

			return this;

		}

		applyMatrix4( matrix ) {

			// transform of empty box is an empty box.
			if ( this.isEmpty() ) return this;

			// NOTE: I am using a binary pattern to specify all 2^3 combinations below
			_points[ 0 ].set( this.min.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 000
			_points[ 1 ].set( this.min.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 001
			_points[ 2 ].set( this.min.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 010
			_points[ 3 ].set( this.min.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 011
			_points[ 4 ].set( this.max.x, this.min.y, this.min.z ).applyMatrix4( matrix ); // 100
			_points[ 5 ].set( this.max.x, this.min.y, this.max.z ).applyMatrix4( matrix ); // 101
			_points[ 6 ].set( this.max.x, this.max.y, this.min.z ).applyMatrix4( matrix ); // 110
			_points[ 7 ].set( this.max.x, this.max.y, this.max.z ).applyMatrix4( matrix ); // 111

			this.setFromPoints( _points );

			return this;

		}

		translate( offset ) {

			this.min.add( offset );
			this.max.add( offset );

			return this;

		}

		equals( box ) {

			return box.min.equals( this.min ) && box.max.equals( this.max );

		}

	}

	const _points = [
		/*@__PURE__*/ new Vector3(),
		/*@__PURE__*/ new Vector3(),
		/*@__PURE__*/ new Vector3(),
		/*@__PURE__*/ new Vector3(),
		/*@__PURE__*/ new Vector3(),
		/*@__PURE__*/ new Vector3(),
		/*@__PURE__*/ new Vector3(),
		/*@__PURE__*/ new Vector3()
	];

	const _vector$a = /*@__PURE__*/ new Vector3();

	const _box$3 = /*@__PURE__*/ new Box3();

	// triangle centered vertices

	const _v0$2 = /*@__PURE__*/ new Vector3();
	const _v1$7 = /*@__PURE__*/ new Vector3();
	const _v2$4 = /*@__PURE__*/ new Vector3();

	// triangle edge vectors

	const _f0 = /*@__PURE__*/ new Vector3();
	const _f1 = /*@__PURE__*/ new Vector3();
	const _f2 = /*@__PURE__*/ new Vector3();

	const _center = /*@__PURE__*/ new Vector3();
	const _extents = /*@__PURE__*/ new Vector3();
	const _triangleNormal = /*@__PURE__*/ new Vector3();
	const _testAxis = /*@__PURE__*/ new Vector3();

	function satForAxes( axes, v0, v1, v2, extents ) {

		for ( let i = 0, j = axes.length - 3; i <= j; i += 3 ) {

			_testAxis.fromArray( axes, i );
			// project the aabb onto the separating axis
			const r = extents.x * Math.abs( _testAxis.x ) + extents.y * Math.abs( _testAxis.y ) + extents.z * Math.abs( _testAxis.z );
			// project all 3 vertices of the triangle onto the separating axis
			const p0 = v0.dot( _testAxis );
			const p1 = v1.dot( _testAxis );
			const p2 = v2.dot( _testAxis );
			// actual test, basically see if either of the most extreme of the triangle points intersects r
			if ( Math.max( - Math.max( p0, p1, p2 ), Math.min( p0, p1, p2 ) ) > r ) {

				// points of the projected triangle are outside the projected half-length of the aabb
				// the axis is separating and we can exit
				return false;

			}

		}

		return true;

	}

	const _box$2 = /*@__PURE__*/ new Box3();
	const _v1$6 = /*@__PURE__*/ new Vector3();
	const _v2$3 = /*@__PURE__*/ new Vector3();

	class Sphere {

		constructor( center = new Vector3(), radius = - 1 ) {

			this.center = center;
			this.radius = radius;

		}

		set( center, radius ) {

			this.center.copy( center );
			this.radius = radius;

			return this;

		}

		setFromPoints( points, optionalCenter ) {

			const center = this.center;

			if ( optionalCenter !== undefined ) {

				center.copy( optionalCenter );

			} else {

				_box$2.setFromPoints( points ).getCenter( center );

			}

			let maxRadiusSq = 0;

			for ( let i = 0, il = points.length; i < il; i ++ ) {

				maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( points[ i ] ) );

			}

			this.radius = Math.sqrt( maxRadiusSq );

			return this;

		}

		copy( sphere ) {

			this.center.copy( sphere.center );
			this.radius = sphere.radius;

			return this;

		}

		isEmpty() {

			return ( this.radius < 0 );

		}

		makeEmpty() {

			this.center.set( 0, 0, 0 );
			this.radius = - 1;

			return this;

		}

		containsPoint( point ) {

			return ( point.distanceToSquared( this.center ) <= ( this.radius * this.radius ) );

		}

		distanceToPoint( point ) {

			return ( point.distanceTo( this.center ) - this.radius );

		}

		intersectsSphere( sphere ) {

			const radiusSum = this.radius + sphere.radius;

			return sphere.center.distanceToSquared( this.center ) <= ( radiusSum * radiusSum );

		}

		intersectsBox( box ) {

			return box.intersectsSphere( this );

		}

		intersectsPlane( plane ) {

			return Math.abs( plane.distanceToPoint( this.center ) ) <= this.radius;

		}

		clampPoint( point, target ) {

			const deltaLengthSq = this.center.distanceToSquared( point );

			target.copy( point );

			if ( deltaLengthSq > ( this.radius * this.radius ) ) {

				target.sub( this.center ).normalize();
				target.multiplyScalar( this.radius ).add( this.center );

			}

			return target;

		}

		getBoundingBox( target ) {

			if ( this.isEmpty() ) {

				// Empty sphere produces empty bounding box
				target.makeEmpty();
				return target;

			}

			target.set( this.center, this.center );
			target.expandByScalar( this.radius );

			return target;

		}

		applyMatrix4( matrix ) {

			this.center.applyMatrix4( matrix );
			this.radius = this.radius * matrix.getMaxScaleOnAxis();

			return this;

		}

		translate( offset ) {

			this.center.add( offset );

			return this;

		}

		expandByPoint( point ) {

			if ( this.isEmpty() ) {

				this.center.copy( point );

				this.radius = 0;

				return this;

			}

			_v1$6.subVectors( point, this.center );

			const lengthSq = _v1$6.lengthSq();

			if ( lengthSq > ( this.radius * this.radius ) ) {

				// calculate the minimal sphere

				const length = Math.sqrt( lengthSq );

				const delta = ( length - this.radius ) * 0.5;

				this.center.addScaledVector( _v1$6, delta / length );

				this.radius += delta;

			}

			return this;

		}

		union( sphere ) {

			if ( sphere.isEmpty() ) {

				return this;

			}

			if ( this.isEmpty() ) {

				this.copy( sphere );

				return this;

			}

			if ( this.center.equals( sphere.center ) === true ) {

				 this.radius = Math.max( this.radius, sphere.radius );

			} else {

				_v2$3.subVectors( sphere.center, this.center ).setLength( sphere.radius );

				this.expandByPoint( _v1$6.copy( sphere.center ).add( _v2$3 ) );

				this.expandByPoint( _v1$6.copy( sphere.center ).sub( _v2$3 ) );

			}

			return this;

		}

		equals( sphere ) {

			return sphere.center.equals( this.center ) && ( sphere.radius === this.radius );

		}

		clone() {

			return new this.constructor().copy( this );

		}

	}

	const _vector$9 = /*@__PURE__*/ new Vector3();
	const _segCenter = /*@__PURE__*/ new Vector3();
	const _segDir = /*@__PURE__*/ new Vector3();
	const _diff = /*@__PURE__*/ new Vector3();

	const _edge1 = /*@__PURE__*/ new Vector3();
	const _edge2 = /*@__PURE__*/ new Vector3();
	const _normal$1 = /*@__PURE__*/ new Vector3();

	class Ray {

		constructor( origin = new Vector3(), direction = new Vector3( 0, 0, - 1 ) ) {

			this.origin = origin;
			this.direction = direction;

		}

		set( origin, direction ) {

			this.origin.copy( origin );
			this.direction.copy( direction );

			return this;

		}

		copy( ray ) {

			this.origin.copy( ray.origin );
			this.direction.copy( ray.direction );

			return this;

		}

		at( t, target ) {

			return target.copy( this.origin ).addScaledVector( this.direction, t );

		}

		lookAt( v ) {

			this.direction.copy( v ).sub( this.origin ).normalize();

			return this;

		}

		recast( t ) {

			this.origin.copy( this.at( t, _vector$9 ) );

			return this;

		}

		closestPointToPoint( point, target ) {

			target.subVectors( point, this.origin );

			const directionDistance = target.dot( this.direction );

			if ( directionDistance < 0 ) {

				return target.copy( this.origin );

			}

			return target.copy( this.origin ).addScaledVector( this.direction, directionDistance );

		}

		distanceToPoint( point ) {

			return Math.sqrt( this.distanceSqToPoint( point ) );

		}

		distanceSqToPoint( point ) {

			const directionDistance = _vector$9.subVectors( point, this.origin ).dot( this.direction );

			// point behind the ray

			if ( directionDistance < 0 ) {

				return this.origin.distanceToSquared( point );

			}

			_vector$9.copy( this.origin ).addScaledVector( this.direction, directionDistance );

			return _vector$9.distanceToSquared( point );

		}

		distanceSqToSegment( v0, v1, optionalPointOnRay, optionalPointOnSegment ) {

			// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteDistRaySegment.h
			// It returns the min distance between the ray and the segment
			// defined by v0 and v1
			// It can also set two optional targets :
			// - The closest point on the ray
			// - The closest point on the segment

			_segCenter.copy( v0 ).add( v1 ).multiplyScalar( 0.5 );
			_segDir.copy( v1 ).sub( v0 ).normalize();
			_diff.copy( this.origin ).sub( _segCenter );

			const segExtent = v0.distanceTo( v1 ) * 0.5;
			const a01 = - this.direction.dot( _segDir );
			const b0 = _diff.dot( this.direction );
			const b1 = - _diff.dot( _segDir );
			const c = _diff.lengthSq();
			const det = Math.abs( 1 - a01 * a01 );
			let s0, s1, sqrDist, extDet;

			if ( det > 0 ) {

				// The ray and segment are not parallel.

				s0 = a01 * b1 - b0;
				s1 = a01 * b0 - b1;
				extDet = segExtent * det;

				if ( s0 >= 0 ) {

					if ( s1 >= - extDet ) {

						if ( s1 <= extDet ) {

							// region 0
							// Minimum at interior points of ray and segment.

							const invDet = 1 / det;
							s0 *= invDet;
							s1 *= invDet;
							sqrDist = s0 * ( s0 + a01 * s1 + 2 * b0 ) + s1 * ( a01 * s0 + s1 + 2 * b1 ) + c;

						} else {

							// region 1

							s1 = segExtent;
							s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
							sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

						}

					} else {

						// region 5

						s1 = - segExtent;
						s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					}

				} else {

					if ( s1 <= - extDet ) {

						// region 4

						s0 = Math.max( 0, - ( - a01 * segExtent + b0 ) );
						s1 = ( s0 > 0 ) ? - segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					} else if ( s1 <= extDet ) {

						// region 3

						s0 = 0;
						s1 = Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = s1 * ( s1 + 2 * b1 ) + c;

					} else {

						// region 2

						s0 = Math.max( 0, - ( a01 * segExtent + b0 ) );
						s1 = ( s0 > 0 ) ? segExtent : Math.min( Math.max( - segExtent, - b1 ), segExtent );
						sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

					}

				}

			} else {

				// Ray and segment are parallel.

				s1 = ( a01 > 0 ) ? - segExtent : segExtent;
				s0 = Math.max( 0, - ( a01 * s1 + b0 ) );
				sqrDist = - s0 * s0 + s1 * ( s1 + 2 * b1 ) + c;

			}

			if ( optionalPointOnRay ) {

				optionalPointOnRay.copy( this.origin ).addScaledVector( this.direction, s0 );

			}

			if ( optionalPointOnSegment ) {

				optionalPointOnSegment.copy( _segCenter ).addScaledVector( _segDir, s1 );

			}

			return sqrDist;

		}

		intersectSphere( sphere, target ) {

			_vector$9.subVectors( sphere.center, this.origin );
			const tca = _vector$9.dot( this.direction );
			const d2 = _vector$9.dot( _vector$9 ) - tca * tca;
			const radius2 = sphere.radius * sphere.radius;

			if ( d2 > radius2 ) return null;

			const thc = Math.sqrt( radius2 - d2 );

			// t0 = first intersect point - entrance on front of sphere
			const t0 = tca - thc;

			// t1 = second intersect point - exit point on back of sphere
			const t1 = tca + thc;

			// test to see if t1 is behind the ray - if so, return null
			if ( t1 < 0 ) return null;

			// test to see if t0 is behind the ray:
			// if it is, the ray is inside the sphere, so return the second exit point scaled by t1,
			// in order to always return an intersect point that is in front of the ray.
			if ( t0 < 0 ) return this.at( t1, target );

			// else t0 is in front of the ray, so return the first collision point scaled by t0
			return this.at( t0, target );

		}

		intersectsSphere( sphere ) {

			return this.distanceSqToPoint( sphere.center ) <= ( sphere.radius * sphere.radius );

		}

		distanceToPlane( plane ) {

			const denominator = plane.normal.dot( this.direction );

			if ( denominator === 0 ) {

				// line is coplanar, return origin
				if ( plane.distanceToPoint( this.origin ) === 0 ) {

					return 0;

				}

				// Null is preferable to undefined since undefined means.... it is undefined

				return null;

			}

			const t = - ( this.origin.dot( plane.normal ) + plane.constant ) / denominator;

			// Return if the ray never intersects the plane

			return t >= 0 ? t : null;

		}

		intersectPlane( plane, target ) {

			const t = this.distanceToPlane( plane );

			if ( t === null ) {

				return null;

			}

			return this.at( t, target );

		}

		intersectsPlane( plane ) {

			// check if the ray lies on the plane first

			const distToPoint = plane.distanceToPoint( this.origin );

			if ( distToPoint === 0 ) {

				return true;

			}

			const denominator = plane.normal.dot( this.direction );

			if ( denominator * distToPoint < 0 ) {

				return true;

			}

			// ray origin is behind the plane (and is pointing behind it)

			return false;

		}

		intersectBox( box, target ) {

			let tmin, tmax, tymin, tymax, tzmin, tzmax;

			const invdirx = 1 / this.direction.x,
				invdiry = 1 / this.direction.y,
				invdirz = 1 / this.direction.z;

			const origin = this.origin;

			if ( invdirx >= 0 ) {

				tmin = ( box.min.x - origin.x ) * invdirx;
				tmax = ( box.max.x - origin.x ) * invdirx;

			} else {

				tmin = ( box.max.x - origin.x ) * invdirx;
				tmax = ( box.min.x - origin.x ) * invdirx;

			}

			if ( invdiry >= 0 ) {

				tymin = ( box.min.y - origin.y ) * invdiry;
				tymax = ( box.max.y - origin.y ) * invdiry;

			} else {

				tymin = ( box.max.y - origin.y ) * invdiry;
				tymax = ( box.min.y - origin.y ) * invdiry;

			}

			if ( ( tmin > tymax ) || ( tymin > tmax ) ) return null;

			if ( tymin > tmin || isNaN( tmin ) ) tmin = tymin;

			if ( tymax < tmax || isNaN( tmax ) ) tmax = tymax;

			if ( invdirz >= 0 ) {

				tzmin = ( box.min.z - origin.z ) * invdirz;
				tzmax = ( box.max.z - origin.z ) * invdirz;

			} else {

				tzmin = ( box.max.z - origin.z ) * invdirz;
				tzmax = ( box.min.z - origin.z ) * invdirz;

			}

			if ( ( tmin > tzmax ) || ( tzmin > tmax ) ) return null;

			if ( tzmin > tmin || tmin !== tmin ) tmin = tzmin;

			if ( tzmax < tmax || tmax !== tmax ) tmax = tzmax;

			//return point closest to the ray (positive side)

			if ( tmax < 0 ) return null;

			return this.at( tmin >= 0 ? tmin : tmax, target );

		}

		intersectsBox( box ) {

			return this.intersectBox( box, _vector$9 ) !== null;

		}

		intersectTriangle( a, b, c, backfaceCulling, target ) {

			// Compute the offset origin, edges, and normal.

			// from https://github.com/pmjoniak/GeometricTools/blob/master/GTEngine/Include/Mathematics/GteIntrRay3Triangle3.h

			_edge1.subVectors( b, a );
			_edge2.subVectors( c, a );
			_normal$1.crossVectors( _edge1, _edge2 );

			// Solve Q + t*D = b1*E1 + b2*E2 (Q = kDiff, D = ray direction,
			// E1 = kEdge1, E2 = kEdge2, N = Cross(E1,E2)) by
			//   |Dot(D,N)|*b1 = sign(Dot(D,N))*Dot(D,Cross(Q,E2))
			//   |Dot(D,N)|*b2 = sign(Dot(D,N))*Dot(D,Cross(E1,Q))
			//   |Dot(D,N)|*t = -sign(Dot(D,N))*Dot(Q,N)
			let DdN = this.direction.dot( _normal$1 );
			let sign;

			if ( DdN > 0 ) {

				if ( backfaceCulling ) return null;
				sign = 1;

			} else if ( DdN < 0 ) {

				sign = - 1;
				DdN = - DdN;

			} else {

				return null;

			}

			_diff.subVectors( this.origin, a );
			const DdQxE2 = sign * this.direction.dot( _edge2.crossVectors( _diff, _edge2 ) );

			// b1 < 0, no intersection
			if ( DdQxE2 < 0 ) {

				return null;

			}

			const DdE1xQ = sign * this.direction.dot( _edge1.cross( _diff ) );

			// b2 < 0, no intersection
			if ( DdE1xQ < 0 ) {

				return null;

			}

			// b1+b2 > 1, no intersection
			if ( DdQxE2 + DdE1xQ > DdN ) {

				return null;

			}

			// Line intersects triangle, check if ray does.
			const QdN = - sign * _diff.dot( _normal$1 );

			// t < 0, no intersection
			if ( QdN < 0 ) {

				return null;

			}

			// Ray intersects triangle.
			return this.at( QdN / DdN, target );

		}

		applyMatrix4( matrix4 ) {

			this.origin.applyMatrix4( matrix4 );
			this.direction.transformDirection( matrix4 );

			return this;

		}

		equals( ray ) {

			return ray.origin.equals( this.origin ) && ray.direction.equals( this.direction );

		}

		clone() {

			return new this.constructor().copy( this );

		}

	}

	class Matrix4 {

		constructor( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

			Matrix4.prototype.isMatrix4 = true;

			this.elements = [

				1, 0, 0, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1

			];

			if ( n11 !== undefined ) {

				this.set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 );

			}

		}

		set( n11, n12, n13, n14, n21, n22, n23, n24, n31, n32, n33, n34, n41, n42, n43, n44 ) {

			const te = this.elements;

			te[ 0 ] = n11; te[ 4 ] = n12; te[ 8 ] = n13; te[ 12 ] = n14;
			te[ 1 ] = n21; te[ 5 ] = n22; te[ 9 ] = n23; te[ 13 ] = n24;
			te[ 2 ] = n31; te[ 6 ] = n32; te[ 10 ] = n33; te[ 14 ] = n34;
			te[ 3 ] = n41; te[ 7 ] = n42; te[ 11 ] = n43; te[ 15 ] = n44;

			return this;

		}

		identity() {

			this.set(

				1, 0, 0, 0,
				0, 1, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1

			);

			return this;

		}

		clone() {

			return new Matrix4().fromArray( this.elements );

		}

		copy( m ) {

			const te = this.elements;
			const me = m.elements;

			te[ 0 ] = me[ 0 ]; te[ 1 ] = me[ 1 ]; te[ 2 ] = me[ 2 ]; te[ 3 ] = me[ 3 ];
			te[ 4 ] = me[ 4 ]; te[ 5 ] = me[ 5 ]; te[ 6 ] = me[ 6 ]; te[ 7 ] = me[ 7 ];
			te[ 8 ] = me[ 8 ]; te[ 9 ] = me[ 9 ]; te[ 10 ] = me[ 10 ]; te[ 11 ] = me[ 11 ];
			te[ 12 ] = me[ 12 ]; te[ 13 ] = me[ 13 ]; te[ 14 ] = me[ 14 ]; te[ 15 ] = me[ 15 ];

			return this;

		}

		copyPosition( m ) {

			const te = this.elements, me = m.elements;

			te[ 12 ] = me[ 12 ];
			te[ 13 ] = me[ 13 ];
			te[ 14 ] = me[ 14 ];

			return this;

		}

		setFromMatrix3( m ) {

			const me = m.elements;

			this.set(

				me[ 0 ], me[ 3 ], me[ 6 ], 0,
				me[ 1 ], me[ 4 ], me[ 7 ], 0,
				me[ 2 ], me[ 5 ], me[ 8 ], 0,
				0, 0, 0, 1

			);

			return this;

		}

		extractBasis( xAxis, yAxis, zAxis ) {

			xAxis.setFromMatrixColumn( this, 0 );
			yAxis.setFromMatrixColumn( this, 1 );
			zAxis.setFromMatrixColumn( this, 2 );

			return this;

		}

		makeBasis( xAxis, yAxis, zAxis ) {

			this.set(
				xAxis.x, yAxis.x, zAxis.x, 0,
				xAxis.y, yAxis.y, zAxis.y, 0,
				xAxis.z, yAxis.z, zAxis.z, 0,
				0, 0, 0, 1
			);

			return this;

		}

		extractRotation( m ) {

			// this method does not support reflection matrices

			const te = this.elements;
			const me = m.elements;

			const scaleX = 1 / _v1$5.setFromMatrixColumn( m, 0 ).length();
			const scaleY = 1 / _v1$5.setFromMatrixColumn( m, 1 ).length();
			const scaleZ = 1 / _v1$5.setFromMatrixColumn( m, 2 ).length();

			te[ 0 ] = me[ 0 ] * scaleX;
			te[ 1 ] = me[ 1 ] * scaleX;
			te[ 2 ] = me[ 2 ] * scaleX;
			te[ 3 ] = 0;

			te[ 4 ] = me[ 4 ] * scaleY;
			te[ 5 ] = me[ 5 ] * scaleY;
			te[ 6 ] = me[ 6 ] * scaleY;
			te[ 7 ] = 0;

			te[ 8 ] = me[ 8 ] * scaleZ;
			te[ 9 ] = me[ 9 ] * scaleZ;
			te[ 10 ] = me[ 10 ] * scaleZ;
			te[ 11 ] = 0;

			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		}

		makeRotationFromEuler( euler ) {

			const te = this.elements;

			const x = euler.x, y = euler.y, z = euler.z;
			const a = Math.cos( x ), b = Math.sin( x );
			const c = Math.cos( y ), d = Math.sin( y );
			const e = Math.cos( z ), f = Math.sin( z );

			if ( euler.order === 'XYZ' ) {

				const ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = - c * f;
				te[ 8 ] = d;

				te[ 1 ] = af + be * d;
				te[ 5 ] = ae - bf * d;
				te[ 9 ] = - b * c;

				te[ 2 ] = bf - ae * d;
				te[ 6 ] = be + af * d;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YXZ' ) {

				const ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce + df * b;
				te[ 4 ] = de * b - cf;
				te[ 8 ] = a * d;

				te[ 1 ] = a * f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b;

				te[ 2 ] = cf * b - de;
				te[ 6 ] = df + ce * b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZXY' ) {

				const ce = c * e, cf = c * f, de = d * e, df = d * f;

				te[ 0 ] = ce - df * b;
				te[ 4 ] = - a * f;
				te[ 8 ] = de + cf * b;

				te[ 1 ] = cf + de * b;
				te[ 5 ] = a * e;
				te[ 9 ] = df - ce * b;

				te[ 2 ] = - a * d;
				te[ 6 ] = b;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'ZYX' ) {

				const ae = a * e, af = a * f, be = b * e, bf = b * f;

				te[ 0 ] = c * e;
				te[ 4 ] = be * d - af;
				te[ 8 ] = ae * d + bf;

				te[ 1 ] = c * f;
				te[ 5 ] = bf * d + ae;
				te[ 9 ] = af * d - be;

				te[ 2 ] = - d;
				te[ 6 ] = b * c;
				te[ 10 ] = a * c;

			} else if ( euler.order === 'YZX' ) {

				const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = bd - ac * f;
				te[ 8 ] = bc * f + ad;

				te[ 1 ] = f;
				te[ 5 ] = a * e;
				te[ 9 ] = - b * e;

				te[ 2 ] = - d * e;
				te[ 6 ] = ad * f + bc;
				te[ 10 ] = ac - bd * f;

			} else if ( euler.order === 'XZY' ) {

				const ac = a * c, ad = a * d, bc = b * c, bd = b * d;

				te[ 0 ] = c * e;
				te[ 4 ] = - f;
				te[ 8 ] = d * e;

				te[ 1 ] = ac * f + bd;
				te[ 5 ] = a * e;
				te[ 9 ] = ad * f - bc;

				te[ 2 ] = bc * f - ad;
				te[ 6 ] = b * e;
				te[ 10 ] = bd * f + ac;

			}

			// bottom row
			te[ 3 ] = 0;
			te[ 7 ] = 0;
			te[ 11 ] = 0;

			// last column
			te[ 12 ] = 0;
			te[ 13 ] = 0;
			te[ 14 ] = 0;
			te[ 15 ] = 1;

			return this;

		}

		makeRotationFromQuaternion( q ) {

			return this.compose( _zero, q, _one );

		}

		lookAt( eye, target, up ) {

			const te = this.elements;

			_z.subVectors( eye, target );

			if ( _z.lengthSq() === 0 ) {

				// eye and target are in the same position

				_z.z = 1;

			}

			_z.normalize();
			_x.crossVectors( up, _z );

			if ( _x.lengthSq() === 0 ) {

				// up and z are parallel

				if ( Math.abs( up.z ) === 1 ) {

					_z.x += 0.0001;

				} else {

					_z.z += 0.0001;

				}

				_z.normalize();
				_x.crossVectors( up, _z );

			}

			_x.normalize();
			_y.crossVectors( _z, _x );

			te[ 0 ] = _x.x; te[ 4 ] = _y.x; te[ 8 ] = _z.x;
			te[ 1 ] = _x.y; te[ 5 ] = _y.y; te[ 9 ] = _z.y;
			te[ 2 ] = _x.z; te[ 6 ] = _y.z; te[ 10 ] = _z.z;

			return this;

		}

		multiply( m ) {

			return this.multiplyMatrices( this, m );

		}

		premultiply( m ) {

			return this.multiplyMatrices( m, this );

		}

		multiplyMatrices( a, b ) {

			const ae = a.elements;
			const be = b.elements;
			const te = this.elements;

			const a11 = ae[ 0 ], a12 = ae[ 4 ], a13 = ae[ 8 ], a14 = ae[ 12 ];
			const a21 = ae[ 1 ], a22 = ae[ 5 ], a23 = ae[ 9 ], a24 = ae[ 13 ];
			const a31 = ae[ 2 ], a32 = ae[ 6 ], a33 = ae[ 10 ], a34 = ae[ 14 ];
			const a41 = ae[ 3 ], a42 = ae[ 7 ], a43 = ae[ 11 ], a44 = ae[ 15 ];

			const b11 = be[ 0 ], b12 = be[ 4 ], b13 = be[ 8 ], b14 = be[ 12 ];
			const b21 = be[ 1 ], b22 = be[ 5 ], b23 = be[ 9 ], b24 = be[ 13 ];
			const b31 = be[ 2 ], b32 = be[ 6 ], b33 = be[ 10 ], b34 = be[ 14 ];
			const b41 = be[ 3 ], b42 = be[ 7 ], b43 = be[ 11 ], b44 = be[ 15 ];

			te[ 0 ] = a11 * b11 + a12 * b21 + a13 * b31 + a14 * b41;
			te[ 4 ] = a11 * b12 + a12 * b22 + a13 * b32 + a14 * b42;
			te[ 8 ] = a11 * b13 + a12 * b23 + a13 * b33 + a14 * b43;
			te[ 12 ] = a11 * b14 + a12 * b24 + a13 * b34 + a14 * b44;

			te[ 1 ] = a21 * b11 + a22 * b21 + a23 * b31 + a24 * b41;
			te[ 5 ] = a21 * b12 + a22 * b22 + a23 * b32 + a24 * b42;
			te[ 9 ] = a21 * b13 + a22 * b23 + a23 * b33 + a24 * b43;
			te[ 13 ] = a21 * b14 + a22 * b24 + a23 * b34 + a24 * b44;

			te[ 2 ] = a31 * b11 + a32 * b21 + a33 * b31 + a34 * b41;
			te[ 6 ] = a31 * b12 + a32 * b22 + a33 * b32 + a34 * b42;
			te[ 10 ] = a31 * b13 + a32 * b23 + a33 * b33 + a34 * b43;
			te[ 14 ] = a31 * b14 + a32 * b24 + a33 * b34 + a34 * b44;

			te[ 3 ] = a41 * b11 + a42 * b21 + a43 * b31 + a44 * b41;
			te[ 7 ] = a41 * b12 + a42 * b22 + a43 * b32 + a44 * b42;
			te[ 11 ] = a41 * b13 + a42 * b23 + a43 * b33 + a44 * b43;
			te[ 15 ] = a41 * b14 + a42 * b24 + a43 * b34 + a44 * b44;

			return this;

		}

		multiplyScalar( s ) {

			const te = this.elements;

			te[ 0 ] *= s; te[ 4 ] *= s; te[ 8 ] *= s; te[ 12 ] *= s;
			te[ 1 ] *= s; te[ 5 ] *= s; te[ 9 ] *= s; te[ 13 ] *= s;
			te[ 2 ] *= s; te[ 6 ] *= s; te[ 10 ] *= s; te[ 14 ] *= s;
			te[ 3 ] *= s; te[ 7 ] *= s; te[ 11 ] *= s; te[ 15 ] *= s;

			return this;

		}

		determinant() {

			const te = this.elements;

			const n11 = te[ 0 ], n12 = te[ 4 ], n13 = te[ 8 ], n14 = te[ 12 ];
			const n21 = te[ 1 ], n22 = te[ 5 ], n23 = te[ 9 ], n24 = te[ 13 ];
			const n31 = te[ 2 ], n32 = te[ 6 ], n33 = te[ 10 ], n34 = te[ 14 ];
			const n41 = te[ 3 ], n42 = te[ 7 ], n43 = te[ 11 ], n44 = te[ 15 ];

			//TODO: make this more efficient
			//( based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm )

			return (
				n41 * (
					+ n14 * n23 * n32
					 - n13 * n24 * n32
					 - n14 * n22 * n33
					 + n12 * n24 * n33
					 + n13 * n22 * n34
					 - n12 * n23 * n34
				) +
				n42 * (
					+ n11 * n23 * n34
					 - n11 * n24 * n33
					 + n14 * n21 * n33
					 - n13 * n21 * n34
					 + n13 * n24 * n31
					 - n14 * n23 * n31
				) +
				n43 * (
					+ n11 * n24 * n32
					 - n11 * n22 * n34
					 - n14 * n21 * n32
					 + n12 * n21 * n34
					 + n14 * n22 * n31
					 - n12 * n24 * n31
				) +
				n44 * (
					- n13 * n22 * n31
					 - n11 * n23 * n32
					 + n11 * n22 * n33
					 + n13 * n21 * n32
					 - n12 * n21 * n33
					 + n12 * n23 * n31
				)

			);

		}

		transpose() {

			const te = this.elements;
			let tmp;

			tmp = te[ 1 ]; te[ 1 ] = te[ 4 ]; te[ 4 ] = tmp;
			tmp = te[ 2 ]; te[ 2 ] = te[ 8 ]; te[ 8 ] = tmp;
			tmp = te[ 6 ]; te[ 6 ] = te[ 9 ]; te[ 9 ] = tmp;

			tmp = te[ 3 ]; te[ 3 ] = te[ 12 ]; te[ 12 ] = tmp;
			tmp = te[ 7 ]; te[ 7 ] = te[ 13 ]; te[ 13 ] = tmp;
			tmp = te[ 11 ]; te[ 11 ] = te[ 14 ]; te[ 14 ] = tmp;

			return this;

		}

		setPosition( x, y, z ) {

			const te = this.elements;

			if ( x.isVector3 ) {

				te[ 12 ] = x.x;
				te[ 13 ] = x.y;
				te[ 14 ] = x.z;

			} else {

				te[ 12 ] = x;
				te[ 13 ] = y;
				te[ 14 ] = z;

			}

			return this;

		}

		invert() {

			// based on http://www.euclideanspace.com/maths/algebra/matrix/functions/inverse/fourD/index.htm
			const te = this.elements,

				n11 = te[ 0 ], n21 = te[ 1 ], n31 = te[ 2 ], n41 = te[ 3 ],
				n12 = te[ 4 ], n22 = te[ 5 ], n32 = te[ 6 ], n42 = te[ 7 ],
				n13 = te[ 8 ], n23 = te[ 9 ], n33 = te[ 10 ], n43 = te[ 11 ],
				n14 = te[ 12 ], n24 = te[ 13 ], n34 = te[ 14 ], n44 = te[ 15 ],

				t11 = n23 * n34 * n42 - n24 * n33 * n42 + n24 * n32 * n43 - n22 * n34 * n43 - n23 * n32 * n44 + n22 * n33 * n44,
				t12 = n14 * n33 * n42 - n13 * n34 * n42 - n14 * n32 * n43 + n12 * n34 * n43 + n13 * n32 * n44 - n12 * n33 * n44,
				t13 = n13 * n24 * n42 - n14 * n23 * n42 + n14 * n22 * n43 - n12 * n24 * n43 - n13 * n22 * n44 + n12 * n23 * n44,
				t14 = n14 * n23 * n32 - n13 * n24 * n32 - n14 * n22 * n33 + n12 * n24 * n33 + n13 * n22 * n34 - n12 * n23 * n34;

			const det = n11 * t11 + n21 * t12 + n31 * t13 + n41 * t14;

			if ( det === 0 ) return this.set( 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 );

			const detInv = 1 / det;

			te[ 0 ] = t11 * detInv;
			te[ 1 ] = ( n24 * n33 * n41 - n23 * n34 * n41 - n24 * n31 * n43 + n21 * n34 * n43 + n23 * n31 * n44 - n21 * n33 * n44 ) * detInv;
			te[ 2 ] = ( n22 * n34 * n41 - n24 * n32 * n41 + n24 * n31 * n42 - n21 * n34 * n42 - n22 * n31 * n44 + n21 * n32 * n44 ) * detInv;
			te[ 3 ] = ( n23 * n32 * n41 - n22 * n33 * n41 - n23 * n31 * n42 + n21 * n33 * n42 + n22 * n31 * n43 - n21 * n32 * n43 ) * detInv;

			te[ 4 ] = t12 * detInv;
			te[ 5 ] = ( n13 * n34 * n41 - n14 * n33 * n41 + n14 * n31 * n43 - n11 * n34 * n43 - n13 * n31 * n44 + n11 * n33 * n44 ) * detInv;
			te[ 6 ] = ( n14 * n32 * n41 - n12 * n34 * n41 - n14 * n31 * n42 + n11 * n34 * n42 + n12 * n31 * n44 - n11 * n32 * n44 ) * detInv;
			te[ 7 ] = ( n12 * n33 * n41 - n13 * n32 * n41 + n13 * n31 * n42 - n11 * n33 * n42 - n12 * n31 * n43 + n11 * n32 * n43 ) * detInv;

			te[ 8 ] = t13 * detInv;
			te[ 9 ] = ( n14 * n23 * n41 - n13 * n24 * n41 - n14 * n21 * n43 + n11 * n24 * n43 + n13 * n21 * n44 - n11 * n23 * n44 ) * detInv;
			te[ 10 ] = ( n12 * n24 * n41 - n14 * n22 * n41 + n14 * n21 * n42 - n11 * n24 * n42 - n12 * n21 * n44 + n11 * n22 * n44 ) * detInv;
			te[ 11 ] = ( n13 * n22 * n41 - n12 * n23 * n41 - n13 * n21 * n42 + n11 * n23 * n42 + n12 * n21 * n43 - n11 * n22 * n43 ) * detInv;

			te[ 12 ] = t14 * detInv;
			te[ 13 ] = ( n13 * n24 * n31 - n14 * n23 * n31 + n14 * n21 * n33 - n11 * n24 * n33 - n13 * n21 * n34 + n11 * n23 * n34 ) * detInv;
			te[ 14 ] = ( n14 * n22 * n31 - n12 * n24 * n31 - n14 * n21 * n32 + n11 * n24 * n32 + n12 * n21 * n34 - n11 * n22 * n34 ) * detInv;
			te[ 15 ] = ( n12 * n23 * n31 - n13 * n22 * n31 + n13 * n21 * n32 - n11 * n23 * n32 - n12 * n21 * n33 + n11 * n22 * n33 ) * detInv;

			return this;

		}

		scale( v ) {

			const te = this.elements;
			const x = v.x, y = v.y, z = v.z;

			te[ 0 ] *= x; te[ 4 ] *= y; te[ 8 ] *= z;
			te[ 1 ] *= x; te[ 5 ] *= y; te[ 9 ] *= z;
			te[ 2 ] *= x; te[ 6 ] *= y; te[ 10 ] *= z;
			te[ 3 ] *= x; te[ 7 ] *= y; te[ 11 ] *= z;

			return this;

		}

		getMaxScaleOnAxis() {

			const te = this.elements;

			const scaleXSq = te[ 0 ] * te[ 0 ] + te[ 1 ] * te[ 1 ] + te[ 2 ] * te[ 2 ];
			const scaleYSq = te[ 4 ] * te[ 4 ] + te[ 5 ] * te[ 5 ] + te[ 6 ] * te[ 6 ];
			const scaleZSq = te[ 8 ] * te[ 8 ] + te[ 9 ] * te[ 9 ] + te[ 10 ] * te[ 10 ];

			return Math.sqrt( Math.max( scaleXSq, scaleYSq, scaleZSq ) );

		}

		makeTranslation( x, y, z ) {

			if ( x.isVector3 ) {

				this.set(

					1, 0, 0, x.x,
					0, 1, 0, x.y,
					0, 0, 1, x.z,
					0, 0, 0, 1

				);

			} else {

				this.set(

					1, 0, 0, x,
					0, 1, 0, y,
					0, 0, 1, z,
					0, 0, 0, 1

				);

			}

			return this;

		}

		makeRotationX( theta ) {

			const c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				1, 0, 0, 0,
				0, c, - s, 0,
				0, s, c, 0,
				0, 0, 0, 1

			);

			return this;

		}

		makeRotationY( theta ) {

			const c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				 c, 0, s, 0,
				 0, 1, 0, 0,
				- s, 0, c, 0,
				 0, 0, 0, 1

			);

			return this;

		}

		makeRotationZ( theta ) {

			const c = Math.cos( theta ), s = Math.sin( theta );

			this.set(

				c, - s, 0, 0,
				s, c, 0, 0,
				0, 0, 1, 0,
				0, 0, 0, 1

			);

			return this;

		}

		makeRotationAxis( axis, angle ) {

			// Based on http://www.gamedev.net/reference/articles/article1199.asp

			const c = Math.cos( angle );
			const s = Math.sin( angle );
			const t = 1 - c;
			const x = axis.x, y = axis.y, z = axis.z;
			const tx = t * x, ty = t * y;

			this.set(

				tx * x + c, tx * y - s * z, tx * z + s * y, 0,
				tx * y + s * z, ty * y + c, ty * z - s * x, 0,
				tx * z - s * y, ty * z + s * x, t * z * z + c, 0,
				0, 0, 0, 1

			);

			return this;

		}

		makeScale( x, y, z ) {

			this.set(

				x, 0, 0, 0,
				0, y, 0, 0,
				0, 0, z, 0,
				0, 0, 0, 1

			);

			return this;

		}

		makeShear( xy, xz, yx, yz, zx, zy ) {

			this.set(

				1, yx, zx, 0,
				xy, 1, zy, 0,
				xz, yz, 1, 0,
				0, 0, 0, 1

			);

			return this;

		}

		compose( position, quaternion, scale ) {

			const te = this.elements;

			const x = quaternion._x, y = quaternion._y, z = quaternion._z, w = quaternion._w;
			const x2 = x + x,	y2 = y + y, z2 = z + z;
			const xx = x * x2, xy = x * y2, xz = x * z2;
			const yy = y * y2, yz = y * z2, zz = z * z2;
			const wx = w * x2, wy = w * y2, wz = w * z2;

			const sx = scale.x, sy = scale.y, sz = scale.z;

			te[ 0 ] = ( 1 - ( yy + zz ) ) * sx;
			te[ 1 ] = ( xy + wz ) * sx;
			te[ 2 ] = ( xz - wy ) * sx;
			te[ 3 ] = 0;

			te[ 4 ] = ( xy - wz ) * sy;
			te[ 5 ] = ( 1 - ( xx + zz ) ) * sy;
			te[ 6 ] = ( yz + wx ) * sy;
			te[ 7 ] = 0;

			te[ 8 ] = ( xz + wy ) * sz;
			te[ 9 ] = ( yz - wx ) * sz;
			te[ 10 ] = ( 1 - ( xx + yy ) ) * sz;
			te[ 11 ] = 0;

			te[ 12 ] = position.x;
			te[ 13 ] = position.y;
			te[ 14 ] = position.z;
			te[ 15 ] = 1;

			return this;

		}

		decompose( position, quaternion, scale ) {

			const te = this.elements;

			let sx = _v1$5.set( te[ 0 ], te[ 1 ], te[ 2 ] ).length();
			const sy = _v1$5.set( te[ 4 ], te[ 5 ], te[ 6 ] ).length();
			const sz = _v1$5.set( te[ 8 ], te[ 9 ], te[ 10 ] ).length();

			// if determine is negative, we need to invert one scale
			const det = this.determinant();
			if ( det < 0 ) sx = - sx;

			position.x = te[ 12 ];
			position.y = te[ 13 ];
			position.z = te[ 14 ];

			// scale the rotation part
			_m1$2.copy( this );

			const invSX = 1 / sx;
			const invSY = 1 / sy;
			const invSZ = 1 / sz;

			_m1$2.elements[ 0 ] *= invSX;
			_m1$2.elements[ 1 ] *= invSX;
			_m1$2.elements[ 2 ] *= invSX;

			_m1$2.elements[ 4 ] *= invSY;
			_m1$2.elements[ 5 ] *= invSY;
			_m1$2.elements[ 6 ] *= invSY;

			_m1$2.elements[ 8 ] *= invSZ;
			_m1$2.elements[ 9 ] *= invSZ;
			_m1$2.elements[ 10 ] *= invSZ;

			quaternion.setFromRotationMatrix( _m1$2 );

			scale.x = sx;
			scale.y = sy;
			scale.z = sz;

			return this;

		}

		makePerspective( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {

			const te = this.elements;
			const x = 2 * near / ( right - left );
			const y = 2 * near / ( top - bottom );

			const a = ( right + left ) / ( right - left );
			const b = ( top + bottom ) / ( top - bottom );

			let c, d;

			if ( coordinateSystem === WebGLCoordinateSystem ) {

				c = - ( far + near ) / ( far - near );
				d = ( - 2 * far * near ) / ( far - near );

			} else if ( coordinateSystem === WebGPUCoordinateSystem ) {

				c = - far / ( far - near );
				d = ( - far * near ) / ( far - near );

			} else {

				throw new Error( 'THREE.Matrix4.makePerspective(): Invalid coordinate system: ' + coordinateSystem );

			}

			te[ 0 ] = x;	te[ 4 ] = 0;	te[ 8 ] = a; 	te[ 12 ] = 0;
			te[ 1 ] = 0;	te[ 5 ] = y;	te[ 9 ] = b; 	te[ 13 ] = 0;
			te[ 2 ] = 0;	te[ 6 ] = 0;	te[ 10 ] = c; 	te[ 14 ] = d;
			te[ 3 ] = 0;	te[ 7 ] = 0;	te[ 11 ] = - 1;	te[ 15 ] = 0;

			return this;

		}

		makeOrthographic( left, right, top, bottom, near, far, coordinateSystem = WebGLCoordinateSystem ) {

			const te = this.elements;
			const w = 1.0 / ( right - left );
			const h = 1.0 / ( top - bottom );
			const p = 1.0 / ( far - near );

			const x = ( right + left ) * w;
			const y = ( top + bottom ) * h;

			let z, zInv;

			if ( coordinateSystem === WebGLCoordinateSystem ) {

				z = ( far + near ) * p;
				zInv = - 2 * p;

			} else if ( coordinateSystem === WebGPUCoordinateSystem ) {

				z = near * p;
				zInv = - 1 * p;

			} else {

				throw new Error( 'THREE.Matrix4.makeOrthographic(): Invalid coordinate system: ' + coordinateSystem );

			}

			te[ 0 ] = 2 * w;	te[ 4 ] = 0;		te[ 8 ] = 0; 		te[ 12 ] = - x;
			te[ 1 ] = 0; 		te[ 5 ] = 2 * h;	te[ 9 ] = 0; 		te[ 13 ] = - y;
			te[ 2 ] = 0; 		te[ 6 ] = 0;		te[ 10 ] = zInv;	te[ 14 ] = - z;
			te[ 3 ] = 0; 		te[ 7 ] = 0;		te[ 11 ] = 0;		te[ 15 ] = 1;

			return this;

		}

		equals( matrix ) {

			const te = this.elements;
			const me = matrix.elements;

			for ( let i = 0; i < 16; i ++ ) {

				if ( te[ i ] !== me[ i ] ) return false;

			}

			return true;

		}

		fromArray( array, offset = 0 ) {

			for ( let i = 0; i < 16; i ++ ) {

				this.elements[ i ] = array[ i + offset ];

			}

			return this;

		}

		toArray( array = [], offset = 0 ) {

			const te = this.elements;

			array[ offset ] = te[ 0 ];
			array[ offset + 1 ] = te[ 1 ];
			array[ offset + 2 ] = te[ 2 ];
			array[ offset + 3 ] = te[ 3 ];

			array[ offset + 4 ] = te[ 4 ];
			array[ offset + 5 ] = te[ 5 ];
			array[ offset + 6 ] = te[ 6 ];
			array[ offset + 7 ] = te[ 7 ];

			array[ offset + 8 ] = te[ 8 ];
			array[ offset + 9 ] = te[ 9 ];
			array[ offset + 10 ] = te[ 10 ];
			array[ offset + 11 ] = te[ 11 ];

			array[ offset + 12 ] = te[ 12 ];
			array[ offset + 13 ] = te[ 13 ];
			array[ offset + 14 ] = te[ 14 ];
			array[ offset + 15 ] = te[ 15 ];

			return array;

		}

	}

	const _v1$5 = /*@__PURE__*/ new Vector3();
	const _m1$2 = /*@__PURE__*/ new Matrix4();
	const _zero = /*@__PURE__*/ new Vector3( 0, 0, 0 );
	const _one = /*@__PURE__*/ new Vector3( 1, 1, 1 );
	const _x = /*@__PURE__*/ new Vector3();
	const _y = /*@__PURE__*/ new Vector3();
	const _z = /*@__PURE__*/ new Vector3();

	const _matrix = /*@__PURE__*/ new Matrix4();
	const _quaternion$3 = /*@__PURE__*/ new Quaternion();

	class Euler {

		constructor( x = 0, y = 0, z = 0, order = Euler.DEFAULT_ORDER ) {

			this.isEuler = true;

			this._x = x;
			this._y = y;
			this._z = z;
			this._order = order;

		}

		get x() {

			return this._x;

		}

		set x( value ) {

			this._x = value;
			this._onChangeCallback();

		}

		get y() {

			return this._y;

		}

		set y( value ) {

			this._y = value;
			this._onChangeCallback();

		}

		get z() {

			return this._z;

		}

		set z( value ) {

			this._z = value;
			this._onChangeCallback();

		}

		get order() {

			return this._order;

		}

		set order( value ) {

			this._order = value;
			this._onChangeCallback();

		}

		set( x, y, z, order = this._order ) {

			this._x = x;
			this._y = y;
			this._z = z;
			this._order = order;

			this._onChangeCallback();

			return this;

		}

		clone() {

			return new this.constructor( this._x, this._y, this._z, this._order );

		}

		copy( euler ) {

			this._x = euler._x;
			this._y = euler._y;
			this._z = euler._z;
			this._order = euler._order;

			this._onChangeCallback();

			return this;

		}

		setFromRotationMatrix( m, order = this._order, update = true ) {

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			const te = m.elements;
			const m11 = te[ 0 ], m12 = te[ 4 ], m13 = te[ 8 ];
			const m21 = te[ 1 ], m22 = te[ 5 ], m23 = te[ 9 ];
			const m31 = te[ 2 ], m32 = te[ 6 ], m33 = te[ 10 ];

			switch ( order ) {

				case 'XYZ':

					this._y = Math.asin( clamp( m13, - 1, 1 ) );

					if ( Math.abs( m13 ) < 0.9999999 ) {

						this._x = Math.atan2( - m23, m33 );
						this._z = Math.atan2( - m12, m11 );

					} else {

						this._x = Math.atan2( m32, m22 );
						this._z = 0;

					}

					break;

				case 'YXZ':

					this._x = Math.asin( - clamp( m23, - 1, 1 ) );

					if ( Math.abs( m23 ) < 0.9999999 ) {

						this._y = Math.atan2( m13, m33 );
						this._z = Math.atan2( m21, m22 );

					} else {

						this._y = Math.atan2( - m31, m11 );
						this._z = 0;

					}

					break;

				case 'ZXY':

					this._x = Math.asin( clamp( m32, - 1, 1 ) );

					if ( Math.abs( m32 ) < 0.9999999 ) {

						this._y = Math.atan2( - m31, m33 );
						this._z = Math.atan2( - m12, m22 );

					} else {

						this._y = 0;
						this._z = Math.atan2( m21, m11 );

					}

					break;

				case 'ZYX':

					this._y = Math.asin( - clamp( m31, - 1, 1 ) );

					if ( Math.abs( m31 ) < 0.9999999 ) {

						this._x = Math.atan2( m32, m33 );
						this._z = Math.atan2( m21, m11 );

					} else {

						this._x = 0;
						this._z = Math.atan2( - m12, m22 );

					}

					break;

				case 'YZX':

					this._z = Math.asin( clamp( m21, - 1, 1 ) );

					if ( Math.abs( m21 ) < 0.9999999 ) {

						this._x = Math.atan2( - m23, m22 );
						this._y = Math.atan2( - m31, m11 );

					} else {

						this._x = 0;
						this._y = Math.atan2( m13, m33 );

					}

					break;

				case 'XZY':

					this._z = Math.asin( - clamp( m12, - 1, 1 ) );

					if ( Math.abs( m12 ) < 0.9999999 ) {

						this._x = Math.atan2( m32, m22 );
						this._y = Math.atan2( m13, m11 );

					} else {

						this._x = Math.atan2( - m23, m33 );
						this._y = 0;

					}

					break;

				default:

					console.warn( 'THREE.Euler: .setFromRotationMatrix() encountered an unknown order: ' + order );

			}

			this._order = order;

			if ( update === true ) this._onChangeCallback();

			return this;

		}

		setFromQuaternion( q, order, update ) {

			_matrix.makeRotationFromQuaternion( q );

			return this.setFromRotationMatrix( _matrix, order, update );

		}

		setFromVector3( v, order = this._order ) {

			return this.set( v.x, v.y, v.z, order );

		}

		reorder( newOrder ) {

			// WARNING: this discards revolution information -bhouston

			_quaternion$3.setFromEuler( this );

			return this.setFromQuaternion( _quaternion$3, newOrder );

		}

		equals( euler ) {

			return ( euler._x === this._x ) && ( euler._y === this._y ) && ( euler._z === this._z ) && ( euler._order === this._order );

		}

		fromArray( array ) {

			this._x = array[ 0 ];
			this._y = array[ 1 ];
			this._z = array[ 2 ];
			if ( array[ 3 ] !== undefined ) this._order = array[ 3 ];

			this._onChangeCallback();

			return this;

		}

		toArray( array = [], offset = 0 ) {

			array[ offset ] = this._x;
			array[ offset + 1 ] = this._y;
			array[ offset + 2 ] = this._z;
			array[ offset + 3 ] = this._order;

			return array;

		}

		_onChange( callback ) {

			this._onChangeCallback = callback;

			return this;

		}

		_onChangeCallback() {}

		*[ Symbol.iterator ]() {

			yield this._x;
			yield this._y;
			yield this._z;
			yield this._order;

		}

	}

	Euler.DEFAULT_ORDER = 'XYZ';

	class Layers {

		constructor() {

			this.mask = 1 | 0;

		}

		set( channel ) {

			this.mask = ( 1 << channel | 0 ) >>> 0;

		}

		enable( channel ) {

			this.mask |= 1 << channel | 0;

		}

		enableAll() {

			this.mask = 0xffffffff | 0;

		}

		toggle( channel ) {

			this.mask ^= 1 << channel | 0;

		}

		disable( channel ) {

			this.mask &= ~ ( 1 << channel | 0 );

		}

		disableAll() {

			this.mask = 0;

		}

		test( layers ) {

			return ( this.mask & layers.mask ) !== 0;

		}

		isEnabled( channel ) {

			return ( this.mask & ( 1 << channel | 0 ) ) !== 0;

		}

	}

	let _object3DId = 0;

	const _v1$4 = /*@__PURE__*/ new Vector3();
	const _q1 = /*@__PURE__*/ new Quaternion();
	const _m1$1 = /*@__PURE__*/ new Matrix4();
	const _target = /*@__PURE__*/ new Vector3();

	const _position$3 = /*@__PURE__*/ new Vector3();
	const _scale$2 = /*@__PURE__*/ new Vector3();
	const _quaternion$2 = /*@__PURE__*/ new Quaternion();

	const _xAxis = /*@__PURE__*/ new Vector3( 1, 0, 0 );
	const _yAxis = /*@__PURE__*/ new Vector3( 0, 1, 0 );
	const _zAxis = /*@__PURE__*/ new Vector3( 0, 0, 1 );

	const _addedEvent = { type: 'added' };
	const _removedEvent = { type: 'removed' };

	class Object3D extends EventDispatcher {

		constructor() {

			super();

			this.isObject3D = true;

			Object.defineProperty( this, 'id', { value: _object3DId ++ } );

			this.uuid = generateUUID();

			this.name = '';
			this.type = 'Object3D';

			this.parent = null;
			this.children = [];

			this.up = Object3D.DEFAULT_UP.clone();

			const position = new Vector3();
			const rotation = new Euler();
			const quaternion = new Quaternion();
			const scale = new Vector3( 1, 1, 1 );

			function onRotationChange() {

				quaternion.setFromEuler( rotation, false );

			}

			function onQuaternionChange() {

				rotation.setFromQuaternion( quaternion, undefined, false );

			}

			rotation._onChange( onRotationChange );
			quaternion._onChange( onQuaternionChange );

			Object.defineProperties( this, {
				position: {
					configurable: true,
					enumerable: true,
					value: position
				},
				rotation: {
					configurable: true,
					enumerable: true,
					value: rotation
				},
				quaternion: {
					configurable: true,
					enumerable: true,
					value: quaternion
				},
				scale: {
					configurable: true,
					enumerable: true,
					value: scale
				},
				modelViewMatrix: {
					value: new Matrix4()
				},
				normalMatrix: {
					value: new Matrix3()
				}
			} );

			this.matrix = new Matrix4();
			this.matrixWorld = new Matrix4();

			this.matrixAutoUpdate = Object3D.DEFAULT_MATRIX_AUTO_UPDATE;
			this.matrixWorldNeedsUpdate = false;

			this.matrixWorldAutoUpdate = Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE; // checked by the renderer

			this.layers = new Layers();
			this.visible = true;

			this.castShadow = false;
			this.receiveShadow = false;

			this.frustumCulled = true;
			this.renderOrder = 0;

			this.animations = [];

			this.userData = {};

		}

		onBeforeRender( /* renderer, scene, camera, geometry, material, group */ ) {}

		onAfterRender( /* renderer, scene, camera, geometry, material, group */ ) {}

		applyMatrix4( matrix ) {

			if ( this.matrixAutoUpdate ) this.updateMatrix();

			this.matrix.premultiply( matrix );

			this.matrix.decompose( this.position, this.quaternion, this.scale );

		}

		applyQuaternion( q ) {

			this.quaternion.premultiply( q );

			return this;

		}

		setRotationFromAxisAngle( axis, angle ) {

			// assumes axis is normalized

			this.quaternion.setFromAxisAngle( axis, angle );

		}

		setRotationFromEuler( euler ) {

			this.quaternion.setFromEuler( euler, true );

		}

		setRotationFromMatrix( m ) {

			// assumes the upper 3x3 of m is a pure rotation matrix (i.e, unscaled)

			this.quaternion.setFromRotationMatrix( m );

		}

		setRotationFromQuaternion( q ) {

			// assumes q is normalized

			this.quaternion.copy( q );

		}

		rotateOnAxis( axis, angle ) {

			// rotate object on axis in object space
			// axis is assumed to be normalized

			_q1.setFromAxisAngle( axis, angle );

			this.quaternion.multiply( _q1 );

			return this;

		}

		rotateOnWorldAxis( axis, angle ) {

			// rotate object on axis in world space
			// axis is assumed to be normalized
			// method assumes no rotated parent

			_q1.setFromAxisAngle( axis, angle );

			this.quaternion.premultiply( _q1 );

			return this;

		}

		rotateX( angle ) {

			return this.rotateOnAxis( _xAxis, angle );

		}

		rotateY( angle ) {

			return this.rotateOnAxis( _yAxis, angle );

		}

		rotateZ( angle ) {

			return this.rotateOnAxis( _zAxis, angle );

		}

		translateOnAxis( axis, distance ) {

			// translate object by distance along axis in object space
			// axis is assumed to be normalized

			_v1$4.copy( axis ).applyQuaternion( this.quaternion );

			this.position.add( _v1$4.multiplyScalar( distance ) );

			return this;

		}

		translateX( distance ) {

			return this.translateOnAxis( _xAxis, distance );

		}

		translateY( distance ) {

			return this.translateOnAxis( _yAxis, distance );

		}

		translateZ( distance ) {

			return this.translateOnAxis( _zAxis, distance );

		}

		localToWorld( vector ) {

			this.updateWorldMatrix( true, false );

			return vector.applyMatrix4( this.matrixWorld );

		}

		worldToLocal( vector ) {

			this.updateWorldMatrix( true, false );

			return vector.applyMatrix4( _m1$1.copy( this.matrixWorld ).invert() );

		}

		lookAt( x, y, z ) {

			// This method does not support objects having non-uniformly-scaled parent(s)

			if ( x.isVector3 ) {

				_target.copy( x );

			} else {

				_target.set( x, y, z );

			}

			const parent = this.parent;

			this.updateWorldMatrix( true, false );

			_position$3.setFromMatrixPosition( this.matrixWorld );

			if ( this.isCamera || this.isLight ) {

				_m1$1.lookAt( _position$3, _target, this.up );

			} else {

				_m1$1.lookAt( _target, _position$3, this.up );

			}

			this.quaternion.setFromRotationMatrix( _m1$1 );

			if ( parent ) {

				_m1$1.extractRotation( parent.matrixWorld );
				_q1.setFromRotationMatrix( _m1$1 );
				this.quaternion.premultiply( _q1.invert() );

			}

		}

		add( object ) {

			if ( arguments.length > 1 ) {

				for ( let i = 0; i < arguments.length; i ++ ) {

					this.add( arguments[ i ] );

				}

				return this;

			}

			if ( object === this ) {

				console.error( 'THREE.Object3D.add: object can\'t be added as a child of itself.', object );
				return this;

			}

			if ( object && object.isObject3D ) {

				if ( object.parent !== null ) {

					object.parent.remove( object );

				}

				object.parent = this;
				this.children.push( object );

				object.dispatchEvent( _addedEvent );

			} else {

				console.error( 'THREE.Object3D.add: object not an instance of THREE.Object3D.', object );

			}

			return this;

		}

		remove( object ) {

			if ( arguments.length > 1 ) {

				for ( let i = 0; i < arguments.length; i ++ ) {

					this.remove( arguments[ i ] );

				}

				return this;

			}

			const index = this.children.indexOf( object );

			if ( index !== - 1 ) {

				object.parent = null;
				this.children.splice( index, 1 );

				object.dispatchEvent( _removedEvent );

			}

			return this;

		}

		removeFromParent() {

			const parent = this.parent;

			if ( parent !== null ) {

				parent.remove( this );

			}

			return this;

		}

		clear() {

			return this.remove( ... this.children );

		}

		attach( object ) {

			// adds object as a child of this, while maintaining the object's world transform

			// Note: This method does not support scene graphs having non-uniformly-scaled nodes(s)

			this.updateWorldMatrix( true, false );

			_m1$1.copy( this.matrixWorld ).invert();

			if ( object.parent !== null ) {

				object.parent.updateWorldMatrix( true, false );

				_m1$1.multiply( object.parent.matrixWorld );

			}

			object.applyMatrix4( _m1$1 );

			this.add( object );

			object.updateWorldMatrix( false, true );

			return this;

		}

		getObjectById( id ) {

			return this.getObjectByProperty( 'id', id );

		}

		getObjectByName( name ) {

			return this.getObjectByProperty( 'name', name );

		}

		getObjectByProperty( name, value ) {

			if ( this[ name ] === value ) return this;

			for ( let i = 0, l = this.children.length; i < l; i ++ ) {

				const child = this.children[ i ];
				const object = child.getObjectByProperty( name, value );

				if ( object !== undefined ) {

					return object;

				}

			}

			return undefined;

		}

		getObjectsByProperty( name, value ) {

			let result = [];

			if ( this[ name ] === value ) result.push( this );

			for ( let i = 0, l = this.children.length; i < l; i ++ ) {

				const childResult = this.children[ i ].getObjectsByProperty( name, value );

				if ( childResult.length > 0 ) {

					result = result.concat( childResult );

				}

			}

			return result;

		}

		getWorldPosition( target ) {

			this.updateWorldMatrix( true, false );

			return target.setFromMatrixPosition( this.matrixWorld );

		}

		getWorldQuaternion( target ) {

			this.updateWorldMatrix( true, false );

			this.matrixWorld.decompose( _position$3, target, _scale$2 );

			return target;

		}

		getWorldScale( target ) {

			this.updateWorldMatrix( true, false );

			this.matrixWorld.decompose( _position$3, _quaternion$2, target );

			return target;

		}

		getWorldDirection( target ) {

			this.updateWorldMatrix( true, false );

			const e = this.matrixWorld.elements;

			return target.set( e[ 8 ], e[ 9 ], e[ 10 ] ).normalize();

		}

		raycast( /* raycaster, intersects */ ) {}

		traverse( callback ) {

			callback( this );

			const children = this.children;

			for ( let i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].traverse( callback );

			}

		}

		traverseVisible( callback ) {

			if ( this.visible === false ) return;

			callback( this );

			const children = this.children;

			for ( let i = 0, l = children.length; i < l; i ++ ) {

				children[ i ].traverseVisible( callback );

			}

		}

		traverseAncestors( callback ) {

			const parent = this.parent;

			if ( parent !== null ) {

				callback( parent );

				parent.traverseAncestors( callback );

			}

		}

		updateMatrix() {

			this.matrix.compose( this.position, this.quaternion, this.scale );

			this.matrixWorldNeedsUpdate = true;

		}

		updateMatrixWorld( force ) {

			if ( this.matrixAutoUpdate ) this.updateMatrix();

			if ( this.matrixWorldNeedsUpdate || force ) {

				if ( this.parent === null ) {

					this.matrixWorld.copy( this.matrix );

				} else {

					this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

				}

				this.matrixWorldNeedsUpdate = false;

				force = true;

			}

			// update children

			const children = this.children;

			for ( let i = 0, l = children.length; i < l; i ++ ) {

				const child = children[ i ];

				if ( child.matrixWorldAutoUpdate === true || force === true ) {

					child.updateMatrixWorld( force );

				}

			}

		}

		updateWorldMatrix( updateParents, updateChildren ) {

			const parent = this.parent;

			if ( updateParents === true && parent !== null && parent.matrixWorldAutoUpdate === true ) {

				parent.updateWorldMatrix( true, false );

			}

			if ( this.matrixAutoUpdate ) this.updateMatrix();

			if ( this.parent === null ) {

				this.matrixWorld.copy( this.matrix );

			} else {

				this.matrixWorld.multiplyMatrices( this.parent.matrixWorld, this.matrix );

			}

			// update children

			if ( updateChildren === true ) {

				const children = this.children;

				for ( let i = 0, l = children.length; i < l; i ++ ) {

					const child = children[ i ];

					if ( child.matrixWorldAutoUpdate === true ) {

						child.updateWorldMatrix( false, true );

					}

				}

			}

		}

		toJSON( meta ) {

			// meta is a string when called from JSON.stringify
			const isRootObject = ( meta === undefined || typeof meta === 'string' );

			const output = {};

			// meta is a hash used to collect geometries, materials.
			// not providing it implies that this is the root object
			// being serialized.
			if ( isRootObject ) {

				// initialize meta obj
				meta = {
					geometries: {},
					materials: {},
					textures: {},
					images: {},
					shapes: {},
					skeletons: {},
					animations: {},
					nodes: {}
				};

				output.metadata = {
					version: 4.6,
					type: 'Object',
					generator: 'Object3D.toJSON'
				};

			}

			// standard Object3D serialization

			const object = {};

			object.uuid = this.uuid;
			object.type = this.type;

			if ( this.name !== '' ) object.name = this.name;
			if ( this.castShadow === true ) object.castShadow = true;
			if ( this.receiveShadow === true ) object.receiveShadow = true;
			if ( this.visible === false ) object.visible = false;
			if ( this.frustumCulled === false ) object.frustumCulled = false;
			if ( this.renderOrder !== 0 ) object.renderOrder = this.renderOrder;
			if ( Object.keys( this.userData ).length > 0 ) object.userData = this.userData;

			object.layers = this.layers.mask;
			object.matrix = this.matrix.toArray();
			object.up = this.up.toArray();

			if ( this.matrixAutoUpdate === false ) object.matrixAutoUpdate = false;

			// object specific properties

			if ( this.isInstancedMesh ) {

				object.type = 'InstancedMesh';
				object.count = this.count;
				object.instanceMatrix = this.instanceMatrix.toJSON();
				if ( this.instanceColor !== null ) object.instanceColor = this.instanceColor.toJSON();

			}

			//

			function serialize( library, element ) {

				if ( library[ element.uuid ] === undefined ) {

					library[ element.uuid ] = element.toJSON( meta );

				}

				return element.uuid;

			}

			if ( this.isScene ) {

				if ( this.background ) {

					if ( this.background.isColor ) {

						object.background = this.background.toJSON();

					} else if ( this.background.isTexture ) {

						object.background = this.background.toJSON( meta ).uuid;

					}

				}

				if ( this.environment && this.environment.isTexture && this.environment.isRenderTargetTexture !== true ) {

					object.environment = this.environment.toJSON( meta ).uuid;

				}

			} else if ( this.isMesh || this.isLine || this.isPoints ) {

				object.geometry = serialize( meta.geometries, this.geometry );

				const parameters = this.geometry.parameters;

				if ( parameters !== undefined && parameters.shapes !== undefined ) {

					const shapes = parameters.shapes;

					if ( Array.isArray( shapes ) ) {

						for ( let i = 0, l = shapes.length; i < l; i ++ ) {

							const shape = shapes[ i ];

							serialize( meta.shapes, shape );

						}

					} else {

						serialize( meta.shapes, shapes );

					}

				}

			}

			if ( this.isSkinnedMesh ) {

				object.bindMode = this.bindMode;
				object.bindMatrix = this.bindMatrix.toArray();

				if ( this.skeleton !== undefined ) {

					serialize( meta.skeletons, this.skeleton );

					object.skeleton = this.skeleton.uuid;

				}

			}

			if ( this.material !== undefined ) {

				if ( Array.isArray( this.material ) ) {

					const uuids = [];

					for ( let i = 0, l = this.material.length; i < l; i ++ ) {

						uuids.push( serialize( meta.materials, this.material[ i ] ) );

					}

					object.material = uuids;

				} else {

					object.material = serialize( meta.materials, this.material );

				}

			}

			//

			if ( this.children.length > 0 ) {

				object.children = [];

				for ( let i = 0; i < this.children.length; i ++ ) {

					object.children.push( this.children[ i ].toJSON( meta ).object );

				}

			}

			//

			if ( this.animations.length > 0 ) {

				object.animations = [];

				for ( let i = 0; i < this.animations.length; i ++ ) {

					const animation = this.animations[ i ];

					object.animations.push( serialize( meta.animations, animation ) );

				}

			}

			if ( isRootObject ) {

				const geometries = extractFromCache( meta.geometries );
				const materials = extractFromCache( meta.materials );
				const textures = extractFromCache( meta.textures );
				const images = extractFromCache( meta.images );
				const shapes = extractFromCache( meta.shapes );
				const skeletons = extractFromCache( meta.skeletons );
				const animations = extractFromCache( meta.animations );
				const nodes = extractFromCache( meta.nodes );

				if ( geometries.length > 0 ) output.geometries = geometries;
				if ( materials.length > 0 ) output.materials = materials;
				if ( textures.length > 0 ) output.textures = textures;
				if ( images.length > 0 ) output.images = images;
				if ( shapes.length > 0 ) output.shapes = shapes;
				if ( skeletons.length > 0 ) output.skeletons = skeletons;
				if ( animations.length > 0 ) output.animations = animations;
				if ( nodes.length > 0 ) output.nodes = nodes;

			}

			output.object = object;

			return output;

			// extract data from the cache hash
			// remove metadata on each item
			// and return as array
			function extractFromCache( cache ) {

				const values = [];
				for ( const key in cache ) {

					const data = cache[ key ];
					delete data.metadata;
					values.push( data );

				}

				return values;

			}

		}

		clone( recursive ) {

			return new this.constructor().copy( this, recursive );

		}

		copy( source, recursive = true ) {

			this.name = source.name;

			this.up.copy( source.up );

			this.position.copy( source.position );
			this.rotation.order = source.rotation.order;
			this.quaternion.copy( source.quaternion );
			this.scale.copy( source.scale );

			this.matrix.copy( source.matrix );
			this.matrixWorld.copy( source.matrixWorld );

			this.matrixAutoUpdate = source.matrixAutoUpdate;
			this.matrixWorldNeedsUpdate = source.matrixWorldNeedsUpdate;

			this.matrixWorldAutoUpdate = source.matrixWorldAutoUpdate;

			this.layers.mask = source.layers.mask;
			this.visible = source.visible;

			this.castShadow = source.castShadow;
			this.receiveShadow = source.receiveShadow;

			this.frustumCulled = source.frustumCulled;
			this.renderOrder = source.renderOrder;

			this.animations = source.animations.slice();

			this.userData = JSON.parse( JSON.stringify( source.userData ) );

			if ( recursive === true ) {

				for ( let i = 0; i < source.children.length; i ++ ) {

					const child = source.children[ i ];
					this.add( child.clone() );

				}

			}

			return this;

		}

	}

	Object3D.DEFAULT_UP = /*@__PURE__*/ new Vector3( 0, 1, 0 );
	Object3D.DEFAULT_MATRIX_AUTO_UPDATE = true;
	Object3D.DEFAULT_MATRIX_WORLD_AUTO_UPDATE = true;

	const _v0$1 = /*@__PURE__*/ new Vector3();
	const _v1$3 = /*@__PURE__*/ new Vector3();
	const _v2$2 = /*@__PURE__*/ new Vector3();
	const _v3$1 = /*@__PURE__*/ new Vector3();

	const _vab = /*@__PURE__*/ new Vector3();
	const _vac = /*@__PURE__*/ new Vector3();
	const _vbc = /*@__PURE__*/ new Vector3();
	const _vap = /*@__PURE__*/ new Vector3();
	const _vbp = /*@__PURE__*/ new Vector3();
	const _vcp = /*@__PURE__*/ new Vector3();

	let warnedGetUV = false;

	class Triangle {

		constructor( a = new Vector3(), b = new Vector3(), c = new Vector3() ) {

			this.a = a;
			this.b = b;
			this.c = c;

		}

		static getNormal( a, b, c, target ) {

			target.subVectors( c, b );
			_v0$1.subVectors( a, b );
			target.cross( _v0$1 );

			const targetLengthSq = target.lengthSq();
			if ( targetLengthSq > 0 ) {

				return target.multiplyScalar( 1 / Math.sqrt( targetLengthSq ) );

			}

			return target.set( 0, 0, 0 );

		}

		// static/instance method to calculate barycentric coordinates
		// based on: http://www.blackpawn.com/texts/pointinpoly/default.html
		static getBarycoord( point, a, b, c, target ) {

			_v0$1.subVectors( c, a );
			_v1$3.subVectors( b, a );
			_v2$2.subVectors( point, a );

			const dot00 = _v0$1.dot( _v0$1 );
			const dot01 = _v0$1.dot( _v1$3 );
			const dot02 = _v0$1.dot( _v2$2 );
			const dot11 = _v1$3.dot( _v1$3 );
			const dot12 = _v1$3.dot( _v2$2 );

			const denom = ( dot00 * dot11 - dot01 * dot01 );

			// collinear or singular triangle
			if ( denom === 0 ) {

				// arbitrary location outside of triangle?
				// not sure if this is the best idea, maybe should be returning undefined
				return target.set( - 2, - 1, - 1 );

			}

			const invDenom = 1 / denom;
			const u = ( dot11 * dot02 - dot01 * dot12 ) * invDenom;
			const v = ( dot00 * dot12 - dot01 * dot02 ) * invDenom;

			// barycentric coordinates must always sum to 1
			return target.set( 1 - u - v, v, u );

		}

		static containsPoint( point, a, b, c ) {

			this.getBarycoord( point, a, b, c, _v3$1 );

			return ( _v3$1.x >= 0 ) && ( _v3$1.y >= 0 ) && ( ( _v3$1.x + _v3$1.y ) <= 1 );

		}

		static getUV( point, p1, p2, p3, uv1, uv2, uv3, target ) { // @deprecated, r151

			if ( warnedGetUV === false ) {

				console.warn( 'THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation().' );

				warnedGetUV = true;

			}

			return this.getInterpolation( point, p1, p2, p3, uv1, uv2, uv3, target );

		}

		static getInterpolation( point, p1, p2, p3, v1, v2, v3, target ) {

			this.getBarycoord( point, p1, p2, p3, _v3$1 );

			target.setScalar( 0 );
			target.addScaledVector( v1, _v3$1.x );
			target.addScaledVector( v2, _v3$1.y );
			target.addScaledVector( v3, _v3$1.z );

			return target;

		}

		static isFrontFacing( a, b, c, direction ) {

			_v0$1.subVectors( c, b );
			_v1$3.subVectors( a, b );

			// strictly front facing
			return ( _v0$1.cross( _v1$3 ).dot( direction ) < 0 ) ? true : false;

		}

		set( a, b, c ) {

			this.a.copy( a );
			this.b.copy( b );
			this.c.copy( c );

			return this;

		}

		setFromPointsAndIndices( points, i0, i1, i2 ) {

			this.a.copy( points[ i0 ] );
			this.b.copy( points[ i1 ] );
			this.c.copy( points[ i2 ] );

			return this;

		}

		setFromAttributeAndIndices( attribute, i0, i1, i2 ) {

			this.a.fromBufferAttribute( attribute, i0 );
			this.b.fromBufferAttribute( attribute, i1 );
			this.c.fromBufferAttribute( attribute, i2 );

			return this;

		}

		clone() {

			return new this.constructor().copy( this );

		}

		copy( triangle ) {

			this.a.copy( triangle.a );
			this.b.copy( triangle.b );
			this.c.copy( triangle.c );

			return this;

		}

		getArea() {

			_v0$1.subVectors( this.c, this.b );
			_v1$3.subVectors( this.a, this.b );

			return _v0$1.cross( _v1$3 ).length() * 0.5;

		}

		getMidpoint( target ) {

			return target.addVectors( this.a, this.b ).add( this.c ).multiplyScalar( 1 / 3 );

		}

		getNormal( target ) {

			return Triangle.getNormal( this.a, this.b, this.c, target );

		}

		getPlane( target ) {

			return target.setFromCoplanarPoints( this.a, this.b, this.c );

		}

		getBarycoord( point, target ) {

			return Triangle.getBarycoord( point, this.a, this.b, this.c, target );

		}

		getUV( point, uv1, uv2, uv3, target ) { // @deprecated, r151

			if ( warnedGetUV === false ) {

				console.warn( 'THREE.Triangle.getUV() has been renamed to THREE.Triangle.getInterpolation().' );

				warnedGetUV = true;

			}

			return Triangle.getInterpolation( point, this.a, this.b, this.c, uv1, uv2, uv3, target );

		}

		getInterpolation( point, v1, v2, v3, target ) {

			return Triangle.getInterpolation( point, this.a, this.b, this.c, v1, v2, v3, target );

		}

		containsPoint( point ) {

			return Triangle.containsPoint( point, this.a, this.b, this.c );

		}

		isFrontFacing( direction ) {

			return Triangle.isFrontFacing( this.a, this.b, this.c, direction );

		}

		intersectsBox( box ) {

			return box.intersectsTriangle( this );

		}

		closestPointToPoint( p, target ) {

			const a = this.a, b = this.b, c = this.c;
			let v, w;

			// algorithm thanks to Real-Time Collision Detection by Christer Ericson,
			// published by Morgan Kaufmann Publishers, (c) 2005 Elsevier Inc.,
			// under the accompanying license; see chapter 5.1.5 for detailed explanation.
			// basically, we're distinguishing which of the voronoi regions of the triangle
			// the point lies in with the minimum amount of redundant computation.

			_vab.subVectors( b, a );
			_vac.subVectors( c, a );
			_vap.subVectors( p, a );
			const d1 = _vab.dot( _vap );
			const d2 = _vac.dot( _vap );
			if ( d1 <= 0 && d2 <= 0 ) {

				// vertex region of A; barycentric coords (1, 0, 0)
				return target.copy( a );

			}

			_vbp.subVectors( p, b );
			const d3 = _vab.dot( _vbp );
			const d4 = _vac.dot( _vbp );
			if ( d3 >= 0 && d4 <= d3 ) {

				// vertex region of B; barycentric coords (0, 1, 0)
				return target.copy( b );

			}

			const vc = d1 * d4 - d3 * d2;
			if ( vc <= 0 && d1 >= 0 && d3 <= 0 ) {

				v = d1 / ( d1 - d3 );
				// edge region of AB; barycentric coords (1-v, v, 0)
				return target.copy( a ).addScaledVector( _vab, v );

			}

			_vcp.subVectors( p, c );
			const d5 = _vab.dot( _vcp );
			const d6 = _vac.dot( _vcp );
			if ( d6 >= 0 && d5 <= d6 ) {

				// vertex region of C; barycentric coords (0, 0, 1)
				return target.copy( c );

			}

			const vb = d5 * d2 - d1 * d6;
			if ( vb <= 0 && d2 >= 0 && d6 <= 0 ) {

				w = d2 / ( d2 - d6 );
				// edge region of AC; barycentric coords (1-w, 0, w)
				return target.copy( a ).addScaledVector( _vac, w );

			}

			const va = d3 * d6 - d5 * d4;
			if ( va <= 0 && ( d4 - d3 ) >= 0 && ( d5 - d6 ) >= 0 ) {

				_vbc.subVectors( c, b );
				w = ( d4 - d3 ) / ( ( d4 - d3 ) + ( d5 - d6 ) );
				// edge region of BC; barycentric coords (0, 1-w, w)
				return target.copy( b ).addScaledVector( _vbc, w ); // edge region of BC

			}

			// face region
			const denom = 1 / ( va + vb + vc );
			// u = va * denom
			v = vb * denom;
			w = vc * denom;

			return target.copy( a ).addScaledVector( _vab, v ).addScaledVector( _vac, w );

		}

		equals( triangle ) {

			return triangle.a.equals( this.a ) && triangle.b.equals( this.b ) && triangle.c.equals( this.c );

		}

	}

	let _materialId = 0;

	class Material extends EventDispatcher {

		constructor() {

			super();

			this.isMaterial = true;

			Object.defineProperty( this, 'id', { value: _materialId ++ } );

			this.uuid = generateUUID();

			this.name = '';
			this.type = 'Material';

			this.blending = NormalBlending;
			this.side = FrontSide;
			this.vertexColors = false;

			this.opacity = 1;
			this.transparent = false;
			this.alphaHash = false;

			this.blendSrc = SrcAlphaFactor;
			this.blendDst = OneMinusSrcAlphaFactor;
			this.blendEquation = AddEquation;
			this.blendSrcAlpha = null;
			this.blendDstAlpha = null;
			this.blendEquationAlpha = null;

			this.depthFunc = LessEqualDepth;
			this.depthTest = true;
			this.depthWrite = true;

			this.stencilWriteMask = 0xff;
			this.stencilFunc = AlwaysStencilFunc;
			this.stencilRef = 0;
			this.stencilFuncMask = 0xff;
			this.stencilFail = KeepStencilOp;
			this.stencilZFail = KeepStencilOp;
			this.stencilZPass = KeepStencilOp;
			this.stencilWrite = false;

			this.clippingPlanes = null;
			this.clipIntersection = false;
			this.clipShadows = false;

			this.shadowSide = null;

			this.colorWrite = true;

			this.precision = null; // override the renderer's default precision for this material

			this.polygonOffset = false;
			this.polygonOffsetFactor = 0;
			this.polygonOffsetUnits = 0;

			this.dithering = false;

			this.alphaToCoverage = false;
			this.premultipliedAlpha = false;
			this.forceSinglePass = false;

			this.visible = true;

			this.toneMapped = true;

			this.userData = {};

			this.version = 0;

			this._alphaTest = 0;

		}

		get alphaTest() {

			return this._alphaTest;

		}

		set alphaTest( value ) {

			if ( this._alphaTest > 0 !== value > 0 ) {

				this.version ++;

			}

			this._alphaTest = value;

		}

		onBuild( /* shaderobject, renderer */ ) {}

		onBeforeRender( /* renderer, scene, camera, geometry, object, group */ ) {}

		onBeforeCompile( /* shaderobject, renderer */ ) {}

		customProgramCacheKey() {

			return this.onBeforeCompile.toString();

		}

		setValues( values ) {

			if ( values === undefined ) return;

			for ( const key in values ) {

				const newValue = values[ key ];

				if ( newValue === undefined ) {

					console.warn( `THREE.Material: parameter '${ key }' has value of undefined.` );
					continue;

				}

				const currentValue = this[ key ];

				if ( currentValue === undefined ) {

					console.warn( `THREE.Material: '${ key }' is not a property of THREE.${ this.type }.` );
					continue;

				}

				if ( currentValue && currentValue.isColor ) {

					currentValue.set( newValue );

				} else if ( ( currentValue && currentValue.isVector3 ) && ( newValue && newValue.isVector3 ) ) {

					currentValue.copy( newValue );

				} else {

					this[ key ] = newValue;

				}

			}

		}

		toJSON( meta ) {

			const isRootObject = ( meta === undefined || typeof meta === 'string' );

			if ( isRootObject ) {

				meta = {
					textures: {},
					images: {}
				};

			}

			const data = {
				metadata: {
					version: 4.6,
					type: 'Material',
					generator: 'Material.toJSON'
				}
			};

			// standard Material serialization
			data.uuid = this.uuid;
			data.type = this.type;

			if ( this.name !== '' ) data.name = this.name;

			if ( this.color && this.color.isColor ) data.color = this.color.getHex();

			if ( this.roughness !== undefined ) data.roughness = this.roughness;
			if ( this.metalness !== undefined ) data.metalness = this.metalness;

			if ( this.sheen !== undefined ) data.sheen = this.sheen;
			if ( this.sheenColor && this.sheenColor.isColor ) data.sheenColor = this.sheenColor.getHex();
			if ( this.sheenRoughness !== undefined ) data.sheenRoughness = this.sheenRoughness;
			if ( this.emissive && this.emissive.isColor ) data.emissive = this.emissive.getHex();
			if ( this.emissiveIntensity && this.emissiveIntensity !== 1 ) data.emissiveIntensity = this.emissiveIntensity;

			if ( this.specular && this.specular.isColor ) data.specular = this.specular.getHex();
			if ( this.specularIntensity !== undefined ) data.specularIntensity = this.specularIntensity;
			if ( this.specularColor && this.specularColor.isColor ) data.specularColor = this.specularColor.getHex();
			if ( this.shininess !== undefined ) data.shininess = this.shininess;
			if ( this.clearcoat !== undefined ) data.clearcoat = this.clearcoat;
			if ( this.clearcoatRoughness !== undefined ) data.clearcoatRoughness = this.clearcoatRoughness;

			if ( this.clearcoatMap && this.clearcoatMap.isTexture ) {

				data.clearcoatMap = this.clearcoatMap.toJSON( meta ).uuid;

			}

			if ( this.clearcoatRoughnessMap && this.clearcoatRoughnessMap.isTexture ) {

				data.clearcoatRoughnessMap = this.clearcoatRoughnessMap.toJSON( meta ).uuid;

			}

			if ( this.clearcoatNormalMap && this.clearcoatNormalMap.isTexture ) {

				data.clearcoatNormalMap = this.clearcoatNormalMap.toJSON( meta ).uuid;
				data.clearcoatNormalScale = this.clearcoatNormalScale.toArray();

			}

			if ( this.iridescence !== undefined ) data.iridescence = this.iridescence;
			if ( this.iridescenceIOR !== undefined ) data.iridescenceIOR = this.iridescenceIOR;
			if ( this.iridescenceThicknessRange !== undefined ) data.iridescenceThicknessRange = this.iridescenceThicknessRange;

			if ( this.iridescenceMap && this.iridescenceMap.isTexture ) {

				data.iridescenceMap = this.iridescenceMap.toJSON( meta ).uuid;

			}

			if ( this.iridescenceThicknessMap && this.iridescenceThicknessMap.isTexture ) {

				data.iridescenceThicknessMap = this.iridescenceThicknessMap.toJSON( meta ).uuid;

			}

			if ( this.anisotropy !== undefined ) data.anisotropy = this.anisotropy;
			if ( this.anisotropyRotation !== undefined ) data.anisotropyRotation = this.anisotropyRotation;

			if ( this.anisotropyMap && this.anisotropyMap.isTexture ) {

				data.anisotropyMap = this.anisotropyMap.toJSON( meta ).uuid;

			}

			if ( this.map && this.map.isTexture ) data.map = this.map.toJSON( meta ).uuid;
			if ( this.matcap && this.matcap.isTexture ) data.matcap = this.matcap.toJSON( meta ).uuid;
			if ( this.alphaMap && this.alphaMap.isTexture ) data.alphaMap = this.alphaMap.toJSON( meta ).uuid;

			if ( this.lightMap && this.lightMap.isTexture ) {

				data.lightMap = this.lightMap.toJSON( meta ).uuid;
				data.lightMapIntensity = this.lightMapIntensity;

			}

			if ( this.aoMap && this.aoMap.isTexture ) {

				data.aoMap = this.aoMap.toJSON( meta ).uuid;
				data.aoMapIntensity = this.aoMapIntensity;

			}

			if ( this.bumpMap && this.bumpMap.isTexture ) {

				data.bumpMap = this.bumpMap.toJSON( meta ).uuid;
				data.bumpScale = this.bumpScale;

			}

			if ( this.normalMap && this.normalMap.isTexture ) {

				data.normalMap = this.normalMap.toJSON( meta ).uuid;
				data.normalMapType = this.normalMapType;
				data.normalScale = this.normalScale.toArray();

			}

			if ( this.displacementMap && this.displacementMap.isTexture ) {

				data.displacementMap = this.displacementMap.toJSON( meta ).uuid;
				data.displacementScale = this.displacementScale;
				data.displacementBias = this.displacementBias;

			}

			if ( this.roughnessMap && this.roughnessMap.isTexture ) data.roughnessMap = this.roughnessMap.toJSON( meta ).uuid;
			if ( this.metalnessMap && this.metalnessMap.isTexture ) data.metalnessMap = this.metalnessMap.toJSON( meta ).uuid;

			if ( this.emissiveMap && this.emissiveMap.isTexture ) data.emissiveMap = this.emissiveMap.toJSON( meta ).uuid;
			if ( this.specularMap && this.specularMap.isTexture ) data.specularMap = this.specularMap.toJSON( meta ).uuid;
			if ( this.specularIntensityMap && this.specularIntensityMap.isTexture ) data.specularIntensityMap = this.specularIntensityMap.toJSON( meta ).uuid;
			if ( this.specularColorMap && this.specularColorMap.isTexture ) data.specularColorMap = this.specularColorMap.toJSON( meta ).uuid;

			if ( this.envMap && this.envMap.isTexture ) {

				data.envMap = this.envMap.toJSON( meta ).uuid;

				if ( this.combine !== undefined ) data.combine = this.combine;

			}

			if ( this.envMapIntensity !== undefined ) data.envMapIntensity = this.envMapIntensity;
			if ( this.reflectivity !== undefined ) data.reflectivity = this.reflectivity;
			if ( this.refractionRatio !== undefined ) data.refractionRatio = this.refractionRatio;

			if ( this.gradientMap && this.gradientMap.isTexture ) {

				data.gradientMap = this.gradientMap.toJSON( meta ).uuid;

			}

			if ( this.transmission !== undefined ) data.transmission = this.transmission;
			if ( this.transmissionMap && this.transmissionMap.isTexture ) data.transmissionMap = this.transmissionMap.toJSON( meta ).uuid;
			if ( this.thickness !== undefined ) data.thickness = this.thickness;
			if ( this.thicknessMap && this.thicknessMap.isTexture ) data.thicknessMap = this.thicknessMap.toJSON( meta ).uuid;
			if ( this.attenuationDistance !== undefined && this.attenuationDistance !== Infinity ) data.attenuationDistance = this.attenuationDistance;
			if ( this.attenuationColor !== undefined ) data.attenuationColor = this.attenuationColor.getHex();

			if ( this.size !== undefined ) data.size = this.size;
			if ( this.shadowSide !== null ) data.shadowSide = this.shadowSide;
			if ( this.sizeAttenuation !== undefined ) data.sizeAttenuation = this.sizeAttenuation;

			if ( this.blending !== NormalBlending ) data.blending = this.blending;
			if ( this.side !== FrontSide ) data.side = this.side;
			if ( this.vertexColors ) data.vertexColors = true;

			if ( this.opacity < 1 ) data.opacity = this.opacity;
			if ( this.transparent === true ) data.transparent = this.transparent;

			data.depthFunc = this.depthFunc;
			data.depthTest = this.depthTest;
			data.depthWrite = this.depthWrite;
			data.colorWrite = this.colorWrite;

			data.stencilWrite = this.stencilWrite;
			data.stencilWriteMask = this.stencilWriteMask;
			data.stencilFunc = this.stencilFunc;
			data.stencilRef = this.stencilRef;
			data.stencilFuncMask = this.stencilFuncMask;
			data.stencilFail = this.stencilFail;
			data.stencilZFail = this.stencilZFail;
			data.stencilZPass = this.stencilZPass;

			// rotation (SpriteMaterial)
			if ( this.rotation !== undefined && this.rotation !== 0 ) data.rotation = this.rotation;

			if ( this.polygonOffset === true ) data.polygonOffset = true;
			if ( this.polygonOffsetFactor !== 0 ) data.polygonOffsetFactor = this.polygonOffsetFactor;
			if ( this.polygonOffsetUnits !== 0 ) data.polygonOffsetUnits = this.polygonOffsetUnits;

			if ( this.linewidth !== undefined && this.linewidth !== 1 ) data.linewidth = this.linewidth;
			if ( this.dashSize !== undefined ) data.dashSize = this.dashSize;
			if ( this.gapSize !== undefined ) data.gapSize = this.gapSize;
			if ( this.scale !== undefined ) data.scale = this.scale;

			if ( this.dithering === true ) data.dithering = true;

			if ( this.alphaTest > 0 ) data.alphaTest = this.alphaTest;
			if ( this.alphaHash === true ) data.alphaHash = this.alphaHash;
			if ( this.alphaToCoverage === true ) data.alphaToCoverage = this.alphaToCoverage;
			if ( this.premultipliedAlpha === true ) data.premultipliedAlpha = this.premultipliedAlpha;
			if ( this.forceSinglePass === true ) data.forceSinglePass = this.forceSinglePass;

			if ( this.wireframe === true ) data.wireframe = this.wireframe;
			if ( this.wireframeLinewidth > 1 ) data.wireframeLinewidth = this.wireframeLinewidth;
			if ( this.wireframeLinecap !== 'round' ) data.wireframeLinecap = this.wireframeLinecap;
			if ( this.wireframeLinejoin !== 'round' ) data.wireframeLinejoin = this.wireframeLinejoin;

			if ( this.flatShading === true ) data.flatShading = this.flatShading;

			if ( this.visible === false ) data.visible = false;

			if ( this.toneMapped === false ) data.toneMapped = false;

			if ( this.fog === false ) data.fog = false;

			if ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;

			// TODO: Copied from Object3D.toJSON

			function extractFromCache( cache ) {

				const values = [];

				for ( const key in cache ) {

					const data = cache[ key ];
					delete data.metadata;
					values.push( data );

				}

				return values;

			}

			if ( isRootObject ) {

				const textures = extractFromCache( meta.textures );
				const images = extractFromCache( meta.images );

				if ( textures.length > 0 ) data.textures = textures;
				if ( images.length > 0 ) data.images = images;

			}

			return data;

		}

		clone() {

			return new this.constructor().copy( this );

		}

		copy( source ) {

			this.name = source.name;

			this.blending = source.blending;
			this.side = source.side;
			this.vertexColors = source.vertexColors;

			this.opacity = source.opacity;
			this.transparent = source.transparent;

			this.blendSrc = source.blendSrc;
			this.blendDst = source.blendDst;
			this.blendEquation = source.blendEquation;
			this.blendSrcAlpha = source.blendSrcAlpha;
			this.blendDstAlpha = source.blendDstAlpha;
			this.blendEquationAlpha = source.blendEquationAlpha;

			this.depthFunc = source.depthFunc;
			this.depthTest = source.depthTest;
			this.depthWrite = source.depthWrite;

			this.stencilWriteMask = source.stencilWriteMask;
			this.stencilFunc = source.stencilFunc;
			this.stencilRef = source.stencilRef;
			this.stencilFuncMask = source.stencilFuncMask;
			this.stencilFail = source.stencilFail;
			this.stencilZFail = source.stencilZFail;
			this.stencilZPass = source.stencilZPass;
			this.stencilWrite = source.stencilWrite;

			const srcPlanes = source.clippingPlanes;
			let dstPlanes = null;

			if ( srcPlanes !== null ) {

				const n = srcPlanes.length;
				dstPlanes = new Array( n );

				for ( let i = 0; i !== n; ++ i ) {

					dstPlanes[ i ] = srcPlanes[ i ].clone();

				}

			}

			this.clippingPlanes = dstPlanes;
			this.clipIntersection = source.clipIntersection;
			this.clipShadows = source.clipShadows;

			this.shadowSide = source.shadowSide;

			this.colorWrite = source.colorWrite;

			this.precision = source.precision;

			this.polygonOffset = source.polygonOffset;
			this.polygonOffsetFactor = source.polygonOffsetFactor;
			this.polygonOffsetUnits = source.polygonOffsetUnits;

			this.dithering = source.dithering;

			this.alphaTest = source.alphaTest;
			this.alphaHash = source.alphaHash;
			this.alphaToCoverage = source.alphaToCoverage;
			this.premultipliedAlpha = source.premultipliedAlpha;
			this.forceSinglePass = source.forceSinglePass;

			this.visible = source.visible;

			this.toneMapped = source.toneMapped;

			this.userData = JSON.parse( JSON.stringify( source.userData ) );

			return this;

		}

		dispose() {

			this.dispatchEvent( { type: 'dispose' } );

		}

		set needsUpdate( value ) {

			if ( value === true ) this.version ++;

		}

	}

	const _colorKeywords = { 'aliceblue': 0xF0F8FF, 'antiquewhite': 0xFAEBD7, 'aqua': 0x00FFFF, 'aquamarine': 0x7FFFD4, 'azure': 0xF0FFFF,
		'beige': 0xF5F5DC, 'bisque': 0xFFE4C4, 'black': 0x000000, 'blanchedalmond': 0xFFEBCD, 'blue': 0x0000FF, 'blueviolet': 0x8A2BE2,
		'brown': 0xA52A2A, 'burlywood': 0xDEB887, 'cadetblue': 0x5F9EA0, 'chartreuse': 0x7FFF00, 'chocolate': 0xD2691E, 'coral': 0xFF7F50,
		'cornflowerblue': 0x6495ED, 'cornsilk': 0xFFF8DC, 'crimson': 0xDC143C, 'cyan': 0x00FFFF, 'darkblue': 0x00008B, 'darkcyan': 0x008B8B,
		'darkgoldenrod': 0xB8860B, 'darkgray': 0xA9A9A9, 'darkgreen': 0x006400, 'darkgrey': 0xA9A9A9, 'darkkhaki': 0xBDB76B, 'darkmagenta': 0x8B008B,
		'darkolivegreen': 0x556B2F, 'darkorange': 0xFF8C00, 'darkorchid': 0x9932CC, 'darkred': 0x8B0000, 'darksalmon': 0xE9967A, 'darkseagreen': 0x8FBC8F,
		'darkslateblue': 0x483D8B, 'darkslategray': 0x2F4F4F, 'darkslategrey': 0x2F4F4F, 'darkturquoise': 0x00CED1, 'darkviolet': 0x9400D3,
		'deeppink': 0xFF1493, 'deepskyblue': 0x00BFFF, 'dimgray': 0x696969, 'dimgrey': 0x696969, 'dodgerblue': 0x1E90FF, 'firebrick': 0xB22222,
		'floralwhite': 0xFFFAF0, 'forestgreen': 0x228B22, 'fuchsia': 0xFF00FF, 'gainsboro': 0xDCDCDC, 'ghostwhite': 0xF8F8FF, 'gold': 0xFFD700,
		'goldenrod': 0xDAA520, 'gray': 0x808080, 'green': 0x008000, 'greenyellow': 0xADFF2F, 'grey': 0x808080, 'honeydew': 0xF0FFF0, 'hotpink': 0xFF69B4,
		'indianred': 0xCD5C5C, 'indigo': 0x4B0082, 'ivory': 0xFFFFF0, 'khaki': 0xF0E68C, 'lavender': 0xE6E6FA, 'lavenderblush': 0xFFF0F5, 'lawngreen': 0x7CFC00,
		'lemonchiffon': 0xFFFACD, 'lightblue': 0xADD8E6, 'lightcoral': 0xF08080, 'lightcyan': 0xE0FFFF, 'lightgoldenrodyellow': 0xFAFAD2, 'lightgray': 0xD3D3D3,
		'lightgreen': 0x90EE90, 'lightgrey': 0xD3D3D3, 'lightpink': 0xFFB6C1, 'lightsalmon': 0xFFA07A, 'lightseagreen': 0x20B2AA, 'lightskyblue': 0x87CEFA,
		'lightslategray': 0x778899, 'lightslategrey': 0x778899, 'lightsteelblue': 0xB0C4DE, 'lightyellow': 0xFFFFE0, 'lime': 0x00FF00, 'limegreen': 0x32CD32,
		'linen': 0xFAF0E6, 'magenta': 0xFF00FF, 'maroon': 0x800000, 'mediumaquamarine': 0x66CDAA, 'mediumblue': 0x0000CD, 'mediumorchid': 0xBA55D3,
		'mediumpurple': 0x9370DB, 'mediumseagreen': 0x3CB371, 'mediumslateblue': 0x7B68EE, 'mediumspringgreen': 0x00FA9A, 'mediumturquoise': 0x48D1CC,
		'mediumvioletred': 0xC71585, 'midnightblue': 0x191970, 'mintcream': 0xF5FFFA, 'mistyrose': 0xFFE4E1, 'moccasin': 0xFFE4B5, 'navajowhite': 0xFFDEAD,
		'navy': 0x000080, 'oldlace': 0xFDF5E6, 'olive': 0x808000, 'olivedrab': 0x6B8E23, 'orange': 0xFFA500, 'orangered': 0xFF4500, 'orchid': 0xDA70D6,
		'palegoldenrod': 0xEEE8AA, 'palegreen': 0x98FB98, 'paleturquoise': 0xAFEEEE, 'palevioletred': 0xDB7093, 'papayawhip': 0xFFEFD5, 'peachpuff': 0xFFDAB9,
		'peru': 0xCD853F, 'pink': 0xFFC0CB, 'plum': 0xDDA0DD, 'powderblue': 0xB0E0E6, 'purple': 0x800080, 'rebeccapurple': 0x663399, 'red': 0xFF0000, 'rosybrown': 0xBC8F8F,
		'royalblue': 0x4169E1, 'saddlebrown': 0x8B4513, 'salmon': 0xFA8072, 'sandybrown': 0xF4A460, 'seagreen': 0x2E8B57, 'seashell': 0xFFF5EE,
		'sienna': 0xA0522D, 'silver': 0xC0C0C0, 'skyblue': 0x87CEEB, 'slateblue': 0x6A5ACD, 'slategray': 0x708090, 'slategrey': 0x708090, 'snow': 0xFFFAFA,
		'springgreen': 0x00FF7F, 'steelblue': 0x4682B4, 'tan': 0xD2B48C, 'teal': 0x008080, 'thistle': 0xD8BFD8, 'tomato': 0xFF6347, 'turquoise': 0x40E0D0,
		'violet': 0xEE82EE, 'wheat': 0xF5DEB3, 'white': 0xFFFFFF, 'whitesmoke': 0xF5F5F5, 'yellow': 0xFFFF00, 'yellowgreen': 0x9ACD32 };

	const _hslA = { h: 0, s: 0, l: 0 };
	const _hslB = { h: 0, s: 0, l: 0 };

	function hue2rgb( p, q, t ) {

		if ( t < 0 ) t += 1;
		if ( t > 1 ) t -= 1;
		if ( t < 1 / 6 ) return p + ( q - p ) * 6 * t;
		if ( t < 1 / 2 ) return q;
		if ( t < 2 / 3 ) return p + ( q - p ) * 6 * ( 2 / 3 - t );
		return p;

	}

	class Color {

		constructor( r, g, b ) {

			this.isColor = true;

			this.r = 1;
			this.g = 1;
			this.b = 1;

			return this.set( r, g, b );

		}

		set( r, g, b ) {

			if ( g === undefined && b === undefined ) {

				// r is THREE.Color, hex or string

				const value = r;

				if ( value && value.isColor ) {

					this.copy( value );

				} else if ( typeof value === 'number' ) {

					this.setHex( value );

				} else if ( typeof value === 'string' ) {

					this.setStyle( value );

				}

			} else {

				this.setRGB( r, g, b );

			}

			return this;

		}

		setScalar( scalar ) {

			this.r = scalar;
			this.g = scalar;
			this.b = scalar;

			return this;

		}

		setHex( hex, colorSpace = SRGBColorSpace ) {

			hex = Math.floor( hex );

			this.r = ( hex >> 16 & 255 ) / 255;
			this.g = ( hex >> 8 & 255 ) / 255;
			this.b = ( hex & 255 ) / 255;

			ColorManagement.toWorkingColorSpace( this, colorSpace );

			return this;

		}

		setRGB( r, g, b, colorSpace = ColorManagement.workingColorSpace ) {

			this.r = r;
			this.g = g;
			this.b = b;

			ColorManagement.toWorkingColorSpace( this, colorSpace );

			return this;

		}

		setHSL( h, s, l, colorSpace = ColorManagement.workingColorSpace ) {

			// h,s,l ranges are in 0.0 - 1.0
			h = euclideanModulo( h, 1 );
			s = clamp( s, 0, 1 );
			l = clamp( l, 0, 1 );

			if ( s === 0 ) {

				this.r = this.g = this.b = l;

			} else {

				const p = l <= 0.5 ? l * ( 1 + s ) : l + s - ( l * s );
				const q = ( 2 * l ) - p;

				this.r = hue2rgb( q, p, h + 1 / 3 );
				this.g = hue2rgb( q, p, h );
				this.b = hue2rgb( q, p, h - 1 / 3 );

			}

			ColorManagement.toWorkingColorSpace( this, colorSpace );

			return this;

		}

		setStyle( style, colorSpace = SRGBColorSpace ) {

			function handleAlpha( string ) {

				if ( string === undefined ) return;

				if ( parseFloat( string ) < 1 ) {

					console.warn( 'THREE.Color: Alpha component of ' + style + ' will be ignored.' );

				}

			}


			let m;

			if ( m = /^(\w+)\(([^\)]*)\)/.exec( style ) ) {

				// rgb / hsl

				let color;
				const name = m[ 1 ];
				const components = m[ 2 ];

				switch ( name ) {

					case 'rgb':
					case 'rgba':

						if ( color = /^\s*(\d+)\s*,\s*(\d+)\s*,\s*(\d+)\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {

							// rgb(255,0,0) rgba(255,0,0,0.5)

							handleAlpha( color[ 4 ] );

							return this.setRGB(
								Math.min( 255, parseInt( color[ 1 ], 10 ) ) / 255,
								Math.min( 255, parseInt( color[ 2 ], 10 ) ) / 255,
								Math.min( 255, parseInt( color[ 3 ], 10 ) ) / 255,
								colorSpace
							);

						}

						if ( color = /^\s*(\d+)\%\s*,\s*(\d+)\%\s*,\s*(\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {

							// rgb(100%,0%,0%) rgba(100%,0%,0%,0.5)

							handleAlpha( color[ 4 ] );

							return this.setRGB(
								Math.min( 100, parseInt( color[ 1 ], 10 ) ) / 100,
								Math.min( 100, parseInt( color[ 2 ], 10 ) ) / 100,
								Math.min( 100, parseInt( color[ 3 ], 10 ) ) / 100,
								colorSpace
							);

						}

						break;

					case 'hsl':
					case 'hsla':

						if ( color = /^\s*(\d*\.?\d+)\s*,\s*(\d*\.?\d+)\%\s*,\s*(\d*\.?\d+)\%\s*(?:,\s*(\d*\.?\d+)\s*)?$/.exec( components ) ) {

							// hsl(120,50%,50%) hsla(120,50%,50%,0.5)

							handleAlpha( color[ 4 ] );

							return this.setHSL(
								parseFloat( color[ 1 ] ) / 360,
								parseFloat( color[ 2 ] ) / 100,
								parseFloat( color[ 3 ] ) / 100,
								colorSpace
							);

						}

						break;

					default:

						console.warn( 'THREE.Color: Unknown color model ' + style );

				}

			} else if ( m = /^\#([A-Fa-f\d]+)$/.exec( style ) ) {

				// hex color

				const hex = m[ 1 ];
				const size = hex.length;

				if ( size === 3 ) {

					// #ff0
					return this.setRGB(
						parseInt( hex.charAt( 0 ), 16 ) / 15,
						parseInt( hex.charAt( 1 ), 16 ) / 15,
						parseInt( hex.charAt( 2 ), 16 ) / 15,
						colorSpace
					);

				} else if ( size === 6 ) {

					// #ff0000
					return this.setHex( parseInt( hex, 16 ), colorSpace );

				} else {

					console.warn( 'THREE.Color: Invalid hex color ' + style );

				}

			} else if ( style && style.length > 0 ) {

				return this.setColorName( style, colorSpace );

			}

			return this;

		}

		setColorName( style, colorSpace = SRGBColorSpace ) {

			// color keywords
			const hex = _colorKeywords[ style.toLowerCase() ];

			if ( hex !== undefined ) {

				// red
				this.setHex( hex, colorSpace );

			} else {

				// unknown color
				console.warn( 'THREE.Color: Unknown color ' + style );

			}

			return this;

		}

		clone() {

			return new this.constructor( this.r, this.g, this.b );

		}

		copy( color ) {

			this.r = color.r;
			this.g = color.g;
			this.b = color.b;

			return this;

		}

		copySRGBToLinear( color ) {

			this.r = SRGBToLinear( color.r );
			this.g = SRGBToLinear( color.g );
			this.b = SRGBToLinear( color.b );

			return this;

		}

		copyLinearToSRGB( color ) {

			this.r = LinearToSRGB( color.r );
			this.g = LinearToSRGB( color.g );
			this.b = LinearToSRGB( color.b );

			return this;

		}

		convertSRGBToLinear() {

			this.copySRGBToLinear( this );

			return this;

		}

		convertLinearToSRGB() {

			this.copyLinearToSRGB( this );

			return this;

		}

		getHex( colorSpace = SRGBColorSpace ) {

			ColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );

			return Math.round( clamp( _color.r * 255, 0, 255 ) ) * 65536 + Math.round( clamp( _color.g * 255, 0, 255 ) ) * 256 + Math.round( clamp( _color.b * 255, 0, 255 ) );

		}

		getHexString( colorSpace = SRGBColorSpace ) {

			return ( '000000' + this.getHex( colorSpace ).toString( 16 ) ).slice( - 6 );

		}

		getHSL( target, colorSpace = ColorManagement.workingColorSpace ) {

			// h,s,l ranges are in 0.0 - 1.0

			ColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );

			const r = _color.r, g = _color.g, b = _color.b;

			const max = Math.max( r, g, b );
			const min = Math.min( r, g, b );

			let hue, saturation;
			const lightness = ( min + max ) / 2.0;

			if ( min === max ) {

				hue = 0;
				saturation = 0;

			} else {

				const delta = max - min;

				saturation = lightness <= 0.5 ? delta / ( max + min ) : delta / ( 2 - max - min );

				switch ( max ) {

					case r: hue = ( g - b ) / delta + ( g < b ? 6 : 0 ); break;
					case g: hue = ( b - r ) / delta + 2; break;
					case b: hue = ( r - g ) / delta + 4; break;

				}

				hue /= 6;

			}

			target.h = hue;
			target.s = saturation;
			target.l = lightness;

			return target;

		}

		getRGB( target, colorSpace = ColorManagement.workingColorSpace ) {

			ColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );

			target.r = _color.r;
			target.g = _color.g;
			target.b = _color.b;

			return target;

		}

		getStyle( colorSpace = SRGBColorSpace ) {

			ColorManagement.fromWorkingColorSpace( _color.copy( this ), colorSpace );

			const r = _color.r, g = _color.g, b = _color.b;

			if ( colorSpace !== SRGBColorSpace ) {

				// Requires CSS Color Module Level 4 (https://www.w3.org/TR/css-color-4/).
				return `color(${ colorSpace } ${ r.toFixed( 3 ) } ${ g.toFixed( 3 ) } ${ b.toFixed( 3 ) })`;

			}

			return `rgb(${ Math.round( r * 255 ) },${ Math.round( g * 255 ) },${ Math.round( b * 255 ) })`;

		}

		offsetHSL( h, s, l ) {

			this.getHSL( _hslA );

			_hslA.h += h; _hslA.s += s; _hslA.l += l;

			this.setHSL( _hslA.h, _hslA.s, _hslA.l );

			return this;

		}

		add( color ) {

			this.r += color.r;
			this.g += color.g;
			this.b += color.b;

			return this;

		}

		addColors( color1, color2 ) {

			this.r = color1.r + color2.r;
			this.g = color1.g + color2.g;
			this.b = color1.b + color2.b;

			return this;

		}

		addScalar( s ) {

			this.r += s;
			this.g += s;
			this.b += s;

			return this;

		}

		sub( color ) {

			this.r = Math.max( 0, this.r - color.r );
			this.g = Math.max( 0, this.g - color.g );
			this.b = Math.max( 0, this.b - color.b );

			return this;

		}

		multiply( color ) {

			this.r *= color.r;
			this.g *= color.g;
			this.b *= color.b;

			return this;

		}

		multiplyScalar( s ) {

			this.r *= s;
			this.g *= s;
			this.b *= s;

			return this;

		}

		lerp( color, alpha ) {

			this.r += ( color.r - this.r ) * alpha;
			this.g += ( color.g - this.g ) * alpha;
			this.b += ( color.b - this.b ) * alpha;

			return this;

		}

		lerpColors( color1, color2, alpha ) {

			this.r = color1.r + ( color2.r - color1.r ) * alpha;
			this.g = color1.g + ( color2.g - color1.g ) * alpha;
			this.b = color1.b + ( color2.b - color1.b ) * alpha;

			return this;

		}

		lerpHSL( color, alpha ) {

			this.getHSL( _hslA );
			color.getHSL( _hslB );

			const h = lerp( _hslA.h, _hslB.h, alpha );
			const s = lerp( _hslA.s, _hslB.s, alpha );
			const l = lerp( _hslA.l, _hslB.l, alpha );

			this.setHSL( h, s, l );

			return this;

		}

		setFromVector3( v ) {

			this.r = v.x;
			this.g = v.y;
			this.b = v.z;

			return this;

		}

		applyMatrix3( m ) {

			const r = this.r, g = this.g, b = this.b;
			const e = m.elements;

			this.r = e[ 0 ] * r + e[ 3 ] * g + e[ 6 ] * b;
			this.g = e[ 1 ] * r + e[ 4 ] * g + e[ 7 ] * b;
			this.b = e[ 2 ] * r + e[ 5 ] * g + e[ 8 ] * b;

			return this;

		}

		equals( c ) {

			return ( c.r === this.r ) && ( c.g === this.g ) && ( c.b === this.b );

		}

		fromArray( array, offset = 0 ) {

			this.r = array[ offset ];
			this.g = array[ offset + 1 ];
			this.b = array[ offset + 2 ];

			return this;

		}

		toArray( array = [], offset = 0 ) {

			array[ offset ] = this.r;
			array[ offset + 1 ] = this.g;
			array[ offset + 2 ] = this.b;

			return array;

		}

		fromBufferAttribute( attribute, index ) {

			this.r = attribute.getX( index );
			this.g = attribute.getY( index );
			this.b = attribute.getZ( index );

			return this;

		}

		toJSON() {

			return this.getHex();

		}

		*[ Symbol.iterator ]() {

			yield this.r;
			yield this.g;
			yield this.b;

		}

	}

	const _color = /*@__PURE__*/ new Color();

	Color.NAMES = _colorKeywords;

	class MeshBasicMaterial extends Material {

		constructor( parameters ) {

			super();

			this.isMeshBasicMaterial = true;

			this.type = 'MeshBasicMaterial';

			this.color = new Color( 0xffffff ); // emissive

			this.map = null;

			this.lightMap = null;
			this.lightMapIntensity = 1.0;

			this.aoMap = null;
			this.aoMapIntensity = 1.0;

			this.specularMap = null;

			this.alphaMap = null;

			this.envMap = null;
			this.combine = MultiplyOperation;
			this.reflectivity = 1;
			this.refractionRatio = 0.98;

			this.wireframe = false;
			this.wireframeLinewidth = 1;
			this.wireframeLinecap = 'round';
			this.wireframeLinejoin = 'round';

			this.fog = true;

			this.setValues( parameters );

		}

		copy( source ) {

			super.copy( source );

			this.color.copy( source.color );

			this.map = source.map;

			this.lightMap = source.lightMap;
			this.lightMapIntensity = source.lightMapIntensity;

			this.aoMap = source.aoMap;
			this.aoMapIntensity = source.aoMapIntensity;

			this.specularMap = source.specularMap;

			this.alphaMap = source.alphaMap;

			this.envMap = source.envMap;
			this.combine = source.combine;
			this.reflectivity = source.reflectivity;
			this.refractionRatio = source.refractionRatio;

			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;
			this.wireframeLinecap = source.wireframeLinecap;
			this.wireframeLinejoin = source.wireframeLinejoin;

			this.fog = source.fog;

			return this;

		}

	}

	const _vector$8 = /*@__PURE__*/ new Vector3();
	const _vector2$1 = /*@__PURE__*/ new Vector2();

	class BufferAttribute {

		constructor( array, itemSize, normalized = false ) {

			if ( Array.isArray( array ) ) {

				throw new TypeError( 'THREE.BufferAttribute: array should be a Typed Array.' );

			}

			this.isBufferAttribute = true;

			this.name = '';

			this.array = array;
			this.itemSize = itemSize;
			this.count = array !== undefined ? array.length / itemSize : 0;
			this.normalized = normalized;

			this.usage = StaticDrawUsage;
			this.updateRange = { offset: 0, count: - 1 };
			this.gpuType = FloatType;

			this.version = 0;

		}

		onUploadCallback() {}

		set needsUpdate( value ) {

			if ( value === true ) this.version ++;

		}

		setUsage( value ) {

			this.usage = value;

			return this;

		}

		copy( source ) {

			this.name = source.name;
			this.array = new source.array.constructor( source.array );
			this.itemSize = source.itemSize;
			this.count = source.count;
			this.normalized = source.normalized;

			this.usage = source.usage;
			this.gpuType = source.gpuType;

			return this;

		}

		copyAt( index1, attribute, index2 ) {

			index1 *= this.itemSize;
			index2 *= attribute.itemSize;

			for ( let i = 0, l = this.itemSize; i < l; i ++ ) {

				this.array[ index1 + i ] = attribute.array[ index2 + i ];

			}

			return this;

		}

		copyArray( array ) {

			this.array.set( array );

			return this;

		}

		applyMatrix3( m ) {

			if ( this.itemSize === 2 ) {

				for ( let i = 0, l = this.count; i < l; i ++ ) {

					_vector2$1.fromBufferAttribute( this, i );
					_vector2$1.applyMatrix3( m );

					this.setXY( i, _vector2$1.x, _vector2$1.y );

				}

			} else if ( this.itemSize === 3 ) {

				for ( let i = 0, l = this.count; i < l; i ++ ) {

					_vector$8.fromBufferAttribute( this, i );
					_vector$8.applyMatrix3( m );

					this.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );

				}

			}

			return this;

		}

		applyMatrix4( m ) {

			for ( let i = 0, l = this.count; i < l; i ++ ) {

				_vector$8.fromBufferAttribute( this, i );

				_vector$8.applyMatrix4( m );

				this.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );

			}

			return this;

		}

		applyNormalMatrix( m ) {

			for ( let i = 0, l = this.count; i < l; i ++ ) {

				_vector$8.fromBufferAttribute( this, i );

				_vector$8.applyNormalMatrix( m );

				this.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );

			}

			return this;

		}

		transformDirection( m ) {

			for ( let i = 0, l = this.count; i < l; i ++ ) {

				_vector$8.fromBufferAttribute( this, i );

				_vector$8.transformDirection( m );

				this.setXYZ( i, _vector$8.x, _vector$8.y, _vector$8.z );

			}

			return this;

		}

		set( value, offset = 0 ) {

			// Matching BufferAttribute constructor, do not normalize the array.
			this.array.set( value, offset );

			return this;

		}

		getComponent( index, component ) {

			let value = this.array[ index * this.itemSize + component ];

			if ( this.normalized ) value = denormalize( value, this.array );

			return value;

		}

		setComponent( index, component, value ) {

			if ( this.normalized ) value = normalize( value, this.array );

			this.array[ index * this.itemSize + component ] = value;

			return this;

		}

		getX( index ) {

			let x = this.array[ index * this.itemSize ];

			if ( this.normalized ) x = denormalize( x, this.array );

			return x;

		}

		setX( index, x ) {

			if ( this.normalized ) x = normalize( x, this.array );

			this.array[ index * this.itemSize ] = x;

			return this;

		}

		getY( index ) {

			let y = this.array[ index * this.itemSize + 1 ];

			if ( this.normalized ) y = denormalize( y, this.array );

			return y;

		}

		setY( index, y ) {

			if ( this.normalized ) y = normalize( y, this.array );

			this.array[ index * this.itemSize + 1 ] = y;

			return this;

		}

		getZ( index ) {

			let z = this.array[ index * this.itemSize + 2 ];

			if ( this.normalized ) z = denormalize( z, this.array );

			return z;

		}

		setZ( index, z ) {

			if ( this.normalized ) z = normalize( z, this.array );

			this.array[ index * this.itemSize + 2 ] = z;

			return this;

		}

		getW( index ) {

			let w = this.array[ index * this.itemSize + 3 ];

			if ( this.normalized ) w = denormalize( w, this.array );

			return w;

		}

		setW( index, w ) {

			if ( this.normalized ) w = normalize( w, this.array );

			this.array[ index * this.itemSize + 3 ] = w;

			return this;

		}

		setXY( index, x, y ) {

			index *= this.itemSize;

			if ( this.normalized ) {

				x = normalize( x, this.array );
				y = normalize( y, this.array );

			}

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;

			return this;

		}

		setXYZ( index, x, y, z ) {

			index *= this.itemSize;

			if ( this.normalized ) {

				x = normalize( x, this.array );
				y = normalize( y, this.array );
				z = normalize( z, this.array );

			}

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;

			return this;

		}

		setXYZW( index, x, y, z, w ) {

			index *= this.itemSize;

			if ( this.normalized ) {

				x = normalize( x, this.array );
				y = normalize( y, this.array );
				z = normalize( z, this.array );
				w = normalize( w, this.array );

			}

			this.array[ index + 0 ] = x;
			this.array[ index + 1 ] = y;
			this.array[ index + 2 ] = z;
			this.array[ index + 3 ] = w;

			return this;

		}

		onUpload( callback ) {

			this.onUploadCallback = callback;

			return this;

		}

		clone() {

			return new this.constructor( this.array, this.itemSize ).copy( this );

		}

		toJSON() {

			const data = {
				itemSize: this.itemSize,
				type: this.array.constructor.name,
				array: Array.from( this.array ),
				normalized: this.normalized
			};

			if ( this.name !== '' ) data.name = this.name;
			if ( this.usage !== StaticDrawUsage ) data.usage = this.usage;
			if ( this.updateRange.offset !== 0 || this.updateRange.count !== - 1 ) data.updateRange = this.updateRange;

			return data;

		}

	}

	class Uint16BufferAttribute extends BufferAttribute {

		constructor( array, itemSize, normalized ) {

			super( new Uint16Array( array ), itemSize, normalized );

		}

	}

	class Uint32BufferAttribute extends BufferAttribute {

		constructor( array, itemSize, normalized ) {

			super( new Uint32Array( array ), itemSize, normalized );

		}

	}


	class Float32BufferAttribute extends BufferAttribute {

		constructor( array, itemSize, normalized ) {

			super( new Float32Array( array ), itemSize, normalized );

		}

	}

	let _id$2 = 0;

	const _m1 = /*@__PURE__*/ new Matrix4();
	const _obj = /*@__PURE__*/ new Object3D();
	const _offset = /*@__PURE__*/ new Vector3();
	const _box$1 = /*@__PURE__*/ new Box3();
	const _boxMorphTargets = /*@__PURE__*/ new Box3();
	const _vector$7 = /*@__PURE__*/ new Vector3();

	class BufferGeometry extends EventDispatcher {

		constructor() {

			super();

			this.isBufferGeometry = true;

			Object.defineProperty( this, 'id', { value: _id$2 ++ } );

			this.uuid = generateUUID();

			this.name = '';
			this.type = 'BufferGeometry';

			this.index = null;
			this.attributes = {};

			this.morphAttributes = {};
			this.morphTargetsRelative = false;

			this.groups = [];

			this.boundingBox = null;
			this.boundingSphere = null;

			this.drawRange = { start: 0, count: Infinity };

			this.userData = {};

		}

		getIndex() {

			return this.index;

		}

		setIndex( index ) {

			if ( Array.isArray( index ) ) {

				this.index = new ( arrayNeedsUint32( index ) ? Uint32BufferAttribute : Uint16BufferAttribute )( index, 1 );

			} else {

				this.index = index;

			}

			return this;

		}

		getAttribute( name ) {

			return this.attributes[ name ];

		}

		setAttribute( name, attribute ) {

			this.attributes[ name ] = attribute;

			return this;

		}

		deleteAttribute( name ) {

			delete this.attributes[ name ];

			return this;

		}

		hasAttribute( name ) {

			return this.attributes[ name ] !== undefined;

		}

		addGroup( start, count, materialIndex = 0 ) {

			this.groups.push( {

				start: start,
				count: count,
				materialIndex: materialIndex

			} );

		}

		clearGroups() {

			this.groups = [];

		}

		setDrawRange( start, count ) {

			this.drawRange.start = start;
			this.drawRange.count = count;

		}

		applyMatrix4( matrix ) {

			const position = this.attributes.position;

			if ( position !== undefined ) {

				position.applyMatrix4( matrix );

				position.needsUpdate = true;

			}

			const normal = this.attributes.normal;

			if ( normal !== undefined ) {

				const normalMatrix = new Matrix3().getNormalMatrix( matrix );

				normal.applyNormalMatrix( normalMatrix );

				normal.needsUpdate = true;

			}

			const tangent = this.attributes.tangent;

			if ( tangent !== undefined ) {

				tangent.transformDirection( matrix );

				tangent.needsUpdate = true;

			}

			if ( this.boundingBox !== null ) {

				this.computeBoundingBox();

			}

			if ( this.boundingSphere !== null ) {

				this.computeBoundingSphere();

			}

			return this;

		}

		applyQuaternion( q ) {

			_m1.makeRotationFromQuaternion( q );

			this.applyMatrix4( _m1 );

			return this;

		}

		rotateX( angle ) {

			// rotate geometry around world x-axis

			_m1.makeRotationX( angle );

			this.applyMatrix4( _m1 );

			return this;

		}

		rotateY( angle ) {

			// rotate geometry around world y-axis

			_m1.makeRotationY( angle );

			this.applyMatrix4( _m1 );

			return this;

		}

		rotateZ( angle ) {

			// rotate geometry around world z-axis

			_m1.makeRotationZ( angle );

			this.applyMatrix4( _m1 );

			return this;

		}

		translate( x, y, z ) {

			// translate geometry

			_m1.makeTranslation( x, y, z );

			this.applyMatrix4( _m1 );

			return this;

		}

		scale( x, y, z ) {

			// scale geometry

			_m1.makeScale( x, y, z );

			this.applyMatrix4( _m1 );

			return this;

		}

		lookAt( vector ) {

			_obj.lookAt( vector );

			_obj.updateMatrix();

			this.applyMatrix4( _obj.matrix );

			return this;

		}

		center() {

			this.computeBoundingBox();

			this.boundingBox.getCenter( _offset ).negate();

			this.translate( _offset.x, _offset.y, _offset.z );

			return this;

		}

		setFromPoints( points ) {

			const position = [];

			for ( let i = 0, l = points.length; i < l; i ++ ) {

				const point = points[ i ];
				position.push( point.x, point.y, point.z || 0 );

			}

			this.setAttribute( 'position', new Float32BufferAttribute( position, 3 ) );

			return this;

		}

		computeBoundingBox() {

			if ( this.boundingBox === null ) {

				this.boundingBox = new Box3();

			}

			const position = this.attributes.position;
			const morphAttributesPosition = this.morphAttributes.position;

			if ( position && position.isGLBufferAttribute ) {

				console.error( 'THREE.BufferGeometry.computeBoundingBox(): GLBufferAttribute requires a manual bounding box. Alternatively set "mesh.frustumCulled" to "false".', this );

				this.boundingBox.set(
					new Vector3( - Infinity, - Infinity, - Infinity ),
					new Vector3( + Infinity, + Infinity, + Infinity )
				);

				return;

			}

			if ( position !== undefined ) {

				this.boundingBox.setFromBufferAttribute( position );

				// process morph attributes if present

				if ( morphAttributesPosition ) {

					for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

						const morphAttribute = morphAttributesPosition[ i ];
						_box$1.setFromBufferAttribute( morphAttribute );

						if ( this.morphTargetsRelative ) {

							_vector$7.addVectors( this.boundingBox.min, _box$1.min );
							this.boundingBox.expandByPoint( _vector$7 );

							_vector$7.addVectors( this.boundingBox.max, _box$1.max );
							this.boundingBox.expandByPoint( _vector$7 );

						} else {

							this.boundingBox.expandByPoint( _box$1.min );
							this.boundingBox.expandByPoint( _box$1.max );

						}

					}

				}

			} else {

				this.boundingBox.makeEmpty();

			}

			if ( isNaN( this.boundingBox.min.x ) || isNaN( this.boundingBox.min.y ) || isNaN( this.boundingBox.min.z ) ) {

				console.error( 'THREE.BufferGeometry.computeBoundingBox(): Computed min/max have NaN values. The "position" attribute is likely to have NaN values.', this );

			}

		}

		computeBoundingSphere() {

			if ( this.boundingSphere === null ) {

				this.boundingSphere = new Sphere();

			}

			const position = this.attributes.position;
			const morphAttributesPosition = this.morphAttributes.position;

			if ( position && position.isGLBufferAttribute ) {

				console.error( 'THREE.BufferGeometry.computeBoundingSphere(): GLBufferAttribute requires a manual bounding sphere. Alternatively set "mesh.frustumCulled" to "false".', this );

				this.boundingSphere.set( new Vector3(), Infinity );

				return;

			}

			if ( position ) {

				// first, find the center of the bounding sphere

				const center = this.boundingSphere.center;

				_box$1.setFromBufferAttribute( position );

				// process morph attributes if present

				if ( morphAttributesPosition ) {

					for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

						const morphAttribute = morphAttributesPosition[ i ];
						_boxMorphTargets.setFromBufferAttribute( morphAttribute );

						if ( this.morphTargetsRelative ) {

							_vector$7.addVectors( _box$1.min, _boxMorphTargets.min );
							_box$1.expandByPoint( _vector$7 );

							_vector$7.addVectors( _box$1.max, _boxMorphTargets.max );
							_box$1.expandByPoint( _vector$7 );

						} else {

							_box$1.expandByPoint( _boxMorphTargets.min );
							_box$1.expandByPoint( _boxMorphTargets.max );

						}

					}

				}

				_box$1.getCenter( center );

				// second, try to find a boundingSphere with a radius smaller than the
				// boundingSphere of the boundingBox: sqrt(3) smaller in the best case

				let maxRadiusSq = 0;

				for ( let i = 0, il = position.count; i < il; i ++ ) {

					_vector$7.fromBufferAttribute( position, i );

					maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$7 ) );

				}

				// process morph attributes if present

				if ( morphAttributesPosition ) {

					for ( let i = 0, il = morphAttributesPosition.length; i < il; i ++ ) {

						const morphAttribute = morphAttributesPosition[ i ];
						const morphTargetsRelative = this.morphTargetsRelative;

						for ( let j = 0, jl = morphAttribute.count; j < jl; j ++ ) {

							_vector$7.fromBufferAttribute( morphAttribute, j );

							if ( morphTargetsRelative ) {

								_offset.fromBufferAttribute( position, j );
								_vector$7.add( _offset );

							}

							maxRadiusSq = Math.max( maxRadiusSq, center.distanceToSquared( _vector$7 ) );

						}

					}

				}

				this.boundingSphere.radius = Math.sqrt( maxRadiusSq );

				if ( isNaN( this.boundingSphere.radius ) ) {

					console.error( 'THREE.BufferGeometry.computeBoundingSphere(): Computed radius is NaN. The "position" attribute is likely to have NaN values.', this );

				}

			}

		}

		computeTangents() {

			const index = this.index;
			const attributes = this.attributes;

			// based on http://www.terathon.com/code/tangent.html
			// (per vertex tangents)

			if ( index === null ||
				 attributes.position === undefined ||
				 attributes.normal === undefined ||
				 attributes.uv === undefined ) {

				console.error( 'THREE.BufferGeometry: .computeTangents() failed. Missing required attributes (index, position, normal or uv)' );
				return;

			}

			const indices = index.array;
			const positions = attributes.position.array;
			const normals = attributes.normal.array;
			const uvs = attributes.uv.array;

			const nVertices = positions.length / 3;

			if ( this.hasAttribute( 'tangent' ) === false ) {

				this.setAttribute( 'tangent', new BufferAttribute( new Float32Array( 4 * nVertices ), 4 ) );

			}

			const tangents = this.getAttribute( 'tangent' ).array;

			const tan1 = [], tan2 = [];

			for ( let i = 0; i < nVertices; i ++ ) {

				tan1[ i ] = new Vector3();
				tan2[ i ] = new Vector3();

			}

			const vA = new Vector3(),
				vB = new Vector3(),
				vC = new Vector3(),

				uvA = new Vector2(),
				uvB = new Vector2(),
				uvC = new Vector2(),

				sdir = new Vector3(),
				tdir = new Vector3();

			function handleTriangle( a, b, c ) {

				vA.fromArray( positions, a * 3 );
				vB.fromArray( positions, b * 3 );
				vC.fromArray( positions, c * 3 );

				uvA.fromArray( uvs, a * 2 );
				uvB.fromArray( uvs, b * 2 );
				uvC.fromArray( uvs, c * 2 );

				vB.sub( vA );
				vC.sub( vA );

				uvB.sub( uvA );
				uvC.sub( uvA );

				const r = 1.0 / ( uvB.x * uvC.y - uvC.x * uvB.y );

				// silently ignore degenerate uv triangles having coincident or colinear vertices

				if ( ! isFinite( r ) ) return;

				sdir.copy( vB ).multiplyScalar( uvC.y ).addScaledVector( vC, - uvB.y ).multiplyScalar( r );
				tdir.copy( vC ).multiplyScalar( uvB.x ).addScaledVector( vB, - uvC.x ).multiplyScalar( r );

				tan1[ a ].add( sdir );
				tan1[ b ].add( sdir );
				tan1[ c ].add( sdir );

				tan2[ a ].add( tdir );
				tan2[ b ].add( tdir );
				tan2[ c ].add( tdir );

			}

			let groups = this.groups;

			if ( groups.length === 0 ) {

				groups = [ {
					start: 0,
					count: indices.length
				} ];

			}

			for ( let i = 0, il = groups.length; i < il; ++ i ) {

				const group = groups[ i ];

				const start = group.start;
				const count = group.count;

				for ( let j = start, jl = start + count; j < jl; j += 3 ) {

					handleTriangle(
						indices[ j + 0 ],
						indices[ j + 1 ],
						indices[ j + 2 ]
					);

				}

			}

			const tmp = new Vector3(), tmp2 = new Vector3();
			const n = new Vector3(), n2 = new Vector3();

			function handleVertex( v ) {

				n.fromArray( normals, v * 3 );
				n2.copy( n );

				const t = tan1[ v ];

				// Gram-Schmidt orthogonalize

				tmp.copy( t );
				tmp.sub( n.multiplyScalar( n.dot( t ) ) ).normalize();

				// Calculate handedness

				tmp2.crossVectors( n2, t );
				const test = tmp2.dot( tan2[ v ] );
				const w = ( test < 0.0 ) ? - 1.0 : 1.0;

				tangents[ v * 4 ] = tmp.x;
				tangents[ v * 4 + 1 ] = tmp.y;
				tangents[ v * 4 + 2 ] = tmp.z;
				tangents[ v * 4 + 3 ] = w;

			}

			for ( let i = 0, il = groups.length; i < il; ++ i ) {

				const group = groups[ i ];

				const start = group.start;
				const count = group.count;

				for ( let j = start, jl = start + count; j < jl; j += 3 ) {

					handleVertex( indices[ j + 0 ] );
					handleVertex( indices[ j + 1 ] );
					handleVertex( indices[ j + 2 ] );

				}

			}

		}

		computeVertexNormals() {

			const index = this.index;
			const positionAttribute = this.getAttribute( 'position' );

			if ( positionAttribute !== undefined ) {

				let normalAttribute = this.getAttribute( 'normal' );

				if ( normalAttribute === undefined ) {

					normalAttribute = new BufferAttribute( new Float32Array( positionAttribute.count * 3 ), 3 );
					this.setAttribute( 'normal', normalAttribute );

				} else {

					// reset existing normals to zero

					for ( let i = 0, il = normalAttribute.count; i < il; i ++ ) {

						normalAttribute.setXYZ( i, 0, 0, 0 );

					}

				}

				const pA = new Vector3(), pB = new Vector3(), pC = new Vector3();
				const nA = new Vector3(), nB = new Vector3(), nC = new Vector3();
				const cb = new Vector3(), ab = new Vector3();

				// indexed elements

				if ( index ) {

					for ( let i = 0, il = index.count; i < il; i += 3 ) {

						const vA = index.getX( i + 0 );
						const vB = index.getX( i + 1 );
						const vC = index.getX( i + 2 );

						pA.fromBufferAttribute( positionAttribute, vA );
						pB.fromBufferAttribute( positionAttribute, vB );
						pC.fromBufferAttribute( positionAttribute, vC );

						cb.subVectors( pC, pB );
						ab.subVectors( pA, pB );
						cb.cross( ab );

						nA.fromBufferAttribute( normalAttribute, vA );
						nB.fromBufferAttribute( normalAttribute, vB );
						nC.fromBufferAttribute( normalAttribute, vC );

						nA.add( cb );
						nB.add( cb );
						nC.add( cb );

						normalAttribute.setXYZ( vA, nA.x, nA.y, nA.z );
						normalAttribute.setXYZ( vB, nB.x, nB.y, nB.z );
						normalAttribute.setXYZ( vC, nC.x, nC.y, nC.z );

					}

				} else {

					// non-indexed elements (unconnected triangle soup)

					for ( let i = 0, il = positionAttribute.count; i < il; i += 3 ) {

						pA.fromBufferAttribute( positionAttribute, i + 0 );
						pB.fromBufferAttribute( positionAttribute, i + 1 );
						pC.fromBufferAttribute( positionAttribute, i + 2 );

						cb.subVectors( pC, pB );
						ab.subVectors( pA, pB );
						cb.cross( ab );

						normalAttribute.setXYZ( i + 0, cb.x, cb.y, cb.z );
						normalAttribute.setXYZ( i + 1, cb.x, cb.y, cb.z );
						normalAttribute.setXYZ( i + 2, cb.x, cb.y, cb.z );

					}

				}

				this.normalizeNormals();

				normalAttribute.needsUpdate = true;

			}

		}

		normalizeNormals() {

			const normals = this.attributes.normal;

			for ( let i = 0, il = normals.count; i < il; i ++ ) {

				_vector$7.fromBufferAttribute( normals, i );

				_vector$7.normalize();

				normals.setXYZ( i, _vector$7.x, _vector$7.y, _vector$7.z );

			}

		}

		toNonIndexed() {

			function convertBufferAttribute( attribute, indices ) {

				const array = attribute.array;
				const itemSize = attribute.itemSize;
				const normalized = attribute.normalized;

				const array2 = new array.constructor( indices.length * itemSize );

				let index = 0, index2 = 0;

				for ( let i = 0, l = indices.length; i < l; i ++ ) {

					if ( attribute.isInterleavedBufferAttribute ) {

						index = indices[ i ] * attribute.data.stride + attribute.offset;

					} else {

						index = indices[ i ] * itemSize;

					}

					for ( let j = 0; j < itemSize; j ++ ) {

						array2[ index2 ++ ] = array[ index ++ ];

					}

				}

				return new BufferAttribute( array2, itemSize, normalized );

			}

			//

			if ( this.index === null ) {

				console.warn( 'THREE.BufferGeometry.toNonIndexed(): BufferGeometry is already non-indexed.' );
				return this;

			}

			const geometry2 = new BufferGeometry();

			const indices = this.index.array;
			const attributes = this.attributes;

			// attributes

			for ( const name in attributes ) {

				const attribute = attributes[ name ];

				const newAttribute = convertBufferAttribute( attribute, indices );

				geometry2.setAttribute( name, newAttribute );

			}

			// morph attributes

			const morphAttributes = this.morphAttributes;

			for ( const name in morphAttributes ) {

				const morphArray = [];
				const morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

				for ( let i = 0, il = morphAttribute.length; i < il; i ++ ) {

					const attribute = morphAttribute[ i ];

					const newAttribute = convertBufferAttribute( attribute, indices );

					morphArray.push( newAttribute );

				}

				geometry2.morphAttributes[ name ] = morphArray;

			}

			geometry2.morphTargetsRelative = this.morphTargetsRelative;

			// groups

			const groups = this.groups;

			for ( let i = 0, l = groups.length; i < l; i ++ ) {

				const group = groups[ i ];
				geometry2.addGroup( group.start, group.count, group.materialIndex );

			}

			return geometry2;

		}

		toJSON() {

			const data = {
				metadata: {
					version: 4.6,
					type: 'BufferGeometry',
					generator: 'BufferGeometry.toJSON'
				}
			};

			// standard BufferGeometry serialization

			data.uuid = this.uuid;
			data.type = this.type;
			if ( this.name !== '' ) data.name = this.name;
			if ( Object.keys( this.userData ).length > 0 ) data.userData = this.userData;

			if ( this.parameters !== undefined ) {

				const parameters = this.parameters;

				for ( const key in parameters ) {

					if ( parameters[ key ] !== undefined ) data[ key ] = parameters[ key ];

				}

				return data;

			}

			// for simplicity the code assumes attributes are not shared across geometries, see #15811

			data.data = { attributes: {} };

			const index = this.index;

			if ( index !== null ) {

				data.data.index = {
					type: index.array.constructor.name,
					array: Array.prototype.slice.call( index.array )
				};

			}

			const attributes = this.attributes;

			for ( const key in attributes ) {

				const attribute = attributes[ key ];

				data.data.attributes[ key ] = attribute.toJSON( data.data );

			}

			const morphAttributes = {};
			let hasMorphAttributes = false;

			for ( const key in this.morphAttributes ) {

				const attributeArray = this.morphAttributes[ key ];

				const array = [];

				for ( let i = 0, il = attributeArray.length; i < il; i ++ ) {

					const attribute = attributeArray[ i ];

					array.push( attribute.toJSON( data.data ) );

				}

				if ( array.length > 0 ) {

					morphAttributes[ key ] = array;

					hasMorphAttributes = true;

				}

			}

			if ( hasMorphAttributes ) {

				data.data.morphAttributes = morphAttributes;
				data.data.morphTargetsRelative = this.morphTargetsRelative;

			}

			const groups = this.groups;

			if ( groups.length > 0 ) {

				data.data.groups = JSON.parse( JSON.stringify( groups ) );

			}

			const boundingSphere = this.boundingSphere;

			if ( boundingSphere !== null ) {

				data.data.boundingSphere = {
					center: boundingSphere.center.toArray(),
					radius: boundingSphere.radius
				};

			}

			return data;

		}

		clone() {

			return new this.constructor().copy( this );

		}

		copy( source ) {

			// reset

			this.index = null;
			this.attributes = {};
			this.morphAttributes = {};
			this.groups = [];
			this.boundingBox = null;
			this.boundingSphere = null;

			// used for storing cloned, shared data

			const data = {};

			// name

			this.name = source.name;

			// index

			const index = source.index;

			if ( index !== null ) {

				this.setIndex( index.clone( data ) );

			}

			// attributes

			const attributes = source.attributes;

			for ( const name in attributes ) {

				const attribute = attributes[ name ];
				this.setAttribute( name, attribute.clone( data ) );

			}

			// morph attributes

			const morphAttributes = source.morphAttributes;

			for ( const name in morphAttributes ) {

				const array = [];
				const morphAttribute = morphAttributes[ name ]; // morphAttribute: array of Float32BufferAttributes

				for ( let i = 0, l = morphAttribute.length; i < l; i ++ ) {

					array.push( morphAttribute[ i ].clone( data ) );

				}

				this.morphAttributes[ name ] = array;

			}

			this.morphTargetsRelative = source.morphTargetsRelative;

			// groups

			const groups = source.groups;

			for ( let i = 0, l = groups.length; i < l; i ++ ) {

				const group = groups[ i ];
				this.addGroup( group.start, group.count, group.materialIndex );

			}

			// bounding box

			const boundingBox = source.boundingBox;

			if ( boundingBox !== null ) {

				this.boundingBox = boundingBox.clone();

			}

			// bounding sphere

			const boundingSphere = source.boundingSphere;

			if ( boundingSphere !== null ) {

				this.boundingSphere = boundingSphere.clone();

			}

			// draw range

			this.drawRange.start = source.drawRange.start;
			this.drawRange.count = source.drawRange.count;

			// user data

			this.userData = source.userData;

			return this;

		}

		dispose() {

			this.dispatchEvent( { type: 'dispose' } );

		}

	}

	const _inverseMatrix$3 = /*@__PURE__*/ new Matrix4();
	const _ray$3 = /*@__PURE__*/ new Ray();
	const _sphere$5 = /*@__PURE__*/ new Sphere();
	const _sphereHitAt = /*@__PURE__*/ new Vector3();

	const _vA$1 = /*@__PURE__*/ new Vector3();
	const _vB$1 = /*@__PURE__*/ new Vector3();
	const _vC$1 = /*@__PURE__*/ new Vector3();

	const _tempA = /*@__PURE__*/ new Vector3();
	const _morphA = /*@__PURE__*/ new Vector3();

	const _uvA$1 = /*@__PURE__*/ new Vector2();
	const _uvB$1 = /*@__PURE__*/ new Vector2();
	const _uvC$1 = /*@__PURE__*/ new Vector2();

	const _normalA = /*@__PURE__*/ new Vector3();
	const _normalB = /*@__PURE__*/ new Vector3();
	const _normalC = /*@__PURE__*/ new Vector3();

	const _intersectionPoint = /*@__PURE__*/ new Vector3();
	const _intersectionPointWorld = /*@__PURE__*/ new Vector3();

	class Mesh extends Object3D {

		constructor( geometry = new BufferGeometry(), material = new MeshBasicMaterial() ) {

			super();

			this.isMesh = true;

			this.type = 'Mesh';

			this.geometry = geometry;
			this.material = material;

			this.updateMorphTargets();

		}

		copy( source, recursive ) {

			super.copy( source, recursive );

			if ( source.morphTargetInfluences !== undefined ) {

				this.morphTargetInfluences = source.morphTargetInfluences.slice();

			}

			if ( source.morphTargetDictionary !== undefined ) {

				this.morphTargetDictionary = Object.assign( {}, source.morphTargetDictionary );

			}

			this.material = Array.isArray( source.material ) ? source.material.slice() : source.material;
			this.geometry = source.geometry;

			return this;

		}

		updateMorphTargets() {

			const geometry = this.geometry;

			const morphAttributes = geometry.morphAttributes;
			const keys = Object.keys( morphAttributes );

			if ( keys.length > 0 ) {

				const morphAttribute = morphAttributes[ keys[ 0 ] ];

				if ( morphAttribute !== undefined ) {

					this.morphTargetInfluences = [];
					this.morphTargetDictionary = {};

					for ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

						const name = morphAttribute[ m ].name || String( m );

						this.morphTargetInfluences.push( 0 );
						this.morphTargetDictionary[ name ] = m;

					}

				}

			}

		}

		getVertexPosition( index, target ) {

			const geometry = this.geometry;
			const position = geometry.attributes.position;
			const morphPosition = geometry.morphAttributes.position;
			const morphTargetsRelative = geometry.morphTargetsRelative;

			target.fromBufferAttribute( position, index );

			const morphInfluences = this.morphTargetInfluences;

			if ( morphPosition && morphInfluences ) {

				_morphA.set( 0, 0, 0 );

				for ( let i = 0, il = morphPosition.length; i < il; i ++ ) {

					const influence = morphInfluences[ i ];
					const morphAttribute = morphPosition[ i ];

					if ( influence === 0 ) continue;

					_tempA.fromBufferAttribute( morphAttribute, index );

					if ( morphTargetsRelative ) {

						_morphA.addScaledVector( _tempA, influence );

					} else {

						_morphA.addScaledVector( _tempA.sub( target ), influence );

					}

				}

				target.add( _morphA );

			}

			return target;

		}

		raycast( raycaster, intersects ) {

			const geometry = this.geometry;
			const material = this.material;
			const matrixWorld = this.matrixWorld;

			if ( material === undefined ) return;

			// test with bounding sphere in world space

			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

			_sphere$5.copy( geometry.boundingSphere );
			_sphere$5.applyMatrix4( matrixWorld );

			// check distance from ray origin to bounding sphere

			_ray$3.copy( raycaster.ray ).recast( raycaster.near );

			if ( _sphere$5.containsPoint( _ray$3.origin ) === false ) {

				if ( _ray$3.intersectSphere( _sphere$5, _sphereHitAt ) === null ) return;

				if ( _ray$3.origin.distanceToSquared( _sphereHitAt ) > ( raycaster.far - raycaster.near ) ** 2 ) return;

			}

			// convert ray to local space of mesh

			_inverseMatrix$3.copy( matrixWorld ).invert();
			_ray$3.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$3 );

			// test with bounding box in local space

			if ( geometry.boundingBox !== null ) {

				if ( _ray$3.intersectsBox( geometry.boundingBox ) === false ) return;

			}

			// test for intersections with geometry

			this._computeIntersections( raycaster, intersects, _ray$3 );

		}

		_computeIntersections( raycaster, intersects, rayLocalSpace ) {

			let intersection;

			const geometry = this.geometry;
			const material = this.material;

			const index = geometry.index;
			const position = geometry.attributes.position;
			const uv = geometry.attributes.uv;
			const uv1 = geometry.attributes.uv1;
			const normal = geometry.attributes.normal;
			const groups = geometry.groups;
			const drawRange = geometry.drawRange;

			if ( index !== null ) {

				// indexed buffer geometry

				if ( Array.isArray( material ) ) {

					for ( let i = 0, il = groups.length; i < il; i ++ ) {

						const group = groups[ i ];
						const groupMaterial = material[ group.materialIndex ];

						const start = Math.max( group.start, drawRange.start );
						const end = Math.min( index.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );

						for ( let j = start, jl = end; j < jl; j += 3 ) {

							const a = index.getX( j );
							const b = index.getX( j + 1 );
							const c = index.getX( j + 2 );

							intersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );

							if ( intersection ) {

								intersection.faceIndex = Math.floor( j / 3 ); // triangle number in indexed buffer semantics
								intersection.face.materialIndex = group.materialIndex;
								intersects.push( intersection );

							}

						}

					}

				} else {

					const start = Math.max( 0, drawRange.start );
					const end = Math.min( index.count, ( drawRange.start + drawRange.count ) );

					for ( let i = start, il = end; i < il; i += 3 ) {

						const a = index.getX( i );
						const b = index.getX( i + 1 );
						const c = index.getX( i + 2 );

						intersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );

						if ( intersection ) {

							intersection.faceIndex = Math.floor( i / 3 ); // triangle number in indexed buffer semantics
							intersects.push( intersection );

						}

					}

				}

			} else if ( position !== undefined ) {

				// non-indexed buffer geometry

				if ( Array.isArray( material ) ) {

					for ( let i = 0, il = groups.length; i < il; i ++ ) {

						const group = groups[ i ];
						const groupMaterial = material[ group.materialIndex ];

						const start = Math.max( group.start, drawRange.start );
						const end = Math.min( position.count, Math.min( ( group.start + group.count ), ( drawRange.start + drawRange.count ) ) );

						for ( let j = start, jl = end; j < jl; j += 3 ) {

							const a = j;
							const b = j + 1;
							const c = j + 2;

							intersection = checkGeometryIntersection( this, groupMaterial, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );

							if ( intersection ) {

								intersection.faceIndex = Math.floor( j / 3 ); // triangle number in non-indexed buffer semantics
								intersection.face.materialIndex = group.materialIndex;
								intersects.push( intersection );

							}

						}

					}

				} else {

					const start = Math.max( 0, drawRange.start );
					const end = Math.min( position.count, ( drawRange.start + drawRange.count ) );

					for ( let i = start, il = end; i < il; i += 3 ) {

						const a = i;
						const b = i + 1;
						const c = i + 2;

						intersection = checkGeometryIntersection( this, material, raycaster, rayLocalSpace, uv, uv1, normal, a, b, c );

						if ( intersection ) {

							intersection.faceIndex = Math.floor( i / 3 ); // triangle number in non-indexed buffer semantics
							intersects.push( intersection );

						}

					}

				}

			}

		}

	}

	function checkIntersection( object, material, raycaster, ray, pA, pB, pC, point ) {

		let intersect;

		if ( material.side === BackSide ) {

			intersect = ray.intersectTriangle( pC, pB, pA, true, point );

		} else {

			intersect = ray.intersectTriangle( pA, pB, pC, ( material.side === FrontSide ), point );

		}

		if ( intersect === null ) return null;

		_intersectionPointWorld.copy( point );
		_intersectionPointWorld.applyMatrix4( object.matrixWorld );

		const distance = raycaster.ray.origin.distanceTo( _intersectionPointWorld );

		if ( distance < raycaster.near || distance > raycaster.far ) return null;

		return {
			distance: distance,
			point: _intersectionPointWorld.clone(),
			object: object
		};

	}

	function checkGeometryIntersection( object, material, raycaster, ray, uv, uv1, normal, a, b, c ) {

		object.getVertexPosition( a, _vA$1 );
		object.getVertexPosition( b, _vB$1 );
		object.getVertexPosition( c, _vC$1 );

		const intersection = checkIntersection( object, material, raycaster, ray, _vA$1, _vB$1, _vC$1, _intersectionPoint );

		if ( intersection ) {

			if ( uv ) {

				_uvA$1.fromBufferAttribute( uv, a );
				_uvB$1.fromBufferAttribute( uv, b );
				_uvC$1.fromBufferAttribute( uv, c );

				intersection.uv = Triangle.getInterpolation( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );

			}

			if ( uv1 ) {

				_uvA$1.fromBufferAttribute( uv1, a );
				_uvB$1.fromBufferAttribute( uv1, b );
				_uvC$1.fromBufferAttribute( uv1, c );

				intersection.uv1 = Triangle.getInterpolation( _intersectionPoint, _vA$1, _vB$1, _vC$1, _uvA$1, _uvB$1, _uvC$1, new Vector2() );
				intersection.uv2 = intersection.uv1; // @deprecated, r152

			}

			if ( normal ) {

				_normalA.fromBufferAttribute( normal, a );
				_normalB.fromBufferAttribute( normal, b );
				_normalC.fromBufferAttribute( normal, c );

				intersection.normal = Triangle.getInterpolation( _intersectionPoint, _vA$1, _vB$1, _vC$1, _normalA, _normalB, _normalC, new Vector3() );

				if ( intersection.normal.dot( ray.direction ) > 0 ) {

					intersection.normal.multiplyScalar( - 1 );

				}

			}

			const face = {
				a: a,
				b: b,
				c: c,
				normal: new Vector3(),
				materialIndex: 0
			};

			Triangle.getNormal( _vA$1, _vB$1, _vC$1, face.normal );

			intersection.face = face;

		}

		return intersection;

	}

	class BoxGeometry extends BufferGeometry {

		constructor( width = 1, height = 1, depth = 1, widthSegments = 1, heightSegments = 1, depthSegments = 1 ) {

			super();

			this.type = 'BoxGeometry';

			this.parameters = {
				width: width,
				height: height,
				depth: depth,
				widthSegments: widthSegments,
				heightSegments: heightSegments,
				depthSegments: depthSegments
			};

			const scope = this;

			// segments

			widthSegments = Math.floor( widthSegments );
			heightSegments = Math.floor( heightSegments );
			depthSegments = Math.floor( depthSegments );

			// buffers

			const indices = [];
			const vertices = [];
			const normals = [];
			const uvs = [];

			// helper variables

			let numberOfVertices = 0;
			let groupStart = 0;

			// build each side of the box geometry

			buildPlane( 'z', 'y', 'x', - 1, - 1, depth, height, width, depthSegments, heightSegments, 0 ); // px
			buildPlane( 'z', 'y', 'x', 1, - 1, depth, height, - width, depthSegments, heightSegments, 1 ); // nx
			buildPlane( 'x', 'z', 'y', 1, 1, width, depth, height, widthSegments, depthSegments, 2 ); // py
			buildPlane( 'x', 'z', 'y', 1, - 1, width, depth, - height, widthSegments, depthSegments, 3 ); // ny
			buildPlane( 'x', 'y', 'z', 1, - 1, width, height, depth, widthSegments, heightSegments, 4 ); // pz
			buildPlane( 'x', 'y', 'z', - 1, - 1, width, height, - depth, widthSegments, heightSegments, 5 ); // nz

			// build geometry

			this.setIndex( indices );
			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

			function buildPlane( u, v, w, udir, vdir, width, height, depth, gridX, gridY, materialIndex ) {

				const segmentWidth = width / gridX;
				const segmentHeight = height / gridY;

				const widthHalf = width / 2;
				const heightHalf = height / 2;
				const depthHalf = depth / 2;

				const gridX1 = gridX + 1;
				const gridY1 = gridY + 1;

				let vertexCounter = 0;
				let groupCount = 0;

				const vector = new Vector3();

				// generate vertices, normals and uvs

				for ( let iy = 0; iy < gridY1; iy ++ ) {

					const y = iy * segmentHeight - heightHalf;

					for ( let ix = 0; ix < gridX1; ix ++ ) {

						const x = ix * segmentWidth - widthHalf;

						// set values to correct vector component

						vector[ u ] = x * udir;
						vector[ v ] = y * vdir;
						vector[ w ] = depthHalf;

						// now apply vector to vertex buffer

						vertices.push( vector.x, vector.y, vector.z );

						// set values to correct vector component

						vector[ u ] = 0;
						vector[ v ] = 0;
						vector[ w ] = depth > 0 ? 1 : - 1;

						// now apply vector to normal buffer

						normals.push( vector.x, vector.y, vector.z );

						// uvs

						uvs.push( ix / gridX );
						uvs.push( 1 - ( iy / gridY ) );

						// counters

						vertexCounter += 1;

					}

				}

				// indices

				// 1. you need three indices to draw a single face
				// 2. a single segment consists of two faces
				// 3. so we need to generate six (2*3) indices per segment

				for ( let iy = 0; iy < gridY; iy ++ ) {

					for ( let ix = 0; ix < gridX; ix ++ ) {

						const a = numberOfVertices + ix + gridX1 * iy;
						const b = numberOfVertices + ix + gridX1 * ( iy + 1 );
						const c = numberOfVertices + ( ix + 1 ) + gridX1 * ( iy + 1 );
						const d = numberOfVertices + ( ix + 1 ) + gridX1 * iy;

						// faces

						indices.push( a, b, d );
						indices.push( b, c, d );

						// increase counter

						groupCount += 6;

					}

				}

				// add a group to the geometry. this will ensure multi material support

				scope.addGroup( groupStart, groupCount, materialIndex );

				// calculate new start value for groups

				groupStart += groupCount;

				// update total number of vertices

				numberOfVertices += vertexCounter;

			}

		}

		copy( source ) {

			super.copy( source );

			this.parameters = Object.assign( {}, source.parameters );

			return this;

		}

		static fromJSON( data ) {

			return new BoxGeometry( data.width, data.height, data.depth, data.widthSegments, data.heightSegments, data.depthSegments );

		}

	}

	/**
	 * Uniform Utilities
	 */

	function cloneUniforms( src ) {

		const dst = {};

		for ( const u in src ) {

			dst[ u ] = {};

			for ( const p in src[ u ] ) {

				const property = src[ u ][ p ];

				if ( property && ( property.isColor ||
					property.isMatrix3 || property.isMatrix4 ||
					property.isVector2 || property.isVector3 || property.isVector4 ||
					property.isTexture || property.isQuaternion ) ) {

					if ( property.isRenderTargetTexture ) {

						console.warn( 'UniformsUtils: Textures of render targets cannot be cloned via cloneUniforms() or mergeUniforms().' );
						dst[ u ][ p ] = null;

					} else {

						dst[ u ][ p ] = property.clone();

					}

				} else if ( Array.isArray( property ) ) {

					dst[ u ][ p ] = property.slice();

				} else {

					dst[ u ][ p ] = property;

				}

			}

		}

		return dst;

	}

	function mergeUniforms( uniforms ) {

		const merged = {};

		for ( let u = 0; u < uniforms.length; u ++ ) {

			const tmp = cloneUniforms( uniforms[ u ] );

			for ( const p in tmp ) {

				merged[ p ] = tmp[ p ];

			}

		}

		return merged;

	}

	function cloneUniformsGroups( src ) {

		const dst = [];

		for ( let u = 0; u < src.length; u ++ ) {

			dst.push( src[ u ].clone() );

		}

		return dst;

	}

	function getUnlitUniformColorSpace( renderer ) {

		if ( renderer.getRenderTarget() === null ) {

			// https://github.com/mrdoob/three.js/pull/23937#issuecomment-1111067398
			return renderer.outputColorSpace;

		}

		return LinearSRGBColorSpace;

	}

	// Legacy

	const UniformsUtils = { clone: cloneUniforms, merge: mergeUniforms };

	var default_vertex = "void main() {\n\tgl_Position = projectionMatrix * modelViewMatrix * vec4( position, 1.0 );\n}";

	var default_fragment = "void main() {\n\tgl_FragColor = vec4( 1.0, 0.0, 0.0, 1.0 );\n}";

	class ShaderMaterial extends Material {

		constructor( parameters ) {

			super();

			this.isShaderMaterial = true;

			this.type = 'ShaderMaterial';

			this.defines = {};
			this.uniforms = {};
			this.uniformsGroups = [];

			this.vertexShader = default_vertex;
			this.fragmentShader = default_fragment;

			this.linewidth = 1;

			this.wireframe = false;
			this.wireframeLinewidth = 1;

			this.fog = false; // set to use scene fog
			this.lights = false; // set to use scene lights
			this.clipping = false; // set to use user-defined clipping planes

			this.forceSinglePass = true;

			this.extensions = {
				derivatives: false, // set to use derivatives
				fragDepth: false, // set to use fragment depth values
				drawBuffers: false, // set to use draw buffers
				shaderTextureLOD: false // set to use shader texture LOD
			};

			// When rendered geometry doesn't include these attributes but the material does,
			// use these default values in WebGL. This avoids errors when buffer data is missing.
			this.defaultAttributeValues = {
				'color': [ 1, 1, 1 ],
				'uv': [ 0, 0 ],
				'uv1': [ 0, 0 ]
			};

			this.index0AttributeName = undefined;
			this.uniformsNeedUpdate = false;

			this.glslVersion = null;

			if ( parameters !== undefined ) {

				this.setValues( parameters );

			}

		}

		copy( source ) {

			super.copy( source );

			this.fragmentShader = source.fragmentShader;
			this.vertexShader = source.vertexShader;

			this.uniforms = cloneUniforms( source.uniforms );
			this.uniformsGroups = cloneUniformsGroups( source.uniformsGroups );

			this.defines = Object.assign( {}, source.defines );

			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;

			this.fog = source.fog;
			this.lights = source.lights;
			this.clipping = source.clipping;

			this.extensions = Object.assign( {}, source.extensions );

			this.glslVersion = source.glslVersion;

			return this;

		}

		toJSON( meta ) {

			const data = super.toJSON( meta );

			data.glslVersion = this.glslVersion;
			data.uniforms = {};

			for ( const name in this.uniforms ) {

				const uniform = this.uniforms[ name ];
				const value = uniform.value;

				if ( value && value.isTexture ) {

					data.uniforms[ name ] = {
						type: 't',
						value: value.toJSON( meta ).uuid
					};

				} else if ( value && value.isColor ) {

					data.uniforms[ name ] = {
						type: 'c',
						value: value.getHex()
					};

				} else if ( value && value.isVector2 ) {

					data.uniforms[ name ] = {
						type: 'v2',
						value: value.toArray()
					};

				} else if ( value && value.isVector3 ) {

					data.uniforms[ name ] = {
						type: 'v3',
						value: value.toArray()
					};

				} else if ( value && value.isVector4 ) {

					data.uniforms[ name ] = {
						type: 'v4',
						value: value.toArray()
					};

				} else if ( value && value.isMatrix3 ) {

					data.uniforms[ name ] = {
						type: 'm3',
						value: value.toArray()
					};

				} else if ( value && value.isMatrix4 ) {

					data.uniforms[ name ] = {
						type: 'm4',
						value: value.toArray()
					};

				} else {

					data.uniforms[ name ] = {
						value: value
					};

					// note: the array variants v2v, v3v, v4v, m4v and tv are not supported so far

				}

			}

			if ( Object.keys( this.defines ).length > 0 ) data.defines = this.defines;

			data.vertexShader = this.vertexShader;
			data.fragmentShader = this.fragmentShader;

			data.lights = this.lights;
			data.clipping = this.clipping;

			const extensions = {};

			for ( const key in this.extensions ) {

				if ( this.extensions[ key ] === true ) extensions[ key ] = true;

			}

			if ( Object.keys( extensions ).length > 0 ) data.extensions = extensions;

			return data;

		}

	}

	class Camera extends Object3D {

		constructor() {

			super();

			this.isCamera = true;

			this.type = 'Camera';

			this.matrixWorldInverse = new Matrix4();

			this.projectionMatrix = new Matrix4();
			this.projectionMatrixInverse = new Matrix4();

			this.coordinateSystem = WebGLCoordinateSystem;

		}

		copy( source, recursive ) {

			super.copy( source, recursive );

			this.matrixWorldInverse.copy( source.matrixWorldInverse );

			this.projectionMatrix.copy( source.projectionMatrix );
			this.projectionMatrixInverse.copy( source.projectionMatrixInverse );

			this.coordinateSystem = source.coordinateSystem;

			return this;

		}

		getWorldDirection( target ) {

			this.updateWorldMatrix( true, false );

			const e = this.matrixWorld.elements;

			return target.set( - e[ 8 ], - e[ 9 ], - e[ 10 ] ).normalize();

		}

		updateMatrixWorld( force ) {

			super.updateMatrixWorld( force );

			this.matrixWorldInverse.copy( this.matrixWorld ).invert();

		}

		updateWorldMatrix( updateParents, updateChildren ) {

			super.updateWorldMatrix( updateParents, updateChildren );

			this.matrixWorldInverse.copy( this.matrixWorld ).invert();

		}

		clone() {

			return new this.constructor().copy( this );

		}

	}

	class PerspectiveCamera extends Camera {

		constructor( fov = 50, aspect = 1, near = 0.1, far = 2000 ) {

			super();

			this.isPerspectiveCamera = true;

			this.type = 'PerspectiveCamera';

			this.fov = fov;
			this.zoom = 1;

			this.near = near;
			this.far = far;
			this.focus = 10;

			this.aspect = aspect;
			this.view = null;

			this.filmGauge = 35;	// width of the film (default in millimeters)
			this.filmOffset = 0;	// horizontal film offset (same unit as gauge)

			this.updateProjectionMatrix();

		}

		copy( source, recursive ) {

			super.copy( source, recursive );

			this.fov = source.fov;
			this.zoom = source.zoom;

			this.near = source.near;
			this.far = source.far;
			this.focus = source.focus;

			this.aspect = source.aspect;
			this.view = source.view === null ? null : Object.assign( {}, source.view );

			this.filmGauge = source.filmGauge;
			this.filmOffset = source.filmOffset;

			return this;

		}

		/**
		 * Sets the FOV by focal length in respect to the current .filmGauge.
		 *
		 * The default film gauge is 35, so that the focal length can be specified for
		 * a 35mm (full frame) camera.
		 *
		 * Values for focal length and film gauge must have the same unit.
		 */
		setFocalLength( focalLength ) {

			/** see {@link http://www.bobatkins.com/photography/technical/field_of_view.html} */
			const vExtentSlope = 0.5 * this.getFilmHeight() / focalLength;

			this.fov = RAD2DEG * 2 * Math.atan( vExtentSlope );
			this.updateProjectionMatrix();

		}

		/**
		 * Calculates the focal length from the current .fov and .filmGauge.
		 */
		getFocalLength() {

			const vExtentSlope = Math.tan( DEG2RAD * 0.5 * this.fov );

			return 0.5 * this.getFilmHeight() / vExtentSlope;

		}

		getEffectiveFOV() {

			return RAD2DEG * 2 * Math.atan(
				Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom );

		}

		getFilmWidth() {

			// film not completely covered in portrait format (aspect < 1)
			return this.filmGauge * Math.min( this.aspect, 1 );

		}

		getFilmHeight() {

			// film not completely covered in landscape format (aspect > 1)
			return this.filmGauge / Math.max( this.aspect, 1 );

		}

		/**
		 * Sets an offset in a larger frustum. This is useful for multi-window or
		 * multi-monitor/multi-machine setups.
		 *
		 * For example, if you have 3x2 monitors and each monitor is 1920x1080 and
		 * the monitors are in grid like this
		 *
		 *   +---+---+---+
		 *   | A | B | C |
		 *   +---+---+---+
		 *   | D | E | F |
		 *   +---+---+---+
		 *
		 * then for each monitor you would call it like this
		 *
		 *   const w = 1920;
		 *   const h = 1080;
		 *   const fullWidth = w * 3;
		 *   const fullHeight = h * 2;
		 *
		 *   --A--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 0, w, h );
		 *   --B--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 0, w, h );
		 *   --C--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 0, w, h );
		 *   --D--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 0, h * 1, w, h );
		 *   --E--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 1, h * 1, w, h );
		 *   --F--
		 *   camera.setViewOffset( fullWidth, fullHeight, w * 2, h * 1, w, h );
		 *
		 *   Note there is no reason monitors have to be the same size or in a grid.
		 */
		setViewOffset( fullWidth, fullHeight, x, y, width, height ) {

			this.aspect = fullWidth / fullHeight;

			if ( this.view === null ) {

				this.view = {
					enabled: true,
					fullWidth: 1,
					fullHeight: 1,
					offsetX: 0,
					offsetY: 0,
					width: 1,
					height: 1
				};

			}

			this.view.enabled = true;
			this.view.fullWidth = fullWidth;
			this.view.fullHeight = fullHeight;
			this.view.offsetX = x;
			this.view.offsetY = y;
			this.view.width = width;
			this.view.height = height;

			this.updateProjectionMatrix();

		}

		clearViewOffset() {

			if ( this.view !== null ) {

				this.view.enabled = false;

			}

			this.updateProjectionMatrix();

		}

		updateProjectionMatrix() {

			const near = this.near;
			let top = near * Math.tan( DEG2RAD * 0.5 * this.fov ) / this.zoom;
			let height = 2 * top;
			let width = this.aspect * height;
			let left = - 0.5 * width;
			const view = this.view;

			if ( this.view !== null && this.view.enabled ) {

				const fullWidth = view.fullWidth,
					fullHeight = view.fullHeight;

				left += view.offsetX * width / fullWidth;
				top -= view.offsetY * height / fullHeight;
				width *= view.width / fullWidth;
				height *= view.height / fullHeight;

			}

			const skew = this.filmOffset;
			if ( skew !== 0 ) left += near * skew / this.getFilmWidth();

			this.projectionMatrix.makePerspective( left, left + width, top, top - height, near, this.far, this.coordinateSystem );

			this.projectionMatrixInverse.copy( this.projectionMatrix ).invert();

		}

		toJSON( meta ) {

			const data = super.toJSON( meta );

			data.object.fov = this.fov;
			data.object.zoom = this.zoom;

			data.object.near = this.near;
			data.object.far = this.far;
			data.object.focus = this.focus;

			data.object.aspect = this.aspect;

			if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

			data.object.filmGauge = this.filmGauge;
			data.object.filmOffset = this.filmOffset;

			return data;

		}

	}

	const fov = - 90; // negative fov is not an error
	const aspect = 1;

	class CubeCamera extends Object3D {

		constructor( near, far, renderTarget ) {

			super();

			this.type = 'CubeCamera';

			this.renderTarget = renderTarget;
			this.coordinateSystem = null;

			const cameraPX = new PerspectiveCamera( fov, aspect, near, far );
			cameraPX.layers = this.layers;
			this.add( cameraPX );

			const cameraNX = new PerspectiveCamera( fov, aspect, near, far );
			cameraNX.layers = this.layers;
			this.add( cameraNX );

			const cameraPY = new PerspectiveCamera( fov, aspect, near, far );
			cameraPY.layers = this.layers;
			this.add( cameraPY );

			const cameraNY = new PerspectiveCamera( fov, aspect, near, far );
			cameraNY.layers = this.layers;
			this.add( cameraNY );

			const cameraPZ = new PerspectiveCamera( fov, aspect, near, far );
			cameraPZ.layers = this.layers;
			this.add( cameraPZ );

			const cameraNZ = new PerspectiveCamera( fov, aspect, near, far );
			cameraNZ.layers = this.layers;
			this.add( cameraNZ );

		}

		updateCoordinateSystem() {

			const coordinateSystem = this.coordinateSystem;

			const cameras = this.children.concat();

			const [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = cameras;

			for ( const camera of cameras ) this.remove( camera );

			if ( coordinateSystem === WebGLCoordinateSystem ) {

				cameraPX.up.set( 0, 1, 0 );
				cameraPX.lookAt( 1, 0, 0 );

				cameraNX.up.set( 0, 1, 0 );
				cameraNX.lookAt( - 1, 0, 0 );

				cameraPY.up.set( 0, 0, - 1 );
				cameraPY.lookAt( 0, 1, 0 );

				cameraNY.up.set( 0, 0, 1 );
				cameraNY.lookAt( 0, - 1, 0 );

				cameraPZ.up.set( 0, 1, 0 );
				cameraPZ.lookAt( 0, 0, 1 );

				cameraNZ.up.set( 0, 1, 0 );
				cameraNZ.lookAt( 0, 0, - 1 );

			} else if ( coordinateSystem === WebGPUCoordinateSystem ) {

				cameraPX.up.set( 0, - 1, 0 );
				cameraPX.lookAt( - 1, 0, 0 );

				cameraNX.up.set( 0, - 1, 0 );
				cameraNX.lookAt( 1, 0, 0 );

				cameraPY.up.set( 0, 0, 1 );
				cameraPY.lookAt( 0, 1, 0 );

				cameraNY.up.set( 0, 0, - 1 );
				cameraNY.lookAt( 0, - 1, 0 );

				cameraPZ.up.set( 0, - 1, 0 );
				cameraPZ.lookAt( 0, 0, 1 );

				cameraNZ.up.set( 0, - 1, 0 );
				cameraNZ.lookAt( 0, 0, - 1 );

			} else {

				throw new Error( 'THREE.CubeCamera.updateCoordinateSystem(): Invalid coordinate system: ' + coordinateSystem );

			}

			for ( const camera of cameras ) {

				this.add( camera );

				camera.updateMatrixWorld();

			}

		}

		update( renderer, scene ) {

			if ( this.parent === null ) this.updateMatrixWorld();

			const renderTarget = this.renderTarget;

			if ( this.coordinateSystem !== renderer.coordinateSystem ) {

				this.coordinateSystem = renderer.coordinateSystem;

				this.updateCoordinateSystem();

			}

			const [ cameraPX, cameraNX, cameraPY, cameraNY, cameraPZ, cameraNZ ] = this.children;

			const currentRenderTarget = renderer.getRenderTarget();

			const currentXrEnabled = renderer.xr.enabled;

			renderer.xr.enabled = false;

			const generateMipmaps = renderTarget.texture.generateMipmaps;

			renderTarget.texture.generateMipmaps = false;

			renderer.setRenderTarget( renderTarget, 0 );
			renderer.render( scene, cameraPX );

			renderer.setRenderTarget( renderTarget, 1 );
			renderer.render( scene, cameraNX );

			renderer.setRenderTarget( renderTarget, 2 );
			renderer.render( scene, cameraPY );

			renderer.setRenderTarget( renderTarget, 3 );
			renderer.render( scene, cameraNY );

			renderer.setRenderTarget( renderTarget, 4 );
			renderer.render( scene, cameraPZ );

			renderTarget.texture.generateMipmaps = generateMipmaps;

			renderer.setRenderTarget( renderTarget, 5 );
			renderer.render( scene, cameraNZ );

			renderer.setRenderTarget( currentRenderTarget );

			renderer.xr.enabled = currentXrEnabled;

			renderTarget.texture.needsPMREMUpdate = true;

		}

	}

	class CubeTexture extends Texture {

		constructor( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace ) {

			images = images !== undefined ? images : [];
			mapping = mapping !== undefined ? mapping : CubeReflectionMapping;

			super( images, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy, colorSpace );

			this.isCubeTexture = true;

			this.flipY = false;

		}

		get images() {

			return this.image;

		}

		set images( value ) {

			this.image = value;

		}

	}

	class WebGLCubeRenderTarget extends WebGLRenderTarget {

		constructor( size = 1, options = {} ) {

			super( size, size, options );

			this.isWebGLCubeRenderTarget = true;

			const image = { width: size, height: size, depth: 1 };
			const images = [ image, image, image, image, image, image ];

			if ( options.encoding !== undefined ) {

				// @deprecated, r152
				warnOnce( 'THREE.WebGLCubeRenderTarget: option.encoding has been replaced by option.colorSpace.' );
				options.colorSpace = options.encoding === sRGBEncoding ? SRGBColorSpace : NoColorSpace;

			}

			this.texture = new CubeTexture( images, options.mapping, options.wrapS, options.wrapT, options.magFilter, options.minFilter, options.format, options.type, options.anisotropy, options.colorSpace );

			// By convention -- likely based on the RenderMan spec from the 1990's -- cube maps are specified by WebGL (and three.js)
			// in a coordinate system in which positive-x is to the right when looking up the positive-z axis -- in other words,
			// in a left-handed coordinate system. By continuing this convention, preexisting cube maps continued to render correctly.

			// three.js uses a right-handed coordinate system. So environment maps used in three.js appear to have px and nx swapped
			// and the flag isRenderTargetTexture controls this conversion. The flip is not required when using WebGLCubeRenderTarget.texture
			// as a cube texture (this is detected when isRenderTargetTexture is set to true for cube textures).

			this.texture.isRenderTargetTexture = true;

			this.texture.generateMipmaps = options.generateMipmaps !== undefined ? options.generateMipmaps : false;
			this.texture.minFilter = options.minFilter !== undefined ? options.minFilter : LinearFilter;

		}

		fromEquirectangularTexture( renderer, texture ) {

			this.texture.type = texture.type;
			this.texture.colorSpace = texture.colorSpace;

			this.texture.generateMipmaps = texture.generateMipmaps;
			this.texture.minFilter = texture.minFilter;
			this.texture.magFilter = texture.magFilter;

			const shader = {

				uniforms: {
					tEquirect: { value: null },
				},

				vertexShader: /* glsl */`

				varying vec3 vWorldDirection;

				vec3 transformDirection( in vec3 dir, in mat4 matrix ) {

					return normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );

				}

				void main() {

					vWorldDirection = transformDirection( position, modelMatrix );

					#include <begin_vertex>
					#include <project_vertex>

				}
			`,

				fragmentShader: /* glsl */`

				uniform sampler2D tEquirect;

				varying vec3 vWorldDirection;

				#include <common>

				void main() {

					vec3 direction = normalize( vWorldDirection );

					vec2 sampleUV = equirectUv( direction );

					gl_FragColor = texture2D( tEquirect, sampleUV );

				}
			`
			};

			const geometry = new BoxGeometry( 5, 5, 5 );

			const material = new ShaderMaterial( {

				name: 'CubemapFromEquirect',

				uniforms: cloneUniforms( shader.uniforms ),
				vertexShader: shader.vertexShader,
				fragmentShader: shader.fragmentShader,
				side: BackSide,
				blending: NoBlending

			} );

			material.uniforms.tEquirect.value = texture;

			const mesh = new Mesh( geometry, material );

			const currentMinFilter = texture.minFilter;

			// Avoid blurred poles
			if ( texture.minFilter === LinearMipmapLinearFilter ) texture.minFilter = LinearFilter;

			const camera = new CubeCamera( 1, 10, this );
			camera.update( renderer, mesh );

			texture.minFilter = currentMinFilter;

			mesh.geometry.dispose();
			mesh.material.dispose();

			return this;

		}

		clear( renderer, color, depth, stencil ) {

			const currentRenderTarget = renderer.getRenderTarget();

			for ( let i = 0; i < 6; i ++ ) {

				renderer.setRenderTarget( this, i );

				renderer.clear( color, depth, stencil );

			}

			renderer.setRenderTarget( currentRenderTarget );

		}

	}

	const _vector1 = /*@__PURE__*/ new Vector3();
	const _vector2 = /*@__PURE__*/ new Vector3();
	const _normalMatrix = /*@__PURE__*/ new Matrix3();

	class Plane {

		constructor( normal = new Vector3( 1, 0, 0 ), constant = 0 ) {

			this.isPlane = true;

			// normal is assumed to be normalized

			this.normal = normal;
			this.constant = constant;

		}

		set( normal, constant ) {

			this.normal.copy( normal );
			this.constant = constant;

			return this;

		}

		setComponents( x, y, z, w ) {

			this.normal.set( x, y, z );
			this.constant = w;

			return this;

		}

		setFromNormalAndCoplanarPoint( normal, point ) {

			this.normal.copy( normal );
			this.constant = - point.dot( this.normal );

			return this;

		}

		setFromCoplanarPoints( a, b, c ) {

			const normal = _vector1.subVectors( c, b ).cross( _vector2.subVectors( a, b ) ).normalize();

			// Q: should an error be thrown if normal is zero (e.g. degenerate plane)?

			this.setFromNormalAndCoplanarPoint( normal, a );

			return this;

		}

		copy( plane ) {

			this.normal.copy( plane.normal );
			this.constant = plane.constant;

			return this;

		}

		normalize() {

			// Note: will lead to a divide by zero if the plane is invalid.

			const inverseNormalLength = 1.0 / this.normal.length();
			this.normal.multiplyScalar( inverseNormalLength );
			this.constant *= inverseNormalLength;

			return this;

		}

		negate() {

			this.constant *= - 1;
			this.normal.negate();

			return this;

		}

		distanceToPoint( point ) {

			return this.normal.dot( point ) + this.constant;

		}

		distanceToSphere( sphere ) {

			return this.distanceToPoint( sphere.center ) - sphere.radius;

		}

		projectPoint( point, target ) {

			return target.copy( point ).addScaledVector( this.normal, - this.distanceToPoint( point ) );

		}

		intersectLine( line, target ) {

			const direction = line.delta( _vector1 );

			const denominator = this.normal.dot( direction );

			if ( denominator === 0 ) {

				// line is coplanar, return origin
				if ( this.distanceToPoint( line.start ) === 0 ) {

					return target.copy( line.start );

				}

				// Unsure if this is the correct method to handle this case.
				return null;

			}

			const t = - ( line.start.dot( this.normal ) + this.constant ) / denominator;

			if ( t < 0 || t > 1 ) {

				return null;

			}

			return target.copy( line.start ).addScaledVector( direction, t );

		}

		intersectsLine( line ) {

			// Note: this tests if a line intersects the plane, not whether it (or its end-points) are coplanar with it.

			const startSign = this.distanceToPoint( line.start );
			const endSign = this.distanceToPoint( line.end );

			return ( startSign < 0 && endSign > 0 ) || ( endSign < 0 && startSign > 0 );

		}

		intersectsBox( box ) {

			return box.intersectsPlane( this );

		}

		intersectsSphere( sphere ) {

			return sphere.intersectsPlane( this );

		}

		coplanarPoint( target ) {

			return target.copy( this.normal ).multiplyScalar( - this.constant );

		}

		applyMatrix4( matrix, optionalNormalMatrix ) {

			const normalMatrix = optionalNormalMatrix || _normalMatrix.getNormalMatrix( matrix );

			const referencePoint = this.coplanarPoint( _vector1 ).applyMatrix4( matrix );

			const normal = this.normal.applyMatrix3( normalMatrix ).normalize();

			this.constant = - referencePoint.dot( normal );

			return this;

		}

		translate( offset ) {

			this.constant -= offset.dot( this.normal );

			return this;

		}

		equals( plane ) {

			return plane.normal.equals( this.normal ) && ( plane.constant === this.constant );

		}

		clone() {

			return new this.constructor().copy( this );

		}

	}

	const _sphere$4 = /*@__PURE__*/ new Sphere();
	const _vector$6 = /*@__PURE__*/ new Vector3();

	class Frustum {

		constructor( p0 = new Plane(), p1 = new Plane(), p2 = new Plane(), p3 = new Plane(), p4 = new Plane(), p5 = new Plane() ) {

			this.planes = [ p0, p1, p2, p3, p4, p5 ];

		}

		set( p0, p1, p2, p3, p4, p5 ) {

			const planes = this.planes;

			planes[ 0 ].copy( p0 );
			planes[ 1 ].copy( p1 );
			planes[ 2 ].copy( p2 );
			planes[ 3 ].copy( p3 );
			planes[ 4 ].copy( p4 );
			planes[ 5 ].copy( p5 );

			return this;

		}

		copy( frustum ) {

			const planes = this.planes;

			for ( let i = 0; i < 6; i ++ ) {

				planes[ i ].copy( frustum.planes[ i ] );

			}

			return this;

		}

		setFromProjectionMatrix( m, coordinateSystem = WebGLCoordinateSystem ) {

			const planes = this.planes;
			const me = m.elements;
			const me0 = me[ 0 ], me1 = me[ 1 ], me2 = me[ 2 ], me3 = me[ 3 ];
			const me4 = me[ 4 ], me5 = me[ 5 ], me6 = me[ 6 ], me7 = me[ 7 ];
			const me8 = me[ 8 ], me9 = me[ 9 ], me10 = me[ 10 ], me11 = me[ 11 ];
			const me12 = me[ 12 ], me13 = me[ 13 ], me14 = me[ 14 ], me15 = me[ 15 ];

			planes[ 0 ].setComponents( me3 - me0, me7 - me4, me11 - me8, me15 - me12 ).normalize();
			planes[ 1 ].setComponents( me3 + me0, me7 + me4, me11 + me8, me15 + me12 ).normalize();
			planes[ 2 ].setComponents( me3 + me1, me7 + me5, me11 + me9, me15 + me13 ).normalize();
			planes[ 3 ].setComponents( me3 - me1, me7 - me5, me11 - me9, me15 - me13 ).normalize();
			planes[ 4 ].setComponents( me3 - me2, me7 - me6, me11 - me10, me15 - me14 ).normalize();

			if ( coordinateSystem === WebGLCoordinateSystem ) {

				planes[ 5 ].setComponents( me3 + me2, me7 + me6, me11 + me10, me15 + me14 ).normalize();

			} else if ( coordinateSystem === WebGPUCoordinateSystem ) {

				planes[ 5 ].setComponents( me2, me6, me10, me14 ).normalize();

			} else {

				throw new Error( 'THREE.Frustum.setFromProjectionMatrix(): Invalid coordinate system: ' + coordinateSystem );

			}

			return this;

		}

		intersectsObject( object ) {

			if ( object.boundingSphere !== undefined ) {

				if ( object.boundingSphere === null ) object.computeBoundingSphere();

				_sphere$4.copy( object.boundingSphere ).applyMatrix4( object.matrixWorld );

			} else {

				const geometry = object.geometry;

				if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

				_sphere$4.copy( geometry.boundingSphere ).applyMatrix4( object.matrixWorld );

			}

			return this.intersectsSphere( _sphere$4 );

		}

		intersectsSprite( sprite ) {

			_sphere$4.center.set( 0, 0, 0 );
			_sphere$4.radius = 0.7071067811865476;
			_sphere$4.applyMatrix4( sprite.matrixWorld );

			return this.intersectsSphere( _sphere$4 );

		}

		intersectsSphere( sphere ) {

			const planes = this.planes;
			const center = sphere.center;
			const negRadius = - sphere.radius;

			for ( let i = 0; i < 6; i ++ ) {

				const distance = planes[ i ].distanceToPoint( center );

				if ( distance < negRadius ) {

					return false;

				}

			}

			return true;

		}

		intersectsBox( box ) {

			const planes = this.planes;

			for ( let i = 0; i < 6; i ++ ) {

				const plane = planes[ i ];

				// corner at max distance

				_vector$6.x = plane.normal.x > 0 ? box.max.x : box.min.x;
				_vector$6.y = plane.normal.y > 0 ? box.max.y : box.min.y;
				_vector$6.z = plane.normal.z > 0 ? box.max.z : box.min.z;

				if ( plane.distanceToPoint( _vector$6 ) < 0 ) {

					return false;

				}

			}

			return true;

		}

		containsPoint( point ) {

			const planes = this.planes;

			for ( let i = 0; i < 6; i ++ ) {

				if ( planes[ i ].distanceToPoint( point ) < 0 ) {

					return false;

				}

			}

			return true;

		}

		clone() {

			return new this.constructor().copy( this );

		}

	}

	function WebGLAnimation() {

		let context = null;
		let isAnimating = false;
		let animationLoop = null;
		let requestId = null;

		function onAnimationFrame( time, frame ) {

			animationLoop( time, frame );

			requestId = context.requestAnimationFrame( onAnimationFrame );

		}

		return {

			start: function () {

				if ( isAnimating === true ) return;
				if ( animationLoop === null ) return;

				requestId = context.requestAnimationFrame( onAnimationFrame );

				isAnimating = true;

			},

			stop: function () {

				context.cancelAnimationFrame( requestId );

				isAnimating = false;

			},

			setAnimationLoop: function ( callback ) {

				animationLoop = callback;

			},

			setContext: function ( value ) {

				context = value;

			}

		};

	}

	function WebGLAttributes( gl, capabilities ) {

		const isWebGL2 = capabilities.isWebGL2;

		const buffers = new WeakMap();

		function createBuffer( attribute, bufferType ) {

			const array = attribute.array;
			const usage = attribute.usage;

			const buffer = gl.createBuffer();

			gl.bindBuffer( bufferType, buffer );
			gl.bufferData( bufferType, array, usage );

			attribute.onUploadCallback();

			let type;

			if ( array instanceof Float32Array ) {

				type = gl.FLOAT;

			} else if ( array instanceof Uint16Array ) {

				if ( attribute.isFloat16BufferAttribute ) {

					if ( isWebGL2 ) {

						type = gl.HALF_FLOAT;

					} else {

						throw new Error( 'THREE.WebGLAttributes: Usage of Float16BufferAttribute requires WebGL2.' );

					}

				} else {

					type = gl.UNSIGNED_SHORT;

				}

			} else if ( array instanceof Int16Array ) {

				type = gl.SHORT;

			} else if ( array instanceof Uint32Array ) {

				type = gl.UNSIGNED_INT;

			} else if ( array instanceof Int32Array ) {

				type = gl.INT;

			} else if ( array instanceof Int8Array ) {

				type = gl.BYTE;

			} else if ( array instanceof Uint8Array ) {

				type = gl.UNSIGNED_BYTE;

			} else if ( array instanceof Uint8ClampedArray ) {

				type = gl.UNSIGNED_BYTE;

			} else {

				throw new Error( 'THREE.WebGLAttributes: Unsupported buffer data format: ' + array );

			}

			return {
				buffer: buffer,
				type: type,
				bytesPerElement: array.BYTES_PER_ELEMENT,
				version: attribute.version
			};

		}

		function updateBuffer( buffer, attribute, bufferType ) {

			const array = attribute.array;
			const updateRange = attribute.updateRange;

			gl.bindBuffer( bufferType, buffer );

			if ( updateRange.count === - 1 ) {

				// Not using update ranges

				gl.bufferSubData( bufferType, 0, array );

			} else {

				if ( isWebGL2 ) {

					gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
						array, updateRange.offset, updateRange.count );

				} else {

					gl.bufferSubData( bufferType, updateRange.offset * array.BYTES_PER_ELEMENT,
						array.subarray( updateRange.offset, updateRange.offset + updateRange.count ) );

				}

				updateRange.count = - 1; // reset range

			}

			attribute.onUploadCallback();

		}

		//

		function get( attribute ) {

			if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

			return buffers.get( attribute );

		}

		function remove( attribute ) {

			if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

			const data = buffers.get( attribute );

			if ( data ) {

				gl.deleteBuffer( data.buffer );

				buffers.delete( attribute );

			}

		}

		function update( attribute, bufferType ) {

			if ( attribute.isGLBufferAttribute ) {

				const cached = buffers.get( attribute );

				if ( ! cached || cached.version < attribute.version ) {

					buffers.set( attribute, {
						buffer: attribute.buffer,
						type: attribute.type,
						bytesPerElement: attribute.elementSize,
						version: attribute.version
					} );

				}

				return;

			}

			if ( attribute.isInterleavedBufferAttribute ) attribute = attribute.data;

			const data = buffers.get( attribute );

			if ( data === undefined ) {

				buffers.set( attribute, createBuffer( attribute, bufferType ) );

			} else if ( data.version < attribute.version ) {

				updateBuffer( data.buffer, attribute, bufferType );

				data.version = attribute.version;

			}

		}

		return {

			get: get,
			remove: remove,
			update: update

		};

	}

	class PlaneGeometry extends BufferGeometry {

		constructor( width = 1, height = 1, widthSegments = 1, heightSegments = 1 ) {

			super();

			this.type = 'PlaneGeometry';

			this.parameters = {
				width: width,
				height: height,
				widthSegments: widthSegments,
				heightSegments: heightSegments
			};

			const width_half = width / 2;
			const height_half = height / 2;

			const gridX = Math.floor( widthSegments );
			const gridY = Math.floor( heightSegments );

			const gridX1 = gridX + 1;
			const gridY1 = gridY + 1;

			const segment_width = width / gridX;
			const segment_height = height / gridY;

			//

			const indices = [];
			const vertices = [];
			const normals = [];
			const uvs = [];

			for ( let iy = 0; iy < gridY1; iy ++ ) {

				const y = iy * segment_height - height_half;

				for ( let ix = 0; ix < gridX1; ix ++ ) {

					const x = ix * segment_width - width_half;

					vertices.push( x, - y, 0 );

					normals.push( 0, 0, 1 );

					uvs.push( ix / gridX );
					uvs.push( 1 - ( iy / gridY ) );

				}

			}

			for ( let iy = 0; iy < gridY; iy ++ ) {

				for ( let ix = 0; ix < gridX; ix ++ ) {

					const a = ix + gridX1 * iy;
					const b = ix + gridX1 * ( iy + 1 );
					const c = ( ix + 1 ) + gridX1 * ( iy + 1 );
					const d = ( ix + 1 ) + gridX1 * iy;

					indices.push( a, b, d );
					indices.push( b, c, d );

				}

			}

			this.setIndex( indices );
			this.setAttribute( 'position', new Float32BufferAttribute( vertices, 3 ) );
			this.setAttribute( 'normal', new Float32BufferAttribute( normals, 3 ) );
			this.setAttribute( 'uv', new Float32BufferAttribute( uvs, 2 ) );

		}

		copy( source ) {

			super.copy( source );

			this.parameters = Object.assign( {}, source.parameters );

			return this;

		}

		static fromJSON( data ) {

			return new PlaneGeometry( data.width, data.height, data.widthSegments, data.heightSegments );

		}

	}

	var alphahash_fragment = "#ifdef USE_ALPHAHASH\n\tif ( diffuseColor.a < getAlphaHashThreshold( vPosition ) ) discard;\n#endif";

	var alphahash_pars_fragment = "#ifdef USE_ALPHAHASH\n\tconst float ALPHA_HASH_SCALE = 0.05;\n\tfloat hash2D( vec2 value ) {\n\t\treturn fract( 1.0e4 * sin( 17.0 * value.x + 0.1 * value.y ) * ( 0.1 + abs( sin( 13.0 * value.y + value.x ) ) ) );\n\t}\n\tfloat hash3D( vec3 value ) {\n\t\treturn hash2D( vec2( hash2D( value.xy ), value.z ) );\n\t}\n\tfloat getAlphaHashThreshold( vec3 position ) {\n\t\tfloat maxDeriv = max(\n\t\t\tlength( dFdx( position.xyz ) ),\n\t\t\tlength( dFdy( position.xyz ) )\n\t\t);\n\t\tfloat pixScale = 1.0 / ( ALPHA_HASH_SCALE * maxDeriv );\n\t\tvec2 pixScales = vec2(\n\t\t\texp2( floor( log2( pixScale ) ) ),\n\t\t\texp2( ceil( log2( pixScale ) ) )\n\t\t);\n\t\tvec2 alpha = vec2(\n\t\t\thash3D( floor( pixScales.x * position.xyz ) ),\n\t\t\thash3D( floor( pixScales.y * position.xyz ) )\n\t\t);\n\t\tfloat lerpFactor = fract( log2( pixScale ) );\n\t\tfloat x = ( 1.0 - lerpFactor ) * alpha.x + lerpFactor * alpha.y;\n\t\tfloat a = min( lerpFactor, 1.0 - lerpFactor );\n\t\tvec3 cases = vec3(\n\t\t\tx * x / ( 2.0 * a * ( 1.0 - a ) ),\n\t\t\t( x - 0.5 * a ) / ( 1.0 - a ),\n\t\t\t1.0 - ( ( 1.0 - x ) * ( 1.0 - x ) / ( 2.0 * a * ( 1.0 - a ) ) )\n\t\t);\n\t\tfloat threshold = ( x < ( 1.0 - a ) )\n\t\t\t? ( ( x < a ) ? cases.x : cases.y )\n\t\t\t: cases.z;\n\t\treturn clamp( threshold , 1.0e-6, 1.0 );\n\t}\n#endif";

	var alphamap_fragment = "#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, vAlphaMapUv ).g;\n#endif";

	var alphamap_pars_fragment = "#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

	var alphatest_fragment = "#ifdef USE_ALPHATEST\n\tif ( diffuseColor.a < alphaTest ) discard;\n#endif";

	var alphatest_pars_fragment = "#ifdef USE_ALPHATEST\n\tuniform float alphaTest;\n#endif";

	var aomap_fragment = "#ifdef USE_AOMAP\n\tfloat ambientOcclusion = ( texture2D( aoMap, vAoMapUv ).r - 1.0 ) * aoMapIntensity + 1.0;\n\treflectedLight.indirectDiffuse *= ambientOcclusion;\n\t#if defined( USE_ENVMAP ) && defined( STANDARD )\n\t\tfloat dotNV = saturate( dot( geometry.normal, geometry.viewDir ) );\n\t\treflectedLight.indirectSpecular *= computeSpecularOcclusion( dotNV, ambientOcclusion, material.roughness );\n\t#endif\n#endif";

	var aomap_pars_fragment = "#ifdef USE_AOMAP\n\tuniform sampler2D aoMap;\n\tuniform float aoMapIntensity;\n#endif";

	var begin_vertex = "vec3 transformed = vec3( position );\n#ifdef USE_ALPHAHASH\n\tvPosition = vec3( position );\n#endif";

	var beginnormal_vertex = "vec3 objectNormal = vec3( normal );\n#ifdef USE_TANGENT\n\tvec3 objectTangent = vec3( tangent.xyz );\n#endif";

	var bsdfs = "float G_BlinnPhong_Implicit( ) {\n\treturn 0.25;\n}\nfloat D_BlinnPhong( const in float shininess, const in float dotNH ) {\n\treturn RECIPROCAL_PI * ( shininess * 0.5 + 1.0 ) * pow( dotNH, shininess );\n}\nvec3 BRDF_BlinnPhong( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in vec3 specularColor, const in float shininess ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( specularColor, 1.0, dotVH );\n\tfloat G = G_BlinnPhong_Implicit( );\n\tfloat D = D_BlinnPhong( shininess, dotNH );\n\treturn F * ( G * D );\n} // validated";

	var iridescence_fragment = "#ifdef USE_IRIDESCENCE\n\tconst mat3 XYZ_TO_REC709 = mat3(\n\t\t 3.2404542, -0.9692660,  0.0556434,\n\t\t-1.5371385,  1.8760108, -0.2040259,\n\t\t-0.4985314,  0.0415560,  1.0572252\n\t);\n\tvec3 Fresnel0ToIor( vec3 fresnel0 ) {\n\t\tvec3 sqrtF0 = sqrt( fresnel0 );\n\t\treturn ( vec3( 1.0 ) + sqrtF0 ) / ( vec3( 1.0 ) - sqrtF0 );\n\t}\n\tvec3 IorToFresnel0( vec3 transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - vec3( incidentIor ) ) / ( transmittedIor + vec3( incidentIor ) ) );\n\t}\n\tfloat IorToFresnel0( float transmittedIor, float incidentIor ) {\n\t\treturn pow2( ( transmittedIor - incidentIor ) / ( transmittedIor + incidentIor ));\n\t}\n\tvec3 evalSensitivity( float OPD, vec3 shift ) {\n\t\tfloat phase = 2.0 * PI * OPD * 1.0e-9;\n\t\tvec3 val = vec3( 5.4856e-13, 4.4201e-13, 5.2481e-13 );\n\t\tvec3 pos = vec3( 1.6810e+06, 1.7953e+06, 2.2084e+06 );\n\t\tvec3 var = vec3( 4.3278e+09, 9.3046e+09, 6.6121e+09 );\n\t\tvec3 xyz = val * sqrt( 2.0 * PI * var ) * cos( pos * phase + shift ) * exp( - pow2( phase ) * var );\n\t\txyz.x += 9.7470e-14 * sqrt( 2.0 * PI * 4.5282e+09 ) * cos( 2.2399e+06 * phase + shift[ 0 ] ) * exp( - 4.5282e+09 * pow2( phase ) );\n\t\txyz /= 1.0685e-7;\n\t\tvec3 rgb = XYZ_TO_REC709 * xyz;\n\t\treturn rgb;\n\t}\n\tvec3 evalIridescence( float outsideIOR, float eta2, float cosTheta1, float thinFilmThickness, vec3 baseF0 ) {\n\t\tvec3 I;\n\t\tfloat iridescenceIOR = mix( outsideIOR, eta2, smoothstep( 0.0, 0.03, thinFilmThickness ) );\n\t\tfloat sinTheta2Sq = pow2( outsideIOR / iridescenceIOR ) * ( 1.0 - pow2( cosTheta1 ) );\n\t\tfloat cosTheta2Sq = 1.0 - sinTheta2Sq;\n\t\tif ( cosTheta2Sq < 0.0 ) {\n\t\t\treturn vec3( 1.0 );\n\t\t}\n\t\tfloat cosTheta2 = sqrt( cosTheta2Sq );\n\t\tfloat R0 = IorToFresnel0( iridescenceIOR, outsideIOR );\n\t\tfloat R12 = F_Schlick( R0, 1.0, cosTheta1 );\n\t\tfloat T121 = 1.0 - R12;\n\t\tfloat phi12 = 0.0;\n\t\tif ( iridescenceIOR < outsideIOR ) phi12 = PI;\n\t\tfloat phi21 = PI - phi12;\n\t\tvec3 baseIOR = Fresnel0ToIor( clamp( baseF0, 0.0, 0.9999 ) );\t\tvec3 R1 = IorToFresnel0( baseIOR, iridescenceIOR );\n\t\tvec3 R23 = F_Schlick( R1, 1.0, cosTheta2 );\n\t\tvec3 phi23 = vec3( 0.0 );\n\t\tif ( baseIOR[ 0 ] < iridescenceIOR ) phi23[ 0 ] = PI;\n\t\tif ( baseIOR[ 1 ] < iridescenceIOR ) phi23[ 1 ] = PI;\n\t\tif ( baseIOR[ 2 ] < iridescenceIOR ) phi23[ 2 ] = PI;\n\t\tfloat OPD = 2.0 * iridescenceIOR * thinFilmThickness * cosTheta2;\n\t\tvec3 phi = vec3( phi21 ) + phi23;\n\t\tvec3 R123 = clamp( R12 * R23, 1e-5, 0.9999 );\n\t\tvec3 r123 = sqrt( R123 );\n\t\tvec3 Rs = pow2( T121 ) * R23 / ( vec3( 1.0 ) - R123 );\n\t\tvec3 C0 = R12 + Rs;\n\t\tI = C0;\n\t\tvec3 Cm = Rs - T121;\n\t\tfor ( int m = 1; m <= 2; ++ m ) {\n\t\t\tCm *= r123;\n\t\t\tvec3 Sm = 2.0 * evalSensitivity( float( m ) * OPD, float( m ) * phi );\n\t\t\tI += Cm * Sm;\n\t\t}\n\t\treturn max( I, vec3( 0.0 ) );\n\t}\n#endif";

	var bumpmap_pars_fragment = "#ifdef USE_BUMPMAP\n\tuniform sampler2D bumpMap;\n\tuniform float bumpScale;\n\tvec2 dHdxy_fwd() {\n\t\tvec2 dSTdx = dFdx( vBumpMapUv );\n\t\tvec2 dSTdy = dFdy( vBumpMapUv );\n\t\tfloat Hll = bumpScale * texture2D( bumpMap, vBumpMapUv ).x;\n\t\tfloat dBx = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdx ).x - Hll;\n\t\tfloat dBy = bumpScale * texture2D( bumpMap, vBumpMapUv + dSTdy ).x - Hll;\n\t\treturn vec2( dBx, dBy );\n\t}\n\tvec3 perturbNormalArb( vec3 surf_pos, vec3 surf_norm, vec2 dHdxy, float faceDirection ) {\n\t\tvec3 vSigmaX = dFdx( surf_pos.xyz );\n\t\tvec3 vSigmaY = dFdy( surf_pos.xyz );\n\t\tvec3 vN = surf_norm;\n\t\tvec3 R1 = cross( vSigmaY, vN );\n\t\tvec3 R2 = cross( vN, vSigmaX );\n\t\tfloat fDet = dot( vSigmaX, R1 ) * faceDirection;\n\t\tvec3 vGrad = sign( fDet ) * ( dHdxy.x * R1 + dHdxy.y * R2 );\n\t\treturn normalize( abs( fDet ) * surf_norm - vGrad );\n\t}\n#endif";

	var clipping_planes_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvec4 plane;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < UNION_CLIPPING_PLANES; i ++ ) {\n\t\tplane = clippingPlanes[ i ];\n\t\tif ( dot( vClipPosition, plane.xyz ) > plane.w ) discard;\n\t}\n\t#pragma unroll_loop_end\n\t#if UNION_CLIPPING_PLANES < NUM_CLIPPING_PLANES\n\t\tbool clipped = true;\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = UNION_CLIPPING_PLANES; i < NUM_CLIPPING_PLANES; i ++ ) {\n\t\t\tplane = clippingPlanes[ i ];\n\t\t\tclipped = ( dot( vClipPosition, plane.xyz ) > plane.w ) && clipped;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t\tif ( clipped ) discard;\n\t#endif\n#endif";

	var clipping_planes_pars_fragment = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n\tuniform vec4 clippingPlanes[ NUM_CLIPPING_PLANES ];\n#endif";

	var clipping_planes_pars_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvarying vec3 vClipPosition;\n#endif";

	var clipping_planes_vertex = "#if NUM_CLIPPING_PLANES > 0\n\tvClipPosition = - mvPosition.xyz;\n#endif";

	var color_fragment = "#if defined( USE_COLOR_ALPHA )\n\tdiffuseColor *= vColor;\n#elif defined( USE_COLOR )\n\tdiffuseColor.rgb *= vColor;\n#endif";

	var color_pars_fragment = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR )\n\tvarying vec3 vColor;\n#endif";

	var color_pars_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvarying vec4 vColor;\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvarying vec3 vColor;\n#endif";

	var color_vertex = "#if defined( USE_COLOR_ALPHA )\n\tvColor = vec4( 1.0 );\n#elif defined( USE_COLOR ) || defined( USE_INSTANCING_COLOR )\n\tvColor = vec3( 1.0 );\n#endif\n#ifdef USE_COLOR\n\tvColor *= color;\n#endif\n#ifdef USE_INSTANCING_COLOR\n\tvColor.xyz *= instanceColor.xyz;\n#endif";

	var common = "#define PI 3.141592653589793\n#define PI2 6.283185307179586\n#define PI_HALF 1.5707963267948966\n#define RECIPROCAL_PI 0.3183098861837907\n#define RECIPROCAL_PI2 0.15915494309189535\n#define EPSILON 1e-6\n#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\n#define whiteComplement( a ) ( 1.0 - saturate( a ) )\nfloat pow2( const in float x ) { return x*x; }\nvec3 pow2( const in vec3 x ) { return x*x; }\nfloat pow3( const in float x ) { return x*x*x; }\nfloat pow4( const in float x ) { float x2 = x*x; return x2*x2; }\nfloat max3( const in vec3 v ) { return max( max( v.x, v.y ), v.z ); }\nfloat average( const in vec3 v ) { return dot( v, vec3( 0.3333333 ) ); }\nhighp float rand( const in vec2 uv ) {\n\tconst highp float a = 12.9898, b = 78.233, c = 43758.5453;\n\thighp float dt = dot( uv.xy, vec2( a,b ) ), sn = mod( dt, PI );\n\treturn fract( sin( sn ) * c );\n}\n#ifdef HIGH_PRECISION\n\tfloat precisionSafeLength( vec3 v ) { return length( v ); }\n#else\n\tfloat precisionSafeLength( vec3 v ) {\n\t\tfloat maxComponent = max3( abs( v ) );\n\t\treturn length( v / maxComponent ) * maxComponent;\n\t}\n#endif\nstruct IncidentLight {\n\tvec3 color;\n\tvec3 direction;\n\tbool visible;\n};\nstruct ReflectedLight {\n\tvec3 directDiffuse;\n\tvec3 directSpecular;\n\tvec3 indirectDiffuse;\n\tvec3 indirectSpecular;\n};\nstruct GeometricContext {\n\tvec3 position;\n\tvec3 normal;\n\tvec3 viewDir;\n#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal;\n#endif\n};\n#ifdef USE_ALPHAHASH\n\tvarying vec3 vPosition;\n#endif\nvec3 transformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( matrix * vec4( dir, 0.0 ) ).xyz );\n}\nvec3 inverseTransformDirection( in vec3 dir, in mat4 matrix ) {\n\treturn normalize( ( vec4( dir, 0.0 ) * matrix ).xyz );\n}\nmat3 transposeMat3( const in mat3 m ) {\n\tmat3 tmp;\n\ttmp[ 0 ] = vec3( m[ 0 ].x, m[ 1 ].x, m[ 2 ].x );\n\ttmp[ 1 ] = vec3( m[ 0 ].y, m[ 1 ].y, m[ 2 ].y );\n\ttmp[ 2 ] = vec3( m[ 0 ].z, m[ 1 ].z, m[ 2 ].z );\n\treturn tmp;\n}\nfloat luminance( const in vec3 rgb ) {\n\tconst vec3 weights = vec3( 0.2126729, 0.7151522, 0.0721750 );\n\treturn dot( weights, rgb );\n}\nbool isPerspectiveMatrix( mat4 m ) {\n\treturn m[ 2 ][ 3 ] == - 1.0;\n}\nvec2 equirectUv( in vec3 dir ) {\n\tfloat u = atan( dir.z, dir.x ) * RECIPROCAL_PI2 + 0.5;\n\tfloat v = asin( clamp( dir.y, - 1.0, 1.0 ) ) * RECIPROCAL_PI + 0.5;\n\treturn vec2( u, v );\n}\nvec3 BRDF_Lambert( const in vec3 diffuseColor ) {\n\treturn RECIPROCAL_PI * diffuseColor;\n}\nvec3 F_Schlick( const in vec3 f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n}\nfloat F_Schlick( const in float f0, const in float f90, const in float dotVH ) {\n\tfloat fresnel = exp2( ( - 5.55473 * dotVH - 6.98316 ) * dotVH );\n\treturn f0 * ( 1.0 - fresnel ) + ( f90 * fresnel );\n} // validated";

	var cube_uv_reflection_fragment = "#ifdef ENVMAP_TYPE_CUBE_UV\n\t#define cubeUV_minMipLevel 4.0\n\t#define cubeUV_minTileSize 16.0\n\tfloat getFace( vec3 direction ) {\n\t\tvec3 absDirection = abs( direction );\n\t\tfloat face = - 1.0;\n\t\tif ( absDirection.x > absDirection.z ) {\n\t\t\tif ( absDirection.x > absDirection.y )\n\t\t\t\tface = direction.x > 0.0 ? 0.0 : 3.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t} else {\n\t\t\tif ( absDirection.z > absDirection.y )\n\t\t\t\tface = direction.z > 0.0 ? 2.0 : 5.0;\n\t\t\telse\n\t\t\t\tface = direction.y > 0.0 ? 1.0 : 4.0;\n\t\t}\n\t\treturn face;\n\t}\n\tvec2 getUV( vec3 direction, float face ) {\n\t\tvec2 uv;\n\t\tif ( face == 0.0 ) {\n\t\t\tuv = vec2( direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 1.0 ) {\n\t\t\tuv = vec2( - direction.x, - direction.z ) / abs( direction.y );\n\t\t} else if ( face == 2.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.y ) / abs( direction.z );\n\t\t} else if ( face == 3.0 ) {\n\t\t\tuv = vec2( - direction.z, direction.y ) / abs( direction.x );\n\t\t} else if ( face == 4.0 ) {\n\t\t\tuv = vec2( - direction.x, direction.z ) / abs( direction.y );\n\t\t} else {\n\t\t\tuv = vec2( direction.x, direction.y ) / abs( direction.z );\n\t\t}\n\t\treturn 0.5 * ( uv + 1.0 );\n\t}\n\tvec3 bilinearCubeUV( sampler2D envMap, vec3 direction, float mipInt ) {\n\t\tfloat face = getFace( direction );\n\t\tfloat filterInt = max( cubeUV_minMipLevel - mipInt, 0.0 );\n\t\tmipInt = max( mipInt, cubeUV_minMipLevel );\n\t\tfloat faceSize = exp2( mipInt );\n\t\thighp vec2 uv = getUV( direction, face ) * ( faceSize - 2.0 ) + 1.0;\n\t\tif ( face > 2.0 ) {\n\t\t\tuv.y += faceSize;\n\t\t\tface -= 3.0;\n\t\t}\n\t\tuv.x += face * faceSize;\n\t\tuv.x += filterInt * 3.0 * cubeUV_minTileSize;\n\t\tuv.y += 4.0 * ( exp2( CUBEUV_MAX_MIP ) - faceSize );\n\t\tuv.x *= CUBEUV_TEXEL_WIDTH;\n\t\tuv.y *= CUBEUV_TEXEL_HEIGHT;\n\t\t#ifdef texture2DGradEXT\n\t\t\treturn texture2DGradEXT( envMap, uv, vec2( 0.0 ), vec2( 0.0 ) ).rgb;\n\t\t#else\n\t\t\treturn texture2D( envMap, uv ).rgb;\n\t\t#endif\n\t}\n\t#define cubeUV_r0 1.0\n\t#define cubeUV_v0 0.339\n\t#define cubeUV_m0 - 2.0\n\t#define cubeUV_r1 0.8\n\t#define cubeUV_v1 0.276\n\t#define cubeUV_m1 - 1.0\n\t#define cubeUV_r4 0.4\n\t#define cubeUV_v4 0.046\n\t#define cubeUV_m4 2.0\n\t#define cubeUV_r5 0.305\n\t#define cubeUV_v5 0.016\n\t#define cubeUV_m5 3.0\n\t#define cubeUV_r6 0.21\n\t#define cubeUV_v6 0.0038\n\t#define cubeUV_m6 4.0\n\tfloat roughnessToMip( float roughness ) {\n\t\tfloat mip = 0.0;\n\t\tif ( roughness >= cubeUV_r1 ) {\n\t\t\tmip = ( cubeUV_r0 - roughness ) * ( cubeUV_m1 - cubeUV_m0 ) / ( cubeUV_r0 - cubeUV_r1 ) + cubeUV_m0;\n\t\t} else if ( roughness >= cubeUV_r4 ) {\n\t\t\tmip = ( cubeUV_r1 - roughness ) * ( cubeUV_m4 - cubeUV_m1 ) / ( cubeUV_r1 - cubeUV_r4 ) + cubeUV_m1;\n\t\t} else if ( roughness >= cubeUV_r5 ) {\n\t\t\tmip = ( cubeUV_r4 - roughness ) * ( cubeUV_m5 - cubeUV_m4 ) / ( cubeUV_r4 - cubeUV_r5 ) + cubeUV_m4;\n\t\t} else if ( roughness >= cubeUV_r6 ) {\n\t\t\tmip = ( cubeUV_r5 - roughness ) * ( cubeUV_m6 - cubeUV_m5 ) / ( cubeUV_r5 - cubeUV_r6 ) + cubeUV_m5;\n\t\t} else {\n\t\t\tmip = - 2.0 * log2( 1.16 * roughness );\t\t}\n\t\treturn mip;\n\t}\n\tvec4 textureCubeUV( sampler2D envMap, vec3 sampleDir, float roughness ) {\n\t\tfloat mip = clamp( roughnessToMip( roughness ), cubeUV_m0, CUBEUV_MAX_MIP );\n\t\tfloat mipF = fract( mip );\n\t\tfloat mipInt = floor( mip );\n\t\tvec3 color0 = bilinearCubeUV( envMap, sampleDir, mipInt );\n\t\tif ( mipF == 0.0 ) {\n\t\t\treturn vec4( color0, 1.0 );\n\t\t} else {\n\t\t\tvec3 color1 = bilinearCubeUV( envMap, sampleDir, mipInt + 1.0 );\n\t\t\treturn vec4( mix( color0, color1, mipF ), 1.0 );\n\t\t}\n\t}\n#endif";

	var defaultnormal_vertex = "vec3 transformedNormal = objectNormal;\n#ifdef USE_INSTANCING\n\tmat3 m = mat3( instanceMatrix );\n\ttransformedNormal /= vec3( dot( m[ 0 ], m[ 0 ] ), dot( m[ 1 ], m[ 1 ] ), dot( m[ 2 ], m[ 2 ] ) );\n\ttransformedNormal = m * transformedNormal;\n#endif\ntransformedNormal = normalMatrix * transformedNormal;\n#ifdef FLIP_SIDED\n\ttransformedNormal = - transformedNormal;\n#endif\n#ifdef USE_TANGENT\n\tvec3 transformedTangent = ( modelViewMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#ifdef FLIP_SIDED\n\t\ttransformedTangent = - transformedTangent;\n\t#endif\n#endif";

	var displacementmap_pars_vertex = "#ifdef USE_DISPLACEMENTMAP\n\tuniform sampler2D displacementMap;\n\tuniform float displacementScale;\n\tuniform float displacementBias;\n#endif";

	var displacementmap_vertex = "#ifdef USE_DISPLACEMENTMAP\n\ttransformed += normalize( objectNormal ) * ( texture2D( displacementMap, vDisplacementMapUv ).x * displacementScale + displacementBias );\n#endif";

	var emissivemap_fragment = "#ifdef USE_EMISSIVEMAP\n\tvec4 emissiveColor = texture2D( emissiveMap, vEmissiveMapUv );\n\ttotalEmissiveRadiance *= emissiveColor.rgb;\n#endif";

	var emissivemap_pars_fragment = "#ifdef USE_EMISSIVEMAP\n\tuniform sampler2D emissiveMap;\n#endif";

	var colorspace_fragment = "gl_FragColor = linearToOutputTexel( gl_FragColor );";

	var colorspace_pars_fragment = "vec4 LinearToLinear( in vec4 value ) {\n\treturn value;\n}\nvec4 LinearTosRGB( in vec4 value ) {\n\treturn vec4( mix( pow( value.rgb, vec3( 0.41666 ) ) * 1.055 - vec3( 0.055 ), value.rgb * 12.92, vec3( lessThanEqual( value.rgb, vec3( 0.0031308 ) ) ) ), value.a );\n}";

	var envmap_fragment = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvec3 cameraToFrag;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToFrag = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToFrag = normalize( vWorldPosition - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvec3 reflectVec = reflect( cameraToFrag, worldNormal );\n\t\t#else\n\t\t\tvec3 reflectVec = refract( cameraToFrag, worldNormal, refractionRatio );\n\t\t#endif\n\t#else\n\t\tvec3 reflectVec = vReflect;\n\t#endif\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 envColor = textureCube( envMap, vec3( flipEnvMap * reflectVec.x, reflectVec.yz ) );\n\t#else\n\t\tvec4 envColor = vec4( 0.0 );\n\t#endif\n\t#ifdef ENVMAP_BLENDING_MULTIPLY\n\t\toutgoingLight = mix( outgoingLight, outgoingLight * envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_MIX )\n\t\toutgoingLight = mix( outgoingLight, envColor.xyz, specularStrength * reflectivity );\n\t#elif defined( ENVMAP_BLENDING_ADD )\n\t\toutgoingLight += envColor.xyz * specularStrength * reflectivity;\n\t#endif\n#endif";

	var envmap_common_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float envMapIntensity;\n\tuniform float flipEnvMap;\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tuniform samplerCube envMap;\n\t#else\n\t\tuniform sampler2D envMap;\n\t#endif\n\t\n#endif";

	var envmap_pars_fragment = "#ifdef USE_ENVMAP\n\tuniform float reflectivity;\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\tvarying vec3 vWorldPosition;\n\t\tuniform float refractionRatio;\n\t#else\n\t\tvarying vec3 vReflect;\n\t#endif\n#endif";

	var envmap_pars_vertex = "#ifdef USE_ENVMAP\n\t#if defined( USE_BUMPMAP ) || defined( USE_NORMALMAP ) || defined( PHONG ) || defined( LAMBERT )\n\t\t#define ENV_WORLDPOS\n\t#endif\n\t#ifdef ENV_WORLDPOS\n\t\t\n\t\tvarying vec3 vWorldPosition;\n\t#else\n\t\tvarying vec3 vReflect;\n\t\tuniform float refractionRatio;\n\t#endif\n#endif";

	var envmap_vertex = "#ifdef USE_ENVMAP\n\t#ifdef ENV_WORLDPOS\n\t\tvWorldPosition = worldPosition.xyz;\n\t#else\n\t\tvec3 cameraToVertex;\n\t\tif ( isOrthographic ) {\n\t\t\tcameraToVertex = normalize( vec3( - viewMatrix[ 0 ][ 2 ], - viewMatrix[ 1 ][ 2 ], - viewMatrix[ 2 ][ 2 ] ) );\n\t\t} else {\n\t\t\tcameraToVertex = normalize( worldPosition.xyz - cameraPosition );\n\t\t}\n\t\tvec3 worldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\t\t#ifdef ENVMAP_MODE_REFLECTION\n\t\t\tvReflect = reflect( cameraToVertex, worldNormal );\n\t\t#else\n\t\t\tvReflect = refract( cameraToVertex, worldNormal, refractionRatio );\n\t\t#endif\n\t#endif\n#endif";

	var fog_vertex = "#ifdef USE_FOG\n\tvFogDepth = - mvPosition.z;\n#endif";

	var fog_pars_vertex = "#ifdef USE_FOG\n\tvarying float vFogDepth;\n#endif";

	var fog_fragment = "#ifdef USE_FOG\n\t#ifdef FOG_EXP2\n\t\tfloat fogFactor = 1.0 - exp( - fogDensity * fogDensity * vFogDepth * vFogDepth );\n\t#else\n\t\tfloat fogFactor = smoothstep( fogNear, fogFar, vFogDepth );\n\t#endif\n\tgl_FragColor.rgb = mix( gl_FragColor.rgb, fogColor, fogFactor );\n#endif";

	var fog_pars_fragment = "#ifdef USE_FOG\n\tuniform vec3 fogColor;\n\tvarying float vFogDepth;\n\t#ifdef FOG_EXP2\n\t\tuniform float fogDensity;\n\t#else\n\t\tuniform float fogNear;\n\t\tuniform float fogFar;\n\t#endif\n#endif";

	var gradientmap_pars_fragment = "#ifdef USE_GRADIENTMAP\n\tuniform sampler2D gradientMap;\n#endif\nvec3 getGradientIrradiance( vec3 normal, vec3 lightDirection ) {\n\tfloat dotNL = dot( normal, lightDirection );\n\tvec2 coord = vec2( dotNL * 0.5 + 0.5, 0.0 );\n\t#ifdef USE_GRADIENTMAP\n\t\treturn vec3( texture2D( gradientMap, coord ).r );\n\t#else\n\t\tvec2 fw = fwidth( coord ) * 0.5;\n\t\treturn mix( vec3( 0.7 ), vec3( 1.0 ), smoothstep( 0.7 - fw.x, 0.7 + fw.x, coord.x ) );\n\t#endif\n}";

	var lightmap_fragment = "#ifdef USE_LIGHTMAP\n\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\treflectedLight.indirectDiffuse += lightMapIrradiance;\n#endif";

	var lightmap_pars_fragment = "#ifdef USE_LIGHTMAP\n\tuniform sampler2D lightMap;\n\tuniform float lightMapIntensity;\n#endif";

	var lights_lambert_fragment = "LambertMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularStrength = specularStrength;";

	var lights_lambert_pars_fragment = "varying vec3 vViewPosition;\nstruct LambertMaterial {\n\tvec3 diffuseColor;\n\tfloat specularStrength;\n};\nvoid RE_Direct_Lambert( const in IncidentLight directLight, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Lambert( const in vec3 irradiance, const in GeometricContext geometry, const in LambertMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Lambert\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Lambert";

	var lights_pars_begin = "uniform bool receiveShadow;\nuniform vec3 ambientLightColor;\nuniform vec3 lightProbe[ 9 ];\nvec3 shGetIrradianceAt( in vec3 normal, in vec3 shCoefficients[ 9 ] ) {\n\tfloat x = normal.x, y = normal.y, z = normal.z;\n\tvec3 result = shCoefficients[ 0 ] * 0.886227;\n\tresult += shCoefficients[ 1 ] * 2.0 * 0.511664 * y;\n\tresult += shCoefficients[ 2 ] * 2.0 * 0.511664 * z;\n\tresult += shCoefficients[ 3 ] * 2.0 * 0.511664 * x;\n\tresult += shCoefficients[ 4 ] * 2.0 * 0.429043 * x * y;\n\tresult += shCoefficients[ 5 ] * 2.0 * 0.429043 * y * z;\n\tresult += shCoefficients[ 6 ] * ( 0.743125 * z * z - 0.247708 );\n\tresult += shCoefficients[ 7 ] * 2.0 * 0.429043 * x * z;\n\tresult += shCoefficients[ 8 ] * 0.429043 * ( x * x - y * y );\n\treturn result;\n}\nvec3 getLightProbeIrradiance( const in vec3 lightProbe[ 9 ], const in vec3 normal ) {\n\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\tvec3 irradiance = shGetIrradianceAt( worldNormal, lightProbe );\n\treturn irradiance;\n}\nvec3 getAmbientLightIrradiance( const in vec3 ambientLightColor ) {\n\tvec3 irradiance = ambientLightColor;\n\treturn irradiance;\n}\nfloat getDistanceAttenuation( const in float lightDistance, const in float cutoffDistance, const in float decayExponent ) {\n\t#if defined ( LEGACY_LIGHTS )\n\t\tif ( cutoffDistance > 0.0 && decayExponent > 0.0 ) {\n\t\t\treturn pow( saturate( - lightDistance / cutoffDistance + 1.0 ), decayExponent );\n\t\t}\n\t\treturn 1.0;\n\t#else\n\t\tfloat distanceFalloff = 1.0 / max( pow( lightDistance, decayExponent ), 0.01 );\n\t\tif ( cutoffDistance > 0.0 ) {\n\t\t\tdistanceFalloff *= pow2( saturate( 1.0 - pow4( lightDistance / cutoffDistance ) ) );\n\t\t}\n\t\treturn distanceFalloff;\n\t#endif\n}\nfloat getSpotAttenuation( const in float coneCosine, const in float penumbraCosine, const in float angleCosine ) {\n\treturn smoothstep( coneCosine, penumbraCosine, angleCosine );\n}\n#if NUM_DIR_LIGHTS > 0\n\tstruct DirectionalLight {\n\t\tvec3 direction;\n\t\tvec3 color;\n\t};\n\tuniform DirectionalLight directionalLights[ NUM_DIR_LIGHTS ];\n\tvoid getDirectionalLightInfo( const in DirectionalLight directionalLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tlight.color = directionalLight.color;\n\t\tlight.direction = directionalLight.direction;\n\t\tlight.visible = true;\n\t}\n#endif\n#if NUM_POINT_LIGHTS > 0\n\tstruct PointLight {\n\t\tvec3 position;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t};\n\tuniform PointLight pointLights[ NUM_POINT_LIGHTS ];\n\tvoid getPointLightInfo( const in PointLight pointLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = pointLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat lightDistance = length( lVector );\n\t\tlight.color = pointLight.color;\n\t\tlight.color *= getDistanceAttenuation( lightDistance, pointLight.distance, pointLight.decay );\n\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t}\n#endif\n#if NUM_SPOT_LIGHTS > 0\n\tstruct SpotLight {\n\t\tvec3 position;\n\t\tvec3 direction;\n\t\tvec3 color;\n\t\tfloat distance;\n\t\tfloat decay;\n\t\tfloat coneCos;\n\t\tfloat penumbraCos;\n\t};\n\tuniform SpotLight spotLights[ NUM_SPOT_LIGHTS ];\n\tvoid getSpotLightInfo( const in SpotLight spotLight, const in GeometricContext geometry, out IncidentLight light ) {\n\t\tvec3 lVector = spotLight.position - geometry.position;\n\t\tlight.direction = normalize( lVector );\n\t\tfloat angleCos = dot( light.direction, spotLight.direction );\n\t\tfloat spotAttenuation = getSpotAttenuation( spotLight.coneCos, spotLight.penumbraCos, angleCos );\n\t\tif ( spotAttenuation > 0.0 ) {\n\t\t\tfloat lightDistance = length( lVector );\n\t\t\tlight.color = spotLight.color * spotAttenuation;\n\t\t\tlight.color *= getDistanceAttenuation( lightDistance, spotLight.distance, spotLight.decay );\n\t\t\tlight.visible = ( light.color != vec3( 0.0 ) );\n\t\t} else {\n\t\t\tlight.color = vec3( 0.0 );\n\t\t\tlight.visible = false;\n\t\t}\n\t}\n#endif\n#if NUM_RECT_AREA_LIGHTS > 0\n\tstruct RectAreaLight {\n\t\tvec3 color;\n\t\tvec3 position;\n\t\tvec3 halfWidth;\n\t\tvec3 halfHeight;\n\t};\n\tuniform sampler2D ltc_1;\tuniform sampler2D ltc_2;\n\tuniform RectAreaLight rectAreaLights[ NUM_RECT_AREA_LIGHTS ];\n#endif\n#if NUM_HEMI_LIGHTS > 0\n\tstruct HemisphereLight {\n\t\tvec3 direction;\n\t\tvec3 skyColor;\n\t\tvec3 groundColor;\n\t};\n\tuniform HemisphereLight hemisphereLights[ NUM_HEMI_LIGHTS ];\n\tvec3 getHemisphereLightIrradiance( const in HemisphereLight hemiLight, const in vec3 normal ) {\n\t\tfloat dotNL = dot( normal, hemiLight.direction );\n\t\tfloat hemiDiffuseWeight = 0.5 * dotNL + 0.5;\n\t\tvec3 irradiance = mix( hemiLight.groundColor, hemiLight.skyColor, hemiDiffuseWeight );\n\t\treturn irradiance;\n\t}\n#endif";

	var envmap_physical_pars_fragment = "#ifdef USE_ENVMAP\n\tvec3 getIBLIrradiance( const in vec3 normal ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 worldNormal = inverseTransformDirection( normal, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, worldNormal, 1.0 );\n\t\t\treturn PI * envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\tvec3 getIBLRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness ) {\n\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\tvec3 reflectVec = reflect( - viewDir, normal );\n\t\t\treflectVec = normalize( mix( reflectVec, normal, roughness * roughness) );\n\t\t\treflectVec = inverseTransformDirection( reflectVec, viewMatrix );\n\t\t\tvec4 envMapColor = textureCubeUV( envMap, reflectVec, roughness );\n\t\t\treturn envMapColor.rgb * envMapIntensity;\n\t\t#else\n\t\t\treturn vec3( 0.0 );\n\t\t#endif\n\t}\n\t#ifdef USE_ANISOTROPY\n\t\tvec3 getIBLAnisotropyRadiance( const in vec3 viewDir, const in vec3 normal, const in float roughness, const in vec3 bitangent, const in float anisotropy ) {\n\t\t\t#ifdef ENVMAP_TYPE_CUBE_UV\n\t\t\t\tvec3 bentNormal = cross( bitangent, viewDir );\n\t\t\t\tbentNormal = normalize( cross( bentNormal, bitangent ) );\n\t\t\t\tbentNormal = normalize( mix( bentNormal, normal, pow2( pow2( 1.0 - anisotropy * ( 1.0 - roughness ) ) ) ) );\n\t\t\t\treturn getIBLRadiance( viewDir, bentNormal, roughness );\n\t\t\t#else\n\t\t\t\treturn vec3( 0.0 );\n\t\t\t#endif\n\t\t}\n\t#endif\n#endif";

	var lights_toon_fragment = "ToonMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;";

	var lights_toon_pars_fragment = "varying vec3 vViewPosition;\nstruct ToonMaterial {\n\tvec3 diffuseColor;\n};\nvoid RE_Direct_Toon( const in IncidentLight directLight, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\tvec3 irradiance = getGradientIrradiance( geometry.normal, directLight.direction ) * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Toon( const in vec3 irradiance, const in GeometricContext geometry, const in ToonMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_Toon\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Toon";

	var lights_phong_fragment = "BlinnPhongMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb;\nmaterial.specularColor = specular;\nmaterial.specularShininess = shininess;\nmaterial.specularStrength = specularStrength;";

	var lights_phong_pars_fragment = "varying vec3 vViewPosition;\nstruct BlinnPhongMaterial {\n\tvec3 diffuseColor;\n\tvec3 specularColor;\n\tfloat specularShininess;\n\tfloat specularStrength;\n};\nvoid RE_Direct_BlinnPhong( const in IncidentLight directLight, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n\treflectedLight.directSpecular += irradiance * BRDF_BlinnPhong( directLight.direction, geometry.viewDir, geometry.normal, material.specularColor, material.specularShininess ) * material.specularStrength;\n}\nvoid RE_IndirectDiffuse_BlinnPhong( const in vec3 irradiance, const in GeometricContext geometry, const in BlinnPhongMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\n#define RE_Direct\t\t\t\tRE_Direct_BlinnPhong\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_BlinnPhong";

	var lights_physical_fragment = "PhysicalMaterial material;\nmaterial.diffuseColor = diffuseColor.rgb * ( 1.0 - metalnessFactor );\nvec3 dxy = max( abs( dFdx( geometryNormal ) ), abs( dFdy( geometryNormal ) ) );\nfloat geometryRoughness = max( max( dxy.x, dxy.y ), dxy.z );\nmaterial.roughness = max( roughnessFactor, 0.0525 );material.roughness += geometryRoughness;\nmaterial.roughness = min( material.roughness, 1.0 );\n#ifdef IOR\n\tmaterial.ior = ior;\n\t#ifdef USE_SPECULAR\n\t\tfloat specularIntensityFactor = specularIntensity;\n\t\tvec3 specularColorFactor = specularColor;\n\t\t#ifdef USE_SPECULAR_COLORMAP\n\t\t\tspecularColorFactor *= texture2D( specularColorMap, vSpecularColorMapUv ).rgb;\n\t\t#endif\n\t\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\t\tspecularIntensityFactor *= texture2D( specularIntensityMap, vSpecularIntensityMapUv ).a;\n\t\t#endif\n\t\tmaterial.specularF90 = mix( specularIntensityFactor, 1.0, metalnessFactor );\n\t#else\n\t\tfloat specularIntensityFactor = 1.0;\n\t\tvec3 specularColorFactor = vec3( 1.0 );\n\t\tmaterial.specularF90 = 1.0;\n\t#endif\n\tmaterial.specularColor = mix( min( pow2( ( material.ior - 1.0 ) / ( material.ior + 1.0 ) ) * specularColorFactor, vec3( 1.0 ) ) * specularIntensityFactor, diffuseColor.rgb, metalnessFactor );\n#else\n\tmaterial.specularColor = mix( vec3( 0.04 ), diffuseColor.rgb, metalnessFactor );\n\tmaterial.specularF90 = 1.0;\n#endif\n#ifdef USE_CLEARCOAT\n\tmaterial.clearcoat = clearcoat;\n\tmaterial.clearcoatRoughness = clearcoatRoughness;\n\tmaterial.clearcoatF0 = vec3( 0.04 );\n\tmaterial.clearcoatF90 = 1.0;\n\t#ifdef USE_CLEARCOATMAP\n\t\tmaterial.clearcoat *= texture2D( clearcoatMap, vClearcoatMapUv ).x;\n\t#endif\n\t#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\t\tmaterial.clearcoatRoughness *= texture2D( clearcoatRoughnessMap, vClearcoatRoughnessMapUv ).y;\n\t#endif\n\tmaterial.clearcoat = saturate( material.clearcoat );\tmaterial.clearcoatRoughness = max( material.clearcoatRoughness, 0.0525 );\n\tmaterial.clearcoatRoughness += geometryRoughness;\n\tmaterial.clearcoatRoughness = min( material.clearcoatRoughness, 1.0 );\n#endif\n#ifdef USE_IRIDESCENCE\n\tmaterial.iridescence = iridescence;\n\tmaterial.iridescenceIOR = iridescenceIOR;\n\t#ifdef USE_IRIDESCENCEMAP\n\t\tmaterial.iridescence *= texture2D( iridescenceMap, vIridescenceMapUv ).r;\n\t#endif\n\t#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\t\tmaterial.iridescenceThickness = (iridescenceThicknessMaximum - iridescenceThicknessMinimum) * texture2D( iridescenceThicknessMap, vIridescenceThicknessMapUv ).g + iridescenceThicknessMinimum;\n\t#else\n\t\tmaterial.iridescenceThickness = iridescenceThicknessMaximum;\n\t#endif\n#endif\n#ifdef USE_SHEEN\n\tmaterial.sheenColor = sheenColor;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tmaterial.sheenColor *= texture2D( sheenColorMap, vSheenColorMapUv ).rgb;\n\t#endif\n\tmaterial.sheenRoughness = clamp( sheenRoughness, 0.07, 1.0 );\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tmaterial.sheenRoughness *= texture2D( sheenRoughnessMap, vSheenRoughnessMapUv ).a;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\t#ifdef USE_ANISOTROPYMAP\n\t\tmat2 anisotropyMat = mat2( anisotropyVector.x, anisotropyVector.y, - anisotropyVector.y, anisotropyVector.x );\n\t\tvec3 anisotropyPolar = texture2D( anisotropyMap, vAnisotropyMapUv ).rgb;\n\t\tvec2 anisotropyV = anisotropyMat * normalize( 2.0 * anisotropyPolar.rg - vec2( 1.0 ) ) * anisotropyPolar.b;\n\t#else\n\t\tvec2 anisotropyV = anisotropyVector;\n\t#endif\n\tmaterial.anisotropy = length( anisotropyV );\n\tanisotropyV /= material.anisotropy;\n\tmaterial.anisotropy = saturate( material.anisotropy );\n\tmaterial.alphaT = mix( pow2( material.roughness ), 1.0, pow2( material.anisotropy ) );\n\tmaterial.anisotropyT = tbn[ 0 ] * anisotropyV.x - tbn[ 1 ] * anisotropyV.y;\n\tmaterial.anisotropyB = tbn[ 1 ] * anisotropyV.x + tbn[ 0 ] * anisotropyV.y;\n#endif";

	var lights_physical_pars_fragment = "struct PhysicalMaterial {\n\tvec3 diffuseColor;\n\tfloat roughness;\n\tvec3 specularColor;\n\tfloat specularF90;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat clearcoat;\n\t\tfloat clearcoatRoughness;\n\t\tvec3 clearcoatF0;\n\t\tfloat clearcoatF90;\n\t#endif\n\t#ifdef USE_IRIDESCENCE\n\t\tfloat iridescence;\n\t\tfloat iridescenceIOR;\n\t\tfloat iridescenceThickness;\n\t\tvec3 iridescenceFresnel;\n\t\tvec3 iridescenceF0;\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tvec3 sheenColor;\n\t\tfloat sheenRoughness;\n\t#endif\n\t#ifdef IOR\n\t\tfloat ior;\n\t#endif\n\t#ifdef USE_TRANSMISSION\n\t\tfloat transmission;\n\t\tfloat transmissionAlpha;\n\t\tfloat thickness;\n\t\tfloat attenuationDistance;\n\t\tvec3 attenuationColor;\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat anisotropy;\n\t\tfloat alphaT;\n\t\tvec3 anisotropyT;\n\t\tvec3 anisotropyB;\n\t#endif\n};\nvec3 clearcoatSpecular = vec3( 0.0 );\nvec3 sheenSpecular = vec3( 0.0 );\nvec3 Schlick_to_F0( const in vec3 f, const in float f90, const in float dotVH ) {\n    float x = clamp( 1.0 - dotVH, 0.0, 1.0 );\n    float x2 = x * x;\n    float x5 = clamp( x * x2 * x2, 0.0, 0.9999 );\n    return ( f - vec3( f90 ) * x5 ) / ( 1.0 - x5 );\n}\nfloat V_GGX_SmithCorrelated( const in float alpha, const in float dotNL, const in float dotNV ) {\n\tfloat a2 = pow2( alpha );\n\tfloat gv = dotNL * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNV ) );\n\tfloat gl = dotNV * sqrt( a2 + ( 1.0 - a2 ) * pow2( dotNL ) );\n\treturn 0.5 / max( gv + gl, EPSILON );\n}\nfloat D_GGX( const in float alpha, const in float dotNH ) {\n\tfloat a2 = pow2( alpha );\n\tfloat denom = pow2( dotNH ) * ( a2 - 1.0 ) + 1.0;\n\treturn RECIPROCAL_PI * a2 / pow2( denom );\n}\n#ifdef USE_ANISOTROPY\n\tfloat V_GGX_SmithCorrelated_Anisotropic( const in float alphaT, const in float alphaB, const in float dotTV, const in float dotBV, const in float dotTL, const in float dotBL, const in float dotNV, const in float dotNL ) {\n\t\tfloat gv = dotNL * length( vec3( alphaT * dotTV, alphaB * dotBV, dotNV ) );\n\t\tfloat gl = dotNV * length( vec3( alphaT * dotTL, alphaB * dotBL, dotNL ) );\n\t\tfloat v = 0.5 / ( gv + gl );\n\t\treturn saturate(v);\n\t}\n\tfloat D_GGX_Anisotropic( const in float alphaT, const in float alphaB, const in float dotNH, const in float dotTH, const in float dotBH ) {\n\t\tfloat a2 = alphaT * alphaB;\n\t\thighp vec3 v = vec3( alphaB * dotTH, alphaT * dotBH, a2 * dotNH );\n\t\thighp float v2 = dot( v, v );\n\t\tfloat w2 = a2 / v2;\n\t\treturn RECIPROCAL_PI * a2 * pow2 ( w2 );\n\t}\n#endif\n#ifdef USE_CLEARCOAT\n\tvec3 BRDF_GGX_Clearcoat( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material) {\n\t\tvec3 f0 = material.clearcoatF0;\n\t\tfloat f90 = material.clearcoatF90;\n\t\tfloat roughness = material.clearcoatRoughness;\n\t\tfloat alpha = pow2( roughness );\n\t\tvec3 halfDir = normalize( lightDir + viewDir );\n\t\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\t\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\t\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\t\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\t\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t\treturn F * ( V * D );\n\t}\n#endif\nvec3 BRDF_GGX( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, const in PhysicalMaterial material ) {\n\tvec3 f0 = material.specularColor;\n\tfloat f90 = material.specularF90;\n\tfloat roughness = material.roughness;\n\tfloat alpha = pow2( roughness );\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat dotVH = saturate( dot( viewDir, halfDir ) );\n\tvec3 F = F_Schlick( f0, f90, dotVH );\n\t#ifdef USE_IRIDESCENCE\n\t\tF = mix( F, material.iridescenceFresnel, material.iridescence );\n\t#endif\n\t#ifdef USE_ANISOTROPY\n\t\tfloat dotTL = dot( material.anisotropyT, lightDir );\n\t\tfloat dotTV = dot( material.anisotropyT, viewDir );\n\t\tfloat dotTH = dot( material.anisotropyT, halfDir );\n\t\tfloat dotBL = dot( material.anisotropyB, lightDir );\n\t\tfloat dotBV = dot( material.anisotropyB, viewDir );\n\t\tfloat dotBH = dot( material.anisotropyB, halfDir );\n\t\tfloat V = V_GGX_SmithCorrelated_Anisotropic( material.alphaT, alpha, dotTV, dotBV, dotTL, dotBL, dotNV, dotNL );\n\t\tfloat D = D_GGX_Anisotropic( material.alphaT, alpha, dotNH, dotTH, dotBH );\n\t#else\n\t\tfloat V = V_GGX_SmithCorrelated( alpha, dotNL, dotNV );\n\t\tfloat D = D_GGX( alpha, dotNH );\n\t#endif\n\treturn F * ( V * D );\n}\nvec2 LTC_Uv( const in vec3 N, const in vec3 V, const in float roughness ) {\n\tconst float LUT_SIZE = 64.0;\n\tconst float LUT_SCALE = ( LUT_SIZE - 1.0 ) / LUT_SIZE;\n\tconst float LUT_BIAS = 0.5 / LUT_SIZE;\n\tfloat dotNV = saturate( dot( N, V ) );\n\tvec2 uv = vec2( roughness, sqrt( 1.0 - dotNV ) );\n\tuv = uv * LUT_SCALE + LUT_BIAS;\n\treturn uv;\n}\nfloat LTC_ClippedSphereFormFactor( const in vec3 f ) {\n\tfloat l = length( f );\n\treturn max( ( l * l + f.z ) / ( l + 1.0 ), 0.0 );\n}\nvec3 LTC_EdgeVectorFormFactor( const in vec3 v1, const in vec3 v2 ) {\n\tfloat x = dot( v1, v2 );\n\tfloat y = abs( x );\n\tfloat a = 0.8543985 + ( 0.4965155 + 0.0145206 * y ) * y;\n\tfloat b = 3.4175940 + ( 4.1616724 + y ) * y;\n\tfloat v = a / b;\n\tfloat theta_sintheta = ( x > 0.0 ) ? v : 0.5 * inversesqrt( max( 1.0 - x * x, 1e-7 ) ) - v;\n\treturn cross( v1, v2 ) * theta_sintheta;\n}\nvec3 LTC_Evaluate( const in vec3 N, const in vec3 V, const in vec3 P, const in mat3 mInv, const in vec3 rectCoords[ 4 ] ) {\n\tvec3 v1 = rectCoords[ 1 ] - rectCoords[ 0 ];\n\tvec3 v2 = rectCoords[ 3 ] - rectCoords[ 0 ];\n\tvec3 lightNormal = cross( v1, v2 );\n\tif( dot( lightNormal, P - rectCoords[ 0 ] ) < 0.0 ) return vec3( 0.0 );\n\tvec3 T1, T2;\n\tT1 = normalize( V - N * dot( V, N ) );\n\tT2 = - cross( N, T1 );\n\tmat3 mat = mInv * transposeMat3( mat3( T1, T2, N ) );\n\tvec3 coords[ 4 ];\n\tcoords[ 0 ] = mat * ( rectCoords[ 0 ] - P );\n\tcoords[ 1 ] = mat * ( rectCoords[ 1 ] - P );\n\tcoords[ 2 ] = mat * ( rectCoords[ 2 ] - P );\n\tcoords[ 3 ] = mat * ( rectCoords[ 3 ] - P );\n\tcoords[ 0 ] = normalize( coords[ 0 ] );\n\tcoords[ 1 ] = normalize( coords[ 1 ] );\n\tcoords[ 2 ] = normalize( coords[ 2 ] );\n\tcoords[ 3 ] = normalize( coords[ 3 ] );\n\tvec3 vectorFormFactor = vec3( 0.0 );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 0 ], coords[ 1 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 1 ], coords[ 2 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 2 ], coords[ 3 ] );\n\tvectorFormFactor += LTC_EdgeVectorFormFactor( coords[ 3 ], coords[ 0 ] );\n\tfloat result = LTC_ClippedSphereFormFactor( vectorFormFactor );\n\treturn vec3( result );\n}\n#if defined( USE_SHEEN )\nfloat D_Charlie( float roughness, float dotNH ) {\n\tfloat alpha = pow2( roughness );\n\tfloat invAlpha = 1.0 / alpha;\n\tfloat cos2h = dotNH * dotNH;\n\tfloat sin2h = max( 1.0 - cos2h, 0.0078125 );\n\treturn ( 2.0 + invAlpha ) * pow( sin2h, invAlpha * 0.5 ) / ( 2.0 * PI );\n}\nfloat V_Neubelt( float dotNV, float dotNL ) {\n\treturn saturate( 1.0 / ( 4.0 * ( dotNL + dotNV - dotNL * dotNV ) ) );\n}\nvec3 BRDF_Sheen( const in vec3 lightDir, const in vec3 viewDir, const in vec3 normal, vec3 sheenColor, const in float sheenRoughness ) {\n\tvec3 halfDir = normalize( lightDir + viewDir );\n\tfloat dotNL = saturate( dot( normal, lightDir ) );\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat dotNH = saturate( dot( normal, halfDir ) );\n\tfloat D = D_Charlie( sheenRoughness, dotNH );\n\tfloat V = V_Neubelt( dotNV, dotNL );\n\treturn sheenColor * ( D * V );\n}\n#endif\nfloat IBLSheenBRDF( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tfloat r2 = roughness * roughness;\n\tfloat a = roughness < 0.25 ? -339.2 * r2 + 161.4 * roughness - 25.9 : -8.48 * r2 + 14.3 * roughness - 9.95;\n\tfloat b = roughness < 0.25 ? 44.0 * r2 - 23.7 * roughness + 3.26 : 1.97 * r2 - 3.27 * roughness + 0.72;\n\tfloat DG = exp( a * dotNV + b ) + ( roughness < 0.25 ? 0.0 : 0.1 * ( roughness - 0.25 ) );\n\treturn saturate( DG * RECIPROCAL_PI );\n}\nvec2 DFGApprox( const in vec3 normal, const in vec3 viewDir, const in float roughness ) {\n\tfloat dotNV = saturate( dot( normal, viewDir ) );\n\tconst vec4 c0 = vec4( - 1, - 0.0275, - 0.572, 0.022 );\n\tconst vec4 c1 = vec4( 1, 0.0425, 1.04, - 0.04 );\n\tvec4 r = roughness * c0 + c1;\n\tfloat a004 = min( r.x * r.x, exp2( - 9.28 * dotNV ) ) * r.x + r.y;\n\tvec2 fab = vec2( - 1.04, 1.04 ) * a004 + r.zw;\n\treturn fab;\n}\nvec3 EnvironmentBRDF( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness ) {\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\treturn specularColor * fab.x + specularF90 * fab.y;\n}\n#ifdef USE_IRIDESCENCE\nvoid computeMultiscatteringIridescence( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float iridescence, const in vec3 iridescenceF0, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#else\nvoid computeMultiscattering( const in vec3 normal, const in vec3 viewDir, const in vec3 specularColor, const in float specularF90, const in float roughness, inout vec3 singleScatter, inout vec3 multiScatter ) {\n#endif\n\tvec2 fab = DFGApprox( normal, viewDir, roughness );\n\t#ifdef USE_IRIDESCENCE\n\t\tvec3 Fr = mix( specularColor, iridescenceF0, iridescence );\n\t#else\n\t\tvec3 Fr = specularColor;\n\t#endif\n\tvec3 FssEss = Fr * fab.x + specularF90 * fab.y;\n\tfloat Ess = fab.x + fab.y;\n\tfloat Ems = 1.0 - Ess;\n\tvec3 Favg = Fr + ( 1.0 - Fr ) * 0.047619;\tvec3 Fms = FssEss * Favg / ( 1.0 - Ems * Favg );\n\tsingleScatter += FssEss;\n\tmultiScatter += Fms * Ems;\n}\n#if NUM_RECT_AREA_LIGHTS > 0\n\tvoid RE_Direct_RectArea_Physical( const in RectAreaLight rectAreaLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\t\tvec3 normal = geometry.normal;\n\t\tvec3 viewDir = geometry.viewDir;\n\t\tvec3 position = geometry.position;\n\t\tvec3 lightPos = rectAreaLight.position;\n\t\tvec3 halfWidth = rectAreaLight.halfWidth;\n\t\tvec3 halfHeight = rectAreaLight.halfHeight;\n\t\tvec3 lightColor = rectAreaLight.color;\n\t\tfloat roughness = material.roughness;\n\t\tvec3 rectCoords[ 4 ];\n\t\trectCoords[ 0 ] = lightPos + halfWidth - halfHeight;\t\trectCoords[ 1 ] = lightPos - halfWidth - halfHeight;\n\t\trectCoords[ 2 ] = lightPos - halfWidth + halfHeight;\n\t\trectCoords[ 3 ] = lightPos + halfWidth + halfHeight;\n\t\tvec2 uv = LTC_Uv( normal, viewDir, roughness );\n\t\tvec4 t1 = texture2D( ltc_1, uv );\n\t\tvec4 t2 = texture2D( ltc_2, uv );\n\t\tmat3 mInv = mat3(\n\t\t\tvec3( t1.x, 0, t1.y ),\n\t\t\tvec3(    0, 1,    0 ),\n\t\t\tvec3( t1.z, 0, t1.w )\n\t\t);\n\t\tvec3 fresnel = ( material.specularColor * t2.x + ( vec3( 1.0 ) - material.specularColor ) * t2.y );\n\t\treflectedLight.directSpecular += lightColor * fresnel * LTC_Evaluate( normal, viewDir, position, mInv, rectCoords );\n\t\treflectedLight.directDiffuse += lightColor * material.diffuseColor * LTC_Evaluate( normal, viewDir, position, mat3( 1.0 ), rectCoords );\n\t}\n#endif\nvoid RE_Direct_Physical( const in IncidentLight directLight, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\tfloat dotNL = saturate( dot( geometry.normal, directLight.direction ) );\n\tvec3 irradiance = dotNL * directLight.color;\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNLcc = saturate( dot( geometry.clearcoatNormal, directLight.direction ) );\n\t\tvec3 ccIrradiance = dotNLcc * directLight.color;\n\t\tclearcoatSpecular += ccIrradiance * BRDF_GGX_Clearcoat( directLight.direction, geometry.viewDir, geometry.clearcoatNormal, material );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * BRDF_Sheen( directLight.direction, geometry.viewDir, geometry.normal, material.sheenColor, material.sheenRoughness );\n\t#endif\n\treflectedLight.directSpecular += irradiance * BRDF_GGX( directLight.direction, geometry.viewDir, geometry.normal, material );\n\treflectedLight.directDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectDiffuse_Physical( const in vec3 irradiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight ) {\n\treflectedLight.indirectDiffuse += irradiance * BRDF_Lambert( material.diffuseColor );\n}\nvoid RE_IndirectSpecular_Physical( const in vec3 radiance, const in vec3 irradiance, const in vec3 clearcoatRadiance, const in GeometricContext geometry, const in PhysicalMaterial material, inout ReflectedLight reflectedLight) {\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatSpecular += clearcoatRadiance * EnvironmentBRDF( geometry.clearcoatNormal, geometry.viewDir, material.clearcoatF0, material.clearcoatF90, material.clearcoatRoughness );\n\t#endif\n\t#ifdef USE_SHEEN\n\t\tsheenSpecular += irradiance * material.sheenColor * IBLSheenBRDF( geometry.normal, geometry.viewDir, material.sheenRoughness );\n\t#endif\n\tvec3 singleScattering = vec3( 0.0 );\n\tvec3 multiScattering = vec3( 0.0 );\n\tvec3 cosineWeightedIrradiance = irradiance * RECIPROCAL_PI;\n\t#ifdef USE_IRIDESCENCE\n\t\tcomputeMultiscatteringIridescence( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.iridescence, material.iridescenceFresnel, material.roughness, singleScattering, multiScattering );\n\t#else\n\t\tcomputeMultiscattering( geometry.normal, geometry.viewDir, material.specularColor, material.specularF90, material.roughness, singleScattering, multiScattering );\n\t#endif\n\tvec3 totalScattering = singleScattering + multiScattering;\n\tvec3 diffuse = material.diffuseColor * ( 1.0 - max( max( totalScattering.r, totalScattering.g ), totalScattering.b ) );\n\treflectedLight.indirectSpecular += radiance * singleScattering;\n\treflectedLight.indirectSpecular += multiScattering * cosineWeightedIrradiance;\n\treflectedLight.indirectDiffuse += diffuse * cosineWeightedIrradiance;\n}\n#define RE_Direct\t\t\t\tRE_Direct_Physical\n#define RE_Direct_RectArea\t\tRE_Direct_RectArea_Physical\n#define RE_IndirectDiffuse\t\tRE_IndirectDiffuse_Physical\n#define RE_IndirectSpecular\t\tRE_IndirectSpecular_Physical\nfloat computeSpecularOcclusion( const in float dotNV, const in float ambientOcclusion, const in float roughness ) {\n\treturn saturate( pow( dotNV + ambientOcclusion, exp2( - 16.0 * roughness - 1.0 ) ) - 1.0 + ambientOcclusion );\n}";

	var lights_fragment_begin = "\nGeometricContext geometry;\ngeometry.position = - vViewPosition;\ngeometry.normal = normal;\ngeometry.viewDir = ( isOrthographic ) ? vec3( 0, 0, 1 ) : normalize( vViewPosition );\n#ifdef USE_CLEARCOAT\n\tgeometry.clearcoatNormal = clearcoatNormal;\n#endif\n#ifdef USE_IRIDESCENCE\n\tfloat dotNVi = saturate( dot( normal, geometry.viewDir ) );\n\tif ( material.iridescenceThickness == 0.0 ) {\n\t\tmaterial.iridescence = 0.0;\n\t} else {\n\t\tmaterial.iridescence = saturate( material.iridescence );\n\t}\n\tif ( material.iridescence > 0.0 ) {\n\t\tmaterial.iridescenceFresnel = evalIridescence( 1.0, material.iridescenceIOR, dotNVi, material.iridescenceThickness, material.specularColor );\n\t\tmaterial.iridescenceF0 = Schlick_to_F0( material.iridescenceFresnel, 1.0, dotNVi );\n\t}\n#endif\nIncidentLight directLight;\n#if ( NUM_POINT_LIGHTS > 0 ) && defined( RE_Direct )\n\tPointLight pointLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHTS; i ++ ) {\n\t\tpointLight = pointLights[ i ];\n\t\tgetPointLightInfo( pointLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_POINT_LIGHT_SHADOWS )\n\t\tpointLightShadow = pointLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getPointShadow( pointShadowMap[ i ], pointLightShadow.shadowMapSize, pointLightShadow.shadowBias, pointLightShadow.shadowRadius, vPointShadowCoord[ i ], pointLightShadow.shadowCameraNear, pointLightShadow.shadowCameraFar ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_SPOT_LIGHTS > 0 ) && defined( RE_Direct )\n\tSpotLight spotLight;\n\tvec4 spotColor;\n\tvec3 spotLightCoord;\n\tbool inSpotLightMap;\n\t#if defined( USE_SHADOWMAP ) && NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHTS; i ++ ) {\n\t\tspotLight = spotLights[ i ];\n\t\tgetSpotLightInfo( spotLight, geometry, directLight );\n\t\t#if ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#define SPOT_LIGHT_MAP_INDEX UNROLLED_LOOP_INDEX\n\t\t#elif ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t#define SPOT_LIGHT_MAP_INDEX NUM_SPOT_LIGHT_MAPS\n\t\t#else\n\t\t#define SPOT_LIGHT_MAP_INDEX ( UNROLLED_LOOP_INDEX - NUM_SPOT_LIGHT_SHADOWS + NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS )\n\t\t#endif\n\t\t#if ( SPOT_LIGHT_MAP_INDEX < NUM_SPOT_LIGHT_MAPS )\n\t\t\tspotLightCoord = vSpotLightCoord[ i ].xyz / vSpotLightCoord[ i ].w;\n\t\t\tinSpotLightMap = all( lessThan( abs( spotLightCoord * 2. - 1. ), vec3( 1.0 ) ) );\n\t\t\tspotColor = texture2D( spotLightMap[ SPOT_LIGHT_MAP_INDEX ], spotLightCoord.xy );\n\t\t\tdirectLight.color = inSpotLightMap ? directLight.color * spotColor.rgb : directLight.color;\n\t\t#endif\n\t\t#undef SPOT_LIGHT_MAP_INDEX\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\tspotLightShadow = spotLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( spotShadowMap[ i ], spotLightShadow.shadowMapSize, spotLightShadow.shadowBias, spotLightShadow.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_DIR_LIGHTS > 0 ) && defined( RE_Direct )\n\tDirectionalLight directionalLight;\n\t#if defined( USE_SHADOWMAP ) && NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLightShadow;\n\t#endif\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHTS; i ++ ) {\n\t\tdirectionalLight = directionalLights[ i ];\n\t\tgetDirectionalLightInfo( directionalLight, geometry, directLight );\n\t\t#if defined( USE_SHADOWMAP ) && ( UNROLLED_LOOP_INDEX < NUM_DIR_LIGHT_SHADOWS )\n\t\tdirectionalLightShadow = directionalLightShadows[ i ];\n\t\tdirectLight.color *= ( directLight.visible && receiveShadow ) ? getShadow( directionalShadowMap[ i ], directionalLightShadow.shadowMapSize, directionalLightShadow.shadowBias, directionalLightShadow.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t\t#endif\n\t\tRE_Direct( directLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if ( NUM_RECT_AREA_LIGHTS > 0 ) && defined( RE_Direct_RectArea )\n\tRectAreaLight rectAreaLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_RECT_AREA_LIGHTS; i ++ ) {\n\t\trectAreaLight = rectAreaLights[ i ];\n\t\tRE_Direct_RectArea( rectAreaLight, geometry, material, reflectedLight );\n\t}\n\t#pragma unroll_loop_end\n#endif\n#if defined( RE_IndirectDiffuse )\n\tvec3 iblIrradiance = vec3( 0.0 );\n\tvec3 irradiance = getAmbientLightIrradiance( ambientLightColor );\n\tirradiance += getLightProbeIrradiance( lightProbe, geometry.normal );\n\t#if ( NUM_HEMI_LIGHTS > 0 )\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_HEMI_LIGHTS; i ++ ) {\n\t\t\tirradiance += getHemisphereLightIrradiance( hemisphereLights[ i ], geometry.normal );\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if defined( RE_IndirectSpecular )\n\tvec3 radiance = vec3( 0.0 );\n\tvec3 clearcoatRadiance = vec3( 0.0 );\n#endif";

	var lights_fragment_maps = "#if defined( RE_IndirectDiffuse )\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\tvec3 lightMapIrradiance = lightMapTexel.rgb * lightMapIntensity;\n\t\tirradiance += lightMapIrradiance;\n\t#endif\n\t#if defined( USE_ENVMAP ) && defined( STANDARD ) && defined( ENVMAP_TYPE_CUBE_UV )\n\t\tiblIrradiance += getIBLIrradiance( geometry.normal );\n\t#endif\n#endif\n#if defined( USE_ENVMAP ) && defined( RE_IndirectSpecular )\n\t#ifdef USE_ANISOTROPY\n\t\tradiance += getIBLAnisotropyRadiance( geometry.viewDir, geometry.normal, material.roughness, material.anisotropyB, material.anisotropy );\n\t#else\n\t\tradiance += getIBLRadiance( geometry.viewDir, geometry.normal, material.roughness );\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tclearcoatRadiance += getIBLRadiance( geometry.viewDir, geometry.clearcoatNormal, material.clearcoatRoughness );\n\t#endif\n#endif";

	var lights_fragment_end = "#if defined( RE_IndirectDiffuse )\n\tRE_IndirectDiffuse( irradiance, geometry, material, reflectedLight );\n#endif\n#if defined( RE_IndirectSpecular )\n\tRE_IndirectSpecular( radiance, iblIrradiance, clearcoatRadiance, geometry, material, reflectedLight );\n#endif";

	var logdepthbuf_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tgl_FragDepthEXT = vIsPerspective == 0.0 ? gl_FragCoord.z : log2( vFragDepth ) * logDepthBufFC * 0.5;\n#endif";

	var logdepthbuf_pars_fragment = "#if defined( USE_LOGDEPTHBUF ) && defined( USE_LOGDEPTHBUF_EXT )\n\tuniform float logDepthBufFC;\n\tvarying float vFragDepth;\n\tvarying float vIsPerspective;\n#endif";

	var logdepthbuf_pars_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvarying float vFragDepth;\n\t\tvarying float vIsPerspective;\n\t#else\n\t\tuniform float logDepthBufFC;\n\t#endif\n#endif";

	var logdepthbuf_vertex = "#ifdef USE_LOGDEPTHBUF\n\t#ifdef USE_LOGDEPTHBUF_EXT\n\t\tvFragDepth = 1.0 + gl_Position.w;\n\t\tvIsPerspective = float( isPerspectiveMatrix( projectionMatrix ) );\n\t#else\n\t\tif ( isPerspectiveMatrix( projectionMatrix ) ) {\n\t\t\tgl_Position.z = log2( max( EPSILON, gl_Position.w + 1.0 ) ) * logDepthBufFC - 1.0;\n\t\t\tgl_Position.z *= gl_Position.w;\n\t\t}\n\t#endif\n#endif";

	var map_fragment = "#ifdef USE_MAP\n\tvec4 sampledDiffuseColor = texture2D( map, vMapUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\tsampledDiffuseColor = vec4( mix( pow( sampledDiffuseColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), sampledDiffuseColor.rgb * 0.0773993808, vec3( lessThanEqual( sampledDiffuseColor.rgb, vec3( 0.04045 ) ) ) ), sampledDiffuseColor.w );\n\t\n\t#endif\n\tdiffuseColor *= sampledDiffuseColor;\n#endif";

	var map_pars_fragment = "#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif";

	var map_particle_fragment = "#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t#if defined( USE_POINTS_UV )\n\t\tvec2 uv = vUv;\n\t#else\n\t\tvec2 uv = ( uvTransform * vec3( gl_PointCoord.x, 1.0 - gl_PointCoord.y, 1 ) ).xy;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tdiffuseColor *= texture2D( map, uv );\n#endif\n#ifdef USE_ALPHAMAP\n\tdiffuseColor.a *= texture2D( alphaMap, uv ).g;\n#endif";

	var map_particle_pars_fragment = "#if defined( USE_POINTS_UV )\n\tvarying vec2 vUv;\n#else\n\t#if defined( USE_MAP ) || defined( USE_ALPHAMAP )\n\t\tuniform mat3 uvTransform;\n\t#endif\n#endif\n#ifdef USE_MAP\n\tuniform sampler2D map;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform sampler2D alphaMap;\n#endif";

	var metalnessmap_fragment = "float metalnessFactor = metalness;\n#ifdef USE_METALNESSMAP\n\tvec4 texelMetalness = texture2D( metalnessMap, vMetalnessMapUv );\n\tmetalnessFactor *= texelMetalness.b;\n#endif";

	var metalnessmap_pars_fragment = "#ifdef USE_METALNESSMAP\n\tuniform sampler2D metalnessMap;\n#endif";

	var morphcolor_vertex = "#if defined( USE_MORPHCOLORS ) && defined( MORPHTARGETS_TEXTURE )\n\tvColor *= morphTargetBaseInfluence;\n\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t#if defined( USE_COLOR_ALPHA )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ) * morphTargetInfluences[ i ];\n\t\t#elif defined( USE_COLOR )\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) vColor += getMorph( gl_VertexID, i, 2 ).rgb * morphTargetInfluences[ i ];\n\t\t#endif\n\t}\n#endif";

	var morphnormal_vertex = "#ifdef USE_MORPHNORMALS\n\tobjectNormal *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) objectNormal += getMorph( gl_VertexID, i, 1 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\tobjectNormal += morphNormal0 * morphTargetInfluences[ 0 ];\n\t\tobjectNormal += morphNormal1 * morphTargetInfluences[ 1 ];\n\t\tobjectNormal += morphNormal2 * morphTargetInfluences[ 2 ];\n\t\tobjectNormal += morphNormal3 * morphTargetInfluences[ 3 ];\n\t#endif\n#endif";

	var morphtarget_pars_vertex = "#ifdef USE_MORPHTARGETS\n\tuniform float morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tuniform float morphTargetInfluences[ MORPHTARGETS_COUNT ];\n\t\tuniform sampler2DArray morphTargetsTexture;\n\t\tuniform ivec2 morphTargetsTextureSize;\n\t\tvec4 getMorph( const in int vertexIndex, const in int morphTargetIndex, const in int offset ) {\n\t\t\tint texelIndex = vertexIndex * MORPHTARGETS_TEXTURE_STRIDE + offset;\n\t\t\tint y = texelIndex / morphTargetsTextureSize.x;\n\t\t\tint x = texelIndex - y * morphTargetsTextureSize.x;\n\t\t\tivec3 morphUV = ivec3( x, y, morphTargetIndex );\n\t\t\treturn texelFetch( morphTargetsTexture, morphUV, 0 );\n\t\t}\n\t#else\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\tuniform float morphTargetInfluences[ 8 ];\n\t\t#else\n\t\t\tuniform float morphTargetInfluences[ 4 ];\n\t\t#endif\n\t#endif\n#endif";

	var morphtarget_vertex = "#ifdef USE_MORPHTARGETS\n\ttransformed *= morphTargetBaseInfluence;\n\t#ifdef MORPHTARGETS_TEXTURE\n\t\tfor ( int i = 0; i < MORPHTARGETS_COUNT; i ++ ) {\n\t\t\tif ( morphTargetInfluences[ i ] != 0.0 ) transformed += getMorph( gl_VertexID, i, 0 ).xyz * morphTargetInfluences[ i ];\n\t\t}\n\t#else\n\t\ttransformed += morphTarget0 * morphTargetInfluences[ 0 ];\n\t\ttransformed += morphTarget1 * morphTargetInfluences[ 1 ];\n\t\ttransformed += morphTarget2 * morphTargetInfluences[ 2 ];\n\t\ttransformed += morphTarget3 * morphTargetInfluences[ 3 ];\n\t\t#ifndef USE_MORPHNORMALS\n\t\t\ttransformed += morphTarget4 * morphTargetInfluences[ 4 ];\n\t\t\ttransformed += morphTarget5 * morphTargetInfluences[ 5 ];\n\t\t\ttransformed += morphTarget6 * morphTargetInfluences[ 6 ];\n\t\t\ttransformed += morphTarget7 * morphTargetInfluences[ 7 ];\n\t\t#endif\n\t#endif\n#endif";

	var normal_fragment_begin = "float faceDirection = gl_FrontFacing ? 1.0 : - 1.0;\n#ifdef FLAT_SHADED\n\tvec3 fdx = dFdx( vViewPosition );\n\tvec3 fdy = dFdy( vViewPosition );\n\tvec3 normal = normalize( cross( fdx, fdy ) );\n#else\n\tvec3 normal = normalize( vNormal );\n\t#ifdef DOUBLE_SIDED\n\t\tnormal *= faceDirection;\n\t#endif\n#endif\n#if defined( USE_NORMALMAP_TANGENTSPACE ) || defined( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY )\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn = getTangentFrame( - vViewPosition, normal,\n\t\t#if defined( USE_NORMALMAP )\n\t\t\tvNormalMapUv\n\t\t#elif defined( USE_CLEARCOAT_NORMALMAP )\n\t\t\tvClearcoatNormalMapUv\n\t\t#else\n\t\t\tvUv\n\t\t#endif\n\t\t);\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn[0] *= faceDirection;\n\t\ttbn[1] *= faceDirection;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\t#ifdef USE_TANGENT\n\t\tmat3 tbn2 = mat3( normalize( vTangent ), normalize( vBitangent ), normal );\n\t#else\n\t\tmat3 tbn2 = getTangentFrame( - vViewPosition, normal, vClearcoatNormalMapUv );\n\t#endif\n\t#if defined( DOUBLE_SIDED ) && ! defined( FLAT_SHADED )\n\t\ttbn2[0] *= faceDirection;\n\t\ttbn2[1] *= faceDirection;\n\t#endif\n#endif\nvec3 geometryNormal = normal;";

	var normal_fragment_maps = "#ifdef USE_NORMALMAP_OBJECTSPACE\n\tnormal = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\t#ifdef FLIP_SIDED\n\t\tnormal = - normal;\n\t#endif\n\t#ifdef DOUBLE_SIDED\n\t\tnormal = normal * faceDirection;\n\t#endif\n\tnormal = normalize( normalMatrix * normal );\n#elif defined( USE_NORMALMAP_TANGENTSPACE )\n\tvec3 mapN = texture2D( normalMap, vNormalMapUv ).xyz * 2.0 - 1.0;\n\tmapN.xy *= normalScale;\n\tnormal = normalize( tbn * mapN );\n#elif defined( USE_BUMPMAP )\n\tnormal = perturbNormalArb( - vViewPosition, normal, dHdxy_fwd(), faceDirection );\n#endif";

	var normal_pars_fragment = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";

	var normal_pars_vertex = "#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n\t#ifdef USE_TANGENT\n\t\tvarying vec3 vTangent;\n\t\tvarying vec3 vBitangent;\n\t#endif\n#endif";

	var normal_vertex = "#ifndef FLAT_SHADED\n\tvNormal = normalize( transformedNormal );\n\t#ifdef USE_TANGENT\n\t\tvTangent = normalize( transformedTangent );\n\t\tvBitangent = normalize( cross( vNormal, vTangent ) * tangent.w );\n\t#endif\n#endif";

	var normalmap_pars_fragment = "#ifdef USE_NORMALMAP\n\tuniform sampler2D normalMap;\n\tuniform vec2 normalScale;\n#endif\n#ifdef USE_NORMALMAP_OBJECTSPACE\n\tuniform mat3 normalMatrix;\n#endif\n#if ! defined ( USE_TANGENT ) && ( defined ( USE_NORMALMAP_TANGENTSPACE ) || defined ( USE_CLEARCOAT_NORMALMAP ) || defined( USE_ANISOTROPY ) )\n\tmat3 getTangentFrame( vec3 eye_pos, vec3 surf_norm, vec2 uv ) {\n\t\tvec3 q0 = dFdx( eye_pos.xyz );\n\t\tvec3 q1 = dFdy( eye_pos.xyz );\n\t\tvec2 st0 = dFdx( uv.st );\n\t\tvec2 st1 = dFdy( uv.st );\n\t\tvec3 N = surf_norm;\n\t\tvec3 q1perp = cross( q1, N );\n\t\tvec3 q0perp = cross( N, q0 );\n\t\tvec3 T = q1perp * st0.x + q0perp * st1.x;\n\t\tvec3 B = q1perp * st0.y + q0perp * st1.y;\n\t\tfloat det = max( dot( T, T ), dot( B, B ) );\n\t\tfloat scale = ( det == 0.0 ) ? 0.0 : inversesqrt( det );\n\t\treturn mat3( T * scale, B * scale, N );\n\t}\n#endif";

	var clearcoat_normal_fragment_begin = "#ifdef USE_CLEARCOAT\n\tvec3 clearcoatNormal = geometryNormal;\n#endif";

	var clearcoat_normal_fragment_maps = "#ifdef USE_CLEARCOAT_NORMALMAP\n\tvec3 clearcoatMapN = texture2D( clearcoatNormalMap, vClearcoatNormalMapUv ).xyz * 2.0 - 1.0;\n\tclearcoatMapN.xy *= clearcoatNormalScale;\n\tclearcoatNormal = normalize( tbn2 * clearcoatMapN );\n#endif";

	var clearcoat_pars_fragment = "#ifdef USE_CLEARCOATMAP\n\tuniform sampler2D clearcoatMap;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform sampler2D clearcoatNormalMap;\n\tuniform vec2 clearcoatNormalScale;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform sampler2D clearcoatRoughnessMap;\n#endif";

	var iridescence_pars_fragment = "#ifdef USE_IRIDESCENCEMAP\n\tuniform sampler2D iridescenceMap;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform sampler2D iridescenceThicknessMap;\n#endif";

	var opaque_fragment = "#ifdef OPAQUE\ndiffuseColor.a = 1.0;\n#endif\n#ifdef USE_TRANSMISSION\ndiffuseColor.a *= material.transmissionAlpha;\n#endif\ngl_FragColor = vec4( outgoingLight, diffuseColor.a );";

	var packing = "vec3 packNormalToRGB( const in vec3 normal ) {\n\treturn normalize( normal ) * 0.5 + 0.5;\n}\nvec3 unpackRGBToNormal( const in vec3 rgb ) {\n\treturn 2.0 * rgb.xyz - 1.0;\n}\nconst float PackUpscale = 256. / 255.;const float UnpackDownscale = 255. / 256.;\nconst vec3 PackFactors = vec3( 256. * 256. * 256., 256. * 256., 256. );\nconst vec4 UnpackFactors = UnpackDownscale / vec4( PackFactors, 1. );\nconst float ShiftRight8 = 1. / 256.;\nvec4 packDepthToRGBA( const in float v ) {\n\tvec4 r = vec4( fract( v * PackFactors ), v );\n\tr.yzw -= r.xyz * ShiftRight8;\treturn r * PackUpscale;\n}\nfloat unpackRGBAToDepth( const in vec4 v ) {\n\treturn dot( v, UnpackFactors );\n}\nvec2 packDepthToRG( in highp float v ) {\n\treturn packDepthToRGBA( v ).yx;\n}\nfloat unpackRGToDepth( const in highp vec2 v ) {\n\treturn unpackRGBAToDepth( vec4( v.xy, 0.0, 0.0 ) );\n}\nvec4 pack2HalfToRGBA( vec2 v ) {\n\tvec4 r = vec4( v.x, fract( v.x * 255.0 ), v.y, fract( v.y * 255.0 ) );\n\treturn vec4( r.x - r.y / 255.0, r.y, r.z - r.w / 255.0, r.w );\n}\nvec2 unpackRGBATo2Half( vec4 v ) {\n\treturn vec2( v.x + ( v.y / 255.0 ), v.z + ( v.w / 255.0 ) );\n}\nfloat viewZToOrthographicDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( viewZ + near ) / ( near - far );\n}\nfloat orthographicDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn depth * ( near - far ) - near;\n}\nfloat viewZToPerspectiveDepth( const in float viewZ, const in float near, const in float far ) {\n\treturn ( ( near + viewZ ) * far ) / ( ( far - near ) * viewZ );\n}\nfloat perspectiveDepthToViewZ( const in float depth, const in float near, const in float far ) {\n\treturn ( near * far ) / ( ( far - near ) * depth - far );\n}";

	var premultiplied_alpha_fragment = "#ifdef PREMULTIPLIED_ALPHA\n\tgl_FragColor.rgb *= gl_FragColor.a;\n#endif";

	var project_vertex = "vec4 mvPosition = vec4( transformed, 1.0 );\n#ifdef USE_INSTANCING\n\tmvPosition = instanceMatrix * mvPosition;\n#endif\nmvPosition = modelViewMatrix * mvPosition;\ngl_Position = projectionMatrix * mvPosition;";

	var dithering_fragment = "#ifdef DITHERING\n\tgl_FragColor.rgb = dithering( gl_FragColor.rgb );\n#endif";

	var dithering_pars_fragment = "#ifdef DITHERING\n\tvec3 dithering( vec3 color ) {\n\t\tfloat grid_position = rand( gl_FragCoord.xy );\n\t\tvec3 dither_shift_RGB = vec3( 0.25 / 255.0, -0.25 / 255.0, 0.25 / 255.0 );\n\t\tdither_shift_RGB = mix( 2.0 * dither_shift_RGB, -2.0 * dither_shift_RGB, grid_position );\n\t\treturn color + dither_shift_RGB;\n\t}\n#endif";

	var roughnessmap_fragment = "float roughnessFactor = roughness;\n#ifdef USE_ROUGHNESSMAP\n\tvec4 texelRoughness = texture2D( roughnessMap, vRoughnessMapUv );\n\troughnessFactor *= texelRoughness.g;\n#endif";

	var roughnessmap_pars_fragment = "#ifdef USE_ROUGHNESSMAP\n\tuniform sampler2D roughnessMap;\n#endif";

	var shadowmap_pars_fragment = "#if NUM_SPOT_LIGHT_COORDS > 0\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#if NUM_SPOT_LIGHT_MAPS > 0\n\tuniform sampler2D spotLightMap[ NUM_SPOT_LIGHT_MAPS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D directionalShadowMap[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D spotShadowMap[ NUM_SPOT_LIGHT_SHADOWS ];\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform sampler2D pointShadowMap[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n\tfloat texture2DCompare( sampler2D depths, vec2 uv, float compare ) {\n\t\treturn step( compare, unpackRGBAToDepth( texture2D( depths, uv ) ) );\n\t}\n\tvec2 texture2DDistribution( sampler2D shadow, vec2 uv ) {\n\t\treturn unpackRGBATo2Half( texture2D( shadow, uv ) );\n\t}\n\tfloat VSMShadow (sampler2D shadow, vec2 uv, float compare ){\n\t\tfloat occlusion = 1.0;\n\t\tvec2 distribution = texture2DDistribution( shadow, uv );\n\t\tfloat hard_shadow = step( compare , distribution.x );\n\t\tif (hard_shadow != 1.0 ) {\n\t\t\tfloat distance = compare - distribution.x ;\n\t\t\tfloat variance = max( 0.00000, distribution.y * distribution.y );\n\t\t\tfloat softness_probability = variance / (variance + distance * distance );\t\t\tsoftness_probability = clamp( ( softness_probability - 0.3 ) / ( 0.95 - 0.3 ), 0.0, 1.0 );\t\t\tocclusion = clamp( max( hard_shadow, softness_probability ), 0.0, 1.0 );\n\t\t}\n\t\treturn occlusion;\n\t}\n\tfloat getShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord ) {\n\t\tfloat shadow = 1.0;\n\t\tshadowCoord.xyz /= shadowCoord.w;\n\t\tshadowCoord.z += shadowBias;\n\t\tbool inFrustum = shadowCoord.x >= 0.0 && shadowCoord.x <= 1.0 && shadowCoord.y >= 0.0 && shadowCoord.y <= 1.0;\n\t\tbool frustumTest = inFrustum && shadowCoord.z <= 1.0;\n\t\tif ( frustumTest ) {\n\t\t#if defined( SHADOWMAP_TYPE_PCF )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx0 = - texelSize.x * shadowRadius;\n\t\t\tfloat dy0 = - texelSize.y * shadowRadius;\n\t\t\tfloat dx1 = + texelSize.x * shadowRadius;\n\t\t\tfloat dy1 = + texelSize.y * shadowRadius;\n\t\t\tfloat dx2 = dx0 / 2.0;\n\t\t\tfloat dy2 = dy0 / 2.0;\n\t\t\tfloat dx3 = dx1 / 2.0;\n\t\t\tfloat dy3 = dy1 / 2.0;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy2 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx2, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx3, dy3 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( 0.0, dy1 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, shadowCoord.xy + vec2( dx1, dy1 ), shadowCoord.z )\n\t\t\t) * ( 1.0 / 17.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_PCF_SOFT )\n\t\t\tvec2 texelSize = vec2( 1.0 ) / shadowMapSize;\n\t\t\tfloat dx = texelSize.x;\n\t\t\tfloat dy = texelSize.y;\n\t\t\tvec2 uv = shadowCoord.xy;\n\t\t\tvec2 f = fract( uv * shadowMapSize + 0.5 );\n\t\t\tuv -= f * texelSize;\n\t\t\tshadow = (\n\t\t\t\ttexture2DCompare( shadowMap, uv, shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( dx, 0.0 ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + vec2( 0.0, dy ), shadowCoord.z ) +\n\t\t\t\ttexture2DCompare( shadowMap, uv + texelSize, shadowCoord.z ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 0.0 ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( -dx, dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, dy ), shadowCoord.z ),\n\t\t\t\t\t f.x ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( 0.0, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( 0.0, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( texture2DCompare( shadowMap, uv + vec2( dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t texture2DCompare( shadowMap, uv + vec2( dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t f.y ) +\n\t\t\t\tmix( mix( texture2DCompare( shadowMap, uv + vec2( -dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, -dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t mix( texture2DCompare( shadowMap, uv + vec2( -dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  texture2DCompare( shadowMap, uv + vec2( 2.0 * dx, 2.0 * dy ), shadowCoord.z ),\n\t\t\t\t\t\t  f.x ),\n\t\t\t\t\t f.y )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#elif defined( SHADOWMAP_TYPE_VSM )\n\t\t\tshadow = VSMShadow( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#else\n\t\t\tshadow = texture2DCompare( shadowMap, shadowCoord.xy, shadowCoord.z );\n\t\t#endif\n\t\t}\n\t\treturn shadow;\n\t}\n\tvec2 cubeToUV( vec3 v, float texelSizeY ) {\n\t\tvec3 absV = abs( v );\n\t\tfloat scaleToCube = 1.0 / max( absV.x, max( absV.y, absV.z ) );\n\t\tabsV *= scaleToCube;\n\t\tv *= scaleToCube * ( 1.0 - 2.0 * texelSizeY );\n\t\tvec2 planar = v.xy;\n\t\tfloat almostATexel = 1.5 * texelSizeY;\n\t\tfloat almostOne = 1.0 - almostATexel;\n\t\tif ( absV.z >= almostOne ) {\n\t\t\tif ( v.z > 0.0 )\n\t\t\t\tplanar.x = 4.0 - v.x;\n\t\t} else if ( absV.x >= almostOne ) {\n\t\t\tfloat signX = sign( v.x );\n\t\t\tplanar.x = v.z * signX + 2.0 * signX;\n\t\t} else if ( absV.y >= almostOne ) {\n\t\t\tfloat signY = sign( v.y );\n\t\t\tplanar.x = v.x + 2.0 * signY + 2.0;\n\t\t\tplanar.y = v.z * signY - 2.0;\n\t\t}\n\t\treturn vec2( 0.125, 0.25 ) * planar + vec2( 0.375, 0.75 );\n\t}\n\tfloat getPointShadow( sampler2D shadowMap, vec2 shadowMapSize, float shadowBias, float shadowRadius, vec4 shadowCoord, float shadowCameraNear, float shadowCameraFar ) {\n\t\tvec2 texelSize = vec2( 1.0 ) / ( shadowMapSize * vec2( 4.0, 2.0 ) );\n\t\tvec3 lightToPosition = shadowCoord.xyz;\n\t\tfloat dp = ( length( lightToPosition ) - shadowCameraNear ) / ( shadowCameraFar - shadowCameraNear );\t\tdp += shadowBias;\n\t\tvec3 bd3D = normalize( lightToPosition );\n\t\t#if defined( SHADOWMAP_TYPE_PCF ) || defined( SHADOWMAP_TYPE_PCF_SOFT ) || defined( SHADOWMAP_TYPE_VSM )\n\t\t\tvec2 offset = vec2( - 1, 1 ) * shadowRadius * texelSize.y;\n\t\t\treturn (\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yyx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxy, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.xxx, texelSize.y ), dp ) +\n\t\t\t\ttexture2DCompare( shadowMap, cubeToUV( bd3D + offset.yxx, texelSize.y ), dp )\n\t\t\t) * ( 1.0 / 9.0 );\n\t\t#else\n\t\t\treturn texture2DCompare( shadowMap, cubeToUV( bd3D, texelSize.y ), dp );\n\t\t#endif\n\t}\n#endif";

	var shadowmap_pars_vertex = "#if NUM_SPOT_LIGHT_COORDS > 0\n\tuniform mat4 spotLightMatrix[ NUM_SPOT_LIGHT_COORDS ];\n\tvarying vec4 vSpotLightCoord[ NUM_SPOT_LIGHT_COORDS ];\n#endif\n#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\tuniform mat4 directionalShadowMatrix[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tvarying vec4 vDirectionalShadowCoord[ NUM_DIR_LIGHT_SHADOWS ];\n\t\tstruct DirectionalLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform DirectionalLightShadow directionalLightShadows[ NUM_DIR_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\t\tstruct SpotLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t};\n\t\tuniform SpotLightShadow spotLightShadows[ NUM_SPOT_LIGHT_SHADOWS ];\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\tuniform mat4 pointShadowMatrix[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tvarying vec4 vPointShadowCoord[ NUM_POINT_LIGHT_SHADOWS ];\n\t\tstruct PointLightShadow {\n\t\t\tfloat shadowBias;\n\t\t\tfloat shadowNormalBias;\n\t\t\tfloat shadowRadius;\n\t\t\tvec2 shadowMapSize;\n\t\t\tfloat shadowCameraNear;\n\t\t\tfloat shadowCameraFar;\n\t\t};\n\t\tuniform PointLightShadow pointLightShadows[ NUM_POINT_LIGHT_SHADOWS ];\n\t#endif\n#endif";

	var shadowmap_vertex = "#if ( defined( USE_SHADOWMAP ) && ( NUM_DIR_LIGHT_SHADOWS > 0 || NUM_POINT_LIGHT_SHADOWS > 0 ) ) || ( NUM_SPOT_LIGHT_COORDS > 0 )\n\tvec3 shadowWorldNormal = inverseTransformDirection( transformedNormal, viewMatrix );\n\tvec4 shadowWorldPosition;\n#endif\n#if defined( USE_SHADOWMAP )\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * directionalLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvDirectionalShadowCoord[ i ] = directionalShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\t\t#pragma unroll_loop_start\n\t\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\t\tshadowWorldPosition = worldPosition + vec4( shadowWorldNormal * pointLightShadows[ i ].shadowNormalBias, 0 );\n\t\t\tvPointShadowCoord[ i ] = pointShadowMatrix[ i ] * shadowWorldPosition;\n\t\t}\n\t\t#pragma unroll_loop_end\n\t#endif\n#endif\n#if NUM_SPOT_LIGHT_COORDS > 0\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_COORDS; i ++ ) {\n\t\tshadowWorldPosition = worldPosition;\n\t\t#if ( defined( USE_SHADOWMAP ) && UNROLLED_LOOP_INDEX < NUM_SPOT_LIGHT_SHADOWS )\n\t\t\tshadowWorldPosition.xyz += shadowWorldNormal * spotLightShadows[ i ].shadowNormalBias;\n\t\t#endif\n\t\tvSpotLightCoord[ i ] = spotLightMatrix[ i ] * shadowWorldPosition;\n\t}\n\t#pragma unroll_loop_end\n#endif";

	var shadowmask_pars_fragment = "float getShadowMask() {\n\tfloat shadow = 1.0;\n\t#ifdef USE_SHADOWMAP\n\t#if NUM_DIR_LIGHT_SHADOWS > 0\n\tDirectionalLightShadow directionalLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_DIR_LIGHT_SHADOWS; i ++ ) {\n\t\tdirectionalLight = directionalLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( directionalShadowMap[ i ], directionalLight.shadowMapSize, directionalLight.shadowBias, directionalLight.shadowRadius, vDirectionalShadowCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_SPOT_LIGHT_SHADOWS > 0\n\tSpotLightShadow spotLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_SPOT_LIGHT_SHADOWS; i ++ ) {\n\t\tspotLight = spotLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getShadow( spotShadowMap[ i ], spotLight.shadowMapSize, spotLight.shadowBias, spotLight.shadowRadius, vSpotLightCoord[ i ] ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#if NUM_POINT_LIGHT_SHADOWS > 0\n\tPointLightShadow pointLight;\n\t#pragma unroll_loop_start\n\tfor ( int i = 0; i < NUM_POINT_LIGHT_SHADOWS; i ++ ) {\n\t\tpointLight = pointLightShadows[ i ];\n\t\tshadow *= receiveShadow ? getPointShadow( pointShadowMap[ i ], pointLight.shadowMapSize, pointLight.shadowBias, pointLight.shadowRadius, vPointShadowCoord[ i ], pointLight.shadowCameraNear, pointLight.shadowCameraFar ) : 1.0;\n\t}\n\t#pragma unroll_loop_end\n\t#endif\n\t#endif\n\treturn shadow;\n}";

	var skinbase_vertex = "#ifdef USE_SKINNING\n\tmat4 boneMatX = getBoneMatrix( skinIndex.x );\n\tmat4 boneMatY = getBoneMatrix( skinIndex.y );\n\tmat4 boneMatZ = getBoneMatrix( skinIndex.z );\n\tmat4 boneMatW = getBoneMatrix( skinIndex.w );\n#endif";

	var skinning_pars_vertex = "#ifdef USE_SKINNING\n\tuniform mat4 bindMatrix;\n\tuniform mat4 bindMatrixInverse;\n\tuniform highp sampler2D boneTexture;\n\tuniform int boneTextureSize;\n\tmat4 getBoneMatrix( const in float i ) {\n\t\tfloat j = i * 4.0;\n\t\tfloat x = mod( j, float( boneTextureSize ) );\n\t\tfloat y = floor( j / float( boneTextureSize ) );\n\t\tfloat dx = 1.0 / float( boneTextureSize );\n\t\tfloat dy = 1.0 / float( boneTextureSize );\n\t\ty = dy * ( y + 0.5 );\n\t\tvec4 v1 = texture2D( boneTexture, vec2( dx * ( x + 0.5 ), y ) );\n\t\tvec4 v2 = texture2D( boneTexture, vec2( dx * ( x + 1.5 ), y ) );\n\t\tvec4 v3 = texture2D( boneTexture, vec2( dx * ( x + 2.5 ), y ) );\n\t\tvec4 v4 = texture2D( boneTexture, vec2( dx * ( x + 3.5 ), y ) );\n\t\tmat4 bone = mat4( v1, v2, v3, v4 );\n\t\treturn bone;\n\t}\n#endif";

	var skinning_vertex = "#ifdef USE_SKINNING\n\tvec4 skinVertex = bindMatrix * vec4( transformed, 1.0 );\n\tvec4 skinned = vec4( 0.0 );\n\tskinned += boneMatX * skinVertex * skinWeight.x;\n\tskinned += boneMatY * skinVertex * skinWeight.y;\n\tskinned += boneMatZ * skinVertex * skinWeight.z;\n\tskinned += boneMatW * skinVertex * skinWeight.w;\n\ttransformed = ( bindMatrixInverse * skinned ).xyz;\n#endif";

	var skinnormal_vertex = "#ifdef USE_SKINNING\n\tmat4 skinMatrix = mat4( 0.0 );\n\tskinMatrix += skinWeight.x * boneMatX;\n\tskinMatrix += skinWeight.y * boneMatY;\n\tskinMatrix += skinWeight.z * boneMatZ;\n\tskinMatrix += skinWeight.w * boneMatW;\n\tskinMatrix = bindMatrixInverse * skinMatrix * bindMatrix;\n\tobjectNormal = vec4( skinMatrix * vec4( objectNormal, 0.0 ) ).xyz;\n\t#ifdef USE_TANGENT\n\t\tobjectTangent = vec4( skinMatrix * vec4( objectTangent, 0.0 ) ).xyz;\n\t#endif\n#endif";

	var specularmap_fragment = "float specularStrength;\n#ifdef USE_SPECULARMAP\n\tvec4 texelSpecular = texture2D( specularMap, vSpecularMapUv );\n\tspecularStrength = texelSpecular.r;\n#else\n\tspecularStrength = 1.0;\n#endif";

	var specularmap_pars_fragment = "#ifdef USE_SPECULARMAP\n\tuniform sampler2D specularMap;\n#endif";

	var tonemapping_fragment = "#if defined( TONE_MAPPING )\n\tgl_FragColor.rgb = toneMapping( gl_FragColor.rgb );\n#endif";

	var tonemapping_pars_fragment = "#ifndef saturate\n#define saturate( a ) clamp( a, 0.0, 1.0 )\n#endif\nuniform float toneMappingExposure;\nvec3 LinearToneMapping( vec3 color ) {\n\treturn saturate( toneMappingExposure * color );\n}\nvec3 ReinhardToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\treturn saturate( color / ( vec3( 1.0 ) + color ) );\n}\nvec3 OptimizedCineonToneMapping( vec3 color ) {\n\tcolor *= toneMappingExposure;\n\tcolor = max( vec3( 0.0 ), color - 0.004 );\n\treturn pow( ( color * ( 6.2 * color + 0.5 ) ) / ( color * ( 6.2 * color + 1.7 ) + 0.06 ), vec3( 2.2 ) );\n}\nvec3 RRTAndODTFit( vec3 v ) {\n\tvec3 a = v * ( v + 0.0245786 ) - 0.000090537;\n\tvec3 b = v * ( 0.983729 * v + 0.4329510 ) + 0.238081;\n\treturn a / b;\n}\nvec3 ACESFilmicToneMapping( vec3 color ) {\n\tconst mat3 ACESInputMat = mat3(\n\t\tvec3( 0.59719, 0.07600, 0.02840 ),\t\tvec3( 0.35458, 0.90834, 0.13383 ),\n\t\tvec3( 0.04823, 0.01566, 0.83777 )\n\t);\n\tconst mat3 ACESOutputMat = mat3(\n\t\tvec3(  1.60475, -0.10208, -0.00327 ),\t\tvec3( -0.53108,  1.10813, -0.07276 ),\n\t\tvec3( -0.07367, -0.00605,  1.07602 )\n\t);\n\tcolor *= toneMappingExposure / 0.6;\n\tcolor = ACESInputMat * color;\n\tcolor = RRTAndODTFit( color );\n\tcolor = ACESOutputMat * color;\n\treturn saturate( color );\n}\nvec3 CustomToneMapping( vec3 color ) { return color; }";

	var transmission_fragment = "#ifdef USE_TRANSMISSION\n\tmaterial.transmission = transmission;\n\tmaterial.transmissionAlpha = 1.0;\n\tmaterial.thickness = thickness;\n\tmaterial.attenuationDistance = attenuationDistance;\n\tmaterial.attenuationColor = attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tmaterial.transmission *= texture2D( transmissionMap, vTransmissionMapUv ).r;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tmaterial.thickness *= texture2D( thicknessMap, vThicknessMapUv ).g;\n\t#endif\n\tvec3 pos = vWorldPosition;\n\tvec3 v = normalize( cameraPosition - pos );\n\tvec3 n = inverseTransformDirection( normal, viewMatrix );\n\tvec4 transmitted = getIBLVolumeRefraction(\n\t\tn, v, material.roughness, material.diffuseColor, material.specularColor, material.specularF90,\n\t\tpos, modelMatrix, viewMatrix, projectionMatrix, material.ior, material.thickness,\n\t\tmaterial.attenuationColor, material.attenuationDistance );\n\tmaterial.transmissionAlpha = mix( material.transmissionAlpha, transmitted.a, material.transmission );\n\ttotalDiffuse = mix( totalDiffuse, transmitted.rgb, material.transmission );\n#endif";

	var transmission_pars_fragment = "#ifdef USE_TRANSMISSION\n\tuniform float transmission;\n\tuniform float thickness;\n\tuniform float attenuationDistance;\n\tuniform vec3 attenuationColor;\n\t#ifdef USE_TRANSMISSIONMAP\n\t\tuniform sampler2D transmissionMap;\n\t#endif\n\t#ifdef USE_THICKNESSMAP\n\t\tuniform sampler2D thicknessMap;\n\t#endif\n\tuniform vec2 transmissionSamplerSize;\n\tuniform sampler2D transmissionSamplerMap;\n\tuniform mat4 modelMatrix;\n\tuniform mat4 projectionMatrix;\n\tvarying vec3 vWorldPosition;\n\tfloat w0( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - a + 3.0 ) - 3.0 ) + 1.0 );\n\t}\n\tfloat w1( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a *  a * ( 3.0 * a - 6.0 ) + 4.0 );\n\t}\n\tfloat w2( float a ){\n\t\treturn ( 1.0 / 6.0 ) * ( a * ( a * ( - 3.0 * a + 3.0 ) + 3.0 ) + 1.0 );\n\t}\n\tfloat w3( float a ) {\n\t\treturn ( 1.0 / 6.0 ) * ( a * a * a );\n\t}\n\tfloat g0( float a ) {\n\t\treturn w0( a ) + w1( a );\n\t}\n\tfloat g1( float a ) {\n\t\treturn w2( a ) + w3( a );\n\t}\n\tfloat h0( float a ) {\n\t\treturn - 1.0 + w1( a ) / ( w0( a ) + w1( a ) );\n\t}\n\tfloat h1( float a ) {\n\t\treturn 1.0 + w3( a ) / ( w2( a ) + w3( a ) );\n\t}\n\tvec4 bicubic( sampler2D tex, vec2 uv, vec4 texelSize, float lod ) {\n\t\tuv = uv * texelSize.zw + 0.5;\n\t\tvec2 iuv = floor( uv );\n\t\tvec2 fuv = fract( uv );\n\t\tfloat g0x = g0( fuv.x );\n\t\tfloat g1x = g1( fuv.x );\n\t\tfloat h0x = h0( fuv.x );\n\t\tfloat h1x = h1( fuv.x );\n\t\tfloat h0y = h0( fuv.y );\n\t\tfloat h1y = h1( fuv.y );\n\t\tvec2 p0 = ( vec2( iuv.x + h0x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p1 = ( vec2( iuv.x + h1x, iuv.y + h0y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p2 = ( vec2( iuv.x + h0x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\tvec2 p3 = ( vec2( iuv.x + h1x, iuv.y + h1y ) - 0.5 ) * texelSize.xy;\n\t\treturn g0( fuv.y ) * ( g0x * textureLod( tex, p0, lod ) + g1x * textureLod( tex, p1, lod ) ) +\n\t\t\tg1( fuv.y ) * ( g0x * textureLod( tex, p2, lod ) + g1x * textureLod( tex, p3, lod ) );\n\t}\n\tvec4 textureBicubic( sampler2D sampler, vec2 uv, float lod ) {\n\t\tvec2 fLodSize = vec2( textureSize( sampler, int( lod ) ) );\n\t\tvec2 cLodSize = vec2( textureSize( sampler, int( lod + 1.0 ) ) );\n\t\tvec2 fLodSizeInv = 1.0 / fLodSize;\n\t\tvec2 cLodSizeInv = 1.0 / cLodSize;\n\t\tvec4 fSample = bicubic( sampler, uv, vec4( fLodSizeInv, fLodSize ), floor( lod ) );\n\t\tvec4 cSample = bicubic( sampler, uv, vec4( cLodSizeInv, cLodSize ), ceil( lod ) );\n\t\treturn mix( fSample, cSample, fract( lod ) );\n\t}\n\tvec3 getVolumeTransmissionRay( const in vec3 n, const in vec3 v, const in float thickness, const in float ior, const in mat4 modelMatrix ) {\n\t\tvec3 refractionVector = refract( - v, normalize( n ), 1.0 / ior );\n\t\tvec3 modelScale;\n\t\tmodelScale.x = length( vec3( modelMatrix[ 0 ].xyz ) );\n\t\tmodelScale.y = length( vec3( modelMatrix[ 1 ].xyz ) );\n\t\tmodelScale.z = length( vec3( modelMatrix[ 2 ].xyz ) );\n\t\treturn normalize( refractionVector ) * thickness * modelScale;\n\t}\n\tfloat applyIorToRoughness( const in float roughness, const in float ior ) {\n\t\treturn roughness * clamp( ior * 2.0 - 2.0, 0.0, 1.0 );\n\t}\n\tvec4 getTransmissionSample( const in vec2 fragCoord, const in float roughness, const in float ior ) {\n\t\tfloat lod = log2( transmissionSamplerSize.x ) * applyIorToRoughness( roughness, ior );\n\t\treturn textureBicubic( transmissionSamplerMap, fragCoord.xy, lod );\n\t}\n\tvec3 volumeAttenuation( const in float transmissionDistance, const in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tif ( isinf( attenuationDistance ) ) {\n\t\t\treturn vec3( 1.0 );\n\t\t} else {\n\t\t\tvec3 attenuationCoefficient = -log( attenuationColor ) / attenuationDistance;\n\t\t\tvec3 transmittance = exp( - attenuationCoefficient * transmissionDistance );\t\t\treturn transmittance;\n\t\t}\n\t}\n\tvec4 getIBLVolumeRefraction( const in vec3 n, const in vec3 v, const in float roughness, const in vec3 diffuseColor,\n\t\tconst in vec3 specularColor, const in float specularF90, const in vec3 position, const in mat4 modelMatrix,\n\t\tconst in mat4 viewMatrix, const in mat4 projMatrix, const in float ior, const in float thickness,\n\t\tconst in vec3 attenuationColor, const in float attenuationDistance ) {\n\t\tvec3 transmissionRay = getVolumeTransmissionRay( n, v, thickness, ior, modelMatrix );\n\t\tvec3 refractedRayExit = position + transmissionRay;\n\t\tvec4 ndcPos = projMatrix * viewMatrix * vec4( refractedRayExit, 1.0 );\n\t\tvec2 refractionCoords = ndcPos.xy / ndcPos.w;\n\t\trefractionCoords += 1.0;\n\t\trefractionCoords /= 2.0;\n\t\tvec4 transmittedLight = getTransmissionSample( refractionCoords, roughness, ior );\n\t\tvec3 transmittance = diffuseColor * volumeAttenuation( length( transmissionRay ), attenuationColor, attenuationDistance );\n\t\tvec3 attenuatedColor = transmittance * transmittedLight.rgb;\n\t\tvec3 F = EnvironmentBRDF( n, v, specularColor, specularF90, roughness );\n\t\tfloat transmittanceFactor = ( transmittance.r + transmittance.g + transmittance.b ) / 3.0;\n\t\treturn vec4( ( 1.0 - F ) * attenuatedColor, 1.0 - ( 1.0 - transmittedLight.a ) * transmittanceFactor );\n\t}\n#endif";

	var uv_pars_fragment = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif";

	var uv_pars_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvarying vec2 vUv;\n#endif\n#ifdef USE_MAP\n\tuniform mat3 mapTransform;\n\tvarying vec2 vMapUv;\n#endif\n#ifdef USE_ALPHAMAP\n\tuniform mat3 alphaMapTransform;\n\tvarying vec2 vAlphaMapUv;\n#endif\n#ifdef USE_LIGHTMAP\n\tuniform mat3 lightMapTransform;\n\tvarying vec2 vLightMapUv;\n#endif\n#ifdef USE_AOMAP\n\tuniform mat3 aoMapTransform;\n\tvarying vec2 vAoMapUv;\n#endif\n#ifdef USE_BUMPMAP\n\tuniform mat3 bumpMapTransform;\n\tvarying vec2 vBumpMapUv;\n#endif\n#ifdef USE_NORMALMAP\n\tuniform mat3 normalMapTransform;\n\tvarying vec2 vNormalMapUv;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tuniform mat3 displacementMapTransform;\n\tvarying vec2 vDisplacementMapUv;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tuniform mat3 emissiveMapTransform;\n\tvarying vec2 vEmissiveMapUv;\n#endif\n#ifdef USE_METALNESSMAP\n\tuniform mat3 metalnessMapTransform;\n\tvarying vec2 vMetalnessMapUv;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tuniform mat3 roughnessMapTransform;\n\tvarying vec2 vRoughnessMapUv;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tuniform mat3 anisotropyMapTransform;\n\tvarying vec2 vAnisotropyMapUv;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tuniform mat3 clearcoatMapTransform;\n\tvarying vec2 vClearcoatMapUv;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tuniform mat3 clearcoatNormalMapTransform;\n\tvarying vec2 vClearcoatNormalMapUv;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tuniform mat3 clearcoatRoughnessMapTransform;\n\tvarying vec2 vClearcoatRoughnessMapUv;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tuniform mat3 sheenColorMapTransform;\n\tvarying vec2 vSheenColorMapUv;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tuniform mat3 sheenRoughnessMapTransform;\n\tvarying vec2 vSheenRoughnessMapUv;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tuniform mat3 iridescenceMapTransform;\n\tvarying vec2 vIridescenceMapUv;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tuniform mat3 iridescenceThicknessMapTransform;\n\tvarying vec2 vIridescenceThicknessMapUv;\n#endif\n#ifdef USE_SPECULARMAP\n\tuniform mat3 specularMapTransform;\n\tvarying vec2 vSpecularMapUv;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tuniform mat3 specularColorMapTransform;\n\tvarying vec2 vSpecularColorMapUv;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tuniform mat3 specularIntensityMapTransform;\n\tvarying vec2 vSpecularIntensityMapUv;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tuniform mat3 transmissionMapTransform;\n\tvarying vec2 vTransmissionMapUv;\n#endif\n#ifdef USE_THICKNESSMAP\n\tuniform mat3 thicknessMapTransform;\n\tvarying vec2 vThicknessMapUv;\n#endif";

	var uv_vertex = "#if defined( USE_UV ) || defined( USE_ANISOTROPY )\n\tvUv = vec3( uv, 1 ).xy;\n#endif\n#ifdef USE_MAP\n\tvMapUv = ( mapTransform * vec3( MAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ALPHAMAP\n\tvAlphaMapUv = ( alphaMapTransform * vec3( ALPHAMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_LIGHTMAP\n\tvLightMapUv = ( lightMapTransform * vec3( LIGHTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_AOMAP\n\tvAoMapUv = ( aoMapTransform * vec3( AOMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_BUMPMAP\n\tvBumpMapUv = ( bumpMapTransform * vec3( BUMPMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_NORMALMAP\n\tvNormalMapUv = ( normalMapTransform * vec3( NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_DISPLACEMENTMAP\n\tvDisplacementMapUv = ( displacementMapTransform * vec3( DISPLACEMENTMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_EMISSIVEMAP\n\tvEmissiveMapUv = ( emissiveMapTransform * vec3( EMISSIVEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_METALNESSMAP\n\tvMetalnessMapUv = ( metalnessMapTransform * vec3( METALNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ROUGHNESSMAP\n\tvRoughnessMapUv = ( roughnessMapTransform * vec3( ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_ANISOTROPYMAP\n\tvAnisotropyMapUv = ( anisotropyMapTransform * vec3( ANISOTROPYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOATMAP\n\tvClearcoatMapUv = ( clearcoatMapTransform * vec3( CLEARCOATMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_NORMALMAP\n\tvClearcoatNormalMapUv = ( clearcoatNormalMapTransform * vec3( CLEARCOAT_NORMALMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_CLEARCOAT_ROUGHNESSMAP\n\tvClearcoatRoughnessMapUv = ( clearcoatRoughnessMapTransform * vec3( CLEARCOAT_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCEMAP\n\tvIridescenceMapUv = ( iridescenceMapTransform * vec3( IRIDESCENCEMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_IRIDESCENCE_THICKNESSMAP\n\tvIridescenceThicknessMapUv = ( iridescenceThicknessMapTransform * vec3( IRIDESCENCE_THICKNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_COLORMAP\n\tvSheenColorMapUv = ( sheenColorMapTransform * vec3( SHEEN_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SHEEN_ROUGHNESSMAP\n\tvSheenRoughnessMapUv = ( sheenRoughnessMapTransform * vec3( SHEEN_ROUGHNESSMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULARMAP\n\tvSpecularMapUv = ( specularMapTransform * vec3( SPECULARMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_COLORMAP\n\tvSpecularColorMapUv = ( specularColorMapTransform * vec3( SPECULAR_COLORMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_SPECULAR_INTENSITYMAP\n\tvSpecularIntensityMapUv = ( specularIntensityMapTransform * vec3( SPECULAR_INTENSITYMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_TRANSMISSIONMAP\n\tvTransmissionMapUv = ( transmissionMapTransform * vec3( TRANSMISSIONMAP_UV, 1 ) ).xy;\n#endif\n#ifdef USE_THICKNESSMAP\n\tvThicknessMapUv = ( thicknessMapTransform * vec3( THICKNESSMAP_UV, 1 ) ).xy;\n#endif";

	var worldpos_vertex = "#if defined( USE_ENVMAP ) || defined( DISTANCE ) || defined ( USE_SHADOWMAP ) || defined ( USE_TRANSMISSION ) || NUM_SPOT_LIGHT_COORDS > 0\n\tvec4 worldPosition = vec4( transformed, 1.0 );\n\t#ifdef USE_INSTANCING\n\t\tworldPosition = instanceMatrix * worldPosition;\n\t#endif\n\tworldPosition = modelMatrix * worldPosition;\n#endif";

	const vertex$h = "varying vec2 vUv;\nuniform mat3 uvTransform;\nvoid main() {\n\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\tgl_Position = vec4( position.xy, 1.0, 1.0 );\n}";

	const fragment$h = "uniform sampler2D t2D;\nuniform float backgroundIntensity;\nvarying vec2 vUv;\nvoid main() {\n\tvec4 texColor = texture2D( t2D, vUv );\n\t#ifdef DECODE_VIDEO_TEXTURE\n\t\ttexColor = vec4( mix( pow( texColor.rgb * 0.9478672986 + vec3( 0.0521327014 ), vec3( 2.4 ) ), texColor.rgb * 0.0773993808, vec3( lessThanEqual( texColor.rgb, vec3( 0.04045 ) ) ) ), texColor.w );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";

	const vertex$g = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";

	const fragment$g = "#ifdef ENVMAP_TYPE_CUBE\n\tuniform samplerCube envMap;\n#elif defined( ENVMAP_TYPE_CUBE_UV )\n\tuniform sampler2D envMap;\n#endif\nuniform float flipEnvMap;\nuniform float backgroundBlurriness;\nuniform float backgroundIntensity;\nvarying vec3 vWorldDirection;\n#include <cube_uv_reflection_fragment>\nvoid main() {\n\t#ifdef ENVMAP_TYPE_CUBE\n\t\tvec4 texColor = textureCube( envMap, vec3( flipEnvMap * vWorldDirection.x, vWorldDirection.yz ) );\n\t#elif defined( ENVMAP_TYPE_CUBE_UV )\n\t\tvec4 texColor = textureCubeUV( envMap, vWorldDirection, backgroundBlurriness );\n\t#else\n\t\tvec4 texColor = vec4( 0.0, 0.0, 0.0, 1.0 );\n\t#endif\n\ttexColor.rgb *= backgroundIntensity;\n\tgl_FragColor = texColor;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";

	const vertex$f = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n\tgl_Position.z = gl_Position.w;\n}";

	const fragment$f = "uniform samplerCube tCube;\nuniform float tFlip;\nuniform float opacity;\nvarying vec3 vWorldDirection;\nvoid main() {\n\tvec4 texColor = textureCube( tCube, vec3( tFlip * vWorldDirection.x, vWorldDirection.yz ) );\n\tgl_FragColor = texColor;\n\tgl_FragColor.a *= opacity;\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";

	const vertex$e = "#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvHighPrecisionZW = gl_Position.zw;\n}";

	const fragment$e = "#if DEPTH_PACKING == 3200\n\tuniform float opacity;\n#endif\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvarying vec2 vHighPrecisionZW;\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#if DEPTH_PACKING == 3200\n\t\tdiffuseColor.a = opacity;\n\t#endif\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <logdepthbuf_fragment>\n\tfloat fragCoordZ = 0.5 * vHighPrecisionZW[0] / vHighPrecisionZW[1] + 0.5;\n\t#if DEPTH_PACKING == 3200\n\t\tgl_FragColor = vec4( vec3( 1.0 - fragCoordZ ), opacity );\n\t#elif DEPTH_PACKING == 3201\n\t\tgl_FragColor = packDepthToRGBA( fragCoordZ );\n\t#endif\n}";

	const vertex$d = "#define DISTANCE\nvarying vec3 vWorldPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <skinbase_vertex>\n\t#ifdef USE_DISPLACEMENTMAP\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <worldpos_vertex>\n\t#include <clipping_planes_vertex>\n\tvWorldPosition = worldPosition.xyz;\n}";

	const fragment$d = "#define DISTANCE\nuniform vec3 referencePosition;\nuniform float nearDistance;\nuniform float farDistance;\nvarying vec3 vWorldPosition;\n#include <common>\n#include <packing>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main () {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( 1.0 );\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\tfloat dist = length( vWorldPosition - referencePosition );\n\tdist = ( dist - nearDistance ) / ( farDistance - nearDistance );\n\tdist = saturate( dist );\n\tgl_FragColor = packDepthToRGBA( dist );\n}";

	const vertex$c = "varying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvWorldDirection = transformDirection( position, modelMatrix );\n\t#include <begin_vertex>\n\t#include <project_vertex>\n}";

	const fragment$c = "uniform sampler2D tEquirect;\nvarying vec3 vWorldDirection;\n#include <common>\nvoid main() {\n\tvec3 direction = normalize( vWorldDirection );\n\tvec2 sampleUV = equirectUv( direction );\n\tgl_FragColor = texture2D( tEquirect, sampleUV );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n}";

	const vertex$b = "uniform float scale;\nattribute float lineDistance;\nvarying float vLineDistance;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\tvLineDistance = scale * lineDistance;\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

	const fragment$b = "uniform vec3 diffuse;\nuniform float opacity;\nuniform float dashSize;\nuniform float totalSize;\nvarying float vLineDistance;\n#include <common>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tif ( mod( vLineDistance, totalSize ) > dashSize ) {\n\t\tdiscard;\n\t}\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

	const vertex$a = "#include <common>\n#include <uv_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#if defined ( USE_ENVMAP ) || defined ( USE_SKINNING )\n\t\t#include <beginnormal_vertex>\n\t\t#include <morphnormal_vertex>\n\t\t#include <skinbase_vertex>\n\t\t#include <skinnormal_vertex>\n\t\t#include <defaultnormal_vertex>\n\t#endif\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <fog_vertex>\n}";

	const fragment$a = "uniform vec3 diffuse;\nuniform float opacity;\n#ifndef FLAT_SHADED\n\tvarying vec3 vNormal;\n#endif\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\t#ifdef USE_LIGHTMAP\n\t\tvec4 lightMapTexel = texture2D( lightMap, vLightMapUv );\n\t\treflectedLight.indirectDiffuse += lightMapTexel.rgb * lightMapIntensity * RECIPROCAL_PI;\n\t#else\n\t\treflectedLight.indirectDiffuse += vec3( 1.0 );\n\t#endif\n\t#include <aomap_fragment>\n\treflectedLight.indirectDiffuse *= diffuseColor.rgb;\n\tvec3 outgoingLight = reflectedLight.indirectDiffuse;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	const vertex$9 = "#define LAMBERT\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

	const fragment$9 = "#define LAMBERT\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_lambert_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_lambert_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	const vertex$8 = "#define MATCAP\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <color_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n\tvViewPosition = - mvPosition.xyz;\n}";

	const fragment$8 = "#define MATCAP\nuniform vec3 diffuse;\nuniform float opacity;\nuniform sampler2D matcap;\nvarying vec3 vViewPosition;\n#include <common>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tvec3 viewDir = normalize( vViewPosition );\n\tvec3 x = normalize( vec3( viewDir.z, 0.0, - viewDir.x ) );\n\tvec3 y = cross( viewDir, x );\n\tvec2 uv = vec2( dot( x, normal ), dot( y, normal ) ) * 0.495 + 0.5;\n\t#ifdef USE_MATCAP\n\t\tvec4 matcapColor = texture2D( matcap, uv );\n\t#else\n\t\tvec4 matcapColor = vec4( vec3( mix( 0.2, 0.8, uv.y ) ), 1.0 );\n\t#endif\n\tvec3 outgoingLight = diffuseColor.rgb * matcapColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	const vertex$7 = "#define NORMAL\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvViewPosition = - mvPosition.xyz;\n#endif\n}";

	const fragment$7 = "#define NORMAL\nuniform float opacity;\n#if defined( FLAT_SHADED ) || defined( USE_BUMPMAP ) || defined( USE_NORMALMAP_TANGENTSPACE )\n\tvarying vec3 vViewPosition;\n#endif\n#include <packing>\n#include <uv_pars_fragment>\n#include <normal_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\t#include <logdepthbuf_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\tgl_FragColor = vec4( packNormalToRGB( normal ), opacity );\n\t#ifdef OPAQUE\n\t\tgl_FragColor.a = 1.0;\n\t#endif\n}";

	const vertex$6 = "#define PHONG\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <envmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <envmap_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

	const fragment$6 = "#define PHONG\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform vec3 specular;\nuniform float shininess;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_phong_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <specularmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <specularmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_phong_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + reflectedLight.directSpecular + reflectedLight.indirectSpecular + totalEmissiveRadiance;\n\t#include <envmap_fragment>\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	const vertex$5 = "#define STANDARD\nvarying vec3 vViewPosition;\n#ifdef USE_TRANSMISSION\n\tvarying vec3 vWorldPosition;\n#endif\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n#ifdef USE_TRANSMISSION\n\tvWorldPosition = worldPosition.xyz;\n#endif\n}";

	const fragment$5 = "#define STANDARD\n#ifdef PHYSICAL\n\t#define IOR\n\t#define USE_SPECULAR\n#endif\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float roughness;\nuniform float metalness;\nuniform float opacity;\n#ifdef IOR\n\tuniform float ior;\n#endif\n#ifdef USE_SPECULAR\n\tuniform float specularIntensity;\n\tuniform vec3 specularColor;\n\t#ifdef USE_SPECULAR_COLORMAP\n\t\tuniform sampler2D specularColorMap;\n\t#endif\n\t#ifdef USE_SPECULAR_INTENSITYMAP\n\t\tuniform sampler2D specularIntensityMap;\n\t#endif\n#endif\n#ifdef USE_CLEARCOAT\n\tuniform float clearcoat;\n\tuniform float clearcoatRoughness;\n#endif\n#ifdef USE_IRIDESCENCE\n\tuniform float iridescence;\n\tuniform float iridescenceIOR;\n\tuniform float iridescenceThicknessMinimum;\n\tuniform float iridescenceThicknessMaximum;\n#endif\n#ifdef USE_SHEEN\n\tuniform vec3 sheenColor;\n\tuniform float sheenRoughness;\n\t#ifdef USE_SHEEN_COLORMAP\n\t\tuniform sampler2D sheenColorMap;\n\t#endif\n\t#ifdef USE_SHEEN_ROUGHNESSMAP\n\t\tuniform sampler2D sheenRoughnessMap;\n\t#endif\n#endif\n#ifdef USE_ANISOTROPY\n\tuniform vec2 anisotropyVector;\n\t#ifdef USE_ANISOTROPYMAP\n\t\tuniform sampler2D anisotropyMap;\n\t#endif\n#endif\nvarying vec3 vViewPosition;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <iridescence_fragment>\n#include <cube_uv_reflection_fragment>\n#include <envmap_common_pars_fragment>\n#include <envmap_physical_pars_fragment>\n#include <fog_pars_fragment>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_physical_pars_fragment>\n#include <transmission_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <clearcoat_pars_fragment>\n#include <iridescence_pars_fragment>\n#include <roughnessmap_pars_fragment>\n#include <metalnessmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <roughnessmap_fragment>\n\t#include <metalnessmap_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <clearcoat_normal_fragment_begin>\n\t#include <clearcoat_normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_physical_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 totalDiffuse = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse;\n\tvec3 totalSpecular = reflectedLight.directSpecular + reflectedLight.indirectSpecular;\n\t#include <transmission_fragment>\n\tvec3 outgoingLight = totalDiffuse + totalSpecular + totalEmissiveRadiance;\n\t#ifdef USE_SHEEN\n\t\tfloat sheenEnergyComp = 1.0 - 0.157 * max3( material.sheenColor );\n\t\toutgoingLight = outgoingLight * sheenEnergyComp + sheenSpecular;\n\t#endif\n\t#ifdef USE_CLEARCOAT\n\t\tfloat dotNVcc = saturate( dot( geometry.clearcoatNormal, geometry.viewDir ) );\n\t\tvec3 Fcc = F_Schlick( material.clearcoatF0, material.clearcoatF90, dotNVcc );\n\t\toutgoingLight = outgoingLight * ( 1.0 - material.clearcoat * Fcc ) + clearcoatSpecular * material.clearcoat;\n\t#endif\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	const vertex$4 = "#define TOON\nvarying vec3 vViewPosition;\n#include <common>\n#include <uv_pars_vertex>\n#include <displacementmap_pars_vertex>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <normal_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <shadowmap_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <normal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <displacementmap_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\tvViewPosition = - mvPosition.xyz;\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

	const fragment$4 = "#define TOON\nuniform vec3 diffuse;\nuniform vec3 emissive;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <dithering_pars_fragment>\n#include <color_pars_fragment>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <aomap_pars_fragment>\n#include <lightmap_pars_fragment>\n#include <emissivemap_pars_fragment>\n#include <gradientmap_pars_fragment>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <normal_pars_fragment>\n#include <lights_toon_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <bumpmap_pars_fragment>\n#include <normalmap_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\tReflectedLight reflectedLight = ReflectedLight( vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ), vec3( 0.0 ) );\n\tvec3 totalEmissiveRadiance = emissive;\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <color_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\t#include <normal_fragment_begin>\n\t#include <normal_fragment_maps>\n\t#include <emissivemap_fragment>\n\t#include <lights_toon_fragment>\n\t#include <lights_fragment_begin>\n\t#include <lights_fragment_maps>\n\t#include <lights_fragment_end>\n\t#include <aomap_fragment>\n\tvec3 outgoingLight = reflectedLight.directDiffuse + reflectedLight.indirectDiffuse + totalEmissiveRadiance;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n\t#include <dithering_fragment>\n}";

	const vertex$3 = "uniform float size;\nuniform float scale;\n#include <common>\n#include <color_pars_vertex>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\n#ifdef USE_POINTS_UV\n\tvarying vec2 vUv;\n\tuniform mat3 uvTransform;\n#endif\nvoid main() {\n\t#ifdef USE_POINTS_UV\n\t\tvUv = ( uvTransform * vec3( uv, 1 ) ).xy;\n\t#endif\n\t#include <color_vertex>\n\t#include <morphcolor_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <project_vertex>\n\tgl_PointSize = size;\n\t#ifdef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) gl_PointSize *= ( scale / - mvPosition.z );\n\t#endif\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <worldpos_vertex>\n\t#include <fog_vertex>\n}";

	const fragment$3 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <color_pars_fragment>\n#include <map_particle_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_particle_fragment>\n\t#include <color_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n\t#include <premultiplied_alpha_fragment>\n}";

	const vertex$2 = "#include <common>\n#include <fog_pars_vertex>\n#include <morphtarget_pars_vertex>\n#include <skinning_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <shadowmap_pars_vertex>\nvoid main() {\n\t#include <beginnormal_vertex>\n\t#include <morphnormal_vertex>\n\t#include <skinbase_vertex>\n\t#include <skinnormal_vertex>\n\t#include <defaultnormal_vertex>\n\t#include <begin_vertex>\n\t#include <morphtarget_vertex>\n\t#include <skinning_vertex>\n\t#include <project_vertex>\n\t#include <logdepthbuf_vertex>\n\t#include <worldpos_vertex>\n\t#include <shadowmap_vertex>\n\t#include <fog_vertex>\n}";

	const fragment$2 = "uniform vec3 color;\nuniform float opacity;\n#include <common>\n#include <packing>\n#include <fog_pars_fragment>\n#include <bsdfs>\n#include <lights_pars_begin>\n#include <logdepthbuf_pars_fragment>\n#include <shadowmap_pars_fragment>\n#include <shadowmask_pars_fragment>\nvoid main() {\n\t#include <logdepthbuf_fragment>\n\tgl_FragColor = vec4( color, opacity * ( 1.0 - getShadowMask() ) );\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}";

	const vertex$1 = "uniform float rotation;\nuniform vec2 center;\n#include <common>\n#include <uv_pars_vertex>\n#include <fog_pars_vertex>\n#include <logdepthbuf_pars_vertex>\n#include <clipping_planes_pars_vertex>\nvoid main() {\n\t#include <uv_vertex>\n\tvec4 mvPosition = modelViewMatrix * vec4( 0.0, 0.0, 0.0, 1.0 );\n\tvec2 scale;\n\tscale.x = length( vec3( modelMatrix[ 0 ].x, modelMatrix[ 0 ].y, modelMatrix[ 0 ].z ) );\n\tscale.y = length( vec3( modelMatrix[ 1 ].x, modelMatrix[ 1 ].y, modelMatrix[ 1 ].z ) );\n\t#ifndef USE_SIZEATTENUATION\n\t\tbool isPerspective = isPerspectiveMatrix( projectionMatrix );\n\t\tif ( isPerspective ) scale *= - mvPosition.z;\n\t#endif\n\tvec2 alignedPosition = ( position.xy - ( center - vec2( 0.5 ) ) ) * scale;\n\tvec2 rotatedPosition;\n\trotatedPosition.x = cos( rotation ) * alignedPosition.x - sin( rotation ) * alignedPosition.y;\n\trotatedPosition.y = sin( rotation ) * alignedPosition.x + cos( rotation ) * alignedPosition.y;\n\tmvPosition.xy += rotatedPosition;\n\tgl_Position = projectionMatrix * mvPosition;\n\t#include <logdepthbuf_vertex>\n\t#include <clipping_planes_vertex>\n\t#include <fog_vertex>\n}";

	const fragment$1 = "uniform vec3 diffuse;\nuniform float opacity;\n#include <common>\n#include <uv_pars_fragment>\n#include <map_pars_fragment>\n#include <alphamap_pars_fragment>\n#include <alphatest_pars_fragment>\n#include <alphahash_pars_fragment>\n#include <fog_pars_fragment>\n#include <logdepthbuf_pars_fragment>\n#include <clipping_planes_pars_fragment>\nvoid main() {\n\t#include <clipping_planes_fragment>\n\tvec3 outgoingLight = vec3( 0.0 );\n\tvec4 diffuseColor = vec4( diffuse, opacity );\n\t#include <logdepthbuf_fragment>\n\t#include <map_fragment>\n\t#include <alphamap_fragment>\n\t#include <alphatest_fragment>\n\t#include <alphahash_fragment>\n\toutgoingLight = diffuseColor.rgb;\n\t#include <opaque_fragment>\n\t#include <tonemapping_fragment>\n\t#include <colorspace_fragment>\n\t#include <fog_fragment>\n}";

	const ShaderChunk = {
		alphahash_fragment: alphahash_fragment,
		alphahash_pars_fragment: alphahash_pars_fragment,
		alphamap_fragment: alphamap_fragment,
		alphamap_pars_fragment: alphamap_pars_fragment,
		alphatest_fragment: alphatest_fragment,
		alphatest_pars_fragment: alphatest_pars_fragment,
		aomap_fragment: aomap_fragment,
		aomap_pars_fragment: aomap_pars_fragment,
		begin_vertex: begin_vertex,
		beginnormal_vertex: beginnormal_vertex,
		bsdfs: bsdfs,
		iridescence_fragment: iridescence_fragment,
		bumpmap_pars_fragment: bumpmap_pars_fragment,
		clipping_planes_fragment: clipping_planes_fragment,
		clipping_planes_pars_fragment: clipping_planes_pars_fragment,
		clipping_planes_pars_vertex: clipping_planes_pars_vertex,
		clipping_planes_vertex: clipping_planes_vertex,
		color_fragment: color_fragment,
		color_pars_fragment: color_pars_fragment,
		color_pars_vertex: color_pars_vertex,
		color_vertex: color_vertex,
		common: common,
		cube_uv_reflection_fragment: cube_uv_reflection_fragment,
		defaultnormal_vertex: defaultnormal_vertex,
		displacementmap_pars_vertex: displacementmap_pars_vertex,
		displacementmap_vertex: displacementmap_vertex,
		emissivemap_fragment: emissivemap_fragment,
		emissivemap_pars_fragment: emissivemap_pars_fragment,
		colorspace_fragment: colorspace_fragment,
		colorspace_pars_fragment: colorspace_pars_fragment,
		envmap_fragment: envmap_fragment,
		envmap_common_pars_fragment: envmap_common_pars_fragment,
		envmap_pars_fragment: envmap_pars_fragment,
		envmap_pars_vertex: envmap_pars_vertex,
		envmap_physical_pars_fragment: envmap_physical_pars_fragment,
		envmap_vertex: envmap_vertex,
		fog_vertex: fog_vertex,
		fog_pars_vertex: fog_pars_vertex,
		fog_fragment: fog_fragment,
		fog_pars_fragment: fog_pars_fragment,
		gradientmap_pars_fragment: gradientmap_pars_fragment,
		lightmap_fragment: lightmap_fragment,
		lightmap_pars_fragment: lightmap_pars_fragment,
		lights_lambert_fragment: lights_lambert_fragment,
		lights_lambert_pars_fragment: lights_lambert_pars_fragment,
		lights_pars_begin: lights_pars_begin,
		lights_toon_fragment: lights_toon_fragment,
		lights_toon_pars_fragment: lights_toon_pars_fragment,
		lights_phong_fragment: lights_phong_fragment,
		lights_phong_pars_fragment: lights_phong_pars_fragment,
		lights_physical_fragment: lights_physical_fragment,
		lights_physical_pars_fragment: lights_physical_pars_fragment,
		lights_fragment_begin: lights_fragment_begin,
		lights_fragment_maps: lights_fragment_maps,
		lights_fragment_end: lights_fragment_end,
		logdepthbuf_fragment: logdepthbuf_fragment,
		logdepthbuf_pars_fragment: logdepthbuf_pars_fragment,
		logdepthbuf_pars_vertex: logdepthbuf_pars_vertex,
		logdepthbuf_vertex: logdepthbuf_vertex,
		map_fragment: map_fragment,
		map_pars_fragment: map_pars_fragment,
		map_particle_fragment: map_particle_fragment,
		map_particle_pars_fragment: map_particle_pars_fragment,
		metalnessmap_fragment: metalnessmap_fragment,
		metalnessmap_pars_fragment: metalnessmap_pars_fragment,
		morphcolor_vertex: morphcolor_vertex,
		morphnormal_vertex: morphnormal_vertex,
		morphtarget_pars_vertex: morphtarget_pars_vertex,
		morphtarget_vertex: morphtarget_vertex,
		normal_fragment_begin: normal_fragment_begin,
		normal_fragment_maps: normal_fragment_maps,
		normal_pars_fragment: normal_pars_fragment,
		normal_pars_vertex: normal_pars_vertex,
		normal_vertex: normal_vertex,
		normalmap_pars_fragment: normalmap_pars_fragment,
		clearcoat_normal_fragment_begin: clearcoat_normal_fragment_begin,
		clearcoat_normal_fragment_maps: clearcoat_normal_fragment_maps,
		clearcoat_pars_fragment: clearcoat_pars_fragment,
		iridescence_pars_fragment: iridescence_pars_fragment,
		opaque_fragment: opaque_fragment,
		packing: packing,
		premultiplied_alpha_fragment: premultiplied_alpha_fragment,
		project_vertex: project_vertex,
		dithering_fragment: dithering_fragment,
		dithering_pars_fragment: dithering_pars_fragment,
		roughnessmap_fragment: roughnessmap_fragment,
		roughnessmap_pars_fragment: roughnessmap_pars_fragment,
		shadowmap_pars_fragment: shadowmap_pars_fragment,
		shadowmap_pars_vertex: shadowmap_pars_vertex,
		shadowmap_vertex: shadowmap_vertex,
		shadowmask_pars_fragment: shadowmask_pars_fragment,
		skinbase_vertex: skinbase_vertex,
		skinning_pars_vertex: skinning_pars_vertex,
		skinning_vertex: skinning_vertex,
		skinnormal_vertex: skinnormal_vertex,
		specularmap_fragment: specularmap_fragment,
		specularmap_pars_fragment: specularmap_pars_fragment,
		tonemapping_fragment: tonemapping_fragment,
		tonemapping_pars_fragment: tonemapping_pars_fragment,
		transmission_fragment: transmission_fragment,
		transmission_pars_fragment: transmission_pars_fragment,
		uv_pars_fragment: uv_pars_fragment,
		uv_pars_vertex: uv_pars_vertex,
		uv_vertex: uv_vertex,
		worldpos_vertex: worldpos_vertex,

		background_vert: vertex$h,
		background_frag: fragment$h,
		backgroundCube_vert: vertex$g,
		backgroundCube_frag: fragment$g,
		cube_vert: vertex$f,
		cube_frag: fragment$f,
		depth_vert: vertex$e,
		depth_frag: fragment$e,
		distanceRGBA_vert: vertex$d,
		distanceRGBA_frag: fragment$d,
		equirect_vert: vertex$c,
		equirect_frag: fragment$c,
		linedashed_vert: vertex$b,
		linedashed_frag: fragment$b,
		meshbasic_vert: vertex$a,
		meshbasic_frag: fragment$a,
		meshlambert_vert: vertex$9,
		meshlambert_frag: fragment$9,
		meshmatcap_vert: vertex$8,
		meshmatcap_frag: fragment$8,
		meshnormal_vert: vertex$7,
		meshnormal_frag: fragment$7,
		meshphong_vert: vertex$6,
		meshphong_frag: fragment$6,
		meshphysical_vert: vertex$5,
		meshphysical_frag: fragment$5,
		meshtoon_vert: vertex$4,
		meshtoon_frag: fragment$4,
		points_vert: vertex$3,
		points_frag: fragment$3,
		shadow_vert: vertex$2,
		shadow_frag: fragment$2,
		sprite_vert: vertex$1,
		sprite_frag: fragment$1
	};

	/**
	 * Uniforms library for shared webgl shaders
	 */

	const UniformsLib = {

		common: {

			diffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },
			opacity: { value: 1.0 },

			map: { value: null },
			mapTransform: { value: /*@__PURE__*/ new Matrix3() },

			alphaMap: { value: null },
			alphaMapTransform: { value: /*@__PURE__*/ new Matrix3() },

			alphaTest: { value: 0 }

		},

		specularmap: {

			specularMap: { value: null },
			specularMapTransform: { value: /*@__PURE__*/ new Matrix3() }

		},

		envmap: {

			envMap: { value: null },
			flipEnvMap: { value: - 1 },
			reflectivity: { value: 1.0 }, // basic, lambert, phong
			ior: { value: 1.5 }, // physical
			refractionRatio: { value: 0.98 }, // basic, lambert, phong

		},

		aomap: {

			aoMap: { value: null },
			aoMapIntensity: { value: 1 },
			aoMapTransform: { value: /*@__PURE__*/ new Matrix3() }

		},

		lightmap: {

			lightMap: { value: null },
			lightMapIntensity: { value: 1 },
			lightMapTransform: { value: /*@__PURE__*/ new Matrix3() }

		},

		bumpmap: {

			bumpMap: { value: null },
			bumpMapTransform: { value: /*@__PURE__*/ new Matrix3() },
			bumpScale: { value: 1 }

		},

		normalmap: {

			normalMap: { value: null },
			normalMapTransform: { value: /*@__PURE__*/ new Matrix3() },
			normalScale: { value: /*@__PURE__*/ new Vector2( 1, 1 ) }

		},

		displacementmap: {

			displacementMap: { value: null },
			displacementMapTransform: { value: /*@__PURE__*/ new Matrix3() },
			displacementScale: { value: 1 },
			displacementBias: { value: 0 }

		},

		emissivemap: {

			emissiveMap: { value: null },
			emissiveMapTransform: { value: /*@__PURE__*/ new Matrix3() }

		},

		metalnessmap: {

			metalnessMap: { value: null },
			metalnessMapTransform: { value: /*@__PURE__*/ new Matrix3() }

		},

		roughnessmap: {

			roughnessMap: { value: null },
			roughnessMapTransform: { value: /*@__PURE__*/ new Matrix3() }

		},

		gradientmap: {

			gradientMap: { value: null }

		},

		fog: {

			fogDensity: { value: 0.00025 },
			fogNear: { value: 1 },
			fogFar: { value: 2000 },
			fogColor: { value: /*@__PURE__*/ new Color( 0xffffff ) }

		},

		lights: {

			ambientLightColor: { value: [] },

			lightProbe: { value: [] },

			directionalLights: { value: [], properties: {
				direction: {},
				color: {}
			} },

			directionalLightShadows: { value: [], properties: {
				shadowBias: {},
				shadowNormalBias: {},
				shadowRadius: {},
				shadowMapSize: {}
			} },

			directionalShadowMap: { value: [] },
			directionalShadowMatrix: { value: [] },

			spotLights: { value: [], properties: {
				color: {},
				position: {},
				direction: {},
				distance: {},
				coneCos: {},
				penumbraCos: {},
				decay: {}
			} },

			spotLightShadows: { value: [], properties: {
				shadowBias: {},
				shadowNormalBias: {},
				shadowRadius: {},
				shadowMapSize: {}
			} },

			spotLightMap: { value: [] },
			spotShadowMap: { value: [] },
			spotLightMatrix: { value: [] },

			pointLights: { value: [], properties: {
				color: {},
				position: {},
				decay: {},
				distance: {}
			} },

			pointLightShadows: { value: [], properties: {
				shadowBias: {},
				shadowNormalBias: {},
				shadowRadius: {},
				shadowMapSize: {},
				shadowCameraNear: {},
				shadowCameraFar: {}
			} },

			pointShadowMap: { value: [] },
			pointShadowMatrix: { value: [] },

			hemisphereLights: { value: [], properties: {
				direction: {},
				skyColor: {},
				groundColor: {}
			} },

			// TODO (abelnation): RectAreaLight BRDF data needs to be moved from example to main src
			rectAreaLights: { value: [], properties: {
				color: {},
				position: {},
				width: {},
				height: {}
			} },

			ltc_1: { value: null },
			ltc_2: { value: null }

		},

		points: {

			diffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },
			opacity: { value: 1.0 },
			size: { value: 1.0 },
			scale: { value: 1.0 },
			map: { value: null },
			alphaMap: { value: null },
			alphaMapTransform: { value: /*@__PURE__*/ new Matrix3() },
			alphaTest: { value: 0 },
			uvTransform: { value: /*@__PURE__*/ new Matrix3() }

		},

		sprite: {

			diffuse: { value: /*@__PURE__*/ new Color( 0xffffff ) },
			opacity: { value: 1.0 },
			center: { value: /*@__PURE__*/ new Vector2( 0.5, 0.5 ) },
			rotation: { value: 0.0 },
			map: { value: null },
			mapTransform: { value: /*@__PURE__*/ new Matrix3() },
			alphaMap: { value: null },
			alphaMapTransform: { value: /*@__PURE__*/ new Matrix3() },
			alphaTest: { value: 0 }

		}

	};

	const ShaderLib = {

		basic: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.common,
				UniformsLib.specularmap,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.fog
			] ),

			vertexShader: ShaderChunk.meshbasic_vert,
			fragmentShader: ShaderChunk.meshbasic_frag

		},

		lambert: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.common,
				UniformsLib.specularmap,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.fog,
				UniformsLib.lights,
				{
					emissive: { value: /*@__PURE__*/ new Color( 0x000000 ) }
				}
			] ),

			vertexShader: ShaderChunk.meshlambert_vert,
			fragmentShader: ShaderChunk.meshlambert_frag

		},

		phong: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.common,
				UniformsLib.specularmap,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.fog,
				UniformsLib.lights,
				{
					emissive: { value: /*@__PURE__*/ new Color( 0x000000 ) },
					specular: { value: /*@__PURE__*/ new Color( 0x111111 ) },
					shininess: { value: 30 }
				}
			] ),

			vertexShader: ShaderChunk.meshphong_vert,
			fragmentShader: ShaderChunk.meshphong_frag

		},

		standard: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.common,
				UniformsLib.envmap,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.roughnessmap,
				UniformsLib.metalnessmap,
				UniformsLib.fog,
				UniformsLib.lights,
				{
					emissive: { value: /*@__PURE__*/ new Color( 0x000000 ) },
					roughness: { value: 1.0 },
					metalness: { value: 0.0 },
					envMapIntensity: { value: 1 } // temporary
				}
			] ),

			vertexShader: ShaderChunk.meshphysical_vert,
			fragmentShader: ShaderChunk.meshphysical_frag

		},

		toon: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.common,
				UniformsLib.aomap,
				UniformsLib.lightmap,
				UniformsLib.emissivemap,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.gradientmap,
				UniformsLib.fog,
				UniformsLib.lights,
				{
					emissive: { value: /*@__PURE__*/ new Color( 0x000000 ) }
				}
			] ),

			vertexShader: ShaderChunk.meshtoon_vert,
			fragmentShader: ShaderChunk.meshtoon_frag

		},

		matcap: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.common,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				UniformsLib.fog,
				{
					matcap: { value: null }
				}
			] ),

			vertexShader: ShaderChunk.meshmatcap_vert,
			fragmentShader: ShaderChunk.meshmatcap_frag

		},

		points: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.points,
				UniformsLib.fog
			] ),

			vertexShader: ShaderChunk.points_vert,
			fragmentShader: ShaderChunk.points_frag

		},

		dashed: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.common,
				UniformsLib.fog,
				{
					scale: { value: 1 },
					dashSize: { value: 1 },
					totalSize: { value: 2 }
				}
			] ),

			vertexShader: ShaderChunk.linedashed_vert,
			fragmentShader: ShaderChunk.linedashed_frag

		},

		depth: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.common,
				UniformsLib.displacementmap
			] ),

			vertexShader: ShaderChunk.depth_vert,
			fragmentShader: ShaderChunk.depth_frag

		},

		normal: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.common,
				UniformsLib.bumpmap,
				UniformsLib.normalmap,
				UniformsLib.displacementmap,
				{
					opacity: { value: 1.0 }
				}
			] ),

			vertexShader: ShaderChunk.meshnormal_vert,
			fragmentShader: ShaderChunk.meshnormal_frag

		},

		sprite: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.sprite,
				UniformsLib.fog
			] ),

			vertexShader: ShaderChunk.sprite_vert,
			fragmentShader: ShaderChunk.sprite_frag

		},

		background: {

			uniforms: {
				uvTransform: { value: /*@__PURE__*/ new Matrix3() },
				t2D: { value: null },
				backgroundIntensity: { value: 1 }
			},

			vertexShader: ShaderChunk.background_vert,
			fragmentShader: ShaderChunk.background_frag

		},

		backgroundCube: {

			uniforms: {
				envMap: { value: null },
				flipEnvMap: { value: - 1 },
				backgroundBlurriness: { value: 0 },
				backgroundIntensity: { value: 1 }
			},

			vertexShader: ShaderChunk.backgroundCube_vert,
			fragmentShader: ShaderChunk.backgroundCube_frag

		},

		cube: {

			uniforms: {
				tCube: { value: null },
				tFlip: { value: - 1 },
				opacity: { value: 1.0 }
			},

			vertexShader: ShaderChunk.cube_vert,
			fragmentShader: ShaderChunk.cube_frag

		},

		equirect: {

			uniforms: {
				tEquirect: { value: null },
			},

			vertexShader: ShaderChunk.equirect_vert,
			fragmentShader: ShaderChunk.equirect_frag

		},

		distanceRGBA: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.common,
				UniformsLib.displacementmap,
				{
					referencePosition: { value: /*@__PURE__*/ new Vector3() },
					nearDistance: { value: 1 },
					farDistance: { value: 1000 }
				}
			] ),

			vertexShader: ShaderChunk.distanceRGBA_vert,
			fragmentShader: ShaderChunk.distanceRGBA_frag

		},

		shadow: {

			uniforms: /*@__PURE__*/ mergeUniforms( [
				UniformsLib.lights,
				UniformsLib.fog,
				{
					color: { value: /*@__PURE__*/ new Color( 0x00000 ) },
					opacity: { value: 1.0 }
				},
			] ),

			vertexShader: ShaderChunk.shadow_vert,
			fragmentShader: ShaderChunk.shadow_frag

		}

	};

	ShaderLib.physical = {

		uniforms: /*@__PURE__*/ mergeUniforms( [
			ShaderLib.standard.uniforms,
			{
				clearcoat: { value: 0 },
				clearcoatMap: { value: null },
				clearcoatMapTransform: { value: /*@__PURE__*/ new Matrix3() },
				clearcoatNormalMap: { value: null },
				clearcoatNormalMapTransform: { value: /*@__PURE__*/ new Matrix3() },
				clearcoatNormalScale: { value: /*@__PURE__*/ new Vector2( 1, 1 ) },
				clearcoatRoughness: { value: 0 },
				clearcoatRoughnessMap: { value: null },
				clearcoatRoughnessMapTransform: { value: /*@__PURE__*/ new Matrix3() },
				iridescence: { value: 0 },
				iridescenceMap: { value: null },
				iridescenceMapTransform: { value: /*@__PURE__*/ new Matrix3() },
				iridescenceIOR: { value: 1.3 },
				iridescenceThicknessMinimum: { value: 100 },
				iridescenceThicknessMaximum: { value: 400 },
				iridescenceThicknessMap: { value: null },
				iridescenceThicknessMapTransform: { value: /*@__PURE__*/ new Matrix3() },
				sheen: { value: 0 },
				sheenColor: { value: /*@__PURE__*/ new Color( 0x000000 ) },
				sheenColorMap: { value: null },
				sheenColorMapTransform: { value: /*@__PURE__*/ new Matrix3() },
				sheenRoughness: { value: 1 },
				sheenRoughnessMap: { value: null },
				sheenRoughnessMapTransform: { value: /*@__PURE__*/ new Matrix3() },
				transmission: { value: 0 },
				transmissionMap: { value: null },
				transmissionMapTransform: { value: /*@__PURE__*/ new Matrix3() },
				transmissionSamplerSize: { value: /*@__PURE__*/ new Vector2() },
				transmissionSamplerMap: { value: null },
				thickness: { value: 0 },
				thicknessMap: { value: null },
				thicknessMapTransform: { value: /*@__PURE__*/ new Matrix3() },
				attenuationDistance: { value: 0 },
				attenuationColor: { value: /*@__PURE__*/ new Color( 0x000000 ) },
				specularColor: { value: /*@__PURE__*/ new Color( 1, 1, 1 ) },
				specularColorMap: { value: null },
				specularColorMapTransform: { value: /*@__PURE__*/ new Matrix3() },
				specularIntensity: { value: 1 },
				specularIntensityMap: { value: null },
				specularIntensityMapTransform: { value: /*@__PURE__*/ new Matrix3() },
				anisotropyVector: { value: /*@__PURE__*/ new Vector2() },
				anisotropyMap: { value: null },
				anisotropyMapTransform: { value: /*@__PURE__*/ new Matrix3() },
			}
		] ),

		vertexShader: ShaderChunk.meshphysical_vert,
		fragmentShader: ShaderChunk.meshphysical_frag

	};

	const _rgb = { r: 0, b: 0, g: 0 };

	function WebGLBackground( renderer, cubemaps, cubeuvmaps, state, objects, alpha, premultipliedAlpha ) {

		const clearColor = new Color( 0x000000 );
		let clearAlpha = alpha === true ? 0 : 1;

		let planeMesh;
		let boxMesh;

		let currentBackground = null;
		let currentBackgroundVersion = 0;
		let currentTonemapping = null;

		function render( renderList, scene ) {

			let forceClear = false;
			let background = scene.isScene === true ? scene.background : null;

			if ( background && background.isTexture ) {

				const usePMREM = scene.backgroundBlurriness > 0; // use PMREM if the user wants to blur the background
				background = ( usePMREM ? cubeuvmaps : cubemaps ).get( background );

			}

			if ( background === null ) {

				setClear( clearColor, clearAlpha );

			} else if ( background && background.isColor ) {

				setClear( background, 1 );
				forceClear = true;

			}

			const environmentBlendMode = renderer.xr.getEnvironmentBlendMode();

			if ( environmentBlendMode === 'additive' ) {

				state.buffers.color.setClear( 0, 0, 0, 1, premultipliedAlpha );

			} else if ( environmentBlendMode === 'alpha-blend' ) {

				state.buffers.color.setClear( 0, 0, 0, 0, premultipliedAlpha );

			}

			if ( renderer.autoClear || forceClear ) {

				renderer.clear( renderer.autoClearColor, renderer.autoClearDepth, renderer.autoClearStencil );

			}

			if ( background && ( background.isCubeTexture || background.mapping === CubeUVReflectionMapping ) ) {

				if ( boxMesh === undefined ) {

					boxMesh = new Mesh(
						new BoxGeometry( 1, 1, 1 ),
						new ShaderMaterial( {
							name: 'BackgroundCubeMaterial',
							uniforms: cloneUniforms( ShaderLib.backgroundCube.uniforms ),
							vertexShader: ShaderLib.backgroundCube.vertexShader,
							fragmentShader: ShaderLib.backgroundCube.fragmentShader,
							side: BackSide,
							depthTest: false,
							depthWrite: false,
							fog: false
						} )
					);

					boxMesh.geometry.deleteAttribute( 'normal' );
					boxMesh.geometry.deleteAttribute( 'uv' );

					boxMesh.onBeforeRender = function ( renderer, scene, camera ) {

						this.matrixWorld.copyPosition( camera.matrixWorld );

					};

					// add "envMap" material property so the renderer can evaluate it like for built-in materials
					Object.defineProperty( boxMesh.material, 'envMap', {

						get: function () {

							return this.uniforms.envMap.value;

						}

					} );

					objects.update( boxMesh );

				}

				boxMesh.material.uniforms.envMap.value = background;
				boxMesh.material.uniforms.flipEnvMap.value = ( background.isCubeTexture && background.isRenderTargetTexture === false ) ? - 1 : 1;
				boxMesh.material.uniforms.backgroundBlurriness.value = scene.backgroundBlurriness;
				boxMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
				boxMesh.material.toneMapped = ( background.colorSpace === SRGBColorSpace ) ? false : true;

				if ( currentBackground !== background ||
					currentBackgroundVersion !== background.version ||
					currentTonemapping !== renderer.toneMapping ) {

					boxMesh.material.needsUpdate = true;

					currentBackground = background;
					currentBackgroundVersion = background.version;
					currentTonemapping = renderer.toneMapping;

				}

				boxMesh.layers.enableAll();

				// push to the pre-sorted opaque render list
				renderList.unshift( boxMesh, boxMesh.geometry, boxMesh.material, 0, 0, null );

			} else if ( background && background.isTexture ) {

				if ( planeMesh === undefined ) {

					planeMesh = new Mesh(
						new PlaneGeometry( 2, 2 ),
						new ShaderMaterial( {
							name: 'BackgroundMaterial',
							uniforms: cloneUniforms( ShaderLib.background.uniforms ),
							vertexShader: ShaderLib.background.vertexShader,
							fragmentShader: ShaderLib.background.fragmentShader,
							side: FrontSide,
							depthTest: false,
							depthWrite: false,
							fog: false
						} )
					);

					planeMesh.geometry.deleteAttribute( 'normal' );

					// add "map" material property so the renderer can evaluate it like for built-in materials
					Object.defineProperty( planeMesh.material, 'map', {

						get: function () {

							return this.uniforms.t2D.value;

						}

					} );

					objects.update( planeMesh );

				}

				planeMesh.material.uniforms.t2D.value = background;
				planeMesh.material.uniforms.backgroundIntensity.value = scene.backgroundIntensity;
				planeMesh.material.toneMapped = ( background.colorSpace === SRGBColorSpace ) ? false : true;

				if ( background.matrixAutoUpdate === true ) {

					background.updateMatrix();

				}

				planeMesh.material.uniforms.uvTransform.value.copy( background.matrix );

				if ( currentBackground !== background ||
					currentBackgroundVersion !== background.version ||
					currentTonemapping !== renderer.toneMapping ) {

					planeMesh.material.needsUpdate = true;

					currentBackground = background;
					currentBackgroundVersion = background.version;
					currentTonemapping = renderer.toneMapping;

				}

				planeMesh.layers.enableAll();

				// push to the pre-sorted opaque render list
				renderList.unshift( planeMesh, planeMesh.geometry, planeMesh.material, 0, 0, null );

			}

		}

		function setClear( color, alpha ) {

			color.getRGB( _rgb, getUnlitUniformColorSpace( renderer ) );

			state.buffers.color.setClear( _rgb.r, _rgb.g, _rgb.b, alpha, premultipliedAlpha );

		}

		return {

			getClearColor: function () {

				return clearColor;

			},
			setClearColor: function ( color, alpha = 1 ) {

				clearColor.set( color );
				clearAlpha = alpha;
				setClear( clearColor, clearAlpha );

			},
			getClearAlpha: function () {

				return clearAlpha;

			},
			setClearAlpha: function ( alpha ) {

				clearAlpha = alpha;
				setClear( clearColor, clearAlpha );

			},
			render: render

		};

	}

	function WebGLBindingStates( gl, extensions, attributes, capabilities ) {

		const maxVertexAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );

		const extension = capabilities.isWebGL2 ? null : extensions.get( 'OES_vertex_array_object' );
		const vaoAvailable = capabilities.isWebGL2 || extension !== null;

		const bindingStates = {};

		const defaultState = createBindingState( null );
		let currentState = defaultState;
		let forceUpdate = false;

		function setup( object, material, program, geometry, index ) {

			let updateBuffers = false;

			if ( vaoAvailable ) {

				const state = getBindingState( geometry, program, material );

				if ( currentState !== state ) {

					currentState = state;
					bindVertexArrayObject( currentState.object );

				}

				updateBuffers = needsUpdate( object, geometry, program, index );

				if ( updateBuffers ) saveCache( object, geometry, program, index );

			} else {

				const wireframe = ( material.wireframe === true );

				if ( currentState.geometry !== geometry.id ||
					currentState.program !== program.id ||
					currentState.wireframe !== wireframe ) {

					currentState.geometry = geometry.id;
					currentState.program = program.id;
					currentState.wireframe = wireframe;

					updateBuffers = true;

				}

			}

			if ( index !== null ) {

				attributes.update( index, gl.ELEMENT_ARRAY_BUFFER );

			}

			if ( updateBuffers || forceUpdate ) {

				forceUpdate = false;

				setupVertexAttributes( object, material, program, geometry );

				if ( index !== null ) {

					gl.bindBuffer( gl.ELEMENT_ARRAY_BUFFER, attributes.get( index ).buffer );

				}

			}

		}

		function createVertexArrayObject() {

			if ( capabilities.isWebGL2 ) return gl.createVertexArray();

			return extension.createVertexArrayOES();

		}

		function bindVertexArrayObject( vao ) {

			if ( capabilities.isWebGL2 ) return gl.bindVertexArray( vao );

			return extension.bindVertexArrayOES( vao );

		}

		function deleteVertexArrayObject( vao ) {

			if ( capabilities.isWebGL2 ) return gl.deleteVertexArray( vao );

			return extension.deleteVertexArrayOES( vao );

		}

		function getBindingState( geometry, program, material ) {

			const wireframe = ( material.wireframe === true );

			let programMap = bindingStates[ geometry.id ];

			if ( programMap === undefined ) {

				programMap = {};
				bindingStates[ geometry.id ] = programMap;

			}

			let stateMap = programMap[ program.id ];

			if ( stateMap === undefined ) {

				stateMap = {};
				programMap[ program.id ] = stateMap;

			}

			let state = stateMap[ wireframe ];

			if ( state === undefined ) {

				state = createBindingState( createVertexArrayObject() );
				stateMap[ wireframe ] = state;

			}

			return state;

		}

		function createBindingState( vao ) {

			const newAttributes = [];
			const enabledAttributes = [];
			const attributeDivisors = [];

			for ( let i = 0; i < maxVertexAttributes; i ++ ) {

				newAttributes[ i ] = 0;
				enabledAttributes[ i ] = 0;
				attributeDivisors[ i ] = 0;

			}

			return {

				// for backward compatibility on non-VAO support browser
				geometry: null,
				program: null,
				wireframe: false,

				newAttributes: newAttributes,
				enabledAttributes: enabledAttributes,
				attributeDivisors: attributeDivisors,
				object: vao,
				attributes: {},
				index: null

			};

		}

		function needsUpdate( object, geometry, program, index ) {

			const cachedAttributes = currentState.attributes;
			const geometryAttributes = geometry.attributes;

			let attributesNum = 0;

			const programAttributes = program.getAttributes();

			for ( const name in programAttributes ) {

				const programAttribute = programAttributes[ name ];

				if ( programAttribute.location >= 0 ) {

					const cachedAttribute = cachedAttributes[ name ];
					let geometryAttribute = geometryAttributes[ name ];

					if ( geometryAttribute === undefined ) {

						if ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;
						if ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;

					}

					if ( cachedAttribute === undefined ) return true;

					if ( cachedAttribute.attribute !== geometryAttribute ) return true;

					if ( geometryAttribute && cachedAttribute.data !== geometryAttribute.data ) return true;

					attributesNum ++;

				}

			}

			if ( currentState.attributesNum !== attributesNum ) return true;

			if ( currentState.index !== index ) return true;

			return false;

		}

		function saveCache( object, geometry, program, index ) {

			const cache = {};
			const attributes = geometry.attributes;
			let attributesNum = 0;

			const programAttributes = program.getAttributes();

			for ( const name in programAttributes ) {

				const programAttribute = programAttributes[ name ];

				if ( programAttribute.location >= 0 ) {

					let attribute = attributes[ name ];

					if ( attribute === undefined ) {

						if ( name === 'instanceMatrix' && object.instanceMatrix ) attribute = object.instanceMatrix;
						if ( name === 'instanceColor' && object.instanceColor ) attribute = object.instanceColor;

					}

					const data = {};
					data.attribute = attribute;

					if ( attribute && attribute.data ) {

						data.data = attribute.data;

					}

					cache[ name ] = data;

					attributesNum ++;

				}

			}

			currentState.attributes = cache;
			currentState.attributesNum = attributesNum;

			currentState.index = index;

		}

		function initAttributes() {

			const newAttributes = currentState.newAttributes;

			for ( let i = 0, il = newAttributes.length; i < il; i ++ ) {

				newAttributes[ i ] = 0;

			}

		}

		function enableAttribute( attribute ) {

			enableAttributeAndDivisor( attribute, 0 );

		}

		function enableAttributeAndDivisor( attribute, meshPerAttribute ) {

			const newAttributes = currentState.newAttributes;
			const enabledAttributes = currentState.enabledAttributes;
			const attributeDivisors = currentState.attributeDivisors;

			newAttributes[ attribute ] = 1;

			if ( enabledAttributes[ attribute ] === 0 ) {

				gl.enableVertexAttribArray( attribute );
				enabledAttributes[ attribute ] = 1;

			}

			if ( attributeDivisors[ attribute ] !== meshPerAttribute ) {

				const extension = capabilities.isWebGL2 ? gl : extensions.get( 'ANGLE_instanced_arrays' );

				extension[ capabilities.isWebGL2 ? 'vertexAttribDivisor' : 'vertexAttribDivisorANGLE' ]( attribute, meshPerAttribute );
				attributeDivisors[ attribute ] = meshPerAttribute;

			}

		}

		function disableUnusedAttributes() {

			const newAttributes = currentState.newAttributes;
			const enabledAttributes = currentState.enabledAttributes;

			for ( let i = 0, il = enabledAttributes.length; i < il; i ++ ) {

				if ( enabledAttributes[ i ] !== newAttributes[ i ] ) {

					gl.disableVertexAttribArray( i );
					enabledAttributes[ i ] = 0;

				}

			}

		}

		function vertexAttribPointer( index, size, type, normalized, stride, offset, integer ) {

			if ( integer === true ) {

				gl.vertexAttribIPointer( index, size, type, stride, offset );

			} else {

				gl.vertexAttribPointer( index, size, type, normalized, stride, offset );

			}

		}

		function setupVertexAttributes( object, material, program, geometry ) {

			if ( capabilities.isWebGL2 === false && ( object.isInstancedMesh || geometry.isInstancedBufferGeometry ) ) {

				if ( extensions.get( 'ANGLE_instanced_arrays' ) === null ) return;

			}

			initAttributes();

			const geometryAttributes = geometry.attributes;

			const programAttributes = program.getAttributes();

			const materialDefaultAttributeValues = material.defaultAttributeValues;

			for ( const name in programAttributes ) {

				const programAttribute = programAttributes[ name ];

				if ( programAttribute.location >= 0 ) {

					let geometryAttribute = geometryAttributes[ name ];

					if ( geometryAttribute === undefined ) {

						if ( name === 'instanceMatrix' && object.instanceMatrix ) geometryAttribute = object.instanceMatrix;
						if ( name === 'instanceColor' && object.instanceColor ) geometryAttribute = object.instanceColor;

					}

					if ( geometryAttribute !== undefined ) {

						const normalized = geometryAttribute.normalized;
						const size = geometryAttribute.itemSize;

						const attribute = attributes.get( geometryAttribute );

						// TODO Attribute may not be available on context restore

						if ( attribute === undefined ) continue;

						const buffer = attribute.buffer;
						const type = attribute.type;
						const bytesPerElement = attribute.bytesPerElement;

						// check for integer attributes (WebGL 2 only)

						const integer = ( capabilities.isWebGL2 === true && ( type === gl.INT || type === gl.UNSIGNED_INT || geometryAttribute.gpuType === IntType ) );

						if ( geometryAttribute.isInterleavedBufferAttribute ) {

							const data = geometryAttribute.data;
							const stride = data.stride;
							const offset = geometryAttribute.offset;

							if ( data.isInstancedInterleavedBuffer ) {

								for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

									enableAttributeAndDivisor( programAttribute.location + i, data.meshPerAttribute );

								}

								if ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {

									geometry._maxInstanceCount = data.meshPerAttribute * data.count;

								}

							} else {

								for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

									enableAttribute( programAttribute.location + i );

								}

							}

							gl.bindBuffer( gl.ARRAY_BUFFER, buffer );

							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

								vertexAttribPointer(
									programAttribute.location + i,
									size / programAttribute.locationSize,
									type,
									normalized,
									stride * bytesPerElement,
									( offset + ( size / programAttribute.locationSize ) * i ) * bytesPerElement,
									integer
								);

							}

						} else {

							if ( geometryAttribute.isInstancedBufferAttribute ) {

								for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

									enableAttributeAndDivisor( programAttribute.location + i, geometryAttribute.meshPerAttribute );

								}

								if ( object.isInstancedMesh !== true && geometry._maxInstanceCount === undefined ) {

									geometry._maxInstanceCount = geometryAttribute.meshPerAttribute * geometryAttribute.count;

								}

							} else {

								for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

									enableAttribute( programAttribute.location + i );

								}

							}

							gl.bindBuffer( gl.ARRAY_BUFFER, buffer );

							for ( let i = 0; i < programAttribute.locationSize; i ++ ) {

								vertexAttribPointer(
									programAttribute.location + i,
									size / programAttribute.locationSize,
									type,
									normalized,
									size * bytesPerElement,
									( size / programAttribute.locationSize ) * i * bytesPerElement,
									integer
								);

							}

						}

					} else if ( materialDefaultAttributeValues !== undefined ) {

						const value = materialDefaultAttributeValues[ name ];

						if ( value !== undefined ) {

							switch ( value.length ) {

								case 2:
									gl.vertexAttrib2fv( programAttribute.location, value );
									break;

								case 3:
									gl.vertexAttrib3fv( programAttribute.location, value );
									break;

								case 4:
									gl.vertexAttrib4fv( programAttribute.location, value );
									break;

								default:
									gl.vertexAttrib1fv( programAttribute.location, value );

							}

						}

					}

				}

			}

			disableUnusedAttributes();

		}

		function dispose() {

			reset();

			for ( const geometryId in bindingStates ) {

				const programMap = bindingStates[ geometryId ];

				for ( const programId in programMap ) {

					const stateMap = programMap[ programId ];

					for ( const wireframe in stateMap ) {

						deleteVertexArrayObject( stateMap[ wireframe ].object );

						delete stateMap[ wireframe ];

					}

					delete programMap[ programId ];

				}

				delete bindingStates[ geometryId ];

			}

		}

		function releaseStatesOfGeometry( geometry ) {

			if ( bindingStates[ geometry.id ] === undefined ) return;

			const programMap = bindingStates[ geometry.id ];

			for ( const programId in programMap ) {

				const stateMap = programMap[ programId ];

				for ( const wireframe in stateMap ) {

					deleteVertexArrayObject( stateMap[ wireframe ].object );

					delete stateMap[ wireframe ];

				}

				delete programMap[ programId ];

			}

			delete bindingStates[ geometry.id ];

		}

		function releaseStatesOfProgram( program ) {

			for ( const geometryId in bindingStates ) {

				const programMap = bindingStates[ geometryId ];

				if ( programMap[ program.id ] === undefined ) continue;

				const stateMap = programMap[ program.id ];

				for ( const wireframe in stateMap ) {

					deleteVertexArrayObject( stateMap[ wireframe ].object );

					delete stateMap[ wireframe ];

				}

				delete programMap[ program.id ];

			}

		}

		function reset() {

			resetDefaultState();
			forceUpdate = true;

			if ( currentState === defaultState ) return;

			currentState = defaultState;
			bindVertexArrayObject( currentState.object );

		}

		// for backward-compatibility

		function resetDefaultState() {

			defaultState.geometry = null;
			defaultState.program = null;
			defaultState.wireframe = false;

		}

		return {

			setup: setup,
			reset: reset,
			resetDefaultState: resetDefaultState,
			dispose: dispose,
			releaseStatesOfGeometry: releaseStatesOfGeometry,
			releaseStatesOfProgram: releaseStatesOfProgram,

			initAttributes: initAttributes,
			enableAttribute: enableAttribute,
			disableUnusedAttributes: disableUnusedAttributes

		};

	}

	function WebGLBufferRenderer( gl, extensions, info, capabilities ) {

		const isWebGL2 = capabilities.isWebGL2;

		let mode;

		function setMode( value ) {

			mode = value;

		}

		function render( start, count ) {

			gl.drawArrays( mode, start, count );

			info.update( count, mode, 1 );

		}

		function renderInstances( start, count, primcount ) {

			if ( primcount === 0 ) return;

			let extension, methodName;

			if ( isWebGL2 ) {

				extension = gl;
				methodName = 'drawArraysInstanced';

			} else {

				extension = extensions.get( 'ANGLE_instanced_arrays' );
				methodName = 'drawArraysInstancedANGLE';

				if ( extension === null ) {

					console.error( 'THREE.WebGLBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;

				}

			}

			extension[ methodName ]( mode, start, count, primcount );

			info.update( count, mode, primcount );

		}

		//

		this.setMode = setMode;
		this.render = render;
		this.renderInstances = renderInstances;

	}

	function WebGLCapabilities( gl, extensions, parameters ) {

		let maxAnisotropy;

		function getMaxAnisotropy() {

			if ( maxAnisotropy !== undefined ) return maxAnisotropy;

			if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {

				const extension = extensions.get( 'EXT_texture_filter_anisotropic' );

				maxAnisotropy = gl.getParameter( extension.MAX_TEXTURE_MAX_ANISOTROPY_EXT );

			} else {

				maxAnisotropy = 0;

			}

			return maxAnisotropy;

		}

		function getMaxPrecision( precision ) {

			if ( precision === 'highp' ) {

				if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.HIGH_FLOAT ).precision > 0 &&
					gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.HIGH_FLOAT ).precision > 0 ) {

					return 'highp';

				}

				precision = 'mediump';

			}

			if ( precision === 'mediump' ) {

				if ( gl.getShaderPrecisionFormat( gl.VERTEX_SHADER, gl.MEDIUM_FLOAT ).precision > 0 &&
					gl.getShaderPrecisionFormat( gl.FRAGMENT_SHADER, gl.MEDIUM_FLOAT ).precision > 0 ) {

					return 'mediump';

				}

			}

			return 'lowp';

		}

		const isWebGL2 = typeof WebGL2RenderingContext !== 'undefined' && gl.constructor.name === 'WebGL2RenderingContext';

		let precision = parameters.precision !== undefined ? parameters.precision : 'highp';
		const maxPrecision = getMaxPrecision( precision );

		if ( maxPrecision !== precision ) {

			console.warn( 'THREE.WebGLRenderer:', precision, 'not supported, using', maxPrecision, 'instead.' );
			precision = maxPrecision;

		}

		const drawBuffers = isWebGL2 || extensions.has( 'WEBGL_draw_buffers' );

		const logarithmicDepthBuffer = parameters.logarithmicDepthBuffer === true;

		const maxTextures = gl.getParameter( gl.MAX_TEXTURE_IMAGE_UNITS );
		const maxVertexTextures = gl.getParameter( gl.MAX_VERTEX_TEXTURE_IMAGE_UNITS );
		const maxTextureSize = gl.getParameter( gl.MAX_TEXTURE_SIZE );
		const maxCubemapSize = gl.getParameter( gl.MAX_CUBE_MAP_TEXTURE_SIZE );

		const maxAttributes = gl.getParameter( gl.MAX_VERTEX_ATTRIBS );
		const maxVertexUniforms = gl.getParameter( gl.MAX_VERTEX_UNIFORM_VECTORS );
		const maxVaryings = gl.getParameter( gl.MAX_VARYING_VECTORS );
		const maxFragmentUniforms = gl.getParameter( gl.MAX_FRAGMENT_UNIFORM_VECTORS );

		const vertexTextures = maxVertexTextures > 0;
		const floatFragmentTextures = isWebGL2 || extensions.has( 'OES_texture_float' );
		const floatVertexTextures = vertexTextures && floatFragmentTextures;

		const maxSamples = isWebGL2 ? gl.getParameter( gl.MAX_SAMPLES ) : 0;

		return {

			isWebGL2: isWebGL2,

			drawBuffers: drawBuffers,

			getMaxAnisotropy: getMaxAnisotropy,
			getMaxPrecision: getMaxPrecision,

			precision: precision,
			logarithmicDepthBuffer: logarithmicDepthBuffer,

			maxTextures: maxTextures,
			maxVertexTextures: maxVertexTextures,
			maxTextureSize: maxTextureSize,
			maxCubemapSize: maxCubemapSize,

			maxAttributes: maxAttributes,
			maxVertexUniforms: maxVertexUniforms,
			maxVaryings: maxVaryings,
			maxFragmentUniforms: maxFragmentUniforms,

			vertexTextures: vertexTextures,
			floatFragmentTextures: floatFragmentTextures,
			floatVertexTextures: floatVertexTextures,

			maxSamples: maxSamples

		};

	}

	function WebGLClipping( properties ) {

		const scope = this;

		let globalState = null,
			numGlobalPlanes = 0,
			localClippingEnabled = false,
			renderingShadows = false;

		const plane = new Plane(),
			viewNormalMatrix = new Matrix3(),

			uniform = { value: null, needsUpdate: false };

		this.uniform = uniform;
		this.numPlanes = 0;
		this.numIntersection = 0;

		this.init = function ( planes, enableLocalClipping ) {

			const enabled =
				planes.length !== 0 ||
				enableLocalClipping ||
				// enable state of previous frame - the clipping code has to
				// run another frame in order to reset the state:
				numGlobalPlanes !== 0 ||
				localClippingEnabled;

			localClippingEnabled = enableLocalClipping;

			numGlobalPlanes = planes.length;

			return enabled;

		};

		this.beginShadows = function () {

			renderingShadows = true;
			projectPlanes( null );

		};

		this.endShadows = function () {

			renderingShadows = false;

		};

		this.setGlobalState = function ( planes, camera ) {

			globalState = projectPlanes( planes, camera, 0 );

		};

		this.setState = function ( material, camera, useCache ) {

			const planes = material.clippingPlanes,
				clipIntersection = material.clipIntersection,
				clipShadows = material.clipShadows;

			const materialProperties = properties.get( material );

			if ( ! localClippingEnabled || planes === null || planes.length === 0 || renderingShadows && ! clipShadows ) {

				// there's no local clipping

				if ( renderingShadows ) {

					// there's no global clipping

					projectPlanes( null );

				} else {

					resetGlobalState();

				}

			} else {

				const nGlobal = renderingShadows ? 0 : numGlobalPlanes,
					lGlobal = nGlobal * 4;

				let dstArray = materialProperties.clippingState || null;

				uniform.value = dstArray; // ensure unique state

				dstArray = projectPlanes( planes, camera, lGlobal, useCache );

				for ( let i = 0; i !== lGlobal; ++ i ) {

					dstArray[ i ] = globalState[ i ];

				}

				materialProperties.clippingState = dstArray;
				this.numIntersection = clipIntersection ? this.numPlanes : 0;
				this.numPlanes += nGlobal;

			}


		};

		function resetGlobalState() {

			if ( uniform.value !== globalState ) {

				uniform.value = globalState;
				uniform.needsUpdate = numGlobalPlanes > 0;

			}

			scope.numPlanes = numGlobalPlanes;
			scope.numIntersection = 0;

		}

		function projectPlanes( planes, camera, dstOffset, skipTransform ) {

			const nPlanes = planes !== null ? planes.length : 0;
			let dstArray = null;

			if ( nPlanes !== 0 ) {

				dstArray = uniform.value;

				if ( skipTransform !== true || dstArray === null ) {

					const flatSize = dstOffset + nPlanes * 4,
						viewMatrix = camera.matrixWorldInverse;

					viewNormalMatrix.getNormalMatrix( viewMatrix );

					if ( dstArray === null || dstArray.length < flatSize ) {

						dstArray = new Float32Array( flatSize );

					}

					for ( let i = 0, i4 = dstOffset; i !== nPlanes; ++ i, i4 += 4 ) {

						plane.copy( planes[ i ] ).applyMatrix4( viewMatrix, viewNormalMatrix );

						plane.normal.toArray( dstArray, i4 );
						dstArray[ i4 + 3 ] = plane.constant;

					}

				}

				uniform.value = dstArray;
				uniform.needsUpdate = true;

			}

			scope.numPlanes = nPlanes;
			scope.numIntersection = 0;

			return dstArray;

		}

	}

	function WebGLCubeMaps( renderer ) {

		let cubemaps = new WeakMap();

		function mapTextureMapping( texture, mapping ) {

			if ( mapping === EquirectangularReflectionMapping ) {

				texture.mapping = CubeReflectionMapping;

			} else if ( mapping === EquirectangularRefractionMapping ) {

				texture.mapping = CubeRefractionMapping;

			}

			return texture;

		}

		function get( texture ) {

			if ( texture && texture.isTexture && texture.isRenderTargetTexture === false ) {

				const mapping = texture.mapping;

				if ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping ) {

					if ( cubemaps.has( texture ) ) {

						const cubemap = cubemaps.get( texture ).texture;
						return mapTextureMapping( cubemap, texture.mapping );

					} else {

						const image = texture.image;

						if ( image && image.height > 0 ) {

							const renderTarget = new WebGLCubeRenderTarget( image.height / 2 );
							renderTarget.fromEquirectangularTexture( renderer, texture );
							cubemaps.set( texture, renderTarget );

							texture.addEventListener( 'dispose', onTextureDispose );

							return mapTextureMapping( renderTarget.texture, texture.mapping );

						} else {

							// image not yet ready. try the conversion next frame

							return null;

						}

					}

				}

			}

			return texture;

		}

		function onTextureDispose( event ) {

			const texture = event.target;

			texture.removeEventListener( 'dispose', onTextureDispose );

			const cubemap = cubemaps.get( texture );

			if ( cubemap !== undefined ) {

				cubemaps.delete( texture );
				cubemap.dispose();

			}

		}

		function dispose() {

			cubemaps = new WeakMap();

		}

		return {
			get: get,
			dispose: dispose
		};

	}

	class OrthographicCamera extends Camera {

		constructor( left = - 1, right = 1, top = 1, bottom = - 1, near = 0.1, far = 2000 ) {

			super();

			this.isOrthographicCamera = true;

			this.type = 'OrthographicCamera';

			this.zoom = 1;
			this.view = null;

			this.left = left;
			this.right = right;
			this.top = top;
			this.bottom = bottom;

			this.near = near;
			this.far = far;

			this.updateProjectionMatrix();

		}

		copy( source, recursive ) {

			super.copy( source, recursive );

			this.left = source.left;
			this.right = source.right;
			this.top = source.top;
			this.bottom = source.bottom;
			this.near = source.near;
			this.far = source.far;

			this.zoom = source.zoom;
			this.view = source.view === null ? null : Object.assign( {}, source.view );

			return this;

		}

		setViewOffset( fullWidth, fullHeight, x, y, width, height ) {

			if ( this.view === null ) {

				this.view = {
					enabled: true,
					fullWidth: 1,
					fullHeight: 1,
					offsetX: 0,
					offsetY: 0,
					width: 1,
					height: 1
				};

			}

			this.view.enabled = true;
			this.view.fullWidth = fullWidth;
			this.view.fullHeight = fullHeight;
			this.view.offsetX = x;
			this.view.offsetY = y;
			this.view.width = width;
			this.view.height = height;

			this.updateProjectionMatrix();

		}

		clearViewOffset() {

			if ( this.view !== null ) {

				this.view.enabled = false;

			}

			this.updateProjectionMatrix();

		}

		updateProjectionMatrix() {

			const dx = ( this.right - this.left ) / ( 2 * this.zoom );
			const dy = ( this.top - this.bottom ) / ( 2 * this.zoom );
			const cx = ( this.right + this.left ) / 2;
			const cy = ( this.top + this.bottom ) / 2;

			let left = cx - dx;
			let right = cx + dx;
			let top = cy + dy;
			let bottom = cy - dy;

			if ( this.view !== null && this.view.enabled ) {

				const scaleW = ( this.right - this.left ) / this.view.fullWidth / this.zoom;
				const scaleH = ( this.top - this.bottom ) / this.view.fullHeight / this.zoom;

				left += scaleW * this.view.offsetX;
				right = left + scaleW * this.view.width;
				top -= scaleH * this.view.offsetY;
				bottom = top - scaleH * this.view.height;

			}

			this.projectionMatrix.makeOrthographic( left, right, top, bottom, this.near, this.far, this.coordinateSystem );

			this.projectionMatrixInverse.copy( this.projectionMatrix ).invert();

		}

		toJSON( meta ) {

			const data = super.toJSON( meta );

			data.object.zoom = this.zoom;
			data.object.left = this.left;
			data.object.right = this.right;
			data.object.top = this.top;
			data.object.bottom = this.bottom;
			data.object.near = this.near;
			data.object.far = this.far;

			if ( this.view !== null ) data.object.view = Object.assign( {}, this.view );

			return data;

		}

	}

	const LOD_MIN = 4;

	// The standard deviations (radians) associated with the extra mips. These are
	// chosen to approximate a Trowbridge-Reitz distribution function times the
	// geometric shadowing function. These sigma values squared must match the
	// variance #defines in cube_uv_reflection_fragment.glsl.js.
	const EXTRA_LOD_SIGMA = [ 0.125, 0.215, 0.35, 0.446, 0.526, 0.582 ];

	// The maximum length of the blur for loop. Smaller sigmas will use fewer
	// samples and exit early, but not recompile the shader.
	const MAX_SAMPLES = 20;

	const _flatCamera = /*@__PURE__*/ new OrthographicCamera();
	const _clearColor = /*@__PURE__*/ new Color();
	let _oldTarget = null;

	// Golden Ratio
	const PHI = ( 1 + Math.sqrt( 5 ) ) / 2;
	const INV_PHI = 1 / PHI;

	// Vertices of a dodecahedron (except the opposites, which represent the
	// same axis), used as axis directions evenly spread on a sphere.
	const _axisDirections = [
		/*@__PURE__*/ new Vector3( 1, 1, 1 ),
		/*@__PURE__*/ new Vector3( - 1, 1, 1 ),
		/*@__PURE__*/ new Vector3( 1, 1, - 1 ),
		/*@__PURE__*/ new Vector3( - 1, 1, - 1 ),
		/*@__PURE__*/ new Vector3( 0, PHI, INV_PHI ),
		/*@__PURE__*/ new Vector3( 0, PHI, - INV_PHI ),
		/*@__PURE__*/ new Vector3( INV_PHI, 0, PHI ),
		/*@__PURE__*/ new Vector3( - INV_PHI, 0, PHI ),
		/*@__PURE__*/ new Vector3( PHI, INV_PHI, 0 ),
		/*@__PURE__*/ new Vector3( - PHI, INV_PHI, 0 ) ];

	/**
	 * This class generates a Prefiltered, Mipmapped Radiance Environment Map
	 * (PMREM) from a cubeMap environment texture. This allows different levels of
	 * blur to be quickly accessed based on material roughness. It is packed into a
	 * special CubeUV format that allows us to perform custom interpolation so that
	 * we can support nonlinear formats such as RGBE. Unlike a traditional mipmap
	 * chain, it only goes down to the LOD_MIN level (above), and then creates extra
	 * even more filtered 'mips' at the same LOD_MIN resolution, associated with
	 * higher roughness levels. In this way we maintain resolution to smoothly
	 * interpolate diffuse lighting while limiting sampling computation.
	 *
	 * Paper: Fast, Accurate Image-Based Lighting
	 * https://drive.google.com/file/d/15y8r_UpKlU9SvV4ILb0C3qCPecS8pvLz/view
	*/

	class PMREMGenerator {

		constructor( renderer ) {

			this._renderer = renderer;
			this._pingPongRenderTarget = null;

			this._lodMax = 0;
			this._cubeSize = 0;
			this._lodPlanes = [];
			this._sizeLods = [];
			this._sigmas = [];

			this._blurMaterial = null;
			this._cubemapMaterial = null;
			this._equirectMaterial = null;

			this._compileMaterial( this._blurMaterial );

		}

		/**
		 * Generates a PMREM from a supplied Scene, which can be faster than using an
		 * image if networking bandwidth is low. Optional sigma specifies a blur radius
		 * in radians to be applied to the scene before PMREM generation. Optional near
		 * and far planes ensure the scene is rendered in its entirety (the cubeCamera
		 * is placed at the origin).
		 */
		fromScene( scene, sigma = 0, near = 0.1, far = 100 ) {

			_oldTarget = this._renderer.getRenderTarget();

			this._setSize( 256 );

			const cubeUVRenderTarget = this._allocateTargets();
			cubeUVRenderTarget.depthBuffer = true;

			this._sceneToCubeUV( scene, near, far, cubeUVRenderTarget );

			if ( sigma > 0 ) {

				this._blur( cubeUVRenderTarget, 0, 0, sigma );

			}

			this._applyPMREM( cubeUVRenderTarget );
			this._cleanup( cubeUVRenderTarget );

			return cubeUVRenderTarget;

		}

		/**
		 * Generates a PMREM from an equirectangular texture, which can be either LDR
		 * or HDR. The ideal input image size is 1k (1024 x 512),
		 * as this matches best with the 256 x 256 cubemap output.
		 */
		fromEquirectangular( equirectangular, renderTarget = null ) {

			return this._fromTexture( equirectangular, renderTarget );

		}

		/**
		 * Generates a PMREM from an cubemap texture, which can be either LDR
		 * or HDR. The ideal input cube size is 256 x 256,
		 * as this matches best with the 256 x 256 cubemap output.
		 */
		fromCubemap( cubemap, renderTarget = null ) {

			return this._fromTexture( cubemap, renderTarget );

		}

		/**
		 * Pre-compiles the cubemap shader. You can get faster start-up by invoking this method during
		 * your texture's network fetch for increased concurrency.
		 */
		compileCubemapShader() {

			if ( this._cubemapMaterial === null ) {

				this._cubemapMaterial = _getCubemapMaterial();
				this._compileMaterial( this._cubemapMaterial );

			}

		}

		/**
		 * Pre-compiles the equirectangular shader. You can get faster start-up by invoking this method during
		 * your texture's network fetch for increased concurrency.
		 */
		compileEquirectangularShader() {

			if ( this._equirectMaterial === null ) {

				this._equirectMaterial = _getEquirectMaterial();
				this._compileMaterial( this._equirectMaterial );

			}

		}

		/**
		 * Disposes of the PMREMGenerator's internal memory. Note that PMREMGenerator is a static class,
		 * so you should not need more than one PMREMGenerator object. If you do, calling dispose() on
		 * one of them will cause any others to also become unusable.
		 */
		dispose() {

			this._dispose();

			if ( this._cubemapMaterial !== null ) this._cubemapMaterial.dispose();
			if ( this._equirectMaterial !== null ) this._equirectMaterial.dispose();

		}

		// private interface

		_setSize( cubeSize ) {

			this._lodMax = Math.floor( Math.log2( cubeSize ) );
			this._cubeSize = Math.pow( 2, this._lodMax );

		}

		_dispose() {

			if ( this._blurMaterial !== null ) this._blurMaterial.dispose();

			if ( this._pingPongRenderTarget !== null ) this._pingPongRenderTarget.dispose();

			for ( let i = 0; i < this._lodPlanes.length; i ++ ) {

				this._lodPlanes[ i ].dispose();

			}

		}

		_cleanup( outputTarget ) {

			this._renderer.setRenderTarget( _oldTarget );
			outputTarget.scissorTest = false;
			_setViewport( outputTarget, 0, 0, outputTarget.width, outputTarget.height );

		}

		_fromTexture( texture, renderTarget ) {

			if ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping ) {

				this._setSize( texture.image.length === 0 ? 16 : ( texture.image[ 0 ].width || texture.image[ 0 ].image.width ) );

			} else { // Equirectangular

				this._setSize( texture.image.width / 4 );

			}

			_oldTarget = this._renderer.getRenderTarget();

			const cubeUVRenderTarget = renderTarget || this._allocateTargets();
			this._textureToCubeUV( texture, cubeUVRenderTarget );
			this._applyPMREM( cubeUVRenderTarget );
			this._cleanup( cubeUVRenderTarget );

			return cubeUVRenderTarget;

		}

		_allocateTargets() {

			const width = 3 * Math.max( this._cubeSize, 16 * 7 );
			const height = 4 * this._cubeSize;

			const params = {
				magFilter: LinearFilter,
				minFilter: LinearFilter,
				generateMipmaps: false,
				type: HalfFloatType,
				format: RGBAFormat,
				colorSpace: LinearSRGBColorSpace,
				depthBuffer: false
			};

			const cubeUVRenderTarget = _createRenderTarget( width, height, params );

			if ( this._pingPongRenderTarget === null || this._pingPongRenderTarget.width !== width || this._pingPongRenderTarget.height !== height ) {

				if ( this._pingPongRenderTarget !== null ) {

					this._dispose();

				}

				this._pingPongRenderTarget = _createRenderTarget( width, height, params );

				const { _lodMax } = this;
				( { sizeLods: this._sizeLods, lodPlanes: this._lodPlanes, sigmas: this._sigmas } = _createPlanes( _lodMax ) );

				this._blurMaterial = _getBlurShader( _lodMax, width, height );

			}

			return cubeUVRenderTarget;

		}

		_compileMaterial( material ) {

			const tmpMesh = new Mesh( this._lodPlanes[ 0 ], material );
			this._renderer.compile( tmpMesh, _flatCamera );

		}

		_sceneToCubeUV( scene, near, far, cubeUVRenderTarget ) {

			const fov = 90;
			const aspect = 1;
			const cubeCamera = new PerspectiveCamera( fov, aspect, near, far );
			const upSign = [ 1, - 1, 1, 1, 1, 1 ];
			const forwardSign = [ 1, 1, 1, - 1, - 1, - 1 ];
			const renderer = this._renderer;

			const originalAutoClear = renderer.autoClear;
			const toneMapping = renderer.toneMapping;
			renderer.getClearColor( _clearColor );

			renderer.toneMapping = NoToneMapping;
			renderer.autoClear = false;

			const backgroundMaterial = new MeshBasicMaterial( {
				name: 'PMREM.Background',
				side: BackSide,
				depthWrite: false,
				depthTest: false,
			} );

			const backgroundBox = new Mesh( new BoxGeometry(), backgroundMaterial );

			let useSolidColor = false;
			const background = scene.background;

			if ( background ) {

				if ( background.isColor ) {

					backgroundMaterial.color.copy( background );
					scene.background = null;
					useSolidColor = true;

				}

			} else {

				backgroundMaterial.color.copy( _clearColor );
				useSolidColor = true;

			}

			for ( let i = 0; i < 6; i ++ ) {

				const col = i % 3;

				if ( col === 0 ) {

					cubeCamera.up.set( 0, upSign[ i ], 0 );
					cubeCamera.lookAt( forwardSign[ i ], 0, 0 );

				} else if ( col === 1 ) {

					cubeCamera.up.set( 0, 0, upSign[ i ] );
					cubeCamera.lookAt( 0, forwardSign[ i ], 0 );

				} else {

					cubeCamera.up.set( 0, upSign[ i ], 0 );
					cubeCamera.lookAt( 0, 0, forwardSign[ i ] );

				}

				const size = this._cubeSize;

				_setViewport( cubeUVRenderTarget, col * size, i > 2 ? size : 0, size, size );

				renderer.setRenderTarget( cubeUVRenderTarget );

				if ( useSolidColor ) {

					renderer.render( backgroundBox, cubeCamera );

				}

				renderer.render( scene, cubeCamera );

			}

			backgroundBox.geometry.dispose();
			backgroundBox.material.dispose();

			renderer.toneMapping = toneMapping;
			renderer.autoClear = originalAutoClear;
			scene.background = background;

		}

		_textureToCubeUV( texture, cubeUVRenderTarget ) {

			const renderer = this._renderer;

			const isCubeTexture = ( texture.mapping === CubeReflectionMapping || texture.mapping === CubeRefractionMapping );

			if ( isCubeTexture ) {

				if ( this._cubemapMaterial === null ) {

					this._cubemapMaterial = _getCubemapMaterial();

				}

				this._cubemapMaterial.uniforms.flipEnvMap.value = ( texture.isRenderTargetTexture === false ) ? - 1 : 1;

			} else {

				if ( this._equirectMaterial === null ) {

					this._equirectMaterial = _getEquirectMaterial();

				}

			}

			const material = isCubeTexture ? this._cubemapMaterial : this._equirectMaterial;
			const mesh = new Mesh( this._lodPlanes[ 0 ], material );

			const uniforms = material.uniforms;

			uniforms[ 'envMap' ].value = texture;

			const size = this._cubeSize;

			_setViewport( cubeUVRenderTarget, 0, 0, 3 * size, 2 * size );

			renderer.setRenderTarget( cubeUVRenderTarget );
			renderer.render( mesh, _flatCamera );

		}

		_applyPMREM( cubeUVRenderTarget ) {

			const renderer = this._renderer;
			const autoClear = renderer.autoClear;
			renderer.autoClear = false;

			for ( let i = 1; i < this._lodPlanes.length; i ++ ) {

				const sigma = Math.sqrt( this._sigmas[ i ] * this._sigmas[ i ] - this._sigmas[ i - 1 ] * this._sigmas[ i - 1 ] );

				const poleAxis = _axisDirections[ ( i - 1 ) % _axisDirections.length ];

				this._blur( cubeUVRenderTarget, i - 1, i, sigma, poleAxis );

			}

			renderer.autoClear = autoClear;

		}

		/**
		 * This is a two-pass Gaussian blur for a cubemap. Normally this is done
		 * vertically and horizontally, but this breaks down on a cube. Here we apply
		 * the blur latitudinally (around the poles), and then longitudinally (towards
		 * the poles) to approximate the orthogonally-separable blur. It is least
		 * accurate at the poles, but still does a decent job.
		 */
		_blur( cubeUVRenderTarget, lodIn, lodOut, sigma, poleAxis ) {

			const pingPongRenderTarget = this._pingPongRenderTarget;

			this._halfBlur(
				cubeUVRenderTarget,
				pingPongRenderTarget,
				lodIn,
				lodOut,
				sigma,
				'latitudinal',
				poleAxis );

			this._halfBlur(
				pingPongRenderTarget,
				cubeUVRenderTarget,
				lodOut,
				lodOut,
				sigma,
				'longitudinal',
				poleAxis );

		}

		_halfBlur( targetIn, targetOut, lodIn, lodOut, sigmaRadians, direction, poleAxis ) {

			const renderer = this._renderer;
			const blurMaterial = this._blurMaterial;

			if ( direction !== 'latitudinal' && direction !== 'longitudinal' ) {

				console.error(
					'blur direction must be either latitudinal or longitudinal!' );

			}

			// Number of standard deviations at which to cut off the discrete approximation.
			const STANDARD_DEVIATIONS = 3;

			const blurMesh = new Mesh( this._lodPlanes[ lodOut ], blurMaterial );
			const blurUniforms = blurMaterial.uniforms;

			const pixels = this._sizeLods[ lodIn ] - 1;
			const radiansPerPixel = isFinite( sigmaRadians ) ? Math.PI / ( 2 * pixels ) : 2 * Math.PI / ( 2 * MAX_SAMPLES - 1 );
			const sigmaPixels = sigmaRadians / radiansPerPixel;
			const samples = isFinite( sigmaRadians ) ? 1 + Math.floor( STANDARD_DEVIATIONS * sigmaPixels ) : MAX_SAMPLES;

			if ( samples > MAX_SAMPLES ) {

				console.warn( `sigmaRadians, ${
				sigmaRadians}, is too large and will clip, as it requested ${
				samples} samples when the maximum is set to ${MAX_SAMPLES}` );

			}

			const weights = [];
			let sum = 0;

			for ( let i = 0; i < MAX_SAMPLES; ++ i ) {

				const x = i / sigmaPixels;
				const weight = Math.exp( - x * x / 2 );
				weights.push( weight );

				if ( i === 0 ) {

					sum += weight;

				} else if ( i < samples ) {

					sum += 2 * weight;

				}

			}

			for ( let i = 0; i < weights.length; i ++ ) {

				weights[ i ] = weights[ i ] / sum;

			}

			blurUniforms[ 'envMap' ].value = targetIn.texture;
			blurUniforms[ 'samples' ].value = samples;
			blurUniforms[ 'weights' ].value = weights;
			blurUniforms[ 'latitudinal' ].value = direction === 'latitudinal';

			if ( poleAxis ) {

				blurUniforms[ 'poleAxis' ].value = poleAxis;

			}

			const { _lodMax } = this;
			blurUniforms[ 'dTheta' ].value = radiansPerPixel;
			blurUniforms[ 'mipInt' ].value = _lodMax - lodIn;

			const outputSize = this._sizeLods[ lodOut ];
			const x = 3 * outputSize * ( lodOut > _lodMax - LOD_MIN ? lodOut - _lodMax + LOD_MIN : 0 );
			const y = 4 * ( this._cubeSize - outputSize );

			_setViewport( targetOut, x, y, 3 * outputSize, 2 * outputSize );
			renderer.setRenderTarget( targetOut );
			renderer.render( blurMesh, _flatCamera );

		}

	}



	function _createPlanes( lodMax ) {

		const lodPlanes = [];
		const sizeLods = [];
		const sigmas = [];

		let lod = lodMax;

		const totalLods = lodMax - LOD_MIN + 1 + EXTRA_LOD_SIGMA.length;

		for ( let i = 0; i < totalLods; i ++ ) {

			const sizeLod = Math.pow( 2, lod );
			sizeLods.push( sizeLod );
			let sigma = 1.0 / sizeLod;

			if ( i > lodMax - LOD_MIN ) {

				sigma = EXTRA_LOD_SIGMA[ i - lodMax + LOD_MIN - 1 ];

			} else if ( i === 0 ) {

				sigma = 0;

			}

			sigmas.push( sigma );

			const texelSize = 1.0 / ( sizeLod - 2 );
			const min = - texelSize;
			const max = 1 + texelSize;
			const uv1 = [ min, min, max, min, max, max, min, min, max, max, min, max ];

			const cubeFaces = 6;
			const vertices = 6;
			const positionSize = 3;
			const uvSize = 2;
			const faceIndexSize = 1;

			const position = new Float32Array( positionSize * vertices * cubeFaces );
			const uv = new Float32Array( uvSize * vertices * cubeFaces );
			const faceIndex = new Float32Array( faceIndexSize * vertices * cubeFaces );

			for ( let face = 0; face < cubeFaces; face ++ ) {

				const x = ( face % 3 ) * 2 / 3 - 1;
				const y = face > 2 ? 0 : - 1;
				const coordinates = [
					x, y, 0,
					x + 2 / 3, y, 0,
					x + 2 / 3, y + 1, 0,
					x, y, 0,
					x + 2 / 3, y + 1, 0,
					x, y + 1, 0
				];
				position.set( coordinates, positionSize * vertices * face );
				uv.set( uv1, uvSize * vertices * face );
				const fill = [ face, face, face, face, face, face ];
				faceIndex.set( fill, faceIndexSize * vertices * face );

			}

			const planes = new BufferGeometry();
			planes.setAttribute( 'position', new BufferAttribute( position, positionSize ) );
			planes.setAttribute( 'uv', new BufferAttribute( uv, uvSize ) );
			planes.setAttribute( 'faceIndex', new BufferAttribute( faceIndex, faceIndexSize ) );
			lodPlanes.push( planes );

			if ( lod > LOD_MIN ) {

				lod --;

			}

		}

		return { lodPlanes, sizeLods, sigmas };

	}

	function _createRenderTarget( width, height, params ) {

		const cubeUVRenderTarget = new WebGLRenderTarget( width, height, params );
		cubeUVRenderTarget.texture.mapping = CubeUVReflectionMapping;
		cubeUVRenderTarget.texture.name = 'PMREM.cubeUv';
		cubeUVRenderTarget.scissorTest = true;
		return cubeUVRenderTarget;

	}

	function _setViewport( target, x, y, width, height ) {

		target.viewport.set( x, y, width, height );
		target.scissor.set( x, y, width, height );

	}

	function _getBlurShader( lodMax, width, height ) {

		const weights = new Float32Array( MAX_SAMPLES );
		const poleAxis = new Vector3( 0, 1, 0 );
		const shaderMaterial = new ShaderMaterial( {

			name: 'SphericalGaussianBlur',

			defines: {
				'n': MAX_SAMPLES,
				'CUBEUV_TEXEL_WIDTH': 1.0 / width,
				'CUBEUV_TEXEL_HEIGHT': 1.0 / height,
				'CUBEUV_MAX_MIP': `${lodMax}.0`,
			},

			uniforms: {
				'envMap': { value: null },
				'samples': { value: 1 },
				'weights': { value: weights },
				'latitudinal': { value: false },
				'dTheta': { value: 0 },
				'mipInt': { value: 0 },
				'poleAxis': { value: poleAxis }
			},

			vertexShader: _getCommonVertexShader(),

			fragmentShader: /* glsl */`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;
			uniform int samples;
			uniform float weights[ n ];
			uniform bool latitudinal;
			uniform float dTheta;
			uniform float mipInt;
			uniform vec3 poleAxis;

			#define ENVMAP_TYPE_CUBE_UV
			#include <cube_uv_reflection_fragment>

			vec3 getSample( float theta, vec3 axis ) {

				float cosTheta = cos( theta );
				// Rodrigues' axis-angle rotation
				vec3 sampleDirection = vOutputDirection * cosTheta
					+ cross( axis, vOutputDirection ) * sin( theta )
					+ axis * dot( axis, vOutputDirection ) * ( 1.0 - cosTheta );

				return bilinearCubeUV( envMap, sampleDirection, mipInt );

			}

			void main() {

				vec3 axis = latitudinal ? poleAxis : cross( poleAxis, vOutputDirection );

				if ( all( equal( axis, vec3( 0.0 ) ) ) ) {

					axis = vec3( vOutputDirection.z, 0.0, - vOutputDirection.x );

				}

				axis = normalize( axis );

				gl_FragColor = vec4( 0.0, 0.0, 0.0, 1.0 );
				gl_FragColor.rgb += weights[ 0 ] * getSample( 0.0, axis );

				for ( int i = 1; i < n; i++ ) {

					if ( i >= samples ) {

						break;

					}

					float theta = dTheta * float( i );
					gl_FragColor.rgb += weights[ i ] * getSample( -1.0 * theta, axis );
					gl_FragColor.rgb += weights[ i ] * getSample( theta, axis );

				}

			}
		`,

			blending: NoBlending,
			depthTest: false,
			depthWrite: false

		} );

		return shaderMaterial;

	}

	function _getEquirectMaterial() {

		return new ShaderMaterial( {

			name: 'EquirectangularToCubeUV',

			uniforms: {
				'envMap': { value: null }
			},

			vertexShader: _getCommonVertexShader(),

			fragmentShader: /* glsl */`

			precision mediump float;
			precision mediump int;

			varying vec3 vOutputDirection;

			uniform sampler2D envMap;

			#include <common>

			void main() {

				vec3 outputDirection = normalize( vOutputDirection );
				vec2 uv = equirectUv( outputDirection );

				gl_FragColor = vec4( texture2D ( envMap, uv ).rgb, 1.0 );

			}
		`,

			blending: NoBlending,
			depthTest: false,
			depthWrite: false

		} );

	}

	function _getCubemapMaterial() {

		return new ShaderMaterial( {

			name: 'CubemapToCubeUV',

			uniforms: {
				'envMap': { value: null },
				'flipEnvMap': { value: - 1 }
			},

			vertexShader: _getCommonVertexShader(),

			fragmentShader: /* glsl */`

			precision mediump float;
			precision mediump int;

			uniform float flipEnvMap;

			varying vec3 vOutputDirection;

			uniform samplerCube envMap;

			void main() {

				gl_FragColor = textureCube( envMap, vec3( flipEnvMap * vOutputDirection.x, vOutputDirection.yz ) );

			}
		`,

			blending: NoBlending,
			depthTest: false,
			depthWrite: false

		} );

	}

	function _getCommonVertexShader() {

		return /* glsl */`

		precision mediump float;
		precision mediump int;

		attribute float faceIndex;

		varying vec3 vOutputDirection;

		// RH coordinate system; PMREM face-indexing convention
		vec3 getDirection( vec2 uv, float face ) {

			uv = 2.0 * uv - 1.0;

			vec3 direction = vec3( uv, 1.0 );

			if ( face == 0.0 ) {

				direction = direction.zyx; // ( 1, v, u ) pos x

			} else if ( face == 1.0 ) {

				direction = direction.xzy;
				direction.xz *= -1.0; // ( -u, 1, -v ) pos y

			} else if ( face == 2.0 ) {

				direction.x *= -1.0; // ( -u, v, 1 ) pos z

			} else if ( face == 3.0 ) {

				direction = direction.zyx;
				direction.xz *= -1.0; // ( -1, v, -u ) neg x

			} else if ( face == 4.0 ) {

				direction = direction.xzy;
				direction.xy *= -1.0; // ( -u, -1, v ) neg y

			} else if ( face == 5.0 ) {

				direction.z *= -1.0; // ( u, v, -1 ) neg z

			}

			return direction;

		}

		void main() {

			vOutputDirection = getDirection( uv, faceIndex );
			gl_Position = vec4( position, 1.0 );

		}
	`;

	}

	function WebGLCubeUVMaps( renderer ) {

		let cubeUVmaps = new WeakMap();

		let pmremGenerator = null;

		function get( texture ) {

			if ( texture && texture.isTexture ) {

				const mapping = texture.mapping;

				const isEquirectMap = ( mapping === EquirectangularReflectionMapping || mapping === EquirectangularRefractionMapping );
				const isCubeMap = ( mapping === CubeReflectionMapping || mapping === CubeRefractionMapping );

				// equirect/cube map to cubeUV conversion

				if ( isEquirectMap || isCubeMap ) {

					if ( texture.isRenderTargetTexture && texture.needsPMREMUpdate === true ) {

						texture.needsPMREMUpdate = false;

						let renderTarget = cubeUVmaps.get( texture );

						if ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );

						renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture, renderTarget ) : pmremGenerator.fromCubemap( texture, renderTarget );
						cubeUVmaps.set( texture, renderTarget );

						return renderTarget.texture;

					} else {

						if ( cubeUVmaps.has( texture ) ) {

							return cubeUVmaps.get( texture ).texture;

						} else {

							const image = texture.image;

							if ( ( isEquirectMap && image && image.height > 0 ) || ( isCubeMap && image && isCubeTextureComplete( image ) ) ) {

								if ( pmremGenerator === null ) pmremGenerator = new PMREMGenerator( renderer );

								const renderTarget = isEquirectMap ? pmremGenerator.fromEquirectangular( texture ) : pmremGenerator.fromCubemap( texture );
								cubeUVmaps.set( texture, renderTarget );

								texture.addEventListener( 'dispose', onTextureDispose );

								return renderTarget.texture;

							} else {

								// image not yet ready. try the conversion next frame

								return null;

							}

						}

					}

				}

			}

			return texture;

		}

		function isCubeTextureComplete( image ) {

			let count = 0;
			const length = 6;

			for ( let i = 0; i < length; i ++ ) {

				if ( image[ i ] !== undefined ) count ++;

			}

			return count === length;


		}

		function onTextureDispose( event ) {

			const texture = event.target;

			texture.removeEventListener( 'dispose', onTextureDispose );

			const cubemapUV = cubeUVmaps.get( texture );

			if ( cubemapUV !== undefined ) {

				cubeUVmaps.delete( texture );
				cubemapUV.dispose();

			}

		}

		function dispose() {

			cubeUVmaps = new WeakMap();

			if ( pmremGenerator !== null ) {

				pmremGenerator.dispose();
				pmremGenerator = null;

			}

		}

		return {
			get: get,
			dispose: dispose
		};

	}

	function WebGLExtensions( gl ) {

		const extensions = {};

		function getExtension( name ) {

			if ( extensions[ name ] !== undefined ) {

				return extensions[ name ];

			}

			let extension;

			switch ( name ) {

				case 'WEBGL_depth_texture':
					extension = gl.getExtension( 'WEBGL_depth_texture' ) || gl.getExtension( 'MOZ_WEBGL_depth_texture' ) || gl.getExtension( 'WEBKIT_WEBGL_depth_texture' );
					break;

				case 'EXT_texture_filter_anisotropic':
					extension = gl.getExtension( 'EXT_texture_filter_anisotropic' ) || gl.getExtension( 'MOZ_EXT_texture_filter_anisotropic' ) || gl.getExtension( 'WEBKIT_EXT_texture_filter_anisotropic' );
					break;

				case 'WEBGL_compressed_texture_s3tc':
					extension = gl.getExtension( 'WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'MOZ_WEBGL_compressed_texture_s3tc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_s3tc' );
					break;

				case 'WEBGL_compressed_texture_pvrtc':
					extension = gl.getExtension( 'WEBGL_compressed_texture_pvrtc' ) || gl.getExtension( 'WEBKIT_WEBGL_compressed_texture_pvrtc' );
					break;

				default:
					extension = gl.getExtension( name );

			}

			extensions[ name ] = extension;

			return extension;

		}

		return {

			has: function ( name ) {

				return getExtension( name ) !== null;

			},

			init: function ( capabilities ) {

				if ( capabilities.isWebGL2 ) {

					getExtension( 'EXT_color_buffer_float' );

				} else {

					getExtension( 'WEBGL_depth_texture' );
					getExtension( 'OES_texture_float' );
					getExtension( 'OES_texture_half_float' );
					getExtension( 'OES_texture_half_float_linear' );
					getExtension( 'OES_standard_derivatives' );
					getExtension( 'OES_element_index_uint' );
					getExtension( 'OES_vertex_array_object' );
					getExtension( 'ANGLE_instanced_arrays' );

				}

				getExtension( 'OES_texture_float_linear' );
				getExtension( 'EXT_color_buffer_half_float' );
				getExtension( 'WEBGL_multisampled_render_to_texture' );

			},

			get: function ( name ) {

				const extension = getExtension( name );

				if ( extension === null ) {

					console.warn( 'THREE.WebGLRenderer: ' + name + ' extension not supported.' );

				}

				return extension;

			}

		};

	}

	function WebGLGeometries( gl, attributes, info, bindingStates ) {

		const geometries = {};
		const wireframeAttributes = new WeakMap();

		function onGeometryDispose( event ) {

			const geometry = event.target;

			if ( geometry.index !== null ) {

				attributes.remove( geometry.index );

			}

			for ( const name in geometry.attributes ) {

				attributes.remove( geometry.attributes[ name ] );

			}

			for ( const name in geometry.morphAttributes ) {

				const array = geometry.morphAttributes[ name ];

				for ( let i = 0, l = array.length; i < l; i ++ ) {

					attributes.remove( array[ i ] );

				}

			}

			geometry.removeEventListener( 'dispose', onGeometryDispose );

			delete geometries[ geometry.id ];

			const attribute = wireframeAttributes.get( geometry );

			if ( attribute ) {

				attributes.remove( attribute );
				wireframeAttributes.delete( geometry );

			}

			bindingStates.releaseStatesOfGeometry( geometry );

			if ( geometry.isInstancedBufferGeometry === true ) {

				delete geometry._maxInstanceCount;

			}

			//

			info.memory.geometries --;

		}

		function get( object, geometry ) {

			if ( geometries[ geometry.id ] === true ) return geometry;

			geometry.addEventListener( 'dispose', onGeometryDispose );

			geometries[ geometry.id ] = true;

			info.memory.geometries ++;

			return geometry;

		}

		function update( geometry ) {

			const geometryAttributes = geometry.attributes;

			// Updating index buffer in VAO now. See WebGLBindingStates.

			for ( const name in geometryAttributes ) {

				attributes.update( geometryAttributes[ name ], gl.ARRAY_BUFFER );

			}

			// morph targets

			const morphAttributes = geometry.morphAttributes;

			for ( const name in morphAttributes ) {

				const array = morphAttributes[ name ];

				for ( let i = 0, l = array.length; i < l; i ++ ) {

					attributes.update( array[ i ], gl.ARRAY_BUFFER );

				}

			}

		}

		function updateWireframeAttribute( geometry ) {

			const indices = [];

			const geometryIndex = geometry.index;
			const geometryPosition = geometry.attributes.position;
			let version = 0;

			if ( geometryIndex !== null ) {

				const array = geometryIndex.array;
				version = geometryIndex.version;

				for ( let i = 0, l = array.length; i < l; i += 3 ) {

					const a = array[ i + 0 ];
					const b = array[ i + 1 ];
					const c = array[ i + 2 ];

					indices.push( a, b, b, c, c, a );

				}

			} else if ( geometryPosition !== undefined ) {

				const array = geometryPosition.array;
				version = geometryPosition.version;

				for ( let i = 0, l = ( array.length / 3 ) - 1; i < l; i += 3 ) {

					const a = i + 0;
					const b = i + 1;
					const c = i + 2;

					indices.push( a, b, b, c, c, a );

				}

			} else {

				return;

			}

			const attribute = new ( arrayNeedsUint32( indices ) ? Uint32BufferAttribute : Uint16BufferAttribute )( indices, 1 );
			attribute.version = version;

			// Updating index buffer in VAO now. See WebGLBindingStates

			//

			const previousAttribute = wireframeAttributes.get( geometry );

			if ( previousAttribute ) attributes.remove( previousAttribute );

			//

			wireframeAttributes.set( geometry, attribute );

		}

		function getWireframeAttribute( geometry ) {

			const currentAttribute = wireframeAttributes.get( geometry );

			if ( currentAttribute ) {

				const geometryIndex = geometry.index;

				if ( geometryIndex !== null ) {

					// if the attribute is obsolete, create a new one

					if ( currentAttribute.version < geometryIndex.version ) {

						updateWireframeAttribute( geometry );

					}

				}

			} else {

				updateWireframeAttribute( geometry );

			}

			return wireframeAttributes.get( geometry );

		}

		return {

			get: get,
			update: update,

			getWireframeAttribute: getWireframeAttribute

		};

	}

	function WebGLIndexedBufferRenderer( gl, extensions, info, capabilities ) {

		const isWebGL2 = capabilities.isWebGL2;

		let mode;

		function setMode( value ) {

			mode = value;

		}

		let type, bytesPerElement;

		function setIndex( value ) {

			type = value.type;
			bytesPerElement = value.bytesPerElement;

		}

		function render( start, count ) {

			gl.drawElements( mode, count, type, start * bytesPerElement );

			info.update( count, mode, 1 );

		}

		function renderInstances( start, count, primcount ) {

			if ( primcount === 0 ) return;

			let extension, methodName;

			if ( isWebGL2 ) {

				extension = gl;
				methodName = 'drawElementsInstanced';

			} else {

				extension = extensions.get( 'ANGLE_instanced_arrays' );
				methodName = 'drawElementsInstancedANGLE';

				if ( extension === null ) {

					console.error( 'THREE.WebGLIndexedBufferRenderer: using THREE.InstancedBufferGeometry but hardware does not support extension ANGLE_instanced_arrays.' );
					return;

				}

			}

			extension[ methodName ]( mode, count, type, start * bytesPerElement, primcount );

			info.update( count, mode, primcount );

		}

		//

		this.setMode = setMode;
		this.setIndex = setIndex;
		this.render = render;
		this.renderInstances = renderInstances;

	}

	function WebGLInfo( gl ) {

		const memory = {
			geometries: 0,
			textures: 0
		};

		const render = {
			frame: 0,
			calls: 0,
			triangles: 0,
			points: 0,
			lines: 0
		};

		function update( count, mode, instanceCount ) {

			render.calls ++;

			switch ( mode ) {

				case gl.TRIANGLES:
					render.triangles += instanceCount * ( count / 3 );
					break;

				case gl.LINES:
					render.lines += instanceCount * ( count / 2 );
					break;

				case gl.LINE_STRIP:
					render.lines += instanceCount * ( count - 1 );
					break;

				case gl.LINE_LOOP:
					render.lines += instanceCount * count;
					break;

				case gl.POINTS:
					render.points += instanceCount * count;
					break;

				default:
					console.error( 'THREE.WebGLInfo: Unknown draw mode:', mode );
					break;

			}

		}

		function reset() {

			render.calls = 0;
			render.triangles = 0;
			render.points = 0;
			render.lines = 0;

		}

		return {
			memory: memory,
			render: render,
			programs: null,
			autoReset: true,
			reset: reset,
			update: update
		};

	}

	function numericalSort( a, b ) {

		return a[ 0 ] - b[ 0 ];

	}

	function absNumericalSort( a, b ) {

		return Math.abs( b[ 1 ] ) - Math.abs( a[ 1 ] );

	}

	function WebGLMorphtargets( gl, capabilities, textures ) {

		const influencesList = {};
		const morphInfluences = new Float32Array( 8 );
		const morphTextures = new WeakMap();
		const morph = new Vector4();

		const workInfluences = [];

		for ( let i = 0; i < 8; i ++ ) {

			workInfluences[ i ] = [ i, 0 ];

		}

		function update( object, geometry, program ) {

			const objectInfluences = object.morphTargetInfluences;

			if ( capabilities.isWebGL2 === true ) {

				// instead of using attributes, the WebGL 2 code path encodes morph targets
				// into an array of data textures. Each layer represents a single morph target.

				const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
				const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;

				let entry = morphTextures.get( geometry );

				if ( entry === undefined || entry.count !== morphTargetsCount ) {

					if ( entry !== undefined ) entry.texture.dispose();

					const hasMorphPosition = geometry.morphAttributes.position !== undefined;
					const hasMorphNormals = geometry.morphAttributes.normal !== undefined;
					const hasMorphColors = geometry.morphAttributes.color !== undefined;

					const morphTargets = geometry.morphAttributes.position || [];
					const morphNormals = geometry.morphAttributes.normal || [];
					const morphColors = geometry.morphAttributes.color || [];

					let vertexDataCount = 0;

					if ( hasMorphPosition === true ) vertexDataCount = 1;
					if ( hasMorphNormals === true ) vertexDataCount = 2;
					if ( hasMorphColors === true ) vertexDataCount = 3;

					let width = geometry.attributes.position.count * vertexDataCount;
					let height = 1;

					if ( width > capabilities.maxTextureSize ) {

						height = Math.ceil( width / capabilities.maxTextureSize );
						width = capabilities.maxTextureSize;

					}

					const buffer = new Float32Array( width * height * 4 * morphTargetsCount );

					const texture = new DataArrayTexture( buffer, width, height, morphTargetsCount );
					texture.type = FloatType;
					texture.needsUpdate = true;

					// fill buffer

					const vertexDataStride = vertexDataCount * 4;

					for ( let i = 0; i < morphTargetsCount; i ++ ) {

						const morphTarget = morphTargets[ i ];
						const morphNormal = morphNormals[ i ];
						const morphColor = morphColors[ i ];

						const offset = width * height * 4 * i;

						for ( let j = 0; j < morphTarget.count; j ++ ) {

							const stride = j * vertexDataStride;

							if ( hasMorphPosition === true ) {

								morph.fromBufferAttribute( morphTarget, j );

								buffer[ offset + stride + 0 ] = morph.x;
								buffer[ offset + stride + 1 ] = morph.y;
								buffer[ offset + stride + 2 ] = morph.z;
								buffer[ offset + stride + 3 ] = 0;

							}

							if ( hasMorphNormals === true ) {

								morph.fromBufferAttribute( morphNormal, j );

								buffer[ offset + stride + 4 ] = morph.x;
								buffer[ offset + stride + 5 ] = morph.y;
								buffer[ offset + stride + 6 ] = morph.z;
								buffer[ offset + stride + 7 ] = 0;

							}

							if ( hasMorphColors === true ) {

								morph.fromBufferAttribute( morphColor, j );

								buffer[ offset + stride + 8 ] = morph.x;
								buffer[ offset + stride + 9 ] = morph.y;
								buffer[ offset + stride + 10 ] = morph.z;
								buffer[ offset + stride + 11 ] = ( morphColor.itemSize === 4 ) ? morph.w : 1;

							}

						}

					}

					entry = {
						count: morphTargetsCount,
						texture: texture,
						size: new Vector2( width, height )
					};

					morphTextures.set( geometry, entry );

					function disposeTexture() {

						texture.dispose();

						morphTextures.delete( geometry );

						geometry.removeEventListener( 'dispose', disposeTexture );

					}

					geometry.addEventListener( 'dispose', disposeTexture );

				}

				//

				let morphInfluencesSum = 0;

				for ( let i = 0; i < objectInfluences.length; i ++ ) {

					morphInfluencesSum += objectInfluences[ i ];

				}

				const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;

				program.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );
				program.getUniforms().setValue( gl, 'morphTargetInfluences', objectInfluences );

				program.getUniforms().setValue( gl, 'morphTargetsTexture', entry.texture, textures );
				program.getUniforms().setValue( gl, 'morphTargetsTextureSize', entry.size );


			} else {

				// When object doesn't have morph target influences defined, we treat it as a 0-length array
				// This is important to make sure we set up morphTargetBaseInfluence / morphTargetInfluences

				const length = objectInfluences === undefined ? 0 : objectInfluences.length;

				let influences = influencesList[ geometry.id ];

				if ( influences === undefined || influences.length !== length ) {

					// initialise list

					influences = [];

					for ( let i = 0; i < length; i ++ ) {

						influences[ i ] = [ i, 0 ];

					}

					influencesList[ geometry.id ] = influences;

				}

				// Collect influences

				for ( let i = 0; i < length; i ++ ) {

					const influence = influences[ i ];

					influence[ 0 ] = i;
					influence[ 1 ] = objectInfluences[ i ];

				}

				influences.sort( absNumericalSort );

				for ( let i = 0; i < 8; i ++ ) {

					if ( i < length && influences[ i ][ 1 ] ) {

						workInfluences[ i ][ 0 ] = influences[ i ][ 0 ];
						workInfluences[ i ][ 1 ] = influences[ i ][ 1 ];

					} else {

						workInfluences[ i ][ 0 ] = Number.MAX_SAFE_INTEGER;
						workInfluences[ i ][ 1 ] = 0;

					}

				}

				workInfluences.sort( numericalSort );

				const morphTargets = geometry.morphAttributes.position;
				const morphNormals = geometry.morphAttributes.normal;

				let morphInfluencesSum = 0;

				for ( let i = 0; i < 8; i ++ ) {

					const influence = workInfluences[ i ];
					const index = influence[ 0 ];
					const value = influence[ 1 ];

					if ( index !== Number.MAX_SAFE_INTEGER && value ) {

						if ( morphTargets && geometry.getAttribute( 'morphTarget' + i ) !== morphTargets[ index ] ) {

							geometry.setAttribute( 'morphTarget' + i, morphTargets[ index ] );

						}

						if ( morphNormals && geometry.getAttribute( 'morphNormal' + i ) !== morphNormals[ index ] ) {

							geometry.setAttribute( 'morphNormal' + i, morphNormals[ index ] );

						}

						morphInfluences[ i ] = value;
						morphInfluencesSum += value;

					} else {

						if ( morphTargets && geometry.hasAttribute( 'morphTarget' + i ) === true ) {

							geometry.deleteAttribute( 'morphTarget' + i );

						}

						if ( morphNormals && geometry.hasAttribute( 'morphNormal' + i ) === true ) {

							geometry.deleteAttribute( 'morphNormal' + i );

						}

						morphInfluences[ i ] = 0;

					}

				}

				// GLSL shader uses formula baseinfluence * base + sum(target * influence)
				// This allows us to switch between absolute morphs and relative morphs without changing shader code
				// When baseinfluence = 1 - sum(influence), the above is equivalent to sum((target - base) * influence)
				const morphBaseInfluence = geometry.morphTargetsRelative ? 1 : 1 - morphInfluencesSum;

				program.getUniforms().setValue( gl, 'morphTargetBaseInfluence', morphBaseInfluence );
				program.getUniforms().setValue( gl, 'morphTargetInfluences', morphInfluences );

			}

		}

		return {

			update: update

		};

	}

	function WebGLObjects( gl, geometries, attributes, info ) {

		let updateMap = new WeakMap();

		function update( object ) {

			const frame = info.render.frame;

			const geometry = object.geometry;
			const buffergeometry = geometries.get( object, geometry );

			// Update once per frame

			if ( updateMap.get( buffergeometry ) !== frame ) {

				geometries.update( buffergeometry );

				updateMap.set( buffergeometry, frame );

			}

			if ( object.isInstancedMesh ) {

				if ( object.hasEventListener( 'dispose', onInstancedMeshDispose ) === false ) {

					object.addEventListener( 'dispose', onInstancedMeshDispose );

				}

				if ( updateMap.get( object ) !== frame ) {

					attributes.update( object.instanceMatrix, gl.ARRAY_BUFFER );

					if ( object.instanceColor !== null ) {

						attributes.update( object.instanceColor, gl.ARRAY_BUFFER );

					}

					updateMap.set( object, frame );

				}

			}

			if ( object.isSkinnedMesh ) {

				const skeleton = object.skeleton;

				if ( updateMap.get( skeleton ) !== frame ) {

					skeleton.update();

					updateMap.set( skeleton, frame );

				}

			}

			return buffergeometry;

		}

		function dispose() {

			updateMap = new WeakMap();

		}

		function onInstancedMeshDispose( event ) {

			const instancedMesh = event.target;

			instancedMesh.removeEventListener( 'dispose', onInstancedMeshDispose );

			attributes.remove( instancedMesh.instanceMatrix );

			if ( instancedMesh.instanceColor !== null ) attributes.remove( instancedMesh.instanceColor );

		}

		return {

			update: update,
			dispose: dispose

		};

	}

	/**
	 * Uniforms of a program.
	 * Those form a tree structure with a special top-level container for the root,
	 * which you get by calling 'new WebGLUniforms( gl, program )'.
	 *
	 *
	 * Properties of inner nodes including the top-level container:
	 *
	 * .seq - array of nested uniforms
	 * .map - nested uniforms by name
	 *
	 *
	 * Methods of all nodes except the top-level container:
	 *
	 * .setValue( gl, value, [textures] )
	 *
	 * 		uploads a uniform value(s)
	 *  	the 'textures' parameter is needed for sampler uniforms
	 *
	 *
	 * Static methods of the top-level container (textures factorizations):
	 *
	 * .upload( gl, seq, values, textures )
	 *
	 * 		sets uniforms in 'seq' to 'values[id].value'
	 *
	 * .seqWithValue( seq, values ) : filteredSeq
	 *
	 * 		filters 'seq' entries with corresponding entry in values
	 *
	 *
	 * Methods of the top-level container (textures factorizations):
	 *
	 * .setValue( gl, name, value, textures )
	 *
	 * 		sets uniform with  name 'name' to 'value'
	 *
	 * .setOptional( gl, obj, prop )
	 *
	 * 		like .set for an optional property of the object
	 *
	 */


	const emptyTexture = /*@__PURE__*/ new Texture();
	const emptyArrayTexture = /*@__PURE__*/ new DataArrayTexture();
	const empty3dTexture = /*@__PURE__*/ new Data3DTexture();
	const emptyCubeTexture = /*@__PURE__*/ new CubeTexture();

	// --- Utilities ---

	// Array Caches (provide typed arrays for temporary by size)

	const arrayCacheF32 = [];
	const arrayCacheI32 = [];

	// Float32Array caches used for uploading Matrix uniforms

	const mat4array = new Float32Array( 16 );
	const mat3array = new Float32Array( 9 );
	const mat2array = new Float32Array( 4 );

	// Flattening for arrays of vectors and matrices

	function flatten( array, nBlocks, blockSize ) {

		const firstElem = array[ 0 ];

		if ( firstElem <= 0 || firstElem > 0 ) return array;
		// unoptimized: ! isNaN( firstElem )
		// see http://jacksondunstan.com/articles/983

		const n = nBlocks * blockSize;
		let r = arrayCacheF32[ n ];

		if ( r === undefined ) {

			r = new Float32Array( n );
			arrayCacheF32[ n ] = r;

		}

		if ( nBlocks !== 0 ) {

			firstElem.toArray( r, 0 );

			for ( let i = 1, offset = 0; i !== nBlocks; ++ i ) {

				offset += blockSize;
				array[ i ].toArray( r, offset );

			}

		}

		return r;

	}

	function arraysEqual( a, b ) {

		if ( a.length !== b.length ) return false;

		for ( let i = 0, l = a.length; i < l; i ++ ) {

			if ( a[ i ] !== b[ i ] ) return false;

		}

		return true;

	}

	function copyArray( a, b ) {

		for ( let i = 0, l = b.length; i < l; i ++ ) {

			a[ i ] = b[ i ];

		}

	}

	// Texture unit allocation

	function allocTexUnits( textures, n ) {

		let r = arrayCacheI32[ n ];

		if ( r === undefined ) {

			r = new Int32Array( n );
			arrayCacheI32[ n ] = r;

		}

		for ( let i = 0; i !== n; ++ i ) {

			r[ i ] = textures.allocateTextureUnit();

		}

		return r;

	}

	// --- Setters ---

	// Note: Defining these methods externally, because they come in a bunch
	// and this way their names minify.

	// Single scalar

	function setValueV1f( gl, v ) {

		const cache = this.cache;

		if ( cache[ 0 ] === v ) return;

		gl.uniform1f( this.addr, v );

		cache[ 0 ] = v;

	}

	// Single float vector (from flat array or THREE.VectorN)

	function setValueV2f( gl, v ) {

		const cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {

				gl.uniform2f( this.addr, v.x, v.y );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;

			}

		} else {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniform2fv( this.addr, v );

			copyArray( cache, v );

		}

	}

	function setValueV3f( gl, v ) {

		const cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {

				gl.uniform3f( this.addr, v.x, v.y, v.z );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;
				cache[ 2 ] = v.z;

			}

		} else if ( v.r !== undefined ) {

			if ( cache[ 0 ] !== v.r || cache[ 1 ] !== v.g || cache[ 2 ] !== v.b ) {

				gl.uniform3f( this.addr, v.r, v.g, v.b );

				cache[ 0 ] = v.r;
				cache[ 1 ] = v.g;
				cache[ 2 ] = v.b;

			}

		} else {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniform3fv( this.addr, v );

			copyArray( cache, v );

		}

	}

	function setValueV4f( gl, v ) {

		const cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {

				gl.uniform4f( this.addr, v.x, v.y, v.z, v.w );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;
				cache[ 2 ] = v.z;
				cache[ 3 ] = v.w;

			}

		} else {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniform4fv( this.addr, v );

			copyArray( cache, v );

		}

	}

	// Single matrix (from flat array or THREE.MatrixN)

	function setValueM2( gl, v ) {

		const cache = this.cache;
		const elements = v.elements;

		if ( elements === undefined ) {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniformMatrix2fv( this.addr, false, v );

			copyArray( cache, v );

		} else {

			if ( arraysEqual( cache, elements ) ) return;

			mat2array.set( elements );

			gl.uniformMatrix2fv( this.addr, false, mat2array );

			copyArray( cache, elements );

		}

	}

	function setValueM3( gl, v ) {

		const cache = this.cache;
		const elements = v.elements;

		if ( elements === undefined ) {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniformMatrix3fv( this.addr, false, v );

			copyArray( cache, v );

		} else {

			if ( arraysEqual( cache, elements ) ) return;

			mat3array.set( elements );

			gl.uniformMatrix3fv( this.addr, false, mat3array );

			copyArray( cache, elements );

		}

	}

	function setValueM4( gl, v ) {

		const cache = this.cache;
		const elements = v.elements;

		if ( elements === undefined ) {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniformMatrix4fv( this.addr, false, v );

			copyArray( cache, v );

		} else {

			if ( arraysEqual( cache, elements ) ) return;

			mat4array.set( elements );

			gl.uniformMatrix4fv( this.addr, false, mat4array );

			copyArray( cache, elements );

		}

	}

	// Single integer / boolean

	function setValueV1i( gl, v ) {

		const cache = this.cache;

		if ( cache[ 0 ] === v ) return;

		gl.uniform1i( this.addr, v );

		cache[ 0 ] = v;

	}

	// Single integer / boolean vector (from flat array or THREE.VectorN)

	function setValueV2i( gl, v ) {

		const cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {

				gl.uniform2i( this.addr, v.x, v.y );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;

			}

		} else {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniform2iv( this.addr, v );

			copyArray( cache, v );

		}

	}

	function setValueV3i( gl, v ) {

		const cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {

				gl.uniform3i( this.addr, v.x, v.y, v.z );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;
				cache[ 2 ] = v.z;

			}

		} else {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniform3iv( this.addr, v );

			copyArray( cache, v );

		}

	}

	function setValueV4i( gl, v ) {

		const cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {

				gl.uniform4i( this.addr, v.x, v.y, v.z, v.w );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;
				cache[ 2 ] = v.z;
				cache[ 3 ] = v.w;

			}

		} else {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniform4iv( this.addr, v );

			copyArray( cache, v );

		}

	}

	// Single unsigned integer

	function setValueV1ui( gl, v ) {

		const cache = this.cache;

		if ( cache[ 0 ] === v ) return;

		gl.uniform1ui( this.addr, v );

		cache[ 0 ] = v;

	}

	// Single unsigned integer vector (from flat array or THREE.VectorN)

	function setValueV2ui( gl, v ) {

		const cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y ) {

				gl.uniform2ui( this.addr, v.x, v.y );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;

			}

		} else {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniform2uiv( this.addr, v );

			copyArray( cache, v );

		}

	}

	function setValueV3ui( gl, v ) {

		const cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z ) {

				gl.uniform3ui( this.addr, v.x, v.y, v.z );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;
				cache[ 2 ] = v.z;

			}

		} else {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniform3uiv( this.addr, v );

			copyArray( cache, v );

		}

	}

	function setValueV4ui( gl, v ) {

		const cache = this.cache;

		if ( v.x !== undefined ) {

			if ( cache[ 0 ] !== v.x || cache[ 1 ] !== v.y || cache[ 2 ] !== v.z || cache[ 3 ] !== v.w ) {

				gl.uniform4ui( this.addr, v.x, v.y, v.z, v.w );

				cache[ 0 ] = v.x;
				cache[ 1 ] = v.y;
				cache[ 2 ] = v.z;
				cache[ 3 ] = v.w;

			}

		} else {

			if ( arraysEqual( cache, v ) ) return;

			gl.uniform4uiv( this.addr, v );

			copyArray( cache, v );

		}

	}


	// Single texture (2D / Cube)

	function setValueT1( gl, v, textures ) {

		const cache = this.cache;
		const unit = textures.allocateTextureUnit();

		if ( cache[ 0 ] !== unit ) {

			gl.uniform1i( this.addr, unit );
			cache[ 0 ] = unit;

		}

		textures.setTexture2D( v || emptyTexture, unit );

	}

	function setValueT3D1( gl, v, textures ) {

		const cache = this.cache;
		const unit = textures.allocateTextureUnit();

		if ( cache[ 0 ] !== unit ) {

			gl.uniform1i( this.addr, unit );
			cache[ 0 ] = unit;

		}

		textures.setTexture3D( v || empty3dTexture, unit );

	}

	function setValueT6( gl, v, textures ) {

		const cache = this.cache;
		const unit = textures.allocateTextureUnit();

		if ( cache[ 0 ] !== unit ) {

			gl.uniform1i( this.addr, unit );
			cache[ 0 ] = unit;

		}

		textures.setTextureCube( v || emptyCubeTexture, unit );

	}

	function setValueT2DArray1( gl, v, textures ) {

		const cache = this.cache;
		const unit = textures.allocateTextureUnit();

		if ( cache[ 0 ] !== unit ) {

			gl.uniform1i( this.addr, unit );
			cache[ 0 ] = unit;

		}

		textures.setTexture2DArray( v || emptyArrayTexture, unit );

	}

	// Helper to pick the right setter for the singular case

	function getSingularSetter( type ) {

		switch ( type ) {

			case 0x1406: return setValueV1f; // FLOAT
			case 0x8b50: return setValueV2f; // _VEC2
			case 0x8b51: return setValueV3f; // _VEC3
			case 0x8b52: return setValueV4f; // _VEC4

			case 0x8b5a: return setValueM2; // _MAT2
			case 0x8b5b: return setValueM3; // _MAT3
			case 0x8b5c: return setValueM4; // _MAT4

			case 0x1404: case 0x8b56: return setValueV1i; // INT, BOOL
			case 0x8b53: case 0x8b57: return setValueV2i; // _VEC2
			case 0x8b54: case 0x8b58: return setValueV3i; // _VEC3
			case 0x8b55: case 0x8b59: return setValueV4i; // _VEC4

			case 0x1405: return setValueV1ui; // UINT
			case 0x8dc6: return setValueV2ui; // _VEC2
			case 0x8dc7: return setValueV3ui; // _VEC3
			case 0x8dc8: return setValueV4ui; // _VEC4

			case 0x8b5e: // SAMPLER_2D
			case 0x8d66: // SAMPLER_EXTERNAL_OES
			case 0x8dca: // INT_SAMPLER_2D
			case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
			case 0x8b62: // SAMPLER_2D_SHADOW
				return setValueT1;

			case 0x8b5f: // SAMPLER_3D
			case 0x8dcb: // INT_SAMPLER_3D
			case 0x8dd3: // UNSIGNED_INT_SAMPLER_3D
				return setValueT3D1;

			case 0x8b60: // SAMPLER_CUBE
			case 0x8dcc: // INT_SAMPLER_CUBE
			case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
			case 0x8dc5: // SAMPLER_CUBE_SHADOW
				return setValueT6;

			case 0x8dc1: // SAMPLER_2D_ARRAY
			case 0x8dcf: // INT_SAMPLER_2D_ARRAY
			case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
			case 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW
				return setValueT2DArray1;

		}

	}


	// Array of scalars

	function setValueV1fArray( gl, v ) {

		gl.uniform1fv( this.addr, v );

	}

	// Array of vectors (from flat array or array of THREE.VectorN)

	function setValueV2fArray( gl, v ) {

		const data = flatten( v, this.size, 2 );

		gl.uniform2fv( this.addr, data );

	}

	function setValueV3fArray( gl, v ) {

		const data = flatten( v, this.size, 3 );

		gl.uniform3fv( this.addr, data );

	}

	function setValueV4fArray( gl, v ) {

		const data = flatten( v, this.size, 4 );

		gl.uniform4fv( this.addr, data );

	}

	// Array of matrices (from flat array or array of THREE.MatrixN)

	function setValueM2Array( gl, v ) {

		const data = flatten( v, this.size, 4 );

		gl.uniformMatrix2fv( this.addr, false, data );

	}

	function setValueM3Array( gl, v ) {

		const data = flatten( v, this.size, 9 );

		gl.uniformMatrix3fv( this.addr, false, data );

	}

	function setValueM4Array( gl, v ) {

		const data = flatten( v, this.size, 16 );

		gl.uniformMatrix4fv( this.addr, false, data );

	}

	// Array of integer / boolean

	function setValueV1iArray( gl, v ) {

		gl.uniform1iv( this.addr, v );

	}

	// Array of integer / boolean vectors (from flat array)

	function setValueV2iArray( gl, v ) {

		gl.uniform2iv( this.addr, v );

	}

	function setValueV3iArray( gl, v ) {

		gl.uniform3iv( this.addr, v );

	}

	function setValueV4iArray( gl, v ) {

		gl.uniform4iv( this.addr, v );

	}

	// Array of unsigned integer

	function setValueV1uiArray( gl, v ) {

		gl.uniform1uiv( this.addr, v );

	}

	// Array of unsigned integer vectors (from flat array)

	function setValueV2uiArray( gl, v ) {

		gl.uniform2uiv( this.addr, v );

	}

	function setValueV3uiArray( gl, v ) {

		gl.uniform3uiv( this.addr, v );

	}

	function setValueV4uiArray( gl, v ) {

		gl.uniform4uiv( this.addr, v );

	}


	// Array of textures (2D / 3D / Cube / 2DArray)

	function setValueT1Array( gl, v, textures ) {

		const cache = this.cache;

		const n = v.length;

		const units = allocTexUnits( textures, n );

		if ( ! arraysEqual( cache, units ) ) {

			gl.uniform1iv( this.addr, units );

			copyArray( cache, units );

		}

		for ( let i = 0; i !== n; ++ i ) {

			textures.setTexture2D( v[ i ] || emptyTexture, units[ i ] );

		}

	}

	function setValueT3DArray( gl, v, textures ) {

		const cache = this.cache;

		const n = v.length;

		const units = allocTexUnits( textures, n );

		if ( ! arraysEqual( cache, units ) ) {

			gl.uniform1iv( this.addr, units );

			copyArray( cache, units );

		}

		for ( let i = 0; i !== n; ++ i ) {

			textures.setTexture3D( v[ i ] || empty3dTexture, units[ i ] );

		}

	}

	function setValueT6Array( gl, v, textures ) {

		const cache = this.cache;

		const n = v.length;

		const units = allocTexUnits( textures, n );

		if ( ! arraysEqual( cache, units ) ) {

			gl.uniform1iv( this.addr, units );

			copyArray( cache, units );

		}

		for ( let i = 0; i !== n; ++ i ) {

			textures.setTextureCube( v[ i ] || emptyCubeTexture, units[ i ] );

		}

	}

	function setValueT2DArrayArray( gl, v, textures ) {

		const cache = this.cache;

		const n = v.length;

		const units = allocTexUnits( textures, n );

		if ( ! arraysEqual( cache, units ) ) {

			gl.uniform1iv( this.addr, units );

			copyArray( cache, units );

		}

		for ( let i = 0; i !== n; ++ i ) {

			textures.setTexture2DArray( v[ i ] || emptyArrayTexture, units[ i ] );

		}

	}


	// Helper to pick the right setter for a pure (bottom-level) array

	function getPureArraySetter( type ) {

		switch ( type ) {

			case 0x1406: return setValueV1fArray; // FLOAT
			case 0x8b50: return setValueV2fArray; // _VEC2
			case 0x8b51: return setValueV3fArray; // _VEC3
			case 0x8b52: return setValueV4fArray; // _VEC4

			case 0x8b5a: return setValueM2Array; // _MAT2
			case 0x8b5b: return setValueM3Array; // _MAT3
			case 0x8b5c: return setValueM4Array; // _MAT4

			case 0x1404: case 0x8b56: return setValueV1iArray; // INT, BOOL
			case 0x8b53: case 0x8b57: return setValueV2iArray; // _VEC2
			case 0x8b54: case 0x8b58: return setValueV3iArray; // _VEC3
			case 0x8b55: case 0x8b59: return setValueV4iArray; // _VEC4

			case 0x1405: return setValueV1uiArray; // UINT
			case 0x8dc6: return setValueV2uiArray; // _VEC2
			case 0x8dc7: return setValueV3uiArray; // _VEC3
			case 0x8dc8: return setValueV4uiArray; // _VEC4

			case 0x8b5e: // SAMPLER_2D
			case 0x8d66: // SAMPLER_EXTERNAL_OES
			case 0x8dca: // INT_SAMPLER_2D
			case 0x8dd2: // UNSIGNED_INT_SAMPLER_2D
			case 0x8b62: // SAMPLER_2D_SHADOW
				return setValueT1Array;

			case 0x8b5f: // SAMPLER_3D
			case 0x8dcb: // INT_SAMPLER_3D
			case 0x8dd3: // UNSIGNED_INT_SAMPLER_3D
				return setValueT3DArray;

			case 0x8b60: // SAMPLER_CUBE
			case 0x8dcc: // INT_SAMPLER_CUBE
			case 0x8dd4: // UNSIGNED_INT_SAMPLER_CUBE
			case 0x8dc5: // SAMPLER_CUBE_SHADOW
				return setValueT6Array;

			case 0x8dc1: // SAMPLER_2D_ARRAY
			case 0x8dcf: // INT_SAMPLER_2D_ARRAY
			case 0x8dd7: // UNSIGNED_INT_SAMPLER_2D_ARRAY
			case 0x8dc4: // SAMPLER_2D_ARRAY_SHADOW
				return setValueT2DArrayArray;

		}

	}

	// --- Uniform Classes ---

	class SingleUniform {

		constructor( id, activeInfo, addr ) {

			this.id = id;
			this.addr = addr;
			this.cache = [];
			this.setValue = getSingularSetter( activeInfo.type );

			// this.path = activeInfo.name; // DEBUG

		}

	}

	class PureArrayUniform {

		constructor( id, activeInfo, addr ) {

			this.id = id;
			this.addr = addr;
			this.cache = [];
			this.size = activeInfo.size;
			this.setValue = getPureArraySetter( activeInfo.type );

			// this.path = activeInfo.name; // DEBUG

		}

	}

	class StructuredUniform {

		constructor( id ) {

			this.id = id;

			this.seq = [];
			this.map = {};

		}

		setValue( gl, value, textures ) {

			const seq = this.seq;

			for ( let i = 0, n = seq.length; i !== n; ++ i ) {

				const u = seq[ i ];
				u.setValue( gl, value[ u.id ], textures );

			}

		}

	}

	// --- Top-level ---

	// Parser - builds up the property tree from the path strings

	const RePathPart = /(\w+)(\])?(\[|\.)?/g;

	// extracts
	// 	- the identifier (member name or array index)
	//  - followed by an optional right bracket (found when array index)
	//  - followed by an optional left bracket or dot (type of subscript)
	//
	// Note: These portions can be read in a non-overlapping fashion and
	// allow straightforward parsing of the hierarchy that WebGL encodes
	// in the uniform names.

	function addUniform( container, uniformObject ) {

		container.seq.push( uniformObject );
		container.map[ uniformObject.id ] = uniformObject;

	}

	function parseUniform( activeInfo, addr, container ) {

		const path = activeInfo.name,
			pathLength = path.length;

		// reset RegExp object, because of the early exit of a previous run
		RePathPart.lastIndex = 0;

		while ( true ) {

			const match = RePathPart.exec( path ),
				matchEnd = RePathPart.lastIndex;

			let id = match[ 1 ];
			const idIsIndex = match[ 2 ] === ']',
				subscript = match[ 3 ];

			if ( idIsIndex ) id = id | 0; // convert to integer

			if ( subscript === undefined || subscript === '[' && matchEnd + 2 === pathLength ) {

				// bare name or "pure" bottom-level array "[0]" suffix

				addUniform( container, subscript === undefined ?
					new SingleUniform( id, activeInfo, addr ) :
					new PureArrayUniform( id, activeInfo, addr ) );

				break;

			} else {

				// step into inner node / create it in case it doesn't exist

				const map = container.map;
				let next = map[ id ];

				if ( next === undefined ) {

					next = new StructuredUniform( id );
					addUniform( container, next );

				}

				container = next;

			}

		}

	}

	// Root Container

	class WebGLUniforms {

		constructor( gl, program ) {

			this.seq = [];
			this.map = {};

			const n = gl.getProgramParameter( program, gl.ACTIVE_UNIFORMS );

			for ( let i = 0; i < n; ++ i ) {

				const info = gl.getActiveUniform( program, i ),
					addr = gl.getUniformLocation( program, info.name );

				parseUniform( info, addr, this );

			}

		}

		setValue( gl, name, value, textures ) {

			const u = this.map[ name ];

			if ( u !== undefined ) u.setValue( gl, value, textures );

		}

		setOptional( gl, object, name ) {

			const v = object[ name ];

			if ( v !== undefined ) this.setValue( gl, name, v );

		}

		static upload( gl, seq, values, textures ) {

			for ( let i = 0, n = seq.length; i !== n; ++ i ) {

				const u = seq[ i ],
					v = values[ u.id ];

				if ( v.needsUpdate !== false ) {

					// note: always updating when .needsUpdate is undefined
					u.setValue( gl, v.value, textures );

				}

			}

		}

		static seqWithValue( seq, values ) {

			const r = [];

			for ( let i = 0, n = seq.length; i !== n; ++ i ) {

				const u = seq[ i ];
				if ( u.id in values ) r.push( u );

			}

			return r;

		}

	}

	function WebGLShader( gl, type, string ) {

		const shader = gl.createShader( type );

		gl.shaderSource( shader, string );
		gl.compileShader( shader );

		return shader;

	}

	let programIdCount = 0;

	function handleSource( string, errorLine ) {

		const lines = string.split( '\n' );
		const lines2 = [];

		const from = Math.max( errorLine - 6, 0 );
		const to = Math.min( errorLine + 6, lines.length );

		for ( let i = from; i < to; i ++ ) {

			const line = i + 1;
			lines2.push( `${line === errorLine ? '>' : ' '} ${line}: ${lines[ i ]}` );

		}

		return lines2.join( '\n' );

	}

	function getEncodingComponents( colorSpace ) {

		switch ( colorSpace ) {

			case LinearSRGBColorSpace:
				return [ 'Linear', '( value )' ];
			case SRGBColorSpace:
				return [ 'sRGB', '( value )' ];
			default:
				console.warn( 'THREE.WebGLProgram: Unsupported color space:', colorSpace );
				return [ 'Linear', '( value )' ];

		}

	}

	function getShaderErrors( gl, shader, type ) {

		const status = gl.getShaderParameter( shader, gl.COMPILE_STATUS );
		const errors = gl.getShaderInfoLog( shader ).trim();

		if ( status && errors === '' ) return '';

		const errorMatches = /ERROR: 0:(\d+)/.exec( errors );
		if ( errorMatches ) {

			// --enable-privileged-webgl-extension
			// console.log( '**' + type + '**', gl.getExtension( 'WEBGL_debug_shaders' ).getTranslatedShaderSource( shader ) );

			const errorLine = parseInt( errorMatches[ 1 ] );
			return type.toUpperCase() + '\n\n' + errors + '\n\n' + handleSource( gl.getShaderSource( shader ), errorLine );

		} else {

			return errors;

		}

	}

	function getTexelEncodingFunction( functionName, colorSpace ) {

		const components = getEncodingComponents( colorSpace );
		return 'vec4 ' + functionName + '( vec4 value ) { return LinearTo' + components[ 0 ] + components[ 1 ] + '; }';

	}

	function getToneMappingFunction( functionName, toneMapping ) {

		let toneMappingName;

		switch ( toneMapping ) {

			case LinearToneMapping:
				toneMappingName = 'Linear';
				break;

			case ReinhardToneMapping:
				toneMappingName = 'Reinhard';
				break;

			case CineonToneMapping:
				toneMappingName = 'OptimizedCineon';
				break;

			case ACESFilmicToneMapping:
				toneMappingName = 'ACESFilmic';
				break;

			case CustomToneMapping:
				toneMappingName = 'Custom';
				break;

			default:
				console.warn( 'THREE.WebGLProgram: Unsupported toneMapping:', toneMapping );
				toneMappingName = 'Linear';

		}

		return 'vec3 ' + functionName + '( vec3 color ) { return ' + toneMappingName + 'ToneMapping( color ); }';

	}

	function generateExtensions( parameters ) {

		const chunks = [
			( parameters.extensionDerivatives || !! parameters.envMapCubeUVHeight || parameters.bumpMap || parameters.normalMapTangentSpace || parameters.clearcoatNormalMap || parameters.flatShading || parameters.shaderID === 'physical' ) ? '#extension GL_OES_standard_derivatives : enable' : '',
			( parameters.extensionFragDepth || parameters.logarithmicDepthBuffer ) && parameters.rendererExtensionFragDepth ? '#extension GL_EXT_frag_depth : enable' : '',
			( parameters.extensionDrawBuffers && parameters.rendererExtensionDrawBuffers ) ? '#extension GL_EXT_draw_buffers : require' : '',
			( parameters.extensionShaderTextureLOD || parameters.envMap || parameters.transmission ) && parameters.rendererExtensionShaderTextureLod ? '#extension GL_EXT_shader_texture_lod : enable' : ''
		];

		return chunks.filter( filterEmptyLine ).join( '\n' );

	}

	function generateDefines( defines ) {

		const chunks = [];

		for ( const name in defines ) {

			const value = defines[ name ];

			if ( value === false ) continue;

			chunks.push( '#define ' + name + ' ' + value );

		}

		return chunks.join( '\n' );

	}

	function fetchAttributeLocations( gl, program ) {

		const attributes = {};

		const n = gl.getProgramParameter( program, gl.ACTIVE_ATTRIBUTES );

		for ( let i = 0; i < n; i ++ ) {

			const info = gl.getActiveAttrib( program, i );
			const name = info.name;

			let locationSize = 1;
			if ( info.type === gl.FLOAT_MAT2 ) locationSize = 2;
			if ( info.type === gl.FLOAT_MAT3 ) locationSize = 3;
			if ( info.type === gl.FLOAT_MAT4 ) locationSize = 4;

			// console.log( 'THREE.WebGLProgram: ACTIVE VERTEX ATTRIBUTE:', name, i );

			attributes[ name ] = {
				type: info.type,
				location: gl.getAttribLocation( program, name ),
				locationSize: locationSize
			};

		}

		return attributes;

	}

	function filterEmptyLine( string ) {

		return string !== '';

	}

	function replaceLightNums( string, parameters ) {

		const numSpotLightCoords = parameters.numSpotLightShadows + parameters.numSpotLightMaps - parameters.numSpotLightShadowsWithMaps;

		return string
			.replace( /NUM_DIR_LIGHTS/g, parameters.numDirLights )
			.replace( /NUM_SPOT_LIGHTS/g, parameters.numSpotLights )
			.replace( /NUM_SPOT_LIGHT_MAPS/g, parameters.numSpotLightMaps )
			.replace( /NUM_SPOT_LIGHT_COORDS/g, numSpotLightCoords )
			.replace( /NUM_RECT_AREA_LIGHTS/g, parameters.numRectAreaLights )
			.replace( /NUM_POINT_LIGHTS/g, parameters.numPointLights )
			.replace( /NUM_HEMI_LIGHTS/g, parameters.numHemiLights )
			.replace( /NUM_DIR_LIGHT_SHADOWS/g, parameters.numDirLightShadows )
			.replace( /NUM_SPOT_LIGHT_SHADOWS_WITH_MAPS/g, parameters.numSpotLightShadowsWithMaps )
			.replace( /NUM_SPOT_LIGHT_SHADOWS/g, parameters.numSpotLightShadows )
			.replace( /NUM_POINT_LIGHT_SHADOWS/g, parameters.numPointLightShadows );

	}

	function replaceClippingPlaneNums( string, parameters ) {

		return string
			.replace( /NUM_CLIPPING_PLANES/g, parameters.numClippingPlanes )
			.replace( /UNION_CLIPPING_PLANES/g, ( parameters.numClippingPlanes - parameters.numClipIntersection ) );

	}

	// Resolve Includes

	const includePattern = /^[ \t]*#include +<([\w\d./]+)>/gm;

	function resolveIncludes( string ) {

		return string.replace( includePattern, includeReplacer );

	}

	const shaderChunkMap = new Map( [
		[ 'encodings_fragment', 'colorspace_fragment' ], // @deprecated, r154
		[ 'encodings_pars_fragment', 'colorspace_pars_fragment' ], // @deprecated, r154
		[ 'output_fragment', 'opaque_fragment' ], // @deprecated, r154
	] );

	function includeReplacer( match, include ) {

		let string = ShaderChunk[ include ];

		if ( string === undefined ) {

			const newInclude = shaderChunkMap.get( include );

			if ( newInclude !== undefined ) {

				string = ShaderChunk[ newInclude ];
				console.warn( 'THREE.WebGLRenderer: Shader chunk "%s" has been deprecated. Use "%s" instead.', include, newInclude );

			} else {

				throw new Error( 'Can not resolve #include <' + include + '>' );

			}

		}

		return resolveIncludes( string );

	}

	// Unroll Loops

	const unrollLoopPattern = /#pragma unroll_loop_start\s+for\s*\(\s*int\s+i\s*=\s*(\d+)\s*;\s*i\s*<\s*(\d+)\s*;\s*i\s*\+\+\s*\)\s*{([\s\S]+?)}\s+#pragma unroll_loop_end/g;

	function unrollLoops( string ) {

		return string.replace( unrollLoopPattern, loopReplacer );

	}

	function loopReplacer( match, start, end, snippet ) {

		let string = '';

		for ( let i = parseInt( start ); i < parseInt( end ); i ++ ) {

			string += snippet
				.replace( /\[\s*i\s*\]/g, '[ ' + i + ' ]' )
				.replace( /UNROLLED_LOOP_INDEX/g, i );

		}

		return string;

	}

	//

	function generatePrecision( parameters ) {

		let precisionstring = 'precision ' + parameters.precision + ' float;\nprecision ' + parameters.precision + ' int;';

		if ( parameters.precision === 'highp' ) {

			precisionstring += '\n#define HIGH_PRECISION';

		} else if ( parameters.precision === 'mediump' ) {

			precisionstring += '\n#define MEDIUM_PRECISION';

		} else if ( parameters.precision === 'lowp' ) {

			precisionstring += '\n#define LOW_PRECISION';

		}

		return precisionstring;

	}

	function generateShadowMapTypeDefine( parameters ) {

		let shadowMapTypeDefine = 'SHADOWMAP_TYPE_BASIC';

		if ( parameters.shadowMapType === PCFShadowMap ) {

			shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF';

		} else if ( parameters.shadowMapType === PCFSoftShadowMap ) {

			shadowMapTypeDefine = 'SHADOWMAP_TYPE_PCF_SOFT';

		} else if ( parameters.shadowMapType === VSMShadowMap ) {

			shadowMapTypeDefine = 'SHADOWMAP_TYPE_VSM';

		}

		return shadowMapTypeDefine;

	}

	function generateEnvMapTypeDefine( parameters ) {

		let envMapTypeDefine = 'ENVMAP_TYPE_CUBE';

		if ( parameters.envMap ) {

			switch ( parameters.envMapMode ) {

				case CubeReflectionMapping:
				case CubeRefractionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_CUBE';
					break;

				case CubeUVReflectionMapping:
					envMapTypeDefine = 'ENVMAP_TYPE_CUBE_UV';
					break;

			}

		}

		return envMapTypeDefine;

	}

	function generateEnvMapModeDefine( parameters ) {

		let envMapModeDefine = 'ENVMAP_MODE_REFLECTION';

		if ( parameters.envMap ) {

			switch ( parameters.envMapMode ) {

				case CubeRefractionMapping:

					envMapModeDefine = 'ENVMAP_MODE_REFRACTION';
					break;

			}

		}

		return envMapModeDefine;

	}

	function generateEnvMapBlendingDefine( parameters ) {

		let envMapBlendingDefine = 'ENVMAP_BLENDING_NONE';

		if ( parameters.envMap ) {

			switch ( parameters.combine ) {

				case MultiplyOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_MULTIPLY';
					break;

				case MixOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_MIX';
					break;

				case AddOperation:
					envMapBlendingDefine = 'ENVMAP_BLENDING_ADD';
					break;

			}

		}

		return envMapBlendingDefine;

	}

	function generateCubeUVSize( parameters ) {

		const imageHeight = parameters.envMapCubeUVHeight;

		if ( imageHeight === null ) return null;

		const maxMip = Math.log2( imageHeight ) - 2;

		const texelHeight = 1.0 / imageHeight;

		const texelWidth = 1.0 / ( 3 * Math.max( Math.pow( 2, maxMip ), 7 * 16 ) );

		return { texelWidth, texelHeight, maxMip };

	}

	function WebGLProgram( renderer, cacheKey, parameters, bindingStates ) {

		// TODO Send this event to Three.js DevTools
		// console.log( 'WebGLProgram', cacheKey );

		const gl = renderer.getContext();

		const defines = parameters.defines;

		let vertexShader = parameters.vertexShader;
		let fragmentShader = parameters.fragmentShader;

		const shadowMapTypeDefine = generateShadowMapTypeDefine( parameters );
		const envMapTypeDefine = generateEnvMapTypeDefine( parameters );
		const envMapModeDefine = generateEnvMapModeDefine( parameters );
		const envMapBlendingDefine = generateEnvMapBlendingDefine( parameters );
		const envMapCubeUVSize = generateCubeUVSize( parameters );

		const customExtensions = parameters.isWebGL2 ? '' : generateExtensions( parameters );

		const customDefines = generateDefines( defines );

		const program = gl.createProgram();

		let prefixVertex, prefixFragment;
		let versionString = parameters.glslVersion ? '#version ' + parameters.glslVersion + '\n' : '';

		if ( parameters.isRawShaderMaterial ) {

			prefixVertex = [

				'#define SHADER_TYPE ' + parameters.shaderType,
				'#define SHADER_NAME ' + parameters.shaderName,

				customDefines

			].filter( filterEmptyLine ).join( '\n' );

			if ( prefixVertex.length > 0 ) {

				prefixVertex += '\n';

			}

			prefixFragment = [

				customExtensions,

				'#define SHADER_TYPE ' + parameters.shaderType,
				'#define SHADER_NAME ' + parameters.shaderName,

				customDefines

			].filter( filterEmptyLine ).join( '\n' );

			if ( prefixFragment.length > 0 ) {

				prefixFragment += '\n';

			}

		} else {

			prefixVertex = [

				generatePrecision( parameters ),

				'#define SHADER_TYPE ' + parameters.shaderType,
				'#define SHADER_NAME ' + parameters.shaderName,

				customDefines,

				parameters.instancing ? '#define USE_INSTANCING' : '',
				parameters.instancingColor ? '#define USE_INSTANCING_COLOR' : '',

				parameters.useFog && parameters.fog ? '#define USE_FOG' : '',
				parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',

				parameters.map ? '#define USE_MAP' : '',
				parameters.envMap ? '#define USE_ENVMAP' : '',
				parameters.envMap ? '#define ' + envMapModeDefine : '',
				parameters.lightMap ? '#define USE_LIGHTMAP' : '',
				parameters.aoMap ? '#define USE_AOMAP' : '',
				parameters.bumpMap ? '#define USE_BUMPMAP' : '',
				parameters.normalMap ? '#define USE_NORMALMAP' : '',
				parameters.normalMapObjectSpace ? '#define USE_NORMALMAP_OBJECTSPACE' : '',
				parameters.normalMapTangentSpace ? '#define USE_NORMALMAP_TANGENTSPACE' : '',
				parameters.displacementMap ? '#define USE_DISPLACEMENTMAP' : '',
				parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',

				parameters.anisotropyMap ? '#define USE_ANISOTROPYMAP' : '',

				parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
				parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
				parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',

				parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',
				parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',

				parameters.specularMap ? '#define USE_SPECULARMAP' : '',
				parameters.specularColorMap ? '#define USE_SPECULAR_COLORMAP' : '',
				parameters.specularIntensityMap ? '#define USE_SPECULAR_INTENSITYMAP' : '',

				parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
				parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',
				parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
				parameters.alphaHash ? '#define USE_ALPHAHASH' : '',

				parameters.transmission ? '#define USE_TRANSMISSION' : '',
				parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
				parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',

				parameters.sheenColorMap ? '#define USE_SHEEN_COLORMAP' : '',
				parameters.sheenRoughnessMap ? '#define USE_SHEEN_ROUGHNESSMAP' : '',

				//

				parameters.mapUv ? '#define MAP_UV ' + parameters.mapUv : '',
				parameters.alphaMapUv ? '#define ALPHAMAP_UV ' + parameters.alphaMapUv : '',
				parameters.lightMapUv ? '#define LIGHTMAP_UV ' + parameters.lightMapUv : '',
				parameters.aoMapUv ? '#define AOMAP_UV ' + parameters.aoMapUv : '',
				parameters.emissiveMapUv ? '#define EMISSIVEMAP_UV ' + parameters.emissiveMapUv : '',
				parameters.bumpMapUv ? '#define BUMPMAP_UV ' + parameters.bumpMapUv : '',
				parameters.normalMapUv ? '#define NORMALMAP_UV ' + parameters.normalMapUv : '',
				parameters.displacementMapUv ? '#define DISPLACEMENTMAP_UV ' + parameters.displacementMapUv : '',

				parameters.metalnessMapUv ? '#define METALNESSMAP_UV ' + parameters.metalnessMapUv : '',
				parameters.roughnessMapUv ? '#define ROUGHNESSMAP_UV ' + parameters.roughnessMapUv : '',

				parameters.anisotropyMapUv ? '#define ANISOTROPYMAP_UV ' + parameters.anisotropyMapUv : '',

				parameters.clearcoatMapUv ? '#define CLEARCOATMAP_UV ' + parameters.clearcoatMapUv : '',
				parameters.clearcoatNormalMapUv ? '#define CLEARCOAT_NORMALMAP_UV ' + parameters.clearcoatNormalMapUv : '',
				parameters.clearcoatRoughnessMapUv ? '#define CLEARCOAT_ROUGHNESSMAP_UV ' + parameters.clearcoatRoughnessMapUv : '',

				parameters.iridescenceMapUv ? '#define IRIDESCENCEMAP_UV ' + parameters.iridescenceMapUv : '',
				parameters.iridescenceThicknessMapUv ? '#define IRIDESCENCE_THICKNESSMAP_UV ' + parameters.iridescenceThicknessMapUv : '',

				parameters.sheenColorMapUv ? '#define SHEEN_COLORMAP_UV ' + parameters.sheenColorMapUv : '',
				parameters.sheenRoughnessMapUv ? '#define SHEEN_ROUGHNESSMAP_UV ' + parameters.sheenRoughnessMapUv : '',

				parameters.specularMapUv ? '#define SPECULARMAP_UV ' + parameters.specularMapUv : '',
				parameters.specularColorMapUv ? '#define SPECULAR_COLORMAP_UV ' + parameters.specularColorMapUv : '',
				parameters.specularIntensityMapUv ? '#define SPECULAR_INTENSITYMAP_UV ' + parameters.specularIntensityMapUv : '',

				parameters.transmissionMapUv ? '#define TRANSMISSIONMAP_UV ' + parameters.transmissionMapUv : '',
				parameters.thicknessMapUv ? '#define THICKNESSMAP_UV ' + parameters.thicknessMapUv : '',

				//

				parameters.vertexTangents && parameters.flatShading === false ? '#define USE_TANGENT' : '',
				parameters.vertexColors ? '#define USE_COLOR' : '',
				parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
				parameters.vertexUv1s ? '#define USE_UV1' : '',
				parameters.vertexUv2s ? '#define USE_UV2' : '',
				parameters.vertexUv3s ? '#define USE_UV3' : '',

				parameters.pointsUvs ? '#define USE_POINTS_UV' : '',

				parameters.flatShading ? '#define FLAT_SHADED' : '',

				parameters.skinning ? '#define USE_SKINNING' : '',

				parameters.morphTargets ? '#define USE_MORPHTARGETS' : '',
				parameters.morphNormals && parameters.flatShading === false ? '#define USE_MORPHNORMALS' : '',
				( parameters.morphColors && parameters.isWebGL2 ) ? '#define USE_MORPHCOLORS' : '',
				( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE' : '',
				( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_TEXTURE_STRIDE ' + parameters.morphTextureStride : '',
				( parameters.morphTargetsCount > 0 && parameters.isWebGL2 ) ? '#define MORPHTARGETS_COUNT ' + parameters.morphTargetsCount : '',
				parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
				parameters.flipSided ? '#define FLIP_SIDED' : '',

				parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
				parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

				parameters.sizeAttenuation ? '#define USE_SIZEATTENUATION' : '',

				parameters.useLegacyLights ? '#define LEGACY_LIGHTS' : '',

				parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
				( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

				'uniform mat4 modelMatrix;',
				'uniform mat4 modelViewMatrix;',
				'uniform mat4 projectionMatrix;',
				'uniform mat4 viewMatrix;',
				'uniform mat3 normalMatrix;',
				'uniform vec3 cameraPosition;',
				'uniform bool isOrthographic;',

				'#ifdef USE_INSTANCING',

				'	attribute mat4 instanceMatrix;',

				'#endif',

				'#ifdef USE_INSTANCING_COLOR',

				'	attribute vec3 instanceColor;',

				'#endif',

				'attribute vec3 position;',
				'attribute vec3 normal;',
				'attribute vec2 uv;',

				'#ifdef USE_UV1',

				'	attribute vec2 uv1;',

				'#endif',

				'#ifdef USE_UV2',

				'	attribute vec2 uv2;',

				'#endif',

				'#ifdef USE_UV3',

				'	attribute vec2 uv3;',

				'#endif',

				'#ifdef USE_TANGENT',

				'	attribute vec4 tangent;',

				'#endif',

				'#if defined( USE_COLOR_ALPHA )',

				'	attribute vec4 color;',

				'#elif defined( USE_COLOR )',

				'	attribute vec3 color;',

				'#endif',

				'#if ( defined( USE_MORPHTARGETS ) && ! defined( MORPHTARGETS_TEXTURE ) )',

				'	attribute vec3 morphTarget0;',
				'	attribute vec3 morphTarget1;',
				'	attribute vec3 morphTarget2;',
				'	attribute vec3 morphTarget3;',

				'	#ifdef USE_MORPHNORMALS',

				'		attribute vec3 morphNormal0;',
				'		attribute vec3 morphNormal1;',
				'		attribute vec3 morphNormal2;',
				'		attribute vec3 morphNormal3;',

				'	#else',

				'		attribute vec3 morphTarget4;',
				'		attribute vec3 morphTarget5;',
				'		attribute vec3 morphTarget6;',
				'		attribute vec3 morphTarget7;',

				'	#endif',

				'#endif',

				'#ifdef USE_SKINNING',

				'	attribute vec4 skinIndex;',
				'	attribute vec4 skinWeight;',

				'#endif',

				'\n'

			].filter( filterEmptyLine ).join( '\n' );

			prefixFragment = [

				customExtensions,

				generatePrecision( parameters ),

				'#define SHADER_TYPE ' + parameters.shaderType,
				'#define SHADER_NAME ' + parameters.shaderName,

				customDefines,

				parameters.useFog && parameters.fog ? '#define USE_FOG' : '',
				parameters.useFog && parameters.fogExp2 ? '#define FOG_EXP2' : '',

				parameters.map ? '#define USE_MAP' : '',
				parameters.matcap ? '#define USE_MATCAP' : '',
				parameters.envMap ? '#define USE_ENVMAP' : '',
				parameters.envMap ? '#define ' + envMapTypeDefine : '',
				parameters.envMap ? '#define ' + envMapModeDefine : '',
				parameters.envMap ? '#define ' + envMapBlendingDefine : '',
				envMapCubeUVSize ? '#define CUBEUV_TEXEL_WIDTH ' + envMapCubeUVSize.texelWidth : '',
				envMapCubeUVSize ? '#define CUBEUV_TEXEL_HEIGHT ' + envMapCubeUVSize.texelHeight : '',
				envMapCubeUVSize ? '#define CUBEUV_MAX_MIP ' + envMapCubeUVSize.maxMip + '.0' : '',
				parameters.lightMap ? '#define USE_LIGHTMAP' : '',
				parameters.aoMap ? '#define USE_AOMAP' : '',
				parameters.bumpMap ? '#define USE_BUMPMAP' : '',
				parameters.normalMap ? '#define USE_NORMALMAP' : '',
				parameters.normalMapObjectSpace ? '#define USE_NORMALMAP_OBJECTSPACE' : '',
				parameters.normalMapTangentSpace ? '#define USE_NORMALMAP_TANGENTSPACE' : '',
				parameters.emissiveMap ? '#define USE_EMISSIVEMAP' : '',

				parameters.anisotropy ? '#define USE_ANISOTROPY' : '',
				parameters.anisotropyMap ? '#define USE_ANISOTROPYMAP' : '',

				parameters.clearcoat ? '#define USE_CLEARCOAT' : '',
				parameters.clearcoatMap ? '#define USE_CLEARCOATMAP' : '',
				parameters.clearcoatRoughnessMap ? '#define USE_CLEARCOAT_ROUGHNESSMAP' : '',
				parameters.clearcoatNormalMap ? '#define USE_CLEARCOAT_NORMALMAP' : '',

				parameters.iridescence ? '#define USE_IRIDESCENCE' : '',
				parameters.iridescenceMap ? '#define USE_IRIDESCENCEMAP' : '',
				parameters.iridescenceThicknessMap ? '#define USE_IRIDESCENCE_THICKNESSMAP' : '',

				parameters.specularMap ? '#define USE_SPECULARMAP' : '',
				parameters.specularColorMap ? '#define USE_SPECULAR_COLORMAP' : '',
				parameters.specularIntensityMap ? '#define USE_SPECULAR_INTENSITYMAP' : '',

				parameters.roughnessMap ? '#define USE_ROUGHNESSMAP' : '',
				parameters.metalnessMap ? '#define USE_METALNESSMAP' : '',

				parameters.alphaMap ? '#define USE_ALPHAMAP' : '',
				parameters.alphaTest ? '#define USE_ALPHATEST' : '',
				parameters.alphaHash ? '#define USE_ALPHAHASH' : '',

				parameters.sheen ? '#define USE_SHEEN' : '',
				parameters.sheenColorMap ? '#define USE_SHEEN_COLORMAP' : '',
				parameters.sheenRoughnessMap ? '#define USE_SHEEN_ROUGHNESSMAP' : '',

				parameters.transmission ? '#define USE_TRANSMISSION' : '',
				parameters.transmissionMap ? '#define USE_TRANSMISSIONMAP' : '',
				parameters.thicknessMap ? '#define USE_THICKNESSMAP' : '',

				parameters.vertexTangents && parameters.flatShading === false ? '#define USE_TANGENT' : '',
				parameters.vertexColors || parameters.instancingColor ? '#define USE_COLOR' : '',
				parameters.vertexAlphas ? '#define USE_COLOR_ALPHA' : '',
				parameters.vertexUv1s ? '#define USE_UV1' : '',
				parameters.vertexUv2s ? '#define USE_UV2' : '',
				parameters.vertexUv3s ? '#define USE_UV3' : '',

				parameters.pointsUvs ? '#define USE_POINTS_UV' : '',

				parameters.gradientMap ? '#define USE_GRADIENTMAP' : '',

				parameters.flatShading ? '#define FLAT_SHADED' : '',

				parameters.doubleSided ? '#define DOUBLE_SIDED' : '',
				parameters.flipSided ? '#define FLIP_SIDED' : '',

				parameters.shadowMapEnabled ? '#define USE_SHADOWMAP' : '',
				parameters.shadowMapEnabled ? '#define ' + shadowMapTypeDefine : '',

				parameters.premultipliedAlpha ? '#define PREMULTIPLIED_ALPHA' : '',

				parameters.useLegacyLights ? '#define LEGACY_LIGHTS' : '',

				parameters.decodeVideoTexture ? '#define DECODE_VIDEO_TEXTURE' : '',

				parameters.logarithmicDepthBuffer ? '#define USE_LOGDEPTHBUF' : '',
				( parameters.logarithmicDepthBuffer && parameters.rendererExtensionFragDepth ) ? '#define USE_LOGDEPTHBUF_EXT' : '',

				'uniform mat4 viewMatrix;',
				'uniform vec3 cameraPosition;',
				'uniform bool isOrthographic;',

				( parameters.toneMapping !== NoToneMapping ) ? '#define TONE_MAPPING' : '',
				( parameters.toneMapping !== NoToneMapping ) ? ShaderChunk[ 'tonemapping_pars_fragment' ] : '', // this code is required here because it is used by the toneMapping() function defined below
				( parameters.toneMapping !== NoToneMapping ) ? getToneMappingFunction( 'toneMapping', parameters.toneMapping ) : '',

				parameters.dithering ? '#define DITHERING' : '',
				parameters.opaque ? '#define OPAQUE' : '',

				ShaderChunk[ 'colorspace_pars_fragment' ], // this code is required here because it is used by the various encoding/decoding function defined below
				getTexelEncodingFunction( 'linearToOutputTexel', parameters.outputColorSpace ),

				parameters.useDepthPacking ? '#define DEPTH_PACKING ' + parameters.depthPacking : '',

				'\n'

			].filter( filterEmptyLine ).join( '\n' );

		}

		vertexShader = resolveIncludes( vertexShader );
		vertexShader = replaceLightNums( vertexShader, parameters );
		vertexShader = replaceClippingPlaneNums( vertexShader, parameters );

		fragmentShader = resolveIncludes( fragmentShader );
		fragmentShader = replaceLightNums( fragmentShader, parameters );
		fragmentShader = replaceClippingPlaneNums( fragmentShader, parameters );

		vertexShader = unrollLoops( vertexShader );
		fragmentShader = unrollLoops( fragmentShader );

		if ( parameters.isWebGL2 && parameters.isRawShaderMaterial !== true ) {

			// GLSL 3.0 conversion for built-in materials and ShaderMaterial

			versionString = '#version 300 es\n';

			prefixVertex = [
				'precision mediump sampler2DArray;',
				'#define attribute in',
				'#define varying out',
				'#define texture2D texture'
			].join( '\n' ) + '\n' + prefixVertex;

			prefixFragment = [
				'#define varying in',
				( parameters.glslVersion === GLSL3 ) ? '' : 'layout(location = 0) out highp vec4 pc_fragColor;',
				( parameters.glslVersion === GLSL3 ) ? '' : '#define gl_FragColor pc_fragColor',
				'#define gl_FragDepthEXT gl_FragDepth',
				'#define texture2D texture',
				'#define textureCube texture',
				'#define texture2DProj textureProj',
				'#define texture2DLodEXT textureLod',
				'#define texture2DProjLodEXT textureProjLod',
				'#define textureCubeLodEXT textureLod',
				'#define texture2DGradEXT textureGrad',
				'#define texture2DProjGradEXT textureProjGrad',
				'#define textureCubeGradEXT textureGrad'
			].join( '\n' ) + '\n' + prefixFragment;

		}

		const vertexGlsl = versionString + prefixVertex + vertexShader;
		const fragmentGlsl = versionString + prefixFragment + fragmentShader;

		// console.log( '*VERTEX*', vertexGlsl );
		// console.log( '*FRAGMENT*', fragmentGlsl );

		const glVertexShader = WebGLShader( gl, gl.VERTEX_SHADER, vertexGlsl );
		const glFragmentShader = WebGLShader( gl, gl.FRAGMENT_SHADER, fragmentGlsl );

		gl.attachShader( program, glVertexShader );
		gl.attachShader( program, glFragmentShader );

		// Force a particular attribute to index 0.

		if ( parameters.index0AttributeName !== undefined ) {

			gl.bindAttribLocation( program, 0, parameters.index0AttributeName );

		} else if ( parameters.morphTargets === true ) {

			// programs with morphTargets displace position out of attribute 0
			gl.bindAttribLocation( program, 0, 'position' );

		}

		gl.linkProgram( program );

		// check for link errors
		if ( renderer.debug.checkShaderErrors ) {

			const programLog = gl.getProgramInfoLog( program ).trim();
			const vertexLog = gl.getShaderInfoLog( glVertexShader ).trim();
			const fragmentLog = gl.getShaderInfoLog( glFragmentShader ).trim();

			let runnable = true;
			let haveDiagnostics = true;

			if ( gl.getProgramParameter( program, gl.LINK_STATUS ) === false ) {

				runnable = false;

				if ( typeof renderer.debug.onShaderError === 'function' ) {

					renderer.debug.onShaderError( gl, program, glVertexShader, glFragmentShader );

				} else {

					// default error reporting

					const vertexErrors = getShaderErrors( gl, glVertexShader, 'vertex' );
					const fragmentErrors = getShaderErrors( gl, glFragmentShader, 'fragment' );

					console.error(
						'THREE.WebGLProgram: Shader Error ' + gl.getError() + ' - ' +
						'VALIDATE_STATUS ' + gl.getProgramParameter( program, gl.VALIDATE_STATUS ) + '\n\n' +
						'Program Info Log: ' + programLog + '\n' +
						vertexErrors + '\n' +
						fragmentErrors
					);

				}

			} else if ( programLog !== '' ) {

				console.warn( 'THREE.WebGLProgram: Program Info Log:', programLog );

			} else if ( vertexLog === '' || fragmentLog === '' ) {

				haveDiagnostics = false;

			}

			if ( haveDiagnostics ) {

				this.diagnostics = {

					runnable: runnable,

					programLog: programLog,

					vertexShader: {

						log: vertexLog,
						prefix: prefixVertex

					},

					fragmentShader: {

						log: fragmentLog,
						prefix: prefixFragment

					}

				};

			}

		}

		// Clean up

		// Crashes in iOS9 and iOS10. #18402
		// gl.detachShader( program, glVertexShader );
		// gl.detachShader( program, glFragmentShader );

		gl.deleteShader( glVertexShader );
		gl.deleteShader( glFragmentShader );

		// set up caching for uniform locations

		let cachedUniforms;

		this.getUniforms = function () {

			if ( cachedUniforms === undefined ) {

				cachedUniforms = new WebGLUniforms( gl, program );

			}

			return cachedUniforms;

		};

		// set up caching for attribute locations

		let cachedAttributes;

		this.getAttributes = function () {

			if ( cachedAttributes === undefined ) {

				cachedAttributes = fetchAttributeLocations( gl, program );

			}

			return cachedAttributes;

		};

		// free resource

		this.destroy = function () {

			bindingStates.releaseStatesOfProgram( this );

			gl.deleteProgram( program );
			this.program = undefined;

		};

		//

		this.type = parameters.shaderType;
		this.name = parameters.shaderName;
		this.id = programIdCount ++;
		this.cacheKey = cacheKey;
		this.usedTimes = 1;
		this.program = program;
		this.vertexShader = glVertexShader;
		this.fragmentShader = glFragmentShader;

		return this;

	}

	let _id$1 = 0;

	class WebGLShaderCache {

		constructor() {

			this.shaderCache = new Map();
			this.materialCache = new Map();

		}

		update( material ) {

			const vertexShader = material.vertexShader;
			const fragmentShader = material.fragmentShader;

			const vertexShaderStage = this._getShaderStage( vertexShader );
			const fragmentShaderStage = this._getShaderStage( fragmentShader );

			const materialShaders = this._getShaderCacheForMaterial( material );

			if ( materialShaders.has( vertexShaderStage ) === false ) {

				materialShaders.add( vertexShaderStage );
				vertexShaderStage.usedTimes ++;

			}

			if ( materialShaders.has( fragmentShaderStage ) === false ) {

				materialShaders.add( fragmentShaderStage );
				fragmentShaderStage.usedTimes ++;

			}

			return this;

		}

		remove( material ) {

			const materialShaders = this.materialCache.get( material );

			for ( const shaderStage of materialShaders ) {

				shaderStage.usedTimes --;

				if ( shaderStage.usedTimes === 0 ) this.shaderCache.delete( shaderStage.code );

			}

			this.materialCache.delete( material );

			return this;

		}

		getVertexShaderID( material ) {

			return this._getShaderStage( material.vertexShader ).id;

		}

		getFragmentShaderID( material ) {

			return this._getShaderStage( material.fragmentShader ).id;

		}

		dispose() {

			this.shaderCache.clear();
			this.materialCache.clear();

		}

		_getShaderCacheForMaterial( material ) {

			const cache = this.materialCache;
			let set = cache.get( material );

			if ( set === undefined ) {

				set = new Set();
				cache.set( material, set );

			}

			return set;

		}

		_getShaderStage( code ) {

			const cache = this.shaderCache;
			let stage = cache.get( code );

			if ( stage === undefined ) {

				stage = new WebGLShaderStage( code );
				cache.set( code, stage );

			}

			return stage;

		}

	}

	class WebGLShaderStage {

		constructor( code ) {

			this.id = _id$1 ++;

			this.code = code;
			this.usedTimes = 0;

		}

	}

	function WebGLPrograms( renderer, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping ) {

		const _programLayers = new Layers();
		const _customShaders = new WebGLShaderCache();
		const programs = [];

		const IS_WEBGL2 = capabilities.isWebGL2;
		const logarithmicDepthBuffer = capabilities.logarithmicDepthBuffer;
		const SUPPORTS_VERTEX_TEXTURES = capabilities.vertexTextures;

		let precision = capabilities.precision;

		const shaderIDs = {
			MeshDepthMaterial: 'depth',
			MeshDistanceMaterial: 'distanceRGBA',
			MeshNormalMaterial: 'normal',
			MeshBasicMaterial: 'basic',
			MeshLambertMaterial: 'lambert',
			MeshPhongMaterial: 'phong',
			MeshToonMaterial: 'toon',
			MeshStandardMaterial: 'physical',
			MeshPhysicalMaterial: 'physical',
			MeshMatcapMaterial: 'matcap',
			LineBasicMaterial: 'basic',
			LineDashedMaterial: 'dashed',
			PointsMaterial: 'points',
			ShadowMaterial: 'shadow',
			SpriteMaterial: 'sprite'
		};

		function getChannel( value ) {

			if ( value === 0 ) return 'uv';

			return `uv${ value }`;

		}

		function getParameters( material, lights, shadows, scene, object ) {

			const fog = scene.fog;
			const geometry = object.geometry;
			const environment = material.isMeshStandardMaterial ? scene.environment : null;

			const envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );
			const envMapCubeUVHeight = ( !! envMap ) && ( envMap.mapping === CubeUVReflectionMapping ) ? envMap.image.height : null;

			const shaderID = shaderIDs[ material.type ];

			// heuristics to create shader parameters according to lights in the scene
			// (not to blow over maxLights budget)

			if ( material.precision !== null ) {

				precision = capabilities.getMaxPrecision( material.precision );

				if ( precision !== material.precision ) {

					console.warn( 'THREE.WebGLProgram.getParameters:', material.precision, 'not supported, using', precision, 'instead.' );

				}

			}

			//

			const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
			const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;

			let morphTextureStride = 0;

			if ( geometry.morphAttributes.position !== undefined ) morphTextureStride = 1;
			if ( geometry.morphAttributes.normal !== undefined ) morphTextureStride = 2;
			if ( geometry.morphAttributes.color !== undefined ) morphTextureStride = 3;

			//

			let vertexShader, fragmentShader;
			let customVertexShaderID, customFragmentShaderID;

			if ( shaderID ) {

				const shader = ShaderLib[ shaderID ];

				vertexShader = shader.vertexShader;
				fragmentShader = shader.fragmentShader;

			} else {

				vertexShader = material.vertexShader;
				fragmentShader = material.fragmentShader;

				_customShaders.update( material );

				customVertexShaderID = _customShaders.getVertexShaderID( material );
				customFragmentShaderID = _customShaders.getFragmentShaderID( material );

			}

			const currentRenderTarget = renderer.getRenderTarget();

			const IS_INSTANCEDMESH = object.isInstancedMesh === true;

			const HAS_MAP = !! material.map;
			const HAS_MATCAP = !! material.matcap;
			const HAS_ENVMAP = !! envMap;
			const HAS_AOMAP = !! material.aoMap;
			const HAS_LIGHTMAP = !! material.lightMap;
			const HAS_BUMPMAP = !! material.bumpMap;
			const HAS_NORMALMAP = !! material.normalMap;
			const HAS_DISPLACEMENTMAP = !! material.displacementMap;
			const HAS_EMISSIVEMAP = !! material.emissiveMap;

			const HAS_METALNESSMAP = !! material.metalnessMap;
			const HAS_ROUGHNESSMAP = !! material.roughnessMap;

			const HAS_ANISOTROPY = material.anisotropy > 0;
			const HAS_CLEARCOAT = material.clearcoat > 0;
			const HAS_IRIDESCENCE = material.iridescence > 0;
			const HAS_SHEEN = material.sheen > 0;
			const HAS_TRANSMISSION = material.transmission > 0;

			const HAS_ANISOTROPYMAP = HAS_ANISOTROPY && !! material.anisotropyMap;

			const HAS_CLEARCOATMAP = HAS_CLEARCOAT && !! material.clearcoatMap;
			const HAS_CLEARCOAT_NORMALMAP = HAS_CLEARCOAT && !! material.clearcoatNormalMap;
			const HAS_CLEARCOAT_ROUGHNESSMAP = HAS_CLEARCOAT && !! material.clearcoatRoughnessMap;

			const HAS_IRIDESCENCEMAP = HAS_IRIDESCENCE && !! material.iridescenceMap;
			const HAS_IRIDESCENCE_THICKNESSMAP = HAS_IRIDESCENCE && !! material.iridescenceThicknessMap;

			const HAS_SHEEN_COLORMAP = HAS_SHEEN && !! material.sheenColorMap;
			const HAS_SHEEN_ROUGHNESSMAP = HAS_SHEEN && !! material.sheenRoughnessMap;

			const HAS_SPECULARMAP = !! material.specularMap;
			const HAS_SPECULAR_COLORMAP = !! material.specularColorMap;
			const HAS_SPECULAR_INTENSITYMAP = !! material.specularIntensityMap;

			const HAS_TRANSMISSIONMAP = HAS_TRANSMISSION && !! material.transmissionMap;
			const HAS_THICKNESSMAP = HAS_TRANSMISSION && !! material.thicknessMap;

			const HAS_GRADIENTMAP = !! material.gradientMap;

			const HAS_ALPHAMAP = !! material.alphaMap;

			const HAS_ALPHATEST = material.alphaTest > 0;

			const HAS_ALPHAHASH = !! material.alphaHash;

			const HAS_EXTENSIONS = !! material.extensions;

			const HAS_ATTRIBUTE_UV1 = !! geometry.attributes.uv1;
			const HAS_ATTRIBUTE_UV2 = !! geometry.attributes.uv2;
			const HAS_ATTRIBUTE_UV3 = !! geometry.attributes.uv3;

			let toneMapping = NoToneMapping;

			if ( material.toneMapped ) {

				if ( currentRenderTarget === null || currentRenderTarget.isXRRenderTarget === true ) {

					toneMapping = renderer.toneMapping;

				}

			}

			const parameters = {

				isWebGL2: IS_WEBGL2,

				shaderID: shaderID,
				shaderType: material.type,
				shaderName: material.name,

				vertexShader: vertexShader,
				fragmentShader: fragmentShader,
				defines: material.defines,

				customVertexShaderID: customVertexShaderID,
				customFragmentShaderID: customFragmentShaderID,

				isRawShaderMaterial: material.isRawShaderMaterial === true,
				glslVersion: material.glslVersion,

				precision: precision,

				instancing: IS_INSTANCEDMESH,
				instancingColor: IS_INSTANCEDMESH && object.instanceColor !== null,

				supportsVertexTextures: SUPPORTS_VERTEX_TEXTURES,
				outputColorSpace: ( currentRenderTarget === null ) ? renderer.outputColorSpace : ( currentRenderTarget.isXRRenderTarget === true ? currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace ),

				map: HAS_MAP,
				matcap: HAS_MATCAP,
				envMap: HAS_ENVMAP,
				envMapMode: HAS_ENVMAP && envMap.mapping,
				envMapCubeUVHeight: envMapCubeUVHeight,
				aoMap: HAS_AOMAP,
				lightMap: HAS_LIGHTMAP,
				bumpMap: HAS_BUMPMAP,
				normalMap: HAS_NORMALMAP,
				displacementMap: SUPPORTS_VERTEX_TEXTURES && HAS_DISPLACEMENTMAP,
				emissiveMap: HAS_EMISSIVEMAP,

				normalMapObjectSpace: HAS_NORMALMAP && material.normalMapType === ObjectSpaceNormalMap,
				normalMapTangentSpace: HAS_NORMALMAP && material.normalMapType === TangentSpaceNormalMap,

				metalnessMap: HAS_METALNESSMAP,
				roughnessMap: HAS_ROUGHNESSMAP,

				anisotropy: HAS_ANISOTROPY,
				anisotropyMap: HAS_ANISOTROPYMAP,

				clearcoat: HAS_CLEARCOAT,
				clearcoatMap: HAS_CLEARCOATMAP,
				clearcoatNormalMap: HAS_CLEARCOAT_NORMALMAP,
				clearcoatRoughnessMap: HAS_CLEARCOAT_ROUGHNESSMAP,

				iridescence: HAS_IRIDESCENCE,
				iridescenceMap: HAS_IRIDESCENCEMAP,
				iridescenceThicknessMap: HAS_IRIDESCENCE_THICKNESSMAP,

				sheen: HAS_SHEEN,
				sheenColorMap: HAS_SHEEN_COLORMAP,
				sheenRoughnessMap: HAS_SHEEN_ROUGHNESSMAP,

				specularMap: HAS_SPECULARMAP,
				specularColorMap: HAS_SPECULAR_COLORMAP,
				specularIntensityMap: HAS_SPECULAR_INTENSITYMAP,

				transmission: HAS_TRANSMISSION,
				transmissionMap: HAS_TRANSMISSIONMAP,
				thicknessMap: HAS_THICKNESSMAP,

				gradientMap: HAS_GRADIENTMAP,

				opaque: material.transparent === false && material.blending === NormalBlending,

				alphaMap: HAS_ALPHAMAP,
				alphaTest: HAS_ALPHATEST,
				alphaHash: HAS_ALPHAHASH,

				combine: material.combine,

				//

				mapUv: HAS_MAP && getChannel( material.map.channel ),
				aoMapUv: HAS_AOMAP && getChannel( material.aoMap.channel ),
				lightMapUv: HAS_LIGHTMAP && getChannel( material.lightMap.channel ),
				bumpMapUv: HAS_BUMPMAP && getChannel( material.bumpMap.channel ),
				normalMapUv: HAS_NORMALMAP && getChannel( material.normalMap.channel ),
				displacementMapUv: HAS_DISPLACEMENTMAP && getChannel( material.displacementMap.channel ),
				emissiveMapUv: HAS_EMISSIVEMAP && getChannel( material.emissiveMap.channel ),

				metalnessMapUv: HAS_METALNESSMAP && getChannel( material.metalnessMap.channel ),
				roughnessMapUv: HAS_ROUGHNESSMAP && getChannel( material.roughnessMap.channel ),

				anisotropyMapUv: HAS_ANISOTROPYMAP && getChannel( material.anisotropyMap.channel ),

				clearcoatMapUv: HAS_CLEARCOATMAP && getChannel( material.clearcoatMap.channel ),
				clearcoatNormalMapUv: HAS_CLEARCOAT_NORMALMAP && getChannel( material.clearcoatNormalMap.channel ),
				clearcoatRoughnessMapUv: HAS_CLEARCOAT_ROUGHNESSMAP && getChannel( material.clearcoatRoughnessMap.channel ),

				iridescenceMapUv: HAS_IRIDESCENCEMAP && getChannel( material.iridescenceMap.channel ),
				iridescenceThicknessMapUv: HAS_IRIDESCENCE_THICKNESSMAP && getChannel( material.iridescenceThicknessMap.channel ),

				sheenColorMapUv: HAS_SHEEN_COLORMAP && getChannel( material.sheenColorMap.channel ),
				sheenRoughnessMapUv: HAS_SHEEN_ROUGHNESSMAP && getChannel( material.sheenRoughnessMap.channel ),

				specularMapUv: HAS_SPECULARMAP && getChannel( material.specularMap.channel ),
				specularColorMapUv: HAS_SPECULAR_COLORMAP && getChannel( material.specularColorMap.channel ),
				specularIntensityMapUv: HAS_SPECULAR_INTENSITYMAP && getChannel( material.specularIntensityMap.channel ),

				transmissionMapUv: HAS_TRANSMISSIONMAP && getChannel( material.transmissionMap.channel ),
				thicknessMapUv: HAS_THICKNESSMAP && getChannel( material.thicknessMap.channel ),

				alphaMapUv: HAS_ALPHAMAP && getChannel( material.alphaMap.channel ),

				//

				vertexTangents: !! geometry.attributes.tangent && ( HAS_NORMALMAP || HAS_ANISOTROPY ),
				vertexColors: material.vertexColors,
				vertexAlphas: material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4,
				vertexUv1s: HAS_ATTRIBUTE_UV1,
				vertexUv2s: HAS_ATTRIBUTE_UV2,
				vertexUv3s: HAS_ATTRIBUTE_UV3,

				pointsUvs: object.isPoints === true && !! geometry.attributes.uv && ( HAS_MAP || HAS_ALPHAMAP ),

				fog: !! fog,
				useFog: material.fog === true,
				fogExp2: ( fog && fog.isFogExp2 ),

				flatShading: material.flatShading === true,

				sizeAttenuation: material.sizeAttenuation === true,
				logarithmicDepthBuffer: logarithmicDepthBuffer,

				skinning: object.isSkinnedMesh === true,

				morphTargets: geometry.morphAttributes.position !== undefined,
				morphNormals: geometry.morphAttributes.normal !== undefined,
				morphColors: geometry.morphAttributes.color !== undefined,
				morphTargetsCount: morphTargetsCount,
				morphTextureStride: morphTextureStride,

				numDirLights: lights.directional.length,
				numPointLights: lights.point.length,
				numSpotLights: lights.spot.length,
				numSpotLightMaps: lights.spotLightMap.length,
				numRectAreaLights: lights.rectArea.length,
				numHemiLights: lights.hemi.length,

				numDirLightShadows: lights.directionalShadowMap.length,
				numPointLightShadows: lights.pointShadowMap.length,
				numSpotLightShadows: lights.spotShadowMap.length,
				numSpotLightShadowsWithMaps: lights.numSpotLightShadowsWithMaps,

				numClippingPlanes: clipping.numPlanes,
				numClipIntersection: clipping.numIntersection,

				dithering: material.dithering,

				shadowMapEnabled: renderer.shadowMap.enabled && shadows.length > 0,
				shadowMapType: renderer.shadowMap.type,

				toneMapping: toneMapping,
				useLegacyLights: renderer._useLegacyLights,

				decodeVideoTexture: HAS_MAP && ( material.map.isVideoTexture === true ) && ( material.map.colorSpace === SRGBColorSpace ),

				premultipliedAlpha: material.premultipliedAlpha,

				doubleSided: material.side === DoubleSide,
				flipSided: material.side === BackSide,

				useDepthPacking: material.depthPacking >= 0,
				depthPacking: material.depthPacking || 0,

				index0AttributeName: material.index0AttributeName,

				extensionDerivatives: HAS_EXTENSIONS && material.extensions.derivatives === true,
				extensionFragDepth: HAS_EXTENSIONS && material.extensions.fragDepth === true,
				extensionDrawBuffers: HAS_EXTENSIONS && material.extensions.drawBuffers === true,
				extensionShaderTextureLOD: HAS_EXTENSIONS && material.extensions.shaderTextureLOD === true,

				rendererExtensionFragDepth: IS_WEBGL2 || extensions.has( 'EXT_frag_depth' ),
				rendererExtensionDrawBuffers: IS_WEBGL2 || extensions.has( 'WEBGL_draw_buffers' ),
				rendererExtensionShaderTextureLod: IS_WEBGL2 || extensions.has( 'EXT_shader_texture_lod' ),

				customProgramCacheKey: material.customProgramCacheKey()

			};

			return parameters;

		}

		function getProgramCacheKey( parameters ) {

			const array = [];

			if ( parameters.shaderID ) {

				array.push( parameters.shaderID );

			} else {

				array.push( parameters.customVertexShaderID );
				array.push( parameters.customFragmentShaderID );

			}

			if ( parameters.defines !== undefined ) {

				for ( const name in parameters.defines ) {

					array.push( name );
					array.push( parameters.defines[ name ] );

				}

			}

			if ( parameters.isRawShaderMaterial === false ) {

				getProgramCacheKeyParameters( array, parameters );
				getProgramCacheKeyBooleans( array, parameters );
				array.push( renderer.outputColorSpace );

			}

			array.push( parameters.customProgramCacheKey );

			return array.join();

		}

		function getProgramCacheKeyParameters( array, parameters ) {

			array.push( parameters.precision );
			array.push( parameters.outputColorSpace );
			array.push( parameters.envMapMode );
			array.push( parameters.envMapCubeUVHeight );
			array.push( parameters.mapUv );
			array.push( parameters.alphaMapUv );
			array.push( parameters.lightMapUv );
			array.push( parameters.aoMapUv );
			array.push( parameters.bumpMapUv );
			array.push( parameters.normalMapUv );
			array.push( parameters.displacementMapUv );
			array.push( parameters.emissiveMapUv );
			array.push( parameters.metalnessMapUv );
			array.push( parameters.roughnessMapUv );
			array.push( parameters.anisotropyMapUv );
			array.push( parameters.clearcoatMapUv );
			array.push( parameters.clearcoatNormalMapUv );
			array.push( parameters.clearcoatRoughnessMapUv );
			array.push( parameters.iridescenceMapUv );
			array.push( parameters.iridescenceThicknessMapUv );
			array.push( parameters.sheenColorMapUv );
			array.push( parameters.sheenRoughnessMapUv );
			array.push( parameters.specularMapUv );
			array.push( parameters.specularColorMapUv );
			array.push( parameters.specularIntensityMapUv );
			array.push( parameters.transmissionMapUv );
			array.push( parameters.thicknessMapUv );
			array.push( parameters.combine );
			array.push( parameters.fogExp2 );
			array.push( parameters.sizeAttenuation );
			array.push( parameters.morphTargetsCount );
			array.push( parameters.morphAttributeCount );
			array.push( parameters.numDirLights );
			array.push( parameters.numPointLights );
			array.push( parameters.numSpotLights );
			array.push( parameters.numSpotLightMaps );
			array.push( parameters.numHemiLights );
			array.push( parameters.numRectAreaLights );
			array.push( parameters.numDirLightShadows );
			array.push( parameters.numPointLightShadows );
			array.push( parameters.numSpotLightShadows );
			array.push( parameters.numSpotLightShadowsWithMaps );
			array.push( parameters.shadowMapType );
			array.push( parameters.toneMapping );
			array.push( parameters.numClippingPlanes );
			array.push( parameters.numClipIntersection );
			array.push( parameters.depthPacking );

		}

		function getProgramCacheKeyBooleans( array, parameters ) {

			_programLayers.disableAll();

			if ( parameters.isWebGL2 )
				_programLayers.enable( 0 );
			if ( parameters.supportsVertexTextures )
				_programLayers.enable( 1 );
			if ( parameters.instancing )
				_programLayers.enable( 2 );
			if ( parameters.instancingColor )
				_programLayers.enable( 3 );
			if ( parameters.matcap )
				_programLayers.enable( 4 );
			if ( parameters.envMap )
				_programLayers.enable( 5 );
			if ( parameters.normalMapObjectSpace )
				_programLayers.enable( 6 );
			if ( parameters.normalMapTangentSpace )
				_programLayers.enable( 7 );
			if ( parameters.clearcoat )
				_programLayers.enable( 8 );
			if ( parameters.iridescence )
				_programLayers.enable( 9 );
			if ( parameters.alphaTest )
				_programLayers.enable( 10 );
			if ( parameters.vertexColors )
				_programLayers.enable( 11 );
			if ( parameters.vertexAlphas )
				_programLayers.enable( 12 );
			if ( parameters.vertexUv1s )
				_programLayers.enable( 13 );
			if ( parameters.vertexUv2s )
				_programLayers.enable( 14 );
			if ( parameters.vertexUv3s )
				_programLayers.enable( 15 );
			if ( parameters.vertexTangents )
				_programLayers.enable( 16 );
			if ( parameters.anisotropy )
				_programLayers.enable( 17 );

			array.push( _programLayers.mask );
			_programLayers.disableAll();

			if ( parameters.fog )
				_programLayers.enable( 0 );
			if ( parameters.useFog )
				_programLayers.enable( 1 );
			if ( parameters.flatShading )
				_programLayers.enable( 2 );
			if ( parameters.logarithmicDepthBuffer )
				_programLayers.enable( 3 );
			if ( parameters.skinning )
				_programLayers.enable( 4 );
			if ( parameters.morphTargets )
				_programLayers.enable( 5 );
			if ( parameters.morphNormals )
				_programLayers.enable( 6 );
			if ( parameters.morphColors )
				_programLayers.enable( 7 );
			if ( parameters.premultipliedAlpha )
				_programLayers.enable( 8 );
			if ( parameters.shadowMapEnabled )
				_programLayers.enable( 9 );
			if ( parameters.useLegacyLights )
				_programLayers.enable( 10 );
			if ( parameters.doubleSided )
				_programLayers.enable( 11 );
			if ( parameters.flipSided )
				_programLayers.enable( 12 );
			if ( parameters.useDepthPacking )
				_programLayers.enable( 13 );
			if ( parameters.dithering )
				_programLayers.enable( 14 );
			if ( parameters.transmission )
				_programLayers.enable( 15 );
			if ( parameters.sheen )
				_programLayers.enable( 16 );
			if ( parameters.opaque )
				_programLayers.enable( 17 );
			if ( parameters.pointsUvs )
				_programLayers.enable( 18 );
			if ( parameters.decodeVideoTexture )
				_programLayers.enable( 19 );

			array.push( _programLayers.mask );

		}

		function getUniforms( material ) {

			const shaderID = shaderIDs[ material.type ];
			let uniforms;

			if ( shaderID ) {

				const shader = ShaderLib[ shaderID ];
				uniforms = UniformsUtils.clone( shader.uniforms );

			} else {

				uniforms = material.uniforms;

			}

			return uniforms;

		}

		function acquireProgram( parameters, cacheKey ) {

			let program;

			// Check if code has been already compiled
			for ( let p = 0, pl = programs.length; p < pl; p ++ ) {

				const preexistingProgram = programs[ p ];

				if ( preexistingProgram.cacheKey === cacheKey ) {

					program = preexistingProgram;
					++ program.usedTimes;

					break;

				}

			}

			if ( program === undefined ) {

				program = new WebGLProgram( renderer, cacheKey, parameters, bindingStates );
				programs.push( program );

			}

			return program;

		}

		function releaseProgram( program ) {

			if ( -- program.usedTimes === 0 ) {

				// Remove from unordered set
				const i = programs.indexOf( program );
				programs[ i ] = programs[ programs.length - 1 ];
				programs.pop();

				// Free WebGL resources
				program.destroy();

			}

		}

		function releaseShaderCache( material ) {

			_customShaders.remove( material );

		}

		function dispose() {

			_customShaders.dispose();

		}

		return {
			getParameters: getParameters,
			getProgramCacheKey: getProgramCacheKey,
			getUniforms: getUniforms,
			acquireProgram: acquireProgram,
			releaseProgram: releaseProgram,
			releaseShaderCache: releaseShaderCache,
			// Exposed for resource monitoring & error feedback via renderer.info:
			programs: programs,
			dispose: dispose
		};

	}

	function WebGLProperties() {

		let properties = new WeakMap();

		function get( object ) {

			let map = properties.get( object );

			if ( map === undefined ) {

				map = {};
				properties.set( object, map );

			}

			return map;

		}

		function remove( object ) {

			properties.delete( object );

		}

		function update( object, key, value ) {

			properties.get( object )[ key ] = value;

		}

		function dispose() {

			properties = new WeakMap();

		}

		return {
			get: get,
			remove: remove,
			update: update,
			dispose: dispose
		};

	}

	function painterSortStable( a, b ) {

		if ( a.groupOrder !== b.groupOrder ) {

			return a.groupOrder - b.groupOrder;

		} else if ( a.renderOrder !== b.renderOrder ) {

			return a.renderOrder - b.renderOrder;

		} else if ( a.material.id !== b.material.id ) {

			return a.material.id - b.material.id;

		} else if ( a.z !== b.z ) {

			return a.z - b.z;

		} else {

			return a.id - b.id;

		}

	}

	function reversePainterSortStable( a, b ) {

		if ( a.groupOrder !== b.groupOrder ) {

			return a.groupOrder - b.groupOrder;

		} else if ( a.renderOrder !== b.renderOrder ) {

			return a.renderOrder - b.renderOrder;

		} else if ( a.z !== b.z ) {

			return b.z - a.z;

		} else {

			return a.id - b.id;

		}

	}


	function WebGLRenderList() {

		const renderItems = [];
		let renderItemsIndex = 0;

		const opaque = [];
		const transmissive = [];
		const transparent = [];

		function init() {

			renderItemsIndex = 0;

			opaque.length = 0;
			transmissive.length = 0;
			transparent.length = 0;

		}

		function getNextRenderItem( object, geometry, material, groupOrder, z, group ) {

			let renderItem = renderItems[ renderItemsIndex ];

			if ( renderItem === undefined ) {

				renderItem = {
					id: object.id,
					object: object,
					geometry: geometry,
					material: material,
					groupOrder: groupOrder,
					renderOrder: object.renderOrder,
					z: z,
					group: group
				};

				renderItems[ renderItemsIndex ] = renderItem;

			} else {

				renderItem.id = object.id;
				renderItem.object = object;
				renderItem.geometry = geometry;
				renderItem.material = material;
				renderItem.groupOrder = groupOrder;
				renderItem.renderOrder = object.renderOrder;
				renderItem.z = z;
				renderItem.group = group;

			}

			renderItemsIndex ++;

			return renderItem;

		}

		function push( object, geometry, material, groupOrder, z, group ) {

			const renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

			if ( material.transmission > 0.0 ) {

				transmissive.push( renderItem );

			} else if ( material.transparent === true ) {

				transparent.push( renderItem );

			} else {

				opaque.push( renderItem );

			}

		}

		function unshift( object, geometry, material, groupOrder, z, group ) {

			const renderItem = getNextRenderItem( object, geometry, material, groupOrder, z, group );

			if ( material.transmission > 0.0 ) {

				transmissive.unshift( renderItem );

			} else if ( material.transparent === true ) {

				transparent.unshift( renderItem );

			} else {

				opaque.unshift( renderItem );

			}

		}

		function sort( customOpaqueSort, customTransparentSort ) {

			if ( opaque.length > 1 ) opaque.sort( customOpaqueSort || painterSortStable );
			if ( transmissive.length > 1 ) transmissive.sort( customTransparentSort || reversePainterSortStable );
			if ( transparent.length > 1 ) transparent.sort( customTransparentSort || reversePainterSortStable );

		}

		function finish() {

			// Clear references from inactive renderItems in the list

			for ( let i = renderItemsIndex, il = renderItems.length; i < il; i ++ ) {

				const renderItem = renderItems[ i ];

				if ( renderItem.id === null ) break;

				renderItem.id = null;
				renderItem.object = null;
				renderItem.geometry = null;
				renderItem.material = null;
				renderItem.group = null;

			}

		}

		return {

			opaque: opaque,
			transmissive: transmissive,
			transparent: transparent,

			init: init,
			push: push,
			unshift: unshift,
			finish: finish,

			sort: sort
		};

	}

	function WebGLRenderLists() {

		let lists = new WeakMap();

		function get( scene, renderCallDepth ) {

			const listArray = lists.get( scene );
			let list;

			if ( listArray === undefined ) {

				list = new WebGLRenderList();
				lists.set( scene, [ list ] );

			} else {

				if ( renderCallDepth >= listArray.length ) {

					list = new WebGLRenderList();
					listArray.push( list );

				} else {

					list = listArray[ renderCallDepth ];

				}

			}

			return list;

		}

		function dispose() {

			lists = new WeakMap();

		}

		return {
			get: get,
			dispose: dispose
		};

	}

	function UniformsCache() {

		const lights = {};

		return {

			get: function ( light ) {

				if ( lights[ light.id ] !== undefined ) {

					return lights[ light.id ];

				}

				let uniforms;

				switch ( light.type ) {

					case 'DirectionalLight':
						uniforms = {
							direction: new Vector3(),
							color: new Color()
						};
						break;

					case 'SpotLight':
						uniforms = {
							position: new Vector3(),
							direction: new Vector3(),
							color: new Color(),
							distance: 0,
							coneCos: 0,
							penumbraCos: 0,
							decay: 0
						};
						break;

					case 'PointLight':
						uniforms = {
							position: new Vector3(),
							color: new Color(),
							distance: 0,
							decay: 0
						};
						break;

					case 'HemisphereLight':
						uniforms = {
							direction: new Vector3(),
							skyColor: new Color(),
							groundColor: new Color()
						};
						break;

					case 'RectAreaLight':
						uniforms = {
							color: new Color(),
							position: new Vector3(),
							halfWidth: new Vector3(),
							halfHeight: new Vector3()
						};
						break;

				}

				lights[ light.id ] = uniforms;

				return uniforms;

			}

		};

	}

	function ShadowUniformsCache() {

		const lights = {};

		return {

			get: function ( light ) {

				if ( lights[ light.id ] !== undefined ) {

					return lights[ light.id ];

				}

				let uniforms;

				switch ( light.type ) {

					case 'DirectionalLight':
						uniforms = {
							shadowBias: 0,
							shadowNormalBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2()
						};
						break;

					case 'SpotLight':
						uniforms = {
							shadowBias: 0,
							shadowNormalBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2()
						};
						break;

					case 'PointLight':
						uniforms = {
							shadowBias: 0,
							shadowNormalBias: 0,
							shadowRadius: 1,
							shadowMapSize: new Vector2(),
							shadowCameraNear: 1,
							shadowCameraFar: 1000
						};
						break;

					// TODO (abelnation): set RectAreaLight shadow uniforms

				}

				lights[ light.id ] = uniforms;

				return uniforms;

			}

		};

	}



	let nextVersion = 0;

	function shadowCastingAndTexturingLightsFirst( lightA, lightB ) {

		return ( lightB.castShadow ? 2 : 0 ) - ( lightA.castShadow ? 2 : 0 ) + ( lightB.map ? 1 : 0 ) - ( lightA.map ? 1 : 0 );

	}

	function WebGLLights( extensions, capabilities ) {

		const cache = new UniformsCache();

		const shadowCache = ShadowUniformsCache();

		const state = {

			version: 0,

			hash: {
				directionalLength: - 1,
				pointLength: - 1,
				spotLength: - 1,
				rectAreaLength: - 1,
				hemiLength: - 1,

				numDirectionalShadows: - 1,
				numPointShadows: - 1,
				numSpotShadows: - 1,
				numSpotMaps: - 1
			},

			ambient: [ 0, 0, 0 ],
			probe: [],
			directional: [],
			directionalShadow: [],
			directionalShadowMap: [],
			directionalShadowMatrix: [],
			spot: [],
			spotLightMap: [],
			spotShadow: [],
			spotShadowMap: [],
			spotLightMatrix: [],
			rectArea: [],
			rectAreaLTC1: null,
			rectAreaLTC2: null,
			point: [],
			pointShadow: [],
			pointShadowMap: [],
			pointShadowMatrix: [],
			hemi: [],
			numSpotLightShadowsWithMaps: 0

		};

		for ( let i = 0; i < 9; i ++ ) state.probe.push( new Vector3() );

		const vector3 = new Vector3();
		const matrix4 = new Matrix4();
		const matrix42 = new Matrix4();

		function setup( lights, useLegacyLights ) {

			let r = 0, g = 0, b = 0;

			for ( let i = 0; i < 9; i ++ ) state.probe[ i ].set( 0, 0, 0 );

			let directionalLength = 0;
			let pointLength = 0;
			let spotLength = 0;
			let rectAreaLength = 0;
			let hemiLength = 0;

			let numDirectionalShadows = 0;
			let numPointShadows = 0;
			let numSpotShadows = 0;
			let numSpotMaps = 0;
			let numSpotShadowsWithMaps = 0;

			// ordering : [shadow casting + map texturing, map texturing, shadow casting, none ]
			lights.sort( shadowCastingAndTexturingLightsFirst );

			// artist-friendly light intensity scaling factor
			const scaleFactor = ( useLegacyLights === true ) ? Math.PI : 1;

			for ( let i = 0, l = lights.length; i < l; i ++ ) {

				const light = lights[ i ];

				const color = light.color;
				const intensity = light.intensity;
				const distance = light.distance;

				const shadowMap = ( light.shadow && light.shadow.map ) ? light.shadow.map.texture : null;

				if ( light.isAmbientLight ) {

					r += color.r * intensity * scaleFactor;
					g += color.g * intensity * scaleFactor;
					b += color.b * intensity * scaleFactor;

				} else if ( light.isLightProbe ) {

					for ( let j = 0; j < 9; j ++ ) {

						state.probe[ j ].addScaledVector( light.sh.coefficients[ j ], intensity );

					}

				} else if ( light.isDirectionalLight ) {

					const uniforms = cache.get( light );

					uniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );

					if ( light.castShadow ) {

						const shadow = light.shadow;

						const shadowUniforms = shadowCache.get( light );

						shadowUniforms.shadowBias = shadow.bias;
						shadowUniforms.shadowNormalBias = shadow.normalBias;
						shadowUniforms.shadowRadius = shadow.radius;
						shadowUniforms.shadowMapSize = shadow.mapSize;

						state.directionalShadow[ directionalLength ] = shadowUniforms;
						state.directionalShadowMap[ directionalLength ] = shadowMap;
						state.directionalShadowMatrix[ directionalLength ] = light.shadow.matrix;

						numDirectionalShadows ++;

					}

					state.directional[ directionalLength ] = uniforms;

					directionalLength ++;

				} else if ( light.isSpotLight ) {

					const uniforms = cache.get( light );

					uniforms.position.setFromMatrixPosition( light.matrixWorld );

					uniforms.color.copy( color ).multiplyScalar( intensity * scaleFactor );
					uniforms.distance = distance;

					uniforms.coneCos = Math.cos( light.angle );
					uniforms.penumbraCos = Math.cos( light.angle * ( 1 - light.penumbra ) );
					uniforms.decay = light.decay;

					state.spot[ spotLength ] = uniforms;

					const shadow = light.shadow;

					if ( light.map ) {

						state.spotLightMap[ numSpotMaps ] = light.map;
						numSpotMaps ++;

						// make sure the lightMatrix is up to date
						// TODO : do it if required only
						shadow.updateMatrices( light );

						if ( light.castShadow ) numSpotShadowsWithMaps ++;

					}

					state.spotLightMatrix[ spotLength ] = shadow.matrix;

					if ( light.castShadow ) {

						const shadowUniforms = shadowCache.get( light );

						shadowUniforms.shadowBias = shadow.bias;
						shadowUniforms.shadowNormalBias = shadow.normalBias;
						shadowUniforms.shadowRadius = shadow.radius;
						shadowUniforms.shadowMapSize = shadow.mapSize;

						state.spotShadow[ spotLength ] = shadowUniforms;
						state.spotShadowMap[ spotLength ] = shadowMap;

						numSpotShadows ++;

					}

					spotLength ++;

				} else if ( light.isRectAreaLight ) {

					const uniforms = cache.get( light );

					uniforms.color.copy( color ).multiplyScalar( intensity );

					uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
					uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );

					state.rectArea[ rectAreaLength ] = uniforms;

					rectAreaLength ++;

				} else if ( light.isPointLight ) {

					const uniforms = cache.get( light );

					uniforms.color.copy( light.color ).multiplyScalar( light.intensity * scaleFactor );
					uniforms.distance = light.distance;
					uniforms.decay = light.decay;

					if ( light.castShadow ) {

						const shadow = light.shadow;

						const shadowUniforms = shadowCache.get( light );

						shadowUniforms.shadowBias = shadow.bias;
						shadowUniforms.shadowNormalBias = shadow.normalBias;
						shadowUniforms.shadowRadius = shadow.radius;
						shadowUniforms.shadowMapSize = shadow.mapSize;
						shadowUniforms.shadowCameraNear = shadow.camera.near;
						shadowUniforms.shadowCameraFar = shadow.camera.far;

						state.pointShadow[ pointLength ] = shadowUniforms;
						state.pointShadowMap[ pointLength ] = shadowMap;
						state.pointShadowMatrix[ pointLength ] = light.shadow.matrix;

						numPointShadows ++;

					}

					state.point[ pointLength ] = uniforms;

					pointLength ++;

				} else if ( light.isHemisphereLight ) {

					const uniforms = cache.get( light );

					uniforms.skyColor.copy( light.color ).multiplyScalar( intensity * scaleFactor );
					uniforms.groundColor.copy( light.groundColor ).multiplyScalar( intensity * scaleFactor );

					state.hemi[ hemiLength ] = uniforms;

					hemiLength ++;

				}

			}

			if ( rectAreaLength > 0 ) {

				if ( capabilities.isWebGL2 ) {

					// WebGL 2

					state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
					state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;

				} else {

					// WebGL 1

					if ( extensions.has( 'OES_texture_float_linear' ) === true ) {

						state.rectAreaLTC1 = UniformsLib.LTC_FLOAT_1;
						state.rectAreaLTC2 = UniformsLib.LTC_FLOAT_2;

					} else if ( extensions.has( 'OES_texture_half_float_linear' ) === true ) {

						state.rectAreaLTC1 = UniformsLib.LTC_HALF_1;
						state.rectAreaLTC2 = UniformsLib.LTC_HALF_2;

					} else {

						console.error( 'THREE.WebGLRenderer: Unable to use RectAreaLight. Missing WebGL extensions.' );

					}

				}

			}

			state.ambient[ 0 ] = r;
			state.ambient[ 1 ] = g;
			state.ambient[ 2 ] = b;

			const hash = state.hash;

			if ( hash.directionalLength !== directionalLength ||
				hash.pointLength !== pointLength ||
				hash.spotLength !== spotLength ||
				hash.rectAreaLength !== rectAreaLength ||
				hash.hemiLength !== hemiLength ||
				hash.numDirectionalShadows !== numDirectionalShadows ||
				hash.numPointShadows !== numPointShadows ||
				hash.numSpotShadows !== numSpotShadows ||
				hash.numSpotMaps !== numSpotMaps ) {

				state.directional.length = directionalLength;
				state.spot.length = spotLength;
				state.rectArea.length = rectAreaLength;
				state.point.length = pointLength;
				state.hemi.length = hemiLength;

				state.directionalShadow.length = numDirectionalShadows;
				state.directionalShadowMap.length = numDirectionalShadows;
				state.pointShadow.length = numPointShadows;
				state.pointShadowMap.length = numPointShadows;
				state.spotShadow.length = numSpotShadows;
				state.spotShadowMap.length = numSpotShadows;
				state.directionalShadowMatrix.length = numDirectionalShadows;
				state.pointShadowMatrix.length = numPointShadows;
				state.spotLightMatrix.length = numSpotShadows + numSpotMaps - numSpotShadowsWithMaps;
				state.spotLightMap.length = numSpotMaps;
				state.numSpotLightShadowsWithMaps = numSpotShadowsWithMaps;

				hash.directionalLength = directionalLength;
				hash.pointLength = pointLength;
				hash.spotLength = spotLength;
				hash.rectAreaLength = rectAreaLength;
				hash.hemiLength = hemiLength;

				hash.numDirectionalShadows = numDirectionalShadows;
				hash.numPointShadows = numPointShadows;
				hash.numSpotShadows = numSpotShadows;
				hash.numSpotMaps = numSpotMaps;

				state.version = nextVersion ++;

			}

		}

		function setupView( lights, camera ) {

			let directionalLength = 0;
			let pointLength = 0;
			let spotLength = 0;
			let rectAreaLength = 0;
			let hemiLength = 0;

			const viewMatrix = camera.matrixWorldInverse;

			for ( let i = 0, l = lights.length; i < l; i ++ ) {

				const light = lights[ i ];

				if ( light.isDirectionalLight ) {

					const uniforms = state.directional[ directionalLength ];

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( vector3 );
					uniforms.direction.transformDirection( viewMatrix );

					directionalLength ++;

				} else if ( light.isSpotLight ) {

					const uniforms = state.spot[ spotLength ];

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					vector3.setFromMatrixPosition( light.target.matrixWorld );
					uniforms.direction.sub( vector3 );
					uniforms.direction.transformDirection( viewMatrix );

					spotLength ++;

				} else if ( light.isRectAreaLight ) {

					const uniforms = state.rectArea[ rectAreaLength ];

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					// extract local rotation of light to derive width/height half vectors
					matrix42.identity();
					matrix4.copy( light.matrixWorld );
					matrix4.premultiply( viewMatrix );
					matrix42.extractRotation( matrix4 );

					uniforms.halfWidth.set( light.width * 0.5, 0.0, 0.0 );
					uniforms.halfHeight.set( 0.0, light.height * 0.5, 0.0 );

					uniforms.halfWidth.applyMatrix4( matrix42 );
					uniforms.halfHeight.applyMatrix4( matrix42 );

					rectAreaLength ++;

				} else if ( light.isPointLight ) {

					const uniforms = state.point[ pointLength ];

					uniforms.position.setFromMatrixPosition( light.matrixWorld );
					uniforms.position.applyMatrix4( viewMatrix );

					pointLength ++;

				} else if ( light.isHemisphereLight ) {

					const uniforms = state.hemi[ hemiLength ];

					uniforms.direction.setFromMatrixPosition( light.matrixWorld );
					uniforms.direction.transformDirection( viewMatrix );

					hemiLength ++;

				}

			}

		}

		return {
			setup: setup,
			setupView: setupView,
			state: state
		};

	}

	function WebGLRenderState( extensions, capabilities ) {

		const lights = new WebGLLights( extensions, capabilities );

		const lightsArray = [];
		const shadowsArray = [];

		function init() {

			lightsArray.length = 0;
			shadowsArray.length = 0;

		}

		function pushLight( light ) {

			lightsArray.push( light );

		}

		function pushShadow( shadowLight ) {

			shadowsArray.push( shadowLight );

		}

		function setupLights( useLegacyLights ) {

			lights.setup( lightsArray, useLegacyLights );

		}

		function setupLightsView( camera ) {

			lights.setupView( lightsArray, camera );

		}

		const state = {
			lightsArray: lightsArray,
			shadowsArray: shadowsArray,

			lights: lights
		};

		return {
			init: init,
			state: state,
			setupLights: setupLights,
			setupLightsView: setupLightsView,

			pushLight: pushLight,
			pushShadow: pushShadow
		};

	}

	function WebGLRenderStates( extensions, capabilities ) {

		let renderStates = new WeakMap();

		function get( scene, renderCallDepth = 0 ) {

			const renderStateArray = renderStates.get( scene );
			let renderState;

			if ( renderStateArray === undefined ) {

				renderState = new WebGLRenderState( extensions, capabilities );
				renderStates.set( scene, [ renderState ] );

			} else {

				if ( renderCallDepth >= renderStateArray.length ) {

					renderState = new WebGLRenderState( extensions, capabilities );
					renderStateArray.push( renderState );

				} else {

					renderState = renderStateArray[ renderCallDepth ];

				}

			}

			return renderState;

		}

		function dispose() {

			renderStates = new WeakMap();

		}

		return {
			get: get,
			dispose: dispose
		};

	}

	class MeshDepthMaterial extends Material {

		constructor( parameters ) {

			super();

			this.isMeshDepthMaterial = true;

			this.type = 'MeshDepthMaterial';

			this.depthPacking = BasicDepthPacking;

			this.map = null;

			this.alphaMap = null;

			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;

			this.wireframe = false;
			this.wireframeLinewidth = 1;

			this.setValues( parameters );

		}

		copy( source ) {

			super.copy( source );

			this.depthPacking = source.depthPacking;

			this.map = source.map;

			this.alphaMap = source.alphaMap;

			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;

			this.wireframe = source.wireframe;
			this.wireframeLinewidth = source.wireframeLinewidth;

			return this;

		}

	}

	class MeshDistanceMaterial extends Material {

		constructor( parameters ) {

			super();

			this.isMeshDistanceMaterial = true;

			this.type = 'MeshDistanceMaterial';

			this.map = null;

			this.alphaMap = null;

			this.displacementMap = null;
			this.displacementScale = 1;
			this.displacementBias = 0;

			this.setValues( parameters );

		}

		copy( source ) {

			super.copy( source );

			this.map = source.map;

			this.alphaMap = source.alphaMap;

			this.displacementMap = source.displacementMap;
			this.displacementScale = source.displacementScale;
			this.displacementBias = source.displacementBias;

			return this;

		}

	}

	const vertex = "void main() {\n\tgl_Position = vec4( position, 1.0 );\n}";

	const fragment = "uniform sampler2D shadow_pass;\nuniform vec2 resolution;\nuniform float radius;\n#include <packing>\nvoid main() {\n\tconst float samples = float( VSM_SAMPLES );\n\tfloat mean = 0.0;\n\tfloat squared_mean = 0.0;\n\tfloat uvStride = samples <= 1.0 ? 0.0 : 2.0 / ( samples - 1.0 );\n\tfloat uvStart = samples <= 1.0 ? 0.0 : - 1.0;\n\tfor ( float i = 0.0; i < samples; i ++ ) {\n\t\tfloat uvOffset = uvStart + i * uvStride;\n\t\t#ifdef HORIZONTAL_PASS\n\t\t\tvec2 distribution = unpackRGBATo2Half( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( uvOffset, 0.0 ) * radius ) / resolution ) );\n\t\t\tmean += distribution.x;\n\t\t\tsquared_mean += distribution.y * distribution.y + distribution.x * distribution.x;\n\t\t#else\n\t\t\tfloat depth = unpackRGBAToDepth( texture2D( shadow_pass, ( gl_FragCoord.xy + vec2( 0.0, uvOffset ) * radius ) / resolution ) );\n\t\t\tmean += depth;\n\t\t\tsquared_mean += depth * depth;\n\t\t#endif\n\t}\n\tmean = mean / samples;\n\tsquared_mean = squared_mean / samples;\n\tfloat std_dev = sqrt( squared_mean - mean * mean );\n\tgl_FragColor = pack2HalfToRGBA( vec2( mean, std_dev ) );\n}";

	function WebGLShadowMap( _renderer, _objects, _capabilities ) {

		let _frustum = new Frustum();

		const _shadowMapSize = new Vector2(),
			_viewportSize = new Vector2(),

			_viewport = new Vector4(),

			_depthMaterial = new MeshDepthMaterial( { depthPacking: RGBADepthPacking } ),
			_distanceMaterial = new MeshDistanceMaterial(),

			_materialCache = {},

			_maxTextureSize = _capabilities.maxTextureSize;

		const shadowSide = { [ FrontSide ]: BackSide, [ BackSide ]: FrontSide, [ DoubleSide ]: DoubleSide };

		const shadowMaterialVertical = new ShaderMaterial( {
			defines: {
				VSM_SAMPLES: 8
			},
			uniforms: {
				shadow_pass: { value: null },
				resolution: { value: new Vector2() },
				radius: { value: 4.0 }
			},

			vertexShader: vertex,
			fragmentShader: fragment

		} );

		const shadowMaterialHorizontal = shadowMaterialVertical.clone();
		shadowMaterialHorizontal.defines.HORIZONTAL_PASS = 1;

		const fullScreenTri = new BufferGeometry();
		fullScreenTri.setAttribute(
			'position',
			new BufferAttribute(
				new Float32Array( [ - 1, - 1, 0.5, 3, - 1, 0.5, - 1, 3, 0.5 ] ),
				3
			)
		);

		const fullScreenMesh = new Mesh( fullScreenTri, shadowMaterialVertical );

		const scope = this;

		this.enabled = false;

		this.autoUpdate = true;
		this.needsUpdate = false;

		this.type = PCFShadowMap;
		let _previousType = this.type;

		this.render = function ( lights, scene, camera ) {

			if ( scope.enabled === false ) return;
			if ( scope.autoUpdate === false && scope.needsUpdate === false ) return;

			if ( lights.length === 0 ) return;

			const currentRenderTarget = _renderer.getRenderTarget();
			const activeCubeFace = _renderer.getActiveCubeFace();
			const activeMipmapLevel = _renderer.getActiveMipmapLevel();

			const _state = _renderer.state;

			// Set GL state for depth map.
			_state.setBlending( NoBlending );
			_state.buffers.color.setClear( 1, 1, 1, 1 );
			_state.buffers.depth.setTest( true );
			_state.setScissorTest( false );

			// check for shadow map type changes

			const toVSM = ( _previousType !== VSMShadowMap && this.type === VSMShadowMap );
			const fromVSM = ( _previousType === VSMShadowMap && this.type !== VSMShadowMap );

			// render depth map

			for ( let i = 0, il = lights.length; i < il; i ++ ) {

				const light = lights[ i ];
				const shadow = light.shadow;

				if ( shadow === undefined ) {

					console.warn( 'THREE.WebGLShadowMap:', light, 'has no shadow.' );
					continue;

				}

				if ( shadow.autoUpdate === false && shadow.needsUpdate === false ) continue;

				_shadowMapSize.copy( shadow.mapSize );

				const shadowFrameExtents = shadow.getFrameExtents();

				_shadowMapSize.multiply( shadowFrameExtents );

				_viewportSize.copy( shadow.mapSize );

				if ( _shadowMapSize.x > _maxTextureSize || _shadowMapSize.y > _maxTextureSize ) {

					if ( _shadowMapSize.x > _maxTextureSize ) {

						_viewportSize.x = Math.floor( _maxTextureSize / shadowFrameExtents.x );
						_shadowMapSize.x = _viewportSize.x * shadowFrameExtents.x;
						shadow.mapSize.x = _viewportSize.x;

					}

					if ( _shadowMapSize.y > _maxTextureSize ) {

						_viewportSize.y = Math.floor( _maxTextureSize / shadowFrameExtents.y );
						_shadowMapSize.y = _viewportSize.y * shadowFrameExtents.y;
						shadow.mapSize.y = _viewportSize.y;

					}

				}

				if ( shadow.map === null || toVSM === true || fromVSM === true ) {

					const pars = ( this.type !== VSMShadowMap ) ? { minFilter: NearestFilter, magFilter: NearestFilter } : {};

					if ( shadow.map !== null ) {

						shadow.map.dispose();

					}

					shadow.map = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y, pars );
					shadow.map.texture.name = light.name + '.shadowMap';

					shadow.camera.updateProjectionMatrix();

				}

				_renderer.setRenderTarget( shadow.map );
				_renderer.clear();

				const viewportCount = shadow.getViewportCount();

				for ( let vp = 0; vp < viewportCount; vp ++ ) {

					const viewport = shadow.getViewport( vp );

					_viewport.set(
						_viewportSize.x * viewport.x,
						_viewportSize.y * viewport.y,
						_viewportSize.x * viewport.z,
						_viewportSize.y * viewport.w
					);

					_state.viewport( _viewport );

					shadow.updateMatrices( light, vp );

					_frustum = shadow.getFrustum();

					renderObject( scene, camera, shadow.camera, light, this.type );

				}

				// do blur pass for VSM

				if ( shadow.isPointLightShadow !== true && this.type === VSMShadowMap ) {

					VSMPass( shadow, camera );

				}

				shadow.needsUpdate = false;

			}

			_previousType = this.type;

			scope.needsUpdate = false;

			_renderer.setRenderTarget( currentRenderTarget, activeCubeFace, activeMipmapLevel );

		};

		function VSMPass( shadow, camera ) {

			const geometry = _objects.update( fullScreenMesh );

			if ( shadowMaterialVertical.defines.VSM_SAMPLES !== shadow.blurSamples ) {

				shadowMaterialVertical.defines.VSM_SAMPLES = shadow.blurSamples;
				shadowMaterialHorizontal.defines.VSM_SAMPLES = shadow.blurSamples;

				shadowMaterialVertical.needsUpdate = true;
				shadowMaterialHorizontal.needsUpdate = true;

			}

			if ( shadow.mapPass === null ) {

				shadow.mapPass = new WebGLRenderTarget( _shadowMapSize.x, _shadowMapSize.y );

			}

			// vertical pass

			shadowMaterialVertical.uniforms.shadow_pass.value = shadow.map.texture;
			shadowMaterialVertical.uniforms.resolution.value = shadow.mapSize;
			shadowMaterialVertical.uniforms.radius.value = shadow.radius;
			_renderer.setRenderTarget( shadow.mapPass );
			_renderer.clear();
			_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialVertical, fullScreenMesh, null );

			// horizontal pass

			shadowMaterialHorizontal.uniforms.shadow_pass.value = shadow.mapPass.texture;
			shadowMaterialHorizontal.uniforms.resolution.value = shadow.mapSize;
			shadowMaterialHorizontal.uniforms.radius.value = shadow.radius;
			_renderer.setRenderTarget( shadow.map );
			_renderer.clear();
			_renderer.renderBufferDirect( camera, null, geometry, shadowMaterialHorizontal, fullScreenMesh, null );

		}

		function getDepthMaterial( object, material, light, type ) {

			let result = null;

			const customMaterial = ( light.isPointLight === true ) ? object.customDistanceMaterial : object.customDepthMaterial;

			if ( customMaterial !== undefined ) {

				result = customMaterial;

			} else {

				result = ( light.isPointLight === true ) ? _distanceMaterial : _depthMaterial;

				if ( ( _renderer.localClippingEnabled && material.clipShadows === true && Array.isArray( material.clippingPlanes ) && material.clippingPlanes.length !== 0 ) ||
					( material.displacementMap && material.displacementScale !== 0 ) ||
					( material.alphaMap && material.alphaTest > 0 ) ||
					( material.map && material.alphaTest > 0 ) ) {

					// in this case we need a unique material instance reflecting the
					// appropriate state

					const keyA = result.uuid, keyB = material.uuid;

					let materialsForVariant = _materialCache[ keyA ];

					if ( materialsForVariant === undefined ) {

						materialsForVariant = {};
						_materialCache[ keyA ] = materialsForVariant;

					}

					let cachedMaterial = materialsForVariant[ keyB ];

					if ( cachedMaterial === undefined ) {

						cachedMaterial = result.clone();
						materialsForVariant[ keyB ] = cachedMaterial;

					}

					result = cachedMaterial;

				}

			}

			result.visible = material.visible;
			result.wireframe = material.wireframe;

			if ( type === VSMShadowMap ) {

				result.side = ( material.shadowSide !== null ) ? material.shadowSide : material.side;

			} else {

				result.side = ( material.shadowSide !== null ) ? material.shadowSide : shadowSide[ material.side ];

			}

			result.alphaMap = material.alphaMap;
			result.alphaTest = material.alphaTest;
			result.map = material.map;

			result.clipShadows = material.clipShadows;
			result.clippingPlanes = material.clippingPlanes;
			result.clipIntersection = material.clipIntersection;

			result.displacementMap = material.displacementMap;
			result.displacementScale = material.displacementScale;
			result.displacementBias = material.displacementBias;

			result.wireframeLinewidth = material.wireframeLinewidth;
			result.linewidth = material.linewidth;

			if ( light.isPointLight === true && result.isMeshDistanceMaterial === true ) {

				const materialProperties = _renderer.properties.get( result );
				materialProperties.light = light;

			}

			return result;

		}

		function renderObject( object, camera, shadowCamera, light, type ) {

			if ( object.visible === false ) return;

			const visible = object.layers.test( camera.layers );

			if ( visible && ( object.isMesh || object.isLine || object.isPoints ) ) {

				if ( ( object.castShadow || ( object.receiveShadow && type === VSMShadowMap ) ) && ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) ) {

					object.modelViewMatrix.multiplyMatrices( shadowCamera.matrixWorldInverse, object.matrixWorld );

					const geometry = _objects.update( object );
					const material = object.material;

					if ( Array.isArray( material ) ) {

						const groups = geometry.groups;

						for ( let k = 0, kl = groups.length; k < kl; k ++ ) {

							const group = groups[ k ];
							const groupMaterial = material[ group.materialIndex ];

							if ( groupMaterial && groupMaterial.visible ) {

								const depthMaterial = getDepthMaterial( object, groupMaterial, light, type );

								_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, group );

							}

						}

					} else if ( material.visible ) {

						const depthMaterial = getDepthMaterial( object, material, light, type );

						_renderer.renderBufferDirect( shadowCamera, null, geometry, depthMaterial, object, null );

					}

				}

			}

			const children = object.children;

			for ( let i = 0, l = children.length; i < l; i ++ ) {

				renderObject( children[ i ], camera, shadowCamera, light, type );

			}

		}

	}

	function WebGLState( gl, extensions, capabilities ) {

		const isWebGL2 = capabilities.isWebGL2;

		function ColorBuffer() {

			let locked = false;

			const color = new Vector4();
			let currentColorMask = null;
			const currentColorClear = new Vector4( 0, 0, 0, 0 );

			return {

				setMask: function ( colorMask ) {

					if ( currentColorMask !== colorMask && ! locked ) {

						gl.colorMask( colorMask, colorMask, colorMask, colorMask );
						currentColorMask = colorMask;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( r, g, b, a, premultipliedAlpha ) {

					if ( premultipliedAlpha === true ) {

						r *= a; g *= a; b *= a;

					}

					color.set( r, g, b, a );

					if ( currentColorClear.equals( color ) === false ) {

						gl.clearColor( r, g, b, a );
						currentColorClear.copy( color );

					}

				},

				reset: function () {

					locked = false;

					currentColorMask = null;
					currentColorClear.set( - 1, 0, 0, 0 ); // set to invalid state

				}

			};

		}

		function DepthBuffer() {

			let locked = false;

			let currentDepthMask = null;
			let currentDepthFunc = null;
			let currentDepthClear = null;

			return {

				setTest: function ( depthTest ) {

					if ( depthTest ) {

						enable( gl.DEPTH_TEST );

					} else {

						disable( gl.DEPTH_TEST );

					}

				},

				setMask: function ( depthMask ) {

					if ( currentDepthMask !== depthMask && ! locked ) {

						gl.depthMask( depthMask );
						currentDepthMask = depthMask;

					}

				},

				setFunc: function ( depthFunc ) {

					if ( currentDepthFunc !== depthFunc ) {

						switch ( depthFunc ) {

							case NeverDepth:

								gl.depthFunc( gl.NEVER );
								break;

							case AlwaysDepth:

								gl.depthFunc( gl.ALWAYS );
								break;

							case LessDepth:

								gl.depthFunc( gl.LESS );
								break;

							case LessEqualDepth:

								gl.depthFunc( gl.LEQUAL );
								break;

							case EqualDepth:

								gl.depthFunc( gl.EQUAL );
								break;

							case GreaterEqualDepth:

								gl.depthFunc( gl.GEQUAL );
								break;

							case GreaterDepth:

								gl.depthFunc( gl.GREATER );
								break;

							case NotEqualDepth:

								gl.depthFunc( gl.NOTEQUAL );
								break;

							default:

								gl.depthFunc( gl.LEQUAL );

						}

						currentDepthFunc = depthFunc;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( depth ) {

					if ( currentDepthClear !== depth ) {

						gl.clearDepth( depth );
						currentDepthClear = depth;

					}

				},

				reset: function () {

					locked = false;

					currentDepthMask = null;
					currentDepthFunc = null;
					currentDepthClear = null;

				}

			};

		}

		function StencilBuffer() {

			let locked = false;

			let currentStencilMask = null;
			let currentStencilFunc = null;
			let currentStencilRef = null;
			let currentStencilFuncMask = null;
			let currentStencilFail = null;
			let currentStencilZFail = null;
			let currentStencilZPass = null;
			let currentStencilClear = null;

			return {

				setTest: function ( stencilTest ) {

					if ( ! locked ) {

						if ( stencilTest ) {

							enable( gl.STENCIL_TEST );

						} else {

							disable( gl.STENCIL_TEST );

						}

					}

				},

				setMask: function ( stencilMask ) {

					if ( currentStencilMask !== stencilMask && ! locked ) {

						gl.stencilMask( stencilMask );
						currentStencilMask = stencilMask;

					}

				},

				setFunc: function ( stencilFunc, stencilRef, stencilMask ) {

					if ( currentStencilFunc !== stencilFunc ||
					     currentStencilRef !== stencilRef ||
					     currentStencilFuncMask !== stencilMask ) {

						gl.stencilFunc( stencilFunc, stencilRef, stencilMask );

						currentStencilFunc = stencilFunc;
						currentStencilRef = stencilRef;
						currentStencilFuncMask = stencilMask;

					}

				},

				setOp: function ( stencilFail, stencilZFail, stencilZPass ) {

					if ( currentStencilFail !== stencilFail ||
					     currentStencilZFail !== stencilZFail ||
					     currentStencilZPass !== stencilZPass ) {

						gl.stencilOp( stencilFail, stencilZFail, stencilZPass );

						currentStencilFail = stencilFail;
						currentStencilZFail = stencilZFail;
						currentStencilZPass = stencilZPass;

					}

				},

				setLocked: function ( lock ) {

					locked = lock;

				},

				setClear: function ( stencil ) {

					if ( currentStencilClear !== stencil ) {

						gl.clearStencil( stencil );
						currentStencilClear = stencil;

					}

				},

				reset: function () {

					locked = false;

					currentStencilMask = null;
					currentStencilFunc = null;
					currentStencilRef = null;
					currentStencilFuncMask = null;
					currentStencilFail = null;
					currentStencilZFail = null;
					currentStencilZPass = null;
					currentStencilClear = null;

				}

			};

		}

		//

		const colorBuffer = new ColorBuffer();
		const depthBuffer = new DepthBuffer();
		const stencilBuffer = new StencilBuffer();

		const uboBindings = new WeakMap();
		const uboProgramMap = new WeakMap();

		let enabledCapabilities = {};

		let currentBoundFramebuffers = {};
		let currentDrawbuffers = new WeakMap();
		let defaultDrawbuffers = [];

		let currentProgram = null;

		let currentBlendingEnabled = false;
		let currentBlending = null;
		let currentBlendEquation = null;
		let currentBlendSrc = null;
		let currentBlendDst = null;
		let currentBlendEquationAlpha = null;
		let currentBlendSrcAlpha = null;
		let currentBlendDstAlpha = null;
		let currentPremultipledAlpha = false;

		let currentFlipSided = null;
		let currentCullFace = null;

		let currentLineWidth = null;

		let currentPolygonOffsetFactor = null;
		let currentPolygonOffsetUnits = null;

		const maxTextures = gl.getParameter( gl.MAX_COMBINED_TEXTURE_IMAGE_UNITS );

		let lineWidthAvailable = false;
		let version = 0;
		const glVersion = gl.getParameter( gl.VERSION );

		if ( glVersion.indexOf( 'WebGL' ) !== - 1 ) {

			version = parseFloat( /^WebGL (\d)/.exec( glVersion )[ 1 ] );
			lineWidthAvailable = ( version >= 1.0 );

		} else if ( glVersion.indexOf( 'OpenGL ES' ) !== - 1 ) {

			version = parseFloat( /^OpenGL ES (\d)/.exec( glVersion )[ 1 ] );
			lineWidthAvailable = ( version >= 2.0 );

		}

		let currentTextureSlot = null;
		let currentBoundTextures = {};

		const scissorParam = gl.getParameter( gl.SCISSOR_BOX );
		const viewportParam = gl.getParameter( gl.VIEWPORT );

		const currentScissor = new Vector4().fromArray( scissorParam );
		const currentViewport = new Vector4().fromArray( viewportParam );

		function createTexture( type, target, count, dimensions ) {

			const data = new Uint8Array( 4 ); // 4 is required to match default unpack alignment of 4.
			const texture = gl.createTexture();

			gl.bindTexture( type, texture );
			gl.texParameteri( type, gl.TEXTURE_MIN_FILTER, gl.NEAREST );
			gl.texParameteri( type, gl.TEXTURE_MAG_FILTER, gl.NEAREST );

			for ( let i = 0; i < count; i ++ ) {

				if ( isWebGL2 && ( type === gl.TEXTURE_3D || type === gl.TEXTURE_2D_ARRAY ) ) {

					gl.texImage3D( target, 0, gl.RGBA, 1, 1, dimensions, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );

				} else {

					gl.texImage2D( target + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, data );

				}

			}

			return texture;

		}

		const emptyTextures = {};
		emptyTextures[ gl.TEXTURE_2D ] = createTexture( gl.TEXTURE_2D, gl.TEXTURE_2D, 1 );
		emptyTextures[ gl.TEXTURE_CUBE_MAP ] = createTexture( gl.TEXTURE_CUBE_MAP, gl.TEXTURE_CUBE_MAP_POSITIVE_X, 6 );

		if ( isWebGL2 ) {

			emptyTextures[ gl.TEXTURE_2D_ARRAY ] = createTexture( gl.TEXTURE_2D_ARRAY, gl.TEXTURE_2D_ARRAY, 1, 1 );
			emptyTextures[ gl.TEXTURE_3D ] = createTexture( gl.TEXTURE_3D, gl.TEXTURE_3D, 1, 1 );

		}

		// init

		colorBuffer.setClear( 0, 0, 0, 1 );
		depthBuffer.setClear( 1 );
		stencilBuffer.setClear( 0 );

		enable( gl.DEPTH_TEST );
		depthBuffer.setFunc( LessEqualDepth );

		setFlipSided( false );
		setCullFace( CullFaceBack );
		enable( gl.CULL_FACE );

		setBlending( NoBlending );

		//

		function enable( id ) {

			if ( enabledCapabilities[ id ] !== true ) {

				gl.enable( id );
				enabledCapabilities[ id ] = true;

			}

		}

		function disable( id ) {

			if ( enabledCapabilities[ id ] !== false ) {

				gl.disable( id );
				enabledCapabilities[ id ] = false;

			}

		}

		function bindFramebuffer( target, framebuffer ) {

			if ( currentBoundFramebuffers[ target ] !== framebuffer ) {

				gl.bindFramebuffer( target, framebuffer );

				currentBoundFramebuffers[ target ] = framebuffer;

				if ( isWebGL2 ) {

					// gl.DRAW_FRAMEBUFFER is equivalent to gl.FRAMEBUFFER

					if ( target === gl.DRAW_FRAMEBUFFER ) {

						currentBoundFramebuffers[ gl.FRAMEBUFFER ] = framebuffer;

					}

					if ( target === gl.FRAMEBUFFER ) {

						currentBoundFramebuffers[ gl.DRAW_FRAMEBUFFER ] = framebuffer;

					}

				}

				return true;

			}

			return false;

		}

		function drawBuffers( renderTarget, framebuffer ) {

			let drawBuffers = defaultDrawbuffers;

			let needsUpdate = false;

			if ( renderTarget ) {

				drawBuffers = currentDrawbuffers.get( framebuffer );

				if ( drawBuffers === undefined ) {

					drawBuffers = [];
					currentDrawbuffers.set( framebuffer, drawBuffers );

				}

				if ( renderTarget.isWebGLMultipleRenderTargets ) {

					const textures = renderTarget.texture;

					if ( drawBuffers.length !== textures.length || drawBuffers[ 0 ] !== gl.COLOR_ATTACHMENT0 ) {

						for ( let i = 0, il = textures.length; i < il; i ++ ) {

							drawBuffers[ i ] = gl.COLOR_ATTACHMENT0 + i;

						}

						drawBuffers.length = textures.length;

						needsUpdate = true;

					}

				} else {

					if ( drawBuffers[ 0 ] !== gl.COLOR_ATTACHMENT0 ) {

						drawBuffers[ 0 ] = gl.COLOR_ATTACHMENT0;

						needsUpdate = true;

					}

				}

			} else {

				if ( drawBuffers[ 0 ] !== gl.BACK ) {

					drawBuffers[ 0 ] = gl.BACK;

					needsUpdate = true;

				}

			}

			if ( needsUpdate ) {

				if ( capabilities.isWebGL2 ) {

					gl.drawBuffers( drawBuffers );

				} else {

					extensions.get( 'WEBGL_draw_buffers' ).drawBuffersWEBGL( drawBuffers );

				}

			}


		}

		function useProgram( program ) {

			if ( currentProgram !== program ) {

				gl.useProgram( program );

				currentProgram = program;

				return true;

			}

			return false;

		}

		const equationToGL = {
			[ AddEquation ]: gl.FUNC_ADD,
			[ SubtractEquation ]: gl.FUNC_SUBTRACT,
			[ ReverseSubtractEquation ]: gl.FUNC_REVERSE_SUBTRACT
		};

		if ( isWebGL2 ) {

			equationToGL[ MinEquation ] = gl.MIN;
			equationToGL[ MaxEquation ] = gl.MAX;

		} else {

			const extension = extensions.get( 'EXT_blend_minmax' );

			if ( extension !== null ) {

				equationToGL[ MinEquation ] = extension.MIN_EXT;
				equationToGL[ MaxEquation ] = extension.MAX_EXT;

			}

		}

		const factorToGL = {
			[ ZeroFactor ]: gl.ZERO,
			[ OneFactor ]: gl.ONE,
			[ SrcColorFactor ]: gl.SRC_COLOR,
			[ SrcAlphaFactor ]: gl.SRC_ALPHA,
			[ SrcAlphaSaturateFactor ]: gl.SRC_ALPHA_SATURATE,
			[ DstColorFactor ]: gl.DST_COLOR,
			[ DstAlphaFactor ]: gl.DST_ALPHA,
			[ OneMinusSrcColorFactor ]: gl.ONE_MINUS_SRC_COLOR,
			[ OneMinusSrcAlphaFactor ]: gl.ONE_MINUS_SRC_ALPHA,
			[ OneMinusDstColorFactor ]: gl.ONE_MINUS_DST_COLOR,
			[ OneMinusDstAlphaFactor ]: gl.ONE_MINUS_DST_ALPHA
		};

		function setBlending( blending, blendEquation, blendSrc, blendDst, blendEquationAlpha, blendSrcAlpha, blendDstAlpha, premultipliedAlpha ) {

			if ( blending === NoBlending ) {

				if ( currentBlendingEnabled === true ) {

					disable( gl.BLEND );
					currentBlendingEnabled = false;

				}

				return;

			}

			if ( currentBlendingEnabled === false ) {

				enable( gl.BLEND );
				currentBlendingEnabled = true;

			}

			if ( blending !== CustomBlending ) {

				if ( blending !== currentBlending || premultipliedAlpha !== currentPremultipledAlpha ) {

					if ( currentBlendEquation !== AddEquation || currentBlendEquationAlpha !== AddEquation ) {

						gl.blendEquation( gl.FUNC_ADD );

						currentBlendEquation = AddEquation;
						currentBlendEquationAlpha = AddEquation;

					}

					if ( premultipliedAlpha ) {

						switch ( blending ) {

							case NormalBlending:
								gl.blendFuncSeparate( gl.ONE, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );
								break;

							case AdditiveBlending:
								gl.blendFunc( gl.ONE, gl.ONE );
								break;

							case SubtractiveBlending:
								gl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );
								break;

							case MultiplyBlending:
								gl.blendFuncSeparate( gl.ZERO, gl.SRC_COLOR, gl.ZERO, gl.SRC_ALPHA );
								break;

							default:
								console.error( 'THREE.WebGLState: Invalid blending: ', blending );
								break;

						}

					} else {

						switch ( blending ) {

							case NormalBlending:
								gl.blendFuncSeparate( gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA );
								break;

							case AdditiveBlending:
								gl.blendFunc( gl.SRC_ALPHA, gl.ONE );
								break;

							case SubtractiveBlending:
								gl.blendFuncSeparate( gl.ZERO, gl.ONE_MINUS_SRC_COLOR, gl.ZERO, gl.ONE );
								break;

							case MultiplyBlending:
								gl.blendFunc( gl.ZERO, gl.SRC_COLOR );
								break;

							default:
								console.error( 'THREE.WebGLState: Invalid blending: ', blending );
								break;

						}

					}

					currentBlendSrc = null;
					currentBlendDst = null;
					currentBlendSrcAlpha = null;
					currentBlendDstAlpha = null;

					currentBlending = blending;
					currentPremultipledAlpha = premultipliedAlpha;

				}

				return;

			}

			// custom blending

			blendEquationAlpha = blendEquationAlpha || blendEquation;
			blendSrcAlpha = blendSrcAlpha || blendSrc;
			blendDstAlpha = blendDstAlpha || blendDst;

			if ( blendEquation !== currentBlendEquation || blendEquationAlpha !== currentBlendEquationAlpha ) {

				gl.blendEquationSeparate( equationToGL[ blendEquation ], equationToGL[ blendEquationAlpha ] );

				currentBlendEquation = blendEquation;
				currentBlendEquationAlpha = blendEquationAlpha;

			}

			if ( blendSrc !== currentBlendSrc || blendDst !== currentBlendDst || blendSrcAlpha !== currentBlendSrcAlpha || blendDstAlpha !== currentBlendDstAlpha ) {

				gl.blendFuncSeparate( factorToGL[ blendSrc ], factorToGL[ blendDst ], factorToGL[ blendSrcAlpha ], factorToGL[ blendDstAlpha ] );

				currentBlendSrc = blendSrc;
				currentBlendDst = blendDst;
				currentBlendSrcAlpha = blendSrcAlpha;
				currentBlendDstAlpha = blendDstAlpha;

			}

			currentBlending = blending;
			currentPremultipledAlpha = false;

		}

		function setMaterial( material, frontFaceCW ) {

			material.side === DoubleSide
				? disable( gl.CULL_FACE )
				: enable( gl.CULL_FACE );

			let flipSided = ( material.side === BackSide );
			if ( frontFaceCW ) flipSided = ! flipSided;

			setFlipSided( flipSided );

			( material.blending === NormalBlending && material.transparent === false )
				? setBlending( NoBlending )
				: setBlending( material.blending, material.blendEquation, material.blendSrc, material.blendDst, material.blendEquationAlpha, material.blendSrcAlpha, material.blendDstAlpha, material.premultipliedAlpha );

			depthBuffer.setFunc( material.depthFunc );
			depthBuffer.setTest( material.depthTest );
			depthBuffer.setMask( material.depthWrite );
			colorBuffer.setMask( material.colorWrite );

			const stencilWrite = material.stencilWrite;
			stencilBuffer.setTest( stencilWrite );
			if ( stencilWrite ) {

				stencilBuffer.setMask( material.stencilWriteMask );
				stencilBuffer.setFunc( material.stencilFunc, material.stencilRef, material.stencilFuncMask );
				stencilBuffer.setOp( material.stencilFail, material.stencilZFail, material.stencilZPass );

			}

			setPolygonOffset( material.polygonOffset, material.polygonOffsetFactor, material.polygonOffsetUnits );

			material.alphaToCoverage === true
				? enable( gl.SAMPLE_ALPHA_TO_COVERAGE )
				: disable( gl.SAMPLE_ALPHA_TO_COVERAGE );

		}

		//

		function setFlipSided( flipSided ) {

			if ( currentFlipSided !== flipSided ) {

				if ( flipSided ) {

					gl.frontFace( gl.CW );

				} else {

					gl.frontFace( gl.CCW );

				}

				currentFlipSided = flipSided;

			}

		}

		function setCullFace( cullFace ) {

			if ( cullFace !== CullFaceNone ) {

				enable( gl.CULL_FACE );

				if ( cullFace !== currentCullFace ) {

					if ( cullFace === CullFaceBack ) {

						gl.cullFace( gl.BACK );

					} else if ( cullFace === CullFaceFront ) {

						gl.cullFace( gl.FRONT );

					} else {

						gl.cullFace( gl.FRONT_AND_BACK );

					}

				}

			} else {

				disable( gl.CULL_FACE );

			}

			currentCullFace = cullFace;

		}

		function setLineWidth( width ) {

			if ( width !== currentLineWidth ) {

				if ( lineWidthAvailable ) gl.lineWidth( width );

				currentLineWidth = width;

			}

		}

		function setPolygonOffset( polygonOffset, factor, units ) {

			if ( polygonOffset ) {

				enable( gl.POLYGON_OFFSET_FILL );

				if ( currentPolygonOffsetFactor !== factor || currentPolygonOffsetUnits !== units ) {

					gl.polygonOffset( factor, units );

					currentPolygonOffsetFactor = factor;
					currentPolygonOffsetUnits = units;

				}

			} else {

				disable( gl.POLYGON_OFFSET_FILL );

			}

		}

		function setScissorTest( scissorTest ) {

			if ( scissorTest ) {

				enable( gl.SCISSOR_TEST );

			} else {

				disable( gl.SCISSOR_TEST );

			}

		}

		// texture

		function activeTexture( webglSlot ) {

			if ( webglSlot === undefined ) webglSlot = gl.TEXTURE0 + maxTextures - 1;

			if ( currentTextureSlot !== webglSlot ) {

				gl.activeTexture( webglSlot );
				currentTextureSlot = webglSlot;

			}

		}

		function bindTexture( webglType, webglTexture, webglSlot ) {

			if ( webglSlot === undefined ) {

				if ( currentTextureSlot === null ) {

					webglSlot = gl.TEXTURE0 + maxTextures - 1;

				} else {

					webglSlot = currentTextureSlot;

				}

			}

			let boundTexture = currentBoundTextures[ webglSlot ];

			if ( boundTexture === undefined ) {

				boundTexture = { type: undefined, texture: undefined };
				currentBoundTextures[ webglSlot ] = boundTexture;

			}

			if ( boundTexture.type !== webglType || boundTexture.texture !== webglTexture ) {

				if ( currentTextureSlot !== webglSlot ) {

					gl.activeTexture( webglSlot );
					currentTextureSlot = webglSlot;

				}

				gl.bindTexture( webglType, webglTexture || emptyTextures[ webglType ] );

				boundTexture.type = webglType;
				boundTexture.texture = webglTexture;

			}

		}

		function unbindTexture() {

			const boundTexture = currentBoundTextures[ currentTextureSlot ];

			if ( boundTexture !== undefined && boundTexture.type !== undefined ) {

				gl.bindTexture( boundTexture.type, null );

				boundTexture.type = undefined;
				boundTexture.texture = undefined;

			}

		}

		function compressedTexImage2D() {

			try {

				gl.compressedTexImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		function compressedTexImage3D() {

			try {

				gl.compressedTexImage3D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		function texSubImage2D() {

			try {

				gl.texSubImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		function texSubImage3D() {

			try {

				gl.texSubImage3D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		function compressedTexSubImage2D() {

			try {

				gl.compressedTexSubImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		function compressedTexSubImage3D() {

			try {

				gl.compressedTexSubImage3D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		function texStorage2D() {

			try {

				gl.texStorage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		function texStorage3D() {

			try {

				gl.texStorage3D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		function texImage2D() {

			try {

				gl.texImage2D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		function texImage3D() {

			try {

				gl.texImage3D.apply( gl, arguments );

			} catch ( error ) {

				console.error( 'THREE.WebGLState:', error );

			}

		}

		//

		function scissor( scissor ) {

			if ( currentScissor.equals( scissor ) === false ) {

				gl.scissor( scissor.x, scissor.y, scissor.z, scissor.w );
				currentScissor.copy( scissor );

			}

		}

		function viewport( viewport ) {

			if ( currentViewport.equals( viewport ) === false ) {

				gl.viewport( viewport.x, viewport.y, viewport.z, viewport.w );
				currentViewport.copy( viewport );

			}

		}

		function updateUBOMapping( uniformsGroup, program ) {

			let mapping = uboProgramMap.get( program );

			if ( mapping === undefined ) {

				mapping = new WeakMap();

				uboProgramMap.set( program, mapping );

			}

			let blockIndex = mapping.get( uniformsGroup );

			if ( blockIndex === undefined ) {

				blockIndex = gl.getUniformBlockIndex( program, uniformsGroup.name );

				mapping.set( uniformsGroup, blockIndex );

			}

		}

		function uniformBlockBinding( uniformsGroup, program ) {

			const mapping = uboProgramMap.get( program );
			const blockIndex = mapping.get( uniformsGroup );

			if ( uboBindings.get( program ) !== blockIndex ) {

				// bind shader specific block index to global block point
				gl.uniformBlockBinding( program, blockIndex, uniformsGroup.__bindingPointIndex );

				uboBindings.set( program, blockIndex );

			}

		}

		//

		function reset() {

			// reset state

			gl.disable( gl.BLEND );
			gl.disable( gl.CULL_FACE );
			gl.disable( gl.DEPTH_TEST );
			gl.disable( gl.POLYGON_OFFSET_FILL );
			gl.disable( gl.SCISSOR_TEST );
			gl.disable( gl.STENCIL_TEST );
			gl.disable( gl.SAMPLE_ALPHA_TO_COVERAGE );

			gl.blendEquation( gl.FUNC_ADD );
			gl.blendFunc( gl.ONE, gl.ZERO );
			gl.blendFuncSeparate( gl.ONE, gl.ZERO, gl.ONE, gl.ZERO );

			gl.colorMask( true, true, true, true );
			gl.clearColor( 0, 0, 0, 0 );

			gl.depthMask( true );
			gl.depthFunc( gl.LESS );
			gl.clearDepth( 1 );

			gl.stencilMask( 0xffffffff );
			gl.stencilFunc( gl.ALWAYS, 0, 0xffffffff );
			gl.stencilOp( gl.KEEP, gl.KEEP, gl.KEEP );
			gl.clearStencil( 0 );

			gl.cullFace( gl.BACK );
			gl.frontFace( gl.CCW );

			gl.polygonOffset( 0, 0 );

			gl.activeTexture( gl.TEXTURE0 );

			gl.bindFramebuffer( gl.FRAMEBUFFER, null );

			if ( isWebGL2 === true ) {

				gl.bindFramebuffer( gl.DRAW_FRAMEBUFFER, null );
				gl.bindFramebuffer( gl.READ_FRAMEBUFFER, null );

			}

			gl.useProgram( null );

			gl.lineWidth( 1 );

			gl.scissor( 0, 0, gl.canvas.width, gl.canvas.height );
			gl.viewport( 0, 0, gl.canvas.width, gl.canvas.height );

			// reset internals

			enabledCapabilities = {};

			currentTextureSlot = null;
			currentBoundTextures = {};

			currentBoundFramebuffers = {};
			currentDrawbuffers = new WeakMap();
			defaultDrawbuffers = [];

			currentProgram = null;

			currentBlendingEnabled = false;
			currentBlending = null;
			currentBlendEquation = null;
			currentBlendSrc = null;
			currentBlendDst = null;
			currentBlendEquationAlpha = null;
			currentBlendSrcAlpha = null;
			currentBlendDstAlpha = null;
			currentPremultipledAlpha = false;

			currentFlipSided = null;
			currentCullFace = null;

			currentLineWidth = null;

			currentPolygonOffsetFactor = null;
			currentPolygonOffsetUnits = null;

			currentScissor.set( 0, 0, gl.canvas.width, gl.canvas.height );
			currentViewport.set( 0, 0, gl.canvas.width, gl.canvas.height );

			colorBuffer.reset();
			depthBuffer.reset();
			stencilBuffer.reset();

		}

		return {

			buffers: {
				color: colorBuffer,
				depth: depthBuffer,
				stencil: stencilBuffer
			},

			enable: enable,
			disable: disable,

			bindFramebuffer: bindFramebuffer,
			drawBuffers: drawBuffers,

			useProgram: useProgram,

			setBlending: setBlending,
			setMaterial: setMaterial,

			setFlipSided: setFlipSided,
			setCullFace: setCullFace,

			setLineWidth: setLineWidth,
			setPolygonOffset: setPolygonOffset,

			setScissorTest: setScissorTest,

			activeTexture: activeTexture,
			bindTexture: bindTexture,
			unbindTexture: unbindTexture,
			compressedTexImage2D: compressedTexImage2D,
			compressedTexImage3D: compressedTexImage3D,
			texImage2D: texImage2D,
			texImage3D: texImage3D,

			updateUBOMapping: updateUBOMapping,
			uniformBlockBinding: uniformBlockBinding,

			texStorage2D: texStorage2D,
			texStorage3D: texStorage3D,
			texSubImage2D: texSubImage2D,
			texSubImage3D: texSubImage3D,
			compressedTexSubImage2D: compressedTexSubImage2D,
			compressedTexSubImage3D: compressedTexSubImage3D,

			scissor: scissor,
			viewport: viewport,

			reset: reset

		};

	}

	function WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info ) {

		const isWebGL2 = capabilities.isWebGL2;
		const maxTextures = capabilities.maxTextures;
		const maxCubemapSize = capabilities.maxCubemapSize;
		const maxTextureSize = capabilities.maxTextureSize;
		const maxSamples = capabilities.maxSamples;
		const multisampledRTTExt = extensions.has( 'WEBGL_multisampled_render_to_texture' ) ? extensions.get( 'WEBGL_multisampled_render_to_texture' ) : null;
		const supportsInvalidateFramebuffer = typeof navigator === 'undefined' ? false : /OculusBrowser/g.test( navigator.userAgent );

		const _videoTextures = new WeakMap();
		let _canvas;

		const _sources = new WeakMap(); // maps WebglTexture objects to instances of Source

		// cordova iOS (as of 5.0) still uses UIWebView, which provides OffscreenCanvas,
		// also OffscreenCanvas.getContext("webgl"), but not OffscreenCanvas.getContext("2d")!
		// Some implementations may only implement OffscreenCanvas partially (e.g. lacking 2d).

		let useOffscreenCanvas = false;

		try {

			useOffscreenCanvas = typeof OffscreenCanvas !== 'undefined'
				// eslint-disable-next-line compat/compat
				&& ( new OffscreenCanvas( 1, 1 ).getContext( '2d' ) ) !== null;

		} catch ( err ) {

			// Ignore any errors

		}

		function createCanvas( width, height ) {

			// Use OffscreenCanvas when available. Specially needed in web workers

			return useOffscreenCanvas ?
				// eslint-disable-next-line compat/compat
				new OffscreenCanvas( width, height ) : createElementNS( 'canvas' );

		}

		function resizeImage( image, needsPowerOfTwo, needsNewCanvas, maxSize ) {

			let scale = 1;

			// handle case if texture exceeds max size

			if ( image.width > maxSize || image.height > maxSize ) {

				scale = maxSize / Math.max( image.width, image.height );

			}

			// only perform resize if necessary

			if ( scale < 1 || needsPowerOfTwo === true ) {

				// only perform resize for certain image types

				if ( ( typeof HTMLImageElement !== 'undefined' && image instanceof HTMLImageElement ) ||
					( typeof HTMLCanvasElement !== 'undefined' && image instanceof HTMLCanvasElement ) ||
					( typeof ImageBitmap !== 'undefined' && image instanceof ImageBitmap ) ) {

					const floor = needsPowerOfTwo ? floorPowerOfTwo : Math.floor;

					const width = floor( scale * image.width );
					const height = floor( scale * image.height );

					if ( _canvas === undefined ) _canvas = createCanvas( width, height );

					// cube textures can't reuse the same canvas

					const canvas = needsNewCanvas ? createCanvas( width, height ) : _canvas;

					canvas.width = width;
					canvas.height = height;

					const context = canvas.getContext( '2d' );
					context.drawImage( image, 0, 0, width, height );

					console.warn( 'THREE.WebGLRenderer: Texture has been resized from (' + image.width + 'x' + image.height + ') to (' + width + 'x' + height + ').' );

					return canvas;

				} else {

					if ( 'data' in image ) {

						console.warn( 'THREE.WebGLRenderer: Image in DataTexture is too big (' + image.width + 'x' + image.height + ').' );

					}

					return image;

				}

			}

			return image;

		}

		function isPowerOfTwo$1( image ) {

			return isPowerOfTwo( image.width ) && isPowerOfTwo( image.height );

		}

		function textureNeedsPowerOfTwo( texture ) {

			if ( isWebGL2 ) return false;

			return ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) ||
				( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter );

		}

		function textureNeedsGenerateMipmaps( texture, supportsMips ) {

			return texture.generateMipmaps && supportsMips &&
				texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter;

		}

		function generateMipmap( target ) {

			_gl.generateMipmap( target );

		}

		function getInternalFormat( internalFormatName, glFormat, glType, colorSpace, forceLinearTransfer = false ) {

			if ( isWebGL2 === false ) return glFormat;

			if ( internalFormatName !== null ) {

				if ( _gl[ internalFormatName ] !== undefined ) return _gl[ internalFormatName ];

				console.warn( 'THREE.WebGLRenderer: Attempt to use non-existing WebGL internal format \'' + internalFormatName + '\'' );

			}

			let internalFormat = glFormat;

			if ( glFormat === _gl.RED ) {

				if ( glType === _gl.FLOAT ) internalFormat = _gl.R32F;
				if ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.R16F;
				if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.R8;

			}

			if ( glFormat === _gl.RED_INTEGER ) {

				if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.R8UI;
				if ( glType === _gl.UNSIGNED_SHORT ) internalFormat = _gl.R16UI;
				if ( glType === _gl.UNSIGNED_INT ) internalFormat = _gl.R32UI;
				if ( glType === _gl.BYTE ) internalFormat = _gl.R8I;
				if ( glType === _gl.SHORT ) internalFormat = _gl.R16I;
				if ( glType === _gl.INT ) internalFormat = _gl.R32I;

			}

			if ( glFormat === _gl.RG ) {

				if ( glType === _gl.FLOAT ) internalFormat = _gl.RG32F;
				if ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RG16F;
				if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = _gl.RG8;

			}

			if ( glFormat === _gl.RGBA ) {

				if ( glType === _gl.FLOAT ) internalFormat = _gl.RGBA32F;
				if ( glType === _gl.HALF_FLOAT ) internalFormat = _gl.RGBA16F;
				if ( glType === _gl.UNSIGNED_BYTE ) internalFormat = ( colorSpace === SRGBColorSpace && forceLinearTransfer === false ) ? _gl.SRGB8_ALPHA8 : _gl.RGBA8;
				if ( glType === _gl.UNSIGNED_SHORT_4_4_4_4 ) internalFormat = _gl.RGBA4;
				if ( glType === _gl.UNSIGNED_SHORT_5_5_5_1 ) internalFormat = _gl.RGB5_A1;

			}

			if ( internalFormat === _gl.R16F || internalFormat === _gl.R32F ||
				internalFormat === _gl.RG16F || internalFormat === _gl.RG32F ||
				internalFormat === _gl.RGBA16F || internalFormat === _gl.RGBA32F ) {

				extensions.get( 'EXT_color_buffer_float' );

			}

			return internalFormat;

		}

		function getMipLevels( texture, image, supportsMips ) {

			if ( textureNeedsGenerateMipmaps( texture, supportsMips ) === true || ( texture.isFramebufferTexture && texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) ) {

				return Math.log2( Math.max( image.width, image.height ) ) + 1;

			} else if ( texture.mipmaps !== undefined && texture.mipmaps.length > 0 ) {

				// user-defined mipmaps

				return texture.mipmaps.length;

			} else if ( texture.isCompressedTexture && Array.isArray( texture.image ) ) {

				return image.mipmaps.length;

			} else {

				// texture without mipmaps (only base level)

				return 1;

			}

		}

		// Fallback filters for non-power-of-2 textures

		function filterFallback( f ) {

			if ( f === NearestFilter || f === NearestMipmapNearestFilter || f === NearestMipmapLinearFilter ) {

				return _gl.NEAREST;

			}

			return _gl.LINEAR;

		}

		//

		function onTextureDispose( event ) {

			const texture = event.target;

			texture.removeEventListener( 'dispose', onTextureDispose );

			deallocateTexture( texture );

			if ( texture.isVideoTexture ) {

				_videoTextures.delete( texture );

			}

		}

		function onRenderTargetDispose( event ) {

			const renderTarget = event.target;

			renderTarget.removeEventListener( 'dispose', onRenderTargetDispose );

			deallocateRenderTarget( renderTarget );

		}

		//

		function deallocateTexture( texture ) {

			const textureProperties = properties.get( texture );

			if ( textureProperties.__webglInit === undefined ) return;

			// check if it's necessary to remove the WebGLTexture object

			const source = texture.source;
			const webglTextures = _sources.get( source );

			if ( webglTextures ) {

				const webglTexture = webglTextures[ textureProperties.__cacheKey ];
				webglTexture.usedTimes --;

				// the WebGLTexture object is not used anymore, remove it

				if ( webglTexture.usedTimes === 0 ) {

					deleteTexture( texture );

				}

				// remove the weak map entry if no WebGLTexture uses the source anymore

				if ( Object.keys( webglTextures ).length === 0 ) {

					_sources.delete( source );

				}

			}

			properties.remove( texture );

		}

		function deleteTexture( texture ) {

			const textureProperties = properties.get( texture );
			_gl.deleteTexture( textureProperties.__webglTexture );

			const source = texture.source;
			const webglTextures = _sources.get( source );
			delete webglTextures[ textureProperties.__cacheKey ];

			info.memory.textures --;

		}

		function deallocateRenderTarget( renderTarget ) {

			const texture = renderTarget.texture;

			const renderTargetProperties = properties.get( renderTarget );
			const textureProperties = properties.get( texture );

			if ( textureProperties.__webglTexture !== undefined ) {

				_gl.deleteTexture( textureProperties.__webglTexture );

				info.memory.textures --;

			}

			if ( renderTarget.depthTexture ) {

				renderTarget.depthTexture.dispose();

			}

			if ( renderTarget.isWebGLCubeRenderTarget ) {

				for ( let i = 0; i < 6; i ++ ) {

					if ( Array.isArray( renderTargetProperties.__webglFramebuffer[ i ] ) ) {

						for ( let level = 0; level < renderTargetProperties.__webglFramebuffer[ i ].length; level ++ ) _gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ][ level ] );

					} else {

						_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ i ] );

					}

					if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer[ i ] );

				}

			} else {

				if ( Array.isArray( renderTargetProperties.__webglFramebuffer ) ) {

					for ( let level = 0; level < renderTargetProperties.__webglFramebuffer.length; level ++ ) _gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer[ level ] );

				} else {

					_gl.deleteFramebuffer( renderTargetProperties.__webglFramebuffer );

				}

				if ( renderTargetProperties.__webglDepthbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthbuffer );
				if ( renderTargetProperties.__webglMultisampledFramebuffer ) _gl.deleteFramebuffer( renderTargetProperties.__webglMultisampledFramebuffer );

				if ( renderTargetProperties.__webglColorRenderbuffer ) {

					for ( let i = 0; i < renderTargetProperties.__webglColorRenderbuffer.length; i ++ ) {

						if ( renderTargetProperties.__webglColorRenderbuffer[ i ] ) _gl.deleteRenderbuffer( renderTargetProperties.__webglColorRenderbuffer[ i ] );

					}

				}

				if ( renderTargetProperties.__webglDepthRenderbuffer ) _gl.deleteRenderbuffer( renderTargetProperties.__webglDepthRenderbuffer );

			}

			if ( renderTarget.isWebGLMultipleRenderTargets ) {

				for ( let i = 0, il = texture.length; i < il; i ++ ) {

					const attachmentProperties = properties.get( texture[ i ] );

					if ( attachmentProperties.__webglTexture ) {

						_gl.deleteTexture( attachmentProperties.__webglTexture );

						info.memory.textures --;

					}

					properties.remove( texture[ i ] );

				}

			}

			properties.remove( texture );
			properties.remove( renderTarget );

		}

		//

		let textureUnits = 0;

		function resetTextureUnits() {

			textureUnits = 0;

		}

		function allocateTextureUnit() {

			const textureUnit = textureUnits;

			if ( textureUnit >= maxTextures ) {

				console.warn( 'THREE.WebGLTextures: Trying to use ' + textureUnit + ' texture units while this GPU supports only ' + maxTextures );

			}

			textureUnits += 1;

			return textureUnit;

		}

		function getTextureCacheKey( texture ) {

			const array = [];

			array.push( texture.wrapS );
			array.push( texture.wrapT );
			array.push( texture.wrapR || 0 );
			array.push( texture.magFilter );
			array.push( texture.minFilter );
			array.push( texture.anisotropy );
			array.push( texture.internalFormat );
			array.push( texture.format );
			array.push( texture.type );
			array.push( texture.generateMipmaps );
			array.push( texture.premultiplyAlpha );
			array.push( texture.flipY );
			array.push( texture.unpackAlignment );
			array.push( texture.colorSpace );

			return array.join();

		}

		//

		function setTexture2D( texture, slot ) {

			const textureProperties = properties.get( texture );

			if ( texture.isVideoTexture ) updateVideoTexture( texture );

			if ( texture.isRenderTargetTexture === false && texture.version > 0 && textureProperties.__version !== texture.version ) {

				const image = texture.image;

				if ( image === null ) {

					console.warn( 'THREE.WebGLRenderer: Texture marked for update but no image data found.' );

				} else if ( image.complete === false ) {

					console.warn( 'THREE.WebGLRenderer: Texture marked for update but image is incomplete' );

				} else {

					uploadTexture( textureProperties, texture, slot );
					return;

				}

			}

			state.bindTexture( _gl.TEXTURE_2D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

		}

		function setTexture2DArray( texture, slot ) {

			const textureProperties = properties.get( texture );

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				uploadTexture( textureProperties, texture, slot );
				return;

			}

			state.bindTexture( _gl.TEXTURE_2D_ARRAY, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

		}

		function setTexture3D( texture, slot ) {

			const textureProperties = properties.get( texture );

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				uploadTexture( textureProperties, texture, slot );
				return;

			}

			state.bindTexture( _gl.TEXTURE_3D, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

		}

		function setTextureCube( texture, slot ) {

			const textureProperties = properties.get( texture );

			if ( texture.version > 0 && textureProperties.__version !== texture.version ) {

				uploadCubeTexture( textureProperties, texture, slot );
				return;

			}

			state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

		}

		const wrappingToGL = {
			[ RepeatWrapping ]: _gl.REPEAT,
			[ ClampToEdgeWrapping ]: _gl.CLAMP_TO_EDGE,
			[ MirroredRepeatWrapping ]: _gl.MIRRORED_REPEAT
		};

		const filterToGL = {
			[ NearestFilter ]: _gl.NEAREST,
			[ NearestMipmapNearestFilter ]: _gl.NEAREST_MIPMAP_NEAREST,
			[ NearestMipmapLinearFilter ]: _gl.NEAREST_MIPMAP_LINEAR,

			[ LinearFilter ]: _gl.LINEAR,
			[ LinearMipmapNearestFilter ]: _gl.LINEAR_MIPMAP_NEAREST,
			[ LinearMipmapLinearFilter ]: _gl.LINEAR_MIPMAP_LINEAR
		};

		const compareToGL = {
			[ NeverCompare ]: _gl.NEVER,
			[ AlwaysCompare ]: _gl.ALWAYS,
			[ LessCompare ]: _gl.LESS,
			[ LessEqualCompare ]: _gl.LEQUAL,
			[ EqualCompare ]: _gl.EQUAL,
			[ GreaterEqualCompare ]: _gl.GEQUAL,
			[ GreaterCompare ]: _gl.GREATER,
			[ NotEqualCompare ]: _gl.NOTEQUAL
		};

		function setTextureParameters( textureType, texture, supportsMips ) {

			if ( supportsMips ) {

				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, wrappingToGL[ texture.wrapS ] );
				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, wrappingToGL[ texture.wrapT ] );

				if ( textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY ) {

					_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_R, wrappingToGL[ texture.wrapR ] );

				}

				_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterToGL[ texture.magFilter ] );
				_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterToGL[ texture.minFilter ] );

			} else {

				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_S, _gl.CLAMP_TO_EDGE );
				_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_T, _gl.CLAMP_TO_EDGE );

				if ( textureType === _gl.TEXTURE_3D || textureType === _gl.TEXTURE_2D_ARRAY ) {

					_gl.texParameteri( textureType, _gl.TEXTURE_WRAP_R, _gl.CLAMP_TO_EDGE );

				}

				if ( texture.wrapS !== ClampToEdgeWrapping || texture.wrapT !== ClampToEdgeWrapping ) {

					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.wrapS and Texture.wrapT should be set to THREE.ClampToEdgeWrapping.' );

				}

				_gl.texParameteri( textureType, _gl.TEXTURE_MAG_FILTER, filterFallback( texture.magFilter ) );
				_gl.texParameteri( textureType, _gl.TEXTURE_MIN_FILTER, filterFallback( texture.minFilter ) );

				if ( texture.minFilter !== NearestFilter && texture.minFilter !== LinearFilter ) {

					console.warn( 'THREE.WebGLRenderer: Texture is not power of two. Texture.minFilter should be set to THREE.NearestFilter or THREE.LinearFilter.' );

				}

			}

			if ( texture.compareFunction ) {

				_gl.texParameteri( textureType, _gl.TEXTURE_COMPARE_MODE, _gl.COMPARE_REF_TO_TEXTURE );
				_gl.texParameteri( textureType, _gl.TEXTURE_COMPARE_FUNC, compareToGL[ texture.compareFunction ] );

			}

			if ( extensions.has( 'EXT_texture_filter_anisotropic' ) === true ) {

				const extension = extensions.get( 'EXT_texture_filter_anisotropic' );

				if ( texture.magFilter === NearestFilter ) return;
				if ( texture.minFilter !== NearestMipmapLinearFilter && texture.minFilter !== LinearMipmapLinearFilter ) return;
				if ( texture.type === FloatType && extensions.has( 'OES_texture_float_linear' ) === false ) return; // verify extension for WebGL 1 and WebGL 2
				if ( isWebGL2 === false && ( texture.type === HalfFloatType && extensions.has( 'OES_texture_half_float_linear' ) === false ) ) return; // verify extension for WebGL 1 only

				if ( texture.anisotropy > 1 || properties.get( texture ).__currentAnisotropy ) {

					_gl.texParameterf( textureType, extension.TEXTURE_MAX_ANISOTROPY_EXT, Math.min( texture.anisotropy, capabilities.getMaxAnisotropy() ) );
					properties.get( texture ).__currentAnisotropy = texture.anisotropy;

				}

			}

		}

		function initTexture( textureProperties, texture ) {

			let forceUpload = false;

			if ( textureProperties.__webglInit === undefined ) {

				textureProperties.__webglInit = true;

				texture.addEventListener( 'dispose', onTextureDispose );

			}

			// create Source <-> WebGLTextures mapping if necessary

			const source = texture.source;
			let webglTextures = _sources.get( source );

			if ( webglTextures === undefined ) {

				webglTextures = {};
				_sources.set( source, webglTextures );

			}

			// check if there is already a WebGLTexture object for the given texture parameters

			const textureCacheKey = getTextureCacheKey( texture );

			if ( textureCacheKey !== textureProperties.__cacheKey ) {

				// if not, create a new instance of WebGLTexture

				if ( webglTextures[ textureCacheKey ] === undefined ) {

					// create new entry

					webglTextures[ textureCacheKey ] = {
						texture: _gl.createTexture(),
						usedTimes: 0
					};

					info.memory.textures ++;

					// when a new instance of WebGLTexture was created, a texture upload is required
					// even if the image contents are identical

					forceUpload = true;

				}

				webglTextures[ textureCacheKey ].usedTimes ++;

				// every time the texture cache key changes, it's necessary to check if an instance of
				// WebGLTexture can be deleted in order to avoid a memory leak.

				const webglTexture = webglTextures[ textureProperties.__cacheKey ];

				if ( webglTexture !== undefined ) {

					webglTextures[ textureProperties.__cacheKey ].usedTimes --;

					if ( webglTexture.usedTimes === 0 ) {

						deleteTexture( texture );

					}

				}

				// store references to cache key and WebGLTexture object

				textureProperties.__cacheKey = textureCacheKey;
				textureProperties.__webglTexture = webglTextures[ textureCacheKey ].texture;

			}

			return forceUpload;

		}

		function uploadTexture( textureProperties, texture, slot ) {

			let textureType = _gl.TEXTURE_2D;

			if ( texture.isDataArrayTexture || texture.isCompressedArrayTexture ) textureType = _gl.TEXTURE_2D_ARRAY;
			if ( texture.isData3DTexture ) textureType = _gl.TEXTURE_3D;

			const forceUpload = initTexture( textureProperties, texture );
			const source = texture.source;

			state.bindTexture( textureType, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

			const sourceProperties = properties.get( source );

			if ( source.version !== sourceProperties.__version || forceUpload === true ) {

				state.activeTexture( _gl.TEXTURE0 + slot );

				_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
				_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
				_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );
				_gl.pixelStorei( _gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE );

				const needsPowerOfTwo = textureNeedsPowerOfTwo( texture ) && isPowerOfTwo$1( texture.image ) === false;
				let image = resizeImage( texture.image, needsPowerOfTwo, false, maxTextureSize );
				image = verifyColorSpace( texture, image );

				const supportsMips = isPowerOfTwo$1( image ) || isWebGL2,
					glFormat = utils.convert( texture.format, texture.colorSpace );

				let glType = utils.convert( texture.type ),
					glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace, texture.isVideoTexture );

				setTextureParameters( textureType, texture, supportsMips );

				let mipmap;
				const mipmaps = texture.mipmaps;

				const useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );
				const allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );
				const levels = getMipLevels( texture, image, supportsMips );

				if ( texture.isDepthTexture ) {

					// populate depth texture with dummy data

					glInternalFormat = _gl.DEPTH_COMPONENT;

					if ( isWebGL2 ) {

						if ( texture.type === FloatType ) {

							glInternalFormat = _gl.DEPTH_COMPONENT32F;

						} else if ( texture.type === UnsignedIntType ) {

							glInternalFormat = _gl.DEPTH_COMPONENT24;

						} else if ( texture.type === UnsignedInt248Type ) {

							glInternalFormat = _gl.DEPTH24_STENCIL8;

						} else {

							glInternalFormat = _gl.DEPTH_COMPONENT16; // WebGL2 requires sized internalformat for glTexImage2D

						}

					} else {

						if ( texture.type === FloatType ) {

							console.error( 'WebGLRenderer: Floating point depth texture requires WebGL2.' );

						}

					}

					// validation checks for WebGL 1

					if ( texture.format === DepthFormat && glInternalFormat === _gl.DEPTH_COMPONENT ) {

						// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
						// DEPTH_COMPONENT and type is not UNSIGNED_SHORT or UNSIGNED_INT
						// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
						if ( texture.type !== UnsignedShortType && texture.type !== UnsignedIntType ) {

							console.warn( 'THREE.WebGLRenderer: Use UnsignedShortType or UnsignedIntType for DepthFormat DepthTexture.' );

							texture.type = UnsignedIntType;
							glType = utils.convert( texture.type );

						}

					}

					if ( texture.format === DepthStencilFormat && glInternalFormat === _gl.DEPTH_COMPONENT ) {

						// Depth stencil textures need the DEPTH_STENCIL internal format
						// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
						glInternalFormat = _gl.DEPTH_STENCIL;

						// The error INVALID_OPERATION is generated by texImage2D if format and internalformat are
						// DEPTH_STENCIL and type is not UNSIGNED_INT_24_8_WEBGL.
						// (https://www.khronos.org/registry/webgl/extensions/WEBGL_depth_texture/)
						if ( texture.type !== UnsignedInt248Type ) {

							console.warn( 'THREE.WebGLRenderer: Use UnsignedInt248Type for DepthStencilFormat DepthTexture.' );

							texture.type = UnsignedInt248Type;
							glType = utils.convert( texture.type );

						}

					}

					//

					if ( allocateMemory ) {

						if ( useTexStorage ) {

							state.texStorage2D( _gl.TEXTURE_2D, 1, glInternalFormat, image.width, image.height );

						} else {

							state.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, null );

						}

					}

				} else if ( texture.isDataTexture ) {

					// use manually created mipmaps if available
					// if there are no manual mipmaps
					// set 0 level mipmap and then use GL to generate other mipmap levels

					if ( mipmaps.length > 0 && supportsMips ) {

						if ( useTexStorage && allocateMemory ) {

							state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );

						}

						for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

							mipmap = mipmaps[ i ];

							if ( useTexStorage ) {

								state.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );

							} else {

								state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

							}

						}

						texture.generateMipmaps = false;

					} else {

						if ( useTexStorage ) {

							if ( allocateMemory ) {

								state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );

							}

							state.texSubImage2D( _gl.TEXTURE_2D, 0, 0, 0, image.width, image.height, glFormat, glType, image.data );

						} else {

							state.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, image.width, image.height, 0, glFormat, glType, image.data );

						}

					}

				} else if ( texture.isCompressedTexture ) {

					if ( texture.isCompressedArrayTexture ) {

						if ( useTexStorage && allocateMemory ) {

							state.texStorage3D( _gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height, image.depth );

						}

						for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

							mipmap = mipmaps[ i ];

							if ( texture.format !== RGBAFormat ) {

								if ( glFormat !== null ) {

									if ( useTexStorage ) {

										state.compressedTexSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, mipmap.data, 0, 0 );

									} else {

										state.compressedTexImage3D( _gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, mipmap.data, 0, 0 );

									}

								} else {

									console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );

								}

							} else {

								if ( useTexStorage ) {

									state.texSubImage3D( _gl.TEXTURE_2D_ARRAY, i, 0, 0, 0, mipmap.width, mipmap.height, image.depth, glFormat, glType, mipmap.data );

								} else {

									state.texImage3D( _gl.TEXTURE_2D_ARRAY, i, glInternalFormat, mipmap.width, mipmap.height, image.depth, 0, glFormat, glType, mipmap.data );

								}

							}

						}

					} else {

						if ( useTexStorage && allocateMemory ) {

							state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );

						}

						for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

							mipmap = mipmaps[ i ];

							if ( texture.format !== RGBAFormat ) {

								if ( glFormat !== null ) {

									if ( useTexStorage ) {

										state.compressedTexSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );

									} else {

										state.compressedTexImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

									}

								} else {

									console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .uploadTexture()' );

								}

							} else {

								if ( useTexStorage ) {

									state.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );

								} else {

									state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

								}

							}

						}

					}

				} else if ( texture.isDataArrayTexture ) {

					if ( useTexStorage ) {

						if ( allocateMemory ) {

							state.texStorage3D( _gl.TEXTURE_2D_ARRAY, levels, glInternalFormat, image.width, image.height, image.depth );

						}

						state.texSubImage3D( _gl.TEXTURE_2D_ARRAY, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );

					} else {

						state.texImage3D( _gl.TEXTURE_2D_ARRAY, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );

					}

				} else if ( texture.isData3DTexture ) {

					if ( useTexStorage ) {

						if ( allocateMemory ) {

							state.texStorage3D( _gl.TEXTURE_3D, levels, glInternalFormat, image.width, image.height, image.depth );

						}

						state.texSubImage3D( _gl.TEXTURE_3D, 0, 0, 0, 0, image.width, image.height, image.depth, glFormat, glType, image.data );

					} else {

						state.texImage3D( _gl.TEXTURE_3D, 0, glInternalFormat, image.width, image.height, image.depth, 0, glFormat, glType, image.data );

					}

				} else if ( texture.isFramebufferTexture ) {

					if ( allocateMemory ) {

						if ( useTexStorage ) {

							state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );

						} else {

							let width = image.width, height = image.height;

							for ( let i = 0; i < levels; i ++ ) {

								state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, width, height, 0, glFormat, glType, null );

								width >>= 1;
								height >>= 1;

							}

						}

					}

				} else {

					// regular Texture (image, video, canvas)

					// use manually created mipmaps if available
					// if there are no manual mipmaps
					// set 0 level mipmap and then use GL to generate other mipmap levels

					if ( mipmaps.length > 0 && supportsMips ) {

						if ( useTexStorage && allocateMemory ) {

							state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, mipmaps[ 0 ].width, mipmaps[ 0 ].height );

						}

						for ( let i = 0, il = mipmaps.length; i < il; i ++ ) {

							mipmap = mipmaps[ i ];

							if ( useTexStorage ) {

								state.texSubImage2D( _gl.TEXTURE_2D, i, 0, 0, glFormat, glType, mipmap );

							} else {

								state.texImage2D( _gl.TEXTURE_2D, i, glInternalFormat, glFormat, glType, mipmap );

							}

						}

						texture.generateMipmaps = false;

					} else {

						if ( useTexStorage ) {

							if ( allocateMemory ) {

								state.texStorage2D( _gl.TEXTURE_2D, levels, glInternalFormat, image.width, image.height );

							}

							state.texSubImage2D( _gl.TEXTURE_2D, 0, 0, 0, glFormat, glType, image );

						} else {

							state.texImage2D( _gl.TEXTURE_2D, 0, glInternalFormat, glFormat, glType, image );

						}

					}

				}

				if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

					generateMipmap( textureType );

				}

				sourceProperties.__version = source.version;

				if ( texture.onUpdate ) texture.onUpdate( texture );

			}

			textureProperties.__version = texture.version;

		}

		function uploadCubeTexture( textureProperties, texture, slot ) {

			if ( texture.image.length !== 6 ) return;

			const forceUpload = initTexture( textureProperties, texture );
			const source = texture.source;

			state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture, _gl.TEXTURE0 + slot );

			const sourceProperties = properties.get( source );

			if ( source.version !== sourceProperties.__version || forceUpload === true ) {

				state.activeTexture( _gl.TEXTURE0 + slot );

				_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, texture.flipY );
				_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, texture.premultiplyAlpha );
				_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, texture.unpackAlignment );
				_gl.pixelStorei( _gl.UNPACK_COLORSPACE_CONVERSION_WEBGL, _gl.NONE );

				const isCompressed = ( texture.isCompressedTexture || texture.image[ 0 ].isCompressedTexture );
				const isDataTexture = ( texture.image[ 0 ] && texture.image[ 0 ].isDataTexture );

				const cubeImage = [];

				for ( let i = 0; i < 6; i ++ ) {

					if ( ! isCompressed && ! isDataTexture ) {

						cubeImage[ i ] = resizeImage( texture.image[ i ], false, true, maxCubemapSize );

					} else {

						cubeImage[ i ] = isDataTexture ? texture.image[ i ].image : texture.image[ i ];

					}

					cubeImage[ i ] = verifyColorSpace( texture, cubeImage[ i ] );

				}

				const image = cubeImage[ 0 ],
					supportsMips = isPowerOfTwo$1( image ) || isWebGL2,
					glFormat = utils.convert( texture.format, texture.colorSpace ),
					glType = utils.convert( texture.type ),
					glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );

				const useTexStorage = ( isWebGL2 && texture.isVideoTexture !== true );
				const allocateMemory = ( sourceProperties.__version === undefined ) || ( forceUpload === true );
				let levels = getMipLevels( texture, image, supportsMips );

				setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, supportsMips );

				let mipmaps;

				if ( isCompressed ) {

					if ( useTexStorage && allocateMemory ) {

						state.texStorage2D( _gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, image.width, image.height );

					}

					for ( let i = 0; i < 6; i ++ ) {

						mipmaps = cubeImage[ i ].mipmaps;

						for ( let j = 0; j < mipmaps.length; j ++ ) {

							const mipmap = mipmaps[ j ];

							if ( texture.format !== RGBAFormat ) {

								if ( glFormat !== null ) {

									if ( useTexStorage ) {

										state.compressedTexSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, mipmap.data );

									} else {

										state.compressedTexImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, mipmap.data );

									}

								} else {

									console.warn( 'THREE.WebGLRenderer: Attempt to load unsupported compressed texture format in .setTextureCube()' );

								}

							} else {

								if ( useTexStorage ) {

									state.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, 0, 0, mipmap.width, mipmap.height, glFormat, glType, mipmap.data );

								} else {

									state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j, glInternalFormat, mipmap.width, mipmap.height, 0, glFormat, glType, mipmap.data );

								}

							}

						}

					}

				} else {

					mipmaps = texture.mipmaps;

					if ( useTexStorage && allocateMemory ) {

						// TODO: Uniformly handle mipmap definitions
						// Normal textures and compressed cube textures define base level + mips with their mipmap array
						// Uncompressed cube textures use their mipmap array only for mips (no base level)

						if ( mipmaps.length > 0 ) levels ++;

						state.texStorage2D( _gl.TEXTURE_CUBE_MAP, levels, glInternalFormat, cubeImage[ 0 ].width, cubeImage[ 0 ].height );

					}

					for ( let i = 0; i < 6; i ++ ) {

						if ( isDataTexture ) {

							if ( useTexStorage ) {

								state.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, cubeImage[ i ].width, cubeImage[ i ].height, glFormat, glType, cubeImage[ i ].data );

							} else {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, cubeImage[ i ].width, cubeImage[ i ].height, 0, glFormat, glType, cubeImage[ i ].data );

							}

							for ( let j = 0; j < mipmaps.length; j ++ ) {

								const mipmap = mipmaps[ j ];
								const mipmapImage = mipmap.image[ i ].image;

								if ( useTexStorage ) {

									state.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, mipmapImage.width, mipmapImage.height, glFormat, glType, mipmapImage.data );

								} else {

									state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, mipmapImage.width, mipmapImage.height, 0, glFormat, glType, mipmapImage.data );

								}

							}

						} else {

							if ( useTexStorage ) {

								state.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, 0, 0, glFormat, glType, cubeImage[ i ] );

							} else {

								state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, glInternalFormat, glFormat, glType, cubeImage[ i ] );

							}

							for ( let j = 0; j < mipmaps.length; j ++ ) {

								const mipmap = mipmaps[ j ];

								if ( useTexStorage ) {

									state.texSubImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, 0, 0, glFormat, glType, mipmap.image[ i ] );

								} else {

									state.texImage2D( _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, j + 1, glInternalFormat, glFormat, glType, mipmap.image[ i ] );

								}

							}

						}

					}

				}

				if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

					// We assume images for cube map have the same size.
					generateMipmap( _gl.TEXTURE_CUBE_MAP );

				}

				sourceProperties.__version = source.version;

				if ( texture.onUpdate ) texture.onUpdate( texture );

			}

			textureProperties.__version = texture.version;

		}

		// Render targets

		// Setup storage for target texture and bind it to correct framebuffer
		function setupFrameBufferTexture( framebuffer, renderTarget, texture, attachment, textureTarget, level ) {

			const glFormat = utils.convert( texture.format, texture.colorSpace );
			const glType = utils.convert( texture.type );
			const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );
			const renderTargetProperties = properties.get( renderTarget );

			if ( ! renderTargetProperties.__hasExternalTextures ) {

				const width = Math.max( 1, renderTarget.width >> level );
				const height = Math.max( 1, renderTarget.height >> level );

				if ( textureTarget === _gl.TEXTURE_3D || textureTarget === _gl.TEXTURE_2D_ARRAY ) {

					state.texImage3D( textureTarget, level, glInternalFormat, width, height, renderTarget.depth, 0, glFormat, glType, null );

				} else {

					state.texImage2D( textureTarget, level, glInternalFormat, width, height, 0, glFormat, glType, null );

				}

			}

			state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

			if ( useMultisampledRTT( renderTarget ) ) {

				multisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( texture ).__webglTexture, 0, getRenderTargetSamples( renderTarget ) );

			} else if ( textureTarget === _gl.TEXTURE_2D || ( textureTarget >= _gl.TEXTURE_CUBE_MAP_POSITIVE_X && textureTarget <= _gl.TEXTURE_CUBE_MAP_NEGATIVE_Z ) ) { // see #24753

				_gl.framebufferTexture2D( _gl.FRAMEBUFFER, attachment, textureTarget, properties.get( texture ).__webglTexture, level );

			}

			state.bindFramebuffer( _gl.FRAMEBUFFER, null );

		}


		// Setup storage for internal depth/stencil buffers and bind to correct framebuffer
		function setupRenderBufferStorage( renderbuffer, renderTarget, isMultisample ) {

			_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderbuffer );

			if ( renderTarget.depthBuffer && ! renderTarget.stencilBuffer ) {

				let glInternalFormat = _gl.DEPTH_COMPONENT16;

				if ( isMultisample || useMultisampledRTT( renderTarget ) ) {

					const depthTexture = renderTarget.depthTexture;

					if ( depthTexture && depthTexture.isDepthTexture ) {

						if ( depthTexture.type === FloatType ) {

							glInternalFormat = _gl.DEPTH_COMPONENT32F;

						} else if ( depthTexture.type === UnsignedIntType ) {

							glInternalFormat = _gl.DEPTH_COMPONENT24;

						}

					}

					const samples = getRenderTargetSamples( renderTarget );

					if ( useMultisampledRTT( renderTarget ) ) {

						multisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

					} else {

						_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

					}

				} else {

					_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );

				}

				_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

			} else if ( renderTarget.depthBuffer && renderTarget.stencilBuffer ) {

				const samples = getRenderTargetSamples( renderTarget );

				if ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {

					_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height );

				} else if ( useMultisampledRTT( renderTarget ) ) {

					multisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, _gl.DEPTH24_STENCIL8, renderTarget.width, renderTarget.height );

				} else {

					_gl.renderbufferStorage( _gl.RENDERBUFFER, _gl.DEPTH_STENCIL, renderTarget.width, renderTarget.height );

				}


				_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.RENDERBUFFER, renderbuffer );

			} else {

				const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];

				for ( let i = 0; i < textures.length; i ++ ) {

					const texture = textures[ i ];

					const glFormat = utils.convert( texture.format, texture.colorSpace );
					const glType = utils.convert( texture.type );
					const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace );
					const samples = getRenderTargetSamples( renderTarget );

					if ( isMultisample && useMultisampledRTT( renderTarget ) === false ) {

						_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

					} else if ( useMultisampledRTT( renderTarget ) ) {

						multisampledRTTExt.renderbufferStorageMultisampleEXT( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

					} else {

						_gl.renderbufferStorage( _gl.RENDERBUFFER, glInternalFormat, renderTarget.width, renderTarget.height );

					}

				}

			}

			_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

		}

		// Setup resources for a Depth Texture for a FBO (needs an extension)
		function setupDepthTexture( framebuffer, renderTarget ) {

			const isCube = ( renderTarget && renderTarget.isWebGLCubeRenderTarget );
			if ( isCube ) throw new Error( 'Depth Texture with cube render targets is not supported' );

			state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

			if ( ! ( renderTarget.depthTexture && renderTarget.depthTexture.isDepthTexture ) ) {

				throw new Error( 'renderTarget.depthTexture must be an instance of THREE.DepthTexture' );

			}

			// upload an empty depth texture with framebuffer size
			if ( ! properties.get( renderTarget.depthTexture ).__webglTexture ||
					renderTarget.depthTexture.image.width !== renderTarget.width ||
					renderTarget.depthTexture.image.height !== renderTarget.height ) {

				renderTarget.depthTexture.image.width = renderTarget.width;
				renderTarget.depthTexture.image.height = renderTarget.height;
				renderTarget.depthTexture.needsUpdate = true;

			}

			setTexture2D( renderTarget.depthTexture, 0 );

			const webglDepthTexture = properties.get( renderTarget.depthTexture ).__webglTexture;
			const samples = getRenderTargetSamples( renderTarget );

			if ( renderTarget.depthTexture.format === DepthFormat ) {

				if ( useMultisampledRTT( renderTarget ) ) {

					multisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples );

				} else {

					_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

				}

			} else if ( renderTarget.depthTexture.format === DepthStencilFormat ) {

				if ( useMultisampledRTT( renderTarget ) ) {

					multisampledRTTExt.framebufferTexture2DMultisampleEXT( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0, samples );

				} else {

					_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.DEPTH_STENCIL_ATTACHMENT, _gl.TEXTURE_2D, webglDepthTexture, 0 );

				}

			} else {

				throw new Error( 'Unknown depthTexture format' );

			}

		}

		// Setup GL resources for a non-texture depth buffer
		function setupDepthRenderbuffer( renderTarget ) {

			const renderTargetProperties = properties.get( renderTarget );
			const isCube = ( renderTarget.isWebGLCubeRenderTarget === true );

			if ( renderTarget.depthTexture && ! renderTargetProperties.__autoAllocateDepthBuffer ) {

				if ( isCube ) throw new Error( 'target.depthTexture not supported in Cube render targets' );

				setupDepthTexture( renderTargetProperties.__webglFramebuffer, renderTarget );

			} else {

				if ( isCube ) {

					renderTargetProperties.__webglDepthbuffer = [];

					for ( let i = 0; i < 6; i ++ ) {

						state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer[ i ] );
						renderTargetProperties.__webglDepthbuffer[ i ] = _gl.createRenderbuffer();
						setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer[ i ], renderTarget, false );

					}

				} else {

					state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
					renderTargetProperties.__webglDepthbuffer = _gl.createRenderbuffer();
					setupRenderBufferStorage( renderTargetProperties.__webglDepthbuffer, renderTarget, false );

				}

			}

			state.bindFramebuffer( _gl.FRAMEBUFFER, null );

		}

		// rebind framebuffer with external textures
		function rebindTextures( renderTarget, colorTexture, depthTexture ) {

			const renderTargetProperties = properties.get( renderTarget );

			if ( colorTexture !== undefined ) {

				setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, renderTarget.texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, 0 );

			}

			if ( depthTexture !== undefined ) {

				setupDepthRenderbuffer( renderTarget );

			}

		}

		// Set up GL resources for the render target
		function setupRenderTarget( renderTarget ) {

			const texture = renderTarget.texture;

			const renderTargetProperties = properties.get( renderTarget );
			const textureProperties = properties.get( texture );

			renderTarget.addEventListener( 'dispose', onRenderTargetDispose );

			if ( renderTarget.isWebGLMultipleRenderTargets !== true ) {

				if ( textureProperties.__webglTexture === undefined ) {

					textureProperties.__webglTexture = _gl.createTexture();

				}

				textureProperties.__version = texture.version;
				info.memory.textures ++;

			}

			const isCube = ( renderTarget.isWebGLCubeRenderTarget === true );
			const isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );
			const supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;

			// Setup framebuffer

			if ( isCube ) {

				renderTargetProperties.__webglFramebuffer = [];

				for ( let i = 0; i < 6; i ++ ) {

					if ( isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0 ) {

						renderTargetProperties.__webglFramebuffer[ i ] = [];

						for ( let level = 0; level < texture.mipmaps.length; level ++ ) {

							renderTargetProperties.__webglFramebuffer[ i ][ level ] = _gl.createFramebuffer();

						}

					} else {

						renderTargetProperties.__webglFramebuffer[ i ] = _gl.createFramebuffer();

					}

				}

			} else {

				if ( isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0 ) {

					renderTargetProperties.__webglFramebuffer = [];

					for ( let level = 0; level < texture.mipmaps.length; level ++ ) {

						renderTargetProperties.__webglFramebuffer[ level ] = _gl.createFramebuffer();

					}

				} else {

					renderTargetProperties.__webglFramebuffer = _gl.createFramebuffer();

				}

				if ( isMultipleRenderTargets ) {

					if ( capabilities.drawBuffers ) {

						const textures = renderTarget.texture;

						for ( let i = 0, il = textures.length; i < il; i ++ ) {

							const attachmentProperties = properties.get( textures[ i ] );

							if ( attachmentProperties.__webglTexture === undefined ) {

								attachmentProperties.__webglTexture = _gl.createTexture();

								info.memory.textures ++;

							}

						}

					} else {

						console.warn( 'THREE.WebGLRenderer: WebGLMultipleRenderTargets can only be used with WebGL2 or WEBGL_draw_buffers extension.' );

					}

				}

				if ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {

					const textures = isMultipleRenderTargets ? texture : [ texture ];

					renderTargetProperties.__webglMultisampledFramebuffer = _gl.createFramebuffer();
					renderTargetProperties.__webglColorRenderbuffer = [];

					state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );

					for ( let i = 0; i < textures.length; i ++ ) {

						const texture = textures[ i ];
						renderTargetProperties.__webglColorRenderbuffer[ i ] = _gl.createRenderbuffer();

						_gl.bindRenderbuffer( _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );

						const glFormat = utils.convert( texture.format, texture.colorSpace );
						const glType = utils.convert( texture.type );
						const glInternalFormat = getInternalFormat( texture.internalFormat, glFormat, glType, texture.colorSpace, renderTarget.isXRRenderTarget === true );
						const samples = getRenderTargetSamples( renderTarget );
						_gl.renderbufferStorageMultisample( _gl.RENDERBUFFER, samples, glInternalFormat, renderTarget.width, renderTarget.height );

						_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );

					}

					_gl.bindRenderbuffer( _gl.RENDERBUFFER, null );

					if ( renderTarget.depthBuffer ) {

						renderTargetProperties.__webglDepthRenderbuffer = _gl.createRenderbuffer();
						setupRenderBufferStorage( renderTargetProperties.__webglDepthRenderbuffer, renderTarget, true );

					}

					state.bindFramebuffer( _gl.FRAMEBUFFER, null );

				}

			}

			// Setup color buffer

			if ( isCube ) {

				state.bindTexture( _gl.TEXTURE_CUBE_MAP, textureProperties.__webglTexture );
				setTextureParameters( _gl.TEXTURE_CUBE_MAP, texture, supportsMips );

				for ( let i = 0; i < 6; i ++ ) {

					if ( isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0 ) {

						for ( let level = 0; level < texture.mipmaps.length; level ++ ) {

							setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ][ level ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, level );

						}

					} else {

						setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ i ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0 );

					}

				}

				if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

					generateMipmap( _gl.TEXTURE_CUBE_MAP );

				}

				state.unbindTexture();

			} else if ( isMultipleRenderTargets ) {

				const textures = renderTarget.texture;

				for ( let i = 0, il = textures.length; i < il; i ++ ) {

					const attachment = textures[ i ];
					const attachmentProperties = properties.get( attachment );

					state.bindTexture( _gl.TEXTURE_2D, attachmentProperties.__webglTexture );
					setTextureParameters( _gl.TEXTURE_2D, attachment, supportsMips );
					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, attachment, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, 0 );

					if ( textureNeedsGenerateMipmaps( attachment, supportsMips ) ) {

						generateMipmap( _gl.TEXTURE_2D );

					}

				}

				state.unbindTexture();

			} else {

				let glTextureType = _gl.TEXTURE_2D;

				if ( renderTarget.isWebGL3DRenderTarget || renderTarget.isWebGLArrayRenderTarget ) {

					if ( isWebGL2 ) {

						glTextureType = renderTarget.isWebGL3DRenderTarget ? _gl.TEXTURE_3D : _gl.TEXTURE_2D_ARRAY;

					} else {

						console.error( 'THREE.WebGLTextures: THREE.Data3DTexture and THREE.DataArrayTexture only supported with WebGL2.' );

					}

				}

				state.bindTexture( glTextureType, textureProperties.__webglTexture );
				setTextureParameters( glTextureType, texture, supportsMips );

				if ( isWebGL2 && texture.mipmaps && texture.mipmaps.length > 0 ) {

					for ( let level = 0; level < texture.mipmaps.length; level ++ ) {

						setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer[ level ], renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, level );

					}

				} else {

					setupFrameBufferTexture( renderTargetProperties.__webglFramebuffer, renderTarget, texture, _gl.COLOR_ATTACHMENT0, glTextureType, 0 );

				}

				if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

					generateMipmap( glTextureType );

				}

				state.unbindTexture();

			}

			// Setup depth and stencil buffers

			if ( renderTarget.depthBuffer ) {

				setupDepthRenderbuffer( renderTarget );

			}

		}

		function updateRenderTargetMipmap( renderTarget ) {

			const supportsMips = isPowerOfTwo$1( renderTarget ) || isWebGL2;

			const textures = renderTarget.isWebGLMultipleRenderTargets === true ? renderTarget.texture : [ renderTarget.texture ];

			for ( let i = 0, il = textures.length; i < il; i ++ ) {

				const texture = textures[ i ];

				if ( textureNeedsGenerateMipmaps( texture, supportsMips ) ) {

					const target = renderTarget.isWebGLCubeRenderTarget ? _gl.TEXTURE_CUBE_MAP : _gl.TEXTURE_2D;
					const webglTexture = properties.get( texture ).__webglTexture;

					state.bindTexture( target, webglTexture );
					generateMipmap( target );
					state.unbindTexture();

				}

			}

		}

		function updateMultisampleRenderTarget( renderTarget ) {

			if ( ( isWebGL2 && renderTarget.samples > 0 ) && useMultisampledRTT( renderTarget ) === false ) {

				const textures = renderTarget.isWebGLMultipleRenderTargets ? renderTarget.texture : [ renderTarget.texture ];
				const width = renderTarget.width;
				const height = renderTarget.height;
				let mask = _gl.COLOR_BUFFER_BIT;
				const invalidationArray = [];
				const depthStyle = renderTarget.stencilBuffer ? _gl.DEPTH_STENCIL_ATTACHMENT : _gl.DEPTH_ATTACHMENT;
				const renderTargetProperties = properties.get( renderTarget );
				const isMultipleRenderTargets = ( renderTarget.isWebGLMultipleRenderTargets === true );

				// If MRT we need to remove FBO attachments
				if ( isMultipleRenderTargets ) {

					for ( let i = 0; i < textures.length; i ++ ) {

						state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );
						_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, null );

						state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
						_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, null, 0 );

					}

				}

				state.bindFramebuffer( _gl.READ_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );
				state.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );

				for ( let i = 0; i < textures.length; i ++ ) {

					invalidationArray.push( _gl.COLOR_ATTACHMENT0 + i );

					if ( renderTarget.depthBuffer ) {

						invalidationArray.push( depthStyle );

					}

					const ignoreDepthValues = ( renderTargetProperties.__ignoreDepthValues !== undefined ) ? renderTargetProperties.__ignoreDepthValues : false;

					if ( ignoreDepthValues === false ) {

						if ( renderTarget.depthBuffer ) mask |= _gl.DEPTH_BUFFER_BIT;
						if ( renderTarget.stencilBuffer ) mask |= _gl.STENCIL_BUFFER_BIT;

					}

					if ( isMultipleRenderTargets ) {

						_gl.framebufferRenderbuffer( _gl.READ_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );

					}

					if ( ignoreDepthValues === true ) {

						_gl.invalidateFramebuffer( _gl.READ_FRAMEBUFFER, [ depthStyle ] );
						_gl.invalidateFramebuffer( _gl.DRAW_FRAMEBUFFER, [ depthStyle ] );

					}

					if ( isMultipleRenderTargets ) {

						const webglTexture = properties.get( textures[ i ] ).__webglTexture;
						_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_2D, webglTexture, 0 );

					}

					_gl.blitFramebuffer( 0, 0, width, height, 0, 0, width, height, mask, _gl.NEAREST );

					if ( supportsInvalidateFramebuffer ) {

						_gl.invalidateFramebuffer( _gl.READ_FRAMEBUFFER, invalidationArray );

					}


				}

				state.bindFramebuffer( _gl.READ_FRAMEBUFFER, null );
				state.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, null );

				// If MRT since pre-blit we removed the FBO we need to reconstruct the attachments
				if ( isMultipleRenderTargets ) {

					for ( let i = 0; i < textures.length; i ++ ) {

						state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );
						_gl.framebufferRenderbuffer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.RENDERBUFFER, renderTargetProperties.__webglColorRenderbuffer[ i ] );

						const webglTexture = properties.get( textures[ i ] ).__webglTexture;

						state.bindFramebuffer( _gl.FRAMEBUFFER, renderTargetProperties.__webglFramebuffer );
						_gl.framebufferTexture2D( _gl.DRAW_FRAMEBUFFER, _gl.COLOR_ATTACHMENT0 + i, _gl.TEXTURE_2D, webglTexture, 0 );

					}

				}

				state.bindFramebuffer( _gl.DRAW_FRAMEBUFFER, renderTargetProperties.__webglMultisampledFramebuffer );

			}

		}

		function getRenderTargetSamples( renderTarget ) {

			return Math.min( maxSamples, renderTarget.samples );

		}

		function useMultisampledRTT( renderTarget ) {

			const renderTargetProperties = properties.get( renderTarget );

			return isWebGL2 && renderTarget.samples > 0 && extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true && renderTargetProperties.__useRenderToTexture !== false;

		}

		function updateVideoTexture( texture ) {

			const frame = info.render.frame;

			// Check the last frame we updated the VideoTexture

			if ( _videoTextures.get( texture ) !== frame ) {

				_videoTextures.set( texture, frame );
				texture.update();

			}

		}

		function verifyColorSpace( texture, image ) {

			const colorSpace = texture.colorSpace;
			const format = texture.format;
			const type = texture.type;

			if ( texture.isCompressedTexture === true || texture.isVideoTexture === true || texture.format === _SRGBAFormat ) return image;

			if ( colorSpace !== LinearSRGBColorSpace && colorSpace !== NoColorSpace ) {

				// sRGB

				if ( colorSpace === SRGBColorSpace || colorSpace === DisplayP3ColorSpace ) {

					if ( isWebGL2 === false ) {

						// in WebGL 1, try to use EXT_sRGB extension and unsized formats

						if ( extensions.has( 'EXT_sRGB' ) === true && format === RGBAFormat ) {

							texture.format = _SRGBAFormat;

							// it's not possible to generate mips in WebGL 1 with this extension

							texture.minFilter = LinearFilter;
							texture.generateMipmaps = false;

						} else {

							// slow fallback (CPU decode)

							image = ImageUtils.sRGBToLinear( image );

						}

					} else {

						// in WebGL 2 uncompressed textures can only be sRGB encoded if they have the RGBA8 format

						if ( format !== RGBAFormat || type !== UnsignedByteType ) {

							console.warn( 'THREE.WebGLTextures: sRGB encoded textures have to use RGBAFormat and UnsignedByteType.' );

						}

					}

				} else {

					console.error( 'THREE.WebGLTextures: Unsupported texture color space:', colorSpace );

				}

			}

			return image;

		}

		//

		this.allocateTextureUnit = allocateTextureUnit;
		this.resetTextureUnits = resetTextureUnits;

		this.setTexture2D = setTexture2D;
		this.setTexture2DArray = setTexture2DArray;
		this.setTexture3D = setTexture3D;
		this.setTextureCube = setTextureCube;
		this.rebindTextures = rebindTextures;
		this.setupRenderTarget = setupRenderTarget;
		this.updateRenderTargetMipmap = updateRenderTargetMipmap;
		this.updateMultisampleRenderTarget = updateMultisampleRenderTarget;
		this.setupDepthRenderbuffer = setupDepthRenderbuffer;
		this.setupFrameBufferTexture = setupFrameBufferTexture;
		this.useMultisampledRTT = useMultisampledRTT;

	}

	const LinearTransferFunction = 0;
	const SRGBTransferFunction = 1;

	function WebGLUtils( gl, extensions, capabilities ) {

		const isWebGL2 = capabilities.isWebGL2;

		function convert( p, colorSpace = NoColorSpace ) {

			let extension;

			const transferFunction = ( colorSpace === SRGBColorSpace || colorSpace === DisplayP3ColorSpace ) ? SRGBTransferFunction : LinearTransferFunction;

			if ( p === UnsignedByteType ) return gl.UNSIGNED_BYTE;
			if ( p === UnsignedShort4444Type ) return gl.UNSIGNED_SHORT_4_4_4_4;
			if ( p === UnsignedShort5551Type ) return gl.UNSIGNED_SHORT_5_5_5_1;

			if ( p === ByteType ) return gl.BYTE;
			if ( p === ShortType ) return gl.SHORT;
			if ( p === UnsignedShortType ) return gl.UNSIGNED_SHORT;
			if ( p === IntType ) return gl.INT;
			if ( p === UnsignedIntType ) return gl.UNSIGNED_INT;
			if ( p === FloatType ) return gl.FLOAT;

			if ( p === HalfFloatType ) {

				if ( isWebGL2 ) return gl.HALF_FLOAT;

				extension = extensions.get( 'OES_texture_half_float' );

				if ( extension !== null ) {

					return extension.HALF_FLOAT_OES;

				} else {

					return null;

				}

			}

			if ( p === AlphaFormat ) return gl.ALPHA;
			if ( p === RGBAFormat ) return gl.RGBA;
			if ( p === LuminanceFormat ) return gl.LUMINANCE;
			if ( p === LuminanceAlphaFormat ) return gl.LUMINANCE_ALPHA;
			if ( p === DepthFormat ) return gl.DEPTH_COMPONENT;
			if ( p === DepthStencilFormat ) return gl.DEPTH_STENCIL;

			// WebGL 1 sRGB fallback

			if ( p === _SRGBAFormat ) {

				extension = extensions.get( 'EXT_sRGB' );

				if ( extension !== null ) {

					return extension.SRGB_ALPHA_EXT;

				} else {

					return null;

				}

			}

			// WebGL2 formats.

			if ( p === RedFormat ) return gl.RED;
			if ( p === RedIntegerFormat ) return gl.RED_INTEGER;
			if ( p === RGFormat ) return gl.RG;
			if ( p === RGIntegerFormat ) return gl.RG_INTEGER;
			if ( p === RGBAIntegerFormat ) return gl.RGBA_INTEGER;

			// S3TC

			if ( p === RGB_S3TC_DXT1_Format || p === RGBA_S3TC_DXT1_Format || p === RGBA_S3TC_DXT3_Format || p === RGBA_S3TC_DXT5_Format ) {

				if ( transferFunction === SRGBTransferFunction ) {

					extension = extensions.get( 'WEBGL_compressed_texture_s3tc_srgb' );

					if ( extension !== null ) {

						if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_S3TC_DXT1_EXT;
						if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT;
						if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT;
						if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT;

					} else {

						return null;

					}

				} else {

					extension = extensions.get( 'WEBGL_compressed_texture_s3tc' );

					if ( extension !== null ) {

						if ( p === RGB_S3TC_DXT1_Format ) return extension.COMPRESSED_RGB_S3TC_DXT1_EXT;
						if ( p === RGBA_S3TC_DXT1_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT1_EXT;
						if ( p === RGBA_S3TC_DXT3_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT3_EXT;
						if ( p === RGBA_S3TC_DXT5_Format ) return extension.COMPRESSED_RGBA_S3TC_DXT5_EXT;

					} else {

						return null;

					}

				}

			}

			// PVRTC

			if ( p === RGB_PVRTC_4BPPV1_Format || p === RGB_PVRTC_2BPPV1_Format || p === RGBA_PVRTC_4BPPV1_Format || p === RGBA_PVRTC_2BPPV1_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_pvrtc' );

				if ( extension !== null ) {

					if ( p === RGB_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_4BPPV1_IMG;
					if ( p === RGB_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGB_PVRTC_2BPPV1_IMG;
					if ( p === RGBA_PVRTC_4BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG;
					if ( p === RGBA_PVRTC_2BPPV1_Format ) return extension.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG;

				} else {

					return null;

				}

			}

			// ETC1

			if ( p === RGB_ETC1_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_etc1' );

				if ( extension !== null ) {

					return extension.COMPRESSED_RGB_ETC1_WEBGL;

				} else {

					return null;

				}

			}

			// ETC2

			if ( p === RGB_ETC2_Format || p === RGBA_ETC2_EAC_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_etc' );

				if ( extension !== null ) {

					if ( p === RGB_ETC2_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ETC2 : extension.COMPRESSED_RGB8_ETC2;
					if ( p === RGBA_ETC2_EAC_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ETC2_EAC : extension.COMPRESSED_RGBA8_ETC2_EAC;

				} else {

					return null;

				}

			}

			// ASTC

			if ( p === RGBA_ASTC_4x4_Format || p === RGBA_ASTC_5x4_Format || p === RGBA_ASTC_5x5_Format ||
				p === RGBA_ASTC_6x5_Format || p === RGBA_ASTC_6x6_Format || p === RGBA_ASTC_8x5_Format ||
				p === RGBA_ASTC_8x6_Format || p === RGBA_ASTC_8x8_Format || p === RGBA_ASTC_10x5_Format ||
				p === RGBA_ASTC_10x6_Format || p === RGBA_ASTC_10x8_Format || p === RGBA_ASTC_10x10_Format ||
				p === RGBA_ASTC_12x10_Format || p === RGBA_ASTC_12x12_Format ) {

				extension = extensions.get( 'WEBGL_compressed_texture_astc' );

				if ( extension !== null ) {

					if ( p === RGBA_ASTC_4x4_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_4x4_KHR : extension.COMPRESSED_RGBA_ASTC_4x4_KHR;
					if ( p === RGBA_ASTC_5x4_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x4_KHR : extension.COMPRESSED_RGBA_ASTC_5x4_KHR;
					if ( p === RGBA_ASTC_5x5_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_5x5_KHR : extension.COMPRESSED_RGBA_ASTC_5x5_KHR;
					if ( p === RGBA_ASTC_6x5_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x5_KHR : extension.COMPRESSED_RGBA_ASTC_6x5_KHR;
					if ( p === RGBA_ASTC_6x6_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_6x6_KHR : extension.COMPRESSED_RGBA_ASTC_6x6_KHR;
					if ( p === RGBA_ASTC_8x5_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x5_KHR : extension.COMPRESSED_RGBA_ASTC_8x5_KHR;
					if ( p === RGBA_ASTC_8x6_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x6_KHR : extension.COMPRESSED_RGBA_ASTC_8x6_KHR;
					if ( p === RGBA_ASTC_8x8_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_8x8_KHR : extension.COMPRESSED_RGBA_ASTC_8x8_KHR;
					if ( p === RGBA_ASTC_10x5_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x5_KHR : extension.COMPRESSED_RGBA_ASTC_10x5_KHR;
					if ( p === RGBA_ASTC_10x6_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x6_KHR : extension.COMPRESSED_RGBA_ASTC_10x6_KHR;
					if ( p === RGBA_ASTC_10x8_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x8_KHR : extension.COMPRESSED_RGBA_ASTC_10x8_KHR;
					if ( p === RGBA_ASTC_10x10_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_10x10_KHR : extension.COMPRESSED_RGBA_ASTC_10x10_KHR;
					if ( p === RGBA_ASTC_12x10_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x10_KHR : extension.COMPRESSED_RGBA_ASTC_12x10_KHR;
					if ( p === RGBA_ASTC_12x12_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB8_ALPHA8_ASTC_12x12_KHR : extension.COMPRESSED_RGBA_ASTC_12x12_KHR;

				} else {

					return null;

				}

			}

			// BPTC

			if ( p === RGBA_BPTC_Format || p === RGB_BPTC_SIGNED_Format || p === RGB_BPTC_UNSIGNED_Format ) {

				extension = extensions.get( 'EXT_texture_compression_bptc' );

				if ( extension !== null ) {

					if ( p === RGBA_BPTC_Format ) return ( transferFunction === SRGBTransferFunction ) ? extension.COMPRESSED_SRGB_ALPHA_BPTC_UNORM_EXT : extension.COMPRESSED_RGBA_BPTC_UNORM_EXT;
					if ( p === RGB_BPTC_SIGNED_Format ) return extension.COMPRESSED_RGB_BPTC_SIGNED_FLOAT_EXT;
					if ( p === RGB_BPTC_UNSIGNED_Format ) return extension.COMPRESSED_RGB_BPTC_UNSIGNED_FLOAT_EXT;

				} else {

					return null;

				}

			}

			// RGTC

			if ( p === RED_RGTC1_Format || p === SIGNED_RED_RGTC1_Format || p === RED_GREEN_RGTC2_Format || p === SIGNED_RED_GREEN_RGTC2_Format ) {

				extension = extensions.get( 'EXT_texture_compression_rgtc' );

				if ( extension !== null ) {

					if ( p === RGBA_BPTC_Format ) return extension.COMPRESSED_RED_RGTC1_EXT;
					if ( p === SIGNED_RED_RGTC1_Format ) return extension.COMPRESSED_SIGNED_RED_RGTC1_EXT;
					if ( p === RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_RED_GREEN_RGTC2_EXT;
					if ( p === SIGNED_RED_GREEN_RGTC2_Format ) return extension.COMPRESSED_SIGNED_RED_GREEN_RGTC2_EXT;

				} else {

					return null;

				}

			}

			//

			if ( p === UnsignedInt248Type ) {

				if ( isWebGL2 ) return gl.UNSIGNED_INT_24_8;

				extension = extensions.get( 'WEBGL_depth_texture' );

				if ( extension !== null ) {

					return extension.UNSIGNED_INT_24_8_WEBGL;

				} else {

					return null;

				}

			}

			// if "p" can't be resolved, assume the user defines a WebGL constant as a string (fallback/workaround for packed RGB formats)

			return ( gl[ p ] !== undefined ) ? gl[ p ] : null;

		}

		return { convert: convert };

	}

	class ArrayCamera extends PerspectiveCamera {

		constructor( array = [] ) {

			super();

			this.isArrayCamera = true;

			this.cameras = array;

		}

	}

	class Group extends Object3D {

		constructor() {

			super();

			this.isGroup = true;

			this.type = 'Group';

		}

	}

	const _moveEvent = { type: 'move' };

	class WebXRController {

		constructor() {

			this._targetRay = null;
			this._grip = null;
			this._hand = null;

		}

		getHandSpace() {

			if ( this._hand === null ) {

				this._hand = new Group();
				this._hand.matrixAutoUpdate = false;
				this._hand.visible = false;

				this._hand.joints = {};
				this._hand.inputState = { pinching: false };

			}

			return this._hand;

		}

		getTargetRaySpace() {

			if ( this._targetRay === null ) {

				this._targetRay = new Group();
				this._targetRay.matrixAutoUpdate = false;
				this._targetRay.visible = false;
				this._targetRay.hasLinearVelocity = false;
				this._targetRay.linearVelocity = new Vector3();
				this._targetRay.hasAngularVelocity = false;
				this._targetRay.angularVelocity = new Vector3();

			}

			return this._targetRay;

		}

		getGripSpace() {

			if ( this._grip === null ) {

				this._grip = new Group();
				this._grip.matrixAutoUpdate = false;
				this._grip.visible = false;
				this._grip.hasLinearVelocity = false;
				this._grip.linearVelocity = new Vector3();
				this._grip.hasAngularVelocity = false;
				this._grip.angularVelocity = new Vector3();

			}

			return this._grip;

		}

		dispatchEvent( event ) {

			if ( this._targetRay !== null ) {

				this._targetRay.dispatchEvent( event );

			}

			if ( this._grip !== null ) {

				this._grip.dispatchEvent( event );

			}

			if ( this._hand !== null ) {

				this._hand.dispatchEvent( event );

			}

			return this;

		}

		connect( inputSource ) {

			if ( inputSource && inputSource.hand ) {

				const hand = this._hand;

				if ( hand ) {

					for ( const inputjoint of inputSource.hand.values() ) {

						// Initialize hand with joints when connected
						this._getHandJoint( hand, inputjoint );

					}

				}

			}

			this.dispatchEvent( { type: 'connected', data: inputSource } );

			return this;

		}

		disconnect( inputSource ) {

			this.dispatchEvent( { type: 'disconnected', data: inputSource } );

			if ( this._targetRay !== null ) {

				this._targetRay.visible = false;

			}

			if ( this._grip !== null ) {

				this._grip.visible = false;

			}

			if ( this._hand !== null ) {

				this._hand.visible = false;

			}

			return this;

		}

		update( inputSource, frame, referenceSpace ) {

			let inputPose = null;
			let gripPose = null;
			let handPose = null;

			const targetRay = this._targetRay;
			const grip = this._grip;
			const hand = this._hand;

			if ( inputSource && frame.session.visibilityState !== 'visible-blurred' ) {

				if ( hand && inputSource.hand ) {

					handPose = true;

					for ( const inputjoint of inputSource.hand.values() ) {

						// Update the joints groups with the XRJoint poses
						const jointPose = frame.getJointPose( inputjoint, referenceSpace );

						// The transform of this joint will be updated with the joint pose on each frame
						const joint = this._getHandJoint( hand, inputjoint );

						if ( jointPose !== null ) {

							joint.matrix.fromArray( jointPose.transform.matrix );
							joint.matrix.decompose( joint.position, joint.rotation, joint.scale );
							joint.matrixWorldNeedsUpdate = true;
							joint.jointRadius = jointPose.radius;

						}

						joint.visible = jointPose !== null;

					}

					// Custom events

					// Check pinchz
					const indexTip = hand.joints[ 'index-finger-tip' ];
					const thumbTip = hand.joints[ 'thumb-tip' ];
					const distance = indexTip.position.distanceTo( thumbTip.position );

					const distanceToPinch = 0.02;
					const threshold = 0.005;

					if ( hand.inputState.pinching && distance > distanceToPinch + threshold ) {

						hand.inputState.pinching = false;
						this.dispatchEvent( {
							type: 'pinchend',
							handedness: inputSource.handedness,
							target: this
						} );

					} else if ( ! hand.inputState.pinching && distance <= distanceToPinch - threshold ) {

						hand.inputState.pinching = true;
						this.dispatchEvent( {
							type: 'pinchstart',
							handedness: inputSource.handedness,
							target: this
						} );

					}

				} else {

					if ( grip !== null && inputSource.gripSpace ) {

						gripPose = frame.getPose( inputSource.gripSpace, referenceSpace );

						if ( gripPose !== null ) {

							grip.matrix.fromArray( gripPose.transform.matrix );
							grip.matrix.decompose( grip.position, grip.rotation, grip.scale );
							grip.matrixWorldNeedsUpdate = true;

							if ( gripPose.linearVelocity ) {

								grip.hasLinearVelocity = true;
								grip.linearVelocity.copy( gripPose.linearVelocity );

							} else {

								grip.hasLinearVelocity = false;

							}

							if ( gripPose.angularVelocity ) {

								grip.hasAngularVelocity = true;
								grip.angularVelocity.copy( gripPose.angularVelocity );

							} else {

								grip.hasAngularVelocity = false;

							}

						}

					}

				}

				if ( targetRay !== null ) {

					inputPose = frame.getPose( inputSource.targetRaySpace, referenceSpace );

					// Some runtimes (namely Vive Cosmos with Vive OpenXR Runtime) have only grip space and ray space is equal to it
					if ( inputPose === null && gripPose !== null ) {

						inputPose = gripPose;

					}

					if ( inputPose !== null ) {

						targetRay.matrix.fromArray( inputPose.transform.matrix );
						targetRay.matrix.decompose( targetRay.position, targetRay.rotation, targetRay.scale );
						targetRay.matrixWorldNeedsUpdate = true;

						if ( inputPose.linearVelocity ) {

							targetRay.hasLinearVelocity = true;
							targetRay.linearVelocity.copy( inputPose.linearVelocity );

						} else {

							targetRay.hasLinearVelocity = false;

						}

						if ( inputPose.angularVelocity ) {

							targetRay.hasAngularVelocity = true;
							targetRay.angularVelocity.copy( inputPose.angularVelocity );

						} else {

							targetRay.hasAngularVelocity = false;

						}

						this.dispatchEvent( _moveEvent );

					}

				}


			}

			if ( targetRay !== null ) {

				targetRay.visible = ( inputPose !== null );

			}

			if ( grip !== null ) {

				grip.visible = ( gripPose !== null );

			}

			if ( hand !== null ) {

				hand.visible = ( handPose !== null );

			}

			return this;

		}

		// private method

		_getHandJoint( hand, inputjoint ) {

			if ( hand.joints[ inputjoint.jointName ] === undefined ) {

				const joint = new Group();
				joint.matrixAutoUpdate = false;
				joint.visible = false;
				hand.joints[ inputjoint.jointName ] = joint;

				hand.add( joint );

			}

			return hand.joints[ inputjoint.jointName ];

		}

	}

	class DepthTexture extends Texture {

		constructor( width, height, type, mapping, wrapS, wrapT, magFilter, minFilter, anisotropy, format ) {

			format = format !== undefined ? format : DepthFormat;

			if ( format !== DepthFormat && format !== DepthStencilFormat ) {

				throw new Error( 'DepthTexture format must be either THREE.DepthFormat or THREE.DepthStencilFormat' );

			}

			if ( type === undefined && format === DepthFormat ) type = UnsignedIntType;
			if ( type === undefined && format === DepthStencilFormat ) type = UnsignedInt248Type;

			super( null, mapping, wrapS, wrapT, magFilter, minFilter, format, type, anisotropy );

			this.isDepthTexture = true;

			this.image = { width: width, height: height };

			this.magFilter = magFilter !== undefined ? magFilter : NearestFilter;
			this.minFilter = minFilter !== undefined ? minFilter : NearestFilter;

			this.flipY = false;
			this.generateMipmaps = false;

			this.compareFunction = null;

		}


		copy( source ) {

			super.copy( source );

			this.compareFunction = source.compareFunction;

			return this;

		}

		toJSON( meta ) {

			const data = super.toJSON( meta );

			if ( this.compareFunction !== null ) data.compareFunction = this.compareFunction;

			return data;

		}

	}

	class WebXRManager extends EventDispatcher {

		constructor( renderer, gl ) {

			super();

			const scope = this;

			let session = null;

			let framebufferScaleFactor = 1.0;

			let referenceSpace = null;
			let referenceSpaceType = 'local-floor';
			// Set default foveation to maximum.
			let foveation = 1.0;
			let customReferenceSpace = null;

			let pose = null;
			let glBinding = null;
			let glProjLayer = null;
			let glBaseLayer = null;
			let xrFrame = null;
			const attributes = gl.getContextAttributes();
			let initialRenderTarget = null;
			let newRenderTarget = null;

			const controllers = [];
			const controllerInputSources = [];

			//

			const cameraL = new PerspectiveCamera();
			cameraL.layers.enable( 1 );
			cameraL.viewport = new Vector4();

			const cameraR = new PerspectiveCamera();
			cameraR.layers.enable( 2 );
			cameraR.viewport = new Vector4();

			const cameras = [ cameraL, cameraR ];

			const cameraXR = new ArrayCamera();
			cameraXR.layers.enable( 1 );
			cameraXR.layers.enable( 2 );

			let _currentDepthNear = null;
			let _currentDepthFar = null;

			//

			this.cameraAutoUpdate = true;
			this.enabled = false;

			this.isPresenting = false;

			this.getController = function ( index ) {

				let controller = controllers[ index ];

				if ( controller === undefined ) {

					controller = new WebXRController();
					controllers[ index ] = controller;

				}

				return controller.getTargetRaySpace();

			};

			this.getControllerGrip = function ( index ) {

				let controller = controllers[ index ];

				if ( controller === undefined ) {

					controller = new WebXRController();
					controllers[ index ] = controller;

				}

				return controller.getGripSpace();

			};

			this.getHand = function ( index ) {

				let controller = controllers[ index ];

				if ( controller === undefined ) {

					controller = new WebXRController();
					controllers[ index ] = controller;

				}

				return controller.getHandSpace();

			};

			//

			function onSessionEvent( event ) {

				const controllerIndex = controllerInputSources.indexOf( event.inputSource );

				if ( controllerIndex === - 1 ) {

					return;

				}

				const controller = controllers[ controllerIndex ];

				if ( controller !== undefined ) {

					controller.update( event.inputSource, event.frame, customReferenceSpace || referenceSpace );
					controller.dispatchEvent( { type: event.type, data: event.inputSource } );

				}

			}

			function onSessionEnd() {

				session.removeEventListener( 'select', onSessionEvent );
				session.removeEventListener( 'selectstart', onSessionEvent );
				session.removeEventListener( 'selectend', onSessionEvent );
				session.removeEventListener( 'squeeze', onSessionEvent );
				session.removeEventListener( 'squeezestart', onSessionEvent );
				session.removeEventListener( 'squeezeend', onSessionEvent );
				session.removeEventListener( 'end', onSessionEnd );
				session.removeEventListener( 'inputsourceschange', onInputSourcesChange );

				for ( let i = 0; i < controllers.length; i ++ ) {

					const inputSource = controllerInputSources[ i ];

					if ( inputSource === null ) continue;

					controllerInputSources[ i ] = null;

					controllers[ i ].disconnect( inputSource );

				}

				_currentDepthNear = null;
				_currentDepthFar = null;

				// restore framebuffer/rendering state

				renderer.setRenderTarget( initialRenderTarget );

				glBaseLayer = null;
				glProjLayer = null;
				glBinding = null;
				session = null;
				newRenderTarget = null;

				//

				animation.stop();

				scope.isPresenting = false;

				scope.dispatchEvent( { type: 'sessionend' } );

			}

			this.setFramebufferScaleFactor = function ( value ) {

				framebufferScaleFactor = value;

				if ( scope.isPresenting === true ) {

					console.warn( 'THREE.WebXRManager: Cannot change framebuffer scale while presenting.' );

				}

			};

			this.setReferenceSpaceType = function ( value ) {

				referenceSpaceType = value;

				if ( scope.isPresenting === true ) {

					console.warn( 'THREE.WebXRManager: Cannot change reference space type while presenting.' );

				}

			};

			this.getReferenceSpace = function () {

				return customReferenceSpace || referenceSpace;

			};

			this.setReferenceSpace = function ( space ) {

				customReferenceSpace = space;

			};

			this.getBaseLayer = function () {

				return glProjLayer !== null ? glProjLayer : glBaseLayer;

			};

			this.getBinding = function () {

				return glBinding;

			};

			this.getFrame = function () {

				return xrFrame;

			};

			this.getSession = function () {

				return session;

			};

			this.setSession = async function ( value ) {

				session = value;

				if ( session !== null ) {

					initialRenderTarget = renderer.getRenderTarget();

					session.addEventListener( 'select', onSessionEvent );
					session.addEventListener( 'selectstart', onSessionEvent );
					session.addEventListener( 'selectend', onSessionEvent );
					session.addEventListener( 'squeeze', onSessionEvent );
					session.addEventListener( 'squeezestart', onSessionEvent );
					session.addEventListener( 'squeezeend', onSessionEvent );
					session.addEventListener( 'end', onSessionEnd );
					session.addEventListener( 'inputsourceschange', onInputSourcesChange );

					if ( attributes.xrCompatible !== true ) {

						await gl.makeXRCompatible();

					}

					if ( ( session.renderState.layers === undefined ) || ( renderer.capabilities.isWebGL2 === false ) ) {

						const layerInit = {
							antialias: ( session.renderState.layers === undefined ) ? attributes.antialias : true,
							alpha: true,
							depth: attributes.depth,
							stencil: attributes.stencil,
							framebufferScaleFactor: framebufferScaleFactor
						};

						glBaseLayer = new XRWebGLLayer( session, gl, layerInit );

						session.updateRenderState( { baseLayer: glBaseLayer } );

						newRenderTarget = new WebGLRenderTarget(
							glBaseLayer.framebufferWidth,
							glBaseLayer.framebufferHeight,
							{
								format: RGBAFormat,
								type: UnsignedByteType,
								colorSpace: renderer.outputColorSpace,
								stencilBuffer: attributes.stencil
							}
						);

					} else {

						let depthFormat = null;
						let depthType = null;
						let glDepthFormat = null;

						if ( attributes.depth ) {

							glDepthFormat = attributes.stencil ? gl.DEPTH24_STENCIL8 : gl.DEPTH_COMPONENT24;
							depthFormat = attributes.stencil ? DepthStencilFormat : DepthFormat;
							depthType = attributes.stencil ? UnsignedInt248Type : UnsignedIntType;

						}

						const projectionlayerInit = {
							colorFormat: gl.RGBA8,
							depthFormat: glDepthFormat,
							scaleFactor: framebufferScaleFactor
						};

						glBinding = new XRWebGLBinding( session, gl );

						glProjLayer = glBinding.createProjectionLayer( projectionlayerInit );

						session.updateRenderState( { layers: [ glProjLayer ] } );

						newRenderTarget = new WebGLRenderTarget(
							glProjLayer.textureWidth,
							glProjLayer.textureHeight,
							{
								format: RGBAFormat,
								type: UnsignedByteType,
								depthTexture: new DepthTexture( glProjLayer.textureWidth, glProjLayer.textureHeight, depthType, undefined, undefined, undefined, undefined, undefined, undefined, depthFormat ),
								stencilBuffer: attributes.stencil,
								colorSpace: renderer.outputColorSpace,
								samples: attributes.antialias ? 4 : 0
							} );

						const renderTargetProperties = renderer.properties.get( newRenderTarget );
						renderTargetProperties.__ignoreDepthValues = glProjLayer.ignoreDepthValues;

					}

					newRenderTarget.isXRRenderTarget = true; // TODO Remove this when possible, see #23278

					this.setFoveation( foveation );

					customReferenceSpace = null;
					referenceSpace = await session.requestReferenceSpace( referenceSpaceType );

					animation.setContext( session );
					animation.start();

					scope.isPresenting = true;

					scope.dispatchEvent( { type: 'sessionstart' } );

				}

			};

			this.getEnvironmentBlendMode = function () {

				if ( session !== null ) {

					return session.environmentBlendMode;

				}

			};

			function onInputSourcesChange( event ) {

				// Notify disconnected

				for ( let i = 0; i < event.removed.length; i ++ ) {

					const inputSource = event.removed[ i ];
					const index = controllerInputSources.indexOf( inputSource );

					if ( index >= 0 ) {

						controllerInputSources[ index ] = null;
						controllers[ index ].disconnect( inputSource );

					}

				}

				// Notify connected

				for ( let i = 0; i < event.added.length; i ++ ) {

					const inputSource = event.added[ i ];

					let controllerIndex = controllerInputSources.indexOf( inputSource );

					if ( controllerIndex === - 1 ) {

						// Assign input source a controller that currently has no input source

						for ( let i = 0; i < controllers.length; i ++ ) {

							if ( i >= controllerInputSources.length ) {

								controllerInputSources.push( inputSource );
								controllerIndex = i;
								break;

							} else if ( controllerInputSources[ i ] === null ) {

								controllerInputSources[ i ] = inputSource;
								controllerIndex = i;
								break;

							}

						}

						// If all controllers do currently receive input we ignore new ones

						if ( controllerIndex === - 1 ) break;

					}

					const controller = controllers[ controllerIndex ];

					if ( controller ) {

						controller.connect( inputSource );

					}

				}

			}

			//

			const cameraLPos = new Vector3();
			const cameraRPos = new Vector3();

			/**
			 * Assumes 2 cameras that are parallel and share an X-axis, and that
			 * the cameras' projection and world matrices have already been set.
			 * And that near and far planes are identical for both cameras.
			 * Visualization of this technique: https://computergraphics.stackexchange.com/a/4765
			 */
			function setProjectionFromUnion( camera, cameraL, cameraR ) {

				cameraLPos.setFromMatrixPosition( cameraL.matrixWorld );
				cameraRPos.setFromMatrixPosition( cameraR.matrixWorld );

				const ipd = cameraLPos.distanceTo( cameraRPos );

				const projL = cameraL.projectionMatrix.elements;
				const projR = cameraR.projectionMatrix.elements;

				// VR systems will have identical far and near planes, and
				// most likely identical top and bottom frustum extents.
				// Use the left camera for these values.
				const near = projL[ 14 ] / ( projL[ 10 ] - 1 );
				const far = projL[ 14 ] / ( projL[ 10 ] + 1 );
				const topFov = ( projL[ 9 ] + 1 ) / projL[ 5 ];
				const bottomFov = ( projL[ 9 ] - 1 ) / projL[ 5 ];

				const leftFov = ( projL[ 8 ] - 1 ) / projL[ 0 ];
				const rightFov = ( projR[ 8 ] + 1 ) / projR[ 0 ];
				const left = near * leftFov;
				const right = near * rightFov;

				// Calculate the new camera's position offset from the
				// left camera. xOffset should be roughly half `ipd`.
				const zOffset = ipd / ( - leftFov + rightFov );
				const xOffset = zOffset * - leftFov;

				// TODO: Better way to apply this offset?
				cameraL.matrixWorld.decompose( camera.position, camera.quaternion, camera.scale );
				camera.translateX( xOffset );
				camera.translateZ( zOffset );
				camera.matrixWorld.compose( camera.position, camera.quaternion, camera.scale );
				camera.matrixWorldInverse.copy( camera.matrixWorld ).invert();

				// Find the union of the frustum values of the cameras and scale
				// the values so that the near plane's position does not change in world space,
				// although must now be relative to the new union camera.
				const near2 = near + zOffset;
				const far2 = far + zOffset;
				const left2 = left - xOffset;
				const right2 = right + ( ipd - xOffset );
				const top2 = topFov * far / far2 * near2;
				const bottom2 = bottomFov * far / far2 * near2;

				camera.projectionMatrix.makePerspective( left2, right2, top2, bottom2, near2, far2 );
				camera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();

			}

			function updateCamera( camera, parent ) {

				if ( parent === null ) {

					camera.matrixWorld.copy( camera.matrix );

				} else {

					camera.matrixWorld.multiplyMatrices( parent.matrixWorld, camera.matrix );

				}

				camera.matrixWorldInverse.copy( camera.matrixWorld ).invert();

			}

			this.updateCamera = function ( camera ) {

				if ( session === null ) return;

				cameraXR.near = cameraR.near = cameraL.near = camera.near;
				cameraXR.far = cameraR.far = cameraL.far = camera.far;

				if ( _currentDepthNear !== cameraXR.near || _currentDepthFar !== cameraXR.far ) {

					// Note that the new renderState won't apply until the next frame. See #18320

					session.updateRenderState( {
						depthNear: cameraXR.near,
						depthFar: cameraXR.far
					} );

					_currentDepthNear = cameraXR.near;
					_currentDepthFar = cameraXR.far;

				}

				const parent = camera.parent;
				const cameras = cameraXR.cameras;

				updateCamera( cameraXR, parent );

				for ( let i = 0; i < cameras.length; i ++ ) {

					updateCamera( cameras[ i ], parent );

				}

				// update projection matrix for proper view frustum culling

				if ( cameras.length === 2 ) {

					setProjectionFromUnion( cameraXR, cameraL, cameraR );

				} else {

					// assume single camera setup (AR)

					cameraXR.projectionMatrix.copy( cameraL.projectionMatrix );

				}

				// update user camera and its children

				updateUserCamera( camera, cameraXR, parent );

			};

			function updateUserCamera( camera, cameraXR, parent ) {

				if ( parent === null ) {

					camera.matrix.copy( cameraXR.matrixWorld );

				} else {

					camera.matrix.copy( parent.matrixWorld );
					camera.matrix.invert();
					camera.matrix.multiply( cameraXR.matrixWorld );

				}

				camera.matrix.decompose( camera.position, camera.quaternion, camera.scale );
				camera.updateMatrixWorld( true );

				camera.projectionMatrix.copy( cameraXR.projectionMatrix );
				camera.projectionMatrixInverse.copy( cameraXR.projectionMatrixInverse );

				if ( camera.isPerspectiveCamera ) {

					camera.fov = RAD2DEG * 2 * Math.atan( 1 / camera.projectionMatrix.elements[ 5 ] );
					camera.zoom = 1;

				}

			}

			this.getCamera = function () {

				return cameraXR;

			};

			this.getFoveation = function () {

				if ( glProjLayer === null && glBaseLayer === null ) {

					return undefined;

				}

				return foveation;

			};

			this.setFoveation = function ( value ) {

				// 0 = no foveation = full resolution
				// 1 = maximum foveation = the edges render at lower resolution

				foveation = value;

				if ( glProjLayer !== null ) {

					glProjLayer.fixedFoveation = value;

				}

				if ( glBaseLayer !== null && glBaseLayer.fixedFoveation !== undefined ) {

					glBaseLayer.fixedFoveation = value;

				}

			};

			// Animation Loop

			let onAnimationFrameCallback = null;

			function onAnimationFrame( time, frame ) {

				pose = frame.getViewerPose( customReferenceSpace || referenceSpace );
				xrFrame = frame;

				if ( pose !== null ) {

					const views = pose.views;

					if ( glBaseLayer !== null ) {

						renderer.setRenderTargetFramebuffer( newRenderTarget, glBaseLayer.framebuffer );
						renderer.setRenderTarget( newRenderTarget );

					}

					let cameraXRNeedsUpdate = false;

					// check if it's necessary to rebuild cameraXR's camera list

					if ( views.length !== cameraXR.cameras.length ) {

						cameraXR.cameras.length = 0;
						cameraXRNeedsUpdate = true;

					}

					for ( let i = 0; i < views.length; i ++ ) {

						const view = views[ i ];

						let viewport = null;

						if ( glBaseLayer !== null ) {

							viewport = glBaseLayer.getViewport( view );

						} else {

							const glSubImage = glBinding.getViewSubImage( glProjLayer, view );
							viewport = glSubImage.viewport;

							// For side-by-side projection, we only produce a single texture for both eyes.
							if ( i === 0 ) {

								renderer.setRenderTargetTextures(
									newRenderTarget,
									glSubImage.colorTexture,
									glProjLayer.ignoreDepthValues ? undefined : glSubImage.depthStencilTexture );

								renderer.setRenderTarget( newRenderTarget );

							}

						}

						let camera = cameras[ i ];

						if ( camera === undefined ) {

							camera = new PerspectiveCamera();
							camera.layers.enable( i );
							camera.viewport = new Vector4();
							cameras[ i ] = camera;

						}

						camera.matrix.fromArray( view.transform.matrix );
						camera.matrix.decompose( camera.position, camera.quaternion, camera.scale );
						camera.projectionMatrix.fromArray( view.projectionMatrix );
						camera.projectionMatrixInverse.copy( camera.projectionMatrix ).invert();
						camera.viewport.set( viewport.x, viewport.y, viewport.width, viewport.height );

						if ( i === 0 ) {

							cameraXR.matrix.copy( camera.matrix );
							cameraXR.matrix.decompose( cameraXR.position, cameraXR.quaternion, cameraXR.scale );

						}

						if ( cameraXRNeedsUpdate === true ) {

							cameraXR.cameras.push( camera );

						}

					}

				}

				//

				for ( let i = 0; i < controllers.length; i ++ ) {

					const inputSource = controllerInputSources[ i ];
					const controller = controllers[ i ];

					if ( inputSource !== null && controller !== undefined ) {

						controller.update( inputSource, frame, customReferenceSpace || referenceSpace );

					}

				}

				if ( onAnimationFrameCallback ) onAnimationFrameCallback( time, frame );

				if ( frame.detectedPlanes ) {

					scope.dispatchEvent( { type: 'planesdetected', data: frame } );

				}

				xrFrame = null;

			}

			const animation = new WebGLAnimation();

			animation.setAnimationLoop( onAnimationFrame );

			this.setAnimationLoop = function ( callback ) {

				onAnimationFrameCallback = callback;

			};

			this.dispose = function () {};

		}

	}

	function WebGLMaterials( renderer, properties ) {

		function refreshTransformUniform( map, uniform ) {

			if ( map.matrixAutoUpdate === true ) {

				map.updateMatrix();

			}

			uniform.value.copy( map.matrix );

		}

		function refreshFogUniforms( uniforms, fog ) {

			fog.color.getRGB( uniforms.fogColor.value, getUnlitUniformColorSpace( renderer ) );

			if ( fog.isFog ) {

				uniforms.fogNear.value = fog.near;
				uniforms.fogFar.value = fog.far;

			} else if ( fog.isFogExp2 ) {

				uniforms.fogDensity.value = fog.density;

			}

		}

		function refreshMaterialUniforms( uniforms, material, pixelRatio, height, transmissionRenderTarget ) {

			if ( material.isMeshBasicMaterial ) {

				refreshUniformsCommon( uniforms, material );

			} else if ( material.isMeshLambertMaterial ) {

				refreshUniformsCommon( uniforms, material );

			} else if ( material.isMeshToonMaterial ) {

				refreshUniformsCommon( uniforms, material );
				refreshUniformsToon( uniforms, material );

			} else if ( material.isMeshPhongMaterial ) {

				refreshUniformsCommon( uniforms, material );
				refreshUniformsPhong( uniforms, material );

			} else if ( material.isMeshStandardMaterial ) {

				refreshUniformsCommon( uniforms, material );
				refreshUniformsStandard( uniforms, material );

				if ( material.isMeshPhysicalMaterial ) {

					refreshUniformsPhysical( uniforms, material, transmissionRenderTarget );

				}

			} else if ( material.isMeshMatcapMaterial ) {

				refreshUniformsCommon( uniforms, material );
				refreshUniformsMatcap( uniforms, material );

			} else if ( material.isMeshDepthMaterial ) {

				refreshUniformsCommon( uniforms, material );

			} else if ( material.isMeshDistanceMaterial ) {

				refreshUniformsCommon( uniforms, material );
				refreshUniformsDistance( uniforms, material );

			} else if ( material.isMeshNormalMaterial ) {

				refreshUniformsCommon( uniforms, material );

			} else if ( material.isLineBasicMaterial ) {

				refreshUniformsLine( uniforms, material );

				if ( material.isLineDashedMaterial ) {

					refreshUniformsDash( uniforms, material );

				}

			} else if ( material.isPointsMaterial ) {

				refreshUniformsPoints( uniforms, material, pixelRatio, height );

			} else if ( material.isSpriteMaterial ) {

				refreshUniformsSprites( uniforms, material );

			} else if ( material.isShadowMaterial ) {

				uniforms.color.value.copy( material.color );
				uniforms.opacity.value = material.opacity;

			} else if ( material.isShaderMaterial ) {

				material.uniformsNeedUpdate = false; // #15581

			}

		}

		function refreshUniformsCommon( uniforms, material ) {

			uniforms.opacity.value = material.opacity;

			if ( material.color ) {

				uniforms.diffuse.value.copy( material.color );

			}

			if ( material.emissive ) {

				uniforms.emissive.value.copy( material.emissive ).multiplyScalar( material.emissiveIntensity );

			}

			if ( material.map ) {

				uniforms.map.value = material.map;

				refreshTransformUniform( material.map, uniforms.mapTransform );

			}

			if ( material.alphaMap ) {

				uniforms.alphaMap.value = material.alphaMap;

				refreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );

			}

			if ( material.bumpMap ) {

				uniforms.bumpMap.value = material.bumpMap;

				refreshTransformUniform( material.bumpMap, uniforms.bumpMapTransform );

				uniforms.bumpScale.value = material.bumpScale;

				if ( material.side === BackSide ) {

					uniforms.bumpScale.value *= - 1;

				}

			}

			if ( material.normalMap ) {

				uniforms.normalMap.value = material.normalMap;

				refreshTransformUniform( material.normalMap, uniforms.normalMapTransform );

				uniforms.normalScale.value.copy( material.normalScale );

				if ( material.side === BackSide ) {

					uniforms.normalScale.value.negate();

				}

			}

			if ( material.displacementMap ) {

				uniforms.displacementMap.value = material.displacementMap;

				refreshTransformUniform( material.displacementMap, uniforms.displacementMapTransform );

				uniforms.displacementScale.value = material.displacementScale;
				uniforms.displacementBias.value = material.displacementBias;

			}

			if ( material.emissiveMap ) {

				uniforms.emissiveMap.value = material.emissiveMap;

				refreshTransformUniform( material.emissiveMap, uniforms.emissiveMapTransform );

			}

			if ( material.specularMap ) {

				uniforms.specularMap.value = material.specularMap;

				refreshTransformUniform( material.specularMap, uniforms.specularMapTransform );

			}

			if ( material.alphaTest > 0 ) {

				uniforms.alphaTest.value = material.alphaTest;

			}

			const envMap = properties.get( material ).envMap;

			if ( envMap ) {

				uniforms.envMap.value = envMap;

				uniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;

				uniforms.reflectivity.value = material.reflectivity;
				uniforms.ior.value = material.ior;
				uniforms.refractionRatio.value = material.refractionRatio;

			}

			if ( material.lightMap ) {

				uniforms.lightMap.value = material.lightMap;

				// artist-friendly light intensity scaling factor
				const scaleFactor = ( renderer._useLegacyLights === true ) ? Math.PI : 1;

				uniforms.lightMapIntensity.value = material.lightMapIntensity * scaleFactor;

				refreshTransformUniform( material.lightMap, uniforms.lightMapTransform );

			}

			if ( material.aoMap ) {

				uniforms.aoMap.value = material.aoMap;
				uniforms.aoMapIntensity.value = material.aoMapIntensity;

				refreshTransformUniform( material.aoMap, uniforms.aoMapTransform );

			}

		}

		function refreshUniformsLine( uniforms, material ) {

			uniforms.diffuse.value.copy( material.color );
			uniforms.opacity.value = material.opacity;

			if ( material.map ) {

				uniforms.map.value = material.map;

				refreshTransformUniform( material.map, uniforms.mapTransform );

			}

		}

		function refreshUniformsDash( uniforms, material ) {

			uniforms.dashSize.value = material.dashSize;
			uniforms.totalSize.value = material.dashSize + material.gapSize;
			uniforms.scale.value = material.scale;

		}

		function refreshUniformsPoints( uniforms, material, pixelRatio, height ) {

			uniforms.diffuse.value.copy( material.color );
			uniforms.opacity.value = material.opacity;
			uniforms.size.value = material.size * pixelRatio;
			uniforms.scale.value = height * 0.5;

			if ( material.map ) {

				uniforms.map.value = material.map;

				refreshTransformUniform( material.map, uniforms.uvTransform );

			}

			if ( material.alphaMap ) {

				uniforms.alphaMap.value = material.alphaMap;

				refreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );

			}

			if ( material.alphaTest > 0 ) {

				uniforms.alphaTest.value = material.alphaTest;

			}

		}

		function refreshUniformsSprites( uniforms, material ) {

			uniforms.diffuse.value.copy( material.color );
			uniforms.opacity.value = material.opacity;
			uniforms.rotation.value = material.rotation;

			if ( material.map ) {

				uniforms.map.value = material.map;

				refreshTransformUniform( material.map, uniforms.mapTransform );

			}

			if ( material.alphaMap ) {

				uniforms.alphaMap.value = material.alphaMap;

				refreshTransformUniform( material.alphaMap, uniforms.alphaMapTransform );

			}

			if ( material.alphaTest > 0 ) {

				uniforms.alphaTest.value = material.alphaTest;

			}

		}

		function refreshUniformsPhong( uniforms, material ) {

			uniforms.specular.value.copy( material.specular );
			uniforms.shininess.value = Math.max( material.shininess, 1e-4 ); // to prevent pow( 0.0, 0.0 )

		}

		function refreshUniformsToon( uniforms, material ) {

			if ( material.gradientMap ) {

				uniforms.gradientMap.value = material.gradientMap;

			}

		}

		function refreshUniformsStandard( uniforms, material ) {

			uniforms.metalness.value = material.metalness;

			if ( material.metalnessMap ) {

				uniforms.metalnessMap.value = material.metalnessMap;

				refreshTransformUniform( material.metalnessMap, uniforms.metalnessMapTransform );

			}

			uniforms.roughness.value = material.roughness;

			if ( material.roughnessMap ) {

				uniforms.roughnessMap.value = material.roughnessMap;

				refreshTransformUniform( material.roughnessMap, uniforms.roughnessMapTransform );

			}

			const envMap = properties.get( material ).envMap;

			if ( envMap ) {

				//uniforms.envMap.value = material.envMap; // part of uniforms common
				uniforms.envMapIntensity.value = material.envMapIntensity;

			}

		}

		function refreshUniformsPhysical( uniforms, material, transmissionRenderTarget ) {

			uniforms.ior.value = material.ior; // also part of uniforms common

			if ( material.sheen > 0 ) {

				uniforms.sheenColor.value.copy( material.sheenColor ).multiplyScalar( material.sheen );

				uniforms.sheenRoughness.value = material.sheenRoughness;

				if ( material.sheenColorMap ) {

					uniforms.sheenColorMap.value = material.sheenColorMap;

					refreshTransformUniform( material.sheenColorMap, uniforms.sheenColorMapTransform );

				}

				if ( material.sheenRoughnessMap ) {

					uniforms.sheenRoughnessMap.value = material.sheenRoughnessMap;

					refreshTransformUniform( material.sheenRoughnessMap, uniforms.sheenRoughnessMapTransform );

				}

			}

			if ( material.clearcoat > 0 ) {

				uniforms.clearcoat.value = material.clearcoat;
				uniforms.clearcoatRoughness.value = material.clearcoatRoughness;

				if ( material.clearcoatMap ) {

					uniforms.clearcoatMap.value = material.clearcoatMap;

					refreshTransformUniform( material.clearcoatMap, uniforms.clearcoatMapTransform );

				}

				if ( material.clearcoatRoughnessMap ) {

					uniforms.clearcoatRoughnessMap.value = material.clearcoatRoughnessMap;

					refreshTransformUniform( material.clearcoatRoughnessMap, uniforms.clearcoatRoughnessMapTransform );

				}

				if ( material.clearcoatNormalMap ) {

					uniforms.clearcoatNormalMap.value = material.clearcoatNormalMap;

					refreshTransformUniform( material.clearcoatNormalMap, uniforms.clearcoatNormalMapTransform );

					uniforms.clearcoatNormalScale.value.copy( material.clearcoatNormalScale );

					if ( material.side === BackSide ) {

						uniforms.clearcoatNormalScale.value.negate();

					}

				}

			}

			if ( material.iridescence > 0 ) {

				uniforms.iridescence.value = material.iridescence;
				uniforms.iridescenceIOR.value = material.iridescenceIOR;
				uniforms.iridescenceThicknessMinimum.value = material.iridescenceThicknessRange[ 0 ];
				uniforms.iridescenceThicknessMaximum.value = material.iridescenceThicknessRange[ 1 ];

				if ( material.iridescenceMap ) {

					uniforms.iridescenceMap.value = material.iridescenceMap;

					refreshTransformUniform( material.iridescenceMap, uniforms.iridescenceMapTransform );

				}

				if ( material.iridescenceThicknessMap ) {

					uniforms.iridescenceThicknessMap.value = material.iridescenceThicknessMap;

					refreshTransformUniform( material.iridescenceThicknessMap, uniforms.iridescenceThicknessMapTransform );

				}

			}

			if ( material.transmission > 0 ) {

				uniforms.transmission.value = material.transmission;
				uniforms.transmissionSamplerMap.value = transmissionRenderTarget.texture;
				uniforms.transmissionSamplerSize.value.set( transmissionRenderTarget.width, transmissionRenderTarget.height );

				if ( material.transmissionMap ) {

					uniforms.transmissionMap.value = material.transmissionMap;

					refreshTransformUniform( material.transmissionMap, uniforms.transmissionMapTransform );

				}

				uniforms.thickness.value = material.thickness;

				if ( material.thicknessMap ) {

					uniforms.thicknessMap.value = material.thicknessMap;

					refreshTransformUniform( material.thicknessMap, uniforms.thicknessMapTransform );

				}

				uniforms.attenuationDistance.value = material.attenuationDistance;
				uniforms.attenuationColor.value.copy( material.attenuationColor );

			}

			if ( material.anisotropy > 0 ) {

				uniforms.anisotropyVector.value.set( material.anisotropy * Math.cos( material.anisotropyRotation ), material.anisotropy * Math.sin( material.anisotropyRotation ) );

				if ( material.anisotropyMap ) {

					uniforms.anisotropyMap.value = material.anisotropyMap;

					refreshTransformUniform( material.anisotropyMap, uniforms.anisotropyMapTransform );

				}

			}

			uniforms.specularIntensity.value = material.specularIntensity;
			uniforms.specularColor.value.copy( material.specularColor );

			if ( material.specularColorMap ) {

				uniforms.specularColorMap.value = material.specularColorMap;

				refreshTransformUniform( material.specularColorMap, uniforms.specularColorMapTransform );

			}

			if ( material.specularIntensityMap ) {

				uniforms.specularIntensityMap.value = material.specularIntensityMap;

				refreshTransformUniform( material.specularIntensityMap, uniforms.specularIntensityMapTransform );

			}

		}

		function refreshUniformsMatcap( uniforms, material ) {

			if ( material.matcap ) {

				uniforms.matcap.value = material.matcap;

			}

		}

		function refreshUniformsDistance( uniforms, material ) {

			const light = properties.get( material ).light;

			uniforms.referencePosition.value.setFromMatrixPosition( light.matrixWorld );
			uniforms.nearDistance.value = light.shadow.camera.near;
			uniforms.farDistance.value = light.shadow.camera.far;

		}

		return {
			refreshFogUniforms: refreshFogUniforms,
			refreshMaterialUniforms: refreshMaterialUniforms
		};

	}

	function WebGLUniformsGroups( gl, info, capabilities, state ) {

		let buffers = {};
		let updateList = {};
		let allocatedBindingPoints = [];

		const maxBindingPoints = ( capabilities.isWebGL2 ) ? gl.getParameter( gl.MAX_UNIFORM_BUFFER_BINDINGS ) : 0; // binding points are global whereas block indices are per shader program

		function bind( uniformsGroup, program ) {

			const webglProgram = program.program;
			state.uniformBlockBinding( uniformsGroup, webglProgram );

		}

		function update( uniformsGroup, program ) {

			let buffer = buffers[ uniformsGroup.id ];

			if ( buffer === undefined ) {

				prepareUniformsGroup( uniformsGroup );

				buffer = createBuffer( uniformsGroup );
				buffers[ uniformsGroup.id ] = buffer;

				uniformsGroup.addEventListener( 'dispose', onUniformsGroupsDispose );

			}

			// ensure to update the binding points/block indices mapping for this program

			const webglProgram = program.program;
			state.updateUBOMapping( uniformsGroup, webglProgram );

			// update UBO once per frame

			const frame = info.render.frame;

			if ( updateList[ uniformsGroup.id ] !== frame ) {

				updateBufferData( uniformsGroup );

				updateList[ uniformsGroup.id ] = frame;

			}

		}

		function createBuffer( uniformsGroup ) {

			// the setup of an UBO is independent of a particular shader program but global

			const bindingPointIndex = allocateBindingPointIndex();
			uniformsGroup.__bindingPointIndex = bindingPointIndex;

			const buffer = gl.createBuffer();
			const size = uniformsGroup.__size;
			const usage = uniformsGroup.usage;

			gl.bindBuffer( gl.UNIFORM_BUFFER, buffer );
			gl.bufferData( gl.UNIFORM_BUFFER, size, usage );
			gl.bindBuffer( gl.UNIFORM_BUFFER, null );
			gl.bindBufferBase( gl.UNIFORM_BUFFER, bindingPointIndex, buffer );

			return buffer;

		}

		function allocateBindingPointIndex() {

			for ( let i = 0; i < maxBindingPoints; i ++ ) {

				if ( allocatedBindingPoints.indexOf( i ) === - 1 ) {

					allocatedBindingPoints.push( i );
					return i;

				}

			}

			console.error( 'THREE.WebGLRenderer: Maximum number of simultaneously usable uniforms groups reached.' );

			return 0;

		}

		function updateBufferData( uniformsGroup ) {

			const buffer = buffers[ uniformsGroup.id ];
			const uniforms = uniformsGroup.uniforms;
			const cache = uniformsGroup.__cache;

			gl.bindBuffer( gl.UNIFORM_BUFFER, buffer );

			for ( let i = 0, il = uniforms.length; i < il; i ++ ) {

				const uniform = uniforms[ i ];

				// partly update the buffer if necessary

				if ( hasUniformChanged( uniform, i, cache ) === true ) {

					const offset = uniform.__offset;

					const values = Array.isArray( uniform.value ) ? uniform.value : [ uniform.value ];

					let arrayOffset = 0;

					for ( let i = 0; i < values.length; i ++ ) {

						const value = values[ i ];

						const info = getUniformSize( value );

						if ( typeof value === 'number' ) {

							uniform.__data[ 0 ] = value;
							gl.bufferSubData( gl.UNIFORM_BUFFER, offset + arrayOffset, uniform.__data );

						} else if ( value.isMatrix3 ) {

							// manually converting 3x3 to 3x4

							uniform.__data[ 0 ] = value.elements[ 0 ];
							uniform.__data[ 1 ] = value.elements[ 1 ];
							uniform.__data[ 2 ] = value.elements[ 2 ];
							uniform.__data[ 3 ] = value.elements[ 0 ];
							uniform.__data[ 4 ] = value.elements[ 3 ];
							uniform.__data[ 5 ] = value.elements[ 4 ];
							uniform.__data[ 6 ] = value.elements[ 5 ];
							uniform.__data[ 7 ] = value.elements[ 0 ];
							uniform.__data[ 8 ] = value.elements[ 6 ];
							uniform.__data[ 9 ] = value.elements[ 7 ];
							uniform.__data[ 10 ] = value.elements[ 8 ];
							uniform.__data[ 11 ] = value.elements[ 0 ];

						} else {

							value.toArray( uniform.__data, arrayOffset );

							arrayOffset += info.storage / Float32Array.BYTES_PER_ELEMENT;

						}

					}

					gl.bufferSubData( gl.UNIFORM_BUFFER, offset, uniform.__data );

				}

			}

			gl.bindBuffer( gl.UNIFORM_BUFFER, null );

		}

		function hasUniformChanged( uniform, index, cache ) {

			const value = uniform.value;

			if ( cache[ index ] === undefined ) {

				// cache entry does not exist so far

				if ( typeof value === 'number' ) {

					cache[ index ] = value;

				} else {

					const values = Array.isArray( value ) ? value : [ value ];

					const tempValues = [];

					for ( let i = 0; i < values.length; i ++ ) {

						tempValues.push( values[ i ].clone() );

					}

					cache[ index ] = tempValues;

				}

				return true;

			} else {

				// compare current value with cached entry

				if ( typeof value === 'number' ) {

					if ( cache[ index ] !== value ) {

						cache[ index ] = value;
						return true;

					}

				} else {

					const cachedObjects = Array.isArray( cache[ index ] ) ? cache[ index ] : [ cache[ index ] ];
					const values = Array.isArray( value ) ? value : [ value ];

					for ( let i = 0; i < cachedObjects.length; i ++ ) {

						const cachedObject = cachedObjects[ i ];

						if ( cachedObject.equals( values[ i ] ) === false ) {

							cachedObject.copy( values[ i ] );
							return true;

						}

					}

				}

			}

			return false;

		}

		function prepareUniformsGroup( uniformsGroup ) {

			// determine total buffer size according to the STD140 layout
			// Hint: STD140 is the only supported layout in WebGL 2

			const uniforms = uniformsGroup.uniforms;

			let offset = 0; // global buffer offset in bytes
			const chunkSize = 16; // size of a chunk in bytes
			let chunkOffset = 0; // offset within a single chunk in bytes

			for ( let i = 0, l = uniforms.length; i < l; i ++ ) {

				const uniform = uniforms[ i ];

				const infos = {
					boundary: 0, // bytes
					storage: 0 // bytes
				};

				const values = Array.isArray( uniform.value ) ? uniform.value : [ uniform.value ];

				for ( let j = 0, jl = values.length; j < jl; j ++ ) {

					const value = values[ j ];

					const info = getUniformSize( value );

					infos.boundary += info.boundary;
					infos.storage += info.storage;

				}

				// the following two properties will be used for partial buffer updates

				uniform.__data = new Float32Array( infos.storage / Float32Array.BYTES_PER_ELEMENT );
				uniform.__offset = offset;

				//

				if ( i > 0 ) {

					chunkOffset = offset % chunkSize;

					const remainingSizeInChunk = chunkSize - chunkOffset;

					// check for chunk overflow

					if ( chunkOffset !== 0 && ( remainingSizeInChunk - infos.boundary ) < 0 ) {

						// add padding and adjust offset

						offset += ( chunkSize - chunkOffset );
						uniform.__offset = offset;

					}

				}

				offset += infos.storage;

			}

			// ensure correct final padding

			chunkOffset = offset % chunkSize;

			if ( chunkOffset > 0 ) offset += ( chunkSize - chunkOffset );

			//

			uniformsGroup.__size = offset;
			uniformsGroup.__cache = {};

			return this;

		}

		function getUniformSize( value ) {

			const info = {
				boundary: 0, // bytes
				storage: 0 // bytes
			};

			// determine sizes according to STD140

			if ( typeof value === 'number' ) {

				// float/int

				info.boundary = 4;
				info.storage = 4;

			} else if ( value.isVector2 ) {

				// vec2

				info.boundary = 8;
				info.storage = 8;

			} else if ( value.isVector3 || value.isColor ) {

				// vec3

				info.boundary = 16;
				info.storage = 12; // evil: vec3 must start on a 16-byte boundary but it only consumes 12 bytes

			} else if ( value.isVector4 ) {

				// vec4

				info.boundary = 16;
				info.storage = 16;

			} else if ( value.isMatrix3 ) {

				// mat3 (in STD140 a 3x3 matrix is represented as 3x4)

				info.boundary = 48;
				info.storage = 48;

			} else if ( value.isMatrix4 ) {

				// mat4

				info.boundary = 64;
				info.storage = 64;

			} else if ( value.isTexture ) {

				console.warn( 'THREE.WebGLRenderer: Texture samplers can not be part of an uniforms group.' );

			} else {

				console.warn( 'THREE.WebGLRenderer: Unsupported uniform value type.', value );

			}

			return info;

		}

		function onUniformsGroupsDispose( event ) {

			const uniformsGroup = event.target;

			uniformsGroup.removeEventListener( 'dispose', onUniformsGroupsDispose );

			const index = allocatedBindingPoints.indexOf( uniformsGroup.__bindingPointIndex );
			allocatedBindingPoints.splice( index, 1 );

			gl.deleteBuffer( buffers[ uniformsGroup.id ] );

			delete buffers[ uniformsGroup.id ];
			delete updateList[ uniformsGroup.id ];

		}

		function dispose() {

			for ( const id in buffers ) {

				gl.deleteBuffer( buffers[ id ] );

			}

			allocatedBindingPoints = [];
			buffers = {};
			updateList = {};

		}

		return {

			bind: bind,
			update: update,

			dispose: dispose

		};

	}

	class WebGLRenderer {

		constructor( parameters = {} ) {

			const {
				canvas = createCanvasElement(),
				context = null,
				depth = true,
				stencil = true,
				alpha = false,
				antialias = false,
				premultipliedAlpha = true,
				preserveDrawingBuffer = false,
				powerPreference = 'default',
				failIfMajorPerformanceCaveat = false,
			} = parameters;

			this.isWebGLRenderer = true;

			let _alpha;

			if ( context !== null ) {

				_alpha = context.getContextAttributes().alpha;

			} else {

				_alpha = alpha;

			}

			const uintClearColor = new Uint32Array( 4 );
			const intClearColor = new Int32Array( 4 );

			let currentRenderList = null;
			let currentRenderState = null;

			// render() can be called from within a callback triggered by another render.
			// We track this so that the nested render call gets its list and state isolated from the parent render call.

			const renderListStack = [];
			const renderStateStack = [];

			// public properties

			this.domElement = canvas;

			// Debug configuration container
			this.debug = {

				/**
				 * Enables error checking and reporting when shader programs are being compiled
				 * @type {boolean}
				 */
				checkShaderErrors: true,
				/**
				 * Callback for custom error reporting.
				 * @type {?Function}
				 */
				onShaderError: null
			};

			// clearing

			this.autoClear = true;
			this.autoClearColor = true;
			this.autoClearDepth = true;
			this.autoClearStencil = true;

			// scene graph

			this.sortObjects = true;

			// user-defined clipping

			this.clippingPlanes = [];
			this.localClippingEnabled = false;

			// physically based shading

			this.outputColorSpace = SRGBColorSpace;

			// physical lights

			this._useLegacyLights = false;

			// tone mapping

			this.toneMapping = NoToneMapping;
			this.toneMappingExposure = 1.0;

			// internal properties

			const _this = this;

			let _isContextLost = false;

			// internal state cache

			let _currentActiveCubeFace = 0;
			let _currentActiveMipmapLevel = 0;
			let _currentRenderTarget = null;
			let _currentMaterialId = - 1;

			let _currentCamera = null;

			const _currentViewport = new Vector4();
			const _currentScissor = new Vector4();
			let _currentScissorTest = null;

			const _currentClearColor = new Color( 0x000000 );
			let _currentClearAlpha = 0;

			//

			let _width = canvas.width;
			let _height = canvas.height;

			let _pixelRatio = 1;
			let _opaqueSort = null;
			let _transparentSort = null;

			const _viewport = new Vector4( 0, 0, _width, _height );
			const _scissor = new Vector4( 0, 0, _width, _height );
			let _scissorTest = false;

			// frustum

			const _frustum = new Frustum();

			// clipping

			let _clippingEnabled = false;
			let _localClippingEnabled = false;

			// transmission

			let _transmissionRenderTarget = null;

			// camera matrices cache

			const _projScreenMatrix = new Matrix4();

			const _vector2 = new Vector2();
			const _vector3 = new Vector3();

			const _emptyScene = { background: null, fog: null, environment: null, overrideMaterial: null, isScene: true };

			function getTargetPixelRatio() {

				return _currentRenderTarget === null ? _pixelRatio : 1;

			}

			// initialize

			let _gl = context;

			function getContext( contextNames, contextAttributes ) {

				for ( let i = 0; i < contextNames.length; i ++ ) {

					const contextName = contextNames[ i ];
					const context = canvas.getContext( contextName, contextAttributes );
					if ( context !== null ) return context;

				}

				return null;

			}

			try {

				const contextAttributes = {
					alpha: true,
					depth,
					stencil,
					antialias,
					premultipliedAlpha,
					preserveDrawingBuffer,
					powerPreference,
					failIfMajorPerformanceCaveat,
				};

				// OffscreenCanvas does not have setAttribute, see #22811
				if ( 'setAttribute' in canvas ) canvas.setAttribute( 'data-engine', `three.js r${REVISION}` );

				// event listeners must be registered before WebGL context is created, see #12753
				canvas.addEventListener( 'webglcontextlost', onContextLost, false );
				canvas.addEventListener( 'webglcontextrestored', onContextRestore, false );
				canvas.addEventListener( 'webglcontextcreationerror', onContextCreationError, false );

				if ( _gl === null ) {

					const contextNames = [ 'webgl2', 'webgl', 'experimental-webgl' ];

					if ( _this.isWebGL1Renderer === true ) {

						contextNames.shift();

					}

					_gl = getContext( contextNames, contextAttributes );

					if ( _gl === null ) {

						if ( getContext( contextNames ) ) {

							throw new Error( 'Error creating WebGL context with your selected attributes.' );

						} else {

							throw new Error( 'Error creating WebGL context.' );

						}

					}

				}

				if ( typeof WebGLRenderingContext !== 'undefined' && _gl instanceof WebGLRenderingContext ) { // @deprecated, r153

					console.warn( 'THREE.WebGLRenderer: WebGL 1 support was deprecated in r153 and will be removed in r163.' );

				}

				// Some experimental-webgl implementations do not have getShaderPrecisionFormat

				if ( _gl.getShaderPrecisionFormat === undefined ) {

					_gl.getShaderPrecisionFormat = function () {

						return { 'rangeMin': 1, 'rangeMax': 1, 'precision': 1 };

					};

				}

			} catch ( error ) {

				console.error( 'THREE.WebGLRenderer: ' + error.message );
				throw error;

			}

			let extensions, capabilities, state, info;
			let properties, textures, cubemaps, cubeuvmaps, attributes, geometries, objects;
			let programCache, materials, renderLists, renderStates, clipping, shadowMap;

			let background, morphtargets, bufferRenderer, indexedBufferRenderer;

			let utils, bindingStates, uniformsGroups;

			function initGLContext() {

				extensions = new WebGLExtensions( _gl );

				capabilities = new WebGLCapabilities( _gl, extensions, parameters );

				extensions.init( capabilities );

				utils = new WebGLUtils( _gl, extensions, capabilities );

				state = new WebGLState( _gl, extensions, capabilities );

				info = new WebGLInfo( _gl );
				properties = new WebGLProperties();
				textures = new WebGLTextures( _gl, extensions, state, properties, capabilities, utils, info );
				cubemaps = new WebGLCubeMaps( _this );
				cubeuvmaps = new WebGLCubeUVMaps( _this );
				attributes = new WebGLAttributes( _gl, capabilities );
				bindingStates = new WebGLBindingStates( _gl, extensions, attributes, capabilities );
				geometries = new WebGLGeometries( _gl, attributes, info, bindingStates );
				objects = new WebGLObjects( _gl, geometries, attributes, info );
				morphtargets = new WebGLMorphtargets( _gl, capabilities, textures );
				clipping = new WebGLClipping( properties );
				programCache = new WebGLPrograms( _this, cubemaps, cubeuvmaps, extensions, capabilities, bindingStates, clipping );
				materials = new WebGLMaterials( _this, properties );
				renderLists = new WebGLRenderLists();
				renderStates = new WebGLRenderStates( extensions, capabilities );
				background = new WebGLBackground( _this, cubemaps, cubeuvmaps, state, objects, _alpha, premultipliedAlpha );
				shadowMap = new WebGLShadowMap( _this, objects, capabilities );
				uniformsGroups = new WebGLUniformsGroups( _gl, info, capabilities, state );

				bufferRenderer = new WebGLBufferRenderer( _gl, extensions, info, capabilities );
				indexedBufferRenderer = new WebGLIndexedBufferRenderer( _gl, extensions, info, capabilities );

				info.programs = programCache.programs;

				_this.capabilities = capabilities;
				_this.extensions = extensions;
				_this.properties = properties;
				_this.renderLists = renderLists;
				_this.shadowMap = shadowMap;
				_this.state = state;
				_this.info = info;

			}

			initGLContext();

			// xr

			const xr = new WebXRManager( _this, _gl );

			this.xr = xr;

			// API

			this.getContext = function () {

				return _gl;

			};

			this.getContextAttributes = function () {

				return _gl.getContextAttributes();

			};

			this.forceContextLoss = function () {

				const extension = extensions.get( 'WEBGL_lose_context' );
				if ( extension ) extension.loseContext();

			};

			this.forceContextRestore = function () {

				const extension = extensions.get( 'WEBGL_lose_context' );
				if ( extension ) extension.restoreContext();

			};

			this.getPixelRatio = function () {

				return _pixelRatio;

			};

			this.setPixelRatio = function ( value ) {

				if ( value === undefined ) return;

				_pixelRatio = value;

				this.setSize( _width, _height, false );

			};

			this.getSize = function ( target ) {

				return target.set( _width, _height );

			};

			this.setSize = function ( width, height, updateStyle = true ) {

				if ( xr.isPresenting ) {

					console.warn( 'THREE.WebGLRenderer: Can\'t change size while VR device is presenting.' );
					return;

				}

				_width = width;
				_height = height;

				canvas.width = Math.floor( width * _pixelRatio );
				canvas.height = Math.floor( height * _pixelRatio );

				if ( updateStyle === true ) {

					canvas.style.width = width + 'px';
					canvas.style.height = height + 'px';

				}

				this.setViewport( 0, 0, width, height );

			};

			this.getDrawingBufferSize = function ( target ) {

				return target.set( _width * _pixelRatio, _height * _pixelRatio ).floor();

			};

			this.setDrawingBufferSize = function ( width, height, pixelRatio ) {

				_width = width;
				_height = height;

				_pixelRatio = pixelRatio;

				canvas.width = Math.floor( width * pixelRatio );
				canvas.height = Math.floor( height * pixelRatio );

				this.setViewport( 0, 0, width, height );

			};

			this.getCurrentViewport = function ( target ) {

				return target.copy( _currentViewport );

			};

			this.getViewport = function ( target ) {

				return target.copy( _viewport );

			};

			this.setViewport = function ( x, y, width, height ) {

				if ( x.isVector4 ) {

					_viewport.set( x.x, x.y, x.z, x.w );

				} else {

					_viewport.set( x, y, width, height );

				}

				state.viewport( _currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor() );

			};

			this.getScissor = function ( target ) {

				return target.copy( _scissor );

			};

			this.setScissor = function ( x, y, width, height ) {

				if ( x.isVector4 ) {

					_scissor.set( x.x, x.y, x.z, x.w );

				} else {

					_scissor.set( x, y, width, height );

				}

				state.scissor( _currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor() );

			};

			this.getScissorTest = function () {

				return _scissorTest;

			};

			this.setScissorTest = function ( boolean ) {

				state.setScissorTest( _scissorTest = boolean );

			};

			this.setOpaqueSort = function ( method ) {

				_opaqueSort = method;

			};

			this.setTransparentSort = function ( method ) {

				_transparentSort = method;

			};

			// Clearing

			this.getClearColor = function ( target ) {

				return target.copy( background.getClearColor() );

			};

			this.setClearColor = function () {

				background.setClearColor.apply( background, arguments );

			};

			this.getClearAlpha = function () {

				return background.getClearAlpha();

			};

			this.setClearAlpha = function () {

				background.setClearAlpha.apply( background, arguments );

			};

			this.clear = function ( color = true, depth = true, stencil = true ) {

				let bits = 0;

				if ( color ) {

					// check if we're trying to clear an integer target
					let isIntegerFormat = false;
					if ( _currentRenderTarget !== null ) {

						const targetFormat = _currentRenderTarget.texture.format;
						isIntegerFormat = targetFormat === RGBAIntegerFormat ||
							targetFormat === RGIntegerFormat ||
							targetFormat === RedIntegerFormat;

					}

					// use the appropriate clear functions to clear the target if it's a signed
					// or unsigned integer target
					if ( isIntegerFormat ) {

						const targetType = _currentRenderTarget.texture.type;
						const isUnsignedType = targetType === UnsignedByteType ||
							targetType === UnsignedIntType ||
							targetType === UnsignedShortType ||
							targetType === UnsignedInt248Type ||
							targetType === UnsignedShort4444Type ||
							targetType === UnsignedShort5551Type;

						const clearColor = background.getClearColor();
						const a = background.getClearAlpha();
						const r = clearColor.r;
						const g = clearColor.g;
						const b = clearColor.b;

						if ( isUnsignedType ) {

							uintClearColor[ 0 ] = r;
							uintClearColor[ 1 ] = g;
							uintClearColor[ 2 ] = b;
							uintClearColor[ 3 ] = a;
							_gl.clearBufferuiv( _gl.COLOR, 0, uintClearColor );

						} else {

							intClearColor[ 0 ] = r;
							intClearColor[ 1 ] = g;
							intClearColor[ 2 ] = b;
							intClearColor[ 3 ] = a;
							_gl.clearBufferiv( _gl.COLOR, 0, intClearColor );

						}

					} else {

						bits |= _gl.COLOR_BUFFER_BIT;

					}

				}

				if ( depth ) bits |= _gl.DEPTH_BUFFER_BIT;
				if ( stencil ) bits |= _gl.STENCIL_BUFFER_BIT;

				_gl.clear( bits );

			};

			this.clearColor = function () {

				this.clear( true, false, false );

			};

			this.clearDepth = function () {

				this.clear( false, true, false );

			};

			this.clearStencil = function () {

				this.clear( false, false, true );

			};

			//

			this.dispose = function () {

				canvas.removeEventListener( 'webglcontextlost', onContextLost, false );
				canvas.removeEventListener( 'webglcontextrestored', onContextRestore, false );
				canvas.removeEventListener( 'webglcontextcreationerror', onContextCreationError, false );

				renderLists.dispose();
				renderStates.dispose();
				properties.dispose();
				cubemaps.dispose();
				cubeuvmaps.dispose();
				objects.dispose();
				bindingStates.dispose();
				uniformsGroups.dispose();
				programCache.dispose();

				xr.dispose();

				xr.removeEventListener( 'sessionstart', onXRSessionStart );
				xr.removeEventListener( 'sessionend', onXRSessionEnd );

				if ( _transmissionRenderTarget ) {

					_transmissionRenderTarget.dispose();
					_transmissionRenderTarget = null;

				}

				animation.stop();

			};

			// Events

			function onContextLost( event ) {

				event.preventDefault();

				console.log( 'THREE.WebGLRenderer: Context Lost.' );

				_isContextLost = true;

			}

			function onContextRestore( /* event */ ) {

				console.log( 'THREE.WebGLRenderer: Context Restored.' );

				_isContextLost = false;

				const infoAutoReset = info.autoReset;
				const shadowMapEnabled = shadowMap.enabled;
				const shadowMapAutoUpdate = shadowMap.autoUpdate;
				const shadowMapNeedsUpdate = shadowMap.needsUpdate;
				const shadowMapType = shadowMap.type;

				initGLContext();

				info.autoReset = infoAutoReset;
				shadowMap.enabled = shadowMapEnabled;
				shadowMap.autoUpdate = shadowMapAutoUpdate;
				shadowMap.needsUpdate = shadowMapNeedsUpdate;
				shadowMap.type = shadowMapType;

			}

			function onContextCreationError( event ) {

				console.error( 'THREE.WebGLRenderer: A WebGL context could not be created. Reason: ', event.statusMessage );

			}

			function onMaterialDispose( event ) {

				const material = event.target;

				material.removeEventListener( 'dispose', onMaterialDispose );

				deallocateMaterial( material );

			}

			// Buffer deallocation

			function deallocateMaterial( material ) {

				releaseMaterialProgramReferences( material );

				properties.remove( material );

			}


			function releaseMaterialProgramReferences( material ) {

				const programs = properties.get( material ).programs;

				if ( programs !== undefined ) {

					programs.forEach( function ( program ) {

						programCache.releaseProgram( program );

					} );

					if ( material.isShaderMaterial ) {

						programCache.releaseShaderCache( material );

					}

				}

			}

			// Buffer rendering

			this.renderBufferDirect = function ( camera, scene, geometry, material, object, group ) {

				if ( scene === null ) scene = _emptyScene; // renderBufferDirect second parameter used to be fog (could be null)

				const frontFaceCW = ( object.isMesh && object.matrixWorld.determinant() < 0 );

				const program = setProgram( camera, scene, geometry, material, object );

				state.setMaterial( material, frontFaceCW );

				//

				let index = geometry.index;
				let rangeFactor = 1;

				if ( material.wireframe === true ) {

					index = geometries.getWireframeAttribute( geometry );

					if ( index === undefined ) return;

					rangeFactor = 2;

				}

				//

				const drawRange = geometry.drawRange;
				const position = geometry.attributes.position;

				let drawStart = drawRange.start * rangeFactor;
				let drawEnd = ( drawRange.start + drawRange.count ) * rangeFactor;

				if ( group !== null ) {

					drawStart = Math.max( drawStart, group.start * rangeFactor );
					drawEnd = Math.min( drawEnd, ( group.start + group.count ) * rangeFactor );

				}

				if ( index !== null ) {

					drawStart = Math.max( drawStart, 0 );
					drawEnd = Math.min( drawEnd, index.count );

				} else if ( position !== undefined && position !== null ) {

					drawStart = Math.max( drawStart, 0 );
					drawEnd = Math.min( drawEnd, position.count );

				}

				const drawCount = drawEnd - drawStart;

				if ( drawCount < 0 || drawCount === Infinity ) return;

				//

				bindingStates.setup( object, material, program, geometry, index );

				let attribute;
				let renderer = bufferRenderer;

				if ( index !== null ) {

					attribute = attributes.get( index );

					renderer = indexedBufferRenderer;
					renderer.setIndex( attribute );

				}

				//

				if ( object.isMesh ) {

					if ( material.wireframe === true ) {

						state.setLineWidth( material.wireframeLinewidth * getTargetPixelRatio() );
						renderer.setMode( _gl.LINES );

					} else {

						renderer.setMode( _gl.TRIANGLES );

					}

				} else if ( object.isLine ) {

					let lineWidth = material.linewidth;

					if ( lineWidth === undefined ) lineWidth = 1; // Not using Line*Material

					state.setLineWidth( lineWidth * getTargetPixelRatio() );

					if ( object.isLineSegments ) {

						renderer.setMode( _gl.LINES );

					} else if ( object.isLineLoop ) {

						renderer.setMode( _gl.LINE_LOOP );

					} else {

						renderer.setMode( _gl.LINE_STRIP );

					}

				} else if ( object.isPoints ) {

					renderer.setMode( _gl.POINTS );

				} else if ( object.isSprite ) {

					renderer.setMode( _gl.TRIANGLES );

				}

				if ( object.isInstancedMesh ) {

					renderer.renderInstances( drawStart, drawCount, object.count );

				} else if ( geometry.isInstancedBufferGeometry ) {

					const maxInstanceCount = geometry._maxInstanceCount !== undefined ? geometry._maxInstanceCount : Infinity;
					const instanceCount = Math.min( geometry.instanceCount, maxInstanceCount );

					renderer.renderInstances( drawStart, drawCount, instanceCount );

				} else {

					renderer.render( drawStart, drawCount );

				}

			};

			// Compile

			this.compile = function ( scene, camera ) {

				function prepare( material, scene, object ) {

					if ( material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false ) {

						material.side = BackSide;
						material.needsUpdate = true;
						getProgram( material, scene, object );

						material.side = FrontSide;
						material.needsUpdate = true;
						getProgram( material, scene, object );

						material.side = DoubleSide;

					} else {

						getProgram( material, scene, object );

					}

				}

				currentRenderState = renderStates.get( scene );
				currentRenderState.init();

				renderStateStack.push( currentRenderState );

				scene.traverseVisible( function ( object ) {

					if ( object.isLight && object.layers.test( camera.layers ) ) {

						currentRenderState.pushLight( object );

						if ( object.castShadow ) {

							currentRenderState.pushShadow( object );

						}

					}

				} );

				currentRenderState.setupLights( _this._useLegacyLights );

				scene.traverse( function ( object ) {

					const material = object.material;

					if ( material ) {

						if ( Array.isArray( material ) ) {

							for ( let i = 0; i < material.length; i ++ ) {

								const material2 = material[ i ];

								prepare( material2, scene, object );

							}

						} else {

							prepare( material, scene, object );

						}

					}

				} );

				renderStateStack.pop();
				currentRenderState = null;

			};

			// Animation Loop

			let onAnimationFrameCallback = null;

			function onAnimationFrame( time ) {

				if ( onAnimationFrameCallback ) onAnimationFrameCallback( time );

			}

			function onXRSessionStart() {

				animation.stop();

			}

			function onXRSessionEnd() {

				animation.start();

			}

			const animation = new WebGLAnimation();
			animation.setAnimationLoop( onAnimationFrame );

			if ( typeof self !== 'undefined' ) animation.setContext( self );

			this.setAnimationLoop = function ( callback ) {

				onAnimationFrameCallback = callback;
				xr.setAnimationLoop( callback );

				( callback === null ) ? animation.stop() : animation.start();

			};

			xr.addEventListener( 'sessionstart', onXRSessionStart );
			xr.addEventListener( 'sessionend', onXRSessionEnd );

			// Rendering

			this.render = function ( scene, camera ) {

				if ( camera !== undefined && camera.isCamera !== true ) {

					console.error( 'THREE.WebGLRenderer.render: camera is not an instance of THREE.Camera.' );
					return;

				}

				if ( _isContextLost === true ) return;

				// update scene graph

				if ( scene.matrixWorldAutoUpdate === true ) scene.updateMatrixWorld();

				// update camera matrices and frustum

				if ( camera.parent === null && camera.matrixWorldAutoUpdate === true ) camera.updateMatrixWorld();

				if ( xr.enabled === true && xr.isPresenting === true ) {

					if ( xr.cameraAutoUpdate === true ) xr.updateCamera( camera );

					camera = xr.getCamera(); // use XR camera for rendering

				}

				//
				if ( scene.isScene === true ) scene.onBeforeRender( _this, scene, camera, _currentRenderTarget );

				currentRenderState = renderStates.get( scene, renderStateStack.length );
				currentRenderState.init();

				renderStateStack.push( currentRenderState );

				_projScreenMatrix.multiplyMatrices( camera.projectionMatrix, camera.matrixWorldInverse );
				_frustum.setFromProjectionMatrix( _projScreenMatrix );

				_localClippingEnabled = this.localClippingEnabled;
				_clippingEnabled = clipping.init( this.clippingPlanes, _localClippingEnabled );

				currentRenderList = renderLists.get( scene, renderListStack.length );
				currentRenderList.init();

				renderListStack.push( currentRenderList );

				projectObject( scene, camera, 0, _this.sortObjects );

				currentRenderList.finish();

				if ( _this.sortObjects === true ) {

					currentRenderList.sort( _opaqueSort, _transparentSort );

				}

				//

				this.info.render.frame ++;

				if ( _clippingEnabled === true ) clipping.beginShadows();

				const shadowsArray = currentRenderState.state.shadowsArray;

				shadowMap.render( shadowsArray, scene, camera );

				if ( _clippingEnabled === true ) clipping.endShadows();

				//

				if ( this.info.autoReset === true ) this.info.reset();


				//

				background.render( currentRenderList, scene );

				// render scene

				currentRenderState.setupLights( _this._useLegacyLights );

				if ( camera.isArrayCamera ) {

					const cameras = camera.cameras;

					for ( let i = 0, l = cameras.length; i < l; i ++ ) {

						const camera2 = cameras[ i ];

						renderScene( currentRenderList, scene, camera2, camera2.viewport );

					}

				} else {

					renderScene( currentRenderList, scene, camera );

				}

				//

				if ( _currentRenderTarget !== null ) {

					// resolve multisample renderbuffers to a single-sample texture if necessary

					textures.updateMultisampleRenderTarget( _currentRenderTarget );

					// Generate mipmap if we're using any kind of mipmap filtering

					textures.updateRenderTargetMipmap( _currentRenderTarget );

				}

				//

				if ( scene.isScene === true ) scene.onAfterRender( _this, scene, camera );

				// _gl.finish();

				bindingStates.resetDefaultState();
				_currentMaterialId = - 1;
				_currentCamera = null;

				renderStateStack.pop();

				if ( renderStateStack.length > 0 ) {

					currentRenderState = renderStateStack[ renderStateStack.length - 1 ];

				} else {

					currentRenderState = null;

				}

				renderListStack.pop();

				if ( renderListStack.length > 0 ) {

					currentRenderList = renderListStack[ renderListStack.length - 1 ];

				} else {

					currentRenderList = null;

				}

			};

			function projectObject( object, camera, groupOrder, sortObjects ) {

				if ( object.visible === false ) return;

				const visible = object.layers.test( camera.layers );

				if ( visible ) {

					if ( object.isGroup ) {

						groupOrder = object.renderOrder;

					} else if ( object.isLOD ) {

						if ( object.autoUpdate === true ) object.update( camera );

					} else if ( object.isLight ) {

						currentRenderState.pushLight( object );

						if ( object.castShadow ) {

							currentRenderState.pushShadow( object );

						}

					} else if ( object.isSprite ) {

						if ( ! object.frustumCulled || _frustum.intersectsSprite( object ) ) {

							if ( sortObjects ) {

								_vector3.setFromMatrixPosition( object.matrixWorld )
									.applyMatrix4( _projScreenMatrix );

							}

							const geometry = objects.update( object );
							const material = object.material;

							if ( material.visible ) {

								currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );

							}

						}

					} else if ( object.isMesh || object.isLine || object.isPoints ) {

						if ( ! object.frustumCulled || _frustum.intersectsObject( object ) ) {

							const geometry = objects.update( object );
							const material = object.material;

							if ( sortObjects ) {

								if ( object.boundingSphere !== undefined ) {

									if ( object.boundingSphere === null ) object.computeBoundingSphere();
									_vector3.copy( object.boundingSphere.center );

								} else {

									if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();
									_vector3.copy( geometry.boundingSphere.center );

								}

								_vector3
									.applyMatrix4( object.matrixWorld )
									.applyMatrix4( _projScreenMatrix );

							}

							if ( Array.isArray( material ) ) {

								const groups = geometry.groups;

								for ( let i = 0, l = groups.length; i < l; i ++ ) {

									const group = groups[ i ];
									const groupMaterial = material[ group.materialIndex ];

									if ( groupMaterial && groupMaterial.visible ) {

										currentRenderList.push( object, geometry, groupMaterial, groupOrder, _vector3.z, group );

									}

								}

							} else if ( material.visible ) {

								currentRenderList.push( object, geometry, material, groupOrder, _vector3.z, null );

							}

						}

					}

				}

				const children = object.children;

				for ( let i = 0, l = children.length; i < l; i ++ ) {

					projectObject( children[ i ], camera, groupOrder, sortObjects );

				}

			}

			function renderScene( currentRenderList, scene, camera, viewport ) {

				const opaqueObjects = currentRenderList.opaque;
				const transmissiveObjects = currentRenderList.transmissive;
				const transparentObjects = currentRenderList.transparent;

				currentRenderState.setupLightsView( camera );

				if ( _clippingEnabled === true ) clipping.setGlobalState( _this.clippingPlanes, camera );

				if ( transmissiveObjects.length > 0 ) renderTransmissionPass( opaqueObjects, transmissiveObjects, scene, camera );

				if ( viewport ) state.viewport( _currentViewport.copy( viewport ) );

				if ( opaqueObjects.length > 0 ) renderObjects( opaqueObjects, scene, camera );
				if ( transmissiveObjects.length > 0 ) renderObjects( transmissiveObjects, scene, camera );
				if ( transparentObjects.length > 0 ) renderObjects( transparentObjects, scene, camera );

				// Ensure depth buffer writing is enabled so it can be cleared on next render

				state.buffers.depth.setTest( true );
				state.buffers.depth.setMask( true );
				state.buffers.color.setMask( true );

				state.setPolygonOffset( false );

			}

			function renderTransmissionPass( opaqueObjects, transmissiveObjects, scene, camera ) {

				const isWebGL2 = capabilities.isWebGL2;

				if ( _transmissionRenderTarget === null ) {

					_transmissionRenderTarget = new WebGLRenderTarget( 1, 1, {
						generateMipmaps: true,
						type: extensions.has( 'EXT_color_buffer_half_float' ) ? HalfFloatType : UnsignedByteType,
						minFilter: LinearMipmapLinearFilter,
						samples: ( isWebGL2 ) ? 4 : 0
					} );

					// debug

					/*
					const geometry = new PlaneGeometry();
					const material = new MeshBasicMaterial( { map: _transmissionRenderTarget.texture } );

					const mesh = new Mesh( geometry, material );
					scene.add( mesh );
					*/

				}

				_this.getDrawingBufferSize( _vector2 );

				if ( isWebGL2 ) {

					_transmissionRenderTarget.setSize( _vector2.x, _vector2.y );

				} else {

					_transmissionRenderTarget.setSize( floorPowerOfTwo( _vector2.x ), floorPowerOfTwo( _vector2.y ) );

				}

				//

				const currentRenderTarget = _this.getRenderTarget();
				_this.setRenderTarget( _transmissionRenderTarget );

				_this.getClearColor( _currentClearColor );
				_currentClearAlpha = _this.getClearAlpha();
				if ( _currentClearAlpha < 1 ) _this.setClearColor( 0xffffff, 0.5 );

				_this.clear();

				// Turn off the features which can affect the frag color for opaque objects pass.
				// Otherwise they are applied twice in opaque objects pass and transmission objects pass.
				const currentToneMapping = _this.toneMapping;
				_this.toneMapping = NoToneMapping;

				renderObjects( opaqueObjects, scene, camera );

				textures.updateMultisampleRenderTarget( _transmissionRenderTarget );
				textures.updateRenderTargetMipmap( _transmissionRenderTarget );

				let renderTargetNeedsUpdate = false;

				for ( let i = 0, l = transmissiveObjects.length; i < l; i ++ ) {

					const renderItem = transmissiveObjects[ i ];

					const object = renderItem.object;
					const geometry = renderItem.geometry;
					const material = renderItem.material;
					const group = renderItem.group;

					if ( material.side === DoubleSide && object.layers.test( camera.layers ) ) {

						const currentSide = material.side;

						material.side = BackSide;
						material.needsUpdate = true;

						renderObject( object, scene, camera, geometry, material, group );

						material.side = currentSide;
						material.needsUpdate = true;

						renderTargetNeedsUpdate = true;

					}

				}

				if ( renderTargetNeedsUpdate === true ) {

					textures.updateMultisampleRenderTarget( _transmissionRenderTarget );
					textures.updateRenderTargetMipmap( _transmissionRenderTarget );

				}

				_this.setRenderTarget( currentRenderTarget );

				_this.setClearColor( _currentClearColor, _currentClearAlpha );

				_this.toneMapping = currentToneMapping;

			}

			function renderObjects( renderList, scene, camera ) {

				const overrideMaterial = scene.isScene === true ? scene.overrideMaterial : null;

				for ( let i = 0, l = renderList.length; i < l; i ++ ) {

					const renderItem = renderList[ i ];

					const object = renderItem.object;
					const geometry = renderItem.geometry;
					const material = overrideMaterial === null ? renderItem.material : overrideMaterial;
					const group = renderItem.group;

					if ( object.layers.test( camera.layers ) ) {

						renderObject( object, scene, camera, geometry, material, group );

					}

				}

			}

			function renderObject( object, scene, camera, geometry, material, group ) {

				object.onBeforeRender( _this, scene, camera, geometry, material, group );

				object.modelViewMatrix.multiplyMatrices( camera.matrixWorldInverse, object.matrixWorld );
				object.normalMatrix.getNormalMatrix( object.modelViewMatrix );

				material.onBeforeRender( _this, scene, camera, geometry, object, group );

				if ( material.transparent === true && material.side === DoubleSide && material.forceSinglePass === false ) {

					material.side = BackSide;
					material.needsUpdate = true;
					_this.renderBufferDirect( camera, scene, geometry, material, object, group );

					material.side = FrontSide;
					material.needsUpdate = true;
					_this.renderBufferDirect( camera, scene, geometry, material, object, group );

					material.side = DoubleSide;

				} else {

					_this.renderBufferDirect( camera, scene, geometry, material, object, group );

				}

				object.onAfterRender( _this, scene, camera, geometry, material, group );

			}

			function getProgram( material, scene, object ) {

				if ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...

				const materialProperties = properties.get( material );

				const lights = currentRenderState.state.lights;
				const shadowsArray = currentRenderState.state.shadowsArray;

				const lightsStateVersion = lights.state.version;

				const parameters = programCache.getParameters( material, lights.state, shadowsArray, scene, object );
				const programCacheKey = programCache.getProgramCacheKey( parameters );

				let programs = materialProperties.programs;

				// always update environment and fog - changing these trigger an getProgram call, but it's possible that the program doesn't change

				materialProperties.environment = material.isMeshStandardMaterial ? scene.environment : null;
				materialProperties.fog = scene.fog;
				materialProperties.envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || materialProperties.environment );

				if ( programs === undefined ) {

					// new material

					material.addEventListener( 'dispose', onMaterialDispose );

					programs = new Map();
					materialProperties.programs = programs;

				}

				let program = programs.get( programCacheKey );

				if ( program !== undefined ) {

					// early out if program and light state is identical

					if ( materialProperties.currentProgram === program && materialProperties.lightsStateVersion === lightsStateVersion ) {

						updateCommonMaterialProperties( material, parameters );

						return program;

					}

				} else {

					parameters.uniforms = programCache.getUniforms( material );

					material.onBuild( object, parameters, _this );

					material.onBeforeCompile( parameters, _this );

					program = programCache.acquireProgram( parameters, programCacheKey );
					programs.set( programCacheKey, program );

					materialProperties.uniforms = parameters.uniforms;

				}

				const uniforms = materialProperties.uniforms;

				if ( ( ! material.isShaderMaterial && ! material.isRawShaderMaterial ) || material.clipping === true ) {

					uniforms.clippingPlanes = clipping.uniform;

				}

				updateCommonMaterialProperties( material, parameters );

				// store the light setup it was created for

				materialProperties.needsLights = materialNeedsLights( material );
				materialProperties.lightsStateVersion = lightsStateVersion;

				if ( materialProperties.needsLights ) {

					// wire up the material to this renderer's lighting state

					uniforms.ambientLightColor.value = lights.state.ambient;
					uniforms.lightProbe.value = lights.state.probe;
					uniforms.directionalLights.value = lights.state.directional;
					uniforms.directionalLightShadows.value = lights.state.directionalShadow;
					uniforms.spotLights.value = lights.state.spot;
					uniforms.spotLightShadows.value = lights.state.spotShadow;
					uniforms.rectAreaLights.value = lights.state.rectArea;
					uniforms.ltc_1.value = lights.state.rectAreaLTC1;
					uniforms.ltc_2.value = lights.state.rectAreaLTC2;
					uniforms.pointLights.value = lights.state.point;
					uniforms.pointLightShadows.value = lights.state.pointShadow;
					uniforms.hemisphereLights.value = lights.state.hemi;

					uniforms.directionalShadowMap.value = lights.state.directionalShadowMap;
					uniforms.directionalShadowMatrix.value = lights.state.directionalShadowMatrix;
					uniforms.spotShadowMap.value = lights.state.spotShadowMap;
					uniforms.spotLightMatrix.value = lights.state.spotLightMatrix;
					uniforms.spotLightMap.value = lights.state.spotLightMap;
					uniforms.pointShadowMap.value = lights.state.pointShadowMap;
					uniforms.pointShadowMatrix.value = lights.state.pointShadowMatrix;
					// TODO (abelnation): add area lights shadow info to uniforms

				}

				const progUniforms = program.getUniforms();
				const uniformsList = WebGLUniforms.seqWithValue( progUniforms.seq, uniforms );

				materialProperties.currentProgram = program;
				materialProperties.uniformsList = uniformsList;

				return program;

			}

			function updateCommonMaterialProperties( material, parameters ) {

				const materialProperties = properties.get( material );

				materialProperties.outputColorSpace = parameters.outputColorSpace;
				materialProperties.instancing = parameters.instancing;
				materialProperties.instancingColor = parameters.instancingColor;
				materialProperties.skinning = parameters.skinning;
				materialProperties.morphTargets = parameters.morphTargets;
				materialProperties.morphNormals = parameters.morphNormals;
				materialProperties.morphColors = parameters.morphColors;
				materialProperties.morphTargetsCount = parameters.morphTargetsCount;
				materialProperties.numClippingPlanes = parameters.numClippingPlanes;
				materialProperties.numIntersection = parameters.numClipIntersection;
				materialProperties.vertexAlphas = parameters.vertexAlphas;
				materialProperties.vertexTangents = parameters.vertexTangents;
				materialProperties.toneMapping = parameters.toneMapping;

			}

			function setProgram( camera, scene, geometry, material, object ) {

				if ( scene.isScene !== true ) scene = _emptyScene; // scene could be a Mesh, Line, Points, ...

				textures.resetTextureUnits();

				const fog = scene.fog;
				const environment = material.isMeshStandardMaterial ? scene.environment : null;
				const colorSpace = ( _currentRenderTarget === null ) ? _this.outputColorSpace : ( _currentRenderTarget.isXRRenderTarget === true ? _currentRenderTarget.texture.colorSpace : LinearSRGBColorSpace );
				const envMap = ( material.isMeshStandardMaterial ? cubeuvmaps : cubemaps ).get( material.envMap || environment );
				const vertexAlphas = material.vertexColors === true && !! geometry.attributes.color && geometry.attributes.color.itemSize === 4;
				const vertexTangents = !! geometry.attributes.tangent && ( !! material.normalMap || material.anisotropy > 0 );
				const morphTargets = !! geometry.morphAttributes.position;
				const morphNormals = !! geometry.morphAttributes.normal;
				const morphColors = !! geometry.morphAttributes.color;

				let toneMapping = NoToneMapping;

				if ( material.toneMapped ) {

					if ( _currentRenderTarget === null || _currentRenderTarget.isXRRenderTarget === true ) {

						toneMapping = _this.toneMapping;

					}

				}

				const morphAttribute = geometry.morphAttributes.position || geometry.morphAttributes.normal || geometry.morphAttributes.color;
				const morphTargetsCount = ( morphAttribute !== undefined ) ? morphAttribute.length : 0;

				const materialProperties = properties.get( material );
				const lights = currentRenderState.state.lights;

				if ( _clippingEnabled === true ) {

					if ( _localClippingEnabled === true || camera !== _currentCamera ) {

						const useCache =
							camera === _currentCamera &&
							material.id === _currentMaterialId;

						// we might want to call this function with some ClippingGroup
						// object instead of the material, once it becomes feasible
						// (#8465, #8379)
						clipping.setState( material, camera, useCache );

					}

				}

				//

				let needsProgramChange = false;

				if ( material.version === materialProperties.__version ) {

					if ( materialProperties.needsLights && ( materialProperties.lightsStateVersion !== lights.state.version ) ) {

						needsProgramChange = true;

					} else if ( materialProperties.outputColorSpace !== colorSpace ) {

						needsProgramChange = true;

					} else if ( object.isInstancedMesh && materialProperties.instancing === false ) {

						needsProgramChange = true;

					} else if ( ! object.isInstancedMesh && materialProperties.instancing === true ) {

						needsProgramChange = true;

					} else if ( object.isSkinnedMesh && materialProperties.skinning === false ) {

						needsProgramChange = true;

					} else if ( ! object.isSkinnedMesh && materialProperties.skinning === true ) {

						needsProgramChange = true;

					} else if ( object.isInstancedMesh && materialProperties.instancingColor === true && object.instanceColor === null ) {

						needsProgramChange = true;

					} else if ( object.isInstancedMesh && materialProperties.instancingColor === false && object.instanceColor !== null ) {

						needsProgramChange = true;

					} else if ( materialProperties.envMap !== envMap ) {

						needsProgramChange = true;

					} else if ( material.fog === true && materialProperties.fog !== fog ) {

						needsProgramChange = true;

					} else if ( materialProperties.numClippingPlanes !== undefined &&
						( materialProperties.numClippingPlanes !== clipping.numPlanes ||
						materialProperties.numIntersection !== clipping.numIntersection ) ) {

						needsProgramChange = true;

					} else if ( materialProperties.vertexAlphas !== vertexAlphas ) {

						needsProgramChange = true;

					} else if ( materialProperties.vertexTangents !== vertexTangents ) {

						needsProgramChange = true;

					} else if ( materialProperties.morphTargets !== morphTargets ) {

						needsProgramChange = true;

					} else if ( materialProperties.morphNormals !== morphNormals ) {

						needsProgramChange = true;

					} else if ( materialProperties.morphColors !== morphColors ) {

						needsProgramChange = true;

					} else if ( materialProperties.toneMapping !== toneMapping ) {

						needsProgramChange = true;

					} else if ( capabilities.isWebGL2 === true && materialProperties.morphTargetsCount !== morphTargetsCount ) {

						needsProgramChange = true;

					}

				} else {

					needsProgramChange = true;
					materialProperties.__version = material.version;

				}

				//

				let program = materialProperties.currentProgram;

				if ( needsProgramChange === true ) {

					program = getProgram( material, scene, object );

				}

				let refreshProgram = false;
				let refreshMaterial = false;
				let refreshLights = false;

				const p_uniforms = program.getUniforms(),
					m_uniforms = materialProperties.uniforms;

				if ( state.useProgram( program.program ) ) {

					refreshProgram = true;
					refreshMaterial = true;
					refreshLights = true;

				}

				if ( material.id !== _currentMaterialId ) {

					_currentMaterialId = material.id;

					refreshMaterial = true;

				}

				if ( refreshProgram || _currentCamera !== camera ) {

					// common camera uniforms

					p_uniforms.setValue( _gl, 'projectionMatrix', camera.projectionMatrix );
					p_uniforms.setValue( _gl, 'viewMatrix', camera.matrixWorldInverse );

					const uCamPos = p_uniforms.map.cameraPosition;

					if ( uCamPos !== undefined ) {

						uCamPos.setValue( _gl, _vector3.setFromMatrixPosition( camera.matrixWorld ) );

					}

					if ( capabilities.logarithmicDepthBuffer ) {

						p_uniforms.setValue( _gl, 'logDepthBufFC',
							2.0 / ( Math.log( camera.far + 1.0 ) / Math.LN2 ) );

					}

					// consider moving isOrthographic to UniformLib and WebGLMaterials, see https://github.com/mrdoob/three.js/pull/26467#issuecomment-1645185067

					if ( material.isMeshPhongMaterial ||
						material.isMeshToonMaterial ||
						material.isMeshLambertMaterial ||
						material.isMeshBasicMaterial ||
						material.isMeshStandardMaterial ||
						material.isShaderMaterial ) {

						p_uniforms.setValue( _gl, 'isOrthographic', camera.isOrthographicCamera === true );

					}

					if ( _currentCamera !== camera ) {

						_currentCamera = camera;

						// lighting uniforms depend on the camera so enforce an update
						// now, in case this material supports lights - or later, when
						// the next material that does gets activated:

						refreshMaterial = true;		// set to true on material change
						refreshLights = true;		// remains set until update done

					}

				}

				// skinning and morph target uniforms must be set even if material didn't change
				// auto-setting of texture unit for bone and morph texture must go before other textures
				// otherwise textures used for skinning and morphing can take over texture units reserved for other material textures

				if ( object.isSkinnedMesh ) {

					p_uniforms.setOptional( _gl, object, 'bindMatrix' );
					p_uniforms.setOptional( _gl, object, 'bindMatrixInverse' );

					const skeleton = object.skeleton;

					if ( skeleton ) {

						if ( capabilities.floatVertexTextures ) {

							if ( skeleton.boneTexture === null ) skeleton.computeBoneTexture();

							p_uniforms.setValue( _gl, 'boneTexture', skeleton.boneTexture, textures );
							p_uniforms.setValue( _gl, 'boneTextureSize', skeleton.boneTextureSize );

						} else {

							console.warn( 'THREE.WebGLRenderer: SkinnedMesh can only be used with WebGL 2. With WebGL 1 OES_texture_float and vertex textures support is required.' );

						}

					}

				}

				const morphAttributes = geometry.morphAttributes;

				if ( morphAttributes.position !== undefined || morphAttributes.normal !== undefined || ( morphAttributes.color !== undefined && capabilities.isWebGL2 === true ) ) {

					morphtargets.update( object, geometry, program );

				}

				if ( refreshMaterial || materialProperties.receiveShadow !== object.receiveShadow ) {

					materialProperties.receiveShadow = object.receiveShadow;
					p_uniforms.setValue( _gl, 'receiveShadow', object.receiveShadow );

				}

				// https://github.com/mrdoob/three.js/pull/24467#issuecomment-1209031512

				if ( material.isMeshGouraudMaterial && material.envMap !== null ) {

					m_uniforms.envMap.value = envMap;

					m_uniforms.flipEnvMap.value = ( envMap.isCubeTexture && envMap.isRenderTargetTexture === false ) ? - 1 : 1;

				}

				if ( refreshMaterial ) {

					p_uniforms.setValue( _gl, 'toneMappingExposure', _this.toneMappingExposure );

					if ( materialProperties.needsLights ) {

						// the current material requires lighting info

						// note: all lighting uniforms are always set correctly
						// they simply reference the renderer's state for their
						// values
						//
						// use the current material's .needsUpdate flags to set
						// the GL state when required

						markUniformsLightsNeedsUpdate( m_uniforms, refreshLights );

					}

					// refresh uniforms common to several materials

					if ( fog && material.fog === true ) {

						materials.refreshFogUniforms( m_uniforms, fog );

					}

					materials.refreshMaterialUniforms( m_uniforms, material, _pixelRatio, _height, _transmissionRenderTarget );

					WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );

				}

				if ( material.isShaderMaterial && material.uniformsNeedUpdate === true ) {

					WebGLUniforms.upload( _gl, materialProperties.uniformsList, m_uniforms, textures );
					material.uniformsNeedUpdate = false;

				}

				if ( material.isSpriteMaterial ) {

					p_uniforms.setValue( _gl, 'center', object.center );

				}

				// common matrices

				p_uniforms.setValue( _gl, 'modelViewMatrix', object.modelViewMatrix );
				p_uniforms.setValue( _gl, 'normalMatrix', object.normalMatrix );
				p_uniforms.setValue( _gl, 'modelMatrix', object.matrixWorld );

				// UBOs

				if ( material.isShaderMaterial || material.isRawShaderMaterial ) {

					const groups = material.uniformsGroups;

					for ( let i = 0, l = groups.length; i < l; i ++ ) {

						if ( capabilities.isWebGL2 ) {

							const group = groups[ i ];

							uniformsGroups.update( group, program );
							uniformsGroups.bind( group, program );

						} else {

							console.warn( 'THREE.WebGLRenderer: Uniform Buffer Objects can only be used with WebGL 2.' );

						}

					}

				}

				return program;

			}

			// If uniforms are marked as clean, they don't need to be loaded to the GPU.

			function markUniformsLightsNeedsUpdate( uniforms, value ) {

				uniforms.ambientLightColor.needsUpdate = value;
				uniforms.lightProbe.needsUpdate = value;

				uniforms.directionalLights.needsUpdate = value;
				uniforms.directionalLightShadows.needsUpdate = value;
				uniforms.pointLights.needsUpdate = value;
				uniforms.pointLightShadows.needsUpdate = value;
				uniforms.spotLights.needsUpdate = value;
				uniforms.spotLightShadows.needsUpdate = value;
				uniforms.rectAreaLights.needsUpdate = value;
				uniforms.hemisphereLights.needsUpdate = value;

			}

			function materialNeedsLights( material ) {

				return material.isMeshLambertMaterial || material.isMeshToonMaterial || material.isMeshPhongMaterial ||
					material.isMeshStandardMaterial || material.isShadowMaterial ||
					( material.isShaderMaterial && material.lights === true );

			}

			this.getActiveCubeFace = function () {

				return _currentActiveCubeFace;

			};

			this.getActiveMipmapLevel = function () {

				return _currentActiveMipmapLevel;

			};

			this.getRenderTarget = function () {

				return _currentRenderTarget;

			};

			this.setRenderTargetTextures = function ( renderTarget, colorTexture, depthTexture ) {

				properties.get( renderTarget.texture ).__webglTexture = colorTexture;
				properties.get( renderTarget.depthTexture ).__webglTexture = depthTexture;

				const renderTargetProperties = properties.get( renderTarget );
				renderTargetProperties.__hasExternalTextures = true;

				if ( renderTargetProperties.__hasExternalTextures ) {

					renderTargetProperties.__autoAllocateDepthBuffer = depthTexture === undefined;

					if ( ! renderTargetProperties.__autoAllocateDepthBuffer ) {

						// The multisample_render_to_texture extension doesn't work properly if there
						// are midframe flushes and an external depth buffer. Disable use of the extension.
						if ( extensions.has( 'WEBGL_multisampled_render_to_texture' ) === true ) {

							console.warn( 'THREE.WebGLRenderer: Render-to-texture extension was disabled because an external texture was provided' );
							renderTargetProperties.__useRenderToTexture = false;

						}

					}

				}

			};

			this.setRenderTargetFramebuffer = function ( renderTarget, defaultFramebuffer ) {

				const renderTargetProperties = properties.get( renderTarget );
				renderTargetProperties.__webglFramebuffer = defaultFramebuffer;
				renderTargetProperties.__useDefaultFramebuffer = defaultFramebuffer === undefined;

			};

			this.setRenderTarget = function ( renderTarget, activeCubeFace = 0, activeMipmapLevel = 0 ) {

				_currentRenderTarget = renderTarget;
				_currentActiveCubeFace = activeCubeFace;
				_currentActiveMipmapLevel = activeMipmapLevel;

				let useDefaultFramebuffer = true;
				let framebuffer = null;
				let isCube = false;
				let isRenderTarget3D = false;

				if ( renderTarget ) {

					const renderTargetProperties = properties.get( renderTarget );

					if ( renderTargetProperties.__useDefaultFramebuffer !== undefined ) {

						// We need to make sure to rebind the framebuffer.
						state.bindFramebuffer( _gl.FRAMEBUFFER, null );
						useDefaultFramebuffer = false;

					} else if ( renderTargetProperties.__webglFramebuffer === undefined ) {

						textures.setupRenderTarget( renderTarget );

					} else if ( renderTargetProperties.__hasExternalTextures ) {

						// Color and depth texture must be rebound in order for the swapchain to update.
						textures.rebindTextures( renderTarget, properties.get( renderTarget.texture ).__webglTexture, properties.get( renderTarget.depthTexture ).__webglTexture );

					}

					const texture = renderTarget.texture;

					if ( texture.isData3DTexture || texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {

						isRenderTarget3D = true;

					}

					const __webglFramebuffer = properties.get( renderTarget ).__webglFramebuffer;

					if ( renderTarget.isWebGLCubeRenderTarget ) {

						if ( Array.isArray( __webglFramebuffer[ activeCubeFace ] ) ) {

							framebuffer = __webglFramebuffer[ activeCubeFace ][ activeMipmapLevel ];

						} else {

							framebuffer = __webglFramebuffer[ activeCubeFace ];

						}

						isCube = true;

					} else if ( ( capabilities.isWebGL2 && renderTarget.samples > 0 ) && textures.useMultisampledRTT( renderTarget ) === false ) {

						framebuffer = properties.get( renderTarget ).__webglMultisampledFramebuffer;

					} else {

						if ( Array.isArray( __webglFramebuffer ) ) {

							framebuffer = __webglFramebuffer[ activeMipmapLevel ];

						} else {

							framebuffer = __webglFramebuffer;

						}

					}

					_currentViewport.copy( renderTarget.viewport );
					_currentScissor.copy( renderTarget.scissor );
					_currentScissorTest = renderTarget.scissorTest;

				} else {

					_currentViewport.copy( _viewport ).multiplyScalar( _pixelRatio ).floor();
					_currentScissor.copy( _scissor ).multiplyScalar( _pixelRatio ).floor();
					_currentScissorTest = _scissorTest;

				}

				const framebufferBound = state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

				if ( framebufferBound && capabilities.drawBuffers && useDefaultFramebuffer ) {

					state.drawBuffers( renderTarget, framebuffer );

				}

				state.viewport( _currentViewport );
				state.scissor( _currentScissor );
				state.setScissorTest( _currentScissorTest );

				if ( isCube ) {

					const textureProperties = properties.get( renderTarget.texture );
					_gl.framebufferTexture2D( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, _gl.TEXTURE_CUBE_MAP_POSITIVE_X + activeCubeFace, textureProperties.__webglTexture, activeMipmapLevel );

				} else if ( isRenderTarget3D ) {

					const textureProperties = properties.get( renderTarget.texture );
					const layer = activeCubeFace || 0;
					_gl.framebufferTextureLayer( _gl.FRAMEBUFFER, _gl.COLOR_ATTACHMENT0, textureProperties.__webglTexture, activeMipmapLevel || 0, layer );

				}

				_currentMaterialId = - 1; // reset current material to ensure correct uniform bindings

			};

			this.readRenderTargetPixels = function ( renderTarget, x, y, width, height, buffer, activeCubeFaceIndex ) {

				if ( ! ( renderTarget && renderTarget.isWebGLRenderTarget ) ) {

					console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not THREE.WebGLRenderTarget.' );
					return;

				}

				let framebuffer = properties.get( renderTarget ).__webglFramebuffer;

				if ( renderTarget.isWebGLCubeRenderTarget && activeCubeFaceIndex !== undefined ) {

					framebuffer = framebuffer[ activeCubeFaceIndex ];

				}

				if ( framebuffer ) {

					state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

					try {

						const texture = renderTarget.texture;
						const textureFormat = texture.format;
						const textureType = texture.type;

						if ( textureFormat !== RGBAFormat && utils.convert( textureFormat ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_FORMAT ) ) {

							console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in RGBA or implementation defined format.' );
							return;

						}

						const halfFloatSupportedByExt = ( textureType === HalfFloatType ) && ( extensions.has( 'EXT_color_buffer_half_float' ) || ( capabilities.isWebGL2 && extensions.has( 'EXT_color_buffer_float' ) ) );

						if ( textureType !== UnsignedByteType && utils.convert( textureType ) !== _gl.getParameter( _gl.IMPLEMENTATION_COLOR_READ_TYPE ) && // Edge and Chrome Mac < 52 (#9513)
							! ( textureType === FloatType && ( capabilities.isWebGL2 || extensions.has( 'OES_texture_float' ) || extensions.has( 'WEBGL_color_buffer_float' ) ) ) && // Chrome Mac >= 52 and Firefox
							! halfFloatSupportedByExt ) {

							console.error( 'THREE.WebGLRenderer.readRenderTargetPixels: renderTarget is not in UnsignedByteType or implementation defined type.' );
							return;

						}

						// the following if statement ensures valid read requests (no out-of-bounds pixels, see #8604)

						if ( ( x >= 0 && x <= ( renderTarget.width - width ) ) && ( y >= 0 && y <= ( renderTarget.height - height ) ) ) {

							_gl.readPixels( x, y, width, height, utils.convert( textureFormat ), utils.convert( textureType ), buffer );

						}

					} finally {

						// restore framebuffer of current render target if necessary

						const framebuffer = ( _currentRenderTarget !== null ) ? properties.get( _currentRenderTarget ).__webglFramebuffer : null;
						state.bindFramebuffer( _gl.FRAMEBUFFER, framebuffer );

					}

				}

			};

			this.copyFramebufferToTexture = function ( position, texture, level = 0 ) {

				const levelScale = Math.pow( 2, - level );
				const width = Math.floor( texture.image.width * levelScale );
				const height = Math.floor( texture.image.height * levelScale );

				textures.setTexture2D( texture, 0 );

				_gl.copyTexSubImage2D( _gl.TEXTURE_2D, level, 0, 0, position.x, position.y, width, height );

				state.unbindTexture();

			};

			this.copyTextureToTexture = function ( position, srcTexture, dstTexture, level = 0 ) {

				const width = srcTexture.image.width;
				const height = srcTexture.image.height;
				const glFormat = utils.convert( dstTexture.format );
				const glType = utils.convert( dstTexture.type );

				textures.setTexture2D( dstTexture, 0 );

				// As another texture upload may have changed pixelStorei
				// parameters, make sure they are correct for the dstTexture
				_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY );
				_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha );
				_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment );

				if ( srcTexture.isDataTexture ) {

					_gl.texSubImage2D( _gl.TEXTURE_2D, level, position.x, position.y, width, height, glFormat, glType, srcTexture.image.data );

				} else {

					if ( srcTexture.isCompressedTexture ) {

						_gl.compressedTexSubImage2D( _gl.TEXTURE_2D, level, position.x, position.y, srcTexture.mipmaps[ 0 ].width, srcTexture.mipmaps[ 0 ].height, glFormat, srcTexture.mipmaps[ 0 ].data );

					} else {

						_gl.texSubImage2D( _gl.TEXTURE_2D, level, position.x, position.y, glFormat, glType, srcTexture.image );

					}

				}

				// Generate mipmaps only when copying level 0
				if ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( _gl.TEXTURE_2D );

				state.unbindTexture();

			};

			this.copyTextureToTexture3D = function ( sourceBox, position, srcTexture, dstTexture, level = 0 ) {

				if ( _this.isWebGL1Renderer ) {

					console.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: can only be used with WebGL2.' );
					return;

				}

				const width = sourceBox.max.x - sourceBox.min.x + 1;
				const height = sourceBox.max.y - sourceBox.min.y + 1;
				const depth = sourceBox.max.z - sourceBox.min.z + 1;
				const glFormat = utils.convert( dstTexture.format );
				const glType = utils.convert( dstTexture.type );
				let glTarget;

				if ( dstTexture.isData3DTexture ) {

					textures.setTexture3D( dstTexture, 0 );
					glTarget = _gl.TEXTURE_3D;

				} else if ( dstTexture.isDataArrayTexture ) {

					textures.setTexture2DArray( dstTexture, 0 );
					glTarget = _gl.TEXTURE_2D_ARRAY;

				} else {

					console.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: only supports THREE.DataTexture3D and THREE.DataTexture2DArray.' );
					return;

				}

				_gl.pixelStorei( _gl.UNPACK_FLIP_Y_WEBGL, dstTexture.flipY );
				_gl.pixelStorei( _gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, dstTexture.premultiplyAlpha );
				_gl.pixelStorei( _gl.UNPACK_ALIGNMENT, dstTexture.unpackAlignment );

				const unpackRowLen = _gl.getParameter( _gl.UNPACK_ROW_LENGTH );
				const unpackImageHeight = _gl.getParameter( _gl.UNPACK_IMAGE_HEIGHT );
				const unpackSkipPixels = _gl.getParameter( _gl.UNPACK_SKIP_PIXELS );
				const unpackSkipRows = _gl.getParameter( _gl.UNPACK_SKIP_ROWS );
				const unpackSkipImages = _gl.getParameter( _gl.UNPACK_SKIP_IMAGES );

				const image = srcTexture.isCompressedTexture ? srcTexture.mipmaps[ 0 ] : srcTexture.image;

				_gl.pixelStorei( _gl.UNPACK_ROW_LENGTH, image.width );
				_gl.pixelStorei( _gl.UNPACK_IMAGE_HEIGHT, image.height );
				_gl.pixelStorei( _gl.UNPACK_SKIP_PIXELS, sourceBox.min.x );
				_gl.pixelStorei( _gl.UNPACK_SKIP_ROWS, sourceBox.min.y );
				_gl.pixelStorei( _gl.UNPACK_SKIP_IMAGES, sourceBox.min.z );

				if ( srcTexture.isDataTexture || srcTexture.isData3DTexture ) {

					_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image.data );

				} else {

					if ( srcTexture.isCompressedArrayTexture ) {

						console.warn( 'THREE.WebGLRenderer.copyTextureToTexture3D: untested support for compressed srcTexture.' );
						_gl.compressedTexSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, image.data );

					} else {

						_gl.texSubImage3D( glTarget, level, position.x, position.y, position.z, width, height, depth, glFormat, glType, image );

					}

				}

				_gl.pixelStorei( _gl.UNPACK_ROW_LENGTH, unpackRowLen );
				_gl.pixelStorei( _gl.UNPACK_IMAGE_HEIGHT, unpackImageHeight );
				_gl.pixelStorei( _gl.UNPACK_SKIP_PIXELS, unpackSkipPixels );
				_gl.pixelStorei( _gl.UNPACK_SKIP_ROWS, unpackSkipRows );
				_gl.pixelStorei( _gl.UNPACK_SKIP_IMAGES, unpackSkipImages );

				// Generate mipmaps only when copying level 0
				if ( level === 0 && dstTexture.generateMipmaps ) _gl.generateMipmap( glTarget );

				state.unbindTexture();

			};

			this.initTexture = function ( texture ) {

				if ( texture.isCubeTexture ) {

					textures.setTextureCube( texture, 0 );

				} else if ( texture.isData3DTexture ) {

					textures.setTexture3D( texture, 0 );

				} else if ( texture.isDataArrayTexture || texture.isCompressedArrayTexture ) {

					textures.setTexture2DArray( texture, 0 );

				} else {

					textures.setTexture2D( texture, 0 );

				}

				state.unbindTexture();

			};

			this.resetState = function () {

				_currentActiveCubeFace = 0;
				_currentActiveMipmapLevel = 0;
				_currentRenderTarget = null;

				state.reset();
				bindingStates.reset();

			};

			if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

				__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );

			}

		}

		get coordinateSystem() {

			return WebGLCoordinateSystem;

		}

		get physicallyCorrectLights() { // @deprecated, r150

			console.warn( 'THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead.' );
			return ! this.useLegacyLights;

		}

		set physicallyCorrectLights( value ) { // @deprecated, r150

			console.warn( 'THREE.WebGLRenderer: The property .physicallyCorrectLights has been removed. Set renderer.useLegacyLights instead.' );
			this.useLegacyLights = ! value;

		}

		get outputEncoding() { // @deprecated, r152

			console.warn( 'THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead.' );
			return this.outputColorSpace === SRGBColorSpace ? sRGBEncoding : LinearEncoding;

		}

		set outputEncoding( encoding ) { // @deprecated, r152

			console.warn( 'THREE.WebGLRenderer: Property .outputEncoding has been removed. Use .outputColorSpace instead.' );
			this.outputColorSpace = encoding === sRGBEncoding ? SRGBColorSpace : LinearSRGBColorSpace;

		}

		get useLegacyLights() { // @deprecated, r155

			console.warn( 'THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733.' );
			return this._useLegacyLights;

		}

		set useLegacyLights( value ) { // @deprecated, r155

			console.warn( 'THREE.WebGLRenderer: The property .useLegacyLights has been deprecated. Migrate your lighting according to the following guide: https://discourse.threejs.org/t/updates-to-lighting-in-three-js-r155/53733.' );
			this._useLegacyLights = value;

		}

	}

	class WebGL1Renderer extends WebGLRenderer {}

	WebGL1Renderer.prototype.isWebGL1Renderer = true;

	class Scene extends Object3D {

		constructor() {

			super();

			this.isScene = true;

			this.type = 'Scene';

			this.background = null;
			this.environment = null;
			this.fog = null;

			this.backgroundBlurriness = 0;
			this.backgroundIntensity = 1;

			this.overrideMaterial = null;

			if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

				__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'observe', { detail: this } ) );

			}

		}

		copy( source, recursive ) {

			super.copy( source, recursive );

			if ( source.background !== null ) this.background = source.background.clone();
			if ( source.environment !== null ) this.environment = source.environment.clone();
			if ( source.fog !== null ) this.fog = source.fog.clone();

			this.backgroundBlurriness = source.backgroundBlurriness;
			this.backgroundIntensity = source.backgroundIntensity;

			if ( source.overrideMaterial !== null ) this.overrideMaterial = source.overrideMaterial.clone();

			this.matrixAutoUpdate = source.matrixAutoUpdate;

			return this;

		}

		toJSON( meta ) {

			const data = super.toJSON( meta );

			if ( this.fog !== null ) data.object.fog = this.fog.toJSON();
			if ( this.backgroundBlurriness > 0 ) data.object.backgroundBlurriness = this.backgroundBlurriness;
			if ( this.backgroundIntensity !== 1 ) data.object.backgroundIntensity = this.backgroundIntensity;

			return data;

		}

	}

	class LineBasicMaterial extends Material {

		constructor( parameters ) {

			super();

			this.isLineBasicMaterial = true;

			this.type = 'LineBasicMaterial';

			this.color = new Color( 0xffffff );

			this.map = null;

			this.linewidth = 1;
			this.linecap = 'round';
			this.linejoin = 'round';

			this.fog = true;

			this.setValues( parameters );

		}


		copy( source ) {

			super.copy( source );

			this.color.copy( source.color );

			this.map = source.map;

			this.linewidth = source.linewidth;
			this.linecap = source.linecap;
			this.linejoin = source.linejoin;

			this.fog = source.fog;

			return this;

		}

	}

	const _start$1 = /*@__PURE__*/ new Vector3();
	const _end$1 = /*@__PURE__*/ new Vector3();
	const _inverseMatrix$1 = /*@__PURE__*/ new Matrix4();
	const _ray$1 = /*@__PURE__*/ new Ray();
	const _sphere$1 = /*@__PURE__*/ new Sphere();

	class Line extends Object3D {

		constructor( geometry = new BufferGeometry(), material = new LineBasicMaterial() ) {

			super();

			this.isLine = true;

			this.type = 'Line';

			this.geometry = geometry;
			this.material = material;

			this.updateMorphTargets();

		}

		copy( source, recursive ) {

			super.copy( source, recursive );

			this.material = Array.isArray( source.material ) ? source.material.slice() : source.material;
			this.geometry = source.geometry;

			return this;

		}

		computeLineDistances() {

			const geometry = this.geometry;

			// we assume non-indexed geometry

			if ( geometry.index === null ) {

				const positionAttribute = geometry.attributes.position;
				const lineDistances = [ 0 ];

				for ( let i = 1, l = positionAttribute.count; i < l; i ++ ) {

					_start$1.fromBufferAttribute( positionAttribute, i - 1 );
					_end$1.fromBufferAttribute( positionAttribute, i );

					lineDistances[ i ] = lineDistances[ i - 1 ];
					lineDistances[ i ] += _start$1.distanceTo( _end$1 );

				}

				geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );

			} else {

				console.warn( 'THREE.Line.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );

			}

			return this;

		}

		raycast( raycaster, intersects ) {

			const geometry = this.geometry;
			const matrixWorld = this.matrixWorld;
			const threshold = raycaster.params.Line.threshold;
			const drawRange = geometry.drawRange;

			// Checking boundingSphere distance to ray

			if ( geometry.boundingSphere === null ) geometry.computeBoundingSphere();

			_sphere$1.copy( geometry.boundingSphere );
			_sphere$1.applyMatrix4( matrixWorld );
			_sphere$1.radius += threshold;

			if ( raycaster.ray.intersectsSphere( _sphere$1 ) === false ) return;

			//

			_inverseMatrix$1.copy( matrixWorld ).invert();
			_ray$1.copy( raycaster.ray ).applyMatrix4( _inverseMatrix$1 );

			const localThreshold = threshold / ( ( this.scale.x + this.scale.y + this.scale.z ) / 3 );
			const localThresholdSq = localThreshold * localThreshold;

			const vStart = new Vector3();
			const vEnd = new Vector3();
			const interSegment = new Vector3();
			const interRay = new Vector3();
			const step = this.isLineSegments ? 2 : 1;

			const index = geometry.index;
			const attributes = geometry.attributes;
			const positionAttribute = attributes.position;

			if ( index !== null ) {

				const start = Math.max( 0, drawRange.start );
				const end = Math.min( index.count, ( drawRange.start + drawRange.count ) );

				for ( let i = start, l = end - 1; i < l; i += step ) {

					const a = index.getX( i );
					const b = index.getX( i + 1 );

					vStart.fromBufferAttribute( positionAttribute, a );
					vEnd.fromBufferAttribute( positionAttribute, b );

					const distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

					if ( distSq > localThresholdSq ) continue;

					interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

					const distance = raycaster.ray.origin.distanceTo( interRay );

					if ( distance < raycaster.near || distance > raycaster.far ) continue;

					intersects.push( {

						distance: distance,
						// What do we want? intersection point on the ray or on the segment??
						// point: raycaster.ray.at( distance ),
						point: interSegment.clone().applyMatrix4( this.matrixWorld ),
						index: i,
						face: null,
						faceIndex: null,
						object: this

					} );

				}

			} else {

				const start = Math.max( 0, drawRange.start );
				const end = Math.min( positionAttribute.count, ( drawRange.start + drawRange.count ) );

				for ( let i = start, l = end - 1; i < l; i += step ) {

					vStart.fromBufferAttribute( positionAttribute, i );
					vEnd.fromBufferAttribute( positionAttribute, i + 1 );

					const distSq = _ray$1.distanceSqToSegment( vStart, vEnd, interRay, interSegment );

					if ( distSq > localThresholdSq ) continue;

					interRay.applyMatrix4( this.matrixWorld ); //Move back to world space for distance calculation

					const distance = raycaster.ray.origin.distanceTo( interRay );

					if ( distance < raycaster.near || distance > raycaster.far ) continue;

					intersects.push( {

						distance: distance,
						// What do we want? intersection point on the ray or on the segment??
						// point: raycaster.ray.at( distance ),
						point: interSegment.clone().applyMatrix4( this.matrixWorld ),
						index: i,
						face: null,
						faceIndex: null,
						object: this

					} );

				}

			}

		}

		updateMorphTargets() {

			const geometry = this.geometry;

			const morphAttributes = geometry.morphAttributes;
			const keys = Object.keys( morphAttributes );

			if ( keys.length > 0 ) {

				const morphAttribute = morphAttributes[ keys[ 0 ] ];

				if ( morphAttribute !== undefined ) {

					this.morphTargetInfluences = [];
					this.morphTargetDictionary = {};

					for ( let m = 0, ml = morphAttribute.length; m < ml; m ++ ) {

						const name = morphAttribute[ m ].name || String( m );

						this.morphTargetInfluences.push( 0 );
						this.morphTargetDictionary[ name ] = m;

					}

				}

			}

		}

	}

	const _start = /*@__PURE__*/ new Vector3();
	const _end = /*@__PURE__*/ new Vector3();

	class LineSegments extends Line {

		constructor( geometry, material ) {

			super( geometry, material );

			this.isLineSegments = true;

			this.type = 'LineSegments';

		}

		computeLineDistances() {

			const geometry = this.geometry;

			// we assume non-indexed geometry

			if ( geometry.index === null ) {

				const positionAttribute = geometry.attributes.position;
				const lineDistances = [];

				for ( let i = 0, l = positionAttribute.count; i < l; i += 2 ) {

					_start.fromBufferAttribute( positionAttribute, i );
					_end.fromBufferAttribute( positionAttribute, i + 1 );

					lineDistances[ i ] = ( i === 0 ) ? 0 : lineDistances[ i - 1 ];
					lineDistances[ i + 1 ] = lineDistances[ i ] + _start.distanceTo( _end );

				}

				geometry.setAttribute( 'lineDistance', new Float32BufferAttribute( lineDistances, 1 ) );

			} else {

				console.warn( 'THREE.LineSegments.computeLineDistances(): Computation only possible with non-indexed BufferGeometry.' );

			}

			return this;

		}

	}

	/**
	 * Ref: https://en.wikipedia.org/wiki/Spherical_coordinate_system
	 *
	 * The polar angle (phi) is measured from the positive y-axis. The positive y-axis is up.
	 * The azimuthal angle (theta) is measured from the positive z-axis.
	 */


	class Spherical {

		constructor( radius = 1, phi = 0, theta = 0 ) {

			this.radius = radius;
			this.phi = phi; // polar angle
			this.theta = theta; // azimuthal angle

			return this;

		}

		set( radius, phi, theta ) {

			this.radius = radius;
			this.phi = phi;
			this.theta = theta;

			return this;

		}

		copy( other ) {

			this.radius = other.radius;
			this.phi = other.phi;
			this.theta = other.theta;

			return this;

		}

		// restrict phi to be between EPS and PI-EPS
		makeSafe() {

			const EPS = 0.000001;
			this.phi = Math.max( EPS, Math.min( Math.PI - EPS, this.phi ) );

			return this;

		}

		setFromVector3( v ) {

			return this.setFromCartesianCoords( v.x, v.y, v.z );

		}

		setFromCartesianCoords( x, y, z ) {

			this.radius = Math.sqrt( x * x + y * y + z * z );

			if ( this.radius === 0 ) {

				this.theta = 0;
				this.phi = 0;

			} else {

				this.theta = Math.atan2( x, z );
				this.phi = Math.acos( clamp( y / this.radius, - 1, 1 ) );

			}

			return this;

		}

		clone() {

			return new this.constructor().copy( this );

		}

	}

	if ( typeof __THREE_DEVTOOLS__ !== 'undefined' ) {

		__THREE_DEVTOOLS__.dispatchEvent( new CustomEvent( 'register', { detail: {
			revision: REVISION,
		} } ) );

	}

	if ( typeof window !== 'undefined' ) {

		if ( window.__THREE__ ) {

			console.warn( 'WARNING: Multiple instances of Three.js being imported.' );

		} else {

			window.__THREE__ = REVISION;

		}

	}

	const SurfaceType = {
	  DEFAULT:                      0x0000, // Environment default
	  BURNING:                      0x0001, // Lava / Frostbite (in SL), but is used mostly for Lava
	  '0004':                       0x0004, // Unused, has no function and has parameters
	  HANGABLE:                     0x0005, // Ceiling that Mario can climb on
	  SLOW:                         0x0009, // Slow down Mario, unused
	  DEATH_PLANE:                  0x000A, // Death floor
	  CLOSE_CAMERA:                 0x000B, // Close camera
	  WATER:                        0x000D, // Water, has no action, used on some waterboxes below
	  FLOWING_WATER:                0x000E, // Water (flowing), has parameters
	  INTANGIBLE:                   0x0012, // Intangible (Separates BBH mansion from merry-go-round, for room usage)
	  VERY_SLIPPERY:                0x0013, // Very slippery, mostly used for slides
	  SLIPPERY:                     0x0014, // Slippery
	  NOT_SLIPPERY:                 0x0015, // Non-slippery, climbable
	  TTM_VINES:                    0x0016, // TTM vines, has no action defined
	  MGR_MUSIC:                    0x001A, // Plays the Merry go round music, see handle_merry_go_round_music in bbh_merry_go_round.inc.c for more details
	  INSTANT_WARP_1B:              0x001B, // Instant warp to another area, used to warp between areas in WDW and the endless stairs to warp back
	  INSTANT_WARP_1C:              0x001C, // Instant warp to another area, used to warp between areas in WDW
	  INSTANT_WARP_1D:              0x001D, // Instant warp to another area, used to warp between areas in DDD, SSL and TTM
	  INSTANT_WARP_1E:              0x001E, // Instant warp to another area, used to warp between areas in DDD, SSL and TTM
	  SHALLOW_QUICKSAND:            0x0021, // Shallow Quicksand (depth of 10 units)
	  DEEP_QUICKSAND:               0x0022, // Quicksand (lethal, slow, depth of 160 units)
	  INSTANT_QUICKSAND:            0x0023, // Quicksand (lethal, instant)
	  DEEP_MOVING_QUICKSAND:        0x0024, // Moving quicksand (flowing, depth of 160 units)
	  SHALLOW_MOVING_QUICKSAND:     0x0025, // Moving quicksand (flowing, depth of 25 units)
	  QUICKSAND:                    0x0026, // Moving quicksand (60 units)
	  MOVING_QUICKSAND:             0x0027, // Moving quicksand (flowing, depth of 60 units)
	  WALL_MISC:                    0x0028, // Used for some walls, Cannon to adjust the camera, and some objects like Warp Pipe
	  NOISE_DEFAULT:                0x0029, // Default floor with noise
	  NOISE_SLIPPERY:               0x002A, // Slippery floor with noise
	  HORIZONTAL_WIND:              0x002C, // Horizontal wind, has parameters
	  INSTANT_MOVING_QUICKSAND:     0x002D, // Quicksand (lethal, flowing)
	  ICE:                          0x002E, // Slippery Ice, in snow levels and THI's water floor
	  LOOK_UP_WARP:                 0x002F, // Look up and warp (Wing cap entrance)
	  HARD:                         0x0030, // Hard floor (Always has fall damage)
	  WARP:                         0x0032, // Surface warp
	  TIMER_START:                  0x0033, // Timer start (Peach's secret slide)
	  TIMER_END:                    0x0034, // Timer stop (Peach's secret slide)
	  HARD_SLIPPERY:                0x0035, // Hard and slippery (Always has fall damage)
	  HARD_VERY_SLIPPERY:           0x0036, // Hard and very slippery (Always has fall damage)
	  HARD_NOT_SLIPPERY:            0x0037, // Hard and Non-slippery (Always has fall damage)
	  VERTICAL_WIND:                0x0038, // Death at bottom with vertical wind
	  BOSS_FIGHT_CAMERA:            0x0065, // Wide camera for BoB and WF bosses
	  CAMERA_FREE_ROAM:             0x0066, // Free roam camera for THI and TTC
	  THI3_WALLKICK:                0x0068, // Surface where there's a wall kick section in THI 3rd area, has no action defined
	  CAMERA_8_DIR:                 0x0069, // Surface that enables far camera for platforms, used in THI
	  CAMERA_MIDDLE:                0x006E, // Surface camera that returns to the middle, used on the 4 pillars of SSL
	  CAMERA_ROTATE_RIGHT:          0x006F, // Surface camera that rotates to the right (Bowser 1 & THI)
	  CAMERA_ROTATE_LEFT:           0x0070, // Surface camera that rotates to the left (BoB & TTM)
	  CAMERA_BOUNDARY:              0x0072, // Intangible Area, only used to restrict camera movement
	  NOISE_VERY_SLIPPERY_73:       0x0073, // Very slippery floor with noise, unused
	  NOISE_VERY_SLIPPERY_74:       0x0074, // Very slippery floor with noise, unused
	  NOISE_VERY_SLIPPERY:          0x0075, // Very slippery floor with noise, used in CCM
	  NO_CAM_COLLISION:             0x0076, // Surface with no cam collision flag
	  NO_CAM_COLLISION_77:          0x0077, // Surface with no cam collision flag, unused
	  NO_CAM_COL_VERY_SLIPPERY:     0x0078, // Surface with no cam collision flag, very slippery with noise (THI)
	  NO_CAM_COL_SLIPPERY:          0x0079, // Surface with no cam collision flag, slippery with noise (CCM, PSS and TTM slides)
	  SWITCH:                       0x007A, // Surface with no cam collision flag, non-slippery with noise, used by switches and Dorrie
	  VANISH_CAP_WALLS:             0x007B, // Vanish cap walls, pass through them with Vanish Cap
	  PAINTING_WOBBLE_A6:           0x00A6, // Painting wobble (BoB Left)
	  PAINTING_WOBBLE_A7:           0x00A7, // Painting wobble (BoB Middle)
	  PAINTING_WOBBLE_A8:           0x00A8, // Painting wobble (BoB Right)
	  PAINTING_WOBBLE_A9:           0x00A9, // Painting wobble (CCM Left)
	  PAINTING_WOBBLE_AA:           0x00AA, // Painting wobble (CCM Middle)
	  PAINTING_WOBBLE_AB:           0x00AB, // Painting wobble (CCM Right)
	  PAINTING_WOBBLE_AC:           0x00AC, // Painting wobble (WF Left)
	  PAINTING_WOBBLE_AD:           0x00AD, // Painting wobble (WF Middle)
	  PAINTING_WOBBLE_AE:           0x00AE, // Painting wobble (WF Right)
	  PAINTING_WOBBLE_AF:           0x00AF, // Painting wobble (JRB Left)
	  PAINTING_WOBBLE_B0:           0x00B0, // Painting wobble (JRB Middle)
	  PAINTING_WOBBLE_B1:           0x00B1, // Painting wobble (JRB Right)
	  PAINTING_WOBBLE_B2:           0x00B2, // Painting wobble (LLL Left)
	  PAINTING_WOBBLE_B3:           0x00B3, // Painting wobble (LLL Middle)
	  PAINTING_WOBBLE_B4:           0x00B4, // Painting wobble (LLL Right)
	  PAINTING_WOBBLE_B5:           0x00B5, // Painting wobble (SSL Left)
	  PAINTING_WOBBLE_B6:           0x00B6, // Painting wobble (SSL Middle)
	  PAINTING_WOBBLE_B7:           0x00B7, // Painting wobble (SSL Right)
	  PAINTING_WOBBLE_B8:           0x00B8, // Painting wobble (Unused - Left)
	  PAINTING_WOBBLE_B9:           0x00B9, // Painting wobble (Unused - Middle)
	  PAINTING_WOBBLE_BA:           0x00BA, // Painting wobble (Unused - Right)
	  PAINTING_WOBBLE_BB:           0x00BB, // Painting wobble (DDD - Left), makes the painting wobble if touched
	  PAINTING_WOBBLE_BC:           0x00BC, // Painting wobble (Unused, DDD - Middle)
	  PAINTING_WOBBLE_BD:           0x00BD, // Painting wobble (Unused, DDD - Right)
	  PAINTING_WOBBLE_BE:           0x00BE, // Painting wobble (WDW Left)
	  PAINTING_WOBBLE_BF:           0x00BF, // Painting wobble (WDW Middle)
	  PAINTING_WOBBLE_C0:           0x00C0, // Painting wobble (WDW Right)
	  PAINTING_WOBBLE_C1:           0x00C1, // Painting wobble (THI Tiny - Left)
	  PAINTING_WOBBLE_C2:           0x00C2, // Painting wobble (THI Tiny - Middle)
	  PAINTING_WOBBLE_C3:           0x00C3, // Painting wobble (THI Tiny - Right)
	  PAINTING_WOBBLE_C4:           0x00C4, // Painting wobble (TTM Left)
	  PAINTING_WOBBLE_C5:           0x00C5, // Painting wobble (TTM Middle)
	  PAINTING_WOBBLE_C6:           0x00C6, // Painting wobble (TTM Right)
	  PAINTING_WOBBLE_C7:           0x00C7, // Painting wobble (Unused, TTC - Left)
	  PAINTING_WOBBLE_C8:           0x00C8, // Painting wobble (Unused, TTC - Middle)
	  PAINTING_WOBBLE_C9:           0x00C9, // Painting wobble (Unused, TTC - Right)
	  PAINTING_WOBBLE_CA:           0x00CA, // Painting wobble (Unused, SL - Left)
	  PAINTING_WOBBLE_CB:           0x00CB, // Painting wobble (Unused, SL - Middle)
	  PAINTING_WOBBLE_CC:           0x00CC, // Painting wobble (Unused, SL - Right)
	  PAINTING_WOBBLE_CD:           0x00CD, // Painting wobble (THI Huge - Left)
	  PAINTING_WOBBLE_CE:           0x00CE, // Painting wobble (THI Huge - Middle)
	  PAINTING_WOBBLE_CF:           0x00CF, // Painting wobble (THI Huge - Right)
	  PAINTING_WOBBLE_D0:           0x00D0, // Painting wobble (HMC & CotMC - Left), makes the painting wobble if touched
	  PAINTING_WOBBLE_D1:           0x00D1, // Painting wobble (Unused, HMC & CotMC - Middle)
	  PAINTING_WOBBLE_D2:           0x00D2, // Painting wobble (Unused, HMC & CotMC - Right)
	  PAINTING_WARP_D3:             0x00D3, // Painting warp (BoB Left)
	  PAINTING_WARP_D4:             0x00D4, // Painting warp (BoB Middle)
	  PAINTING_WARP_D5:             0x00D5, // Painting warp (BoB Right)
	  PAINTING_WARP_D6:             0x00D6, // Painting warp (CCM Left)
	  PAINTING_WARP_D7:             0x00D7, // Painting warp (CCM Middle)
	  PAINTING_WARP_D8:             0x00D8, // Painting warp (CCM Right)
	  PAINTING_WARP_D9:             0x00D9, // Painting warp (WF Left)
	  PAINTING_WARP_DA:             0x00DA, // Painting warp (WF Middle)
	  PAINTING_WARP_DB:             0x00DB, // Painting warp (WF Right)
	  PAINTING_WARP_DC:             0x00DC, // Painting warp (JRB Left)
	  PAINTING_WARP_DD:             0x00DD, // Painting warp (JRB Middle)
	  PAINTING_WARP_DE:             0x00DE, // Painting warp (JRB Right)
	  PAINTING_WARP_DF:             0x00DF, // Painting warp (LLL Left)
	  PAINTING_WARP_E0:             0x00E0, // Painting warp (LLL Middle)
	  PAINTING_WARP_E1:             0x00E1, // Painting warp (LLL Right)
	  PAINTING_WARP_E2:             0x00E2, // Painting warp (SSL Left)
	  PAINTING_WARP_E3:             0x00E3, // Painting warp (SSL Medium)
	  PAINTING_WARP_E4:             0x00E4, // Painting warp (SSL Right)
	  PAINTING_WARP_E5:             0x00E5, // Painting warp (Unused - Left)
	  PAINTING_WARP_E6:             0x00E6, // Painting warp (Unused - Medium)
	  PAINTING_WARP_E7:             0x00E7, // Painting warp (Unused - Right)
	  PAINTING_WARP_E8:             0x00E8, // Painting warp (DDD - Left)
	  PAINTING_WARP_E9:             0x00E9, // Painting warp (DDD - Middle)
	  PAINTING_WARP_EA:             0x00EA, // Painting warp (DDD - Right)
	  PAINTING_WARP_EB:             0x00EB, // Painting warp (WDW Left)
	  PAINTING_WARP_EC:             0x00EC, // Painting warp (WDW Middle)
	  PAINTING_WARP_ED:             0x00ED, // Painting warp (WDW Right)
	  PAINTING_WARP_EE:             0x00EE, // Painting warp (THI Tiny - Left)
	  PAINTING_WARP_EF:             0x00EF, // Painting warp (THI Tiny - Middle)
	  PAINTING_WARP_F0:             0x00F0, // Painting warp (THI Tiny - Right)
	  PAINTING_WARP_F1:             0x00F1, // Painting warp (TTM Left)
	  PAINTING_WARP_F2:             0x00F2, // Painting warp (TTM Middle)
	  PAINTING_WARP_F3:             0x00F3, // Painting warp (TTM Right)
	  TTC_PAINTING_1:               0x00F4, // Painting warp (TTC Left)
	  TTC_PAINTING_2:               0x00F5, // Painting warp (TTC Medium)
	  TTC_PAINTING_3:               0x00F6, // Painting warp (TTC Right)
	  PAINTING_WARP_F7:             0x00F7, // Painting warp (SL Left)
	  PAINTING_WARP_F8:             0x00F8, // Painting warp (SL Middle)
	  PAINTING_WARP_F9:             0x00F9, // Painting warp (SL Right)
	  PAINTING_WARP_FA:             0x00FA, // Painting warp (THI Tiny - Left)
	  PAINTING_WARP_FB:             0x00FB, // Painting warp (THI Tiny - Middle)
	  PAINTING_WARP_FC:             0x00FC, // Painting warp (THI Tiny - Right)
	  WOBBLING_WARP:                0x00FD, // Pool warp (HMC & DDD)
	  TRAPDOOR:                     0x00FF, // Bowser Left trapdoor, has no action defined
	};

	const global$1 = window;
	for (const name in SurfaceType) {
	  global$1['SURFACE_' + name] = SurfaceType[name];
	}

	const SurfaceColors = [
	  '#4d3595', '#8ef7ec', '#061683', '#876330', '#c09496', '#15efbc', '#8a200c', '#acbbbc', '#27c374', '#1cc303', '#a5b639', '#e6745c', '#ba0bcf', '#24a988', '#180b75', '#1fc438', '#d69245', '#51be5f', '#78ab1b', '#a2c3a1', '#6fcbad', '#e6dc2c', '#499b5f', '#d1ccca', '#be9b6c', '#77cdea', '#5f4c23', '#8920f1', '#e43014', '#b89ff5', '#80e6d7', '#b88659', '#9b6a8f', '#81b5c9', '#1c85b2', '#78f501', '#0e9ad4', '#fbc91f', '#9ca0e0', '#76c466', '#707e73', '#982767', '#2c96bd', '#872c42', '#46b9b9', '#80f6a4', '#5fcb91', '#862776', '#34feb3', '#b483dc', '#42195d', '#d6a3d6', '#c2da4e', '#5de400', '#041271', '#751fa6', '#aa4d6d', '#0210ab', '#818302', '#60b057', '#4462c5', '#51aefa', '#776324', '#975a97', '#61367d', '#323e69', '#2281b6', '#ec061d', '#e2eed6', '#cdba7d', '#94a649', '#824b83', '#6f31ba', '#881120', '#6b033b', '#838f20', '#42f983', '#48b870', '#77c6c8', '#645f44', '#1999d6', '#abf3f7', '#5deea7', '#26d4e1', '#0fa808', '#1d1a78', '#c6e8b7', '#4223bd', '#418055', '#dc813f', '#9a42a8', '#696286', '#1f5f0f', '#47611e', '#8bda47', '#5f768f', '#3ab549', '#adb543', '#e35b4c', '#2d05f6', '#b1faf2', '#6c00bf', '#f424d0', '#e83c58', '#03eb64', '#40e5f1', '#994baf', '#cbe3a0', '#4a66e6', '#5bb179', '#f7a219', '#6a0b57', '#c353a6', '#45a67d', '#8ad96a', '#e44ea0', '#61ea84', '#4b47ff', '#452a00', '#1d6816', '#905e4f', '#53c30f', '#c81958', '#375405', '#1444bd', '#39da3e', '#0a9512', '#02f8b0', '#09cab4', '#0e047e', '#5ddf90', '#35d882', '#cf1f37', '#fd990e', '#a14299', '#0c0f8e', '#cdea36', '#c4acb6', '#d7045d', '#b0304b', '#348422', '#90f372', '#b742a8', '#2b5394', '#cc3178', '#32e5a9', '#e0157c', '#c0e902', '#8fb4f7', '#484256'
	];

	class Attribute {
	  constructor(type, dataType, itemSize) {
	    this.type = type !== undefined ? type : Attribute.POSITION;
	    this.dataType = dataType !== undefined ? dataType : Attribute.FLOAT;
	    this.itemSize = itemSize !== undefined ? itemSize : 1;
	    this.values = [];
	    this.valuesMap = new Map();
	    this.numValues = 0;
	    this.index = [];
	  }

	  static INT8 = 0;
	  static UINT8 = 1;
	  static INT16 = 2;
	  static UINT16 = 3;
	  static INT32 = 4;
	  static UINT32 = 5;
	  static FLOAT32 = 6;

	  static POSITION = 0;
	  static TEXCOORD = 1;
	  static NORMAL = 2;
	  static MATERIAL = 3;
	  static GENERIC = 4;

	  clone() {
	    return new Attribute().copy(this);
	  }

	  copy(attribute) {
	    this.type = attribute.type;
	    this.dataType = attribute.dataType;
	    this.itemSize = attribute.itemSize;
	    this.values = attribute.values.slice();
	    this.valuesMap = new Map(attribute.valuesMap);
	    this.index = attribute.index.slice();
	  }

	  numItems() {
	    return this.index.length;
	  }

	  addNumberValue(value) {
	    if (this.itemSize !== 1) {
	      throw new Error('Attribute expects a vector value');
	    }
	    let valueId = this.valuesMap.get(value);
	    if (valueId === undefined) {
	      valueId = this.numValues++;
	      this.values[valueId] = value;
	      this.valuesMap.set(value, valueId);
	    }
	    return valueId;
	  }

	  // Adds a value and ensures it's unique
	  // Returns the value index
	  // Note that this function DOES NOT add any index
	  // because that index may not even be required
	  // if the values of all the attributes are duplicates
	  addValue(buffer, src = 0) {
	    let hash = buffer[src];
	    for (let i = 1; i < this.itemSize; ++i) {
	      hash += ',' + buffer[src + i];
	    }
	    let valueId = this.valuesMap.get(hash);
	    if (valueId === undefined) {
	      valueId = this.numValues++;
	      const dst = valueId * this.itemSize;
	      for (let i = 0; i < this.itemSize; ++i) {
	        this.values[dst + i] = buffer[src + i];
	      }
	      this.valuesMap.set(hash, valueId);
	    }
	    return valueId;
	  }

	  // Beware: this function won't add the value in the hashmap
	  // so it won't ever be deduplicated by calling "addUniqueValue"
	  addValueUnsafe(buffer, src = 0) {
	    const valueId = this.numValues++;
	    const dst = valueId * this.itemSize;
	    for (let i = 0; i < this.itemSize; ++i) {
	      this.values[dst + i] = buffer[src + i];
	    }
	    return valueId;
	  }

	  copyValues(buffer) {
	    const numValues = Math.floor(buffer.length / this.itemSize);
	    const numItems = numValues * this.itemSize;
	    for (let i = 0; i < numItems; ++i) {
	      this.values[i] = buffer[i];
	    }
	    if (this.values.length > numItems) {
	      this.values.length = numItems;
	    }
	  }

	  appendValues(buffer) {
	    const numValues = Math.floor(buffer.length / this.itemSize);
	    const numItems = numValues * this.itemSize;
	    for (let i = 0, j = this.numValues * this.itemSize; i < numItems; ++i, ++j) {
	      this.values[j] = buffer[i];
	    }
	    this.numValues += numValues;
	  }

	  initLinearIndex() {
	    for (let i = 0; i < this.numValues; ++i) {
	      this.index[i] = i;
	    }
	  }

	  appendLinearIndex(valueId, count) {
	    const numItems = this.index.length;
	    const il = numItems + count;
	    for (let i = numItems; i < il; ++i, ++valueId) {
	      this.index[i] = valueId;
	    }
	  }

	  initConstantIndex(count) {
	    for (let i = 0; i < count; ++i) {
	      this.index[i] = 0;
	    }
	  }

	  appendConstantIndex(valueId = 0, count = 1) {
	    const numItems = this.index.length;
	    const il = numItems + count;
	    for (let i = numItems; i < il; ++i) {
	      this.index[i] = valueId;
	    }
	  }

	  appendVertices(buffer) {
	    const numValues = this.numValues;
	    this.appendValues(buffer);
	    this.appendLinearIndex(numValues, this.numValues - numValues);
	  }

	  // TODO: Optimize the case where the attribute stores an index? (materialId?)
	  // This function will:
	  // - rebuild the entire values hashmap
	  // - move all the duplicated values in the values array and resize the values array
	  // - rewrite the index array to remove duplicates
	  deduplicateValues() {
	    // (1) Clear the current values hashmap
	    this.valuesMap.clear();
	    // (2) Rebuild the values hashmap and reorder values array
	    let numUniqueValues = 0;
	    const indexRemap = [];
	    for (let i = 0, src = 0; i < this.numValues; ++i, src += this.itemSize) {
	      let hash = this.values[src].toString();
	      for (let j = 1; j < this.itemSize; ++j) {
	        hash += ',' + this.values[src + j].toString();
	      }
	      let valueId = this.valuesMap.get(hash);
	      if (valueId === undefined) {
	        valueId = numUniqueValues++;
	        indexRemap[i] = valueId;
	        this.valuesMap.set(hash, valueId);
	        if (valueId !== i) {
	          const dst = valueId * this.itemSize;
	          for (let j = 0; j < this.itemSize; ++j) {
	            this.values[dst + j] = this.values[src + j];
	          }
	        }
	      }
	      indexRemap[i] = valueId;
	    }
	    // (3) Resize the values array
	    this.values.length = numUniqueValues * this.itemSize;
	    if (numUniqueValues === this.numValues) return;
	    this.numValues = numUniqueValues;
	    // (4) Rewrite the index array with the new mapping
	    for (let i = 0; i < this.index.length; ++i) {
	      this.index[i] = indexRemap[this.index[i]];
	    }
	  }
	}

	class Geometry {
	  constructor() {
	    this.attributes = [];
	    this.posAttribute = null;
	    this.matAttribute = null;
	    this.vertexMap = new Map();
	    this.index = [];

	    this.numVertices = 0;
	    this.numFaces = 0;
	  }

	  numAttributes() {
	    return this.attributes.length;
	  }

	  createAttribute(type, dataType, itemSize) {
	    const attribute = new Attribute(type, dataType, itemSize);
	    this.addAttribute(attribute);
	  }

	  addAttribute(attribute) {
	    if (attribute.type === Attribute.POSITION) {
	      if (this.posAttribute) {
	        throw new Error('Geometry already has a position attribute');
	      }
	      this.posAttribute = attribute;
	    }
	    if (attribute.type === Attribute.MATERIAL) {
	      if (this.matAttribute) {
	        throw new Error('Geometry already has a material attribute');
	      }
	      this.matAttribute = attribute;
	    }
	    if (this.attributes.length === 0) {
	      this.numVertices = attribute.index.length;
	    } else if (attribute.index.length !== this.numVertices) {
	      throw new Error('Attribute must match Geometry vertex count');
	    }
	    this.attributes.push(attribute);
	  }

	  findAttribute(attributeType, start = 0) {
	    for (let i = start; i < this.attributes.length; ++i) {
	      if (this.attributes[i].type === attributeType) return this.attributes[i];
	    }
	    return null;
	  }

	  addVertex(valueIds) {
	    let vertexHash = valueIds[0];
	    for (let i = 1; i < this.attributes.length; ++i) {
	      vertexHash += ',' + valuesIds[i].toString();
	    }
	    let vertexId = this.vertexMap.get(vertexHash);
	    if (vertexId === undefined) {
	      vertexId = this.numVertices++;
	      this.vertexMap.set(vertexHash, vertexId);
	    }
	    return vertexId;
	  }

	  addFace(a, b, c) {
	    const i = this.numFaces * 3;
	    this.index[i] = a;
	    this.index[i + 1] = b;
	    this.index[i + 2] = c;
	    this.numFaces++;
	  }

	  setIndex(index) {
	    arrayCopy(index, this.index);
	    this.numFaces = Math.floor(index.length / 3);
	    if (this.index.length > this.numFaces * 3) {
	      this.index.length = this.numFaces * 3;
	    }
	  }

	  appendIndex(buffer, vertexId = this.numVertices, start = 0, count = buffer.length) {
	    const numAddedFaces = Math.abs(count / 3);
	    const startIndex = this.numFaces * 3;
	    const il = numAddedFaces * 3;
	    for (let i = start; i < il; ++i) {
	      this.index[startIndex + i] = buffer[i] + vertexId;
	    }
	    this.numFaces += numAddedFaces;
	  }

	  appendLinearIndex(numAddedFaces, vertexId = this.numVertices, start = 0) {
	    const startIndex = this.numFaces * 3;
	    const il = numAddedFaces * 3;
	    for (let i = start; i < il; ++i) {
	      this.index[startIndex + i] = i + vertexId;
	    }
	    this.numFaces += numAddedFaces;
	  }

	  deduplicateAttributeValues() {
	    for (let i = 0; i < this.attributes.length; ++i) {
	      this.attributes[i].deduplicateValues();
	    }
	  }

	  deduplicateVertices() {
	    // (1) Clear the current vertex hashmap
	    this.vertexMap.clear();
	    // (2) Rebuild the vertex hashmap and reorder attribute arrays
	    let numUniqueVertices = 0;
	    const indexRemap = [];
	    const numAttributes = this.attributes.length;
	    for (let i = 0; i < this.numVertices; ++i) {
	      let hash = '';
	      for (let j = 0; j < numAttributes; ++j) {
	        if (j > 0) hash += ',';
	        hash += this.attributes[j].index[i];
	      }
	      let vertexId = this.vertexMap.get(hash);
	      if (vertexId === undefined) {
	        vertexId = numUniqueVertices++;
	        this.vertexMap.set(hash, vertexId);
	        if (vertexId !== i) {
	          for (let j = 0; j < numAttributes; ++j) {
	            index[vertexId] = this.attributes[j].index[i];
	          }
	        }
	      }
	      indexRemap[i] = vertexId;
	    }
	    // (3) Resize the attribute arrays
	    for (let i = 0; i < numAttributes; ++i) {
	      this.attributes[i].index.length = numUniqueVertices;
	    }
	    if (numUniqueVertices === this.numVertices) return;
	    this.numVertices = numUniqueVertices;
	    // (4) Remap faces with new vertex indices
	    for (let i = 0; i < this.index.length; ++i) {
	      this.index[i] = indexRemap[this.index[i]];
	    }
	  }

	  getPositionConnectivity() {
	    const index = [];
	    const attrIndex = this.posAttribute.index;
	    for (let i = 0; i < this.index.length; ++i) {
	      index[i] = attrIndex[this.index[i]];
	    }
	    return index;
	  }
	}

	class CollisionModel {
	  constructor(name = 'model') {
	    this.name = name;
	    this.vertices = [];
	    this.batches = [];
	    this.specialObjs = [];
	    this.waterBoxes = [];
	  }

	  buildGfx() {
	    const group = new Group();

	    const positions = new Float32Array(this.vertices.length * 3);
	    for (let i = 0, ofs = 0; i < this.vertices.length; ++i, ofs += 3) {
	      const vertex = this.vertices[i];
	      positions[ofs] = vertex[0];
	      positions[ofs + 1] = vertex[1];
	      positions[ofs + 2] = vertex[2];
	    }
	    const posAttribute = new BufferAttribute(positions, 3);

	    for (const batch of this.batches) {
	      const { tris } = batch;
	      const indices = new Uint16Array(tris.length * 3);
	      for (let i = 0, ofs = 0; i < tris.length; ++i, ofs += 3) {
	        const tri = tris[i];
	        indices[ofs] = tri[0];
	        indices[ofs + 1] = tri[1];
	        indices[ofs + 2] = tri[2];
	      }

	      const geometry = new BufferGeometry();
	      geometry.setAttribute('position', posAttribute);
	      geometry.setIndex(new BufferAttribute(indices, 1));
	      geometry.computeVertexNormals();

	      const color = new Color(SurfaceColors[batch.type]).multiplyScalar(0.01);

	      const material = new MeshBasicMaterial({
	        blending: AdditiveBlending,
	        depthTest: false,
	        depthWrite: false,
	        color,
	        // wireframe: true
	      });

	      group.add(new Mesh(geometry, material));
	      // group.add(new LineSegments(new EdgesGeometry(geometry), new LineBasicMaterial({ color: 'white' })));
	    }

	    // for (const waterBox of this.waterboxes) {
	    //
	    // }

	    return group;
	  }

	  createGeometry(geometry) {
	    if (!geometry) {
	      geometry = new Geometry();
	      geometry.createAttribute(0, 6, 3);
	    }
	    const posAttribute = geometry.posAttribute;

	    geometry.numVertices;

	    const positions = [];
	    for (let i = 0, j = 0; i < this.vertices.length; ++i, j += 3) {
	      const vertex = this.vertices[i];
	      positions[j] = vertex[0];
	      positions[j + 1] = vertex[1];
	      positions[j + 2] = vertex[2];
	    }
	    posAttribute.appendVertices(positions);

	    const indices = [];
	    for (const batch of this.batches) {
	      for (const tri of batch.tris) {
	        indices.push(tri[0], tri[1], tri[2]);
	      }
	    }
	    geometry.appendIndex(indices);

	    geometry.numVertices += this.vertices.length;
	    return geometry;
	  }

	  convertToObj() {
	    const lines = [];
	    for (const vertex of this.vertices) {
	      lines.push('v ' + vertex.join(' '));
	    }
	    for (const batch of this.batches) {
	      for (const tri of batch.tris) {
	        const ind = tri.slice(0, 3).map(i => i + 1);
	        lines.push('f ' + ind.join(' '));
	      }
	    }
	    return lines.join('\n');
	  }

	  downloadObj() {
	    const content = this.convertToObj();
	    const url = window.URL.createObjectURL(new Blob([content]));
	    const a = document.createElement('a');
	    a.style.display = 'none';
	    a.href = url;
	    a.download = this.name + '.obj';
	    document.body.appendChild(a);
	    a.click();
	    window.URL.revokeObjectURL(url);
	  }
	}

	let curModel$1 = null;
	let isInit = false;
	let vertexCount = 0;
	let curBatch = null;
	let curBatchSize = 0;
	let specialObjCount = 0;
	let waterBoxesCount = 0;

	function resetInternal() {
	  isInit = false;
	  vertexCount = 0;
	  curBatch = null;
	  curBatchSize = 0;
	  specialObjCount = 0;
	  waterBoxesCount = 0;
	}

	function COL_INIT$1() {
	  if (isInit) {
	    throw new Error('COL_INIT: called twice');
	  }
	  if (!curModel$1) {
	    throw new Error('COL_INIT: no CollisionModel to output');
	  }
	  resetInternal();
	  isInit = true;
	}

	function COL_VERTEX_INIT$1(count) {
	  if (!curModel$1) {
	    throw new Error('COL_VERTEX_INIT: no model to output to');
	  }
	  if (!isInit) {
	    throw new Error('COL_VERTEX_INIT: not initialized');
	  }
	  if (vertexCount > 0) {
	    throw new Error('COL_VERTEX_INIT: already called for this model');
	  }
	  if (count === 0) {
	    throw new Error('COL_VERTEX_INIT: vertex count cannot be 0');
	  }
	  vertexCount = count;
	}

	function COL_VERTEX$1(x, y, z) {
	  if (!curModel$1) {
	    throw new Error('COL_VERTEX: no model to output to');
	  }
	  if (!isInit) {
	    throw new Error('COL_VERTEX: not initialized');
	  }
	  if (curModel$1.vertices.length >= vertexCount) {
	    throw new Error('COL_VERTEX: cannot add more vertices');
	  }
	  curModel$1.vertices.push([x, y, z]);
	}

	function COL_TRI_INIT$1(type, count) {
	  if (!curModel$1) {
	    throw new Error('COL_TRI_INIT: no model to output to');
	  }
	  if (curBatch && curBatch.tris.length < curBatchSize) {
	    throw new Error('COL_TRI_INIT: previous batch is incomplete');
	  }
	  if (count === 0) {
	    throw new Error('COL_TRI_INIT: batch cannot be empty');
	  }
	  curBatch = { type, tris: [] };
	  curBatchSize = count;
	  curModel$1.batches.push(curBatch);
	}

	function COL_TRI_internal(a, b, c, sp) {
	  if (!curModel$1) {
	    throw new Error('no model to output to');
	  }
	  if (!curBatch) {
	    throw new Error('no batch to output to');
	  }
	  if (curBatch.tris.length >= curBatchSize) {
	    throw new Error('current batch is full');
	  }
	  if (Math.max(a, b, c) >= curModel$1.vertices.length) {
	    throw new Error('unreachable vertex');
	  }
	  curBatch.tris.push([a, b, c, sp]);
	}

	function COL_TRI$1(a, b, c) {
	  try {
	    COL_TRI_internal(a, b, c, 0);
	  } catch (err) {
	    throw new Error('COL_TRI: ' + err);
	  }
	}

	function COL_TRI_SPECIAL$1(a, b, c, sp) {
	  try {
	    COL_TRI_internal(a, b, c, sp);
	  } catch (err) {
	    throw new Error('COL_TRI_SPECIAL: ' + err);
	  }
	}

	function COL_TRI_STOP$1() {
	  if (!curModel$1) {
	    throw new Error('COL_TRI_STOP: no active model');
	  }
	  if (!curBatch) {
	    throw new Error('COL_TRI_STOP: no active batch');
	  }
	  if (curBatch.tris.length < curBatchSize) {
	    throw new Error('COL_TRI_STOP: current batch is incomplete');
	  }
	  curBatch = null;
	  curBatchSize = 0;
	}

	function COL_SPECIAL_INIT$1(count) {
	  if (!curModel$1) {
	    throw new Error('COL_SPECIAL_INIT: no model to output to');
	  }
	  if (!isInit) {
	    throw new Error('COL_SPECIAL_INIT: not initialized');
	  }
	  if (specialObjCount > 0) {
	    throw new Error('COL_SPECIAL_INIT: already called for this model');
	  }
	  if (count === 0) {
	    throw new Error('COL_SPECIAL_INIT: vertex count cannot be 0');
	  }
	  specialObjCount = count;
	}


	function SPECIAL_OBJECT_internal(name, x, y, z, yaw = 0, param = 0) {
	  if (!curModel$1) {
	    throw new Error('no model to output to');
	  }
	  if (!isInit) {
	    throw new Error('not initialized');
	  }
	  if (curModel$1.specialObjs.length >= specialObjCount) {
	    throw new Error('cannot add more special objects');
	  }
	  curModel$1.specialObjs.push({ name, pos: [x, y, z], yaw, param });
	}

	function SPECIAL_OBJECT$1(name, x, y, z) {
	  try {
	    SPECIAL_OBJECT_internal(name, x, y, z);
	  } catch (err) {
	    throw new Error('SPECIAL_OBJECT: ' + err);
	  }
	}

	function SPECIAL_OBJECT_WITH_YAW$1(name, x, y, z, yaw) {
	  try {
	    SPECIAL_OBJECT_internal(name, x, y, z, yaw);
	  } catch (err) {
	    throw new Error('SPECIAL_OBJECT_WITH_YAW: ' + err);
	  }
	}

	function SPECIAL_OBJECT_WITH_YAW_AND_PARAM$1(name, x, y, z, yaw, param) {
	  try {
	    SPECIAL_OBJECT_internal(name, x, y, z, yaw, param);
	  } catch (err) {
	    throw new Error('SPECIAL_OBJECT_WITH_YAW_AND_PARAM: ' + err);
	  }
	}

	function COL_WATER_BOX_INIT$1(count) {
	  if (!curModel$1) {
	    throw new Error('COL_WATER_BOX_INIT: no model to output to');
	  }
	  if (!isInit) {
	    throw new Error('COL_WATER_BOX_INIT: not initialized');
	  }
	  if (waterBoxesCount > 0) {
	    throw new Error('COL_WATER_BOX_INIT: already called for this model');
	  }
	  if (count === 0) {
	    throw new Error('COL_WATER_BOX_INIT: count cannot be 0');
	  }
	  waterBoxesCount = count;
	}

	function COL_WATER_BOX$1(id, minX, maxX, minZ, maxZ, height) {
	  if (!curModel$1) {
	    throw new Error('COL_WATER_BOX: no model to output to');
	  }
	  if (!isInit) {
	    throw new Error('COL_WATER_BOX: not initialized');
	  }
	  if (curModel$1.waterBoxes.length >= waterBoxesCount) {
	    throw new Error('COL_WATER_BOX: cannot add more water boxes');
	  }
	  curModel$1.waterBoxes.push({ id, bounds: [minX, maxX, minZ, maxZ], height });
	}

	function COL_END$1() {
	  if (!curModel$1) {
	    throw new Error('COL_END: no active model');
	  }
	  if (!isInit) {
	    throw new Error('COL_END: nothing to end');
	  }
	  if (curModel$1.specialObjs.length < specialObjCount) {
	    throw new Error('COL_END: missing some special objects');
	  }
	  if (curModel$1.waterBoxes.length < waterBoxesCount) {
	    throw new Error('COL_END: missing some special objects');
	  }
	  resetInternal();
	}

	const commands = {
	  COL_INIT: COL_INIT$1,
	  COL_VERTEX_INIT: COL_VERTEX_INIT$1,
	  COL_VERTEX: COL_VERTEX$1,
	  COL_TRI_INIT: COL_TRI_INIT$1,
	  COL_TRI: COL_TRI$1,
	  COL_TRI_SPECIAL: COL_TRI_SPECIAL$1,
	  COL_TRI_STOP: COL_TRI_STOP$1,
	  COL_SPECIAL_INIT: COL_SPECIAL_INIT$1,
	  SPECIAL_OBJECT: SPECIAL_OBJECT$1,
	  SPECIAL_OBJECT_WITH_YAW: SPECIAL_OBJECT_WITH_YAW$1,
	  SPECIAL_OBJECT_WITH_YAW_AND_PARAM: SPECIAL_OBJECT_WITH_YAW_AND_PARAM$1,
	  COL_WATER_BOX_INIT: COL_WATER_BOX_INIT$1,
	  COL_WATER_BOX: COL_WATER_BOX$1,
	  COL_END: COL_END$1,
	};

	const specialObjNames = [
	  'special_0stars_door',
	  'special_1star_door',
	  'special_3star_door',
	  'special_bowser',
	  'special_bubble_tree',
	  'special_castle_door_warp',
	  'special_haunted_door',
	  'special_hmc_door',
	  'special_level_geo_03',
	  'special_level_geo_04',
	  'special_level_geo_05',
	  'special_level_geo_06',
	  'special_level_geo_07',
	  'special_level_geo_08',
	  'special_level_geo_09',
	  'special_level_geo_0A',
	  'special_level_geo_0B',
	  'special_level_geo_0C',
	  'special_level_geo_0D',
	  'special_level_geo_0E',
	  'special_level_geo_0F',
	  'special_level_geo_10',
	  'special_level_geo_11',
	  'special_level_geo_12',
	  'special_level_geo_13',
	  'special_level_geo_14',
	  'special_level_geo_15',
	  'special_level_geo_16',
	  'special_metal_door',
	  'special_metal_door_warp',
	  'special_mine',
	  'special_null_start',
	  'special_snow_tree',
	  'special_spiky_tree',
	  'special_wooden_door',
	  'special_wooden_door_warp',
	];

	const global = window;
	for (const name in commands) {
	  global[name] = commands[name];
	}
	for (const name of specialObjNames) {
	  global[name] = name;
	}

	function createModel(commandsWrap) {
	  const model = new CollisionModel(commandsWrap.name);

	  curModel$1 = model;
	  commandsWrap();
	  curModel$1 = null;

	  return model;
	}

	function ccm_seg7_collision_070163F8() {
	  COL_INIT$1();
	  COL_VERTEX_INIT$1(0x18);
	  COL_VERTEX$1(-204, -204, -101);
	  COL_VERTEX$1(205, -255, -142);
	  COL_VERTEX$1(205, -204, -101);
	  COL_VERTEX$1(-204, -255, -142);
	  COL_VERTEX$1(-204, -255, 143);
	  COL_VERTEX$1(-204, -204, 102);
	  COL_VERTEX$1(205, -204, 102);
	  COL_VERTEX$1(205, -255, 143);
	  COL_VERTEX$1(205, -30, -101);
	  COL_VERTEX$1(-204, 0, -122);
	  COL_VERTEX$1(-204, -30, -101);
	  COL_VERTEX$1(205, 0, -122);
	  COL_VERTEX$1(205, -30, -142);
	  COL_VERTEX$1(-204, -30, -142);
	  COL_VERTEX$1(205, -30, 143);
	  COL_VERTEX$1(205, 0, 123);
	  COL_VERTEX$1(-204, 0, 123);
	  COL_VERTEX$1(-204, -30, 143);
	  COL_VERTEX$1(-204, -30, 102);
	  COL_VERTEX$1(205, -30, 102);
	  COL_VERTEX$1(-204, -153, 102);
	  COL_VERTEX$1(-204, -153, -101);
	  COL_VERTEX$1(205, -153, -101);
	  COL_VERTEX$1(205, -153, 102);
	  COL_TRI_INIT$1(SURFACE_DEFAULT, 10);
	  COL_TRI$1(0, 1, 2);
	  COL_TRI$1(0, 3, 1);
	  COL_TRI$1(4, 5, 6);
	  COL_TRI$1(4, 6, 7);
	  COL_TRI$1(6, 22, 23);
	  COL_TRI$1(6, 2, 22);
	  COL_TRI$1(0, 5, 20);
	  COL_TRI$1(0, 20, 21);
	  COL_TRI$1(5, 2, 6);
	  COL_TRI$1(5, 0, 2);
	  COL_TRI_INIT$1(SURFACE_VERY_SLIPPERY, 8);
	  COL_TRI$1(8, 9, 10);
	  COL_TRI$1(8, 11, 9);
	  COL_TRI$1(11, 12, 13);
	  COL_TRI$1(11, 13, 9);
	  COL_TRI$1(14, 15, 16);
	  COL_TRI$1(14, 16, 17);
	  COL_TRI$1(15, 18, 16);
	  COL_TRI$1(15, 19, 18);
	  COL_TRI_INIT$1(SURFACE_HARD_NOT_SLIPPERY, 2);
	  COL_TRI$1(21, 20, 23);
	  COL_TRI$1(21, 23, 22);
	  COL_TRI_INIT$1(SURFACE_NO_CAM_COLLISION, 24);
	  COL_TRI$1(17, 16, 18);
	  COL_TRI$1(20, 17, 18);
	  COL_TRI$1(20, 4, 17);
	  COL_TRI$1(17, 4, 7);
	  COL_TRI$1(17, 7, 14);
	  COL_TRI$1(20, 5, 4);
	  COL_TRI$1(12, 3, 13);
	  COL_TRI$1(12, 1, 3);
	  COL_TRI$1(13, 3, 21);
	  COL_TRI$1(3, 0, 21);
	  COL_TRI$1(11, 8, 12);
	  COL_TRI$1(21, 10, 13);
	  COL_TRI$1(13, 10, 9);
	  COL_TRI$1(10, 22, 8);
	  COL_TRI$1(10, 21, 22);
	  COL_TRI$1(19, 23, 20);
	  COL_TRI$1(19, 20, 18);
	  COL_TRI$1(19, 15, 14);
	  COL_TRI$1(12, 8, 22);
	  COL_TRI$1(22, 1, 12);
	  COL_TRI$1(22, 2, 1);
	  COL_TRI$1(14, 7, 23);
	  COL_TRI$1(7, 6, 23);
	  COL_TRI$1(19, 14, 23);
	  COL_TRI_STOP$1();
	  COL_END$1();
	}

	var ccm = [
	  ccm_seg7_area_1_collision,
	  ccm_seg7_area_2_collision,
	  ccm_seg7_collision_070163F8,
	];

	function cotmc_seg7_collision_level() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x152);
	  COL_VERTEX(-666, -1791, 3584);
	  COL_VERTEX(-666, -1791, 4301);
	  COL_VERTEX(667, -1791, 4301);
	  COL_VERTEX(667, -1791, 3584);
	  COL_VERTEX(-214, 20, 1090);
	  COL_VERTEX(36, 20, 597);
	  COL_VERTEX(-563, 20, 1105);
	  COL_VERTEX(-563, 20, 1263);
	  COL_VERTEX(-173, 0, 1140);
	  COL_VERTEX(110, 0, 597);
	  COL_VERTEX(-563, 20, 376);
	  COL_VERTEX(-563, 0, 1340);
	  COL_VERTEX(-134, 0, -308);
	  COL_VERTEX(-174, 20, -212);
	  COL_VERTEX(-563, 20, -291);
	  COL_VERTEX(-563, 0, -413);
	  COL_VERTEX(1076, 256, -3966);
	  COL_VERTEX(615, 256, -3966);
	  COL_VERTEX(615, 256, -3311);
	  COL_VERTEX(564, 256, -3999);
	  COL_VERTEX(564, 256, -3278);
	  COL_VERTEX(1076, 256, -3311);
	  COL_VERTEX(255, 256, -4466);
	  COL_VERTEX(352, 357, -6269);
	  COL_VERTEX(492, 352, -6143);
	  COL_VERTEX(424, 352, -6305);
	  COL_VERTEX(313, 498, -6292);
	  COL_VERTEX(313, 498, -6337);
	  COL_VERTEX(0, 377, -6143);
	  COL_VERTEX(313, 357, -6337);
	  COL_VERTEX(313, 358, -6292);
	  COL_VERTEX(395, 491, -6377);
	  COL_VERTEX(352, 492, -6269);
	  COL_VERTEX(343, 353, -5800);
	  COL_VERTEX(336, 352, -5791);
	  COL_VERTEX(348, 338, -5795);
	  COL_VERTEX(349, 352, -5792);
	  COL_VERTEX(-329, 360, -6114);
	  COL_VERTEX(-491, 352, -6143);
	  COL_VERTEX(-339, 386, -6075);
	  COL_VERTEX(-341, 358, -6059);
	  COL_VERTEX(-299, 362, -6135);
	  COL_VERTEX(-276, 386, -6067);
	  COL_VERTEX(-275, 362, -6103);
	  COL_VERTEX(-277, 361, -6053);
	  COL_VERTEX(-347, 352, -5795);
	  COL_VERTEX(-312, 359, -6038);
	  COL_VERTEX(-285, 361, -6045);
	  COL_VERTEX(-138, 360, -6432);
	  COL_VERTEX(-110, 363, -6381);
	  COL_VERTEX(-347, 352, -6491);
	  COL_VERTEX(-97, 358, -6476);
	  COL_VERTEX(-25, 360, -6474);
	  COL_VERTEX(-93, 421, -6433);
	  COL_VERTEX(0, 352, -6635);
	  COL_VERTEX(-30, 365, -6368);
	  COL_VERTEX(-76, 406, -6376);
	  COL_VERTEX(-4, 363, -6419);
	  COL_VERTEX(-19, 360, -6470);
	  COL_VERTEX(123, 256, -5574);
	  COL_VERTEX(159, 256, -5027);
	  COL_VERTEX(305, 267, -5312);
	  COL_VERTEX(-4, 256, -5298);
	  COL_VERTEX(388, 256, -4829);
	  COL_VERTEX(564, 256, -4781);
	  COL_VERTEX(307, 259, -3653);
	  COL_VERTEX(-292, 140, -3520);
	  COL_VERTEX(-563, 123, -1632);
	  COL_VERTEX(-257, 140, -3270);
	  COL_VERTEX(-157, 123, -1841);
	  COL_VERTEX(-35, 123, -2711);
	  COL_VERTEX(179, 94, -1705);
	  COL_VERTEX(93, 0, -1869);
	  COL_VERTEX(53, 0, -1175);
	  COL_VERTEX(215, 0, -681);
	  COL_VERTEX(176, 73, -1196);
	  COL_VERTEX(305, 46, -724);
	  COL_VERTEX(435, 67, -520);
	  COL_VERTEX(166, 280, -3407);
	  COL_VERTEX(50, 269, -3387);
	  COL_VERTEX(-64, 234, -3354);
	  COL_VERTEX(-227, 154, -3275);
	  COL_VERTEX(424, 485, -6305);
	  COL_VERTEX(395, 352, -6377);
	  COL_VERTEX(661, 256, -4877);
	  COL_VERTEX(628, 256, -4947);
	  COL_VERTEX(403, 256, -3337);
	  COL_VERTEX(376, 548, -6314);
	  COL_VERTEX(348, 352, -6491);
	  COL_VERTEX(0, 352, -5651);
	  COL_VERTEX(350, 352, -5802);
	  COL_VERTEX(-312, 387, -6031);
	  COL_VERTEX(-338, 358, -6054);
	  COL_VERTEX(-306, 402, -6080);
	  COL_VERTEX(-65, 396, -6481);
	  COL_VERTEX(-8, 424, -6425);
	  COL_VERTEX(402, 256, -5592);
	  COL_VERTEX(599, 256, -5286);
	  COL_VERTEX(487, 256, -5051);
	  COL_VERTEX(537, 256, -4960);
	  COL_VERTEX(341, 256, -3413);
	  COL_VERTEX(-563, 123, -3860);
	  COL_VERTEX(-286, 123, -3582);
	  COL_VERTEX(-262, 123, -3526);
	  COL_VERTEX(-262, 154, -3526);
	  COL_VERTEX(-227, 123, -3275);
	  COL_VERTEX(564, 123, -1958);
	  COL_VERTEX(564, 0, -2309);
	  COL_VERTEX(564, 123, -608);
	  COL_VERTEX(357, 0, -426);
	  COL_VERTEX(564, 0, -376);
	  COL_VERTEX(156, 280, -3599);
	  COL_VERTEX(36, 269, -3565);
	  COL_VERTEX(-84, 234, -3544);
	  COL_VERTEX(972, -665, 2832);
	  COL_VERTEX(-1075, -665, 2832);
	  COL_VERTEX(-1075, 870, 2832);
	  COL_VERTEX(972, 870, 2832);
	  COL_VERTEX(564, -153, -2596);
	  COL_VERTEX(19, -153, -2029);
	  COL_VERTEX(473, -203, -4740);
	  COL_VERTEX(-2, -225, -4715);
	  COL_VERTEX(564, -153, -4781);
	  COL_VERTEX(-122, -153, -1203);
	  COL_VERTEX(-412, -203, -4740);
	  COL_VERTEX(-563, -153, -849);
	  COL_VERTEX(9, -153, -651);
	  COL_VERTEX(96, -153, -567);
	  COL_VERTEX(308, -153, -254);
	  COL_VERTEX(333, -153, 593);
	  COL_VERTEX(564, -153, -217);
	  COL_VERTEX(-27, -153, 1317);
	  COL_VERTEX(-563, -153, -4781);
	  COL_VERTEX(564, -80, 3379);
	  COL_VERTEX(108, -255, -5053);
	  COL_VERTEX(1362, -153, -5579);
	  COL_VERTEX(1090, -255, -5692);
	  COL_VERTEX(451, -255, -5053);
	  COL_VERTEX(-243, -273, -5716);
	  COL_VERTEX(-589, -358, -5918);
	  COL_VERTEX(-249, -386, -6583);
	  COL_VERTEX(-911, -255, -5514);
	  COL_VERTEX(-541, -409, -6769);
	  COL_VERTEX(92, -257, -5293);
	  COL_VERTEX(0, -267, -5746);
	  COL_VERTEX(363, -311, -5488);
	  COL_VERTEX(0, -382, -6540);
	  COL_VERTEX(646, -379, -6747);
	  COL_VERTEX(564, -255, -7505);
	  COL_VERTEX(1090, -308, -6651);
	  COL_VERTEX(868, -367, -6219);
	  COL_VERTEX(281, -343, -5862);
	  COL_VERTEX(549, -356, -5900);
	  COL_VERTEX(1362, -153, -6707);
	  COL_VERTEX(-93, -468, -7454);
	  COL_VERTEX(-338, -562, -7372);
	  COL_VERTEX(-65, -552, -7334);
	  COL_VERTEX(-439, -422, -7070);
	  COL_VERTEX(-555, -285, -7479);
	  COL_VERTEX(-329, -490, -7479);
	  COL_VERTEX(-1361, -153, -6707);
	  COL_VERTEX(-1089, -255, -6651);
	  COL_VERTEX(236, -490, -7479);
	  COL_VERTEX(339, -562, -7372);
	  COL_VERTEX(-1361, -153, -5579);
	  COL_VERTEX(-1089, -255, -6068);
	  COL_VERTEX(-1225, -204, -5635);
	  COL_VERTEX(-1101, -175, -5704);
	  COL_VERTEX(-666, -460, 3584);
	  COL_VERTEX(564, -153, 3072);
	  COL_VERTEX(-563, -153, 3072);
	  COL_VERTEX(-563, -153, 1617);
	  COL_VERTEX(-450, -255, -5053);
	  COL_VERTEX(-563, -80, 3379);
	  COL_VERTEX(-280, -260, -5862);
	  COL_VERTEX(-396, -380, -6143);
	  COL_VERTEX(-280, -376, -6424);
	  COL_VERTEX(-960, -291, -5945);
	  COL_VERTEX(158, -423, -6879);
	  COL_VERTEX(201, -256, -5113);
	  COL_VERTEX(419, -263, -5129);
	  COL_VERTEX(493, -282, -5285);
	  COL_VERTEX(-64, -434, -6903);
	  COL_VERTEX(177, -297, -5476);
	  COL_VERTEX(281, -324, -6424);
	  COL_VERTEX(397, -344, -6143);
	  COL_VERTEX(404, -385, -6939);
	  COL_VERTEX(363, -312, -5488);
	  COL_VERTEX(347, -450, -7479);
	  COL_VERTEX(-552, -282, -7137);
	  COL_VERTEX(-563, -153, -7505);
	  COL_VERTEX(564, -153, -7505);
	  COL_VERTEX(667, -460, 3584);
	  COL_VERTEX(749, 256, -3495);
	  COL_VERTEX(749, 684, -3413);
	  COL_VERTEX(749, 256, -3413);
	  COL_VERTEX(749, 684, -3495);
	  COL_VERTEX(667, 256, -3495);
	  COL_VERTEX(667, 684, -3413);
	  COL_VERTEX(667, 256, -3413);
	  COL_VERTEX(667, 684, -3495);
	  COL_VERTEX(667, 256, -3864);
	  COL_VERTEX(749, 684, -3864);
	  COL_VERTEX(749, 256, -3864);
	  COL_VERTEX(749, 684, -3782);
	  COL_VERTEX(749, 256, -3782);
	  COL_VERTEX(667, 684, -3782);
	  COL_VERTEX(667, 684, -3864);
	  COL_VERTEX(667, 256, -3782);
	  COL_VERTEX(-563, 4198, -7505);
	  COL_VERTEX(564, 4198, -7505);
	  COL_VERTEX(-1361, 4198, -6707);
	  COL_VERTEX(-563, 717, -7505);
	  COL_VERTEX(564, 717, -7505);
	  COL_VERTEX(1362, 4198, -6707);
	  COL_VERTEX(1362, 717, -6707);
	  COL_VERTEX(1362, 4198, -5579);
	  COL_VERTEX(564, 4198, -4781);
	  COL_VERTEX(-563, 4198, -4781);
	  COL_VERTEX(-1361, 4198, -5579);
	  COL_VERTEX(-1361, 717, -6707);
	  COL_VERTEX(1362, 717, -5579);
	  COL_VERTEX(564, 717, -4781);
	  COL_VERTEX(564, 717, 3379);
	  COL_VERTEX(346, 908, 3379);
	  COL_VERTEX(0, 1005, 3379);
	  COL_VERTEX(-563, 717, -4781);
	  COL_VERTEX(-351, 906, 3379);
	  COL_VERTEX(-1361, 717, -5579);
	  COL_VERTEX(-666, 819, 4301);
	  COL_VERTEX(667, 819, 3584);
	  COL_VERTEX(-402, 1009, 3584);
	  COL_VERTEX(564, 0, 3379);
	  COL_VERTEX(564, 0, 2970);
	  COL_VERTEX(564, 160, -3311);
	  COL_VERTEX(661, 190, -4877);
	  COL_VERTEX(564, 0, -4781);
	  COL_VERTEX(-563, 0, -4781);
	  COL_VERTEX(-563, 72, -3860);
	  COL_VERTEX(-1361, 0, -5579);
	  COL_VERTEX(-1361, 0, -6707);
	  COL_VERTEX(-563, 0, -7505);
	  COL_VERTEX(564, 0, -7505);
	  COL_VERTEX(1362, 0, -6707);
	  COL_VERTEX(1362, 0, -5579);
	  COL_VERTEX(564, 686, -3278);
	  COL_VERTEX(564, 717, -3309);
	  COL_VERTEX(564, 162, -4781);
	  COL_VERTEX(628, 190, -4947);
	  COL_VERTEX(255, 190, -4466);
	  COL_VERTEX(615, 684, -3311);
	  COL_VERTEX(615, 684, -3966);
	  COL_VERTEX(1076, 684, -3311);
	  COL_VERTEX(1076, 684, -3966);
	  COL_VERTEX(403, 208, -3337);
	  COL_VERTEX(-563, 717, 3379);
	  COL_VERTEX(-563, 717, 1105);
	  COL_VERTEX(-666, 717, 478);
	  COL_VERTEX(-563, 717, 376);
	  COL_VERTEX(-563, 72, -1632);
	  COL_VERTEX(-35, 72, -2711);
	  COL_VERTEX(-227, 72, -3275);
	  COL_VERTEX(-4746, 717, 151);
	  COL_VERTEX(-4467, 20, 402);
	  COL_VERTEX(-3814, 20, 259);
	  COL_VERTEX(-4094, 20, 470);
	  COL_VERTEX(-2986, 717, 295);
	  COL_VERTEX(-2986, 20, 295);
	  COL_VERTEX(-1380, 717, 927);
	  COL_VERTEX(-2855, 717, -228);
	  COL_VERTEX(-3755, 20, -261);
	  COL_VERTEX(-4047, 20, -513);
	  COL_VERTEX(-4443, 20, -576);
	  COL_VERTEX(-4746, 717, -360);
	  COL_VERTEX(-1249, 717, 403);
	  COL_VERTEX(-1380, 20, 927);
	  COL_VERTEX(0, 1107, 3584);
	  COL_VERTEX(397, 1011, 3584);
	  COL_VERTEX(123, 187, -5574);
	  COL_VERTEX(363, 120, -5488);
	  COL_VERTEX(402, 187, -5592);
	  COL_VERTEX(493, 120, -5285);
	  COL_VERTEX(599, 187, -5286);
	  COL_VERTEX(-4, 187, -5298);
	  COL_VERTEX(159, 187, -5027);
	  COL_VERTEX(419, 120, -5129);
	  COL_VERTEX(201, 120, -5113);
	  COL_VERTEX(92, 120, -5293);
	  COL_VERTEX(177, 120, -5476);
	  COL_VERTEX(348, 291, -5795);
	  COL_VERTEX(492, 291, -6143);
	  COL_VERTEX(0, 291, -5651);
	  COL_VERTEX(348, 291, -6491);
	  COL_VERTEX(-347, 291, -6491);
	  COL_VERTEX(-491, 291, -6143);
	  COL_VERTEX(-347, 291, -5795);
	  COL_VERTEX(0, 201, -6540);
	  COL_VERTEX(281, 201, -6424);
	  COL_VERTEX(281, 201, -5862);
	  COL_VERTEX(397, 201, -6143);
	  COL_VERTEX(0, 201, -5746);
	  COL_VERTEX(-280, 201, -5862);
	  COL_VERTEX(-396, 201, -6143);
	  COL_VERTEX(-280, 201, -6424);
	  COL_VERTEX(537, 190, -4960);
	  COL_VERTEX(-262, 72, -3526);
	  COL_VERTEX(-84, 195, -3544);
	  COL_VERTEX(307, 209, -3653);
	  COL_VERTEX(156, 240, -3599);
	  COL_VERTEX(36, 236, -3565);
	  COL_VERTEX(564, 686, -3999);
	  COL_VERTEX(667, 819, 4301);
	  COL_VERTEX(-666, 819, 3584);
	  COL_VERTEX(-563, 0, 3379);
	  COL_VERTEX(-563, 0, 2970);
	  COL_VERTEX(-286, 72, -3582);
	  COL_VERTEX(341, 207, -3413);
	  COL_VERTEX(564, 717, -3968);
	  COL_VERTEX(388, 190, -4829);
	  COL_VERTEX(-666, 717, 1002);
	  COL_VERTEX(-666, 20, 1002);
	  COL_VERTEX(-157, 72, -1841);
	  COL_VERTEX(-666, 20, 478);
	  COL_VERTEX(-3755, 717, -261);
	  COL_VERTEX(-4443, 717, -576);
	  COL_VERTEX(-4047, 717, -513);
	  COL_VERTEX(-4746, 20, 151);
	  COL_VERTEX(-4467, 717, 402);
	  COL_VERTEX(-4746, 20, -360);
	  COL_VERTEX(-4094, 717, 470);
	  COL_VERTEX(-3814, 717, 259);
	  COL_VERTEX(-1249, 20, 403);
	  COL_VERTEX(-2855, 20, -228);
	  COL_VERTEX(487, 187, -5051);
	  COL_VERTEX(0, 291, -6635);
	  COL_VERTEX(166, 240, -3407);
	  COL_VERTEX(-64, 195, -3354);
	  COL_VERTEX(50, 236, -3387);
	  COL_TRI_INIT(SURFACE_DEFAULT, 354);
	  COL_TRI(209, 210, 211);
	  COL_TRI(211, 212, 209);
	  COL_TRI(209, 212, 213);
	  COL_TRI(209, 213, 210);
	  COL_TRI(210, 214, 211);
	  COL_TRI(210, 215, 214);
	  COL_TRI(210, 213, 215);
	  COL_TRI(214, 216, 211);
	  COL_TRI(216, 217, 211);
	  COL_TRI(218, 219, 211);
	  COL_TRI(217, 218, 211);
	  COL_TRI(211, 220, 212);
	  COL_TRI(214, 215, 221);
	  COL_TRI(214, 221, 216);
	  COL_TRI(216, 221, 222);
	  COL_TRI(216, 222, 217);
	  COL_TRI(217, 222, 223);
	  COL_TRI(217, 223, 224);
	  COL_TRI(217, 224, 225);
	  COL_TRI(218, 217, 225);
	  COL_TRI(229, 230, 311);
	  COL_TRI(226, 218, 255);
	  COL_TRI(218, 227, 255);
	  COL_TRI(218, 225, 227);
	  COL_TRI(219, 228, 220);
	  COL_TRI(219, 220, 211);
	  COL_TRI(229, 311, 2);
	  COL_TRI(229, 2, 1);
	  COL_TRI(229, 312, 230);
	  COL_TRI(2, 311, 230);
	  COL_TRI(2, 230, 3);
	  COL_TRI(223, 230, 277);
	  COL_TRI(230, 223, 192);
	  COL_TRI(1, 0, 312);
	  COL_TRI(1, 312, 229);
	  COL_TRI(231, 312, 255);
	  COL_TRI(168, 255, 312);
	  COL_TRI(168, 0, 3);
	  COL_TRI(168, 3, 192);
	  COL_TRI(173, 170, 314);
	  COL_TRI(168, 313, 255);
	  COL_TRI(168, 173, 313);
	  COL_TRI(223, 232, 192);
	  COL_TRI(232, 133, 192);
	  COL_TRI(233, 232, 223);
	  COL_TRI(110, 233, 223);
	  COL_TRI(110, 130, 233);
	  COL_TRI(233, 169, 133);
	  COL_TRI(233, 133, 232);
	  COL_TRI(169, 233, 130);
	  COL_TRI(170, 11, 314);
	  COL_TRI(170, 171, 11);
	  COL_TRI(173, 314, 313);
	  COL_TRI(108, 110, 223);
	  COL_TRI(118, 107, 236);
	  COL_TRI(118, 236, 122);
	  COL_TRI(135, 236, 244);
	  COL_TRI(135, 122, 236);
	  COL_TRI(107, 234, 236);
	  COL_TRI(234, 247, 236);
	  COL_TRI(235, 236, 247);
	  COL_TRI(236, 235, 244);
	  COL_TRI(125, 132, 237);
	  COL_TRI(125, 237, 15);
	  COL_TRI(226, 237, 239);
	  COL_TRI(237, 164, 239);
	  COL_TRI(237, 132, 164);
	  COL_TRI(238, 237, 226);
	  COL_TRI(237, 238, 259);
	  COL_TRI(237, 259, 15);
	  COL_TRI(226, 239, 228);
	  COL_TRI(228, 239, 240);
	  COL_TRI(239, 164, 160);
	  COL_TRI(239, 160, 240);
	  COL_TRI(228, 240, 220);
	  COL_TRI(220, 240, 241);
	  COL_TRI(240, 190, 241);
	  COL_TRI(240, 160, 190);
	  COL_TRI(159, 154, 190);
	  COL_TRI(220, 241, 212);
	  COL_TRI(212, 241, 242);
	  COL_TRI(241, 191, 242);
	  COL_TRI(241, 190, 191);
	  COL_TRI(191, 148, 153);
	  COL_TRI(188, 148, 191);
	  COL_TRI(154, 162, 191);
	  COL_TRI(212, 242, 213);
	  COL_TRI(213, 242, 243);
	  COL_TRI(242, 153, 243);
	  COL_TRI(242, 191, 153);
	  COL_TRI(213, 243, 215);
	  COL_TRI(215, 243, 244);
	  COL_TRI(243, 135, 244);
	  COL_TRI(243, 153, 135);
	  COL_TRI(215, 244, 221);
	  COL_TRI(244, 84, 221);
	  COL_TRI(244, 235, 84);
	  COL_TRI(223, 277, 224);
	  COL_TRI(247, 234, 307);
	  COL_TRI(245, 108, 223);
	  COL_TRI(246, 245, 223);
	  COL_TRI(245, 106, 108);
	  COL_TRI(245, 107, 106);
	  COL_TRI(20, 107, 245);
	  COL_TRI(18, 20, 245);
	  COL_TRI(18, 245, 250);
	  COL_TRI(107, 20, 234);
	  COL_TRI(234, 20, 254);
	  COL_TRI(234, 254, 307);
	  COL_TRI(247, 307, 249);
	  COL_TRI(84, 235, 248);
	  COL_TRI(84, 248, 85);
	  COL_TRI(84, 64, 221);
	  COL_TRI(64, 222, 221);
	  COL_TRI(222, 64, 19);
	  COL_TRI(222, 19, 310);
	  COL_TRI(222, 310, 317);
	  COL_TRI(248, 235, 247);
	  COL_TRI(253, 17, 16);
	  COL_TRI(250, 317, 251);
	  COL_TRI(250, 246, 317);
	  COL_TRI(251, 317, 310);
	  COL_TRI(252, 250, 251);
	  COL_TRI(252, 251, 253);
	  COL_TRI(253, 251, 17);
	  COL_TRI(251, 19, 17);
	  COL_TRI(251, 310, 19);
	  COL_TRI(255, 313, 314);
	  COL_TRI(21, 18, 250);
	  COL_TRI(21, 250, 252);
	  COL_TRI(250, 245, 246);
	  COL_TRI(254, 20, 86);
	  COL_TRI(6, 256, 255);
	  COL_TRI(255, 7, 6);
	  COL_TRI(11, 255, 314);
	  COL_TRI(255, 11, 7);
	  COL_TRI(6, 319, 256);
	  COL_TRI(6, 320, 319);
	  COL_TRI(10, 320, 6);
	  COL_TRI(256, 257, 258);
	  COL_TRI(256, 319, 257);
	  COL_TRI(257, 10, 258);
	  COL_TRI(258, 67, 101);
	  COL_TRI(258, 14, 67);
	  COL_TRI(258, 10, 14);
	  COL_TRI(101, 226, 258);
	  COL_TRI(69, 321, 260);
	  COL_TRI(67, 259, 321);
	  COL_TRI(67, 321, 69);
	  COL_TRI(259, 67, 14);
	  COL_TRI(102, 238, 101);
	  COL_TRI(101, 238, 226);
	  COL_TRI(14, 15, 259);
	  COL_TRI(260, 321, 259);
	  COL_TRI(261, 260, 259);
	  COL_TRI(238, 261, 259);
	  COL_TRI(10, 322, 320);
	  COL_TRI(218, 226, 228);
	  COL_TRI(102, 315, 238);
	  COL_TRI(238, 315, 261);
	  COL_TRI(262, 323, 269);
	  COL_TRI(262, 324, 325);
	  COL_TRI(262, 273, 324);
	  COL_TRI(263, 326, 262);
	  COL_TRI(262, 325, 323);
	  COL_TRI(263, 262, 327);
	  COL_TRI(264, 329, 330);
	  COL_TRI(264, 265, 329);
	  COL_TRI(265, 327, 329);
	  COL_TRI(262, 329, 327);
	  COL_TRI(262, 330, 329);
	  COL_TRI(265, 263, 327);
	  COL_TRI(266, 267, 330);
	  COL_TRI(267, 264, 330);
	  COL_TRI(262, 266, 330);
	  COL_TRI(268, 267, 266);
	  COL_TRI(269, 268, 266);
	  COL_TRI(262, 269, 266);
	  COL_TRI(270, 332, 269);
	  COL_TRI(270, 269, 323);
	  COL_TRI(269, 274, 268);
	  COL_TRI(271, 323, 325);
	  COL_TRI(271, 270, 323);
	  COL_TRI(272, 325, 324);
	  COL_TRI(272, 271, 325);
	  COL_TRI(273, 272, 324);
	  COL_TRI(273, 328, 272);
	  COL_TRI(262, 328, 273);
	  COL_TRI(267, 331, 332);
	  COL_TRI(267, 332, 270);
	  COL_TRI(269, 332, 331);
	  COL_TRI(262, 326, 328);
	  COL_TRI(272, 328, 326);
	  COL_TRI(267, 275, 331);
	  COL_TRI(268, 275, 267);
	  COL_TRI(272, 264, 267);
	  COL_TRI(270, 272, 267);
	  COL_TRI(272, 326, 263);
	  COL_TRI(218, 228, 219);
	  COL_TRI(270, 271, 272);
	  COL_TRI(257, 322, 10);
	  COL_TRI(274, 257, 319);
	  COL_TRI(274, 322, 257);
	  COL_TRI(275, 319, 320);
	  COL_TRI(275, 268, 319);
	  COL_TRI(274, 319, 268);
	  COL_TRI(275, 322, 331);
	  COL_TRI(275, 320, 322);
	  COL_TRI(274, 331, 322);
	  COL_TRI(269, 331, 274);
	  COL_TRI(253, 21, 252);
	  COL_TRI(272, 263, 265);
	  COL_TRI(272, 265, 264);
	  COL_TRI(276, 231, 227);
	  COL_TRI(231, 255, 227);
	  COL_TRI(276, 227, 225);
	  COL_TRI(276, 225, 224);
	  COL_TRI(277, 276, 224);
	  COL_TRI(253, 16, 21);
	  COL_TRI(97, 280, 96);
	  COL_TRI(96, 278, 59);
	  COL_TRI(96, 280, 278);
	  COL_TRI(278, 288, 287);
	  COL_TRI(278, 287, 283);
	  COL_TRI(279, 288, 278);
	  COL_TRI(280, 279, 278);
	  COL_TRI(59, 278, 283);
	  COL_TRI(59, 283, 62);
	  COL_TRI(281, 279, 280);
	  COL_TRI(282, 281, 280);
	  COL_TRI(97, 282, 280);
	  COL_TRI(283, 286, 284);
	  COL_TRI(283, 287, 286);
	  COL_TRI(62, 283, 284);
	  COL_TRI(62, 284, 60);
	  COL_TRI(284, 333, 98);
	  COL_TRI(60, 284, 98);
	  COL_TRI(284, 285, 333);
	  COL_TRI(284, 286, 285);
	  COL_TRI(98, 282, 97);
	  COL_TRI(98, 333, 282);
	  COL_TRI(282, 333, 285);
	  COL_TRI(282, 285, 281);
	  COL_TRI(89, 289, 35);
	  COL_TRI(281, 181, 145);
	  COL_TRI(281, 145, 279);
	  COL_TRI(285, 181, 281);
	  COL_TRI(279, 145, 183);
	  COL_TRI(279, 183, 288);
	  COL_TRI(285, 180, 181);
	  COL_TRI(286, 180, 285);
	  COL_TRI(286, 179, 180);
	  COL_TRI(287, 179, 286);
	  COL_TRI(288, 143, 287);
	  COL_TRI(287, 143, 179);
	  COL_TRI(288, 183, 143);
	  COL_TRI(45, 291, 89);
	  COL_TRI(89, 291, 289);
	  COL_TRI(89, 35, 34);
	  COL_TRI(35, 24, 90);
	  COL_TRI(35, 290, 24);
	  COL_TRI(35, 289, 290);
	  COL_TRI(289, 291, 300);
	  COL_TRI(289, 300, 298);
	  COL_TRI(289, 298, 299);
	  COL_TRI(290, 289, 299);
	  COL_TRI(291, 295, 301);
	  COL_TRI(291, 301, 300);
	  COL_TRI(45, 295, 291);
	  COL_TRI(24, 290, 292);
	  COL_TRI(24, 292, 25);
	  COL_TRI(292, 290, 299);
	  COL_TRI(292, 299, 297);
	  COL_TRI(88, 292, 334);
	  COL_TRI(292, 88, 83);
	  COL_TRI(292, 83, 25);
	  COL_TRI(292, 297, 296);
	  COL_TRI(292, 296, 334);
	  COL_TRI(88, 334, 54);
	  COL_TRI(293, 334, 296);
	  COL_TRI(54, 334, 293);
	  COL_TRI(297, 146, 296);
	  COL_TRI(54, 293, 50);
	  COL_TRI(50, 293, 294);
	  COL_TRI(294, 293, 303);
	  COL_TRI(293, 296, 303);
	  COL_TRI(50, 294, 38);
	  COL_TRI(295, 294, 302);
	  COL_TRI(294, 303, 302);
	  COL_TRI(38, 294, 295);
	  COL_TRI(38, 295, 45);
	  COL_TRI(295, 302, 301);
	  COL_TRI(296, 176, 303);
	  COL_TRI(296, 146, 176);
	  COL_TRI(298, 185, 299);
	  COL_TRI(299, 184, 297);
	  COL_TRI(299, 185, 184);
	  COL_TRI(297, 184, 146);
	  COL_TRI(300, 151, 298);
	  COL_TRI(298, 151, 185);
	  COL_TRI(300, 144, 151);
	  COL_TRI(301, 144, 300);
	  COL_TRI(301, 174, 144);
	  COL_TRI(302, 174, 301);
	  COL_TRI(303, 175, 302);
	  COL_TRI(302, 175, 174);
	  COL_TRI(249, 22, 63);
	  COL_TRI(303, 176, 175);
	  COL_TRI(254, 100, 316);
	  COL_TRI(254, 86, 100);
	  COL_TRI(254, 316, 307);
	  COL_TRI(65, 22, 249);
	  COL_TRI(65, 249, 307);
	  COL_TRI(249, 318, 247);
	  COL_TRI(99, 304, 318);
	  COL_TRI(99, 318, 63);
	  COL_TRI(249, 63, 318);
	  COL_TRI(304, 247, 318);
	  COL_TRI(85, 304, 99);
	  COL_TRI(85, 248, 304);
	  COL_TRI(304, 248, 247);
	  COL_TRI(78, 316, 100);
	  COL_TRI(78, 335, 316);
	  COL_TRI(70, 261, 105);
	  COL_TRI(305, 315, 102);
	  COL_TRI(69, 260, 70);
	  COL_TRI(70, 260, 261);
	  COL_TRI(305, 102, 103);
	  COL_TRI(306, 305, 103);
	  COL_TRI(66, 104, 103);
	  COL_TRI(81, 105, 336);
	  COL_TRI(105, 261, 336);
	  COL_TRI(68, 105, 81);
	  COL_TRI(307, 308, 111);
	  COL_TRI(307, 111, 65);
	  COL_TRI(111, 308, 309);
	  COL_TRI(111, 309, 112);
	  COL_TRI(308, 307, 335);
	  COL_TRI(309, 308, 337);
	  COL_TRI(308, 335, 337);
	  COL_TRI(309, 337, 336);
	  COL_TRI(113, 306, 103);
	  COL_TRI(307, 316, 335);
	  COL_TRI(79, 335, 78);
	  COL_TRI(79, 337, 335);
	  COL_TRI(112, 306, 113);
	  COL_TRI(112, 309, 306);
	  COL_TRI(306, 309, 336);
	  COL_TRI(306, 336, 261);
	  COL_TRI(305, 306, 261);
	  COL_TRI(113, 103, 104);
	  COL_TRI(80, 337, 79);
	  COL_TRI(80, 336, 337);
	  COL_TRI(81, 336, 80);
	  COL_TRI_INIT(SURFACE_DEATH_PLANE, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI_INIT(SURFACE_FLOWING_WATER, 125);
	  COL_TRI_SPECIAL(118, 72, 107, 0x0);
	  COL_TRI_SPECIAL(118, 119, 72, 0x0);
	  COL_TRI_SPECIAL(120, 121, 118, 0x0);
	  COL_TRI_SPECIAL(118, 122, 120, 0x0);
	  COL_TRI_SPECIAL(119, 118, 121, 0x0);
	  COL_TRI_SPECIAL(119, 123, 72, 0x0);
	  COL_TRI_SPECIAL(123, 73, 72, 0x0);
	  COL_TRI_SPECIAL(123, 119, 124, 0x0);
	  COL_TRI_SPECIAL(119, 121, 124, 0x0);
	  COL_TRI_SPECIAL(125, 123, 124, 0x0);
	  COL_TRI_SPECIAL(125, 126, 123, 0x0);
	  COL_TRI_SPECIAL(127, 74, 123, 0x0);
	  COL_TRI_SPECIAL(74, 73, 123, 0x0);
	  COL_TRI_SPECIAL(123, 126, 127, 0x0);
	  COL_TRI_SPECIAL(8, 131, 129, 0x0);
	  COL_TRI_SPECIAL(74, 127, 109, 0x0);
	  COL_TRI_SPECIAL(127, 128, 109, 0x0);
	  COL_TRI_SPECIAL(129, 127, 126, 0x0);
	  COL_TRI_SPECIAL(129, 128, 127, 0x0);
	  COL_TRI_SPECIAL(109, 128, 110, 0x0);
	  COL_TRI_SPECIAL(128, 130, 110, 0x0);
	  COL_TRI_SPECIAL(130, 128, 129, 0x0);
	  COL_TRI_SPECIAL(129, 169, 130, 0x0);
	  COL_TRI_SPECIAL(9, 129, 126, 0x0);
	  COL_TRI_SPECIAL(9, 126, 12, 0x0);
	  COL_TRI_SPECIAL(8, 129, 9, 0x0);
	  COL_TRI_SPECIAL(131, 169, 129, 0x0);
	  COL_TRI_SPECIAL(126, 15, 12, 0x0);
	  COL_TRI_SPECIAL(126, 125, 15, 0x0);
	  COL_TRI_SPECIAL(125, 124, 132, 0x0);
	  COL_TRI_SPECIAL(11, 131, 8, 0x0);
	  COL_TRI_SPECIAL(11, 171, 131, 0x0);
	  COL_TRI_SPECIAL(131, 170, 169, 0x0);
	  COL_TRI_SPECIAL(131, 171, 170, 0x0);
	  COL_TRI_SPECIAL(133, 169, 170, 0x0);
	  COL_TRI_SPECIAL(139, 176, 140, 0x0);
	  COL_TRI_SPECIAL(134, 124, 121, 0x0);
	  COL_TRI_SPECIAL(134, 121, 120, 0x0);
	  COL_TRI_SPECIAL(134, 132, 124, 0x0);
	  COL_TRI_SPECIAL(122, 134, 120, 0x0);
	  COL_TRI_SPECIAL(135, 136, 122, 0x0);
	  COL_TRI_SPECIAL(136, 137, 122, 0x0);
	  COL_TRI_SPECIAL(122, 137, 134, 0x0);
	  COL_TRI_SPECIAL(138, 174, 139, 0x0);
	  COL_TRI_SPECIAL(139, 174, 175, 0x0);
	  COL_TRI_SPECIAL(139, 175, 176, 0x0);
	  COL_TRI_SPECIAL(140, 176, 146, 0x0);
	  COL_TRI_SPECIAL(140, 146, 147, 0x0);
	  COL_TRI_SPECIAL(140, 147, 178, 0x0);
	  COL_TRI_SPECIAL(140, 178, 182, 0x0);
	  COL_TRI_SPECIAL(142, 140, 182, 0x0);
	  COL_TRI_SPECIAL(134, 143, 138, 0x0);
	  COL_TRI_SPECIAL(134, 179, 143, 0x0);
	  COL_TRI_SPECIAL(137, 179, 134, 0x0);
	  COL_TRI_SPECIAL(138, 172, 134, 0x0);
	  COL_TRI_SPECIAL(134, 172, 132, 0x0);
	  COL_TRI_SPECIAL(139, 172, 138, 0x0);
	  COL_TRI_SPECIAL(137, 180, 179, 0x0);
	  COL_TRI_SPECIAL(143, 183, 138, 0x0);
	  COL_TRI_SPECIAL(144, 174, 138, 0x0);
	  COL_TRI_SPECIAL(144, 138, 183, 0x0);
	  COL_TRI_SPECIAL(145, 144, 183, 0x0);
	  COL_TRI_SPECIAL(145, 151, 144, 0x0);
	  COL_TRI_SPECIAL(146, 184, 147, 0x0);
	  COL_TRI_SPECIAL(136, 149, 150, 0x0);
	  COL_TRI_SPECIAL(147, 184, 185, 0x0);
	  COL_TRI_SPECIAL(147, 185, 152, 0x0);
	  COL_TRI_SPECIAL(148, 186, 147, 0x0);
	  COL_TRI_SPECIAL(149, 147, 150, 0x0);
	  COL_TRI_SPECIAL(150, 147, 152, 0x0);
	  COL_TRI_SPECIAL(149, 148, 147, 0x0);
	  COL_TRI_SPECIAL(147, 186, 178, 0x0);
	  COL_TRI_SPECIAL(151, 152, 185, 0x0);
	  COL_TRI_SPECIAL(152, 181, 136, 0x0);
	  COL_TRI_SPECIAL(152, 151, 145, 0x0);
	  COL_TRI_SPECIAL(136, 150, 152, 0x0);
	  COL_TRI_SPECIAL(152, 187, 181, 0x0);
	  COL_TRI_SPECIAL(133, 170, 173, 0x0);
	  COL_TRI_SPECIAL(137, 181, 180, 0x0);
	  COL_TRI_SPECIAL(137, 136, 181, 0x0);
	  COL_TRI_SPECIAL(153, 136, 135, 0x0);
	  COL_TRI_SPECIAL(132, 166, 164, 0x0);
	  COL_TRI_SPECIAL(132, 172, 141, 0x0);
	  COL_TRI_SPECIAL(132, 141, 166, 0x0);
	  COL_TRI_SPECIAL(161, 177, 142, 0x0);
	  COL_TRI_SPECIAL(154, 159, 155, 0x0);
	  COL_TRI_SPECIAL(154, 155, 156, 0x0);
	  COL_TRI_SPECIAL(155, 157, 182, 0x0);
	  COL_TRI_SPECIAL(156, 155, 182, 0x0);
	  COL_TRI_SPECIAL(155, 158, 189, 0x0);
	  COL_TRI_SPECIAL(157, 155, 189, 0x0);
	  COL_TRI_SPECIAL(158, 155, 159, 0x0);
	  COL_TRI_SPECIAL(158, 161, 189, 0x0);
	  COL_TRI_SPECIAL(159, 190, 158, 0x0);
	  COL_TRI_SPECIAL(160, 161, 158, 0x0);
	  COL_TRI_SPECIAL(160, 158, 190, 0x0);
	  COL_TRI_SPECIAL(161, 142, 189, 0x0);
	  COL_TRI_SPECIAL(142, 157, 189, 0x0);
	  COL_TRI_SPECIAL(157, 142, 182, 0x0);
	  COL_TRI_SPECIAL(140, 142, 139, 0x0);
	  COL_TRI_SPECIAL(139, 142, 177, 0x0);
	  COL_TRI_SPECIAL(162, 188, 191, 0x0);
	  COL_TRI_SPECIAL(141, 172, 139, 0x0);
	  COL_TRI_SPECIAL(153, 149, 136, 0x0);
	  COL_TRI_SPECIAL(148, 149, 153, 0x0);
	  COL_TRI_SPECIAL(148, 188, 163, 0x0);
	  COL_TRI_SPECIAL(148, 163, 186, 0x0);
	  COL_TRI_SPECIAL(162, 154, 156, 0x0);
	  COL_TRI_SPECIAL(163, 188, 162, 0x0);
	  COL_TRI_SPECIAL(163, 162, 156, 0x0);
	  COL_TRI_SPECIAL(163, 178, 186, 0x0);
	  COL_TRI_SPECIAL(154, 191, 190, 0x0);
	  COL_TRI_SPECIAL(164, 165, 160, 0x0);
	  COL_TRI_SPECIAL(165, 161, 160, 0x0);
	  COL_TRI_SPECIAL(161, 165, 177, 0x0);
	  COL_TRI_SPECIAL(141, 167, 166, 0x0);
	  COL_TRI_SPECIAL(164, 166, 165, 0x0);
	  COL_TRI_SPECIAL(166, 167, 165, 0x0);
	  COL_TRI_SPECIAL(167, 141, 177, 0x0);
	  COL_TRI_SPECIAL(165, 167, 177, 0x0);
	  COL_TRI_SPECIAL(141, 139, 177, 0x0);
	  COL_TRI_SPECIAL(163, 182, 178, 0x0);
	  COL_TRI_SPECIAL(163, 156, 182, 0x0);
	  COL_TRI_SPECIAL(168, 133, 173, 0x0);
	  COL_TRI_SPECIAL(168, 192, 133, 0x0);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 143);
	  COL_TRI(4, 5, 6);
	  COL_TRI(4, 6, 7);
	  COL_TRI(4, 8, 9);
	  COL_TRI(4, 9, 5);
	  COL_TRI(7, 8, 4);
	  COL_TRI(5, 10, 6);
	  COL_TRI(7, 11, 8);
	  COL_TRI(5, 9, 12);
	  COL_TRI(5, 12, 13);
	  COL_TRI(5, 13, 10);
	  COL_TRI(13, 14, 10);
	  COL_TRI(15, 13, 12);
	  COL_TRI(15, 14, 13);
	  COL_TRI(16, 17, 18);
	  COL_TRI(17, 19, 20);
	  COL_TRI(17, 20, 18);
	  COL_TRI(16, 18, 21);
	  COL_TRI(22, 19, 64);
	  COL_TRI(22, 20, 19);
	  COL_TRI(23, 25, 32);
	  COL_TRI(24, 25, 23);
	  COL_TRI(25, 82, 32);
	  COL_TRI(26, 32, 87);
	  COL_TRI(27, 26, 87);
	  COL_TRI(26, 23, 32);
	  COL_TRI(26, 30, 23);
	  COL_TRI(23, 30, 28);
	  COL_TRI(24, 23, 28);
	  COL_TRI(28, 29, 88);
	  COL_TRI(28, 30, 29);
	  COL_TRI(29, 83, 88);
	  COL_TRI(29, 30, 27);
	  COL_TRI(33, 36, 90);
	  COL_TRI(30, 26, 27);
	  COL_TRI(31, 83, 29);
	  COL_TRI(27, 87, 31);
	  COL_TRI(31, 29, 27);
	  COL_TRI(25, 31, 82);
	  COL_TRI(25, 83, 31);
	  COL_TRI(31, 87, 82);
	  COL_TRI(32, 82, 87);
	  COL_TRI(38, 41, 28);
	  COL_TRI(34, 36, 33);
	  COL_TRI(35, 36, 34);
	  COL_TRI(36, 35, 90);
	  COL_TRI(33, 90, 24);
	  COL_TRI(28, 34, 33);
	  COL_TRI(28, 89, 34);
	  COL_TRI(28, 33, 24);
	  COL_TRI(37, 39, 41);
	  COL_TRI(38, 40, 37);
	  COL_TRI(38, 37, 41);
	  COL_TRI(39, 91, 93);
	  COL_TRI(39, 40, 92);
	  COL_TRI(39, 92, 91);
	  COL_TRI(39, 93, 41);
	  COL_TRI(40, 39, 37);
	  COL_TRI(41, 93, 42);
	  COL_TRI(41, 42, 43);
	  COL_TRI(42, 93, 91);
	  COL_TRI(43, 42, 44);
	  COL_TRI(42, 91, 47);
	  COL_TRI(44, 42, 47);
	  COL_TRI(44, 28, 43);
	  COL_TRI(41, 43, 28);
	  COL_TRI(44, 47, 28);
	  COL_TRI(50, 38, 28);
	  COL_TRI(45, 92, 40);
	  COL_TRI(45, 40, 38);
	  COL_TRI(46, 91, 92);
	  COL_TRI(47, 91, 46);
	  COL_TRI(45, 47, 46);
	  COL_TRI(28, 47, 45);
	  COL_TRI(45, 46, 92);
	  COL_TRI(48, 94, 51);
	  COL_TRI(48, 53, 94);
	  COL_TRI(49, 48, 50);
	  COL_TRI(50, 48, 51);
	  COL_TRI(28, 49, 50);
	  COL_TRI(51, 94, 52);
	  COL_TRI(52, 94, 95);
	  COL_TRI(53, 95, 94);
	  COL_TRI(50, 51, 54);
	  COL_TRI(52, 54, 51);
	  COL_TRI(49, 53, 48);
	  COL_TRI(49, 56, 53);
	  COL_TRI(53, 56, 95);
	  COL_TRI(54, 52, 58);
	  COL_TRI(52, 95, 58);
	  COL_TRI(59, 61, 96);
	  COL_TRI(55, 56, 49);
	  COL_TRI(56, 55, 95);
	  COL_TRI(55, 57, 95);
	  COL_TRI(57, 55, 28);
	  COL_TRI(49, 28, 55);
	  COL_TRI(58, 95, 57);
	  COL_TRI(58, 57, 54);
	  COL_TRI(54, 57, 28);
	  COL_TRI(54, 28, 88);
	  COL_TRI(45, 89, 28);
	  COL_TRI(64, 85, 99);
	  COL_TRI(60, 98, 61);
	  COL_TRI(61, 97, 96);
	  COL_TRI(62, 60, 61);
	  COL_TRI(59, 62, 61);
	  COL_TRI(61, 98, 97);
	  COL_TRI(63, 22, 64);
	  COL_TRI(63, 64, 99);
	  COL_TRI(64, 84, 85);
	  COL_TRI(67, 69, 68);
	  COL_TRI(22, 86, 20);
	  COL_TRI(22, 65, 86);
	  COL_TRI(65, 100, 86);
	  COL_TRI(66, 101, 67);
	  COL_TRI(67, 68, 66);
	  COL_TRI(66, 102, 101);
	  COL_TRI(66, 103, 102);
	  COL_TRI(68, 104, 66);
	  COL_TRI(69, 70, 68);
	  COL_TRI(70, 105, 68);
	  COL_TRI(75, 76, 77);
	  COL_TRI(68, 81, 104);
	  COL_TRI(71, 106, 107);
	  COL_TRI(72, 71, 107);
	  COL_TRI(73, 75, 71);
	  COL_TRI(73, 71, 72);
	  COL_TRI(71, 75, 108);
	  COL_TRI(71, 108, 106);
	  COL_TRI(74, 76, 75);
	  COL_TRI(75, 77, 108);
	  COL_TRI(74, 75, 73);
	  COL_TRI(76, 74, 109);
	  COL_TRI(76, 109, 77);
	  COL_TRI(77, 109, 110);
	  COL_TRI(77, 110, 108);
	  COL_TRI(78, 111, 112);
	  COL_TRI(79, 78, 112);
	  COL_TRI(78, 100, 65);
	  COL_TRI(78, 65, 111);
	  COL_TRI(80, 79, 113);
	  COL_TRI(79, 112, 113);
	  COL_TRI(81, 80, 104);
	  COL_TRI(80, 113, 104);
	  COL_TRI_INIT(SURFACE_CAMERA_BOUNDARY, 2);
	  COL_TRI(114, 115, 116);
	  COL_TRI(114, 116, 117);
	  COL_TRI_INIT(SURFACE_NO_CAM_COLLISION, 16);
	  COL_TRI(203, 202, 204);
	  COL_TRI(193, 194, 195);
	  COL_TRI(193, 196, 194);
	  COL_TRI(197, 196, 193);
	  COL_TRI(195, 194, 198);
	  COL_TRI(195, 198, 199);
	  COL_TRI(197, 200, 196);
	  COL_TRI(199, 198, 200);
	  COL_TRI(199, 200, 197);
	  COL_TRI(201, 202, 203);
	  COL_TRI(203, 204, 205);
	  COL_TRI(208, 207, 201);
	  COL_TRI(205, 204, 206);
	  COL_TRI(205, 206, 208);
	  COL_TRI(201, 207, 202);
	  COL_TRI(208, 206, 207);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(1);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start, /*pos*/ -4185, 20, -47, /*yaw*/ 64); // unused, probably an early way to set initial position
	  COL_WATER_BOX_INIT(1);
	  COL_WATER_BOX(0, -1535, -7679, 1536, 3389, 0);
	  COL_END();
	}

	var cotmc = [
	  cotmc_seg7_collision_level
	];

	function ddd_seg7_area_1_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0xB1);
	  COL_VERTEX(4096, -511, -511);
	  COL_VERTEX(3891, -511, 512);
	  COL_VERTEX(4096, -511, 512);
	  COL_VERTEX(3891, -511, -511);
	  COL_VERTEX(4301, -511, 512);
	  COL_VERTEX(4301, -511, -511);
	  COL_VERTEX(-2354, -5426, -1023);
	  COL_VERTEX(-3890, -5426, 1024);
	  COL_VERTEX(-2354, -5426, 1024);
	  COL_VERTEX(-3890, -5426, -1023);
	  COL_VERTEX(5018, -2449, -511);
	  COL_VERTEX(5018, -511, -511);
	  COL_VERTEX(5018, -511, 512);
	  COL_VERTEX(5018, -2449, 512);
	  COL_VERTEX(3174, 1229, 512);
	  COL_VERTEX(3174, -511, 512);
	  COL_VERTEX(5018, 1229, 512);
	  COL_VERTEX(3174, -511, -511);
	  COL_VERTEX(9037, -1732, -511);
	  COL_VERTEX(9037, -2756, -511);
	  COL_VERTEX(9037, -2756, 512);
	  COL_VERTEX(6042, 205, -511);
	  COL_VERTEX(6042, 205, 512);
	  COL_VERTEX(5018, 1229, -511);
	  COL_VERTEX(9037, -1732, 512);
	  COL_VERTEX(3174, 1229, -511);
	  COL_VERTEX(2150, 205, 512);
	  COL_VERTEX(3174, -4607, -511);
	  COL_VERTEX(3174, -4607, 512);
	  COL_VERTEX(2150, -4607, 512);
	  COL_VERTEX(2150, -3583, -511);
	  COL_VERTEX(2150, -4607, -204);
	  COL_VERTEX(2150, -4300, 512);
	  COL_VERTEX(2150, -3890, -511);
	  COL_VERTEX(2150, -3583, 205);
	  COL_VERTEX(-3993, 2048, 3174);
	  COL_VERTEX(-5119, 2048, 3072);
	  COL_VERTEX(-5119, 0, 3072);
	  COL_VERTEX(-3583, -1023, 2458);
	  COL_VERTEX(-3993, 0, 3174);
	  COL_VERTEX(-6143, 2048, 2048);
	  COL_VERTEX(-6143, 0, 2048);
	  COL_VERTEX(-2047, 2048, 3584);
	  COL_VERTEX(-2047, 0, 3584);
	  COL_VERTEX(-1023, 2048, 3072);
	  COL_VERTEX(-1023, 0, 3072);
	  COL_VERTEX(0, 2048, 2048);
	  COL_VERTEX(0, 0, 2048);
	  COL_VERTEX(512, 2048, 1024);
	  COL_VERTEX(512, 0, 1024);
	  COL_VERTEX(512, 2048, -1023);
	  COL_VERTEX(512, 0, -1023);
	  COL_VERTEX(0, 2048, -2047);
	  COL_VERTEX(0, 0, -2047);
	  COL_VERTEX(-613, -1023, -1637);
	  COL_VERTEX(-1330, 2048, -2764);
	  COL_VERTEX(-1330, 0, -2764);
	  COL_VERTEX(-2047, 2048, -3583);
	  COL_VERTEX(-2047, 0, -3583);
	  COL_VERTEX(-4095, 2048, -3583);
	  COL_VERTEX(-4095, 0, -3583);
	  COL_VERTEX(-5119, 2048, -3071);
	  COL_VERTEX(-6143, 2048, -2047);
	  COL_VERTEX(-5119, 0, -3071);
	  COL_VERTEX(-6143, 0, -2047);
	  COL_VERTEX(-6143, 2048, -818);
	  COL_VERTEX(-6143, 0, -818);
	  COL_VERTEX(-5324, -1023, -716);
	  COL_VERTEX(-6655, 2048, 1024);
	  COL_VERTEX(-6655, 0, 1024);
	  COL_VERTEX(-921, -4607, -204);
	  COL_VERTEX(-921, -4300, -511);
	  COL_VERTEX(-921, -3890, -511);
	  COL_VERTEX(-921, -3583, -204);
	  COL_VERTEX(-921, -3583, 205);
	  COL_VERTEX(-921, -3890, 512);
	  COL_VERTEX(-921, -4300, 512);
	  COL_VERTEX(-921, -4607, 205);
	  COL_VERTEX(-3378, -4607, 205);
	  COL_VERTEX(-3276, -4607, 307);
	  COL_VERTEX(-3378, -4607, 0);
	  COL_VERTEX(-3071, -4607, 307);
	  COL_VERTEX(-921, -2047, -613);
	  COL_VERTEX(-2149, -2047, -1637);
	  COL_VERTEX(-1842, -1023, -2047);
	  COL_VERTEX(-1228, -2047, 1229);
	  COL_VERTEX(-921, -2047, 614);
	  COL_VERTEX(-1842, -5119, 819);
	  COL_VERTEX(-1330, -5119, 512);
	  COL_VERTEX(-4709, -1023, 2458);
	  COL_VERTEX(-5938, -1023, 1843);
	  COL_VERTEX(-4914, -2047, 1229);
	  COL_VERTEX(-5221, -2047, 614);
	  COL_VERTEX(-5938, -1023, 819);
	  COL_VERTEX(-4197, -2047, 1536);
	  COL_VERTEX(-4914, -2047, -409);
	  COL_VERTEX(-5221, -5119, 614);
	  COL_VERTEX(-4914, -2047, -1228);
	  COL_VERTEX(-5529, -1023, -1637);
	  COL_VERTEX(-4197, -2047, -1740);
	  COL_VERTEX(-4505, -1023, -2252);
	  COL_VERTEX(-3685, -2047, -2457);
	  COL_VERTEX(-3890, -1023, -2866);
	  COL_VERTEX(-2457, -2047, -2149);
	  COL_VERTEX(-2252, -1023, -2866);
	  COL_VERTEX(-204, -1023, -818);
	  COL_VERTEX(-613, -1023, 819);
	  COL_VERTEX(-613, -1023, 1638);
	  COL_VERTEX(-1945, -2047, 1638);
	  COL_VERTEX(-1637, -1023, 2253);
	  COL_VERTEX(-2252, -1023, 2867);
	  COL_VERTEX(-2457, -2047, 2150);
	  COL_VERTEX(-3685, -2047, 2150);
	  COL_VERTEX(-4914, -5119, 1229);
	  COL_VERTEX(-4300, -5119, -818);
	  COL_VERTEX(-3890, -5119, -1228);
	  COL_VERTEX(-3481, -5119, -1740);
	  COL_VERTEX(-2661, -5119, -1433);
	  COL_VERTEX(-1945, -5119, -1535);
	  COL_VERTEX(-1842, -5119, -818);
	  COL_VERTEX(-2252, -5119, 1229);
	  COL_VERTEX(-3685, -5119, 2150);
	  COL_VERTEX(-4300, -5119, 1843);
	  COL_VERTEX(-3276, -4607, 717);
	  COL_VERTEX(-2866, -4607, 717);
	  COL_VERTEX(-2764, -5119, 1843);
	  COL_VERTEX(-2661, -4607, 614);
	  COL_VERTEX(-3685, -4607, 819);
	  COL_VERTEX(-3890, -4607, 614);
	  COL_VERTEX(-3788, -4607, 205);
	  COL_VERTEX(-4812, -5119, -511);
	  COL_VERTEX(-3890, -4607, -101);
	  COL_VERTEX(-3685, -4607, -306);
	  COL_VERTEX(-3378, -4607, -409);
	  COL_VERTEX(-3276, -4607, -716);
	  COL_VERTEX(-2866, -4607, -716);
	  COL_VERTEX(-2661, -4607, -613);
	  COL_VERTEX(-2457, -4607, -409);
	  COL_VERTEX(-1330, -5119, -511);
	  COL_VERTEX(-2149, -4607, -204);
	  COL_VERTEX(-2149, -4607, 205);
	  COL_VERTEX(-2457, -4607, 410);
	  COL_VERTEX(-921, -5119, 614);
	  COL_VERTEX(-921, -5119, -613);
	  COL_VERTEX(-2969, -4607, 205);
	  COL_VERTEX(-2969, -4607, 0);
	  COL_VERTEX(-3071, -4607, -101);
	  COL_VERTEX(-3276, -4607, -101);
	  COL_VERTEX(-3173, -4914, 102);
	  COL_VERTEX(5018, -2756, -511);
	  COL_VERTEX(5325, -2756, 512);
	  COL_VERTEX(5325, -2756, -511);
	  COL_VERTEX(5018, -2756, 512);
	  COL_VERTEX(6042, -1732, 512);
	  COL_VERTEX(6042, -1732, -511);
	  COL_VERTEX(2150, -4607, -511);
	  COL_VERTEX(2150, 205, -511);
	  COL_VERTEX(2150, -3583, 512);
	  COL_VERTEX(2150, -4300, -511);
	  COL_VERTEX(2150, -4607, 205);
	  COL_VERTEX(2150, -3583, -204);
	  COL_VERTEX(2150, -3890, 512);
	  COL_VERTEX(-1228, -2047, -1228);
	  COL_VERTEX(-1228, -5119, -1228);
	  COL_VERTEX(-1842, -5119, -1842);
	  COL_VERTEX(-1228, -5119, 1229);
	  COL_VERTEX(-1842, -5119, 1843);
	  COL_VERTEX(-5221, -5119, -613);
	  COL_VERTEX(-4914, -5119, -1228);
	  COL_VERTEX(-4300, -5119, -1842);
	  COL_VERTEX(-4300, -5119, 819);
	  COL_VERTEX(-4505, -5119, 410);
	  COL_VERTEX(-4197, -5119, 1536);
	  COL_VERTEX(-3685, -5119, -2149);
	  COL_VERTEX(-2457, -5119, -2149);
	  COL_VERTEX(-2457, -5119, 2150);
	  COL_VERTEX(-3276, -5119, 1741);
	  COL_TRI_INIT(SURFACE_DEFAULT, 298);
	  COL_TRI(14, 16, 12);
	  COL_TRI(6, 7, 8);
	  COL_TRI(6, 9, 7);
	  COL_TRI(10, 11, 12);
	  COL_TRI(10, 12, 13);
	  COL_TRI(4, 12, 11);
	  COL_TRI(14, 12, 15);
	  COL_TRI(17, 11, 23);
	  COL_TRI(18, 149, 19);
	  COL_TRI(19, 150, 20);
	  COL_TRI(19, 151, 150);
	  COL_TRI(10, 150, 151);
	  COL_TRI(10, 13, 150);
	  COL_TRI(20, 152, 153);
	  COL_TRI(20, 153, 24);
	  COL_TRI(24, 154, 18);
	  COL_TRI(16, 21, 22);
	  COL_TRI(22, 152, 16);
	  COL_TRI(22, 153, 152);
	  COL_TRI(22, 21, 154);
	  COL_TRI(22, 154, 153);
	  COL_TRI(16, 23, 21);
	  COL_TRI(23, 154, 21);
	  COL_TRI(24, 153, 154);
	  COL_TRI(18, 154, 149);
	  COL_TRI(23, 149, 154);
	  COL_TRI(14, 25, 23);
	  COL_TRI(14, 23, 16);
	  COL_TRI(26, 25, 14);
	  COL_TRI(15, 17, 27);
	  COL_TRI(15, 27, 28);
	  COL_TRI(17, 23, 25);
	  COL_TRI(28, 155, 29);
	  COL_TRI(29, 26, 14);
	  COL_TRI(29, 14, 28);
	  COL_TRI(28, 27, 155);
	  COL_TRI(30, 26, 157);
	  COL_TRI(30, 156, 26);
	  COL_TRI(26, 156, 25);
	  COL_TRI(27, 25, 156);
	  COL_TRI(27, 156, 155);
	  COL_TRI(31, 155, 158);
	  COL_TRI(32, 29, 159);
	  COL_TRI(33, 30, 160);
	  COL_TRI(34, 157, 161);
	  COL_TRI(35, 37, 36);
	  COL_TRI(36, 41, 40);
	  COL_TRI(36, 37, 41);
	  COL_TRI(37, 89, 90);
	  COL_TRI(37, 90, 41);
	  COL_TRI(38, 89, 37);
	  COL_TRI(39, 38, 37);
	  COL_TRI(35, 39, 37);
	  COL_TRI(40, 41, 69);
	  COL_TRI(41, 90, 93);
	  COL_TRI(41, 93, 69);
	  COL_TRI(40, 69, 68);
	  COL_TRI(42, 39, 35);
	  COL_TRI(43, 38, 39);
	  COL_TRI(42, 43, 39);
	  COL_TRI(50, 49, 48);
	  COL_TRI(44, 43, 42);
	  COL_TRI(43, 110, 38);
	  COL_TRI(44, 45, 43);
	  COL_TRI(45, 110, 43);
	  COL_TRI(46, 45, 44);
	  COL_TRI(46, 47, 45);
	  COL_TRI(47, 109, 45);
	  COL_TRI(45, 109, 110);
	  COL_TRI(48, 47, 46);
	  COL_TRI(48, 49, 47);
	  COL_TRI(47, 107, 109);
	  COL_TRI(49, 107, 47);
	  COL_TRI(56, 84, 54);
	  COL_TRI(50, 51, 49);
	  COL_TRI(51, 106, 49);
	  COL_TRI(49, 106, 107);
	  COL_TRI(52, 51, 50);
	  COL_TRI(52, 53, 51);
	  COL_TRI(53, 54, 51);
	  COL_TRI(54, 105, 51);
	  COL_TRI(51, 105, 106);
	  COL_TRI(55, 53, 52);
	  COL_TRI(55, 56, 53);
	  COL_TRI(56, 54, 53);
	  COL_TRI(57, 56, 55);
	  COL_TRI(57, 58, 56);
	  COL_TRI(58, 84, 56);
	  COL_TRI(65, 64, 62);
	  COL_TRI(59, 58, 57);
	  COL_TRI(59, 60, 58);
	  COL_TRI(58, 104, 84);
	  COL_TRI(60, 104, 58);
	  COL_TRI(61, 60, 59);
	  COL_TRI(62, 63, 61);
	  COL_TRI(61, 63, 60);
	  COL_TRI(62, 64, 63);
	  COL_TRI(63, 100, 102);
	  COL_TRI(63, 102, 60);
	  COL_TRI(64, 100, 63);
	  COL_TRI(60, 102, 104);
	  COL_TRI(71, 33, 72);
	  COL_TRI(65, 66, 64);
	  COL_TRI(64, 98, 100);
	  COL_TRI(66, 67, 64);
	  COL_TRI(67, 98, 64);
	  COL_TRI(68, 66, 65);
	  COL_TRI(68, 69, 66);
	  COL_TRI(69, 67, 66);
	  COL_TRI(69, 93, 67);
	  COL_TRI(70, 158, 71);
	  COL_TRI(71, 158, 33);
	  COL_TRI(75, 32, 76);
	  COL_TRI(72, 33, 160);
	  COL_TRI(72, 160, 73);
	  COL_TRI(70, 31, 158);
	  COL_TRI(73, 160, 34);
	  COL_TRI(73, 34, 74);
	  COL_TRI(74, 34, 161);
	  COL_TRI(74, 161, 75);
	  COL_TRI(75, 161, 32);
	  COL_TRI(79, 128, 127);
	  COL_TRI(76, 32, 159);
	  COL_TRI(76, 159, 77);
	  COL_TRI(77, 159, 31);
	  COL_TRI(77, 31, 70);
	  COL_TRI(78, 80, 129);
	  COL_TRI(79, 78, 128);
	  COL_TRI(78, 129, 128);
	  COL_TRI(80, 131, 129);
	  COL_TRI(81, 79, 123);
	  COL_TRI(79, 127, 123);
	  COL_TRI(82, 163, 143);
	  COL_TRI(82, 162, 163);
	  COL_TRI(83, 163, 162);
	  COL_TRI(84, 162, 54);
	  COL_TRI(84, 83, 162);
	  COL_TRI(54, 162, 82);
	  COL_TRI(90, 91, 92);
	  COL_TRI(85, 86, 165);
	  COL_TRI(86, 142, 165);
	  COL_TRI(85, 165, 166);
	  COL_TRI(87, 166, 165);
	  COL_TRI(88, 165, 142);
	  COL_TRI(88, 87, 165);
	  COL_TRI(89, 91, 90);
	  COL_TRI(90, 92, 93);
	  COL_TRI(91, 96, 92);
	  COL_TRI(92, 96, 95);
	  COL_TRI(93, 92, 95);
	  COL_TRI(93, 95, 67);
	  COL_TRI(94, 113, 91);
	  COL_TRI(91, 113, 96);
	  COL_TRI(89, 94, 91);
	  COL_TRI(95, 167, 168);
	  COL_TRI(95, 168, 97);
	  COL_TRI(96, 167, 95);
	  COL_TRI(67, 95, 97);
	  COL_TRI(67, 97, 98);
	  COL_TRI(104, 103, 83);
	  COL_TRI(97, 169, 99);
	  COL_TRI(97, 168, 169);
	  COL_TRI(98, 97, 99);
	  COL_TRI(98, 99, 100);
	  COL_TRI(99, 169, 173);
	  COL_TRI(99, 173, 101);
	  COL_TRI(100, 99, 101);
	  COL_TRI(100, 101, 102);
	  COL_TRI(101, 173, 174);
	  COL_TRI(101, 174, 103);
	  COL_TRI(102, 101, 103);
	  COL_TRI(102, 103, 104);
	  COL_TRI(103, 164, 83);
	  COL_TRI(103, 174, 164);
	  COL_TRI(107, 108, 109);
	  COL_TRI(104, 83, 84);
	  COL_TRI(83, 164, 163);
	  COL_TRI(54, 82, 105);
	  COL_TRI(105, 82, 86);
	  COL_TRI(105, 86, 106);
	  COL_TRI(86, 85, 107);
	  COL_TRI(106, 86, 107);
	  COL_TRI(107, 85, 108);
	  COL_TRI(38, 94, 89);
	  COL_TRI(85, 166, 108);
	  COL_TRI(108, 175, 111);
	  COL_TRI(108, 166, 175);
	  COL_TRI(109, 108, 110);
	  COL_TRI(108, 111, 110);
	  COL_TRI(110, 111, 112);
	  COL_TRI(110, 112, 38);
	  COL_TRI(111, 121, 112);
	  COL_TRI(111, 175, 121);
	  COL_TRI(38, 112, 94);
	  COL_TRI(112, 121, 122);
	  COL_TRI(112, 122, 94);
	  COL_TRI(94, 122, 113);
	  COL_TRI(96, 170, 171);
	  COL_TRI(96, 113, 170);
	  COL_TRI(96, 130, 167);
	  COL_TRI(96, 171, 130);
	  COL_TRI(113, 122, 172);
	  COL_TRI(113, 172, 170);
	  COL_TRI(114, 168, 167);
	  COL_TRI(114, 167, 130);
	  COL_TRI(114, 169, 168);
	  COL_TRI(114, 115, 169);
	  COL_TRI(115, 173, 169);
	  COL_TRI(116, 174, 173);
	  COL_TRI(115, 116, 173);
	  COL_TRI(117, 164, 174);
	  COL_TRI(116, 117, 174);
	  COL_TRI(118, 163, 164);
	  COL_TRI(117, 118, 164);
	  COL_TRI(118, 119, 163);
	  COL_TRI(119, 143, 163);
	  COL_TRI(87, 120, 166);
	  COL_TRI(120, 175, 166);
	  COL_TRI(127, 172, 176);
	  COL_TRI(120, 125, 175);
	  COL_TRI(121, 175, 125);
	  COL_TRI(122, 121, 176);
	  COL_TRI(121, 125, 176);
	  COL_TRI(122, 176, 172);
	  COL_TRI(123, 125, 124);
	  COL_TRI(124, 125, 126);
	  COL_TRI(125, 120, 126);
	  COL_TRI(123, 176, 125);
	  COL_TRI(126, 87, 141);
	  COL_TRI(126, 120, 87);
	  COL_TRI(127, 176, 123);
	  COL_TRI(128, 172, 127);
	  COL_TRI(128, 170, 172);
	  COL_TRI(129, 170, 128);
	  COL_TRI(129, 171, 170);
	  COL_TRI(130, 171, 129);
	  COL_TRI(131, 130, 129);
	  COL_TRI(132, 130, 131);
	  COL_TRI(132, 114, 130);
	  COL_TRI(133, 114, 132);
	  COL_TRI(133, 115, 114);
	  COL_TRI(116, 115, 133);
	  COL_TRI(134, 116, 133);
	  COL_TRI(138, 88, 142);
	  COL_TRI(135, 116, 134);
	  COL_TRI(135, 117, 116);
	  COL_TRI(136, 118, 135);
	  COL_TRI(118, 117, 135);
	  COL_TRI(137, 118, 136);
	  COL_TRI(137, 119, 118);
	  COL_TRI(138, 119, 137);
	  COL_TRI(139, 138, 137);
	  COL_TRI(119, 138, 143);
	  COL_TRI(140, 138, 139);
	  COL_TRI(140, 88, 138);
	  COL_TRI(138, 142, 143);
	  COL_TRI(141, 88, 140);
	  COL_TRI(141, 87, 88);
	  COL_TRI(76, 77, 142);
	  COL_TRI(86, 76, 142);
	  COL_TRI(86, 75, 76);
	  COL_TRI(142, 77, 70);
	  COL_TRI(142, 70, 143);
	  COL_TRI(143, 72, 82);
	  COL_TRI(143, 70, 71);
	  COL_TRI(143, 71, 72);
	  COL_TRI(86, 74, 75);
	  COL_TRI(73, 74, 86);
	  COL_TRI(73, 86, 82);
	  COL_TRI(82, 72, 73);
	  COL_TRI(81, 123, 124);
	  COL_TRI(144, 81, 124);
	  COL_TRI(144, 124, 126);
	  COL_TRI(144, 126, 141);
	  COL_TRI(145, 144, 140);
	  COL_TRI(144, 141, 140);
	  COL_TRI(147, 132, 131);
	  COL_TRI(145, 140, 139);
	  COL_TRI(145, 139, 137);
	  COL_TRI(146, 145, 137);
	  COL_TRI(146, 137, 136);
	  COL_TRI(146, 134, 133);
	  COL_TRI(146, 135, 134);
	  COL_TRI(146, 136, 135);
	  COL_TRI(147, 146, 133);
	  COL_TRI(147, 133, 132);
	  COL_TRI(80, 147, 131);
	  COL_TRI(3, 15, 1);
	  COL_TRI(3, 17, 15);
	  COL_TRI(4, 11, 5);
	  COL_TRI(81, 148, 79);
	  COL_TRI(144, 148, 81);
	  COL_TRI(79, 148, 78);
	  COL_TRI(78, 148, 80);
	  COL_TRI(148, 147, 80);
	  COL_TRI(145, 148, 144);
	  COL_TRI(147, 148, 146);
	  COL_TRI(146, 148, 145);
	  COL_TRI_INIT(SURFACE_INSTANT_WARP_1D, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI_INIT(SURFACE_INSTANT_WARP_1E, 2);
	  COL_TRI(2, 4, 5);
	  COL_TRI(2, 5, 0);
	  COL_TRI_STOP();
	  COL_WATER_BOX_INIT(1);
	  COL_WATER_BOX(0, -7167, -4095,  6144,  4096, 0);
	  COL_END();
	}

	function ddd_seg7_area_2_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x12D);
	  COL_VERTEX(-4095, -511, -511);
	  COL_VERTEX(-4300, -511, 512);
	  COL_VERTEX(-4095, -511, 512);
	  COL_VERTEX(-4300, -511, -511);
	  COL_VERTEX(-3890, -511, 512);
	  COL_VERTEX(-3890, -511, -511);
	  COL_VERTEX(4941, -3063, -6041);
	  COL_VERTEX(2893, -3063, -7167);
	  COL_VERTEX(2893, -3063, -6041);
	  COL_VERTEX(4941, -3063, -7167);
	  COL_VERTEX(1233, 110, 3463);
	  COL_VERTEX(2319, 110, 4549);
	  COL_VERTEX(2391, -196, 3752);
	  COL_VERTEX(2029, -196, 3390);
	  COL_VERTEX(5660, -196, 3535);
	  COL_VERTEX(5298, -196, 3897);
	  COL_VERTEX(6456, 110, 3608);
	  COL_VERTEX(5370, 110, 4694);
	  COL_VERTEX(3098, 1544, -2044);
	  COL_VERTEX(3098, 725, -2044);
	  COL_VERTEX(3917, 725, -2044);
	  COL_VERTEX(3098, 725, -2146);
	  COL_VERTEX(3917, 725, -2146);
	  COL_VERTEX(3917, 1544, -2044);
	  COL_VERTEX(3917, 1544, -2146);
	  COL_VERTEX(3098, 1544, -2146);
	  COL_VERTEX(5453, 725, -2146);
	  COL_VERTEX(5555, 725, -2454);
	  COL_VERTEX(5555, 725, -2044);
	  COL_VERTEX(4634, 725, -2044);
	  COL_VERTEX(5453, 1544, -2146);
	  COL_VERTEX(4634, 725, -2146);
	  COL_VERTEX(5453, 725, -2454);
	  COL_VERTEX(5453, 1544, -2454);
	  COL_VERTEX(5555, 1544, -2044);
	  COL_VERTEX(4634, 1544, -2044);
	  COL_VERTEX(4634, 1544, -2146);
	  COL_VERTEX(5555, 1544, -2454);
	  COL_VERTEX(1715, 929, -1279);
	  COL_VERTEX(1715, 929, -1842);
	  COL_VERTEX(1674, 827, -1279);
	  COL_VERTEX(1674, 827, -1883);
	  COL_VERTEX(2319, 827, -1883);
	  COL_VERTEX(2319, 929, -1279);
	  COL_VERTEX(2278, 929, -1279);
	  COL_VERTEX(2278, 929, -1842);
	  COL_VERTEX(1674, 1544, -1279);
	  COL_VERTEX(1674, 929, -1279);
	  COL_VERTEX(1715, 1544, -1279);
	  COL_VERTEX(1674, 1544, -1883);
	  COL_VERTEX(1715, 1544, -1842);
	  COL_VERTEX(2319, 1544, -1883);
	  COL_VERTEX(2319, 1544, -1279);
	  COL_VERTEX(2319, 827, -1279);
	  COL_VERTEX(2278, 1544, -1279);
	  COL_VERTEX(2278, 1544, -1842);
	  COL_VERTEX(6989, 110, -1020);
	  COL_VERTEX(6579, 110, -1020);
	  COL_VERTEX(6579, 110, 3485);
	  COL_VERTEX(6989, 110, 3485);
	  COL_VERTEX(6989, 110, 6659);
	  COL_VERTEX(3405, 110, 5635);
	  COL_VERTEX(845, 110, 6659);
	  COL_VERTEX(4429, 110, 5635);
	  COL_VERTEX(845, 110, 3075);
	  COL_VERTEX(1858, -3370, -2337);
	  COL_VERTEX(2438, -3370, -2916);
	  COL_VERTEX(1858, -4087, -2337);
	  COL_VERTEX(2438, -4087, -2916);
	  COL_VERTEX(1496, -3370, -2699);
	  COL_VERTEX(1496, -4087, -2699);
	  COL_VERTEX(2076, -3370, -3278);
	  COL_VERTEX(2076, -4087, -3278);
	  COL_VERTEX(3063, -3319, -682);
	  COL_VERTEX(6989, 110, 105);
	  COL_VERTEX(6579, 110, 105);
	  COL_VERTEX(6579, 520, 105);
	  COL_VERTEX(6989, 520, 208);
	  COL_VERTEX(6579, 520, -610);
	  COL_VERTEX(6579, 110, -610);
	  COL_VERTEX(6989, 110, -610);
	  COL_VERTEX(6989, 520, -508);
	  COL_VERTEX(1858, -4087, -2192);
	  COL_VERTEX(1424, -3268, -2626);
	  COL_VERTEX(2148, -4087, -3350);
	  COL_VERTEX(2583, -4087, -2916);
	  COL_VERTEX(1050, 110, 3280);
	  COL_VERTEX(1050, 110, 3485);
	  COL_VERTEX(6784, 110, 3587);
	  COL_VERTEX(6784, 110, 3382);
	  COL_VERTEX(6989, 110, 3792);
	  COL_VERTEX(2531, 110, 5492);
	  COL_VERTEX(2386, 110, 5348);
	  COL_VERTEX(2096, 110, 5348);
	  COL_VERTEX(3234, -3319, -170);
	  COL_VERTEX(3575, -3319, -170);
	  COL_VERTEX(3746, -3319, -340);
	  COL_VERTEX(3746, -3319, -682);
	  COL_VERTEX(3575, -3319, -852);
	  COL_VERTEX(3063, -3319, -340);
	  COL_VERTEX(3234, -3319, -852);
	  COL_VERTEX(6989, 520, 105);
	  COL_VERTEX(6579, 520, 208);
	  COL_VERTEX(6579, 110, 208);
	  COL_VERTEX(6989, 110, 208);
	  COL_VERTEX(6579, 520, -508);
	  COL_VERTEX(6989, 520, -610);
	  COL_VERTEX(6579, 110, -508);
	  COL_VERTEX(6989, 110, -508);
	  COL_VERTEX(1858, -3268, -2192);
	  COL_VERTEX(1424, -4087, -2626);
	  COL_VERTEX(2583, -3268, -2916);
	  COL_VERTEX(2148, -3268, -3350);
	  COL_VERTEX(1050, 1544, 3485);
	  COL_VERTEX(845, 1544, 3689);
	  COL_VERTEX(845, 110, 3689);
	  COL_VERTEX(1050, 1544, 3280);
	  COL_VERTEX(845, 1544, 3075);
	  COL_VERTEX(6784, 1544, 3382);
	  COL_VERTEX(6989, 1544, 3177);
	  COL_VERTEX(6989, 110, 3177);
	  COL_VERTEX(6784, 1544, 3587);
	  COL_VERTEX(6989, 1544, 3792);
	  COL_VERTEX(2531, 1544, 5492);
	  COL_VERTEX(2531, 1544, 5782);
	  COL_VERTEX(2531, 110, 5782);
	  COL_VERTEX(2386, 1544, 5348);
	  COL_VERTEX(2096, 1544, 5348);
	  COL_VERTEX(5350, 827, 1129);
	  COL_VERTEX(4941, 827, 1129);
	  COL_VERTEX(4941, 929, 1129);
	  COL_VERTEX(5350, 827, 1437);
	  COL_VERTEX(4941, 827, 1437);
	  COL_VERTEX(4941, 929, 1437);
	  COL_VERTEX(5862, 827, 1437);
	  COL_VERTEX(5350, 929, 1129);
	  COL_VERTEX(5658, 929, 720);
	  COL_VERTEX(5658, 827, 720);
	  COL_VERTEX(5350, 827, 720);
	  COL_VERTEX(5350, 929, 720);
	  COL_VERTEX(5862, 827, 720);
	  COL_VERTEX(5862, 929, 1437);
	  COL_VERTEX(5658, 827, 413);
	  COL_VERTEX(5862, 929, 413);
	  COL_VERTEX(5658, 929, 413);
	  COL_VERTEX(5862, 929, 720);
	  COL_VERTEX(5350, 929, 1437);
	  COL_VERTEX(3302, 776, 3741);
	  COL_VERTEX(2688, 878, 3741);
	  COL_VERTEX(3302, 878, 3741);
	  COL_VERTEX(3302, 878, 3433);
	  COL_VERTEX(2688, 878, 3433);
	  COL_VERTEX(5350, 878, 3075);
	  COL_VERTEX(5350, 878, 3382);
	  COL_VERTEX(4941, 776, 3792);
	  COL_VERTEX(5350, 776, 3382);
	  COL_VERTEX(5837, 878, 3792);
	  COL_VERTEX(4941, 878, 3792);
	  COL_VERTEX(4941, 878, 3382);
	  COL_VERTEX(5837, 878, 3075);
	  COL_VERTEX(6989, 1544, 6249);
	  COL_VERTEX(2381, 1544, 105);
	  COL_VERTEX(2893, 1544, -2454);
	  COL_VERTEX(2995, -3268, -306);
	  COL_VERTEX(3610, -3268, -101);
	  COL_VERTEX(3814, -3268, -716);
	  COL_VERTEX(3200, -3268, -921);
	  COL_VERTEX(-5017, 1229, 512);
	  COL_VERTEX(-3173, -2449, -511);
	  COL_VERTEX(2319, -401, 4549);
	  COL_VERTEX(2029, -298, 3390);
	  COL_VERTEX(845, -1015, 3075);
	  COL_VERTEX(2391, -298, 3752);
	  COL_VERTEX(3405, -1015, 5635);
	  COL_VERTEX(4429, -1015, 5635);
	  COL_VERTEX(845, -4087, 3075);
	  COL_VERTEX(6579, -606, -1020);
	  COL_VERTEX(6579, -606, 3485);
	  COL_VERTEX(6989, -4087, -2047);
	  COL_VERTEX(6989, -1015, 3075);
	  COL_VERTEX(6456, -401, 3608);
	  COL_VERTEX(5370, -401, 4694);
	  COL_VERTEX(4941, -1015, -4095);
	  COL_VERTEX(4941, 2568, -4095);
	  COL_VERTEX(6989, -1015, -2047);
	  COL_VERTEX(6989, 2568, -2047);
	  COL_VERTEX(6989, -1015, -1020);
	  COL_VERTEX(6989, 2568, 4096);
	  COL_VERTEX(845, -4087, -4095);
	  COL_VERTEX(6989, -4087, -4095);
	  COL_VERTEX(1357, -4087, 0);
	  COL_VERTEX(2483, -3626, -101);
	  COL_VERTEX(1664, -4087, -1228);
	  COL_VERTEX(2893, -4087, -3071);
	  COL_VERTEX(5026, -3626, -1156);
	  COL_VERTEX(3931, -3626, -1462);
	  COL_VERTEX(6989, -4087, 5632);
	  COL_VERTEX(6477, -4087, 1024);
	  COL_VERTEX(4429, -4087, 4096);
	  COL_VERTEX(4655, -3626, 710);
	  COL_VERTEX(1869, -4087, 2560);
	  COL_VERTEX(2845, -3626, 1072);
	  COL_VERTEX(845, -2756, -511);
	  COL_VERTEX(-5017, -511, 512);
	  COL_VERTEX(-5017, -511, -511);
	  COL_VERTEX(-5017, -4607, -511);
	  COL_VERTEX(-5017, -4607, 512);
	  COL_VERTEX(-6041, -4607, 512);
	  COL_VERTEX(-3173, 1229, 512);
	  COL_VERTEX(-2149, 205, 512);
	  COL_VERTEX(-3173, 1229, -511);
	  COL_VERTEX(-6041, 205, 512);
	  COL_VERTEX(-6041, -3583, -511);
	  COL_VERTEX(-6041, -3583, 205);
	  COL_VERTEX(-6041, -3890, -511);
	  COL_VERTEX(-6041, -4300, 512);
	  COL_VERTEX(-6041, -4607, -204);
	  COL_VERTEX(845, -1732, -511);
	  COL_VERTEX(845, -1732, 512);
	  COL_VERTEX(845, -2756, 512);
	  COL_VERTEX(4941, -4087, -4095);
	  COL_VERTEX(2893, -3063, -4095);
	  COL_VERTEX(845, -1015, -2047);
	  COL_VERTEX(845, 2568, 4096);
	  COL_VERTEX(845, 2568, -2047);
	  COL_VERTEX(2893, -1015, -4095);
	  COL_VERTEX(2893, 8, 6144);
	  COL_VERTEX(2893, 2568, 6144);
	  COL_VERTEX(845, -4087, -2047);
	  COL_VERTEX(3610, -3268, -921);
	  COL_VERTEX(3931, -3626, 1434);
	  COL_VERTEX(2995, -3268, -716);
	  COL_VERTEX(3207, -3626, -1462);
	  COL_VERTEX(5298, -298, 3897);
	  COL_VERTEX(5660, -298, 3535);
	  COL_VERTEX(4941, -1015, -7167);
	  COL_VERTEX(1971, 929, 1488);
	  COL_VERTEX(1971, 725, 1488);
	  COL_VERTEX(1971, 725, 361);
	  COL_VERTEX(1254, 929, 1488);
	  COL_VERTEX(1254, 725, 1488);
	  COL_VERTEX(1254, 929, 361);
	  COL_VERTEX(2319, 929, -1883);
	  COL_VERTEX(5862, 827, 413);
	  COL_VERTEX(2688, 776, 3741);
	  COL_VERTEX(2688, 776, 3433);
	  COL_VERTEX(3302, 776, 3433);
	  COL_VERTEX(5350, 776, 3075);
	  COL_VERTEX(4941, 776, 3382);
	  COL_VERTEX(5837, 776, 3075);
	  COL_VERTEX(5837, 776, 3792);
	  COL_VERTEX(845, 1544, 6249);
	  COL_VERTEX(845, 1544, 105);
	  COL_VERTEX(6989, 1544, 105);
	  COL_VERTEX(845, 1544, -2454);
	  COL_VERTEX(2381, 1544, -2454);
	  COL_VERTEX(5453, 1544, -1942);
	  COL_VERTEX(6989, 1544, -2454);
	  COL_VERTEX(5453, 1544, 105);
	  COL_VERTEX(2893, 1544, -1942);
	  COL_VERTEX(3200, -3268, -101);
	  COL_VERTEX(3814, -3268, -306);
	  COL_VERTEX(-3173, -511, 512);
	  COL_VERTEX(-3173, -511, -511);
	  COL_VERTEX(-3173, -2449, 512);
	  COL_VERTEX(-2149, 205, -511);
	  COL_VERTEX(-5017, 1229, -511);
	  COL_VERTEX(1233, -401, 3463);
	  COL_VERTEX(3405, -4087, 5635);
	  COL_VERTEX(4429, -4087, 5635);
	  COL_VERTEX(6989, -4087, 3075);
	  COL_VERTEX(2893, -4087, -4095);
	  COL_VERTEX(6989, 110, 4096);
	  COL_VERTEX(4941, 8, 6144);
	  COL_VERTEX(6989, 8, 4096);
	  COL_VERTEX(2893, 2568, -4095);
	  COL_VERTEX(4941, 2568, 6144);
	  COL_VERTEX(4941, -4087, -3583);
	  COL_VERTEX(845, -4087, 5632);
	  COL_VERTEX(2734, -3626, -776);
	  COL_VERTEX(6067, -4087, -1535);
	  COL_VERTEX(-2866, -2756, 512);
	  COL_VERTEX(-2866, -2756, -511);
	  COL_VERTEX(-6041, 205, -511);
	  COL_VERTEX(-6041, -4607, -511);
	  COL_VERTEX(-2149, -1732, 512);
	  COL_VERTEX(-3173, -2756, 512);
	  COL_VERTEX(-2149, -1732, -511);
	  COL_VERTEX(-6041, -3583, 512);
	  COL_VERTEX(-3173, -2756, -511);
	  COL_VERTEX(-6041, -3890, 512);
	  COL_VERTEX(-6041, -3583, -204);
	  COL_VERTEX(-6041, -4607, 205);
	  COL_VERTEX(-6041, -4300, -511);
	  COL_VERTEX(4941, -3063, -4095);
	  COL_VERTEX(2893, -1015, -7167);
	  COL_VERTEX(845, -1015, 4096);
	  COL_VERTEX(845, 8, 4096);
	  COL_VERTEX(1254, 725, 361);
	  COL_VERTEX(1971, 929, 361);
	  COL_VERTEX(1674, 929, -1883);
	  COL_TRI_INIT(SURFACE_DEFAULT, 279);
	  COL_TRI(138, 134, 131);
	  COL_TRI(128, 129, 130);
	  COL_TRI(129, 128, 131);
	  COL_TRI(129, 131, 132);
	  COL_TRI(130, 129, 132);
	  COL_TRI(133, 132, 134);
	  COL_TRI(130, 132, 133);
	  COL_TRI(128, 130, 135);
	  COL_TRI(136, 137, 138);
	  COL_TRI(136, 138, 139);
	  COL_TRI(138, 140, 134);
	  COL_TRI(146, 145, 139);
	  COL_TRI(141, 134, 243);
	  COL_TRI(133, 134, 141);
	  COL_TRI(142, 140, 137);
	  COL_TRI(142, 243, 140);
	  COL_TRI(143, 243, 142);
	  COL_TRI(143, 142, 144);
	  COL_TRI(144, 142, 137);
	  COL_TRI(144, 137, 136);
	  COL_TRI(141, 243, 143);
	  COL_TRI(136, 145, 143);
	  COL_TRI(136, 143, 144);
	  COL_TRI(146, 141, 145);
	  COL_TRI(152, 247, 155);
	  COL_TRI(133, 146, 135);
	  COL_TRI(133, 135, 130);
	  COL_TRI(147, 244, 245);
	  COL_TRI(147, 245, 246);
	  COL_TRI(148, 244, 147);
	  COL_TRI(148, 147, 149);
	  COL_TRI(149, 147, 246);
	  COL_TRI(150, 246, 245);
	  COL_TRI(150, 245, 151);
	  COL_TRI(151, 245, 244);
	  COL_TRI(149, 246, 150);
	  COL_TRI(151, 244, 148);
	  COL_TRI(150, 148, 149);
	  COL_TRI(150, 151, 148);
	  COL_TRI(152, 155, 153);
	  COL_TRI(153, 155, 248);
	  COL_TRI(154, 248, 155);
	  COL_TRI(155, 247, 249);
	  COL_TRI(155, 249, 250);
	  COL_TRI(156, 250, 249);
	  COL_TRI(157, 154, 250);
	  COL_TRI(157, 250, 156);
	  COL_TRI(155, 250, 154);
	  COL_TRI(158, 154, 157);
	  COL_TRI(158, 248, 154);
	  COL_TRI(156, 249, 159);
	  COL_TRI(159, 249, 247);
	  COL_TRI(159, 247, 152);
	  COL_TRI(153, 248, 158);
	  COL_TRI(153, 159, 152);
	  COL_TRI(153, 158, 157);
	  COL_TRI(153, 157, 156);
	  COL_TRI(153, 156, 159);
	  COL_TRI(139, 138, 128);
	  COL_TRI(33, 257, 253);
	  COL_TRI(139, 128, 135);
	  COL_TRI(160, 251, 252);
	  COL_TRI(160, 252, 253);
	  COL_TRI(161, 252, 254);
	  COL_TRI(161, 254, 255);
	  COL_TRI(162, 33, 256);
	  COL_TRI(33, 253, 258);
	  COL_TRI(162, 256, 259);
	  COL_TRI(163, 99, 73);
	  COL_TRI(163, 73, 231);
	  COL_TRI(163, 94, 99);
	  COL_TRI(163, 260, 94);
	  COL_TRI(94, 260, 164);
	  COL_TRI(94, 164, 95);
	  COL_TRI(164, 261, 96);
	  COL_TRI(95, 164, 96);
	  COL_TRI(165, 96, 261);
	  COL_TRI(97, 165, 229);
	  COL_TRI(165, 97, 96);
	  COL_TRI(97, 229, 98);
	  COL_TRI(166, 98, 229);
	  COL_TRI(166, 100, 98);
	  COL_TRI(166, 231, 73);
	  COL_TRI(166, 73, 100);
	  COL_TRI(4, 262, 263);
	  COL_TRI(4, 263, 5);
	  COL_TRI(167, 262, 203);
	  COL_TRI(167, 208, 262);
	  COL_TRI(3, 204, 203);
	  COL_TRI(3, 203, 1);
	  COL_TRI(169, 172, 11);
	  COL_TRI(170, 169, 267);
	  COL_TRI(170, 172, 169);
	  COL_TRI(169, 61, 173);
	  COL_TRI(169, 11, 61);
	  COL_TRI(171, 169, 173);
	  COL_TRI(171, 267, 169);
	  COL_TRI(172, 12, 11);
	  COL_TRI(13, 170, 267);
	  COL_TRI(63, 173, 61);
	  COL_TRI(173, 175, 171);
	  COL_TRI(173, 268, 175);
	  COL_TRI(63, 174, 173);
	  COL_TRI(174, 268, 173);
	  COL_TRI(64, 10, 267);
	  COL_TRI(171, 64, 267);
	  COL_TRI(10, 13, 267);
	  COL_TRI(178, 179, 184);
	  COL_TRI(175, 218, 171);
	  COL_TRI(171, 218, 222);
	  COL_TRI(176, 177, 58);
	  COL_TRI(177, 180, 58);
	  COL_TRI(177, 181, 180);
	  COL_TRI(177, 174, 181);
	  COL_TRI(177, 179, 174);
	  COL_TRI(178, 270, 179);
	  COL_TRI(234, 233, 14);
	  COL_TRI(179, 269, 174);
	  COL_TRI(174, 269, 268);
	  COL_TRI(174, 63, 181);
	  COL_TRI(63, 17, 181);
	  COL_TRI(17, 233, 181);
	  COL_TRI(17, 15, 233);
	  COL_TRI(180, 181, 234);
	  COL_TRI(181, 233, 234);
	  COL_TRI(180, 14, 16);
	  COL_TRI(180, 234, 14);
	  COL_TRI(180, 16, 58);
	  COL_TRI(233, 15, 14);
	  COL_TRI(56, 272, 187);
	  COL_TRI(182, 178, 184);
	  COL_TRI(183, 182, 184);
	  COL_TRI(183, 184, 185);
	  COL_TRI(184, 186, 56);
	  COL_TRI(185, 184, 56);
	  COL_TRI(186, 179, 177);
	  COL_TRI(186, 176, 56);
	  COL_TRI(186, 177, 176);
	  COL_TRI(176, 57, 56);
	  COL_TRI(185, 56, 187);
	  COL_TRI(192, 232, 193);
	  COL_TRI(187, 273, 276);
	  COL_TRI(187, 274, 273);
	  COL_TRI(188, 193, 277);
	  COL_TRI(188, 192, 193);
	  COL_TRI(189, 188, 277);
	  COL_TRI(190, 192, 188);
	  COL_TRI(190, 188, 278);
	  COL_TRI(191, 279, 192);
	  COL_TRI(190, 191, 192);
	  COL_TRI(192, 279, 232);
	  COL_TRI(193, 232, 195);
	  COL_TRI(193, 195, 277);
	  COL_TRI(194, 280, 277);
	  COL_TRI(195, 194, 277);
	  COL_TRI(189, 277, 280);
	  COL_TRI(196, 189, 197);
	  COL_TRI(189, 280, 197);
	  COL_TRI(194, 197, 280);
	  COL_TRI(194, 199, 197);
	  COL_TRI(197, 199, 198);
	  COL_TRI(196, 197, 198);
	  COL_TRI(198, 278, 196);
	  COL_TRI(199, 230, 198);
	  COL_TRI(198, 230, 201);
	  COL_TRI(198, 201, 200);
	  COL_TRI(198, 200, 278);
	  COL_TRI(203, 204, 205);
	  COL_TRI(200, 201, 190);
	  COL_TRI(201, 191, 190);
	  COL_TRI(200, 190, 278);
	  COL_TRI(168, 281, 282);
	  COL_TRI(168, 264, 281);
	  COL_TRI(202, 282, 281);
	  COL_TRI(202, 281, 219);
	  COL_TRI(203, 205, 206);
	  COL_TRI(167, 266, 210);
	  COL_TRI(204, 210, 266);
	  COL_TRI(204, 263, 210);
	  COL_TRI(205, 283, 284);
	  COL_TRI(205, 266, 283);
	  COL_TRI(206, 205, 284);
	  COL_TRI(207, 167, 206);
	  COL_TRI(206, 284, 207);
	  COL_TRI(208, 265, 209);
	  COL_TRI(208, 210, 265);
	  COL_TRI(167, 210, 208);
	  COL_TRI(212, 283, 211);
	  COL_TRI(209, 265, 287);
	  COL_TRI(210, 287, 265);
	  COL_TRI(209, 285, 286);
	  COL_TRI(209, 287, 285);
	  COL_TRI(209, 286, 208);
	  COL_TRI(211, 266, 167);
	  COL_TRI(211, 283, 266);
	  COL_TRI(207, 211, 167);
	  COL_TRI(216, 284, 293);
	  COL_TRI(212, 211, 288);
	  COL_TRI(213, 288, 290);
	  COL_TRI(214, 212, 291);
	  COL_TRI(215, 207, 292);
	  COL_TRI(218, 285, 287);
	  COL_TRI(168, 263, 262);
	  COL_TRI(217, 287, 289);
	  COL_TRI(217, 289, 202);
	  COL_TRI(218, 287, 217);
	  COL_TRI(219, 285, 218);
	  COL_TRI(219, 286, 285);
	  COL_TRI(210, 289, 287);
	  COL_TRI(168, 262, 264);
	  COL_TRI(13, 172, 170);
	  COL_TRI(13, 12, 172);
	  COL_TRI(220, 221, 271);
	  COL_TRI(220, 294, 221);
	  COL_TRI(179, 270, 269);
	  COL_TRI(6, 221, 294);
	  COL_TRI(6, 8, 221);
	  COL_TRI(221, 295, 225);
	  COL_TRI(221, 7, 295);
	  COL_TRI(182, 275, 225);
	  COL_TRI(182, 183, 275);
	  COL_TRI(182, 220, 178);
	  COL_TRI(225, 295, 235);
	  COL_TRI(218, 217, 222);
	  COL_TRI(222, 271, 225);
	  COL_TRI(222, 228, 271);
	  COL_TRI(222, 217, 202);
	  COL_TRI(222, 202, 228);
	  COL_TRI(223, 296, 222);
	  COL_TRI(223, 222, 224);
	  COL_TRI(224, 222, 225);
	  COL_TRI(224, 225, 275);
	  COL_TRI(225, 235, 182);
	  COL_TRI(226, 227, 276);
	  COL_TRI(226, 276, 273);
	  COL_TRI(227, 297, 223);
	  COL_TRI(227, 226, 297);
	  COL_TRI(228, 202, 219);
	  COL_TRI(228, 219, 175);
	  COL_TRI(175, 219, 218);
	  COL_TRI(165, 261, 199);
	  COL_TRI(194, 165, 199);
	  COL_TRI(165, 194, 195);
	  COL_TRI(199, 261, 164);
	  COL_TRI(199, 164, 230);
	  COL_TRI(164, 260, 201);
	  COL_TRI(230, 164, 201);
	  COL_TRI(201, 260, 163);
	  COL_TRI(201, 163, 191);
	  COL_TRI(191, 163, 231);
	  COL_TRI(191, 231, 279);
	  COL_TRI(182, 235, 9);
	  COL_TRI(231, 166, 232);
	  COL_TRI(231, 232, 279);
	  COL_TRI(166, 229, 195);
	  COL_TRI(232, 166, 195);
	  COL_TRI(229, 165, 195);
	  COL_TRI(176, 58, 57);
	  COL_TRI(235, 295, 7);
	  COL_TRI(235, 7, 9);
	  COL_TRI(238, 236, 237);
	  COL_TRI(182, 9, 294);
	  COL_TRI(236, 239, 240);
	  COL_TRI(236, 240, 237);
	  COL_TRI(237, 240, 298);
	  COL_TRI(237, 298, 238);
	  COL_TRI(238, 299, 236);
	  COL_TRI(242, 47, 43);
	  COL_TRI(239, 236, 299);
	  COL_TRI(239, 299, 241);
	  COL_TRI(240, 239, 241);
	  COL_TRI(240, 241, 298);
	  COL_TRI(241, 299, 238);
	  COL_TRI(241, 238, 298);
	  COL_TRI(53, 40, 41);
	  COL_TRI(47, 40, 53);
	  COL_TRI(242, 300, 47);
	  COL_TRI(47, 53, 43);
	  COL_TRI(53, 41, 42);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 4);
	  COL_TRI(10, 11, 12);
	  COL_TRI(10, 12, 13);
	  COL_TRI(14, 15, 16);
	  COL_TRI(15, 17, 16);
	  COL_TRI_INIT(SURFACE_INSTANT_WARP_1D, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI_INIT(SURFACE_INSTANT_WARP_1E, 2);
	  COL_TRI(2, 4, 5);
	  COL_TRI(2, 5, 0);
	  COL_TRI_INIT(SURFACE_NOISE_DEFAULT, 7);
	  COL_TRI(61, 64, 62);
	  COL_TRI(56, 57, 58);
	  COL_TRI(59, 56, 58);
	  COL_TRI(60, 59, 58);
	  COL_TRI(61, 62, 60);
	  COL_TRI(60, 63, 61);
	  COL_TRI(60, 58, 63);
	  COL_TRI_INIT(SURFACE_WARP, 2);
	  COL_TRI(6, 7, 8);
	  COL_TRI(6, 9, 7);
	  COL_TRI_INIT(SURFACE_NO_CAM_COLLISION, 42);
	  COL_TRI(26, 32, 27);
	  COL_TRI(18, 19, 20);
	  COL_TRI(20, 19, 21);
	  COL_TRI(20, 21, 22);
	  COL_TRI(23, 20, 22);
	  COL_TRI(18, 20, 23);
	  COL_TRI(24, 22, 21);
	  COL_TRI(24, 21, 25);
	  COL_TRI(25, 21, 19);
	  COL_TRI(23, 22, 24);
	  COL_TRI(25, 19, 18);
	  COL_TRI(26, 27, 28);
	  COL_TRI(26, 28, 29);
	  COL_TRI(30, 26, 31);
	  COL_TRI(29, 31, 26);
	  COL_TRI(34, 28, 27);
	  COL_TRI(35, 28, 34);
	  COL_TRI(35, 29, 28);
	  COL_TRI(36, 29, 35);
	  COL_TRI(36, 31, 29);
	  COL_TRI(37, 27, 32);
	  COL_TRI(34, 27, 37);
	  COL_TRI(33, 32, 26);
	  COL_TRI(37, 32, 33);
	  COL_TRI(30, 31, 36);
	  COL_TRI(33, 26, 30);
	  COL_TRI(38, 46, 47);
	  COL_TRI(38, 48, 46);
	  COL_TRI(40, 46, 49);
	  COL_TRI(39, 48, 38);
	  COL_TRI(39, 50, 48);
	  COL_TRI(40, 49, 41);
	  COL_TRI(41, 49, 51);
	  COL_TRI(41, 51, 42);
	  COL_TRI(42, 51, 52);
	  COL_TRI(42, 52, 53);
	  COL_TRI(43, 52, 54);
	  COL_TRI(45, 50, 39);
	  COL_TRI(43, 54, 44);
	  COL_TRI(44, 54, 55);
	  COL_TRI(44, 55, 45);
	  COL_TRI(45, 55, 50);
	  COL_TRI_INIT(SURFACE_VANISH_CAP_WALLS, 56);
	  COL_TRI(65, 66, 67);
	  COL_TRI(66, 68, 67);
	  COL_TRI(67, 69, 65);
	  COL_TRI(67, 70, 69);
	  COL_TRI(65, 69, 71);
	  COL_TRI(65, 71, 66);
	  COL_TRI(66, 71, 72);
	  COL_TRI(66, 72, 68);
	  COL_TRI(76, 77, 101);
	  COL_TRI(73, 94, 95);
	  COL_TRI(73, 95, 96);
	  COL_TRI(73, 96, 97);
	  COL_TRI(73, 97, 98);
	  COL_TRI(73, 99, 94);
	  COL_TRI(73, 98, 100);
	  COL_TRI(74, 75, 76);
	  COL_TRI(74, 76, 101);
	  COL_TRI(75, 102, 76);
	  COL_TRI(76, 102, 77);
	  COL_TRI(79, 107, 105);
	  COL_TRI(75, 103, 102);
	  COL_TRI(77, 103, 104);
	  COL_TRI(77, 102, 103);
	  COL_TRI(78, 105, 81);
	  COL_TRI(78, 81, 106);
	  COL_TRI(79, 105, 78);
	  COL_TRI(80, 79, 78);
	  COL_TRI(80, 78, 106);
	  COL_TRI(81, 105, 107);
	  COL_TRI(81, 107, 108);
	  COL_TRI(87, 113, 114);
	  COL_TRI(82, 109, 83);
	  COL_TRI(82, 83, 110);
	  COL_TRI(83, 109, 111);
	  COL_TRI(83, 111, 112);
	  COL_TRI(84, 112, 111);
	  COL_TRI(84, 111, 85);
	  COL_TRI(85, 111, 109);
	  COL_TRI(85, 109, 82);
	  COL_TRI(86, 113, 87);
	  COL_TRI(87, 114, 115);
	  COL_TRI(90, 122, 121);
	  COL_TRI(86, 116, 113);
	  COL_TRI(64, 116, 86);
	  COL_TRI(64, 117, 116);
	  COL_TRI(88, 118, 89);
	  COL_TRI(89, 118, 119);
	  COL_TRI(89, 119, 120);
	  COL_TRI(88, 121, 118);
	  COL_TRI(90, 121, 88);
	  COL_TRI(91, 123, 124);
	  COL_TRI(91, 124, 125);
	  COL_TRI(92, 123, 91);
	  COL_TRI(92, 126, 123);
	  COL_TRI(93, 126, 92);
	  COL_TRI(93, 127, 126);
	  COL_TRI_STOP();
	  COL_WATER_BOX_INIT(1);
	  COL_WATER_BOX(0, -6143, -7167,  8192,  7168, 0);
	  COL_END();
	}

	function ddd_seg7_collision_bowser_sub_door() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x4);
	  COL_VERTEX(4941, -1015, -4197);
	  COL_VERTEX(2893, -1015, -4197);
	  COL_VERTEX(2893, -3063, -4197);
	  COL_VERTEX(4941, -3063, -4197);
	  COL_TRI_INIT(SURFACE_DEFAULT, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI_STOP();
	  COL_END();
	}

	function ddd_seg7_collision_submarine() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x9A);
	  COL_VERTEX(4019, -175, 4106);
	  COL_VERTEX(4101, -94, 4106);
	  COL_VERTEX(4101, -94, 4168);
	  COL_VERTEX(4019, -175, 4168);
	  COL_VERTEX(3814, -175, 4106);
	  COL_VERTEX(3950, -57, 4106);
	  COL_VERTEX(3884, -57, 4106);
	  COL_VERTEX(3850, -24, 4106);
	  COL_VERTEX(3814, -42, 4045);
	  COL_VERTEX(3866, -94, 4045);
	  COL_VERTEX(3968, -94, 4045);
	  COL_VERTEX(3983, -24, 4106);
	  COL_VERTEX(3732, -94, 4106);
	  COL_VERTEX(3814, -175, 4168);
	  COL_VERTEX(3850, 41, 4106);
	  COL_VERTEX(3814, 59, 4045);
	  COL_VERTEX(3732, 110, 4106);
	  COL_VERTEX(3732, -94, 4168);
	  COL_VERTEX(3884, 74, 4106);
	  COL_VERTEX(3732, 110, 4168);
	  COL_VERTEX(3917, 243, 4106);
	  COL_VERTEX(3950, 74, 4106);
	  COL_VERTEX(3968, 110, 4045);
	  COL_VERTEX(3917, 243, 4168);
	  COL_VERTEX(3983, 41, 4106);
	  COL_VERTEX(4101, 110, 4106);
	  COL_VERTEX(4101, 110, 4168);
	  COL_VERTEX(4019, -42, 4045);
	  COL_VERTEX(3902, -21, 4168);
	  COL_VERTEX(3932, -21, 4168);
	  COL_VERTEX(3947, -6, 4168);
	  COL_VERTEX(3887, -6, 4168);
	  COL_VERTEX(3929, 14, 4198);
	  COL_VERTEX(3947, 23, 4168);
	  COL_VERTEX(3932, 38, 4168);
	  COL_VERTEX(3923, 20, 4198);
	  COL_VERTEX(3902, 38, 4168);
	  COL_VERTEX(3887, 23, 4168);
	  COL_VERTEX(3947, 147, 3942);
	  COL_VERTEX(3866, 110, 4045);
	  COL_VERTEX(3886, 147, 3942);
	  COL_VERTEX(3507, 417, 2765);
	  COL_VERTEX(3712, 571, 2765);
	  COL_VERTEX(3947, 258, 3635);
	  COL_VERTEX(3886, 258, 3635);
	  COL_VERTEX(4326, 417, 2765);
	  COL_VERTEX(4052, -22, 3942);
	  COL_VERTEX(4429, 161, 2765);
	  COL_VERTEX(4019, 59, 4045);
	  COL_VERTEX(4150, -22, 3635);
	  COL_VERTEX(4150, 39, 3635);
	  COL_VERTEX(4531, -503, 1741);
	  COL_VERTEX(4429, -145, 2765);
	  COL_VERTEX(4326, -401, 2765);
	  COL_VERTEX(4634, -196, 1741);
	  COL_VERTEX(3886, -134, 3942);
	  COL_VERTEX(3610, -503, 2765);
	  COL_VERTEX(3947, -503, 3635);
	  COL_VERTEX(3886, -257, 3635);
	  COL_VERTEX(3886, -503, 3942);
	  COL_VERTEX(3886, -503, 3635);
	  COL_VERTEX(3947, -257, 3635);
	  COL_VERTEX(3507, -708, 1741);
	  COL_VERTEX(3814, -810, 1741);
	  COL_VERTEX(3814, -606, 2765);
	  COL_VERTEX(4019, -606, 2765);
	  COL_VERTEX(3683, -22, 3635);
	  COL_VERTEX(3405, -22, 3635);
	  COL_VERTEX(3405, 161, 2765);
	  COL_VERTEX(3405, -145, 2765);
	  COL_VERTEX(3200, 213, 1741);
	  COL_VERTEX(3405, -22, 3942);
	  COL_VERTEX(3507, -401, 2765);
	  COL_VERTEX(3947, -503, 3942);
	  COL_VERTEX(3405, 39, 3635);
	  COL_VERTEX(4429, 39, 3942);
	  COL_VERTEX(3302, -503, 1741);
	  COL_VERTEX(4224, -503, 2765);
	  COL_VERTEX(4634, 213, 1741);
	  COL_VERTEX(3866, 571, -409);
	  COL_VERTEX(3866, 571, 256);
	  COL_VERTEX(4019, 1185, 51);
	  COL_VERTEX(3814, 1185, 51);
	  COL_VERTEX(3814, 1185, -306);
	  COL_VERTEX(4019, 571, -306);
	  COL_VERTEX(4019, 571, 51);
	  COL_VERTEX(4019, -196, -2457);
	  COL_VERTEX(3814, -196, -2457);
	  COL_VERTEX(4019, 213, -2457);
	  COL_VERTEX(4122, 110, -2457);
	  COL_VERTEX(3814, 213, -2457);
	  COL_VERTEX(4122, -94, -2457);
	  COL_VERTEX(3456, -350, -1996);
	  COL_VERTEX(3712, -94, -2457);
	  COL_VERTEX(3661, -554, -1996);
	  COL_VERTEX(3507, -708, -1330);
	  COL_VERTEX(3302, -503, -1330);
	  COL_VERTEX(3200, -196, -1330);
	  COL_VERTEX(3661, 571, -1996);
	  COL_VERTEX(3405, 161, -1996);
	  COL_VERTEX(3354, 571, -1330);
	  COL_VERTEX(3456, 366, -1996);
	  COL_VERTEX(3712, 110, -2457);
	  COL_VERTEX(3200, 213, -1330);
	  COL_VERTEX(3354, 571, 1741);
	  COL_VERTEX(3200, -196, 1741);
	  COL_VERTEX(4173, -554, -1996);
	  COL_VERTEX(4326, -708, -1330);
	  COL_VERTEX(4019, -810, -1330);
	  COL_VERTEX(3814, -606, -1996);
	  COL_VERTEX(4429, -145, -1996);
	  COL_VERTEX(4378, -350, -1996);
	  COL_VERTEX(4634, -196, -1330);
	  COL_VERTEX(4531, -503, -1330);
	  COL_VERTEX(4378, 366, -1996);
	  COL_VERTEX(4634, 213, -1330);
	  COL_VERTEX(4480, 571, -1330);
	  COL_VERTEX(3814, -810, -1330);
	  COL_VERTEX(4019, -810, 1741);
	  COL_VERTEX(4326, -708, 1741);
	  COL_VERTEX(4173, 571, -1996);
	  COL_VERTEX(3911, 20, 4198);
	  COL_VERTEX(3905, 14, 4198);
	  COL_VERTEX(3929, 2, 4198);
	  COL_VERTEX(3923, -3, 4198);
	  COL_VERTEX(3911, -3, 4198);
	  COL_VERTEX(3905, 2, 4198);
	  COL_VERTEX(4122, 571, 2765);
	  COL_VERTEX(3886, 520, 3942);
	  COL_VERTEX(3886, 520, 3635);
	  COL_VERTEX(3947, 520, 3942);
	  COL_VERTEX(4480, 571, 1741);
	  COL_VERTEX(3947, 520, 3635);
	  COL_VERTEX(3683, 39, 3635);
	  COL_VERTEX(4052, 39, 3942);
	  COL_VERTEX(4429, -22, 3942);
	  COL_VERTEX(4429, -22, 3635);
	  COL_VERTEX(4429, 39, 3635);
	  COL_VERTEX(3947, -134, 3942);
	  COL_VERTEX(3782, -22, 3942);
	  COL_VERTEX(3782, 39, 3942);
	  COL_VERTEX(3405, 39, 3942);
	  COL_VERTEX(3866, 1185, -409);
	  COL_VERTEX(3968, 1185, -409);
	  COL_VERTEX(3968, 571, -409);
	  COL_VERTEX(3968, 571, 256);
	  COL_VERTEX(3968, 1185, 154);
	  COL_VERTEX(3866, 1185, 154);
	  COL_VERTEX(3814, 571, 51);
	  COL_VERTEX(3814, 571, -306);
	  COL_VERTEX(4019, 1185, -306);
	  COL_VERTEX(3405, -145, -1996);
	  COL_VERTEX(4019, -606, -1996);
	  COL_VERTEX(4429, 161, -1996);
	  COL_TRI_INIT(SURFACE_DEFAULT, 28);
	  COL_TRI(131, 85, 145);
	  COL_TRI(131, 80, 104);
	  COL_TRI(131, 145, 80);
	  COL_TRI(116, 85, 131);
	  COL_TRI(116, 84, 85);
	  COL_TRI(80, 148, 104);
	  COL_TRI(148, 149, 100);
	  COL_TRI(104, 148, 100);
	  COL_TRI(100, 79, 144);
	  COL_TRI(120, 100, 116);
	  COL_TRI(100, 144, 116);
	  COL_TRI(100, 149, 79);
	  COL_TRI(120, 98, 100);
	  COL_TRI(144, 84, 116);
	  COL_TRI(141, 133, 74);
	  COL_TRI(141, 140, 133);
	  COL_TRI(134, 137, 50);
	  COL_TRI(134, 75, 137);
	  COL_TRI(83, 82, 147);
	  COL_TRI(83, 147, 146);
	  COL_TRI(83, 143, 142);
	  COL_TRI(83, 150, 143);
	  COL_TRI(83, 146, 81);
	  COL_TRI(83, 81, 150);
	  COL_TRI(127, 131, 104);
	  COL_TRI(42, 127, 104);
	  COL_TRI(128, 132, 129);
	  COL_TRI(128, 130, 132);
	  COL_TRI_INIT(SURFACE_VERY_SLIPPERY, 276);
	  COL_TRI(0, 1, 2);
	  COL_TRI(3, 0, 2);
	  COL_TRI(4, 0, 3);
	  COL_TRI(1, 0, 5);
	  COL_TRI(0, 6, 5);
	  COL_TRI(0, 4, 6);
	  COL_TRI(7, 8, 6);
	  COL_TRI(8, 9, 6);
	  COL_TRI(7, 6, 4);
	  COL_TRI(9, 10, 5);
	  COL_TRI(6, 9, 5);
	  COL_TRI(1, 5, 11);
	  COL_TRI(12, 4, 13);
	  COL_TRI(13, 4, 3);
	  COL_TRI(7, 4, 12);
	  COL_TRI(14, 15, 7);
	  COL_TRI(15, 8, 7);
	  COL_TRI(14, 7, 12);
	  COL_TRI(16, 12, 17);
	  COL_TRI(17, 12, 13);
	  COL_TRI(14, 12, 16);
	  COL_TRI(18, 15, 14);
	  COL_TRI(18, 14, 16);
	  COL_TRI(19, 16, 17);
	  COL_TRI(20, 16, 19);
	  COL_TRI(18, 16, 20);
	  COL_TRI(1, 24, 25);
	  COL_TRI(21, 22, 18);
	  COL_TRI(22, 39, 18);
	  COL_TRI(18, 39, 15);
	  COL_TRI(21, 18, 20);
	  COL_TRI(23, 20, 19);
	  COL_TRI(21, 20, 25);
	  COL_TRI(24, 21, 25);
	  COL_TRI(25, 20, 23);
	  COL_TRI(1, 25, 26);
	  COL_TRI(26, 25, 23);
	  COL_TRI(24, 11, 48);
	  COL_TRI(1, 11, 24);
	  COL_TRI(2, 1, 26);
	  COL_TRI(10, 27, 11);
	  COL_TRI(5, 10, 11);
	  COL_TRI(3, 28, 13);
	  COL_TRI(3, 29, 28);
	  COL_TRI(30, 3, 2);
	  COL_TRI(30, 29, 3);
	  COL_TRI(11, 27, 48);
	  COL_TRI(29, 123, 124);
	  COL_TRI(28, 125, 126);
	  COL_TRI(31, 28, 126);
	  COL_TRI(28, 29, 125);
	  COL_TRI(17, 13, 28);
	  COL_TRI(17, 28, 31);
	  COL_TRI(29, 124, 125);
	  COL_TRI(32, 123, 30);
	  COL_TRI(29, 30, 123);
	  COL_TRI(33, 32, 30);
	  COL_TRI(33, 30, 2);
	  COL_TRI(33, 2, 26);
	  COL_TRI(34, 35, 33);
	  COL_TRI(35, 32, 33);
	  COL_TRI(34, 33, 26);
	  COL_TRI(34, 26, 23);
	  COL_TRI(34, 36, 35);
	  COL_TRI(36, 34, 23);
	  COL_TRI(19, 36, 23);
	  COL_TRI(36, 121, 35);
	  COL_TRI(19, 37, 36);
	  COL_TRI(19, 17, 31);
	  COL_TRI(19, 31, 37);
	  COL_TRI(22, 45, 127);
	  COL_TRI(37, 31, 122);
	  COL_TRI(31, 126, 122);
	  COL_TRI(36, 37, 121);
	  COL_TRI(37, 122, 121);
	  COL_TRI(38, 22, 127);
	  COL_TRI(22, 40, 39);
	  COL_TRI(22, 38, 40);
	  COL_TRI(22, 48, 45);
	  COL_TRI(39, 40, 42);
	  COL_TRI(40, 44, 42);
	  COL_TRI(40, 128, 129);
	  COL_TRI(40, 129, 44);
	  COL_TRI(41, 15, 39);
	  COL_TRI(42, 41, 39);
	  COL_TRI(43, 38, 127);
	  COL_TRI(38, 128, 40);
	  COL_TRI(38, 130, 128);
	  COL_TRI(43, 130, 38);
	  COL_TRI(44, 43, 127);
	  COL_TRI(44, 127, 42);
	  COL_TRI(27, 134, 48);
	  COL_TRI(45, 131, 127);
	  COL_TRI(44, 132, 43);
	  COL_TRI(44, 129, 132);
	  COL_TRI(42, 104, 41);
	  COL_TRI(46, 27, 52);
	  COL_TRI(27, 46, 134);
	  COL_TRI(47, 134, 50);
	  COL_TRI(47, 48, 134);
	  COL_TRI(46, 75, 134);
	  COL_TRI(48, 47, 45);
	  COL_TRI(49, 46, 52);
	  COL_TRI(46, 135, 75);
	  COL_TRI(49, 135, 46);
	  COL_TRI(47, 50, 49);
	  COL_TRI(49, 52, 47);
	  COL_TRI(49, 136, 135);
	  COL_TRI(50, 136, 49);
	  COL_TRI(51, 54, 52);
	  COL_TRI(52, 54, 47);
	  COL_TRI(53, 51, 52);
	  COL_TRI(27, 53, 52);
	  COL_TRI(75, 135, 136);
	  COL_TRI(54, 78, 47);
	  COL_TRI(47, 78, 45);
	  COL_TRI(50, 137, 136);
	  COL_TRI(9, 138, 10);
	  COL_TRI(9, 55, 138);
	  COL_TRI(55, 9, 64);
	  COL_TRI(56, 64, 9);
	  COL_TRI(56, 9, 8);
	  COL_TRI(61, 64, 65);
	  COL_TRI(57, 138, 73);
	  COL_TRI(57, 61, 138);
	  COL_TRI(10, 138, 61);
	  COL_TRI(10, 61, 65);
	  COL_TRI(10, 77, 53);
	  COL_TRI(27, 10, 53);
	  COL_TRI(10, 65, 77);
	  COL_TRI(58, 55, 64);
	  COL_TRI(59, 55, 58);
	  COL_TRI(61, 58, 64);
	  COL_TRI(60, 58, 61);
	  COL_TRI(59, 58, 60);
	  COL_TRI(62, 63, 64);
	  COL_TRI(56, 62, 64);
	  COL_TRI(63, 118, 65);
	  COL_TRI(64, 63, 65);
	  COL_TRI(65, 119, 77);
	  COL_TRI(65, 118, 119);
	  COL_TRI(69, 72, 8);
	  COL_TRI(8, 139, 66);
	  COL_TRI(8, 66, 69);
	  COL_TRI(66, 68, 69);
	  COL_TRI(66, 133, 68);
	  COL_TRI(67, 66, 139);
	  COL_TRI(68, 70, 69);
	  COL_TRI(41, 70, 68);
	  COL_TRI(15, 68, 133);
	  COL_TRI(41, 68, 15);
	  COL_TRI(69, 76, 72);
	  COL_TRI(69, 105, 76);
	  COL_TRI(70, 105, 69);
	  COL_TRI(73, 60, 57);
	  COL_TRI(15, 133, 140);
	  COL_TRI(8, 15, 140);
	  COL_TRI(8, 140, 139);
	  COL_TRI(71, 139, 140);
	  COL_TRI(71, 140, 141);
	  COL_TRI(72, 56, 8);
	  COL_TRI(67, 139, 71);
	  COL_TRI(60, 61, 57);
	  COL_TRI(74, 66, 67);
	  COL_TRI(73, 59, 60);
	  COL_TRI(73, 55, 59);
	  COL_TRI(73, 138, 55);
	  COL_TRI(43, 132, 130);
	  COL_TRI(74, 67, 71);
	  COL_TRI(74, 71, 141);
	  COL_TRI(76, 62, 56);
	  COL_TRI(74, 133, 66);
	  COL_TRI(75, 136, 137);
	  COL_TRI(41, 104, 70);
	  COL_TRI(72, 76, 56);
	  COL_TRI(80, 146, 147);
	  COL_TRI(77, 51, 53);
	  COL_TRI(77, 119, 51);
	  COL_TRI(78, 131, 45);
	  COL_TRI(79, 142, 143);
	  COL_TRI(79, 143, 144);
	  COL_TRI(80, 145, 146);
	  COL_TRI(84, 143, 150);
	  COL_TRI(81, 146, 145);
	  COL_TRI(80, 147, 82);
	  COL_TRI(80, 82, 148);
	  COL_TRI(82, 83, 149);
	  COL_TRI(82, 149, 148);
	  COL_TRI(83, 79, 149);
	  COL_TRI(83, 142, 79);
	  COL_TRI(84, 144, 143);
	  COL_TRI(91, 86, 102);
	  COL_TRI(85, 84, 150);
	  COL_TRI(85, 150, 81);
	  COL_TRI(85, 81, 145);
	  COL_TRI(86, 87, 102);
	  COL_TRI(87, 93, 102);
	  COL_TRI(88, 89, 102);
	  COL_TRI(89, 91, 102);
	  COL_TRI(90, 88, 102);
	  COL_TRI(98, 90, 101);
	  COL_TRI(92, 93, 94);
	  COL_TRI(93, 87, 94);
	  COL_TRI(87, 109, 94);
	  COL_TRI(92, 94, 95);
	  COL_TRI(94, 109, 117);
	  COL_TRI(95, 94, 117);
	  COL_TRI(93, 92, 151);
	  COL_TRI(96, 92, 95);
	  COL_TRI(97, 92, 96);
	  COL_TRI(97, 151, 92);
	  COL_TRI(62, 95, 63);
	  COL_TRI(90, 102, 101);
	  COL_TRI(99, 101, 102);
	  COL_TRI(100, 101, 103);
	  COL_TRI(101, 99, 103);
	  COL_TRI(98, 101, 100);
	  COL_TRI(99, 102, 151);
	  COL_TRI(102, 93, 151);
	  COL_TRI(99, 151, 97);
	  COL_TRI(103, 99, 97);
	  COL_TRI(96, 95, 62);
	  COL_TRI(106, 152, 86);
	  COL_TRI(97, 96, 76);
	  COL_TRI(76, 96, 62);
	  COL_TRI(95, 117, 63);
	  COL_TRI(104, 100, 70);
	  COL_TRI(100, 103, 70);
	  COL_TRI(70, 103, 105);
	  COL_TRI(103, 97, 105);
	  COL_TRI(105, 97, 76);
	  COL_TRI(86, 91, 111);
	  COL_TRI(106, 111, 113);
	  COL_TRI(108, 152, 106);
	  COL_TRI(109, 152, 108);
	  COL_TRI(87, 86, 152);
	  COL_TRI(109, 87, 152);
	  COL_TRI(110, 111, 91);
	  COL_TRI(111, 110, 112);
	  COL_TRI(110, 91, 153);
	  COL_TRI(112, 110, 115);
	  COL_TRI(110, 153, 115);
	  COL_TRI(113, 111, 112);
	  COL_TRI(106, 86, 111);
	  COL_TRI(118, 108, 119);
	  COL_TRI(91, 89, 153);
	  COL_TRI(89, 114, 153);
	  COL_TRI(114, 89, 120);
	  COL_TRI(115, 153, 114);
	  COL_TRI(115, 114, 116);
	  COL_TRI(116, 114, 120);
	  COL_TRI(63, 117, 118);
	  COL_TRI(117, 108, 118);
	  COL_TRI(107, 106, 113);
	  COL_TRI(119, 107, 51);
	  COL_TRI(108, 107, 119);
	  COL_TRI(107, 113, 51);
	  COL_TRI(51, 113, 54);
	  COL_TRI(54, 112, 78);
	  COL_TRI(113, 112, 54);
	  COL_TRI(78, 115, 131);
	  COL_TRI(112, 115, 78);
	  COL_TRI(115, 116, 131);
	  COL_TRI(117, 109, 108);
	  COL_TRI(108, 106, 107);
	  COL_TRI(124, 123, 125);
	  COL_TRI(89, 88, 120);
	  COL_TRI(120, 88, 98);
	  COL_TRI(88, 90, 98);
	  COL_TRI(121, 122, 125);
	  COL_TRI(122, 126, 125);
	  COL_TRI(35, 121, 125);
	  COL_TRI(32, 35, 125);
	  COL_TRI(123, 32, 125);
	  COL_TRI(21, 24, 22);
	  COL_TRI(24, 48, 22);
	  COL_TRI_STOP();
	  COL_END();
	}

	var ddd = [
	  ddd_seg7_area_1_collision,
	  ddd_seg7_area_2_collision,
	  ddd_seg7_collision_bowser_sub_door,
	  ddd_seg7_collision_submarine
	];

	function debug_seg7_area_1_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(9);
	  COL_VERTEX(504, 2253, 1426);
	  COL_VERTEX(405, 2253, 1450);
	  COL_VERTEX(499, 2324, 1427);
	  COL_VERTEX(537, 2324, 1449);
	  COL_VERTEX(437, 2273, 1474);
	  COL_VERTEX(422, 2275, 1445);
	  COL_VERTEX(529, 2331, 1419);
	  COL_VERTEX(430, 2288, 1444);
	  COL_VERTEX(430, 2289, 1444);
	  COL_TRI_INIT(SURFACE_DEFAULT, 9);
	  COL_TRI(0, 1, 5);
	  COL_TRI(2, 6, 0);
	  COL_TRI(2, 0, 7);
	  COL_TRI(0, 5, 7);
	  COL_TRI(1, 4, 5);
	  COL_TRI(4, 2, 8);
	  COL_TRI(4, 3, 2);
	  COL_TRI(5, 4, 8);
	  COL_TRI(2, 3, 6);
	  COL_TRI_STOP();
	  COL_END();
	}

	var debug = [
	  debug_seg7_area_1_collision
	];

	function hmc_seg7_collision_level() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x5E1);
	  COL_VERTEX(1468, -4279, 4991);
	  COL_VERTEX(455, -4279, 8032);
	  COL_VERTEX(2482, -4279, 6005);
	  COL_VERTEX(-558, -4279, 7018);
	  COL_VERTEX(3021, -7761, 2662);
	  COL_VERTEX(5581, -7761, 1997);
	  COL_VERTEX(3021, -7761, 1997);
	  COL_VERTEX(5581, -7761, 2662);
	  COL_VERTEX(-6245, -2252, -25);
	  COL_VERTEX(-5017, -2252, -1253);
	  COL_VERTEX(-6245, -2252, -1253);
	  COL_VERTEX(-5017, -2252, -25);
	  COL_VERTEX(-6860, -1535, 2534);
	  COL_VERTEX(-204, -1535, 6528);
	  COL_VERTEX(-204, -1535, 2534);
	  COL_VERTEX(-6860, -1535, 6528);
	  COL_VERTEX(-5221, 922, 384);
	  COL_VERTEX(-4709, 1058, 384);
	  COL_VERTEX(-4607, 922, -229);
	  COL_VERTEX(-3623, 1226, 36);
	  COL_VERTEX(-3955, 1211, -1473);
	  COL_VERTEX(-4582, 1020, 77);
	  COL_VERTEX(-4607, 922, -1049);
	  COL_VERTEX(-4228, 1226, 339);
	  COL_VERTEX(-4455, 1184, -1807);
	  COL_VERTEX(-5221, 922, -1663);
	  COL_VERTEX(-7539, 1331, -1123);
	  COL_VERTEX(-7167, 1104, -844);
	  COL_VERTEX(-6655, 922, -1049);
	  COL_VERTEX(-7269, 1145, -332);
	  COL_VERTEX(-6655, 922, -229);
	  COL_VERTEX(-7690, 1331, -271);
	  COL_VERTEX(-5221, 1331, -2687);
	  COL_VERTEX(-4284, 1331, -2062);
	  COL_VERTEX(-6757, 1331, -2687);
	  COL_VERTEX(-7269, 1331, 1408);
	  COL_VERTEX(-5733, 1331, 1408);
	  COL_VERTEX(-6041, 922, -1663);
	  COL_VERTEX(-6041, 922, 384);
	  COL_VERTEX(3713, -4382, 4629);
	  COL_VERTEX(3713, -4689, 4919);
	  COL_VERTEX(3713, -4382, 4919);
	  COL_VERTEX(3496, -4689, 5136);
	  COL_VERTEX(3496, -4382, 5136);
	  COL_VERTEX(3206, -4689, 5136);
	  COL_VERTEX(3206, -4382, 5136);
	  COL_VERTEX(3713, -4689, 4629);
	  COL_VERTEX(3496, -4382, 4412);
	  COL_VERTEX(3496, -4689, 4412);
	  COL_VERTEX(3206, -4382, 4412);
	  COL_VERTEX(3206, -4689, 4412);
	  COL_VERTEX(2989, -4382, 4629);
	  COL_VERTEX(2989, -4689, 4629);
	  COL_VERTEX(2989, -4382, 4919);
	  COL_VERTEX(2989, -4689, 4919);
	  COL_VERTEX(3713, -4689, 4412);
	  COL_VERTEX(2989, -4689, 5136);
	  COL_VERTEX(3713, -4689, 5136);
	  COL_VERTEX(2989, -4689, 4412);
	  COL_VERTEX(512, 2048, 3482);
	  COL_VERTEX(410, 2048, 3482);
	  COL_VERTEX(410, 2048, 3840);
	  COL_VERTEX(512, 2048, 3840);
	  COL_VERTEX(410, 2048, 4096);
	  COL_VERTEX(922, 2048, 4096);
	  COL_VERTEX(410, 3072, 4055);
	  COL_VERTEX(881, 2048, 4055);
	  COL_VERTEX(410, 2048, 4055);
	  COL_VERTEX(881, 3072, 4055);
	  COL_VERTEX(881, 3072, 3564);
	  COL_VERTEX(881, 2048, 3564);
	  COL_VERTEX(922, 3072, 3564);
	  COL_VERTEX(717, 1946, 3277);
	  COL_VERTEX(922, 1946, 3482);
	  COL_VERTEX(410, 1946, 3584);
	  COL_VERTEX(410, 2048, 5837);
	  COL_VERTEX(410, 2048, 4403);
	  COL_VERTEX(922, 2048, 4813);
	  COL_VERTEX(922, 2048, 5427);
	  COL_VERTEX(410, 1946, 4403);
	  COL_VERTEX(717, 2048, 3277);
	  COL_VERTEX(410, 2048, 3072);
	  COL_VERTEX(922, 2048, 3482);
	  COL_VERTEX(922, 2048, 3564);
	  COL_VERTEX(922, 1946, 4096);
	  COL_VERTEX(410, 1946, 4096);
	  COL_VERTEX(410, 1946, 5837);
	  COL_VERTEX(922, 1946, 5427);
	  COL_VERTEX(922, 1946, 4813);
	  COL_VERTEX(922, 2048, 3072);
	  COL_VERTEX(-2713, -6327, 2022);
	  COL_VERTEX(-3225, -4279, 2739);
	  COL_VERTEX(-2713, -4279, 3251);
	  COL_VERTEX(-4351, -6327, 2022);
	  COL_VERTEX(-1996, -6327, 2739);
	  COL_VERTEX(-1996, -6327, 4378);
	  COL_VERTEX(-2713, -4279, 3866);
	  COL_VERTEX(-3839, -4279, 2739);
	  COL_VERTEX(-3225, -4279, 4378);
	  COL_VERTEX(-2713, -6327, 5094);
	  COL_VERTEX(-4351, -6327, 5094);
	  COL_VERTEX(-3839, -4279, 4378);
	  COL_VERTEX(-4351, -4279, 3866);
	  COL_VERTEX(-5068, -6327, 4378);
	  COL_VERTEX(-4351, -4279, 3251);
	  COL_VERTEX(-5068, -6327, 2739);
	  COL_VERTEX(2765, 1075, 4147);
	  COL_VERTEX(2765, 1024, 4198);
	  COL_VERTEX(5222, 1024, 4403);
	  COL_VERTEX(5274, 1075, 4403);
	  COL_VERTEX(5018, 1075, 6400);
	  COL_VERTEX(5018, 1024, 6349);
	  COL_VERTEX(5018, 1126, 3584);
	  COL_VERTEX(5274, 1434, 3994);
	  COL_VERTEX(2765, 1126, 6656);
	  COL_VERTEX(3277, 1126, 6656);
	  COL_VERTEX(3277, 1126, 5939);
	  COL_VERTEX(3021, 1434, 6298);
	  COL_VERTEX(5530, 1126, 6144);
	  COL_VERTEX(5530, 1126, 6656);
	  COL_VERTEX(5018, 1126, 6144);
	  COL_VERTEX(5018, 1126, 6656);
	  COL_VERTEX(2765, 1126, 3891);
	  COL_VERTEX(2765, 1126, 4403);
	  COL_VERTEX(2406, 1331, 4147);
	  COL_VERTEX(2048, 1126, 4403);
	  COL_VERTEX(6244, 410, 1536);
	  COL_VERTEX(5579, 0, 2560);
	  COL_VERTEX(1690, 1024, 5120);
	  COL_VERTEX(1690, 1024, 4608);
	  COL_VERTEX(922, 1024, 5120);
	  COL_VERTEX(1306, 1434, 4864);
	  COL_VERTEX(-5391, 512, -1253);
	  COL_VERTEX(-5017, 512, -879);
	  COL_VERTEX(-5017, 512, -399);
	  COL_VERTEX(-5871, 512, -1253);
	  COL_VERTEX(-5391, 512, -25);
	  COL_VERTEX(-6245, 512, -879);
	  COL_VERTEX(-6245, 512, -399);
	  COL_VERTEX(-5871, 512, -25);
	  COL_VERTEX(5018, 1024, 4096);
	  COL_VERTEX(2765, 1024, 4096);
	  COL_VERTEX(5018, 1075, 4147);
	  COL_VERTEX(5018, 1024, 4198);
	  COL_VERTEX(5274, 1075, 6144);
	  COL_VERTEX(5325, 1024, 6144);
	  COL_VERTEX(5325, 1024, 4403);
	  COL_VERTEX(5222, 1024, 6144);
	  COL_VERTEX(3277, 1024, 6451);
	  COL_VERTEX(5018, 1024, 6451);
	  COL_VERTEX(3277, 1075, 6400);
	  COL_VERTEX(3277, 1024, 6349);
	  COL_VERTEX(5530, 1126, 3584);
	  COL_VERTEX(5018, 1126, 4403);
	  COL_VERTEX(5530, 1126, 4403);
	  COL_VERTEX(2765, 1126, 5939);
	  COL_VERTEX(5274, 1434, 6400);
	  COL_VERTEX(2048, 1126, 3891);
	  COL_VERTEX(5579, 410, 1587);
	  COL_VERTEX(6244, 410, 1587);
	  COL_VERTEX(5579, 410, 1536);
	  COL_VERTEX(6244, 0, 2560);
	  COL_VERTEX(922, 1024, 4608);
	  COL_VERTEX(6244, 307, 2458);
	  COL_VERTEX(5579, 307, 2458);
	  COL_VERTEX(5579, 1126, 2458);
	  COL_VERTEX(6244, 1126, 2458);
	  COL_VERTEX(-4318, 2867, -1115);
	  COL_VERTEX(-5221, 2867, -2175);
	  COL_VERTEX(-4098, 2867, -1460);
	  COL_VERTEX(-5441, 2867, -1829);
	  COL_VERTEX(-4577, 2867, -1280);
	  COL_VERTEX(-4483, 2867, -856);
	  COL_VERTEX(-3685, 2867, -1663);
	  COL_VERTEX(-4095, 2867, -1458);
	  COL_VERTEX(-5221, 2867, -2687);
	  COL_VERTEX(-5096, 2867, -1610);
	  COL_VERTEX(-5551, 2867, -322);
	  COL_VERTEX(-5810, 2867, -486);
	  COL_VERTEX(-4837, 2867, -1445);
	  COL_VERTEX(-3685, 2867, -3199);
	  COL_VERTEX(-4709, 2867, -3199);
	  COL_VERTEX(-6344, 2867, -1555);
	  COL_VERTEX(-5119, 2867, -47);
	  COL_VERTEX(-4742, 2867, -1021);
	  COL_VERTEX(-5269, 2867, -1719);
	  COL_VERTEX(-5763, 2867, -942);
	  COL_VERTEX(-5936, 2867, -1052);
	  COL_VERTEX(-6454, 2867, -1382);
	  COL_VERTEX(-5826, 2867, -1225);
	  COL_VERTEX(-5441, 2867, -494);
	  COL_VERTEX(-5009, 2867, -219);
	  COL_VERTEX(-4453, -3378, -4851);
	  COL_VERTEX(-3738, -2969, -5560);
	  COL_VERTEX(-4053, -2969, -5964);
	  COL_VERTEX(-3359, -2661, -5076);
	  COL_VERTEX(-3110, -2559, -5877);
	  COL_VERTEX(-3234, -2559, -6373);
	  COL_VERTEX(-3949, -3071, -4499);
	  COL_VERTEX(-3670, -2559, -6539);
	  COL_VERTEX(-4169, -2559, -6578);
	  COL_VERTEX(-4431, -2661, -6448);
	  COL_VERTEX(-4872, -3378, -5145);
	  COL_VERTEX(-5282, -3788, -4325);
	  COL_VERTEX(-5375, -3071, -5497);
	  COL_VERTEX(-4785, -3788, -4202);
	  COL_VERTEX(-5878, -3481, -4474);
	  COL_VERTEX(-4189, -3481, -4053);
	  COL_VERTEX(-5282, -4197, -3301);
	  COL_VERTEX(-4787, -4197, -3434);
	  COL_VERTEX(-4194, -3890, -3593);
	  COL_VERTEX(-4469, -4607, -2797);
	  COL_VERTEX(-4872, -4607, -2482);
	  COL_VERTEX(-3984, -4300, -3176);
	  COL_VERTEX(-4258, -5017, -1868);
	  COL_VERTEX(-3854, -5017, -2183);
	  COL_VERTEX(-3370, -4709, -2561);
	  COL_VERTEX(-2742, -4914, -1264);
	  COL_VERTEX(-3345, -5221, -1146);
	  COL_VERTEX(-3848, -5221, -1049);
	  COL_VERTEX(-4451, -4914, -931);
	  COL_VERTEX(-3835, -5221, -537);
	  COL_VERTEX(-50, -4996, 2022);
	  COL_VERTEX(-665, -4996, 2842);
	  COL_VERTEX(-5875, -3890, -3142);
	  COL_VERTEX(-5356, -4300, -2104);
	  COL_VERTEX(-4742, -4709, -1490);
	  COL_VERTEX(-4447, -4914, -537);
	  COL_VERTEX(-2712, -4914, -537);
	  COL_VERTEX(-3325, -5221, -537);
	  COL_VERTEX(154, -4689, 3046);
	  COL_VERTEX(154, -4689, 2125);
	  COL_VERTEX(-50, -4996, 2842);
	  COL_VERTEX(-460, -4689, 3046);
	  COL_VERTEX(973, -4433, 2253);
	  COL_VERTEX(973, -4433, 2406);
	  COL_VERTEX(922, -4433, 2406);
	  COL_VERTEX(922, -4433, 2253);
	  COL_VERTEX(922, -4689, 2253);
	  COL_VERTEX(973, -4689, 2253);
	  COL_VERTEX(973, -4689, 2406);
	  COL_VERTEX(922, -4689, 2406);
	  COL_VERTEX(3021, -4689, 1997);
	  COL_VERTEX(1075, -4689, 1997);
	  COL_VERTEX(1075, -4689, 2662);
	  COL_VERTEX(3021, -4689, 2662);
	  COL_VERTEX(973, -4689, 2662);
	  COL_VERTEX(973, -4689, 1997);
	  COL_VERTEX(4557, -4689, 1997);
	  COL_VERTEX(6605, -3665, 1997);
	  COL_VERTEX(6605, -4689, 2662);
	  COL_VERTEX(5581, -4689, 2662);
	  COL_VERTEX(4045, -4689, 1997);
	  COL_VERTEX(6605, -4689, 1997);
	  COL_VERTEX(5581, -4689, 1997);
	  COL_VERTEX(4557, -4689, 2662);
	  COL_VERTEX(-51, -4279, 6511);
	  COL_VERTEX(20, -3255, 7598);
	  COL_VERTEX(-124, -3255, 6439);
	  COL_VERTEX(3496, -4279, 3108);
	  COL_VERTEX(3351, -4279, 3108);
	  COL_VERTEX(3568, -4279, 3036);
	  COL_VERTEX(-522, -4023, 6765);
	  COL_VERTEX(-268, -4023, 6584);
	  COL_VERTEX(-486, -4023, 6801);
	  COL_VERTEX(-305, -4023, 6548);
	  COL_VERTEX(-486, -4279, 6801);
	  COL_VERTEX(889, -3255, 7598);
	  COL_VERTEX(382, -3255, 6946);
	  COL_VERTEX(817, -3255, 6946);
	  COL_VERTEX(1396, -3255, 4919);
	  COL_VERTEX(2120, -4279, 5643);
	  COL_VERTEX(3061, -4279, 6584);
	  COL_VERTEX(5089, -4279, 4846);
	  COL_VERTEX(1541, -4279, 4774);
	  COL_VERTEX(3351, -4279, 5860);
	  COL_VERTEX(3206, -4279, 6729);
	  COL_VERTEX(2265, -4279, 4774);
	  COL_VERTEX(4437, -4279, 4774);
	  COL_VERTEX(3351, -4279, 3688);
	  COL_VERTEX(3351, -4382, 5860);
	  COL_VERTEX(4437, -4382, 4774);
	  COL_VERTEX(1613, -4279, 4846);
	  COL_VERTEX(1613, -4279, 4991);
	  COL_VERTEX(3134, -4279, 6511);
	  COL_VERTEX(3278, -4279, 6511);
	  COL_VERTEX(5016, -4279, 4774);
	  COL_VERTEX(5016, -4279, 4629);
	  COL_VERTEX(-4812, 2867, -7807);
	  COL_VERTEX(-204, 2867, -8114);
	  COL_VERTEX(3738, 614, -6962);
	  COL_VERTEX(-1209, -4484, 5281);
	  COL_VERTEX(-1749, -4587, 5893);
	  COL_VERTEX(-1822, -4484, 5893);
	  COL_VERTEX(-1391, -4587, 6251);
	  COL_VERTEX(-2764, -2559, -5759);
	  COL_VERTEX(-4300, -511, -5759);
	  COL_VERTEX(-2764, -511, -5759);
	  COL_VERTEX(-3107, -511, -4753);
	  COL_VERTEX(-3614, -921, -4264);
	  COL_VERTEX(-4620, -511, -6690);
	  COL_VERTEX(-4300, -511, -7295);
	  COL_VERTEX(-5627, -921, -5673);
	  COL_VERTEX(-3791, -1330, -3954);
	  COL_VERTEX(-6176, -1330, -4548);
	  COL_VERTEX(-6176, -2969, -4548);
	  COL_VERTEX(-5627, -2559, -5673);
	  COL_VERTEX(-4620, -2149, -6690);
	  COL_VERTEX(-2961, -2252, -5280);
	  COL_VERTEX(-3107, -2149, -4753);
	  COL_VERTEX(-3614, -2559, -4264);
	  COL_VERTEX(-3791, -2969, -3954);
	  COL_VERTEX(-6172, -3378, -3063);
	  COL_VERTEX(-3798, -1740, -3699);
	  COL_VERTEX(-3798, -3378, -3699);
	  COL_VERTEX(-5598, -3788, -1915);
	  COL_VERTEX(-3662, -2149, -3428);
	  COL_VERTEX(-3662, -3788, -3428);
	  COL_VERTEX(-4984, -4197, -1300);
	  COL_VERTEX(-3047, -4197, -2813);
	  COL_VERTEX(-3047, -2559, -2813);
	  COL_VERTEX(-4300, 1741, -7295);
	  COL_VERTEX(-4753, -4402, -873);
	  COL_VERTEX(-2340, -2764, -1342);
	  COL_VERTEX(-2340, -4402, -1342);
	  COL_VERTEX(-4753, -2764, -873);
	  COL_VERTEX(-4753, -4402, -537);
	  COL_VERTEX(-2303, -4402, -537);
	  COL_VERTEX(-1484, -3255, -537);
	  COL_VERTEX(-460, -4689, 3456);
	  COL_VERTEX(563, -4689, 1920);
	  COL_VERTEX(-2201, -6020, 896);
	  COL_VERTEX(-869, -5303, 2227);
	  COL_VERTEX(-869, -6020, 3661);
	  COL_VERTEX(-869, -5303, 3661);
	  COL_VERTEX(-417, -5303, 2001);
	  COL_VERTEX(563, -5303, 1510);
	  COL_VERTEX(563, -5303, 4378);
	  COL_VERTEX(-1484, -6327, 4582);
	  COL_VERTEX(563, -4689, 2739);
	  COL_VERTEX(870, -4689, 2739);
	  COL_VERTEX(563, -3972, 2739);
	  COL_VERTEX(768, -4689, 2509);
	  COL_VERTEX(870, -4689, 2509);
	  COL_VERTEX(870, -4689, 1920);
	  COL_VERTEX(563, -3255, 1510);
	  COL_VERTEX(870, -4689, 2150);
	  COL_VERTEX(-1484, -5303, -537);
	  COL_VERTEX(870, -3972, 1920);
	  COL_VERTEX(563, -3255, 5606);
	  COL_VERTEX(563, -4689, 3968);
	  COL_VERTEX(-2508, -6327, 5606);
	  COL_VERTEX(-2508, -6327, 1510);
	  COL_VERTEX(870, -4433, 2253);
	  COL_VERTEX(870, -4433, 2406);
	  COL_VERTEX(870, -4689, 2406);
	  COL_VERTEX(870, -4689, 2253);
	  COL_VERTEX(-4556, -6327, 1510);
	  COL_VERTEX(-4709, 1843, -7807);
	  COL_VERTEX(307, -409, -7781);
	  COL_VERTEX(307, -409, -6962);
	  COL_VERTEX(3149, -409, -6962);
	  COL_VERTEX(3149, -409, -7065);
	  COL_VERTEX(-204, 922, -7904);
	  COL_VERTEX(3508, -409, -7065);
	  COL_VERTEX(3738, 614, -7781);
	  COL_VERTEX(3738, -409, -6962);
	  COL_VERTEX(-1818, 1843, -6513);
	  COL_VERTEX(-1818, 2867, -6513);
	  COL_VERTEX(-2764, 1843, -7807);
	  COL_VERTEX(-2764, 2867, -7807);
	  COL_VERTEX(-3276, 1843, -7295);
	  COL_VERTEX(-1740, 1843, -6578);
	  COL_VERTEX(-4300, 1843, -7295);
	  COL_VERTEX(-2764, 1843, -5759);
	  COL_VERTEX(-1228, 1843, -7090);
	  COL_VERTEX(-204, 1843, -6578);
	  COL_VERTEX(-815, -4279, 5676);
	  COL_VERTEX(-1427, -4279, 6288);
	  COL_VERTEX(-1484, -5303, 7654);
	  COL_VERTEX(-1484, -4279, 7654);
	  COL_VERTEX(563, -5303, 5606);
	  COL_VERTEX(-341, -4279, 6367);
	  COL_VERTEX(-558, -4023, 6729);
	  COL_VERTEX(-522, -4279, 6765);
	  COL_VERTEX(563, -4279, 5606);
	  COL_VERTEX(-5580, -5303, 7654);
	  COL_VERTEX(-5580, -3255, 7654);
	  COL_VERTEX(-4556, -6327, 5606);
	  COL_VERTEX(-5580, -6327, 2534);
	  COL_VERTEX(-7628, -5303, 5606);
	  COL_VERTEX(-7628, -3255, 5606);
	  COL_VERTEX(-7628, -5303, 1510);
	  COL_VERTEX(-4812, 1843, -7295);
	  COL_VERTEX(-3788, 1843, -6783);
	  COL_VERTEX(-4812, 2099, -7474);
	  COL_VERTEX(-1228, 1843, -7602);
	  COL_VERTEX(-716, 1843, -7602);
	  COL_VERTEX(-1740, 2867, -8114);
	  COL_VERTEX(-204, -409, -8114);
	  COL_VERTEX(-1740, 1741, -6578);
	  COL_VERTEX(-204, 2867, -6578);
	  COL_VERTEX(-1740, -409, -6578);
	  COL_VERTEX(-716, -409, -7090);
	  COL_VERTEX(-204, 922, -6839);
	  COL_VERTEX(-716, 1741, -7090);
	  COL_VERTEX(-1228, 1741, -7602);
	  COL_VERTEX(-1228, -409, -7090);
	  COL_VERTEX(-1228, -409, -7602);
	  COL_VERTEX(-716, -409, -7602);
	  COL_VERTEX(-716, -511, -7602);
	  COL_VERTEX(-4863, 2099, -7474);
	  COL_VERTEX(-4863, 1843, -7474);
	  COL_VERTEX(-4914, 2099, -7474);
	  COL_VERTEX(-4914, 1843, -7474);
	  COL_VERTEX(-4863, 1843, -7628);
	  COL_VERTEX(-4863, 2099, -7628);
	  COL_VERTEX(-4914, 2099, -7628);
	  COL_VERTEX(-4812, 2099, -7628);
	  COL_VERTEX(307, 614, -6962);
	  COL_VERTEX(-204, -409, -6839);
	  COL_VERTEX(3252, -153, -6962);
	  COL_VERTEX(3252, -153, -6911);
	  COL_VERTEX(3405, -409, -6962);
	  COL_VERTEX(3405, -153, -6962);
	  COL_VERTEX(3405, -409, -6911);
	  COL_VERTEX(3405, -153, -6911);
	  COL_VERTEX(3252, -153, -6860);
	  COL_VERTEX(-3276, 1843, -6783);
	  COL_VERTEX(-631, -4279, 6801);
	  COL_VERTEX(1076, 614, -5119);
	  COL_VERTEX(-3583, 2355, -3276);
	  COL_VERTEX(-3481, 2355, -2943);
	  COL_VERTEX(-3071, 2355, -2764);
	  COL_VERTEX(-3481, 2355, -2585);
	  COL_VERTEX(-3583, 2611, -2841);
	  COL_VERTEX(-3583, 2355, -2841);
	  COL_VERTEX(-3583, -409, -2252);
	  COL_VERTEX(-3583, 2355, -2687);
	  COL_VERTEX(-3583, 2611, -2687);
	  COL_VERTEX(1076, -409, -4300);
	  COL_VERTEX(224, -409, -5119);
	  COL_VERTEX(224, 614, -5119);
	  COL_VERTEX(-3634, 2355, -2687);
	  COL_VERTEX(-3634, 2355, -2841);
	  COL_VERTEX(-767, 614, -4127);
	  COL_VERTEX(-767, -409, -4127);
	  COL_VERTEX(1076, 614, -4300);
	  COL_VERTEX(564, 614, -4300);
	  COL_VERTEX(-767, 614, -3308);
	  COL_VERTEX(-799, -409, -3276);
	  COL_VERTEX(52, 614, -3788);
	  COL_VERTEX(-799, 614, -3276);
	  COL_VERTEX(52, 614, -2764);
	  COL_VERTEX(-2047, 614, -3276);
	  COL_VERTEX(-2047, -409, -2252);
	  COL_VERTEX(-459, 614, -2252);
	  COL_VERTEX(-2047, -409, -3276);
	  COL_VERTEX(-2047, 3379, -3276);
	  COL_VERTEX(-3583, 3379, -3276);
	  COL_VERTEX(-2047, 3379, -2252);
	  COL_VERTEX(1076, -153, -4633);
	  COL_VERTEX(1076, -153, -4786);
	  COL_VERTEX(1076, -409, -4633);
	  COL_VERTEX(1076, -409, -5119);
	  COL_VERTEX(1076, -409, -4786);
	  COL_VERTEX(1127, -153, -4786);
	  COL_VERTEX(1127, -409, -4786);
	  COL_VERTEX(1127, -153, -4633);
	  COL_VERTEX(1127, -409, -4633);
	  COL_VERTEX(-2559, 2355, -2764);
	  COL_VERTEX(-3583, 2355, -2252);
	  COL_VERTEX(-3071, 2355, -2252);
	  COL_VERTEX(-4914, 2810, -7295);
	  COL_VERTEX(-4914, 3630, -7295);
	  COL_VERTEX(-4607, 3630, -6988);
	  COL_VERTEX(-4607, 3630, -6578);
	  COL_VERTEX(-4914, 3630, -6271);
	  COL_VERTEX(-5426, 2697, -6271);
	  COL_VERTEX(-5631, 2810, -8191);
	  COL_VERTEX(-5631, 2810, -7807);
	  COL_VERTEX(-5631, 3630, -7807);
	  COL_VERTEX(-4197, 1536, 896);
	  COL_VERTEX(-4228, 1536, 339);
	  COL_VERTEX(-3769, 1536, 682);
	  COL_VERTEX(-3623, 1536, 36);
	  COL_VERTEX(-3448, 1536, 521);
	  COL_VERTEX(-3685, 1536, -1663);
	  COL_VERTEX(-3955, 1536, -1473);
	  COL_VERTEX(-3494, 1536, 430);
	  COL_VERTEX(-3173, 1536, 384);
	  COL_VERTEX(-4709, 1536, 384);
	  COL_VERTEX(-5411, 509, 77);
	  COL_VERTEX(-4284, 1536, -2062);
	  COL_VERTEX(-4455, 1536, -1807);
	  COL_VERTEX(-6732, 1536, 1408);
	  COL_VERTEX(-6732, 1536, 1306);
	  COL_VERTEX(-6962, 1536, 1408);
	  COL_VERTEX(-6655, 1536, 691);
	  COL_VERTEX(-5718, 1536, 691);
	  COL_VERTEX(-5221, 1536, 384);
	  COL_VERTEX(-6373, 1536, 1306);
	  COL_VERTEX(-6392, 2355, -1099);
	  COL_VERTEX(-6062, 2355, -1617);
	  COL_VERTEX(-6753, 2355, -2057);
	  COL_VERTEX(-7083, 2355, -1539);
	  COL_VERTEX(-6062, 2458, -1617);
	  COL_VERTEX(-6962, 1597, -5858);
	  COL_VERTEX(-5426, 1843, -7295);
	  COL_VERTEX(-5426, 1638, -6271);
	  COL_VERTEX(-5426, 1536, -5247);
	  COL_VERTEX(-6553, 1843, -7295);
	  COL_VERTEX(-5017, 1843, -7295);
	  COL_VERTEX(-6553, 2810, -7807);
	  COL_VERTEX(-3788, 2355, -2585);
	  COL_VERTEX(-3788, 2355, -2943);
	  COL_VERTEX(-3685, 2355, -1663);
	  COL_VERTEX(-6629, 1792, 1408);
	  COL_VERTEX(-6476, 1536, 1408);
	  COL_VERTEX(-6476, 1792, 1459);
	  COL_VERTEX(-6476, 1536, 1459);
	  COL_VERTEX(-5221, 3379, 384);
	  COL_VERTEX(-6629, 1536, 1459);
	  COL_VERTEX(-4197, 3379, 896);
	  COL_VERTEX(-4709, 3379, 384);
	  COL_VERTEX(-5221, 3379, -2175);
	  COL_VERTEX(-5221, 2355, -2687);
	  COL_VERTEX(-3685, 3379, -1663);
	  COL_VERTEX(-5221, 3379, -2687);
	  COL_VERTEX(-4709, 2355, -3199);
	  COL_VERTEX(-3685, 2611, -2841);
	  COL_VERTEX(-3685, 2611, -2687);
	  COL_VERTEX(-6041, 1331, -1663);
	  COL_VERTEX(-5466, 2355, -455);
	  COL_VERTEX(-5466, 2355, 261);
	  COL_VERTEX(-4749, 2355, 261);
	  COL_VERTEX(-4749, 2355, -455);
	  COL_VERTEX(-5466, 2458, 261);
	  COL_VERTEX(-3685, 2355, -3199);
	  COL_VERTEX(-3634, 2611, -2841);
	  COL_VERTEX(-3634, 2611, -2687);
	  COL_VERTEX(-4914, 1843, -7807);
	  COL_VERTEX(-5426, 1536, -4223);
	  COL_VERTEX(-5426, 2355, -3199);
	  COL_VERTEX(-6757, 3379, -2687);
	  COL_VERTEX(-6476, 1792, 1408);
	  COL_VERTEX(-7269, 3379, 1408);
	  COL_VERTEX(-7781, 3379, -639);
	  COL_VERTEX(-6629, 1792, 1510);
	  COL_VERTEX(-6629, 1536, 1510);
	  COL_VERTEX(-6629, 1792, 1459);
	  COL_VERTEX(-6476, 1792, 1510);
	  COL_VERTEX(-6476, 1536, 1510);
	  COL_VERTEX(-3540, 1792, 567);
	  COL_VERTEX(-3540, 1536, 567);
	  COL_VERTEX(-3677, 1792, 636);
	  COL_VERTEX(-3677, 1536, 636);
	  COL_VERTEX(-6553, 2355, -3199);
	  COL_VERTEX(-6553, 2583, -5247);
	  COL_VERTEX(-6962, 2628, -5654);
	  COL_VERTEX(-6962, 2651, -5858);
	  COL_VERTEX(-5426, 1684, -7295);
	  COL_VERTEX(-6553, 1638, -6271);
	  COL_VERTEX(-6553, 1843, -7807);
	  COL_VERTEX(-6143, 1690, -6527);
	  COL_VERTEX(-4914, 1843, -7628);
	  COL_VERTEX(-7167, 1331, -844);
	  COL_VERTEX(-7269, 1331, -332);
	  COL_VERTEX(-5785, 1792, -7039);
	  COL_VERTEX(-6143, 1690, -6783);
	  COL_VERTEX(-5785, 1690, -6783);
	  COL_VERTEX(-5785, 1690, -6527);
	  COL_VERTEX(-6143, 1741, -6783);
	  COL_VERTEX(3638, 205, 819);
	  COL_VERTEX(3638, 205, 717);
	  COL_VERTEX(3996, 205, 717);
	  COL_VERTEX(4250, 205, 819);
	  COL_VERTEX(4250, 1024, 819);
	  COL_VERTEX(4250, 1024, -306);
	  COL_VERTEX(2202, 205, -204);
	  COL_VERTEX(2100, 102, 102);
	  COL_VERTEX(2202, 205, 205);
	  COL_VERTEX(4250, 205, -306);
	  COL_VERTEX(3740, 461, 819);
	  COL_VERTEX(1690, 1024, -306);
	  COL_VERTEX(3894, 461, 870);
	  COL_VERTEX(1690, 1024, 819);
	  COL_VERTEX(1792, 205, -204);
	  COL_VERTEX(1792, 205, 205);
	  COL_VERTEX(2100, 102, -101);
	  COL_VERTEX(3894, 205, 819);
	  COL_VERTEX(3740, 461, 870);
	  COL_VERTEX(3894, 461, 819);
	  COL_VERTEX(5681, -204, 819);
	  COL_VERTEX(5735, -204, 819);
	  COL_VERTEX(5735, -204, 717);
	  COL_VERTEX(6093, -204, 717);
	  COL_VERTEX(5476, -409, 819);
	  COL_VERTEX(1178, -409, -4453);
	  COL_VERTEX(1280, -409, -4453);
	  COL_VERTEX(3124, -409, -6348);
	  COL_VERTEX(3533, -409, -6757);
	  COL_VERTEX(3533, 0, -6860);
	  COL_VERTEX(5476, -613, 819);
	  COL_VERTEX(5681, -409, 819);
	  COL_VERTEX(4864, -869, 819);
	  COL_VERTEX(4864, 0, 819);
	  COL_VERTEX(5835, 51, 819);
	  COL_VERTEX(6298, -869, 819);
	  COL_VERTEX(5988, -204, 819);
	  COL_VERTEX(6298, 0, 819);
	  COL_VERTEX(5988, 51, 870);
	  COL_VERTEX(5988, 51, 819);
	  COL_VERTEX(3328, -869, 819);
	  COL_VERTEX(2919, 0, 819);
	  COL_VERTEX(2304, -1023, 819);
	  COL_VERTEX(6093, 1024, 205);
	  COL_VERTEX(6298, 1024, 410);
	  COL_VERTEX(6298, 0, 410);
	  COL_VERTEX(6093, 0, 205);
	  COL_VERTEX(4967, 0, 205);
	  COL_VERTEX(4967, 1024, 205);
	  COL_VERTEX(6298, 0, -4505);
	  COL_VERTEX(6298, -921, -5631);
	  COL_VERTEX(2100, 0, -4965);
	  COL_VERTEX(2100, 0, -4453);
	  COL_VERTEX(6298, 0, -6348);
	  COL_VERTEX(1690, 0, -3993);
	  COL_VERTEX(1178, 102, -4965);
	  COL_VERTEX(1690, 0, -5324);
	  COL_VERTEX(1690, -921, -3993);
	  COL_VERTEX(1178, 102, -4453);
	  COL_VERTEX(1690, 102, -4965);
	  COL_VERTEX(1690, -921, -5324);
	  COL_VERTEX(3431, 0, -3788);
	  COL_VERTEX(1895, 0, -3788);
	  COL_VERTEX(1690, 0, 819);
	  COL_VERTEX(5786, 0, -1842);
	  COL_VERTEX(2100, 0, -101);
	  COL_VERTEX(5786, 0, -1330);
	  COL_VERTEX(3124, 0, -6860);
	  COL_VERTEX(6912, 154, -1330);
	  COL_VERTEX(6298, 0, -1842);
	  COL_VERTEX(6298, 154, -1842);
	  COL_VERTEX(6912, -357, -1842);
	  COL_VERTEX(6912, 154, -1842);
	  COL_VERTEX(6912, -357, -1330);
	  COL_VERTEX(6298, 0, -613);
	  COL_VERTEX(6298, -869, -613);
	  COL_VERTEX(6298, -869, -2354);
	  COL_VERTEX(3405, -153, -6860);
	  COL_VERTEX(3124, 0, -6348);
	  COL_VERTEX(3943, 0, -6348);
	  COL_VERTEX(3943, -921, -6348);
	  COL_VERTEX(2714, -921, -6348);
	  COL_VERTEX(2714, 0, -5017);
	  COL_VERTEX(3328, 0, -5631);
	  COL_VERTEX(2304, 0, -5017);
	  COL_VERTEX(3636, 0, -5631);
	  COL_VERTEX(4250, 0, -5017);
	  COL_VERTEX(3738, -921, -6245);
	  COL_VERTEX(3636, -1074, -6143);
	  COL_VERTEX(3328, -921, -6245);
	  COL_VERTEX(3738, -921, -5836);
	  COL_VERTEX(3328, -921, -5836);
	  COL_VERTEX(2714, -1023, -5324);
	  COL_VERTEX(2714, -921, -5221);
	  COL_VERTEX(3021, -921, -5529);
	  COL_VERTEX(2407, -921, -5529);
	  COL_VERTEX(2714, -921, -5836);
	  COL_VERTEX(2304, -921, -5017);
	  COL_VERTEX(2100, 0, -4812);
	  COL_VERTEX(2100, 0, -4607);
	  COL_VERTEX(2304, 0, -4402);
	  COL_VERTEX(1690, -921, -3788);
	  COL_VERTEX(2304, -921, -3788);
	  COL_VERTEX(5581, 0, -3788);
	  COL_VERTEX(5581, 0, -3071);
	  COL_VERTEX(6298, 0, 102);
	  COL_VERTEX(2100, 0, 102);
	  COL_VERTEX(1895, 0, -101);
	  COL_VERTEX(4864, 0, -3378);
	  COL_VERTEX(4660, 0, -3173);
	  COL_VERTEX(4864, 0, -4812);
	  COL_VERTEX(4660, 0, -5017);
	  COL_VERTEX(1690, 0, -2969);
	  COL_VERTEX(1895, 0, -3173);
	  COL_VERTEX(2304, 0, -2354);
	  COL_VERTEX(2509, 0, -2559);
	  COL_VERTEX(2304, 0, -2149);
	  COL_VERTEX(5274, 0, -2559);
	  COL_VERTEX(3328, 0, -1945);
	  COL_VERTEX(3533, 0, -1740);
	  COL_VERTEX(3533, 0, -511);
	  COL_VERTEX(2509, 0, -1945);
	  COL_VERTEX(4660, 0, -5631);
	  COL_VERTEX(5479, 0, -5631);
	  COL_VERTEX(4455, 0, -3173);
	  COL_VERTEX(5479, 0, -2149);
	  COL_VERTEX(5479, 0, -2354);
	  COL_VERTEX(5274, 0, -1945);
	  COL_VERTEX(4352, 0, -1945);
	  COL_VERTEX(5479, 0, -1125);
	  COL_VERTEX(5274, 0, -1330);
	  COL_VERTEX(4967, 0, -1330);
	  COL_VERTEX(5479, 0, -613);
	  COL_VERTEX(5684, 0, -409);
	  COL_VERTEX(6093, 0, -409);
	  COL_VERTEX(4762, 0, -1125);
	  COL_VERTEX(4762, 0, 0);
	  COL_VERTEX(3738, 0, -306);
	  COL_VERTEX(3943, 0, -306);
	  COL_VERTEX(4148, 0, -511);
	  COL_VERTEX(2919, 0, -1125);
	  COL_VERTEX(2714, 0, -1330);
	  COL_VERTEX(2509, 0, -1330);
	  COL_VERTEX(2304, 0, -1125);
	  COL_VERTEX(2509, -767, -1125);
	  COL_VERTEX(4352, 0, 307);
	  COL_VERTEX(3840, 0, 307);
	  COL_VERTEX(4967, -818, 0);
	  COL_VERTEX(5271, -613, 205);
	  COL_VERTEX(5271, -613, 819);
	  COL_VERTEX(4557, -1023, -4402);
	  COL_VERTEX(4557, -767, -2354);
	  COL_VERTEX(1690, -767, -1023);
	  COL_VERTEX(6298, -767, -2354);
	  COL_VERTEX(5479, -869, -409);
	  COL_VERTEX(4967, -1023, -1125);
	  COL_VERTEX(4967, -1023, -1945);
	  COL_VERTEX(4762, -1023, -1125);
	  COL_VERTEX(3533, -767, -1125);
	  COL_VERTEX(2919, -869, -511);
	  COL_VERTEX(4250, -1023, -5017);
	  COL_VERTEX(5940, -921, -4146);
	  COL_VERTEX(4557, -767, -3173);
	  COL_VERTEX(2509, -767, -3788);
	  COL_VERTEX(2816, -767, -3788);
	  COL_VERTEX(3431, -1023, -3173);
	  COL_VERTEX(2509, -869, -3173);
	  COL_VERTEX(2509, -869, -2559);
	  COL_VERTEX(2304, -1023, -409);
	  COL_VERTEX(1690, -1023, -409);
	  COL_VERTEX(1895, 102, 102);
	  COL_VERTEX(5988, 51, 922);
	  COL_VERTEX(5835, 51, 870);
	  COL_VERTEX(4148, 0, -1740);
	  COL_VERTEX(3636, 0, -3583);
	  COL_VERTEX(3636, 0, -3378);
	  COL_VERTEX(3431, 0, -3173);
	  COL_VERTEX(4045, 0, -4402);
	  COL_VERTEX(4250, 0, -3378);
	  COL_VERTEX(4250, 0, -4197);
	  COL_VERTEX(1178, -153, -4633);
	  COL_VERTEX(1178, -153, -4786);
	  COL_VERTEX(-2578, 922, 1346);
	  COL_VERTEX(3484, 1126, 922);
	  COL_VERTEX(3277, 0, 5939);
	  COL_VERTEX(2765, 0, 5939);
	  COL_VERTEX(3277, 0, 6656);
	  COL_VERTEX(2765, 0, 6656);
	  COL_VERTEX(5018, 0, 4403);
	  COL_VERTEX(5018, 0, 3584);
	  COL_VERTEX(5530, 0, 3584);
	  COL_VERTEX(5018, 0, 6656);
	  COL_VERTEX(5018, 0, 6144);
	  COL_VERTEX(5530, 0, 6144);
	  COL_VERTEX(5530, 0, 6656);
	  COL_VERTEX(2048, 0, 3891);
	  COL_VERTEX(2765, 0, 3891);
	  COL_VERTEX(2765, 0, 4403);
	  COL_VERTEX(2048, 0, 4403);
	  COL_VERTEX(5018, 0, 4915);
	  COL_VERTEX(4506, 0, 4915);
	  COL_VERTEX(4506, 1024, 4915);
	  COL_VERTEX(4506, 0, 4403);
	  COL_VERTEX(6244, -204, 1331);
	  COL_VERTEX(6244, -204, 1024);
	  COL_VERTEX(1434, 614, 7680);
	  COL_VERTEX(1434, 614, 7270);
	  COL_VERTEX(1434, 410, 7270);
	  COL_VERTEX(1434, 410, 7066);
	  COL_VERTEX(1434, 205, 7066);
	  COL_VERTEX(1434, 205, 6861);
	  COL_VERTEX(5579, 0, 1434);
	  COL_VERTEX(6244, 0, 1434);
	  COL_VERTEX(5579, 205, 1536);
	  COL_VERTEX(6244, 205, 1536);
	  COL_VERTEX(1843, 410, 7270);
	  COL_VERTEX(1843, 205, 7066);
	  COL_VERTEX(1843, 0, 6861);
	  COL_VERTEX(1638, 2048, 6758);
	  COL_VERTEX(1434, 2048, 6758);
	  COL_VERTEX(1638, 2048, 6963);
	  COL_VERTEX(2048, 2048, 6963);
	  COL_VERTEX(2048, 2048, 6758);
	  COL_VERTEX(3072, 2048, 6758);
	  COL_VERTEX(3072, 2048, 6963);
	  COL_VERTEX(3482, 2048, 6963);
	  COL_VERTEX(3482, 2048, 6349);
	  COL_VERTEX(1434, 2048, 6349);
	  COL_VERTEX(3482, 1946, 6758);
	  COL_VERTEX(6192, 2048, 5146);
	  COL_VERTEX(6192, 1843, 5146);
	  COL_VERTEX(6264, 1843, 5218);
	  COL_VERTEX(6554, 2048, 5508);
	  COL_VERTEX(6554, 1843, 5508);
	  COL_VERTEX(6481, 1843, 5435);
	  COL_VERTEX(6481, 1946, 5435);
	  COL_VERTEX(6264, 1946, 5218);
	  COL_VERTEX(3482, 1946, 6963);
	  COL_VERTEX(2048, 1946, 6963);
	  COL_VERTEX(6554, 1946, 5508);
	  COL_VERTEX(6264, 2048, 5073);
	  COL_VERTEX(6554, 1946, 5363);
	  COL_VERTEX(6264, 1946, 5073);
	  COL_VERTEX(5612, 1946, 5725);
	  COL_VERTEX(5902, 1946, 6015);
	  COL_VERTEX(5612, 2048, 5725);
	  COL_VERTEX(5902, 1946, 6159);
	  COL_VERTEX(5612, 1946, 5870);
	  COL_VERTEX(5902, 2048, 6159);
	  COL_VERTEX(5540, 1843, 5797);
	  COL_VERTEX(5612, 1843, 5870);
	  COL_VERTEX(5830, 1946, 6087);
	  COL_VERTEX(5830, 1843, 6087);
	  COL_VERTEX(5902, 1843, 6159);
	  COL_VERTEX(5540, 2048, 5797);
	  COL_VERTEX(6244, 205, 2560);
	  COL_VERTEX(6244, 922, 2560);
	  COL_VERTEX(3484, 0, 922);
	  COL_VERTEX(4150, 0, 2560);
	  COL_VERTEX(-3036, 2560, 430);
	  COL_VERTEX(-3631, 1792, 727);
	  COL_VERTEX(-2578, 2560, 1346);
	  COL_VERTEX(-3036, 922, 430);
	  COL_VERTEX(-3036, 0, 430);
	  COL_VERTEX(-3631, 0, 1872);
	  COL_VERTEX(-1926, 922, 534);
	  COL_VERTEX(-2120, 922, 1117);
	  COL_VERTEX(-2578, 0, 1346);
	  COL_VERTEX(-746, 922, 1575);
	  COL_VERTEX(836, 922, 3158);
	  COL_VERTEX(-414, 922, 1038);
	  COL_VERTEX(922, 1946, 3072);
	  COL_VERTEX(410, 0, 3584);
	  COL_VERTEX(836, 0, 3158);
	  COL_VERTEX(1270, 922, 2723);
	  COL_VERTEX(1270, 0, 2723);
	  COL_VERTEX(922, 3072, 3072);
	  COL_VERTEX(1434, 4096, 2560);
	  COL_VERTEX(6244, -204, 2560);
	  COL_VERTEX(6244, 1126, 922);
	  COL_VERTEX(5579, 1126, 922);
	  COL_VERTEX(5579, -204, 922);
	  COL_VERTEX(1434, 0, 2560);
	  COL_VERTEX(410, 3072, 3072);
	  COL_VERTEX(410, 4096, 3584);
	  COL_VERTEX(410, 2048, 3738);
	  COL_VERTEX(410, 2048, 3584);
	  COL_VERTEX(4150, 922, 2560);
	  COL_VERTEX(3484, 922, 2560);
	  COL_VERTEX(5579, 922, 2560);
	  COL_VERTEX(3484, 0, 2560);
	  COL_VERTEX(4150, 1126, 922);
	  COL_VERTEX(3894, 461, 922);
	  COL_VERTEX(3484, 205, 922);
	  COL_VERTEX(4150, 205, 1434);
	  COL_VERTEX(4150, 205, 1024);
	  COL_VERTEX(4150, 0, 2048);
	  COL_VERTEX(-3631, 2560, 1872);
	  COL_VERTEX(-3631, 1536, 727);
	  COL_VERTEX(-4089, 0, 956);
	  COL_VERTEX(-3517, 1792, 613);
	  COL_VERTEX(-3654, 1792, 682);
	  COL_VERTEX(-3517, 1536, 613);
	  COL_VERTEX(-3631, 1536, 1872);
	  COL_VERTEX(-3357, 1536, 1735);
	  COL_VERTEX(-3586, 1536, 1277);
	  COL_VERTEX(-4089, 1536, 956);
	  COL_VERTEX(-3128, 1536, 1048);
	  COL_VERTEX(-3036, 1536, 430);
	  COL_VERTEX(-3654, 1536, 682);
	  COL_VERTEX(-3494, 1536, 659);
	  COL_VERTEX(7578, 4096, 6656);
	  COL_VERTEX(6554, 4096, 7680);
	  COL_VERTEX(1434, 4096, 7680);
	  COL_VERTEX(6554, 4096, 2560);
	  COL_VERTEX(7578, 4096, 3584);
	  COL_VERTEX(5988, -204, 870);
	  COL_VERTEX(5835, 51, 922);
	  COL_VERTEX(358, 2304, 3584);
	  COL_VERTEX(358, 2304, 3738);
	  COL_VERTEX(410, 2304, 3738);
	  COL_VERTEX(358, 2048, 3738);
	  COL_VERTEX(358, 2048, 3584);
	  COL_VERTEX(6554, 0, 7680);
	  COL_VERTEX(6554, 0, 6656);
	  COL_VERTEX(6554, 1024, 6656);
	  COL_VERTEX(1434, 0, 6656);
	  COL_VERTEX(7578, 0, 3584);
	  COL_VERTEX(6554, 0, 3584);
	  COL_VERTEX(7578, 1024, 3584);
	  COL_VERTEX(410, 0, 6656);
	  COL_VERTEX(410, 1024, 6656);
	  COL_VERTEX(410, 0, 4096);
	  COL_VERTEX(1434, 0, 4096);
	  COL_VERTEX(1434, 1024, 4608);
	  COL_VERTEX(410, 1024, 4608);
	  COL_VERTEX(922, 0, 5120);
	  COL_VERTEX(922, 0, 4608);
	  COL_VERTEX(7578, 0, 2560);
	  COL_VERTEX(-3677, 1536, 865);
	  COL_VERTEX(-3402, 1536, 613);
	  COL_VERTEX(-746, 0, 1575);
	  COL_VERTEX(-414, 0, 1038);
	  COL_VERTEX(1690, 0, 4608);
	  COL_VERTEX(1690, 0, 5120);
	  COL_VERTEX(3740, 461, 922);
	  COL_VERTEX(3894, 205, 870);
	  COL_VERTEX(-8089, 3072, 8064);
	  COL_VERTEX(-6860, 3072, 3558);
	  COL_VERTEX(-6245, 3072, 2534);
	  COL_VERTEX(-6860, 3072, 4890);
	  COL_VERTEX(-6860, 3072, 2534);
	  COL_VERTEX(-6245, 3072, 3558);
	  COL_VERTEX(-6245, 1741, 4890);
	  COL_VERTEX(-6860, 1905, 4890);
	  COL_VERTEX(-6245, 3072, 1510);
	  COL_VERTEX(-6245, 1536, 1510);
	  COL_VERTEX(-6860, 1536, 1510);
	  COL_VERTEX(307, 2304, 3738);
	  COL_VERTEX(307, 2048, 3738);
	  COL_VERTEX(307, 2048, 3584);
	  COL_VERTEX(307, 2048, 3251);
	  COL_VERTEX(307, 2304, 3584);
	  COL_VERTEX(307, 3072, 4070);
	  COL_VERTEX(-716, 2048, 4070);
	  COL_VERTEX(-204, 2048, 4070);
	  COL_VERTEX(-716, 2048, 3251);
	  COL_VERTEX(-204, 2048, 3251);
	  COL_VERTEX(-2559, 2048, 4070);
	  COL_VERTEX(-2969, 2048, 4480);
	  COL_VERTEX(-1945, 2048, 3763);
	  COL_VERTEX(-1637, 2048, 4070);
	  COL_VERTEX(-1330, 2048, 4070);
	  COL_VERTEX(-2252, 2048, 4378);
	  COL_VERTEX(-2764, 2048, 4890);
	  COL_VERTEX(-2969, 2048, 4685);
	  COL_VERTEX(-3847, 3072, 5428);
	  COL_VERTEX(-4273, 3072, 5855);
	  COL_VERTEX(-3481, 2048, 5402);
	  COL_VERTEX(-3437, 2048, 4609);
	  COL_VERTEX(-3437, 3072, 4609);
	  COL_VERTEX(-3276, 2048, 5094);
	  COL_VERTEX(-3890, 2048, 6118);
	  COL_VERTEX(-3583, 2048, 5811);
	  COL_VERTEX(-3173, 2048, 5914);
	  COL_VERTEX(-3788, 2048, 6528);
	  COL_VERTEX(-3173, 3072, 5914);
	  COL_VERTEX(-3788, 3072, 6528);
	  COL_VERTEX(-1524, 3072, 3251);
	  COL_VERTEX(-2635, 3072, 3807);
	  COL_VERTEX(-4800, 3072, 6118);
	  COL_VERTEX(-1330, 3072, 4070);
	  COL_VERTEX(-2149, 3072, 4480);
	  COL_VERTEX(-2764, 3072, 5094);
	  COL_VERTEX(-4607, 2048, 6938);
	  COL_VERTEX(-4607, 3072, 6938);
	  COL_VERTEX(-5631, 3072, 6118);
	  COL_VERTEX(-7474, 2161, 6528);
	  COL_VERTEX(-6553, 2161, 7450);
	  COL_VERTEX(-6962, 2048, 5606);
	  COL_VERTEX(-7474, 2048, 6118);
	  COL_VERTEX(-5631, 2048, 6118);
	  COL_VERTEX(-6553, 2048, 7450);
	  COL_VERTEX(-6143, 2048, 7450);
	  COL_VERTEX(-7167, 2161, 8064);
	  COL_VERTEX(-6860, 1843, 4582);
	  COL_VERTEX(-6860, 1761, 3763);
	  COL_VERTEX(-6860, 1331, 3558);
	  COL_VERTEX(-6860, 1024, 3558);
	  COL_VERTEX(-6860, 1024, 3354);
	  COL_VERTEX(-6860, 1331, 3763);
	  COL_VERTEX(-6245, 1741, 3558);
	  COL_VERTEX(-8089, 2161, 7142);
	  COL_VERTEX(-8089, 2161, 7654);
	  COL_VERTEX(-7679, 2161, 8064);
	  COL_VERTEX(307, 2048, 3840);
	  COL_VERTEX(307, 2048, 4070);
	  COL_VERTEX(205, 2048, 3482);
	  COL_VERTEX(-6860, 1536, 1613);
	  COL_VERTEX(4045, -4689, 2662);
	  COL_VERTEX(973, -3665, 1997);
	  COL_VERTEX(973, -3665, 2662);
	  COL_VERTEX(6605, -3665, 2662);
	  COL_VERTEX(4045, -7761, 1997);
	  COL_VERTEX(4045, -7761, 2662);
	  COL_VERTEX(4557, -7761, 2662);
	  COL_VERTEX(4557, -7761, 1997);
	  COL_VERTEX(-124, -4279, 6439);
	  COL_VERTEX(-631, -4279, 6946);
	  COL_VERTEX(20, -4279, 7598);
	  COL_VERTEX(-631, -3255, 6946);
	  COL_VERTEX(382, -4279, 6946);
	  COL_VERTEX(3351, -3255, 3108);
	  COL_VERTEX(3278, -3255, 3036);
	  COL_VERTEX(3278, -4279, 3036);
	  COL_VERTEX(3496, -3255, 3108);
	  COL_VERTEX(3568, -3255, 3036);
	  COL_VERTEX(-268, -4279, 6584);
	  COL_VERTEX(-305, -4279, 6548);
	  COL_VERTEX(889, -4279, 7598);
	  COL_VERTEX(2482, -3255, 6005);
	  COL_VERTEX(817, -4279, 6946);
	  COL_VERTEX(2120, -3255, 5643);
	  COL_VERTEX(455, -3255, 8032);
	  COL_VERTEX(1541, -4279, 5063);
	  COL_VERTEX(1541, -3255, 5063);
	  COL_VERTEX(3061, -3255, 6584);
	  COL_VERTEX(3351, -4279, 6584);
	  COL_VERTEX(3351, -3255, 6584);
	  COL_VERTEX(5089, -3255, 4846);
	  COL_VERTEX(5089, -4279, 4556);
	  COL_VERTEX(5089, -3255, 4556);
	  COL_VERTEX(1541, -3255, 4774);
	  COL_VERTEX(1396, -4279, 4919);
	  COL_VERTEX(3423, -4279, 2891);
	  COL_VERTEX(5233, -4279, 4701);
	  COL_VERTEX(2265, -4382, 4774);
	  COL_VERTEX(3351, -4382, 3688);
	  COL_VERTEX(1613, -3255, 4991);
	  COL_VERTEX(1613, -3255, 4846);
	  COL_VERTEX(3278, -3255, 6511);
	  COL_VERTEX(3134, -3255, 6511);
	  COL_VERTEX(5016, -3255, 4629);
	  COL_VERTEX(5016, -3255, 4774);
	  COL_VERTEX(-4300, 2867, -7807);
	  COL_VERTEX(-4300, 2867, -7295);
	  COL_VERTEX(-4812, 2867, -7295);
	  COL_VERTEX(-204, 2867, -5759);
	  COL_VERTEX(-4300, 2867, -5759);
	  COL_VERTEX(-4300, 2867, -8114);
	  COL_VERTEX(307, 614, -7781);
	  COL_VERTEX(-1427, -4484, 6288);
	  COL_VERTEX(-815, -4484, 5676);
	  COL_VERTEX(-1209, -4587, 5353);
	  COL_VERTEX(-851, -4587, 5712);
	  COL_VERTEX(-2862, -511, -4883);
	  COL_VERTEX(-2764, 2867, -5759);
	  COL_VERTEX(-2862, -1740, -4883);
	  COL_VERTEX(-2764, 1741, -5759);
	  COL_VERTEX(-2764, 1741, -7295);
	  COL_VERTEX(-2764, -2559, -7295);
	  COL_VERTEX(-4300, -2559, -7295);
	  COL_VERTEX(-6172, -1740, -3063);
	  COL_VERTEX(-5598, -2149, -1915);
	  COL_VERTEX(-4984, -2559, -1300);
	  COL_VERTEX(-4753, -3255, -537);
	  COL_VERTEX(-5580, -3255, -537);
	  COL_VERTEX(-5580, -5303, -537);
	  COL_VERTEX(-2303, -3255, -537);
	  COL_VERTEX(563, -3972, 1920);
	  COL_VERTEX(-1975, -5794, 444);
	  COL_VERTEX(-665, -4996, 2330);
	  COL_VERTEX(870, -3972, 2739);
	  COL_VERTEX(-869, -6020, 2227);
	  COL_VERTEX(-1484, -6327, 2534);
	  COL_VERTEX(-1427, -5740, 6288);
	  COL_VERTEX(-815, -5740, 5676);
	  COL_VERTEX(768, -4689, 2150);
	  COL_VERTEX(-341, -4023, 6511);
	  COL_VERTEX(-1484, -3255, 7654);
	  COL_VERTEX(-558, -4279, 6729);
	  COL_VERTEX(-341, -4279, 6511);
	  COL_VERTEX(-4812, 1843, -7807);
	  COL_VERTEX(-4709, 1843, -7295);
	  COL_VERTEX(3508, -409, -6962);
	  COL_VERTEX(3738, -409, -7781);
	  COL_VERTEX(-204, -409, -7904);
	  COL_VERTEX(3252, -409, -6962);
	  COL_VERTEX(3252, -409, -6911);
	  COL_VERTEX(-2897, 1843, -7807);
	  COL_VERTEX(-2897, 2867, -7807);
	  COL_VERTEX(-1740, 2867, -6578);
	  COL_VERTEX(-1740, 1843, -8114);
	  COL_VERTEX(-3788, 1843, -7295);
	  COL_VERTEX(-3788, 1741, -7295);
	  COL_VERTEX(-3276, 1741, -6783);
	  COL_VERTEX(-3788, 1741, -6783);
	  COL_VERTEX(-703, -4279, 6729);
	  COL_VERTEX(-716, 1843, -7090);
	  COL_VERTEX(-5580, -6327, 4582);
	  COL_VERTEX(-268, -4279, 6439);
	  COL_VERTEX(-7628, -3255, 1510);
	  COL_VERTEX(-4812, 1843, -7474);
	  COL_VERTEX(-4300, 1843, -5759);
	  COL_VERTEX(-204, 1843, -8114);
	  COL_VERTEX(-1740, -409, -8114);
	  COL_VERTEX(-204, -409, -6578);
	  COL_VERTEX(-1740, 1741, -8114);
	  COL_VERTEX(-1228, -511, -7602);
	  COL_VERTEX(-716, -511, -7090);
	  COL_VERTEX(-1228, -511, -7090);
	  COL_VERTEX(-716, 1741, -7602);
	  COL_VERTEX(-1228, 1741, -7090);
	  COL_VERTEX(-4812, 1843, -7628);
	  COL_VERTEX(-4914, 1843, -7295);
	  COL_VERTEX(3252, -409, -6860);
	  COL_VERTEX(3405, -409, -6860);
	  COL_VERTEX(-3276, 1741, -7295);
	  COL_VERTEX(1076, 614, -2252);
	  COL_VERTEX(-2047, 614, -2252);
	  COL_VERTEX(-2047, 614, -5119);
	  COL_VERTEX(-3583, 2355, -2943);
	  COL_VERTEX(-3583, 2355, -2585);
	  COL_VERTEX(-3583, -409, -3276);
	  COL_VERTEX(-3685, 2355, -2687);
	  COL_VERTEX(-3583, 3379, -2252);
	  COL_VERTEX(973, -409, -5119);
	  COL_VERTEX(973, -409, -4300);
	  COL_VERTEX(564, -409, -4300);
	  COL_VERTEX(52, -409, -3788);
	  COL_VERTEX(-3685, 2355, -2841);
	  COL_VERTEX(-767, -409, -3308);
	  COL_VERTEX(52, -409, -2764);
	  COL_VERTEX(-459, -409, -2252);
	  COL_VERTEX(1178, -409, -4633);
	  COL_VERTEX(1178, -409, -4786);
	  COL_VERTEX(-2559, 2253, -2764);
	  COL_VERTEX(-2559, 2355, -2252);
	  COL_VERTEX(-2047, 2355, -2252);
	  COL_VERTEX(-2047, 2355, -3276);
	  COL_VERTEX(-2559, 2253, -2252);
	  COL_VERTEX(-3071, 2253, -2764);
	  COL_VERTEX(-3071, 2253, -2252);
	  COL_VERTEX(-4607, 2810, -6578);
	  COL_VERTEX(-4607, 2810, -6988);
	  COL_VERTEX(-5426, 2810, -7295);
	  COL_VERTEX(-5426, 2810, -6271);
	  COL_VERTEX(-4914, 2810, -6271);
	  COL_VERTEX(-5426, 3630, -6271);
	  COL_VERTEX(-4914, 3630, -8191);
	  COL_VERTEX(-4914, 2810, -8191);
	  COL_VERTEX(-5631, 3630, -8191);
	  COL_VERTEX(-4914, 2810, -7807);
	  COL_VERTEX(-4582, 1536, 77);
	  COL_VERTEX(-3815, 1536, 590);
	  COL_VERTEX(-5411, 1536, 77);
	  COL_VERTEX(-3173, 3379, 384);
	  COL_VERTEX(-4582, 1024, 77);
	  COL_VERTEX(-6655, 1089, 691);
	  COL_VERTEX(-6962, 1275, 1408);
	  COL_VERTEX(-5718, 919, 691);
	  COL_VERTEX(-5733, 1536, 1408);
	  COL_VERTEX(-6392, 2458, -1099);
	  COL_VERTEX(-7083, 2458, -1539);
	  COL_VERTEX(-6753, 2458, -2057);
	  COL_VERTEX(-6373, 1536, 1408);
	  COL_VERTEX(-6553, 1536, -5247);
	  COL_VERTEX(-6962, 1577, -5654);
	  COL_VERTEX(-6553, 1536, -4223);
	  COL_VERTEX(-5017, 1843, -7807);
	  COL_VERTEX(-6143, 1792, -7039);
	  COL_VERTEX(-6553, 1331, -3199);
	  COL_VERTEX(-6553, 2810, -7295);
	  COL_VERTEX(-3685, 2355, -2943);
	  COL_VERTEX(-3685, 2355, -2585);
	  COL_VERTEX(-7781, 1331, -639);
	  COL_VERTEX(-6629, 1536, 1408);
	  COL_VERTEX(-5733, 3379, 1408);
	  COL_VERTEX(-5221, 2355, -2175);
	  COL_VERTEX(-3685, 1331, -1663);
	  COL_VERTEX(-4095, 2355, -1458);
	  COL_VERTEX(-4095, 3379, -1458);
	  COL_VERTEX(-4709, 3379, -3199);
	  COL_VERTEX(-3685, 3379, -3199);
	  COL_VERTEX(-5221, 1331, -1663);
	  COL_VERTEX(-6245, -2252, -879);
	  COL_VERTEX(-5871, -2252, -1253);
	  COL_VERTEX(-5391, -2252, -1253);
	  COL_VERTEX(-6245, -2252, -399);
	  COL_VERTEX(-5017, -2252, -879);
	  COL_VERTEX(-5017, -2252, -399);
	  COL_VERTEX(-5391, -2252, -25);
	  COL_VERTEX(-5871, -2252, -25);
	  COL_VERTEX(-5466, 2458, -455);
	  COL_VERTEX(-4749, 2458, -455);
	  COL_VERTEX(-4749, 2458, 261);
	  COL_VERTEX(-5426, 1331, -3199);
	  COL_VERTEX(-6143, 1792, -6783);
	  COL_VERTEX(-6553, 2697, -6271);
	  COL_VERTEX(-5426, 1229, -3199);
	  COL_VERTEX(-5785, 1792, -6783);
	  COL_VERTEX(-5785, 1741, -6783);
	  COL_VERTEX(3996, 205, 819);
	  COL_VERTEX(1690, 205, 819);
	  COL_VERTEX(1690, 205, -306);
	  COL_VERTEX(3740, 205, 819);
	  COL_VERTEX(6298, 1024, -306);
	  COL_VERTEX(6298, 1024, 819);
	  COL_VERTEX(1895, 102, -101);
	  COL_VERTEX(3740, 205, 870);
	  COL_VERTEX(3894, 205, 922);
	  COL_VERTEX(5681, -204, 205);
	  COL_VERTEX(6093, -204, 819);
	  COL_VERTEX(6298, -204, 205);
	  COL_VERTEX(6298, -204, 819);
	  COL_VERTEX(5681, -409, 205);
	  COL_VERTEX(5476, -409, 205);
	  COL_VERTEX(1280, -409, -4965);
	  COL_VERTEX(1178, -409, -4965);
	  COL_VERTEX(1690, -409, -4965);
	  COL_VERTEX(1690, -409, -4453);
	  COL_VERTEX(3533, -409, -6348);
	  COL_VERTEX(3124, -409, -6757);
	  COL_VERTEX(3533, -409, -6860);
	  COL_VERTEX(3124, -409, -6860);
	  COL_VERTEX(3533, 0, -6348);
	  COL_VERTEX(5476, -613, 205);
	  COL_VERTEX(5835, -204, 819);
	  COL_VERTEX(5835, 0, 819);
	  COL_VERTEX(4967, 0, 819);
	  COL_VERTEX(4967, 1024, 819);
	  COL_VERTEX(5988, 0, 819);
	  COL_VERTEX(2919, -869, 819);
	  COL_VERTEX(3328, 0, 819);
	  COL_VERTEX(2919, -869, -1125);
	  COL_VERTEX(2304, 0, 819);
	  COL_VERTEX(1690, -1023, 819);
	  COL_VERTEX(6298, -204, 410);
	  COL_VERTEX(6093, -204, 205);
	  COL_VERTEX(6093, -818, 205);
	  COL_VERTEX(4967, -818, 205);
	  COL_VERTEX(6298, 0, -4812);
	  COL_VERTEX(6298, -921, -4812);
	  COL_VERTEX(6298, -921, -4505);
	  COL_VERTEX(4660, -921, -5631);
	  COL_VERTEX(4660, -921, -4146);
	  COL_VERTEX(6298, -921, -4146);
	  COL_VERTEX(1690, 0, -6348);
	  COL_VERTEX(1690, 102, -4453);
	  COL_VERTEX(1895, -921, -3788);
	  COL_VERTEX(3431, -1023, -3788);
	  COL_VERTEX(1690, -1023, -2969);
	  COL_VERTEX(6298, 0, -1330);
	  COL_VERTEX(6298, 154, -1330);
	  COL_VERTEX(6298, -357, -1330);
	  COL_VERTEX(6298, -357, -1842);
	  COL_VERTEX(6298, 0, -2354);
	  COL_VERTEX(2714, 0, -6348);
	  COL_VERTEX(2714, -921, -5017);
	  COL_VERTEX(2100, -921, -4812);
	  COL_VERTEX(3328, -921, -5631);
	  COL_VERTEX(3636, -921, -5631);
	  COL_VERTEX(3943, -921, -5017);
	  COL_VERTEX(4250, -1023, -6041);
	  COL_VERTEX(2100, -921, -4607);
	  COL_VERTEX(3636, -1074, -5938);
	  COL_VERTEX(3431, -1074, -5938);
	  COL_VERTEX(3431, -1074, -6143);
	  COL_VERTEX(2509, -1023, -5529);
	  COL_VERTEX(2919, -1023, -5529);
	  COL_VERTEX(2714, -1023, -5733);
	  COL_VERTEX(2304, -921, -5938);
	  COL_VERTEX(2304, -921, -4402);
	  COL_VERTEX(4045, -1023, -4402);
	  COL_VERTEX(2304, -1023, -4402);
	  COL_VERTEX(4250, -1023, -4197);
	  COL_VERTEX(2509, -767, -4402);
	  COL_VERTEX(5581, -921, -3788);
	  COL_VERTEX(5581, -767, -3071);
	  COL_VERTEX(1895, 0, 102);
	  COL_VERTEX(4967, 0, 102);
	  COL_VERTEX(4864, -921, -3378);
	  COL_VERTEX(4864, -921, -4812);
	  COL_VERTEX(4864, -767, -3378);
	  COL_VERTEX(4660, -921, -5017);
	  COL_VERTEX(4660, -767, -3173);
	  COL_VERTEX(1690, -869, -2969);
	  COL_VERTEX(1895, -869, -3173);
	  COL_VERTEX(3636, -1023, -3378);
	  COL_VERTEX(2304, -801, -2149);
	  COL_VERTEX(2304, -801, -2354);
	  COL_VERTEX(2304, -767, -2149);
	  COL_VERTEX(2509, -767, -1945);
	  COL_VERTEX(2509, -1023, -2559);
	  COL_VERTEX(3533, -767, -1740);
	  COL_VERTEX(3533, -869, -1740);
	  COL_VERTEX(3533, -869, -511);
	  COL_VERTEX(3328, -767, -1945);
	  COL_VERTEX(5274, -1023, -2559);
	  COL_VERTEX(3738, -869, -306);
	  COL_VERTEX(5479, -921, -5631);
	  COL_VERTEX(3943, -869, -306);
	  COL_VERTEX(4660, -1023, -5631);
	  COL_VERTEX(4660, -1023, -3173);
	  COL_VERTEX(3943, -1023, -6348);
	  COL_VERTEX(4455, -1023, -3173);
	  COL_VERTEX(5479, -869, -2354);
	  COL_VERTEX(5479, -767, -2354);
	  COL_VERTEX(5274, -767, -2559);
	  COL_VERTEX(5479, -869, -2149);
	  COL_VERTEX(4352, -1023, -1945);
	  COL_VERTEX(5274, -1023, -1945);
	  COL_VERTEX(5274, -931, -1945);
	  COL_VERTEX(5274, -931, -1330);
	  COL_VERTEX(4967, -1023, -1330);
	  COL_VERTEX(5479, -869, -1125);
	  COL_VERTEX(5479, -869, -613);
	  COL_VERTEX(5684, -869, -409);
	  COL_VERTEX(4762, -869, 0);
	  COL_VERTEX(6093, -869, -409);
	  COL_VERTEX(4762, -1023, 0);
	  COL_VERTEX(4967, -1023, 205);
	  COL_VERTEX(4148, -869, -511);
	  COL_VERTEX(4148, -1023, -511);
	  COL_VERTEX(4148, -1023, -1740);
	  COL_VERTEX(2714, -767, -1330);
	  COL_VERTEX(2919, -767, -1125);
	  COL_VERTEX(2509, -767, -1330);
	  COL_VERTEX(2304, -767, -1125);
	  COL_VERTEX(2304, -1023, -1125);
	  COL_VERTEX(3533, -767, -1945);
	  COL_VERTEX(3840, -869, 307);
	  COL_VERTEX(4352, -869, 307);
	  COL_VERTEX(4762, -869, 819);
	  COL_VERTEX(4967, -818, 819);
	  COL_VERTEX(3431, -1023, -4402);
	  COL_VERTEX(3431, -1023, -2559);
	  COL_VERTEX(4557, -1023, -2559);
	  COL_VERTEX(5581, -767, -3378);
	  COL_VERTEX(4557, -767, -3378);
	  COL_VERTEX(2509, -767, -1023);
	  COL_VERTEX(2509, -767, -2252);
	  COL_VERTEX(1690, -767, -2252);
	  COL_VERTEX(6298, -869, -409);
	  COL_VERTEX(4148, -1023, -1125);
	  COL_VERTEX(4148, -1023, -1945);
	  COL_VERTEX(4762, -869, -511);
	  COL_VERTEX(4864, -921, -4146);
	  COL_VERTEX(4557, -1023, -3173);
	  COL_VERTEX(4557, -767, -2559);
	  COL_VERTEX(2816, -767, -4402);
	  COL_VERTEX(1690, -869, -2559);
	  COL_VERTEX(1690, -869, -3173);
	  COL_VERTEX(2304, -767, -1023);
	  COL_VERTEX(5835, -204, 870);
	  COL_VERTEX(3636, -1023, -3583);
	  COL_VERTEX(4250, -1023, -3378);
	  COL_VERTEX(-814, 922, 638);
	  COL_VERTEX(6244, 1126, 2560);
	  COL_VERTEX(3484, 1126, 2560);
	  COL_VERTEX(5530, 0, 4403);
	  COL_VERTEX(5018, 1024, 4915);
	  COL_VERTEX(4506, 1024, 4403);
	  COL_VERTEX(5018, 1024, 4403);
	  COL_VERTEX(5579, -204, 1024);
	  COL_VERTEX(5579, -204, 1331);
	  COL_VERTEX(6244, -204, 922);
	  COL_VERTEX(1843, 614, 7270);
	  COL_VERTEX(1843, 614, 7680);
	  COL_VERTEX(1843, 410, 7066);
	  COL_VERTEX(1843, 205, 6861);
	  COL_VERTEX(1434, 0, 6861);
	  COL_VERTEX(5579, 0, 1331);
	  COL_VERTEX(6244, 0, 1331);
	  COL_VERTEX(5579, 205, 1434);
	  COL_VERTEX(6244, 205, 1434);
	  COL_VERTEX(1843, 0, 7680);
	  COL_VERTEX(1638, 1946, 6963);
	  COL_VERTEX(1638, 1946, 6758);
	  COL_VERTEX(2048, 1946, 6758);
	  COL_VERTEX(3072, 1946, 6758);
	  COL_VERTEX(1434, 1946, 6758);
	  COL_VERTEX(3072, 1946, 6963);
	  COL_VERTEX(3482, 2048, 6758);
	  COL_VERTEX(3482, 1946, 6349);
	  COL_VERTEX(1434, 1946, 6349);
	  COL_VERTEX(6264, 1843, 5073);
	  COL_VERTEX(6336, 1843, 5146);
	  COL_VERTEX(6336, 1946, 5146);
	  COL_VERTEX(6626, 2048, 5435);
	  COL_VERTEX(6626, 1843, 5435);
	  COL_VERTEX(6554, 1843, 5363);
	  COL_VERTEX(6192, 1946, 5146);
	  COL_VERTEX(6626, 1946, 5435);
	  COL_VERTEX(5685, 1843, 5797);
	  COL_VERTEX(5612, 1843, 5725);
	  COL_VERTEX(5685, 1946, 5797);
	  COL_VERTEX(5974, 1946, 6087);
	  COL_VERTEX(5974, 1843, 6087);
	  COL_VERTEX(5902, 1843, 6015);
	  COL_VERTEX(5974, 2048, 6087);
	  COL_VERTEX(5540, 1946, 5797);
	  COL_VERTEX(5579, 205, 2560);
	  COL_VERTEX(4150, 1126, 2560);
	  COL_VERTEX(4150, 0, 922);
	  COL_VERTEX(-3494, 1792, 659);
	  COL_VERTEX(-4089, 2560, 956);
	  COL_VERTEX(-1926, 0, 534);
	  COL_VERTEX(-2120, 0, 1117);
	  COL_VERTEX(5988, -204, 922);
	  COL_VERTEX(5835, -204, 922);
	  COL_VERTEX(410, 3072, 3584);
	  COL_VERTEX(5579, 1126, 2560);
	  COL_VERTEX(5579, -204, 2560);
	  COL_VERTEX(410, 4096, 6656);
	  COL_VERTEX(6554, 0, 2560);
	  COL_VERTEX(3484, 205, 1434);
	  COL_VERTEX(3484, 0, 2048);
	  COL_VERTEX(4150, 205, 922);
	  COL_VERTEX(3740, 205, 922);
	  COL_VERTEX(3484, 205, 1024);
	  COL_VERTEX(-3586, 1434, 1277);
	  COL_VERTEX(-3357, 1434, 1735);
	  COL_VERTEX(-3128, 1434, 1048);
	  COL_VERTEX(-3357, 1536, 705);
	  COL_VERTEX(-2899, 1434, 1506);
	  COL_VERTEX(-2899, 1536, 1506);
	  COL_VERTEX(-2578, 1536, 1346);
	  COL_VERTEX(-3723, 1536, 773);
	  COL_VERTEX(6554, 1024, 7680);
	  COL_VERTEX(1434, 0, 7680);
	  COL_VERTEX(1434, 1024, 7680);
	  COL_VERTEX(7578, 1024, 6656);
	  COL_VERTEX(7578, 0, 6656);
	  COL_VERTEX(6554, 1024, 2560);
	  COL_VERTEX(410, 2304, 3584);
	  COL_VERTEX(1434, 1024, 6656);
	  COL_VERTEX(6554, 1024, 3584);
	  COL_VERTEX(1434, 1024, 4096);
	  COL_VERTEX(410, 1024, 4096);
	  COL_VERTEX(1434, 0, 4608);
	  COL_VERTEX(410, 0, 4608);
	  COL_VERTEX(410, 0, 7680);
	  COL_VERTEX(7578, 0, 7680);
	  COL_VERTEX(410, 0, 2560);
	  COL_VERTEX(410, 3072, 4096);
	  COL_VERTEX(922, 3072, 4096);
	  COL_VERTEX(-8089, 3072, 1510);
	  COL_VERTEX(307, 3072, 1510);
	  COL_VERTEX(307, 3072, 8064);
	  COL_VERTEX(-6860, -1535, 3558);
	  COL_VERTEX(-6245, 1536, 2534);
	  COL_VERTEX(-6245, -1535, 2534);
	  COL_VERTEX(-6860, 1536, 2534);
	  COL_VERTEX(-6245, -1535, 3558);
	  COL_VERTEX(-6860, 1741, 4890);
	  COL_VERTEX(-6860, 1741, 3558);
	  COL_VERTEX(-6962, 3072, 5606);
	  COL_VERTEX(-6860, 3072, 1510);
	  COL_VERTEX(-6245, 3072, 4890);
	  COL_VERTEX(-6143, 2048, 5606);
	  COL_VERTEX(-6143, 3072, 5606);
	  COL_VERTEX(-6245, 1905, 4890);
	  COL_VERTEX(-6245, 1536, 1613);
	  COL_VERTEX(307, 3072, 3251);
	  COL_VERTEX(-716, -1535, 4070);
	  COL_VERTEX(-716, -1535, 3251);
	  COL_VERTEX(-204, -1535, 4070);
	  COL_VERTEX(-204, -1535, 3251);
	  COL_VERTEX(-1524, 2048, 3251);
	  COL_VERTEX(-2149, 2048, 4480);
	  COL_VERTEX(-2559, -1535, 4070);
	  COL_VERTEX(-1945, -1535, 3763);
	  COL_VERTEX(-2635, 2048, 3807);
	  COL_VERTEX(-2969, -1535, 4480);
	  COL_VERTEX(-1637, -1535, 4070);
	  COL_VERTEX(-2252, -1535, 4378);
	  COL_VERTEX(-2764, -1535, 4890);
	  COL_VERTEX(-2764, 2048, 5094);
	  COL_VERTEX(-2969, -1535, 4685);
	  COL_VERTEX(-3437, -1535, 4609);
	  COL_VERTEX(-3847, -1535, 5428);
	  COL_VERTEX(-3847, 2048, 5428);
	  COL_VERTEX(-3276, -1535, 5094);
	  COL_VERTEX(-4273, 2048, 5855);
	  COL_VERTEX(-3481, -1535, 5402);
	  COL_VERTEX(-3788, -1535, 6528);
	  COL_VERTEX(-3173, -1535, 5914);
	  COL_VERTEX(-3583, -1535, 5811);
	  COL_VERTEX(-3890, -1535, 6118);
	  COL_VERTEX(-4800, 2048, 6118);
	  COL_VERTEX(-5631, 2048, 6938);
	  COL_VERTEX(-5631, 3072, 6938);
	  COL_VERTEX(-7474, 2048, 6528);
	  COL_VERTEX(-7474, 3072, 6118);
	  COL_VERTEX(-7474, 3072, 6528);
	  COL_VERTEX(-8089, 3072, 7142);
	  COL_VERTEX(-6143, 3072, 7450);
	  COL_VERTEX(-6553, 3072, 7450);
	  COL_VERTEX(-7167, 3072, 8064);
	  COL_VERTEX(-6245, 1843, 4582);
	  COL_VERTEX(-6245, 1761, 3763);
	  COL_VERTEX(-6245, 1331, 3558);
	  COL_VERTEX(-6245, 1024, 3558);
	  COL_VERTEX(-6245, 1024, 3354);
	  COL_VERTEX(-6245, -1535, 3354);
	  COL_VERTEX(-6860, -1535, 3354);
	  COL_VERTEX(-6245, 1331, 3763);
	  COL_VERTEX(-8089, 3072, 7654);
	  COL_VERTEX(-7679, 3072, 8064);
	  COL_VERTEX(205, 2048, 3840);
	  COL_VERTEX(307, 2048, 3482);
	  COL_TRI_INIT(SURFACE_DEFAULT, 1861);
	  COL_TRI(243, 246, 244);
	  COL_TRI(234, 235, 236);
	  COL_TRI(234, 236, 237);
	  COL_TRI(238, 234, 237);
	  COL_TRI(238, 239, 234);
	  COL_TRI(236, 235, 240);
	  COL_TRI(236, 240, 241);
	  COL_TRI(238, 241, 240);
	  COL_TRI(238, 240, 239);
	  COL_TRI(242, 243, 244);
	  COL_TRI(242, 244, 245);
	  COL_TRI(250, 994, 995);
	  COL_TRI(243, 247, 246);
	  COL_TRI(248, 252, 992);
	  COL_TRI(248, 992, 255);
	  COL_TRI(249, 993, 247);
	  COL_TRI(249, 247, 253);
	  COL_TRI(250, 246, 994);
	  COL_TRI(251, 4, 245);
	  COL_TRI(246, 240, 235);
	  COL_TRI(246, 235, 994);
	  COL_TRI(235, 234, 993);
	  COL_TRI(235, 993, 994);
	  COL_TRI(234, 247, 993);
	  COL_TRI(234, 239, 247);
	  COL_TRI(245, 4, 6);
	  COL_TRI(245, 6, 242);
	  COL_TRI(242, 6, 5);
	  COL_TRI(242, 5, 254);
	  COL_TRI(251, 7, 4);
	  COL_TRI(252, 996, 997);
	  COL_TRI(252, 997, 992);
	  COL_TRI(253, 251, 250);
	  COL_TRI(254, 5, 7);
	  COL_TRI(254, 7, 251);
	  COL_TRI(256, 1001, 3);
	  COL_TRI(250, 995, 249);
	  COL_TRI(250, 249, 253);
	  COL_TRI(253, 254, 251);
	  COL_TRI(255, 998, 999);
	  COL_TRI(255, 999, 248);
	  COL_TRI(256, 1000, 1001);
	  COL_TRI(259, 1008, 1005);
	  COL_TRI(257, 1002, 1001);
	  COL_TRI(257, 1001, 1003);
	  COL_TRI(258, 1000, 1004);
	  COL_TRI(259, 1005, 260);
	  COL_TRI(260, 1005, 1006);
	  COL_TRI(260, 1006, 1007);
	  COL_TRI(261, 1008, 259);
	  COL_TRI(261, 1009, 1008);
	  COL_TRI(262, 265, 263);
	  COL_TRI(262, 263, 264);
	  COL_TRI(263, 1010, 1000);
	  COL_TRI(263, 1000, 258);
	  COL_TRI(263, 265, 1010);
	  COL_TRI(264, 263, 258);
	  COL_TRI(265, 1011, 1010);
	  COL_TRI(262, 266, 384);
	  COL_TRI(262, 264, 266);
	  COL_TRI(264, 258, 1003);
	  COL_TRI(264, 1003, 1001);
	  COL_TRI(264, 1001, 266);
	  COL_TRI(266, 1010, 1011);
	  COL_TRI(266, 1011, 384);
	  COL_TRI(269, 271, 1015);
	  COL_TRI(267, 1012, 1002);
	  COL_TRI(267, 1002, 257);
	  COL_TRI(2, 1012, 267);
	  COL_TRI(2, 267, 1013);
	  COL_TRI(258, 1004, 268);
	  COL_TRI(268, 1004, 1014);
	  COL_TRI(268, 1014, 269);
	  COL_TRI(269, 1014, 271);
	  COL_TRI(273, 1021, 1022);
	  COL_TRI(270, 1013, 1016);
	  COL_TRI(271, 1017, 1018);
	  COL_TRI(271, 1018, 1015);
	  COL_TRI(272, 2, 1013);
	  COL_TRI(272, 1013, 1019);
	  COL_TRI(273, 1020, 1021);
	  COL_TRI(276, 278, 275);
	  COL_TRI(261, 1023, 1024);
	  COL_TRI(261, 1024, 1009);
	  COL_TRI(274, 1006, 1025);
	  COL_TRI(274, 1007, 1006);
	  COL_TRI(275, 277, 1026);
	  COL_TRI(275, 1026, 276);
	  COL_TRI(280, 53, 1029);
	  COL_TRI(277, 1027, 1026);
	  COL_TRI(276, 1028, 278);
	  COL_TRI(277, 279, 1027);
	  COL_TRI(278, 1028, 1027);
	  COL_TRI(279, 278, 1027);
	  COL_TRI(278, 280, 275);
	  COL_TRI(278, 281, 280);
	  COL_TRI(279, 281, 278);
	  COL_TRI(280, 43, 45);
	  COL_TRI(280, 45, 53);
	  COL_TRI(53, 51, 1029);
	  COL_TRI(51, 1030, 1029);
	  COL_TRI(281, 41, 43);
	  COL_TRI(281, 43, 280);
	  COL_TRI(51, 49, 1030);
	  COL_TRI(49, 47, 1030);
	  COL_TRI(47, 281, 1030);
	  COL_TRI(47, 39, 281);
	  COL_TRI(39, 41, 281);
	  COL_TRI(282, 1031, 283);
	  COL_TRI(283, 1031, 1018);
	  COL_TRI(283, 1018, 1017);
	  COL_TRI(282, 1032, 1031);
	  COL_TRI(274, 1032, 282);
	  COL_TRI(274, 1025, 1032);
	  COL_TRI(284, 1033, 285);
	  COL_TRI(285, 1033, 1021);
	  COL_TRI(285, 1021, 1020);
	  COL_TRI(273, 1022, 1036);
	  COL_TRI(284, 1034, 1033);
	  COL_TRI(272, 1034, 284);
	  COL_TRI(272, 1019, 1034);
	  COL_TRI(286, 1035, 287);
	  COL_TRI(287, 1035, 1024);
	  COL_TRI(287, 1024, 1023);
	  COL_TRI(286, 1036, 1035);
	  COL_TRI(273, 1036, 286);
	  COL_TRI(289, 1041, 1042);
	  COL_TRI(280, 1029, 277);
	  COL_TRI(275, 280, 277);
	  COL_TRI(277, 1029, 1030);
	  COL_TRI(277, 1030, 279);
	  COL_TRI(279, 1030, 281);
	  COL_TRI(288, 1037, 1038);
	  COL_TRI(288, 1038, 1039);
	  COL_TRI(289, 1040, 1041);
	  COL_TRI(294, 1044, 293);
	  COL_TRI(290, 419, 1043);
	  COL_TRI(290, 1043, 365);
	  COL_TRI(291, 1044, 1045);
	  COL_TRI(291, 293, 1044);
	  COL_TRI(292, 293, 1046);
	  COL_TRI(293, 291, 1046);
	  COL_TRI(296, 1049, 297);
	  COL_TRI(291, 1045, 1047);
	  COL_TRI(294, 293, 292);
	  COL_TRI(291, 1047, 1046);
	  COL_TRI(295, 1048, 297);
	  COL_TRI(296, 297, 298);
	  COL_TRI(297, 1048, 298);
	  COL_TRI(303, 299, 310);
	  COL_TRI(298, 1048, 1050);
	  COL_TRI(295, 1050, 1048);
	  COL_TRI(298, 1050, 309);
	  COL_TRI(296, 298, 299);
	  COL_TRI(299, 298, 309);
	  COL_TRI(300, 296, 302);
	  COL_TRI(296, 299, 302);
	  COL_TRI(301, 1041, 296);
	  COL_TRI(302, 299, 303);
	  COL_TRI(299, 309, 310);
	  COL_TRI(306, 307, 300);
	  COL_TRI(304, 302, 303);
	  COL_TRI(305, 306, 302);
	  COL_TRI(306, 300, 302);
	  COL_TRI(305, 302, 304);
	  COL_TRI(307, 301, 300);
	  COL_TRI(301, 296, 300);
	  COL_TRI(295, 1051, 1052);
	  COL_TRI(295, 1052, 1053);
	  COL_TRI(307, 1054, 301);
	  COL_TRI(308, 1050, 295);
	  COL_TRI(309, 1050, 308);
	  COL_TRI(195, 308, 196);
	  COL_TRI(196, 308, 295);
	  COL_TRI(309, 308, 195);
	  COL_TRI(197, 196, 295);
	  COL_TRI(204, 201, 307);
	  COL_TRI(204, 307, 306);
	  COL_TRI(310, 309, 195);
	  COL_TRI(301, 1038, 1041);
	  COL_TRI(296, 1041, 1049);
	  COL_TRI(200, 199, 1054);
	  COL_TRI(201, 200, 307);
	  COL_TRI(200, 1054, 307);
	  COL_TRI(199, 1053, 1054);
	  COL_TRI(312, 305, 304);
	  COL_TRI(310, 195, 198);
	  COL_TRI(206, 204, 306);
	  COL_TRI(206, 306, 305);
	  COL_TRI(303, 310, 311);
	  COL_TRI(311, 310, 198);
	  COL_TRI(311, 198, 207);
	  COL_TRI(224, 206, 305);
	  COL_TRI(224, 305, 312);
	  COL_TRI(317, 314, 210);
	  COL_TRI(313, 303, 311);
	  COL_TRI(313, 311, 314);
	  COL_TRI(314, 311, 207);
	  COL_TRI(314, 207, 210);
	  COL_TRI(312, 304, 1055);
	  COL_TRI(225, 224, 312);
	  COL_TRI(315, 312, 1055);
	  COL_TRI(225, 312, 315);
	  COL_TRI(316, 313, 314);
	  COL_TRI(316, 314, 317);
	  COL_TRI(320, 317, 319);
	  COL_TRI(317, 210, 213);
	  COL_TRI(315, 1055, 1056);
	  COL_TRI(226, 225, 315);
	  COL_TRI(318, 315, 1057);
	  COL_TRI(315, 1056, 1057);
	  COL_TRI(226, 315, 318);
	  COL_TRI(319, 317, 213);
	  COL_TRI(320, 316, 317);
	  COL_TRI(322, 1057, 325);
	  COL_TRI(319, 213, 216);
	  COL_TRI(199, 197, 1053);
	  COL_TRI(197, 295, 1053);
	  COL_TRI(321, 1054, 1053);
	  COL_TRI(321, 1053, 1052);
	  COL_TRI(322, 318, 1057);
	  COL_TRI(226, 318, 322);
	  COL_TRI(323, 320, 319);
	  COL_TRI(323, 319, 324);
	  COL_TRI(324, 319, 217);
	  COL_TRI(319, 216, 217);
	  COL_TRI(220, 226, 322);
	  COL_TRI(325, 326, 322);
	  COL_TRI(322, 326, 220);
	  COL_TRI(325, 1058, 326);
	  COL_TRI(227, 326, 1060);
	  COL_TRI(326, 1059, 1060);
	  COL_TRI(326, 1058, 1059);
	  COL_TRI(227, 220, 326);
	  COL_TRI(228, 327, 217);
	  COL_TRI(217, 327, 324);
	  COL_TRI(327, 1061, 323);
	  COL_TRI(324, 327, 323);
	  COL_TRI(328, 1061, 327);
	  COL_TRI(229, 1060, 347);
	  COL_TRI(228, 229, 347);
	  COL_TRI(327, 228, 347);
	  COL_TRI(221, 227, 1060);
	  COL_TRI(222, 231, 330);
	  COL_TRI(231, 350, 330);
	  COL_TRI(231, 230, 350);
	  COL_TRI(329, 337, 350);
	  COL_TRI(229, 221, 1060);
	  COL_TRI(332, 222, 336);
	  COL_TRI(222, 330, 336);
	  COL_TRI(330, 348, 1062);
	  COL_TRI(330, 344, 348);
	  COL_TRI(230, 233, 329);
	  COL_TRI(230, 329, 350);
	  COL_TRI(331, 332, 1063);
	  COL_TRI(223, 222, 1064);
	  COL_TRI(332, 1064, 222);
	  COL_TRI(333, 332, 1066);
	  COL_TRI(332, 331, 1066);
	  COL_TRI(333, 334, 332);
	  COL_TRI(223, 1064, 332);
	  COL_TRI(334, 223, 332);
	  COL_TRI(332, 335, 1063);
	  COL_TRI(335, 336, 1063);
	  COL_TRI(336, 347, 1063);
	  COL_TRI(329, 334, 337);
	  COL_TRI(334, 329, 223);
	  COL_TRI(337, 334, 333);
	  COL_TRI(223, 232, 222);
	  COL_TRI(329, 233, 223);
	  COL_TRI(338, 381, 337);
	  COL_TRI(338, 337, 333);
	  COL_TRI(339, 340, 342);
	  COL_TRI(340, 343, 342);
	  COL_TRI(341, 1065, 340);
	  COL_TRI(341, 340, 339);
	  COL_TRI(342, 343, 1070);
	  COL_TRI(343, 346, 1070);
	  COL_TRI(330, 342, 1070);
	  COL_TRI(330, 339, 342);
	  COL_TRI(341, 339, 350);
	  COL_TRI(344, 330, 1070);
	  COL_TRI(345, 336, 330);
	  COL_TRI(345, 330, 1062);
	  COL_TRI(346, 344, 1070);
	  COL_TRI(345, 1062, 341);
	  COL_TRI(349, 385, 1071);
	  COL_TRI(347, 345, 328);
	  COL_TRI(347, 336, 345);
	  COL_TRI(345, 341, 349);
	  COL_TRI(341, 350, 349);
	  COL_TRI(348, 1065, 341);
	  COL_TRI(348, 341, 1062);
	  COL_TRI(349, 1071, 383);
	  COL_TRI(349, 383, 1072);
	  COL_TRI(351, 338, 95);
	  COL_TRI(350, 337, 381);
	  COL_TRI(350, 381, 349);
	  COL_TRI(333, 1066, 1067);
	  COL_TRI(338, 333, 1067);
	  COL_TRI(338, 351, 1068);
	  COL_TRI(338, 1068, 1069);
	  COL_TRI(338, 1069, 381);
	  COL_TRI(95, 338, 1067);
	  COL_TRI(354, 236, 241);
	  COL_TRI(352, 1067, 1066);
	  COL_TRI(344, 356, 353);
	  COL_TRI(344, 353, 348);
	  COL_TRI(353, 354, 1065);
	  COL_TRI(353, 1065, 348);
	  COL_TRI(354, 340, 1065);
	  COL_TRI(354, 355, 340);
	  COL_TRI(353, 236, 354);
	  COL_TRI(354, 241, 355);
	  COL_TRI(355, 241, 238);
	  COL_TRI(355, 238, 356);
	  COL_TRI(353, 237, 236);
	  COL_TRI(356, 237, 353);
	  COL_TRI(356, 238, 237);
	  COL_TRI(352, 1066, 331);
	  COL_TRI(357, 352, 347);
	  COL_TRI(358, 1075, 393);
	  COL_TRI(358, 393, 1076);
	  COL_TRI(359, 360, 362);
	  COL_TRI(360, 361, 362);
	  COL_TRI(360, 420, 404);
	  COL_TRI(360, 404, 419);
	  COL_TRI(361, 364, 362);
	  COL_TRI(361, 1077, 364);
	  COL_TRI(359, 362, 1078);
	  COL_TRI(362, 364, 1078);
	  COL_TRI(363, 1079, 359);
	  COL_TRI(363, 359, 1043);
	  COL_TRI(359, 1078, 365);
	  COL_TRI(359, 365, 1043);
	  COL_TRI(364, 366, 1078);
	  COL_TRI(364, 1077, 366);
	  COL_TRI(365, 1078, 366);
	  COL_TRI(365, 366, 290);
	  COL_TRI(366, 423, 424);
	  COL_TRI(290, 366, 424);
	  COL_TRI(373, 369, 358);
	  COL_TRI(367, 368, 1082);
	  COL_TRI(368, 1083, 1082);
	  COL_TRI(369, 370, 1084);
	  COL_TRI(369, 1084, 372);
	  COL_TRI(288, 369, 370);
	  COL_TRI(370, 369, 1085);
	  COL_TRI(288, 1075, 369);
	  COL_TRI(371, 369, 373);
	  COL_TRI(372, 369, 428);
	  COL_TRI(369, 371, 428);
	  COL_TRI(372, 1049, 1084);
	  COL_TRI(374, 372, 428);
	  COL_TRI(375, 1085, 372);
	  COL_TRI(376, 375, 372);
	  COL_TRI(372, 1085, 369);
	  COL_TRI(372, 374, 1049);
	  COL_TRI(370, 1085, 398);
	  COL_TRI(377, 1068, 378);
	  COL_TRI(378, 1068, 379);
	  COL_TRI(378, 379, 380);
	  COL_TRI(378, 380, 1090);
	  COL_TRI(351, 379, 1068);
	  COL_TRI(351, 386, 379);
	  COL_TRI(379, 386, 387);
	  COL_TRI(379, 387, 1072);
	  COL_TRI(380, 429, 1090);
	  COL_TRI(377, 1069, 1068);
	  COL_TRI(377, 378, 1090);
	  COL_TRI(383, 262, 384);
	  COL_TRI(381, 1069, 377);
	  COL_TRI(381, 377, 385);
	  COL_TRI(377, 1090, 382);
	  COL_TRI(377, 382, 385);
	  COL_TRI(382, 1093, 385);
	  COL_TRI(99, 388, 351);
	  COL_TRI(351, 95, 99);
	  COL_TRI(351, 388, 386);
	  COL_TRI(384, 1011, 1074);
	  COL_TRI(383, 384, 1073);
	  COL_TRI(265, 1071, 1074);
	  COL_TRI(265, 1074, 1011);
	  COL_TRI(383, 1071, 265);
	  COL_TRI(383, 265, 262);
	  COL_TRI(384, 1074, 1073);
	  COL_TRI(388, 100, 103);
	  COL_TRI(383, 380, 1072);
	  COL_TRI(383, 1073, 380);
	  COL_TRI(385, 1074, 1071);
	  COL_TRI(386, 388, 1092);
	  COL_TRI(386, 1092, 390);
	  COL_TRI(387, 386, 390);
	  COL_TRI(357, 90, 352);
	  COL_TRI(388, 103, 1092);
	  COL_TRI(99, 100, 388);
	  COL_TRI(95, 1067, 94);
	  COL_TRI(90, 94, 1067);
	  COL_TRI(90, 1067, 352);
	  COL_TRI(389, 1092, 103);
	  COL_TRI(389, 103, 105);
	  COL_TRI(389, 93, 357);
	  COL_TRI(389, 105, 93);
	  COL_TRI(357, 93, 90);
	  COL_TRI(328, 327, 347);
	  COL_TRI(390, 1092, 389);
	  COL_TRI(390, 389, 392);
	  COL_TRI(387, 390, 391);
	  COL_TRI(391, 390, 392);
	  COL_TRI(392, 389, 1060);
	  COL_TRI(392, 1060, 1059);
	  COL_TRI(392, 1059, 1094);
	  COL_TRI(391, 392, 1094);
	  COL_TRI(389, 357, 1060);
	  COL_TRI(357, 347, 1060);
	  COL_TRI(393, 1095, 395);
	  COL_TRI(393, 395, 1039);
	  COL_TRI(393, 1039, 1038);
	  COL_TRI(393, 1038, 373);
	  COL_TRI(394, 373, 1096);
	  COL_TRI(394, 1086, 373);
	  COL_TRI(373, 358, 1076);
	  COL_TRI(395, 288, 1039);
	  COL_TRI(374, 394, 1096);
	  COL_TRI(374, 428, 394);
	  COL_TRI(396, 1097, 1085);
	  COL_TRI(375, 396, 1085);
	  COL_TRI(376, 1091, 375);
	  COL_TRI(396, 397, 1097);
	  COL_TRI(397, 376, 1097);
	  COL_TRI(397, 1091, 376);
	  COL_TRI(398, 1098, 399);
	  COL_TRI(398, 399, 289);
	  COL_TRI(399, 363, 289);
	  COL_TRI(363, 401, 289);
	  COL_TRI(400, 402, 1098);
	  COL_TRI(400, 1098, 1100);
	  COL_TRI(401, 402, 1084);
	  COL_TRI(402, 407, 408);
	  COL_TRI(402, 408, 1098);
	  COL_TRI(401, 1099, 402);
	  COL_TRI(403, 407, 402);
	  COL_TRI(403, 402, 1099);
	  COL_TRI(404, 1099, 401);
	  COL_TRI(363, 404, 401);
	  COL_TRI(397, 396, 406);
	  COL_TRI(397, 406, 1104);
	  COL_TRI(405, 397, 1104);
	  COL_TRI(405, 1091, 397);
	  COL_TRI(405, 1105, 375);
	  COL_TRI(405, 375, 1091);
	  COL_TRI(406, 396, 375);
	  COL_TRI(406, 375, 1105);
	  COL_TRI(404, 420, 1099);
	  COL_TRI(407, 1101, 408);
	  COL_TRI(408, 1101, 410);
	  COL_TRI(408, 410, 409);
	  COL_TRI(408, 409, 399);
	  COL_TRI(408, 399, 1098);
	  COL_TRI(399, 1079, 363);
	  COL_TRI(409, 1099, 399);
	  COL_TRI(409, 410, 1102);
	  COL_TRI(409, 1102, 403);
	  COL_TRI(409, 403, 1099);
	  COL_TRI(414, 412, 415);
	  COL_TRI(403, 1102, 1103);
	  COL_TRI(403, 1103, 407);
	  COL_TRI(407, 1103, 1101);
	  COL_TRI(410, 1101, 1103);
	  COL_TRI(410, 1103, 1102);
	  COL_TRI(411, 1095, 412);
	  COL_TRI(412, 1095, 1106);
	  COL_TRI(412, 1106, 415);
	  COL_TRI(413, 412, 414);
	  COL_TRI(413, 411, 412);
	  COL_TRI(415, 1106, 418);
	  COL_TRI(415, 418, 416);
	  COL_TRI(411, 395, 1095);
	  COL_TRI(416, 418, 395);
	  COL_TRI(416, 395, 411);
	  COL_TRI(417, 416, 411);
	  COL_TRI(417, 411, 413);
	  COL_TRI(395, 418, 288);
	  COL_TRI(421, 424, 426);
	  COL_TRI(418, 1075, 288);
	  COL_TRI(418, 1106, 1075);
	  COL_TRI(290, 424, 421);
	  COL_TRI(419, 290, 421);
	  COL_TRI(420, 359, 1079);
	  COL_TRI(360, 419, 421);
	  COL_TRI(422, 426, 650);
	  COL_TRI(421, 426, 422);
	  COL_TRI(422, 650, 427);
	  COL_TRI(423, 1080, 1081);
	  COL_TRI(423, 1081, 425);
	  COL_TRI(424, 423, 425);
	  COL_TRI(425, 1081, 1108);
	  COL_TRI(425, 1108, 1109);
	  COL_TRI(426, 425, 1109);
	  COL_TRI(424, 425, 426);
	  COL_TRI(420, 360, 359);
	  COL_TRI(427, 1081, 422);
	  COL_TRI(422, 1081, 1080);
	  COL_TRI(422, 1080, 421);
	  COL_TRI(360, 421, 1080);
	  COL_TRI(427, 1108, 1081);
	  COL_TRI(426, 1109, 650);
	  COL_TRI(97, 104, 102);
	  COL_TRI(371, 1086, 1087);
	  COL_TRI(371, 1087, 1110);
	  COL_TRI(371, 1110, 1088);
	  COL_TRI(371, 1088, 428);
	  COL_TRI(428, 1088, 1089);
	  COL_TRI(428, 1089, 394);
	  COL_TRI(394, 1089, 1087);
	  COL_TRI(394, 1087, 1086);
	  COL_TRI(430, 1112, 1113);
	  COL_TRI(97, 102, 101);
	  COL_TRI(97, 101, 98);
	  COL_TRI(97, 98, 96);
	  COL_TRI(97, 96, 92);
	  COL_TRI(97, 92, 91);
	  COL_TRI(429, 1093, 382);
	  COL_TRI(429, 382, 1090);
	  COL_TRI(430, 1111, 1112);
	  COL_TRI(431, 1114, 432);
	  COL_TRI(432, 1114, 1115);
	  COL_TRI(432, 1115, 434);
	  COL_TRI(433, 431, 432);
	  COL_TRI(433, 432, 434);
	  COL_TRI(434, 1115, 471);
	  COL_TRI(433, 434, 471);
	  COL_TRI(435, 444, 436);
	  COL_TRI(436, 438, 437);
	  COL_TRI(436, 437, 1116);
	  COL_TRI(436, 1116, 459);
	  COL_TRI(436, 444, 443);
	  COL_TRI(436, 443, 438);
	  COL_TRI(435, 436, 459);
	  COL_TRI(440, 1119, 1120);
	  COL_TRI(437, 438, 1118);
	  COL_TRI(438, 439, 1118);
	  COL_TRI(438, 443, 540);
	  COL_TRI(438, 540, 439);
	  COL_TRI(439, 435, 459);
	  COL_TRI(439, 459, 1118);
	  COL_TRI(439, 540, 539);
	  COL_TRI(439, 539, 435);
	  COL_TRI(435, 539, 444);
	  COL_TRI(440, 464, 1119);
	  COL_TRI(441, 1120, 1119);
	  COL_TRI(442, 464, 430);
	  COL_TRI(442, 441, 464);
	  COL_TRI(443, 1117, 531);
	  COL_TRI(443, 531, 540);
	  COL_TRI(444, 1117, 443);
	  COL_TRI(445, 441, 442);
	  COL_TRI(446, 1121, 441);
	  COL_TRI(441, 1121, 1120);
	  COL_TRI(445, 446, 441);
	  COL_TRI(451, 1125, 453);
	  COL_TRI(447, 440, 1121);
	  COL_TRI(447, 1121, 448);
	  COL_TRI(446, 1122, 1121);
	  COL_TRI(448, 1121, 1122);
	  COL_TRI(448, 1122, 451);
	  COL_TRI(449, 446, 445);
	  COL_TRI(450, 1122, 446);
	  COL_TRI(449, 1124, 446);
	  COL_TRI(450, 1125, 1122);
	  COL_TRI(451, 1122, 1125);
	  COL_TRI(457, 437, 455);
	  COL_TRI(452, 1124, 449);
	  COL_TRI(452, 450, 1124);
	  COL_TRI(450, 1126, 1125);
	  COL_TRI(453, 1125, 1126);
	  COL_TRI(453, 1126, 456);
	  COL_TRI(454, 450, 452);
	  COL_TRI(455, 1126, 450);
	  COL_TRI(455, 450, 457);
	  COL_TRI(454, 457, 450);
	  COL_TRI(456, 1126, 455);
	  COL_TRI(456, 455, 1112);
	  COL_TRI(457, 1116, 437);
	  COL_TRI(462, 461, 447);
	  COL_TRI(458, 454, 1112);
	  COL_TRI(458, 1112, 460);
	  COL_TRI(459, 457, 458);
	  COL_TRI(460, 437, 1118);
	  COL_TRI(460, 455, 437);
	  COL_TRI(459, 1116, 457);
	  COL_TRI(461, 440, 447);
	  COL_TRI(461, 463, 440);
	  COL_TRI(463, 469, 467);
	  COL_TRI(463, 467, 465);
	  COL_TRI(461, 469, 463);
	  COL_TRI(462, 447, 430);
	  COL_TRI(462, 466, 468);
	  COL_TRI(462, 468, 461);
	  COL_TRI(464, 462, 430);
	  COL_TRI(464, 465, 462);
	  COL_TRI(461, 468, 469);
	  COL_TRI(465, 466, 462);
	  COL_TRI(465, 467, 466);
	  COL_TRI(466, 753, 468);
	  COL_TRI(466, 754, 753);
	  COL_TRI(467, 754, 466);
	  COL_TRI(467, 1128, 754);
	  COL_TRI(468, 1127, 469);
	  COL_TRI(469, 1127, 1128);
	  COL_TRI(469, 1128, 467);
	  COL_TRI(468, 753, 1127);
	  COL_TRI(433, 1129, 470);
	  COL_TRI(470, 1130, 1131);
	  COL_TRI(470, 1131, 1132);
	  COL_TRI(433, 470, 1132);
	  COL_TRI(470, 1129, 1133);
	  COL_TRI(470, 1133, 1130);
	  COL_TRI(433, 1134, 1129);
	  COL_TRI(471, 472, 433);
	  COL_TRI(472, 1135, 1134);
	  COL_TRI(472, 1134, 433);
	  COL_TRI(433, 1132, 431);
	  COL_TRI(473, 1136, 1137);
	  COL_TRI(473, 1138, 1139);
	  COL_TRI(473, 1139, 1140);
	  COL_TRI(473, 1140, 1136);
	  COL_TRI(474, 473, 1137);
	  COL_TRI(473, 1142, 1143);
	  COL_TRI(475, 1137, 1136);
	  COL_TRI(475, 1136, 476);
	  COL_TRI(476, 1136, 1140);
	  COL_TRI(474, 1137, 475);
	  COL_TRI(476, 1140, 477);
	  COL_TRI(477, 1140, 1139);
	  COL_TRI(477, 1139, 1141);
	  COL_TRI(478, 1139, 1138);
	  COL_TRI(473, 474, 1142);
	  COL_TRI(479, 1143, 1142);
	  COL_TRI(479, 1142, 1144);
	  COL_TRI(480, 1145, 1143);
	  COL_TRI(480, 1143, 479);
	  COL_TRI(481, 480, 479);
	  COL_TRI(481, 479, 1144);
	  COL_TRI(482, 483, 1146);
	  COL_TRI(482, 1146, 491);
	  COL_TRI(483, 482, 1147);
	  COL_TRI(482, 484, 1147);
	  COL_TRI(484, 486, 1147);
	  COL_TRI(485, 483, 1147);
	  COL_TRI(485, 1147, 489);
	  COL_TRI(486, 489, 1147);
	  COL_TRI(485, 23, 483);
	  COL_TRI(483, 23, 21);
	  COL_TRI(483, 21, 1146);
	  COL_TRI(485, 489, 490);
	  COL_TRI(487, 488, 485);
	  COL_TRI(488, 19, 485);
	  COL_TRI(485, 19, 23);
	  COL_TRI(487, 485, 490);
	  COL_TRI(489, 486, 490);
	  COL_TRI(493, 494, 488);
	  COL_TRI(490, 516, 487);
	  COL_TRI(490, 1149, 516);
	  COL_TRI(491, 1146, 1148);
	  COL_TRI(492, 1148, 1146);
	  COL_TRI(492, 1146, 1150);
	  COL_TRI(491, 1148, 500);
	  COL_TRI(493, 488, 487);
	  COL_TRI(494, 20, 488);
	  COL_TRI(498, 499, 1153);
	  COL_TRI(488, 20, 19);
	  COL_TRI(495, 496, 497);
	  COL_TRI(496, 498, 497);
	  COL_TRI(497, 1151, 1152);
	  COL_TRI(497, 498, 1151);
	  COL_TRI(498, 1153, 1151);
	  COL_TRI(503, 1155, 502);
	  COL_TRI(499, 492, 1153);
	  COL_TRI(500, 1148, 499);
	  COL_TRI(500, 499, 1154);
	  COL_TRI(501, 499, 498);
	  COL_TRI(501, 1154, 499);
	  COL_TRI(499, 1148, 492);
	  COL_TRI(502, 1155, 1156);
	  COL_TRI(502, 1156, 505);
	  COL_TRI(502, 505, 504);
	  COL_TRI(502, 504, 503);
	  COL_TRI(507, 1160, 1159);
	  COL_TRI(504, 1157, 506);
	  COL_TRI(504, 506, 503);
	  COL_TRI(505, 1157, 504);
	  COL_TRI(503, 506, 1155);
	  COL_TRI(505, 1156, 1157);
	  COL_TRI(506, 1156, 1155);
	  COL_TRI(506, 1157, 1156);
	  COL_TRI(507, 510, 509);
	  COL_TRI(507, 509, 562);
	  COL_TRI(507, 1159, 510);
	  COL_TRI(508, 571, 509);
	  COL_TRI(509, 564, 562);
	  COL_TRI(509, 571, 564);
	  COL_TRI(510, 1161, 542);
	  COL_TRI(510, 1159, 1161);
	  COL_TRI(511, 512, 1162);
	  COL_TRI(512, 1107, 541);
	  COL_TRI(512, 541, 1162);
	  COL_TRI(513, 563, 541);
	  COL_TRI(513, 541, 1145);
	  COL_TRI(511, 1162, 563);
	  COL_TRI(473, 1107, 508);
	  COL_TRI(501, 495, 1158);
	  COL_TRI(496, 501, 498);
	  COL_TRI(501, 496, 495);
	  COL_TRI(501, 1158, 1154);
	  COL_TRI(26, 567, 566);
	  COL_TRI(514, 1166, 515);
	  COL_TRI(514, 515, 529);
	  COL_TRI(515, 538, 529);
	  COL_TRI(515, 1166, 538);
	  COL_TRI(514, 1167, 1166);
	  COL_TRI(516, 514, 526);
	  COL_TRI(516, 1167, 514);
	  COL_TRI(514, 529, 526);
	  COL_TRI(26, 1168, 31);
	  COL_TRI(26, 31, 567);
	  COL_TRI(545, 517, 546);
	  COL_TRI(517, 35, 546);
	  COL_TRI(517, 1169, 35);
	  COL_TRI(35, 1169, 518);
	  COL_TRI(35, 518, 36);
	  COL_TRI(518, 545, 36);
	  COL_TRI(519, 545, 518);
	  COL_TRI(519, 518, 520);
	  COL_TRI(520, 518, 1169);
	  COL_TRI(521, 36, 1170);
	  COL_TRI(521, 16, 36);
	  COL_TRI(520, 1169, 522);
	  COL_TRI(522, 1169, 517);
	  COL_TRI(523, 482, 524);
	  COL_TRI(482, 491, 524);
	  COL_TRI(524, 17, 16);
	  COL_TRI(524, 16, 521);
	  COL_TRI(525, 1171, 526);
	  COL_TRI(525, 526, 528);
	  COL_TRI(531, 516, 527);
	  COL_TRI(526, 1171, 1173);
	  COL_TRI(526, 1173, 516);
	  COL_TRI(527, 1173, 1174);
	  COL_TRI(527, 516, 1173);
	  COL_TRI(528, 526, 529);
	  COL_TRI(528, 529, 1175);
	  COL_TRI(529, 538, 1176);
	  COL_TRI(529, 1176, 1175);
	  COL_TRI(530, 531, 527);
	  COL_TRI(530, 527, 1176);
	  COL_TRI(532, 37, 25);
	  COL_TRI(532, 25, 1177);
	  COL_TRI(25, 32, 1177);
	  COL_TRI(32, 532, 1177);
	  COL_TRI(37, 532, 34);
	  COL_TRI(138, 1178, 137);
	  COL_TRI(137, 1178, 1179);
	  COL_TRI(137, 1179, 135);
	  COL_TRI(134, 1184, 136);
	  COL_TRI(135, 1179, 1180);
	  COL_TRI(135, 1180, 132);
	  COL_TRI(138, 1181, 1178);
	  COL_TRI(132, 1180, 1182);
	  COL_TRI(132, 1182, 133);
	  COL_TRI(133, 1182, 1183);
	  COL_TRI(133, 1183, 134);
	  COL_TRI(134, 1183, 1184);
	  COL_TRI(136, 1184, 1185);
	  COL_TRI(136, 1185, 139);
	  COL_TRI(139, 1185, 1181);
	  COL_TRI(139, 1181, 138);
	  COL_TRI(34, 532, 32);
	  COL_TRI(533, 1186, 1187);
	  COL_TRI(533, 1187, 536);
	  COL_TRI(534, 1186, 533);
	  COL_TRI(533, 536, 535);
	  COL_TRI(533, 535, 534);
	  COL_TRI(535, 537, 534);
	  COL_TRI(536, 1188, 535);
	  COL_TRI(535, 1188, 537);
	  COL_TRI(534, 537, 1186);
	  COL_TRI(536, 1187, 1188);
	  COL_TRI(537, 1187, 1186);
	  COL_TRI(537, 1188, 1187);
	  COL_TRI(538, 530, 1176);
	  COL_TRI(538, 1123, 530);
	  COL_TRI(539, 530, 1123);
	  COL_TRI(539, 1123, 444);
	  COL_TRI(444, 1123, 1117);
	  COL_TRI(526, 1172, 516);
	  COL_TRI(540, 530, 539);
	  COL_TRI(540, 531, 530);
	  COL_TRI(531, 1117, 516);
	  COL_TRI(417, 473, 1145);
	  COL_TRI(541, 417, 1145);
	  COL_TRI(413, 1107, 473);
	  COL_TRI(417, 413, 473);
	  COL_TRI(473, 508, 1138);
	  COL_TRI(508, 511, 1163);
	  COL_TRI(508, 1163, 568);
	  COL_TRI(508, 568, 571);
	  COL_TRI(542, 1161, 1164);
	  COL_TRI(542, 1164, 1189);
	  COL_TRI(543, 1189, 32);
	  COL_TRI(543, 32, 526);
	  COL_TRI(544, 34, 1164);
	  COL_TRI(544, 1164, 557);
	  COL_TRI(545, 546, 1170);
	  COL_TRI(546, 35, 1168);
	  COL_TRI(546, 1168, 547);
	  COL_TRI(547, 1168, 34);
	  COL_TRI(547, 34, 544);
	  COL_TRI(526, 32, 1172);
	  COL_TRI(545, 1170, 36);
	  COL_TRI(32, 1189, 1164);
	  COL_TRI(32, 1164, 34);
	  COL_TRI(548, 550, 519);
	  COL_TRI(549, 550, 548);
	  COL_TRI(549, 522, 550);
	  COL_TRI(522, 517, 550);
	  COL_TRI(550, 517, 545);
	  COL_TRI(550, 545, 519);
	  COL_TRI(548, 519, 551);
	  COL_TRI(551, 519, 520);
	  COL_TRI(552, 522, 549);
	  COL_TRI(552, 520, 522);
	  COL_TRI(551, 520, 552);
	  COL_TRI(490, 554, 553);
	  COL_TRI(490, 553, 1149);
	  COL_TRI(553, 523, 1149);
	  COL_TRI(554, 873, 553);
	  COL_TRI(553, 873, 874);
	  COL_TRI(557, 1159, 558);
	  COL_TRI(555, 482, 523);
	  COL_TRI(553, 555, 523);
	  COL_TRI(555, 556, 482);
	  COL_TRI(555, 882, 556);
	  COL_TRI(556, 882, 875);
	  COL_TRI(556, 875, 554);
	  COL_TRI(555, 874, 882);
	  COL_TRI(553, 874, 555);
	  COL_TRI(554, 875, 873);
	  COL_TRI(557, 1164, 1159);
	  COL_TRI(558, 1159, 1160);
	  COL_TRI(558, 1160, 559);
	  COL_TRI(559, 1160, 507);
	  COL_TRI(559, 507, 560);
	  COL_TRI(560, 507, 562);
	  COL_TRI(560, 562, 1191);
	  COL_TRI(561, 1192, 543);
	  COL_TRI(561, 543, 1138);
	  COL_TRI(562, 511, 1165);
	  COL_TRI(562, 1165, 1191);
	  COL_TRI(562, 564, 511);
	  COL_TRI(563, 1165, 511);
	  COL_TRI(563, 513, 1165);
	  COL_TRI(564, 1163, 511);
	  COL_TRI(541, 565, 417);
	  COL_TRI(565, 416, 417);
	  COL_TRI(414, 415, 565);
	  COL_TRI(565, 415, 416);
	  COL_TRI(413, 414, 1107);
	  COL_TRI(566, 27, 26);
	  COL_TRI(567, 29, 27);
	  COL_TRI(567, 27, 566);
	  COL_TRI(31, 29, 567);
	  COL_TRI(493, 33, 24);
	  COL_TRI(493, 24, 494);
	  COL_TRI(494, 24, 20);
	  COL_TRI(568, 1163, 1190);
	  COL_TRI(568, 1190, 1193);
	  COL_TRI(569, 570, 1193);
	  COL_TRI(569, 1193, 1190);
	  COL_TRI(570, 569, 564);
	  COL_TRI(570, 564, 571);
	  COL_TRI(571, 1194, 570);
	  COL_TRI(568, 1193, 1194);
	  COL_TRI(577, 576, 592);
	  COL_TRI(569, 572, 564);
	  COL_TRI(572, 1190, 1163);
	  COL_TRI(573, 1195, 575);
	  COL_TRI(573, 575, 574);
	  COL_TRI(574, 575, 582);
	  COL_TRI(575, 576, 582);
	  COL_TRI(575, 1195, 576);
	  COL_TRI(576, 590, 592);
	  COL_TRI(578, 1197, 582);
	  COL_TRI(574, 582, 581);
	  COL_TRI(573, 574, 1196);
	  COL_TRI(574, 581, 1196);
	  COL_TRI(579, 580, 581);
	  COL_TRI(580, 588, 581);
	  COL_TRI(581, 588, 1196);
	  COL_TRI(582, 579, 581);
	  COL_TRI(583, 1196, 586);
	  COL_TRI(583, 1198, 1196);
	  COL_TRI(578, 584, 1197);
	  COL_TRI(584, 1199, 1200);
	  COL_TRI(584, 1200, 586);
	  COL_TRI(577, 592, 583);
	  COL_TRI(577, 583, 586);
	  COL_TRI(585, 591, 583);
	  COL_TRI(585, 583, 592);
	  COL_TRI(586, 1197, 584);
	  COL_TRI(586, 1196, 1197);
	  COL_TRI(576, 577, 578);
	  COL_TRI(576, 578, 582);
	  COL_TRI(587, 588, 743);
	  COL_TRI(587, 743, 1201);
	  COL_TRI(587, 589, 579);
	  COL_TRI(588, 587, 1197);
	  COL_TRI(587, 579, 1197);
	  COL_TRI(587, 1201, 589);
	  COL_TRI(580, 743, 588);
	  COL_TRI(588, 1197, 1196);
	  COL_TRI(589, 679, 580);
	  COL_TRI(579, 589, 580);
	  COL_TRI(579, 582, 1197);
	  COL_TRI(589, 638, 679);
	  COL_TRI(590, 1198, 1202);
	  COL_TRI(590, 1202, 919);
	  COL_TRI(593, 594, 595);
	  COL_TRI(591, 1202, 1198);
	  COL_TRI(585, 919, 1203);
	  COL_TRI(591, 1198, 583);
	  COL_TRI(592, 590, 919);
	  COL_TRI(592, 919, 585);
	  COL_TRI(593, 595, 1204);
	  COL_TRI(594, 1205, 596);
	  COL_TRI(594, 596, 595);
	  COL_TRI(595, 596, 1204);
	  COL_TRI(596, 1206, 1204);
	  COL_TRI(596, 1207, 1206);
	  COL_TRI(596, 1205, 1207);
	  COL_TRI(597, 604, 1208);
	  COL_TRI(597, 1208, 1209);
	  COL_TRI(598, 599, 1210);
	  COL_TRI(598, 1210, 1211);
	  COL_TRI(603, 597, 1209);
	  COL_TRI(599, 1212, 1210);
	  COL_TRI(599, 1213, 1212);
	  COL_TRI(600, 1214, 601);
	  COL_TRI(600, 601, 1215);
	  COL_TRI(601, 1216, 1217);
	  COL_TRI(601, 1217, 1215);
	  COL_TRI(602, 1216, 1214);
	  COL_TRI(602, 1214, 1218);
	  COL_TRI(603, 1209, 1219);
	  COL_TRI(604, 593, 1204);
	  COL_TRI(604, 1204, 1208);
	  COL_TRI(605, 606, 1220);
	  COL_TRI(606, 1221, 1220);
	  COL_TRI(607, 1221, 1222);
	  COL_TRI(607, 1222, 1223);
	  COL_TRI(608, 605, 1220);
	  COL_TRI(608, 1220, 609);
	  COL_TRI(608, 609, 610);
	  COL_TRI(609, 1224, 610);
	  COL_TRI(610, 1224, 612);
	  COL_TRI(610, 612, 1200);
	  COL_TRI(611, 607, 612);
	  COL_TRI(612, 607, 1223);
	  COL_TRI(612, 1223, 1200);
	  COL_TRI(611, 745, 607);
	  COL_TRI(617, 618, 610);
	  COL_TRI(613, 1225, 614);
	  COL_TRI(613, 614, 1226);
	  COL_TRI(614, 1225, 1227);
	  COL_TRI(615, 636, 1228);
	  COL_TRI(615, 1229, 636);
	  COL_TRI(616, 618, 617);
	  COL_TRI(620, 621, 1223);
	  COL_TRI(618, 1207, 610);
	  COL_TRI(617, 610, 1200);
	  COL_TRI(618, 1230, 1207);
	  COL_TRI(616, 619, 618);
	  COL_TRI(619, 1230, 618);
	  COL_TRI(619, 1231, 1230);
	  COL_TRI(621, 620, 619);
	  COL_TRI(620, 1232, 619);
	  COL_TRI(621, 619, 616);
	  COL_TRI(620, 1233, 1232);
	  COL_TRI(622, 1234, 1235);
	  COL_TRI(622, 1235, 1236);
	  COL_TRI(623, 1237, 1238);
	  COL_TRI(623, 1238, 1239);
	  COL_TRI(624, 626, 625);
	  COL_TRI(624, 1240, 626);
	  COL_TRI(624, 629, 1240);
	  COL_TRI(625, 632, 624);
	  COL_TRI(624, 632, 629);
	  COL_TRI(626, 637, 638);
	  COL_TRI(626, 642, 637);
	  COL_TRI(627, 625, 626);
	  COL_TRI(625, 1241, 632);
	  COL_TRI(625, 627, 1241);
	  COL_TRI(631, 1213, 598);
	  COL_TRI(628, 1241, 631);
	  COL_TRI(628, 632, 1241);
	  COL_TRI(629, 632, 1212);
	  COL_TRI(629, 1212, 633);
	  COL_TRI(630, 1241, 627);
	  COL_TRI(631, 1241, 1213);
	  COL_TRI(632, 1211, 1212);
	  COL_TRI(632, 628, 1211);
	  COL_TRI(633, 1212, 1213);
	  COL_TRI(633, 1213, 630);
	  COL_TRI(630, 1213, 1241);
	  COL_TRI(634, 1242, 635);
	  COL_TRI(635, 630, 627);
	  COL_TRI(635, 1242, 630);
	  COL_TRI(640, 602, 1218);
	  COL_TRI(636, 1244, 685);
	  COL_TRI(636, 1229, 1244);
	  COL_TRI(637, 639, 638);
	  COL_TRI(638, 639, 678);
	  COL_TRI(639, 1245, 678);
	  COL_TRI(640, 1218, 651);
	  COL_TRI(645, 1248, 644);
	  COL_TRI(641, 1246, 643);
	  COL_TRI(641, 643, 645);
	  COL_TRI(642, 643, 637);
	  COL_TRI(643, 1246, 639);
	  COL_TRI(643, 639, 637);
	  COL_TRI(639, 1246, 1245);
	  COL_TRI(644, 1247, 646);
	  COL_TRI(644, 1248, 1247);
	  COL_TRI(649, 1248, 642);
	  COL_TRI(645, 643, 1248);
	  COL_TRI(646, 1246, 641);
	  COL_TRI(646, 1247, 1246);
	  COL_TRI(647, 1247, 648);
	  COL_TRI(648, 1247, 1248);
	  COL_TRI(648, 1248, 649);
	  COL_TRI(650, 602, 640);
	  COL_TRI(649, 642, 1249);
	  COL_TRI(647, 1245, 1247);
	  COL_TRI(645, 646, 641);
	  COL_TRI(645, 644, 646);
	  COL_TRI(650, 1216, 602);
	  COL_TRI(650, 1109, 1216);
	  COL_TRI(652, 1218, 1214);
	  COL_TRI(640, 1217, 1108);
	  COL_TRI(640, 427, 650);
	  COL_TRI(640, 1108, 427);
	  COL_TRI(651, 600, 1217);
	  COL_TRI(651, 1217, 640);
	  COL_TRI(652, 1214, 653);
	  COL_TRI(655, 670, 657);
	  COL_TRI(653, 1214, 600);
	  COL_TRI(653, 600, 654);
	  COL_TRI(654, 600, 651);
	  COL_TRI(654, 651, 1250);
	  COL_TRI(629, 654, 1250);
	  COL_TRI(629, 633, 654);
	  COL_TRI(655, 1251, 670);
	  COL_TRI(656, 1251, 655);
	  COL_TRI(657, 670, 1252);
	  COL_TRI(657, 1252, 671);
	  COL_TRI(656, 1253, 1251);
	  COL_TRI(658, 1253, 656);
	  COL_TRI(658, 1254, 1253);
	  COL_TRI(659, 1254, 658);
	  COL_TRI(653, 1255, 733);
	  COL_TRI(653, 733, 1256);
	  COL_TRI(668, 1261, 1263);
	  COL_TRI(660, 661, 1258);
	  COL_TRI(661, 1259, 1258);
	  COL_TRI(661, 1260, 1259);
	  COL_TRI(662, 1260, 661);
	  COL_TRI(662, 661, 660);
	  COL_TRI(663, 1258, 1259);
	  COL_TRI(663, 1259, 664);
	  COL_TRI(664, 1259, 1260);
	  COL_TRI(660, 1258, 663);
	  COL_TRI(664, 1260, 662);
	  COL_TRI(665, 1261, 668);
	  COL_TRI(666, 665, 668);
	  COL_TRI(665, 1262, 1263);
	  COL_TRI(665, 1263, 1261);
	  COL_TRI(667, 1262, 665);
	  COL_TRI(667, 665, 666);
	  COL_TRI(668, 1263, 669);
	  COL_TRI(669, 1262, 667);
	  COL_TRI(669, 1263, 1262);
	  COL_TRI(668, 1251, 666);
	  COL_TRI(664, 666, 1251);
	  COL_TRI(670, 668, 1264);
	  COL_TRI(668, 670, 1251);
	  COL_TRI(668, 669, 654);
	  COL_TRI(668, 654, 1264);
	  COL_TRI(669, 662, 654);
	  COL_TRI(669, 664, 662);
	  COL_TRI(669, 667, 664);
	  COL_TRI(664, 1251, 1255);
	  COL_TRI(664, 1255, 663);
	  COL_TRI(662, 653, 654);
	  COL_TRI(662, 660, 653);
	  COL_TRI(660, 663, 653);
	  COL_TRI(663, 1255, 653);
	  COL_TRI(671, 1252, 1257);
	  COL_TRI(671, 1257, 672);
	  COL_TRI(672, 1257, 1265);
	  COL_TRI(672, 1265, 673);
	  COL_TRI(673, 1266, 750);
	  COL_TRI(673, 1267, 1266);
	  COL_TRI(676, 1271, 677);
	  COL_TRI(674, 675, 1264);
	  COL_TRI(674, 1264, 633);
	  COL_TRI(675, 736, 1269);
	  COL_TRI(675, 1269, 1265);
	  COL_TRI(676, 1270, 1271);
	  COL_TRI(622, 1270, 676);
	  COL_TRI(679, 1273, 1222);
	  COL_TRI(677, 1271, 726);
	  COL_TRI(677, 726, 1249);
	  COL_TRI(622, 1236, 1270);
	  COL_TRI(678, 679, 638);
	  COL_TRI(636, 1272, 679);
	  COL_TRI(636, 679, 1222);
	  COL_TRI(681, 1275, 683);
	  COL_TRI(627, 626, 638);
	  COL_TRI(627, 638, 680);
	  COL_TRI(680, 1272, 636);
	  COL_TRI(627, 680, 636);
	  COL_TRI(620, 1223, 1222);
	  COL_TRI(681, 1274, 1275);
	  COL_TRI(686, 1280, 738);
	  COL_TRI(683, 1275, 1277);
	  COL_TRI(683, 1277, 684);
	  COL_TRI(684, 1277, 733);
	  COL_TRI(684, 733, 659);
	  COL_TRI(659, 733, 1254);
	  COL_TRI(685, 1279, 1280);
	  COL_TRI(685, 1280, 686);
	  COL_TRI(686, 738, 749);
	  COL_TRI(687, 1282, 689);
	  COL_TRI(687, 1283, 1282);
	  COL_TRI(688, 1283, 687);
	  COL_TRI(689, 1284, 1285);
	  COL_TRI(689, 1285, 694);
	  COL_TRI(690, 1286, 688);
	  COL_TRI(688, 740, 1283);
	  COL_TRI(691, 1287, 692);
	  COL_TRI(696, 1293, 1235);
	  COL_TRI(692, 1288, 1289);
	  COL_TRI(692, 1289, 693);
	  COL_TRI(693, 1289, 1292);
	  COL_TRI(693, 1292, 710);
	  COL_TRI(691, 1290, 1287);
	  COL_TRI(694, 1290, 691);
	  COL_TRI(694, 1285, 1290);
	  COL_TRI(695, 1293, 696);
	  COL_TRI(696, 1235, 1234);
	  COL_TRI(695, 1237, 1293);
	  COL_TRI(652, 1295, 695);
	  COL_TRI(697, 1296, 682);
	  COL_TRI(682, 1278, 1276);
	  COL_TRI(682, 1276, 681);
	  COL_TRI(700, 1305, 1302);
	  COL_TRI(698, 1299, 699);
	  COL_TRI(699, 1300, 1301);
	  COL_TRI(699, 1301, 690);
	  COL_TRI(690, 1291, 1286);
	  COL_TRI(698, 1302, 1299);
	  COL_TRI(700, 1302, 698);
	  COL_TRI(700, 1303, 1304);
	  COL_TRI(701, 1303, 700);
	  COL_TRI(706, 1309, 705);
	  COL_TRI(702, 1306, 703);
	  COL_TRI(703, 1306, 1307);
	  COL_TRI(703, 1307, 704);
	  COL_TRI(704, 1307, 730);
	  COL_TRI(704, 730, 708);
	  COL_TRI(705, 1308, 702);
	  COL_TRI(702, 1308, 1306);
	  COL_TRI(705, 1309, 1308);
	  COL_TRI(709, 1314, 620);
	  COL_TRI(706, 1310, 1309);
	  COL_TRI(707, 1310, 706);
	  COL_TRI(707, 1312, 1310);
	  COL_TRI(647, 1312, 707);
	  COL_TRI(647, 648, 1312);
	  COL_TRI(708, 1311, 709);
	  COL_TRI(708, 730, 1311);
	  COL_TRI(709, 1313, 1314);
	  COL_TRI(713, 1319, 1318);
	  COL_TRI(710, 1292, 1294);
	  COL_TRI(710, 1294, 711);
	  COL_TRI(711, 1294, 1315);
	  COL_TRI(711, 1315, 712);
	  COL_TRI(712, 1316, 1317);
	  COL_TRI(712, 1317, 746);
	  COL_TRI(614, 1227, 713);
	  COL_TRI(713, 1318, 714);
	  COL_TRI(714, 1320, 715);
	  COL_TRI(715, 1320, 1321);
	  COL_TRI(715, 1321, 716);
	  COL_TRI(716, 615, 1228);
	  COL_TRI(716, 1322, 615);
	  COL_TRI(714, 1318, 1320);
	  COL_TRI(717, 731, 1323);
	  COL_TRI(717, 1323, 1285);
	  COL_TRI(718, 1324, 719);
	  COL_TRI(719, 1324, 613);
	  COL_TRI(719, 613, 1226);
	  COL_TRI(718, 1325, 1324);
	  COL_TRI(606, 1325, 718);
	  COL_TRI(606, 605, 1325);
	  COL_TRI(720, 1311, 1326);
	  COL_TRI(720, 1326, 1327);
	  COL_TRI(721, 1233, 1327);
	  COL_TRI(721, 1327, 722);
	  COL_TRI(725, 1333, 1334);
	  COL_TRI(722, 603, 1219);
	  COL_TRI(722, 1219, 721);
	  COL_TRI(723, 1328, 1329);
	  COL_TRI(723, 1329, 1330);
	  COL_TRI(724, 726, 1331);
	  COL_TRI(724, 1331, 1332);
	  COL_TRI(728, 1302, 729);
	  COL_TRI(725, 1334, 1335);
	  COL_TRI(726, 1300, 1299);
	  COL_TRI(726, 1299, 649);
	  COL_TRI(727, 1336, 649);
	  COL_TRI(727, 649, 1299);
	  COL_TRI(728, 1308, 1302);
	  COL_TRI(729, 1337, 728);
	  COL_TRI(729, 1338, 1337);
	  COL_TRI(730, 1337, 1315);
	  COL_TRI(730, 1315, 1339);
	  COL_TRI(731, 1319, 732);
	  COL_TRI(731, 732, 1289);
	  COL_TRI(732, 1225, 1326);
	  COL_TRI(732, 1326, 1339);
	  COL_TRI(736, 1343, 1269);
	  COL_TRI(733, 1237, 1256);
	  COL_TRI(733, 1277, 1237);
	  COL_TRI(734, 1340, 1276);
	  COL_TRI(734, 1276, 1331);
	  COL_TRI(735, 1341, 1330);
	  COL_TRI(735, 1330, 1342);
	  COL_TRI(736, 737, 1343);
	  COL_TRI(737, 1328, 1343);
	  COL_TRI(737, 1243, 1328);
	  COL_TRI(738, 739, 740);
	  COL_TRI(738, 740, 1329);
	  COL_TRI(739, 1344, 740);
	  COL_TRI(741, 1229, 615);
	  COL_TRI(739, 1345, 1344);
	  COL_TRI(740, 1344, 1335);
	  COL_TRI(740, 1335, 1334);
	  COL_TRI(741, 742, 1229);
	  COL_TRI(742, 741, 1346);
	  COL_TRI(742, 1346, 725);
	  COL_TRI(612, 889, 611);
	  COL_TRI(743, 580, 679);
	  COL_TRI(743, 679, 1272);
	  COL_TRI(589, 680, 638);
	  COL_TRI(589, 1201, 680);
	  COL_TRI(680, 1201, 743);
	  COL_TRI(680, 743, 1272);
	  COL_TRI(652, 1297, 1295);
	  COL_TRI(612, 609, 889);
	  COL_TRI(744, 745, 611);
	  COL_TRI(745, 1347, 1220);
	  COL_TRI(745, 1220, 607);
	  COL_TRI(609, 1220, 1347);
	  COL_TRI(609, 1347, 889);
	  COL_TRI(749, 738, 1281);
	  COL_TRI(746, 1317, 1303);
	  COL_TRI(746, 1303, 701);
	  COL_TRI(634, 1243, 1242);
	  COL_TRI(747, 1243, 634);
	  COL_TRI(747, 1348, 1243);
	  COL_TRI(748, 1348, 747);
	  COL_TRI(748, 1281, 1348);
	  COL_TRI(749, 1281, 748);
	  COL_TRI(598, 1127, 753);
	  COL_TRI(750, 1266, 1268);
	  COL_TRI(750, 1268, 752);
	  COL_TRI(751, 1298, 697);
	  COL_TRI(697, 1298, 1296);
	  COL_TRI(751, 1349, 1298);
	  COL_TRI(752, 1349, 751);
	  COL_TRI(752, 1268, 1349);
	  COL_TRI(598, 753, 631);
	  COL_TRI(756, 1351, 1352);
	  COL_TRI(753, 754, 628);
	  COL_TRI(753, 628, 631);
	  COL_TRI(754, 1211, 628);
	  COL_TRI(754, 1128, 1211);
	  COL_TRI(755, 847, 842);
	  COL_TRI(755, 1350, 847);
	  COL_TRI(755, 835, 1350);
	  COL_TRI(756, 852, 1351);
	  COL_TRI(757, 116, 115);
	  COL_TRI(141, 140, 143);
	  COL_TRI(141, 143, 107);
	  COL_TRI(146, 145, 147);
	  COL_TRI(146, 147, 108);
	  COL_TRI(149, 148, 151);
	  COL_TRI(149, 151, 111);
	  COL_TRI(757, 115, 759);
	  COL_TRI(759, 115, 114);
	  COL_TRI(759, 114, 760);
	  COL_TRI(758, 155, 116);
	  COL_TRI(758, 116, 757);
	  COL_TRI(760, 114, 155);
	  COL_TRI(760, 155, 758);
	  COL_TRI(761, 112, 762);
	  COL_TRI(762, 112, 152);
	  COL_TRI(762, 152, 763);
	  COL_TRI(763, 152, 154);
	  COL_TRI(763, 154, 1353);
	  COL_TRI(761, 153, 112);
	  COL_TRI(761, 1353, 154);
	  COL_TRI(761, 154, 153);
	  COL_TRI(764, 120, 765);
	  COL_TRI(765, 118, 766);
	  COL_TRI(765, 120, 118);
	  COL_TRI(770, 123, 125);
	  COL_TRI(764, 121, 120);
	  COL_TRI(766, 118, 119);
	  COL_TRI(766, 119, 767);
	  COL_TRI(767, 121, 764);
	  COL_TRI(767, 119, 121);
	  COL_TRI(768, 122, 769);
	  COL_TRI(769, 122, 123);
	  COL_TRI(769, 123, 770);
	  COL_TRI(761, 1356, 1354);
	  COL_TRI(770, 125, 771);
	  COL_TRI(768, 157, 122);
	  COL_TRI(771, 157, 768);
	  COL_TRI(771, 125, 157);
	  COL_TRI(761, 1354, 772);
	  COL_TRI(772, 1354, 774);
	  COL_TRI(772, 774, 773);
	  COL_TRI(773, 774, 1355);
	  COL_TRI(774, 1354, 1356);
	  COL_TRI(774, 1356, 1355);
	  COL_TRI(778, 1361, 1360);
	  COL_TRI(773, 1355, 775);
	  COL_TRI(775, 1355, 1356);
	  COL_TRI(775, 1356, 761);
	  COL_TRI(776, 777, 1357);
	  COL_TRI(776, 1357, 1358);
	  COL_TRI(777, 854, 1357);
	  COL_TRI(777, 1359, 854);
	  COL_TRI(778, 1360, 779);
	  COL_TRI(776, 1358, 1365);
	  COL_TRI(779, 1360, 788);
	  COL_TRI(779, 788, 780);
	  COL_TRI(780, 788, 1362);
	  COL_TRI(780, 1362, 781);
	  COL_TRI(781, 1362, 789);
	  COL_TRI(781, 789, 782);
	  COL_TRI(782, 1363, 783);
	  COL_TRI(782, 789, 1363);
	  COL_TRI(783, 1363, 790);
	  COL_TRI(783, 790, 1364);
	  COL_TRI(787, 160, 126);
	  COL_TRI(784, 1366, 1365);
	  COL_TRI(776, 1365, 1366);
	  COL_TRI(784, 785, 1366);
	  COL_TRI(785, 784, 1367);
	  COL_TRI(785, 1367, 1368);
	  COL_TRI(786, 1368, 1367);
	  COL_TRI(786, 787, 1368);
	  COL_TRI(787, 786, 160);
	  COL_TRI(788, 1369, 790);
	  COL_TRI(788, 1361, 1369);
	  COL_TRI(788, 1360, 1361);
	  COL_TRI(789, 1362, 788);
	  COL_TRI(790, 1363, 789);
	  COL_TRI(791, 794, 795);
	  COL_TRI(791, 793, 794);
	  COL_TRI(791, 1370, 793);
	  COL_TRI(791, 1371, 1370);
	  COL_TRI(792, 1371, 791);
	  COL_TRI(796, 798, 1376);
	  COL_TRI(793, 811, 794);
	  COL_TRI(794, 811, 1372);
	  COL_TRI(794, 1372, 795);
	  COL_TRI(795, 1372, 1373);
	  COL_TRI(795, 1373, 796);
	  COL_TRI(793, 1370, 811);
	  COL_TRI(792, 1374, 1371);
	  COL_TRI(796, 1373, 1375);
	  COL_TRI(796, 1375, 797);
	  COL_TRI(796, 797, 798);
	  COL_TRI(797, 1375, 810);
	  COL_TRI(797, 810, 798);
	  COL_TRI(798, 810, 1377);
	  COL_TRI(798, 1377, 799);
	  COL_TRI(799, 1377, 1378);
	  COL_TRI(799, 1378, 800);
	  COL_TRI(800, 1378, 1374);
	  COL_TRI(801, 1374, 1378);
	  COL_TRI(801, 1378, 1377);
	  COL_TRI(800, 1374, 792);
	  COL_TRI(807, 1383, 806);
	  COL_TRI(802, 1379, 803);
	  COL_TRI(803, 1379, 1380);
	  COL_TRI(803, 1380, 804);
	  COL_TRI(804, 1380, 1381);
	  COL_TRI(804, 1381, 809);
	  COL_TRI(802, 813, 1379);
	  COL_TRI(805, 813, 802);
	  COL_TRI(805, 1382, 813);
	  COL_TRI(806, 1382, 805);
	  COL_TRI(806, 1383, 1382);
	  COL_TRI(807, 1384, 1383);
	  COL_TRI(808, 1384, 807);
	  COL_TRI(808, 814, 1384);
	  COL_TRI(809, 814, 808);
	  COL_TRI(809, 1381, 814);
	  COL_TRI(799, 800, 792);
	  COL_TRI(799, 792, 1376);
	  COL_TRI(810, 1373, 801);
	  COL_TRI(809, 803, 804);
	  COL_TRI(811, 1371, 1372);
	  COL_TRI(811, 1370, 1371);
	  COL_TRI(810, 1375, 1373);
	  COL_TRI(805, 802, 1385);
	  COL_TRI(805, 1385, 812);
	  COL_TRI(809, 1385, 803);
	  COL_TRI(815, 1381, 1380);
	  COL_TRI(812, 808, 807);
	  COL_TRI(812, 807, 806);
	  COL_TRI(813, 1382, 1386);
	  COL_TRI(813, 1386, 815);
	  COL_TRI(814, 1383, 1384);
	  COL_TRI(814, 1386, 1383);
	  COL_TRI(818, 1390, 816);
	  COL_TRI(815, 1380, 1379);
	  COL_TRI(816, 1387, 1388);
	  COL_TRI(816, 1389, 1387);
	  COL_TRI(817, 1390, 1391);
	  COL_TRI(817, 1391, 1392);
	  COL_TRI(818, 1393, 1390);
	  COL_TRI(822, 1387, 823);
	  COL_TRI(819, 824, 825);
	  COL_TRI(819, 825, 826);
	  COL_TRI(820, 1394, 822);
	  COL_TRI(820, 822, 823);
	  COL_TRI(821, 827, 1394);
	  COL_TRI(821, 1394, 819);
	  COL_TRI(823, 1387, 1389);
	  COL_TRI(823, 1389, 820);
	  COL_TRI(820, 1389, 817);
	  COL_TRI(820, 817, 824);
	  COL_TRI(822, 1388, 1387);
	  COL_TRI(824, 817, 1392);
	  COL_TRI(824, 1392, 825);
	  COL_TRI(825, 1392, 1391);
	  COL_TRI(825, 1391, 826);
	  COL_TRI(826, 1391, 1393);
	  COL_TRI(829, 862, 1395);
	  COL_TRI(826, 1393, 821);
	  COL_TRI(821, 1393, 818);
	  COL_TRI(821, 818, 827);
	  COL_TRI(827, 818, 1388);
	  COL_TRI(827, 1388, 822);
	  COL_TRI(828, 1395, 164);
	  COL_TRI(828, 164, 163);
	  COL_TRI(829, 1395, 828);
	  COL_TRI(830, 756, 1352);
	  COL_TRI(830, 1352, 863);
	  COL_TRI(831, 1396, 864);
	  COL_TRI(831, 864, 1397);
	  COL_TRI(832, 1398, 883);
	  COL_TRI(832, 883, 836);
	  COL_TRI(832, 755, 834);
	  COL_TRI(832, 835, 755);
	  COL_TRI(834, 837, 870);
	  COL_TRI(834, 840, 837);
	  COL_TRI(835, 836, 1400);
	  COL_TRI(835, 1400, 838);
	  COL_TRI(836, 840, 1400);
	  COL_TRI(836, 883, 872);
	  COL_TRI(837, 836, 872);
	  COL_TRI(837, 840, 836);
	  COL_TRI(838, 1400, 915);
	  COL_TRI(838, 915, 843);
	  COL_TRI(839, 840, 755);
	  COL_TRI(839, 1401, 840);
	  COL_TRI(840, 1401, 1400);
	  COL_TRI(841, 1401, 839);
	  COL_TRI(841, 914, 1401);
	  COL_TRI(842, 914, 841);
	  COL_TRI(842, 846, 914);
	  COL_TRI(843, 915, 848);
	  COL_TRI(843, 848, 847);
	  COL_TRI(74, 845, 842);
	  COL_TRI(844, 74, 842);
	  COL_TRI(844, 842, 847);
	  COL_TRI(845, 846, 842);
	  COL_TRI(846, 848, 914);
	  COL_TRI(847, 848, 855);
	  COL_TRI(848, 915, 914);
	  COL_TRI(849, 844, 847);
	  COL_TRI(850, 849, 847);
	  COL_TRI(850, 847, 855);
	  COL_TRI(851, 852, 1359);
	  COL_TRI(851, 1351, 852);
	  COL_TRI(852, 890, 744);
	  COL_TRI(852, 853, 890);
	  COL_TRI(852, 744, 1359);
	  COL_TRI(744, 1402, 1359);
	  COL_TRI(853, 854, 890);
	  COL_TRI(854, 1403, 890);
	  COL_TRI(850, 857, 849);
	  COL_TRI(855, 861, 850);
	  COL_TRI(855, 863, 861);
	  COL_TRI(856, 849, 1404);
	  COL_TRI(857, 1404, 849);
	  COL_TRI(858, 903, 845);
	  COL_TRI(859, 858, 845);
	  COL_TRI(854, 1405, 1406);
	  COL_TRI(854, 853, 1405);
	  COL_TRI(829, 1408, 887);
	  COL_TRI(860, 831, 127);
	  COL_TRI(860, 127, 862);
	  COL_TRI(861, 860, 850);
	  COL_TRI(860, 862, 850);
	  COL_TRI(829, 887, 862);
	  COL_TRI(862, 887, 850);
	  COL_TRI(863, 831, 869);
	  COL_TRI(829, 161, 1408);
	  COL_TRI(868, 866, 1413);
	  COL_TRI(864, 756, 918);
	  COL_TRI(864, 918, 865);
	  COL_TRI(864, 865, 1411);
	  COL_TRI(865, 1203, 1411);
	  COL_TRI(866, 1412, 918);
	  COL_TRI(756, 866, 918);
	  COL_TRI(867, 868, 1413);
	  COL_TRI(868, 1411, 866);
	  COL_TRI(867, 1413, 1409);
	  COL_TRI(869, 867, 1409);
	  COL_TRI(869, 1409, 1410);
	  COL_TRI(870, 872, 1399);
	  COL_TRI(870, 837, 872);
	  COL_TRI(871, 833, 1399);
	  COL_TRI(872, 871, 1399);
	  COL_TRI(833, 832, 1399);
	  COL_TRI(877, 1415, 1414);
	  COL_TRI(833, 1398, 832);
	  COL_TRI(873, 833, 874);
	  COL_TRI(873, 1398, 833);
	  COL_TRI(874, 833, 871);
	  COL_TRI(875, 883, 1398);
	  COL_TRI(875, 1398, 873);
	  COL_TRI(876, 877, 878);
	  COL_TRI(877, 1414, 878);
	  COL_TRI(880, 1418, 1419);
	  COL_TRI(878, 1414, 1416);
	  COL_TRI(879, 876, 878);
	  COL_TRI(878, 1417, 912);
	  COL_TRI(878, 880, 1417);
	  COL_TRI(878, 912, 879);
	  COL_TRI(878, 1416, 880);
	  COL_TRI(880, 1416, 1418);
	  COL_TRI(880, 1419, 1420);
	  COL_TRI(881, 880, 1420);
	  COL_TRI(880, 881, 1417);
	  COL_TRI(886, 904, 1407);
	  COL_TRI(874, 871, 882);
	  COL_TRI(882, 883, 875);
	  COL_TRI(882, 871, 883);
	  COL_TRI(883, 871, 872);
	  COL_TRI(884, 1422, 885);
	  COL_TRI(885, 1423, 886);
	  COL_TRI(885, 896, 1423);
	  COL_TRI(886, 1424, 904);
	  COL_TRI(887, 902, 888);
	  COL_TRI(888, 1426, 884);
	  COL_TRI(888, 900, 1426);
	  COL_TRI(884, 1425, 1422);
	  COL_TRI(889, 1347, 1403);
	  COL_TRI(889, 1403, 1402);
	  COL_TRI(890, 1347, 745);
	  COL_TRI(890, 1403, 1347);
	  COL_TRI(891, 1428, 893);
	  COL_TRI(744, 890, 745);
	  COL_TRI(611, 1402, 744);
	  COL_TRI(611, 889, 1402);
	  COL_TRI(891, 893, 892);
	  COL_TRI(892, 858, 894);
	  COL_TRI(892, 893, 858);
	  COL_TRI(893, 1404, 857);
	  COL_TRI(893, 1428, 1404);
	  COL_TRI(81, 856, 1428);
	  COL_TRI(858, 893, 1407);
	  COL_TRI(858, 1407, 903);
	  COL_TRI(894, 858, 859);
	  COL_TRI(894, 859, 895);
	  COL_TRI(895, 1428, 891);
	  COL_TRI(895, 859, 1428);
	  COL_TRI(856, 1404, 1428);
	  COL_TRI(81, 1428, 859);
	  COL_TRI(897, 898, 1425);
	  COL_TRI(893, 857, 1407);
	  COL_TRI(849, 81, 89);
	  COL_TRI(849, 856, 81);
	  COL_TRI(881, 913, 1417);
	  COL_TRI(896, 898, 897);
	  COL_TRI(897, 1425, 1426);
	  COL_TRI(896, 1422, 898);
	  COL_TRI(898, 1422, 1425);
	  COL_TRI(899, 1424, 1423);
	  COL_TRI(899, 1429, 1424);
	  COL_TRI(887, 1427, 902);
	  COL_TRI(900, 1430, 901);
	  COL_TRI(904, 1424, 1429);
	  COL_TRI(901, 1427, 1408);
	  COL_TRI(900, 902, 1430);
	  COL_TRI(901, 1430, 1427);
	  COL_TRI(902, 1427, 1430);
	  COL_TRI(903, 904, 1429);
	  COL_TRI(903, 1429, 899);
	  COL_TRI(905, 1431, 906);
	  COL_TRI(905, 1432, 1431);
	  COL_TRI(906, 1431, 907);
	  COL_TRI(907, 1431, 1432);
	  COL_TRI(906, 907, 1433);
	  COL_TRI(907, 1432, 908);
	  COL_TRI(908, 1434, 910);
	  COL_TRI(908, 910, 162);
	  COL_TRI(909, 162, 910);
	  COL_TRI(910, 162, 129);
	  COL_TRI(915, 1400, 1401);
	  COL_TRI(911, 1435, 1436);
	  COL_TRI(911, 1437, 1435);
	  COL_TRI(912, 1421, 879);
	  COL_TRI(913, 1421, 912);
	  COL_TRI(913, 912, 1417);
	  COL_TRI(914, 915, 1401);
	  COL_TRI(918, 1412, 1202);
	  COL_TRI(910, 129, 916);
	  COL_TRI(916, 129, 128);
	  COL_TRI(916, 128, 917);
	  COL_TRI(909, 130, 162);
	  COL_TRI(917, 130, 909);
	  COL_TRI(917, 128, 130);
	  COL_TRI(863, 869, 1410);
	  COL_TRI(918, 1202, 591);
	  COL_TRI(84, 1439, 1438);
	  COL_TRI(919, 1202, 1412);
	  COL_TRI(919, 1412, 1203);
	  COL_TRI(865, 918, 591);
	  COL_TRI(865, 591, 585);
	  COL_TRI(585, 1203, 865);
	  COL_TRI(84, 1438, 85);
	  COL_TRI(921, 1443, 12);
	  COL_TRI(83, 71, 1439);
	  COL_TRI(83, 1439, 64);
	  COL_TRI(72, 844, 89);
	  COL_TRI(72, 89, 80);
	  COL_TRI(920, 1440, 1441);
	  COL_TRI(920, 1441, 1442);
	  COL_TRI(923, 972, 1448);
	  COL_TRI(921, 12, 924);
	  COL_TRI(12, 1444, 1446);
	  COL_TRI(12, 1445, 1444);
	  COL_TRI(922, 1447, 925);
	  COL_TRI(922, 1445, 1447);
	  COL_TRI(923, 1448, 1449);
	  COL_TRI(923, 1449, 921);
	  COL_TRI(923, 1450, 972);
	  COL_TRI(924, 1446, 930);
	  COL_TRI(924, 930, 1451);
	  COL_TRI(925, 984, 926);
	  COL_TRI(925, 926, 1452);
	  COL_TRI(926, 1453, 1454);
	  COL_TRI(926, 1454, 1452);
	  COL_TRI(927, 1453, 1455);
	  COL_TRI(927, 972, 1453);
	  COL_TRI(928, 1444, 922);
	  COL_TRI(928, 929, 1444);
	  COL_TRI(929, 991, 1456);
	  COL_TRI(929, 930, 991);
	  COL_TRI(930, 549, 548);
	  COL_TRI(930, 548, 1451);
	  COL_TRI(548, 551, 928);
	  COL_TRI(548, 928, 1451);
	  COL_TRI(551, 929, 928);
	  COL_TRI(551, 552, 929);
	  COL_TRI(931, 932, 989);
	  COL_TRI(931, 894, 932);
	  COL_TRI(932, 895, 933);
	  COL_TRI(932, 894, 895);
	  COL_TRI(931, 892, 894);
	  COL_TRI(933, 895, 891);
	  COL_TRI(934, 933, 935);
	  COL_TRI(933, 891, 935);
	  COL_TRI(935, 891, 892);
	  COL_TRI(935, 892, 931);
	  COL_TRI(934, 935, 1457);
	  COL_TRI(935, 936, 1457);
	  COL_TRI(935, 931, 936);
	  COL_TRI(931, 989, 936);
	  COL_TRI(936, 945, 964);
	  COL_TRI(936, 989, 945);
	  COL_TRI(937, 1458, 1459);
	  COL_TRI(937, 1459, 939);
	  COL_TRI(938, 1458, 937);
	  COL_TRI(937, 939, 945);
	  COL_TRI(943, 945, 1462);
	  COL_TRI(938, 1460, 1458);
	  COL_TRI(939, 1459, 1461);
	  COL_TRI(939, 1461, 940);
	  COL_TRI(939, 1462, 945);
	  COL_TRI(940, 1461, 1460);
	  COL_TRI(940, 1460, 938);
	  COL_TRI(941, 1464, 1465);
	  COL_TRI(941, 1465, 943);
	  COL_TRI(942, 1464, 941);
	  COL_TRI(941, 1462, 1466);
	  COL_TRI(941, 943, 1462);
	  COL_TRI(942, 941, 1466);
	  COL_TRI(942, 1467, 1464);
	  COL_TRI(943, 1465, 1468);
	  COL_TRI(943, 1468, 944);
	  COL_TRI(944, 1468, 1469);
	  COL_TRI(944, 1469, 946);
	  COL_TRI(943, 944, 945);
	  COL_TRI(945, 944, 946);
	  COL_TRI(946, 1469, 1470);
	  COL_TRI(946, 1470, 947);
	  COL_TRI(946, 947, 1471);
	  COL_TRI(945, 946, 1463);
	  COL_TRI(946, 1471, 1463);
	  COL_TRI(947, 1470, 1472);
	  COL_TRI(947, 1472, 948);
	  COL_TRI(947, 952, 1471);
	  COL_TRI(947, 948, 952);
	  COL_TRI(948, 1472, 1467);
	  COL_TRI(948, 1467, 942);
	  COL_TRI(948, 942, 952);
	  COL_TRI(942, 1466, 952);
	  COL_TRI(949, 1473, 953);
	  COL_TRI(949, 1474, 1473);
	  COL_TRI(950, 1475, 949);
	  COL_TRI(953, 952, 1466);
	  COL_TRI(951, 1474, 1475);
	  COL_TRI(951, 1478, 1474);
	  COL_TRI(952, 1473, 1476);
	  COL_TRI(952, 1476, 954);
	  COL_TRI(952, 954, 1471);
	  COL_TRI(954, 1476, 1478);
	  COL_TRI(954, 1478, 951);
	  COL_TRI(954, 957, 1471);
	  COL_TRI(954, 951, 957);
	  COL_TRI(951, 1475, 957);
	  COL_TRI(955, 1475, 1477);
	  COL_TRI(955, 956, 1475);
	  COL_TRI(956, 957, 1475);
	  COL_TRI(950, 1477, 1475);
	  COL_TRI(957, 1479, 958);
	  COL_TRI(957, 1480, 1479);
	  COL_TRI(956, 1480, 957);
	  COL_TRI(956, 1481, 1480);
	  COL_TRI(958, 1479, 1482);
	  COL_TRI(958, 1482, 955);
	  COL_TRI(958, 1483, 967);
	  COL_TRI(958, 1477, 1483);
	  COL_TRI(958, 955, 1477);
	  COL_TRI(959, 958, 960);
	  COL_TRI(959, 957, 958);
	  COL_TRI(960, 958, 967);
	  COL_TRI(955, 1482, 1481);
	  COL_TRI(955, 1481, 956);
	  COL_TRI(964, 945, 1463);
	  COL_TRI(961, 1462, 934);
	  COL_TRI(962, 1462, 961);
	  COL_TRI(962, 1466, 1462);
	  COL_TRI(953, 1466, 962);
	  COL_TRI(963, 1477, 950);
	  COL_TRI(963, 1483, 1477);
	  COL_TRI(960, 967, 968);
	  COL_TRI(964, 1463, 965);
	  COL_TRI(961, 934, 1457);
	  COL_TRI(965, 1463, 1471);
	  COL_TRI(965, 1471, 966);
	  COL_TRI(966, 1471, 957);
	  COL_TRI(966, 957, 959);
	  COL_TRI(967, 974, 1484);
	  COL_TRI(967, 1483, 974);
	  COL_TRI(968, 967, 1484);
	  COL_TRI(968, 1484, 1485);
	  COL_TRI(969, 1483, 963);
	  COL_TRI(969, 974, 1483);
	  COL_TRI(970, 977, 971);
	  COL_TRI(970, 987, 977);
	  COL_TRI(970, 986, 987);
	  COL_TRI(970, 985, 986);
	  COL_TRI(970, 971, 1486);
	  COL_TRI(971, 975, 1486);
	  COL_TRI(972, 973, 1486);
	  COL_TRI(973, 1487, 1488);
	  COL_TRI(973, 1488, 1486);
	  COL_TRI(972, 1487, 973);
	  COL_TRI(972, 1450, 1487);
	  COL_TRI(970, 1488, 1489);
	  COL_TRI(972, 1486, 975);
	  COL_TRI(972, 976, 1484);
	  COL_TRI(972, 975, 976);
	  COL_TRI(972, 1484, 974);
	  COL_TRI(977, 1492, 1491);
	  COL_TRI(972, 974, 1453);
	  COL_TRI(974, 1454, 1453);
	  COL_TRI(974, 969, 1454);
	  COL_TRI(975, 1490, 976);
	  COL_TRI(976, 1485, 1484);
	  COL_TRI(976, 1490, 1485);
	  COL_TRI(975, 1491, 1490);
	  COL_TRI(977, 1491, 971);
	  COL_TRI(978, 1455, 1493);
	  COL_TRI(978, 927, 1455);
	  COL_TRI(979, 1493, 1494);
	  COL_TRI(979, 978, 1493);
	  COL_TRI(980, 1449, 979);
	  COL_TRI(980, 979, 983);
	  COL_TRI(980, 1495, 1496);
	  COL_TRI(980, 1496, 981);
	  COL_TRI(981, 1496, 1497);
	  COL_TRI(981, 1497, 982);
	  COL_TRI(982, 1498, 1499);
	  COL_TRI(982, 1497, 1498);
	  COL_TRI(983, 1500, 1495);
	  COL_TRI(983, 1495, 980);
	  COL_TRI(983, 1494, 1500);
	  COL_TRI(983, 979, 1494);
	  COL_TRI(987, 1492, 977);
	  COL_TRI(984, 1500, 1494);
	  COL_TRI(984, 1495, 1500);
	  COL_TRI(970, 1489, 985);
	  COL_TRI(985, 1489, 1501);
	  COL_TRI(985, 1501, 986);
	  COL_TRI(986, 1501, 1502);
	  COL_TRI(986, 1502, 987);
	  COL_TRI(987, 1502, 1492);
	  COL_TRI(270, 1016, 1003);
	  COL_TRI(938, 1503, 990);
	  COL_TRI(938, 990, 940);
	  COL_TRI(938, 989, 1503);
	  COL_TRI(988, 990, 1503);
	  COL_TRI(989, 988, 1503);
	  COL_TRI(988, 1504, 990);
	  COL_TRI(990, 1504, 934);
	  COL_TRI(990, 934, 940);
	  COL_TRI(991, 1444, 1456);
	  COL_TRI(991, 1446, 1444);
	  COL_TRI_INIT(SURFACE_HANGABLE, 16);
	  COL_TRI(176, 179, 177);
	  COL_TRI(167, 168, 169);
	  COL_TRI(167, 170, 168);
	  COL_TRI(171, 167, 172);
	  COL_TRI(173, 174, 168);
	  COL_TRI(173, 168, 175);
	  COL_TRI(176, 177, 178);
	  COL_TRI(183, 177, 190);
	  COL_TRI(175, 180, 173);
	  COL_TRI(175, 181, 180);
	  COL_TRI(170, 185, 186);
	  COL_TRI(170, 186, 187);
	  COL_TRI(182, 187, 188);
	  COL_TRI(182, 189, 187);
	  COL_TRI(183, 190, 191);
	  COL_TRI(171, 172, 184);
	  COL_TRI_INIT(SURFACE_DEATH_PLANE, 6);
	  COL_TRI(4, 5, 6);
	  COL_TRI(4, 7, 5);
	  COL_TRI(8, 9, 10);
	  COL_TRI(8, 11, 9);
	  COL_TRI(12, 13, 14);
	  COL_TRI(12, 15, 13);
	  COL_TRI_INIT(SURFACE_VERY_SLIPPERY, 68);
	  COL_TRI(103, 100, 101);
	  COL_TRI(90, 91, 92);
	  COL_TRI(93, 91, 90);
	  COL_TRI(90, 92, 94);
	  COL_TRI(92, 95, 94);
	  COL_TRI(92, 96, 95);
	  COL_TRI(93, 97, 91);
	  COL_TRI(98, 99, 95);
	  COL_TRI(98, 95, 96);
	  COL_TRI(100, 99, 98);
	  COL_TRI(100, 98, 101);
	  COL_TRI(102, 103, 101);
	  COL_TRI(103, 102, 104);
	  COL_TRI(37, 135, 132);
	  COL_TRI(105, 97, 93);
	  COL_TRI(105, 104, 97);
	  COL_TRI(103, 104, 105);
	  COL_TRI(37, 132, 25);
	  COL_TRI(25, 132, 133);
	  COL_TRI(25, 133, 22);
	  COL_TRI(22, 133, 134);
	  COL_TRI(22, 134, 18);
	  COL_TRI(106, 140, 141);
	  COL_TRI(28, 135, 37);
	  COL_TRI(28, 137, 135);
	  COL_TRI(30, 137, 28);
	  COL_TRI(30, 138, 137);
	  COL_TRI(38, 138, 30);
	  COL_TRI(38, 139, 138);
	  COL_TRI(16, 139, 38);
	  COL_TRI(16, 136, 139);
	  COL_TRI(18, 136, 16);
	  COL_TRI(18, 134, 136);
	  COL_TRI(110, 150, 148);
	  COL_TRI(106, 142, 140);
	  COL_TRI(107, 142, 106);
	  COL_TRI(107, 143, 142);
	  COL_TRI(108, 144, 109);
	  COL_TRI(109, 144, 145);
	  COL_TRI(109, 145, 146);
	  COL_TRI(108, 147, 144);
	  COL_TRI(110, 148, 149);
	  COL_TRI(111, 150, 110);
	  COL_TRI(111, 151, 150);
	  COL_TRI(112, 113, 152);
	  COL_TRI(112, 153, 113);
	  COL_TRI(113, 153, 154);
	  COL_TRI(113, 154, 152);
	  COL_TRI(114, 117, 155);
	  COL_TRI(115, 117, 114);
	  COL_TRI(116, 117, 115);
	  COL_TRI(117, 116, 155);
	  COL_TRI(118, 120, 156);
	  COL_TRI(119, 118, 156);
	  COL_TRI(120, 121, 156);
	  COL_TRI(121, 119, 156);
	  COL_TRI(122, 124, 123);
	  COL_TRI(123, 124, 125);
	  COL_TRI(128, 131, 130);
	  COL_TRI(124, 122, 157);
	  COL_TRI(125, 124, 157);
	  COL_TRI(126, 158, 159);
	  COL_TRI(126, 160, 158);
	  COL_TRI(127, 159, 158);
	  COL_TRI(127, 161, 159);
	  COL_TRI(129, 131, 128);
	  COL_TRI(130, 131, 162);
	  COL_TRI(131, 129, 162);
	  COL_TRI_INIT(SURFACE_SLIPPERY, 20);
	  COL_TRI(16, 17, 18);
	  COL_TRI(18, 19, 20);
	  COL_TRI(17, 21, 18);
	  COL_TRI(22, 18, 20);
	  COL_TRI(18, 21, 23);
	  COL_TRI(22, 20, 24);
	  COL_TRI(22, 24, 25);
	  COL_TRI(26, 27, 28);
	  COL_TRI(28, 29, 30);
	  COL_TRI(28, 27, 29);
	  COL_TRI(30, 29, 31);
	  COL_TRI(32, 25, 33);
	  COL_TRI(25, 24, 33);
	  COL_TRI(26, 28, 34);
	  COL_TRI(34, 28, 37);
	  COL_TRI(35, 30, 31);
	  COL_TRI(35, 38, 30);
	  COL_TRI(36, 38, 35);
	  COL_TRI(36, 16, 38);
	  COL_TRI(18, 23, 19);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 52);
	  COL_TRI(202, 201, 204);
	  COL_TRI(192, 193, 194);
	  COL_TRI(195, 196, 193);
	  COL_TRI(193, 197, 194);
	  COL_TRI(193, 196, 197);
	  COL_TRI(198, 195, 193);
	  COL_TRI(198, 193, 192);
	  COL_TRI(194, 197, 199);
	  COL_TRI(194, 199, 200);
	  COL_TRI(194, 200, 201);
	  COL_TRI(192, 194, 202);
	  COL_TRI(202, 194, 201);
	  COL_TRI(203, 202, 204);
	  COL_TRI(205, 202, 203);
	  COL_TRI(205, 192, 202);
	  COL_TRI(203, 204, 206);
	  COL_TRI(207, 192, 205);
	  COL_TRI(207, 198, 192);
	  COL_TRI(208, 203, 206);
	  COL_TRI(209, 203, 208);
	  COL_TRI(209, 205, 203);
	  COL_TRI(208, 206, 224);
	  COL_TRI(210, 207, 205);
	  COL_TRI(210, 205, 209);
	  COL_TRI(211, 208, 212);
	  COL_TRI(211, 209, 208);
	  COL_TRI(212, 208, 224);
	  COL_TRI(216, 211, 215);
	  COL_TRI(212, 224, 225);
	  COL_TRI(213, 209, 211);
	  COL_TRI(213, 210, 209);
	  COL_TRI(214, 212, 225);
	  COL_TRI(215, 211, 212);
	  COL_TRI(215, 212, 214);
	  COL_TRI(214, 225, 226);
	  COL_TRI(216, 213, 211);
	  COL_TRI(220, 227, 219);
	  COL_TRI(217, 216, 218);
	  COL_TRI(216, 215, 218);
	  COL_TRI(218, 215, 219);
	  COL_TRI(215, 214, 219);
	  COL_TRI(219, 214, 220);
	  COL_TRI(214, 226, 220);
	  COL_TRI(221, 219, 227);
	  COL_TRI(218, 228, 217);
	  COL_TRI(218, 229, 228);
	  COL_TRI(219, 229, 218);
	  COL_TRI(219, 221, 229);
	  COL_TRI(222, 230, 231);
	  COL_TRI(223, 233, 230);
	  COL_TRI(222, 232, 230);
	  COL_TRI(223, 230, 232);
	  COL_TRI_INIT(SURFACE_WALL_MISC, 18);
	  COL_TRI(51, 50, 49);
	  COL_TRI(39, 40, 41);
	  COL_TRI(41, 40, 42);
	  COL_TRI(41, 42, 43);
	  COL_TRI(43, 42, 44);
	  COL_TRI(43, 44, 45);
	  COL_TRI(39, 46, 40);
	  COL_TRI(47, 46, 39);
	  COL_TRI(47, 48, 46);
	  COL_TRI(49, 48, 47);
	  COL_TRI(49, 50, 48);
	  COL_TRI(45, 44, 54);
	  COL_TRI(51, 52, 50);
	  COL_TRI(53, 52, 51);
	  COL_TRI(53, 54, 52);
	  COL_TRI(45, 54, 53);
	  COL_TRI(163, 164, 165);
	  COL_TRI(163, 165, 166);
	  COL_TRI_INIT(SURFACE_NO_CAM_COLLISION, 35);
	  COL_TRI(66, 69, 70);
	  COL_TRI(59, 60, 61);
	  COL_TRI(59, 61, 62);
	  COL_TRI(62, 61, 63);
	  COL_TRI(64, 59, 62);
	  COL_TRI(64, 62, 63);
	  COL_TRI(65, 66, 67);
	  COL_TRI(65, 68, 66);
	  COL_TRI(66, 68, 69);
	  COL_TRI(74, 73, 84);
	  COL_TRI(70, 69, 71);
	  COL_TRI(70, 71, 83);
	  COL_TRI(72, 82, 73);
	  COL_TRI(73, 82, 64);
	  COL_TRI(73, 64, 84);
	  COL_TRI(72, 80, 82);
	  COL_TRI(74, 72, 73);
	  COL_TRI(74, 84, 85);
	  COL_TRI(81, 60, 59);
	  COL_TRI(75, 77, 76);
	  COL_TRI(75, 78, 77);
	  COL_TRI(76, 86, 75);
	  COL_TRI(75, 87, 78);
	  COL_TRI(75, 86, 87);
	  COL_TRI(77, 88, 79);
	  COL_TRI(78, 88, 77);
	  COL_TRI(77, 79, 76);
	  COL_TRI(76, 79, 86);
	  COL_TRI(78, 87, 88);
	  COL_TRI(79, 87, 86);
	  COL_TRI(79, 88, 87);
	  COL_TRI(80, 89, 81);
	  COL_TRI(80, 81, 59);
	  COL_TRI(82, 80, 59);
	  COL_TRI(64, 82, 59);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_D0, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI_INIT(SURFACE_WOBBLING_WARP, 2);
	  COL_TRI(55, 56, 57);
	  COL_TRI(55, 58, 56);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(13);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start,  /*pos*/ -7601,  2253,  7630, /*yaw*/  96); // unused, probably an early way to set initial position
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_wooden_door, /*pos*/   922, -4689,  2330, /*yaw*/ 192);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_wooden_door, /*pos*/ -3586,  1536,   647, /*yaw*/  19);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_wooden_door, /*pos*/  5911,  -204,   870, /*yaw*/   0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_wooden_door, /*pos*/  3817,   205,   870, /*yaw*/   0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_metal_door,  /*pos*/  1127,  -409, -4709, /*yaw*/  64);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_metal_door,  /*pos*/  -468, -4279,  6711, /*yaw*/  32);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_metal_door,  /*pos*/  -359, -4279,  6602, /*yaw*/ 160);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_metal_door,  /*pos*/ -3634,  2355, -2764, /*yaw*/  64);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_metal_door,  /*pos*/ -4863,  1843, -7551, /*yaw*/ 192);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_metal_door,  /*pos*/  3328,  -409, -6911, /*yaw*/   0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_hmc_door,    /*pos*/   358,  2048,  3661, /*yaw*/ 192);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_hmc_door,    /*pos*/ -6553,  1536,  1459, /*yaw*/   0);
	  COL_WATER_BOX_INIT(3);
	  COL_WATER_BOX(0, -7628, -2559, 563, 7654, -4791);
	  COL_WATER_BOX(50, 1690, -6348, 6298, 819, -818);
	  COL_WATER_BOX(51, 1690, -6348, 6298, 819, -821);
	  COL_END();
	}

	function hmc_seg7_collision_0702B65C() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(410, 0, 51);
	  COL_VERTEX(410, 719, -50); // 819 changed to 719 in non-JP builds
	  COL_VERTEX(410, 719, 51);
	  COL_VERTEX(0, 719, 51);
	  COL_VERTEX(0, 0, 51);
	  COL_VERTEX(0, 719, -50);
	  COL_VERTEX(410, 0, -50);
	  COL_VERTEX(0, 0, -50);
	  COL_TRI_INIT(SURFACE_DEFAULT, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(2, 3, 4);
	  COL_TRI(2, 4, 0);
	  COL_TRI(2, 1, 5);
	  COL_TRI(2, 5, 3);
	  COL_TRI(6, 5, 1);
	  COL_TRI(0, 6, 1);
	  COL_TRI(6, 7, 5);
	  COL_TRI(3, 5, 7);
	  COL_TRI(3, 7, 4);
	  COL_TRI(4, 7, 6);
	  COL_TRI(4, 6, 0);
	  COL_TRI_STOP();
	  COL_END();
	}

	function hmc_seg7_collision_0702B65C_VERSION_JP() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(410, 0, 51);
	  COL_VERTEX(410, 819, -50);
	  COL_VERTEX(410, 819, 51);
	  COL_VERTEX(0, 819, 51);
	  COL_VERTEX(0, 0, 51);
	  COL_VERTEX(0, 819, -50);
	  COL_VERTEX(410, 0, -50);
	  COL_VERTEX(0, 0, -50);
	  COL_TRI_INIT(SURFACE_DEFAULT, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(2, 3, 4);
	  COL_TRI(2, 4, 0);
	  COL_TRI(2, 1, 5);
	  COL_TRI(2, 5, 3);
	  COL_TRI(6, 5, 1);
	  COL_TRI(0, 6, 1);
	  COL_TRI(6, 7, 5);
	  COL_TRI(3, 5, 7);
	  COL_TRI(3, 7, 4);
	  COL_TRI(4, 7, 6);
	  COL_TRI(4, 6, 0);
	  COL_TRI_STOP();
	  COL_END();
	}

	function hmc_seg7_collision_controllable_platform() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x10);
	  COL_VERTEX(307, 51, 307);
	  COL_VERTEX(-306, 0, 307);
	  COL_VERTEX(307, 0, 307);
	  COL_VERTEX(-306, 51, 307);
	  COL_VERTEX(307, 0, -306);
	  COL_VERTEX(64, 0, 64);
	  COL_VERTEX(64, 0, -63);
	  COL_VERTEX(307, 51, -306);
	  COL_VERTEX(-306, 0, -306);
	  COL_VERTEX(-63, 0, 64);
	  COL_VERTEX(-306, 51, -306);
	  COL_VERTEX(-63, 0, -63);
	  COL_VERTEX(102, 51, 102);
	  COL_VERTEX(102, 51, -101);
	  COL_VERTEX(-101, 51, -101);
	  COL_VERTEX(-101, 51, 102);
	  COL_TRI_INIT(SURFACE_DEFAULT, 28);
	  COL_TRI(6, 8, 4);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(4, 0, 2);
	  COL_TRI(5, 2, 1);
	  COL_TRI(2, 5, 6);
	  COL_TRI(2, 6, 4);
	  COL_TRI(4, 7, 0);
	  COL_TRI(8, 7, 4);
	  COL_TRI(5, 1, 9);
	  COL_TRI(1, 10, 8);
	  COL_TRI(1, 3, 10);
	  COL_TRI(11, 1, 8);
	  COL_TRI(11, 9, 1);
	  COL_TRI(6, 11, 8);
	  COL_TRI(8, 10, 7);
	  COL_TRI(7, 10, 14);
	  COL_TRI(10, 15, 14);
	  COL_TRI(10, 3, 15);
	  COL_TRI(15, 0, 12);
	  COL_TRI(7, 12, 0);
	  COL_TRI(7, 13, 12);
	  COL_TRI(7, 14, 13);
	  COL_TRI(15, 3, 0);
	  COL_TRI(15, 12, 13);
	  COL_TRI(15, 13, 14);
	  COL_TRI(11, 5, 9);
	  COL_TRI(11, 6, 5);
	  COL_TRI_STOP();
	  COL_END();
	}

	function hmc_seg7_collision_controllable_platform_sub() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(38, 11, 38);
	  COL_VERTEX(-37, 11, 38);
	  COL_VERTEX(-50, 0, 51);
	  COL_VERTEX(51, 0, 51);
	  COL_VERTEX(38, 11, -37);
	  COL_VERTEX(-37, 11, -37);
	  COL_VERTEX(51, 0, -50);
	  COL_VERTEX(-50, 0, -50);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 10);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(0, 4, 5);
	  COL_TRI(1, 0, 5);
	  COL_TRI(4, 0, 3);
	  COL_TRI(6, 4, 3);
	  COL_TRI(5, 4, 6);
	  COL_TRI(7, 5, 6);
	  COL_TRI(1, 5, 7);
	  COL_TRI(1, 7, 2);
	  COL_TRI_STOP();
	  COL_END();
	}

	function hmc_seg7_collision_elevator() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(-255, 0, 256);
	  COL_VERTEX(-255, 102, 256);
	  COL_VERTEX(-255, 102, -255);
	  COL_VERTEX(256, 102, 256);
	  COL_VERTEX(256, 102, -255);
	  COL_VERTEX(256, 0, 256);
	  COL_VERTEX(256, 0, -255);
	  COL_VERTEX(-255, 0, -255);
	  COL_TRI_INIT(SURFACE_DEFAULT, 10);
	  COL_TRI(0, 1, 2);
	  COL_TRI(1, 3, 4);
	  COL_TRI(1, 4, 2);
	  COL_TRI(5, 3, 1);
	  COL_TRI(5, 1, 0);
	  COL_TRI(6, 3, 5);
	  COL_TRI(6, 4, 3);
	  COL_TRI(7, 2, 4);
	  COL_TRI(7, 4, 6);
	  COL_TRI(0, 2, 7);
	  COL_TRI_STOP();
	  COL_END();
	}

	var hmc = [
	  hmc_seg7_collision_level,
	  hmc_seg7_collision_0702B65C,
	  hmc_seg7_collision_0702B65C_VERSION_JP,
	  hmc_seg7_collision_controllable_platform,
	  hmc_seg7_collision_controllable_platform_sub,
	  hmc_seg7_collision_elevator
	];

	function jrb_seg7_area_1_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x14A);
	  COL_VERTEX(-4338, 1249, 2034);
	  COL_VERTEX(-4133, 737, 2034);
	  COL_VERTEX(-4133, 1249, 2034);
	  COL_VERTEX(-4133, 737, 2239);
	  COL_VERTEX(-4133, 1249, 2239);
	  COL_VERTEX(-4338, 737, 2034);
	  COL_VERTEX(-4338, 737, 2239);
	  COL_VERTEX(-4338, 1249, 2239);
	  COL_VERTEX(-5170, 614, 3362);
	  COL_VERTEX(-6077, 1024, 3782);
	  COL_VERTEX(-5256, 1024, 4733);
	  COL_VERTEX(-6561, 1126, 4330);
	  COL_VERTEX(-4161, 1024, 6315);
	  COL_VERTEX(-6304, 1126, 3887);
	  COL_VERTEX(-5963, 1024, 1954);
	  COL_VERTEX(-6161, 1126, 1602);
	  COL_VERTEX(-4133, 614, 2187);
	  COL_VERTEX(-5345, 1024, 1011);
	  COL_VERTEX(-5756, 1024, 1719);
	  COL_VERTEX(-5647, 1126, 716);
	  COL_VERTEX(-4579, 1024, 508);
	  COL_VERTEX(-3747, 1024, 257);
	  COL_VERTEX(-4307, 1024, 405);
	  COL_VERTEX(-2771, 614, 1676);
	  COL_VERTEX(-3443, 1024, 319);
	  COL_VERTEX(-705, 512, 2401);
	  COL_VERTEX(1098, 1024, 6104);
	  COL_VERTEX(-219, 512, 5643);
	  COL_VERTEX(-805, 512, 7672);
	  COL_VERTEX(111, 1024, 6993);
	  COL_VERTEX(-210, 1024, 7709);
	  COL_VERTEX(532, 1024, 6198);
	  COL_VERTEX(-2568, 1024, 6148);
	  COL_VERTEX(-2500, 1024, 6148);
	  COL_VERTEX(-2500, 1024, 6080);
	  COL_VERTEX(-2568, 1024, 6080);
	  COL_VERTEX(-3928, 922, 1829);
	  COL_VERTEX(-4082, 1249, 1983);
	  COL_VERTEX(-4082, 1249, 2290);
	  COL_VERTEX(-4389, 1249, 2290);
	  COL_VERTEX(-4690, 1126, 88);
	  COL_VERTEX(-3991, 1126, -97);
	  COL_VERTEX(330, 1024, 6232);
	  COL_VERTEX(386, 1075, 7315);
	  COL_VERTEX(330, 1124, 7742);
	  COL_VERTEX(-2534, 1075, 6114);
	  COL_VERTEX(-3928, 922, 2443);
	  COL_VERTEX(-4543, 922, 1829);
	  COL_VERTEX(-4389, 1249, 1983);
	  COL_VERTEX(-4543, 922, 2443);
	  COL_VERTEX(-1619, 512, 6015);
	  COL_VERTEX(-3390, 512, 4987);
	  COL_VERTEX(-2483, 512, 6062);
	  COL_VERTEX(-2585, 512, 6062);
	  COL_VERTEX(-2483, 512, 6165);
	  COL_VERTEX(-2585, 512, 6165);
	  COL_VERTEX(-1805, -1023, 5315);
	  COL_VERTEX(-1105, -1023, 5129);
	  COL_VERTEX(-4161, 512, 6315);
	  COL_VERTEX(-4161, 4096, 6315);
	  COL_VERTEX(-5256, 512, 4733);
	  COL_VERTEX(-3762, 0, 3587);
	  COL_VERTEX(-2876, -1023, 4101);
	  COL_VERTEX(-2690, -1023, 4801);
	  COL_VERTEX(-805, 4096, 7672);
	  COL_VERTEX(-805, 1024, 7672);
	  COL_VERTEX(3093, -5119, 4015);
	  COL_VERTEX(2722, -5119, 2615);
	  COL_VERTEX(4279, -1535, 7071);
	  COL_VERTEX(1136, -1023, 2287);
	  COL_VERTEX(5821, -5119, 4414);
	  COL_VERTEX(5183, -5119, 2892);
	  COL_VERTEX(3750, -5119, 844);
	  COL_VERTEX(2350, 0, 1215);
	  COL_VERTEX(5150, -5119, 472);
	  COL_VERTEX(6478, -5119, 1243);
	  COL_VERTEX(5457, -4914, 603);
	  COL_VERTEX(7117, -3476, 2292);
	  COL_VERTEX(7435, 0, 615);
	  COL_VERTEX(6849, -5119, 2643);
	  COL_VERTEX(7038, -3476, 1995);
	  COL_VERTEX(7992, 0, 2714);
	  COL_VERTEX(5969, -2966, -5003);
	  COL_VERTEX(5457, -2966, -5003);
	  COL_VERTEX(4842, -2966, -5003);
	  COL_VERTEX(5662, -2761, -5003);
	  COL_VERTEX(5662, -2146, -5003);
	  COL_VERTEX(5662, -2167, -3795);
	  COL_VERTEX(5457, -1942, -5003);
	  COL_VERTEX(4842, -1942, -5003);
	  COL_VERTEX(4638, -2146, -5003);
	  COL_VERTEX(4638, -2761, -5003);
	  COL_VERTEX(4638, -2766, -3933);
	  COL_VERTEX(4842, -3279, -3193);
	  COL_VERTEX(4842, -4904, -913);
	  COL_VERTEX(5457, -4904, -913);
	  COL_VERTEX(5457, -3279, -3193);
	  COL_VERTEX(4638, -3104, -3087);
	  COL_VERTEX(4638, -4709, -850);
	  COL_VERTEX(5662, -4709, -850);
	  COL_VERTEX(5662, -2766, -3933);
	  COL_VERTEX(5662, -3104, -3087);
	  COL_VERTEX(5662, -4095, -653);
	  COL_VERTEX(5662, -2577, -2771);
	  COL_VERTEX(5457, -2401, -2665);
	  COL_VERTEX(5457, -3900, -590);
	  COL_VERTEX(4842, -2401, -2665);
	  COL_VERTEX(4842, -3900, -590);
	  COL_VERTEX(4638, -4095, -653);
	  COL_VERTEX(4638, -2167, -3795);
	  COL_VERTEX(4638, -2577, -2771);
	  COL_VERTEX(5662, -4709, 675);
	  COL_VERTEX(4842, -4914, 509);
	  COL_VERTEX(5662, -4095, 533);
	  COL_VERTEX(4842, -3890, 284);
	  COL_VERTEX(4638, -4095, 383);
	  COL_VERTEX(5457, -3890, 366);
	  COL_VERTEX(4638, -4709, 518);
	  COL_VERTEX(5221, 0, -669);
	  COL_VERTEX(-6561, 4096, 4330);
	  COL_VERTEX(1480, 4096, 7814);
	  COL_VERTEX(4279, 4096, 7071);
	  COL_VERTEX(4279, 1024, 7071);
	  COL_VERTEX(-5762, 4096, -1125);
	  COL_VERTEX(-7494, 4096, 173);
	  COL_VERTEX(-6980, 4096, -712);
	  COL_VERTEX(-5762, 1126, -1125);
	  COL_VERTEX(-7818, 4096, 2416);
	  COL_VERTEX(-5170, 0, 3362);
	  COL_VERTEX(-4133, 0, 2187);
	  COL_VERTEX(-2771, 0, 1676);
	  COL_VERTEX(6707, 4096, 4928);
	  COL_VERTEX(1879, -511, 5086);
	  COL_VERTEX(2863, 1024, 7010);
	  COL_VERTEX(7162, -2871, 1962);
	  COL_VERTEX(7092, -3022, 1822);
	  COL_VERTEX(7030, -3325, 1838);
	  COL_VERTEX(5221, 4096, -669);
	  COL_VERTEX(7435, 4096, 615);
	  COL_VERTEX(3121, 4096, -112);
	  COL_VERTEX(7992, 4096, 2714);
	  COL_VERTEX(-77, -511, 3358);
	  COL_VERTEX(1888, 1024, 6165);
	  COL_VERTEX(7241, -2871, 2259);
	  COL_VERTEX(7249, -3022, 2416);
	  COL_VERTEX(7187, -3325, 2432);
	  COL_VERTEX(2350, 4096, 1215);
	  COL_VERTEX(1136, 4096, 2287);
	  COL_VERTEX(-705, 4096, 2401);
	  COL_VERTEX(150, -509, 2557);
	  COL_VERTEX(-1662, -1023, 3030);
	  COL_VERTEX(294, -511, 4758);
	  COL_VERTEX(-1848, 0, 2330);
	  COL_VERTEX(-777, -1023, 3544);
	  COL_VERTEX(-705, 0, 2401);
	  COL_VERTEX(-105, -376, 2631);
	  COL_VERTEX(4569, -5119, 2687);
	  COL_VERTEX(4774, -5119, 2892);
	  COL_VERTEX(4815, -5221, 2154);
	  COL_VERTEX(4569, -5119, 2277);
	  COL_VERTEX(4774, -5119, 2073);
	  COL_VERTEX(5306, -5221, 2318);
	  COL_VERTEX(5388, -5119, 2277);
	  COL_VERTEX(5388, -5119, 2687);
	  COL_VERTEX(7152, -3020, 1806);
	  COL_VERTEX(7310, -3327, 2400);
	  COL_VERTEX(-4270, -918, -7563);
	  COL_VERTEX(-174, -918, -3467);
	  COL_VERTEX(-174, -918, -1931);
	  COL_VERTEX(-686, -2966, -7563);
	  COL_VERTEX(-1710, -918, -907);
	  COL_VERTEX(-3758, -918, -1419);
	  COL_VERTEX(-4270, -918, -2955);
	  COL_VERTEX(6481, -918, -5515);
	  COL_VERTEX(6481, -918, -7051);
	  COL_VERTEX(3921, -918, -5003);
	  COL_VERTEX(1361, -918, -3467);
	  COL_VERTEX(337, -918, -3979);
	  COL_VERTEX(-2222, -918, -5003);
	  COL_VERTEX(-1198, -918, -5003);
	  COL_VERTEX(-686, -918, -5515);
	  COL_VERTEX(-686, -918, -7051);
	  COL_VERTEX(849, -918, -7563);
	  COL_VERTEX(5969, -918, -7563);
	  COL_VERTEX(-2734, -2966, -1931);
	  COL_VERTEX(-2971, -2812, -1222);
	  COL_VERTEX(-2734, -2812, -1931);
	  COL_VERTEX(-1710, -2966, -2443);
	  COL_VERTEX(2897, -2966, -7563);
	  COL_VERTEX(2385, -2966, -7051);
	  COL_VERTEX(1361, -2966, -7051);
	  COL_VERTEX(692, 2509, 3303);
	  COL_VERTEX(995, -594, 3958);
	  COL_VERTEX(402, -607, 3381);
	  COL_VERTEX(728, -630, 3571);
	  COL_VERTEX(927, -751, 3241);
	  COL_VERTEX(925, -640, 3703);
	  COL_VERTEX(1252, -664, 3893);
	  COL_VERTEX(1111, 2099, 3811);
	  COL_VERTEX(1064, 2099, 3784);
	  COL_VERTEX(-40, -455, 2888);
	  COL_VERTEX(1101, 2099, 3774);
	  COL_VERTEX(1088, 2150, 3798);
	  COL_VERTEX(1074, 2099, 3821);
	  COL_VERTEX(30, 2304, 2710);
	  COL_VERTEX(40, 2304, 2747);
	  COL_VERTEX(67, 2304, 2700);
	  COL_VERTEX(225, -595, 2823);
	  COL_VERTEX(626, 2509, 3321);
	  COL_VERTEX(668, 2509, 3345);
	  COL_VERTEX(651, 2509, 3279);
	  COL_VERTEX(1888, 1536, 6165);
	  COL_VERTEX(1480, 1536, 7814);
	  COL_VERTEX(532, 1536, 6198);
	  COL_VERTEX(1853, 1946, 2191);
	  COL_VERTEX(1762, 1843, 1734);
	  COL_VERTEX(1546, 1946, 2703);
	  COL_VERTEX(522, 1946, 2287);
	  COL_VERTEX(5084, 1434, 6377);
	  COL_VERTEX(3559, 1434, 4852);
	  COL_VERTEX(5084, 1536, 6377);
	  COL_VERTEX(3559, 1536, 4852);
	  COL_VERTEX(3392, 1536, 5018);
	  COL_VERTEX(4909, 1434, 6535);
	  COL_VERTEX(3392, 1434, 5018);
	  COL_VERTEX(4460, 1434, 6912);
	  COL_VERTEX(4460, 1536, 6912);
	  COL_VERTEX(2980, 1536, 5431);
	  COL_VERTEX(2813, 1536, 5598);
	  COL_VERTEX(4284, 1434, 7069);
	  COL_VERTEX(3861, 1536, 7182);
	  COL_VERTEX(3861, 1434, 7182);
	  COL_VERTEX(2835, 1536, 6155);
	  COL_VERTEX(2668, 1536, 6322);
	  COL_VERTEX(3611, 1434, 7264);
	  COL_VERTEX(2668, 1434, 6322);
	  COL_VERTEX(-1944, 1331, 7211);
	  COL_VERTEX(-1944, 512, 7211);
	  COL_VERTEX(-1675, 1331, 6547);
	  COL_VERTEX(-2073, 1331, 6165);
	  COL_VERTEX(-2362, -1023, 3215);
	  COL_VERTEX(4422, -5119, 4786);
	  COL_VERTEX(6707, -1023, 4928);
	  COL_VERTEX(1185, -712, 3631);
	  COL_VERTEX(589, -726, 3046);
	  COL_VERTEX(3121, 0, -112);
	  COL_VERTEX(5183, -5119, 2073);
	  COL_VERTEX(5152, -4914, 427);
	  COL_VERTEX(5457, -2966, -3979);
	  COL_VERTEX(4842, -2966, -3979);
	  COL_VERTEX(5457, -1968, -3749);
	  COL_VERTEX(5969, -918, -5003);
	  COL_VERTEX(4842, -1968, -3749);
	  COL_VERTEX(1361, -2966, -3467);
	  COL_VERTEX(3921, -2966, -5003);
	  COL_VERTEX(5167, -3890, 198);
	  COL_VERTEX(-7818, 1126, 2416);
	  COL_VERTEX(1480, 1024, 7814);
	  COL_VERTEX(3190, 1024, 7360);
	  COL_VERTEX(-3991, 4096, -97);
	  COL_VERTEX(-7494, 1126, 173);
	  COL_VERTEX(-6980, 1126, -712);
	  COL_VERTEX(-3248, 0, 2701);
	  COL_VERTEX(2863, 1536, 7010);
	  COL_VERTEX(3190, 1536, 7360);
	  COL_VERTEX(-591, -1023, 4244);
	  COL_VERTEX(77, 2304, 2737);
	  COL_VERTEX(1098, 1536, 6104);
	  COL_VERTEX(4651, -5221, 2318);
	  COL_VERTEX(4651, -5221, 2646);
	  COL_VERTEX(4815, -5221, 2810);
	  COL_VERTEX(5306, -5221, 2646);
	  COL_VERTEX(5142, -5221, 2810);
	  COL_VERTEX(5142, -5221, 2154);
	  COL_VERTEX(7310, -3020, 2400);
	  COL_VERTEX(7270, -2866, 2251);
	  COL_VERTEX(7270, -3481, 2251);
	  COL_VERTEX(7192, -2866, 1954);
	  COL_VERTEX(7152, -3327, 1806);
	  COL_VERTEX(7192, -3481, 1954);
	  COL_VERTEX(6481, -918, -907);
	  COL_VERTEX(-4270, -918, -907);
	  COL_VERTEX(6481, -918, -7563);
	  COL_VERTEX(-174, -2966, -1931);
	  COL_VERTEX(-1710, -2966, -907);
	  COL_VERTEX(-174, -2966, -3467);
	  COL_VERTEX(-3758, -2966, -1419);
	  COL_VERTEX(-4270, -2966, -2955);
	  COL_VERTEX(-2222, -2966, -5003);
	  COL_VERTEX(6481, -2966, -5003);
	  COL_VERTEX(-1198, -2966, -5003);
	  COL_VERTEX(6481, -2966, -5515);
	  COL_VERTEX(6481, -2966, -7051);
	  COL_VERTEX(337, -2966, -3979);
	  COL_VERTEX(6481, -2966, -7563);
	  COL_VERTEX(-686, -2966, -5515);
	  COL_VERTEX(-686, -2966, -7051);
	  COL_VERTEX(-174, -2966, -7563);
	  COL_VERTEX(-174, -918, -7563);
	  COL_VERTEX(849, -2966, -7563);
	  COL_VERTEX(5969, -2966, -7563);
	  COL_VERTEX(2897, -918, -7563);
	  COL_VERTEX(-1710, -2812, -2443);
	  COL_VERTEX(-1710, -2812, -907);
	  COL_VERTEX(-789, -2812, -1522);
	  COL_VERTEX(2385, -918, -7051);
	  COL_VERTEX(-2971, -2966, -1222);
	  COL_VERTEX(-789, -2966, -1522);
	  COL_VERTEX(1361, -918, -7051);
	  COL_VERTEX(659, 2560, 3312);
	  COL_VERTEX(54, 2355, 2724);
	  COL_VERTEX(330, 1536, 7742);
	  COL_VERTEX(1762, 1946, 1734);
	  COL_VERTEX(1853, 1843, 2191);
	  COL_VERTEX(1546, 1843, 2703);
	  COL_VERTEX(522, 1843, 2287);
	  COL_VERTEX(4909, 1536, 6535);
	  COL_VERTEX(4284, 1536, 7069);
	  COL_VERTEX(2980, 1434, 5431);
	  COL_VERTEX(2813, 1434, 5598);
	  COL_VERTEX(3611, 1536, 7264);
	  COL_VERTEX(2835, 1434, 6155);
	  COL_VERTEX(-3928, 0, 2443);
	  COL_VERTEX(-3928, 0, 1829);
	  COL_VERTEX(-4543, 0, 2443);
	  COL_VERTEX(-4543, 0, 1829);
	  COL_VERTEX(-3017, 1331, 6778);
	  COL_VERTEX(-2073, 512, 6165);
	  COL_VERTEX(-1675, 512, 6547);
	  COL_VERTEX(-3017, 512, 6778);
	  COL_TRI_INIT(SURFACE_DEFAULT, 482);
	  COL_TRI(50, 51, 52);
	  COL_TRI(53, 52, 51);
	  COL_TRI(52, 54, 50);
	  COL_TRI(50, 54, 28);
	  COL_TRI(28, 54, 55);
	  COL_TRI(27, 50, 28);
	  COL_TRI(51, 50, 56);
	  COL_TRI(57, 56, 50);
	  COL_TRI(57, 50, 27);
	  COL_TRI(28, 58, 59);
	  COL_TRI(58, 60, 10);
	  COL_TRI(58, 10, 12);
	  COL_TRI(58, 28, 55);
	  COL_TRI(58, 55, 53);
	  COL_TRI(58, 53, 51);
	  COL_TRI(60, 58, 51);
	  COL_TRI(55, 54, 33);
	  COL_TRI(52, 53, 35);
	  COL_TRI(53, 32, 35);
	  COL_TRI(53, 55, 32);
	  COL_TRI(60, 51, 61);
	  COL_TRI(62, 61, 51);
	  COL_TRI(51, 56, 63);
	  COL_TRI(63, 62, 51);
	  COL_TRI(55, 33, 32);
	  COL_TRI(69, 66, 67);
	  COL_TRI(28, 59, 64);
	  COL_TRI(28, 65, 30);
	  COL_TRI(66, 241, 157);
	  COL_TRI(66, 157, 156);
	  COL_TRI(67, 66, 156);
	  COL_TRI(68, 66, 132);
	  COL_TRI(68, 241, 66);
	  COL_TRI(69, 132, 66);
	  COL_TRI(72, 74, 112);
	  COL_TRI(70, 71, 241);
	  COL_TRI(71, 157, 241);
	  COL_TRI(68, 70, 241);
	  COL_TRI(67, 156, 159);
	  COL_TRI(72, 67, 159);
	  COL_TRI(73, 67, 72);
	  COL_TRI(67, 73, 69);
	  COL_TRI(72, 159, 160);
	  COL_TRI(74, 72, 160);
	  COL_TRI(72, 112, 117);
	  COL_TRI(74, 160, 246);
	  COL_TRI(75, 74, 246);
	  COL_TRI(76, 247, 74);
	  COL_TRI(74, 247, 112);
	  COL_TRI(75, 76, 74);
	  COL_TRI(75, 246, 162);
	  COL_TRI(77, 75, 79);
	  COL_TRI(77, 80, 75);
	  COL_TRI(78, 113, 75);
	  COL_TRI(79, 75, 162);
	  COL_TRI(80, 136, 75);
	  COL_TRI(75, 136, 78);
	  COL_TRI(79, 162, 163);
	  COL_TRI(70, 79, 163);
	  COL_TRI(70, 163, 71);
	  COL_TRI(81, 70, 242);
	  COL_TRI(81, 79, 70);
	  COL_TRI(68, 242, 70);
	  COL_TRI(82, 83, 85);
	  COL_TRI(83, 248, 100);
	  COL_TRI(83, 100, 85);
	  COL_TRI(84, 248, 83);
	  COL_TRI(84, 249, 248);
	  COL_TRI(85, 100, 87);
	  COL_TRI(82, 85, 86);
	  COL_TRI(85, 87, 86);
	  COL_TRI(86, 87, 88);
	  COL_TRI(87, 250, 88);
	  COL_TRI(82, 86, 251);
	  COL_TRI(86, 88, 251);
	  COL_TRI(88, 250, 252);
	  COL_TRI(88, 175, 251);
	  COL_TRI(88, 89, 175);
	  COL_TRI(88, 252, 89);
	  COL_TRI(95, 93, 94);
	  COL_TRI(89, 252, 109);
	  COL_TRI(89, 90, 175);
	  COL_TRI(89, 109, 90);
	  COL_TRI(90, 109, 92);
	  COL_TRI(90, 91, 254);
	  COL_TRI(90, 254, 175);
	  COL_TRI(90, 92, 91);
	  COL_TRI(91, 92, 84);
	  COL_TRI(92, 249, 84);
	  COL_TRI(91, 84, 254);
	  COL_TRI(93, 97, 98);
	  COL_TRI(94, 93, 98);
	  COL_TRI(95, 96, 93);
	  COL_TRI(97, 92, 109);
	  COL_TRI(93, 92, 97);
	  COL_TRI(93, 249, 92);
	  COL_TRI(98, 97, 110);
	  COL_TRI(97, 109, 110);
	  COL_TRI(96, 249, 93);
	  COL_TRI(96, 248, 249);
	  COL_TRI(99, 101, 96);
	  COL_TRI(99, 96, 95);
	  COL_TRI(100, 248, 96);
	  COL_TRI(101, 100, 96);
	  COL_TRI(102, 101, 99);
	  COL_TRI(102, 103, 101);
	  COL_TRI(103, 100, 101);
	  COL_TRI(103, 87, 100);
	  COL_TRI(104, 103, 102);
	  COL_TRI(104, 87, 103);
	  COL_TRI(104, 250, 87);
	  COL_TRI(105, 104, 102);
	  COL_TRI(106, 250, 104);
	  COL_TRI(107, 104, 105);
	  COL_TRI(107, 106, 104);
	  COL_TRI(106, 252, 250);
	  COL_TRI(108, 110, 106);
	  COL_TRI(108, 106, 107);
	  COL_TRI(109, 252, 106);
	  COL_TRI(110, 109, 106);
	  COL_TRI(98, 110, 108);
	  COL_TRI(76, 95, 247);
	  COL_TRI(111, 95, 76);
	  COL_TRI(111, 99, 95);
	  COL_TRI(112, 94, 117);
	  COL_TRI(94, 98, 117);
	  COL_TRI(94, 112, 247);
	  COL_TRI(95, 94, 247);
	  COL_TRI(116, 105, 113);
	  COL_TRI(113, 102, 99);
	  COL_TRI(113, 99, 111);
	  COL_TRI(105, 102, 113);
	  COL_TRI(107, 105, 255);
	  COL_TRI(114, 107, 255);
	  COL_TRI(115, 107, 114);
	  COL_TRI(115, 108, 107);
	  COL_TRI(105, 116, 255);
	  COL_TRI(72, 117, 115);
	  COL_TRI(117, 108, 115);
	  COL_TRI(117, 98, 108);
	  COL_TRI(78, 116, 113);
	  COL_TRI(75, 113, 111);
	  COL_TRI(78, 118, 116);
	  COL_TRI(118, 255, 116);
	  COL_TRI(75, 111, 76);
	  COL_TRI(12, 11, 119);
	  COL_TRI(72, 115, 245);
	  COL_TRI(115, 114, 245);
	  COL_TRI(114, 255, 118);
	  COL_TRI(114, 118, 245);
	  COL_TRI(59, 12, 119);
	  COL_TRI(120, 65, 64);
	  COL_TRI(119, 256, 127);
	  COL_TRI(119, 11, 256);
	  COL_TRI(121, 257, 120);
	  COL_TRI(121, 122, 257);
	  COL_TRI(122, 68, 258);
	  COL_TRI(120, 257, 65);
	  COL_TRI(123, 41, 259);
	  COL_TRI(123, 126, 41);
	  COL_TRI(40, 41, 126);
	  COL_TRI(24, 148, 259);
	  COL_TRI(41, 24, 259);
	  COL_TRI(124, 261, 125);
	  COL_TRI(125, 126, 123);
	  COL_TRI(125, 261, 126);
	  COL_TRI(126, 261, 260);
	  COL_TRI(124, 260, 261);
	  COL_TRI(15, 19, 126);
	  COL_TRI(19, 40, 126);
	  COL_TRI(15, 126, 260);
	  COL_TRI(127, 260, 124);
	  COL_TRI(13, 15, 260);
	  COL_TRI(13, 260, 256);
	  COL_TRI(127, 256, 260);
	  COL_TRI(13, 256, 11);
	  COL_TRI(60, 8, 10);
	  COL_TRI(60, 128, 8);
	  COL_TRI(128, 60, 61);
	  COL_TRI(130, 154, 25);
	  COL_TRI(128, 16, 8);
	  COL_TRI(128, 129, 16);
	  COL_TRI(129, 128, 61);
	  COL_TRI(129, 61, 262);
	  COL_TRI(129, 262, 152);
	  COL_TRI(130, 129, 152);
	  COL_TRI(129, 23, 16);
	  COL_TRI(129, 130, 23);
	  COL_TRI(130, 25, 23);
	  COL_TRI(131, 242, 68);
	  COL_TRI(131, 68, 121);
	  COL_TRI(132, 133, 68);
	  COL_TRI(133, 258, 68);
	  COL_TRI(134, 81, 78);
	  COL_TRI(135, 134, 78);
	  COL_TRI(136, 135, 78);
	  COL_TRI(139, 118, 137);
	  COL_TRI(139, 245, 118);
	  COL_TRI(137, 118, 78);
	  COL_TRI(73, 72, 245);
	  COL_TRI(140, 242, 131);
	  COL_TRI(140, 81, 242);
	  COL_TRI(132, 197, 192);
	  COL_TRI(141, 132, 192);
	  COL_TRI(134, 143, 81);
	  COL_TRI(143, 144, 81);
	  COL_TRI(144, 79, 81);
	  COL_TRI(138, 81, 140);
	  COL_TRI(138, 78, 81);
	  COL_TRI(144, 145, 79);
	  COL_TRI(145, 77, 79);
	  COL_TRI(146, 245, 139);
	  COL_TRI(146, 73, 245);
	  COL_TRI(147, 73, 146);
	  COL_TRI(142, 263, 133);
	  COL_TRI(137, 78, 138);
	  COL_TRI(147, 69, 73);
	  COL_TRI(148, 154, 69);
	  COL_TRI(148, 69, 147);
	  COL_TRI(133, 263, 264);
	  COL_TRI(133, 264, 258);
	  COL_TRI(142, 132, 26);
	  COL_TRI(26, 211, 142);
	  COL_TRI(142, 211, 263);
	  COL_TRI(132, 142, 133);
	  COL_TRI(132, 27, 26);
	  COL_TRI(149, 69, 154);
	  COL_TRI(69, 149, 207);
	  COL_TRI(141, 69, 207);
	  COL_TRI(141, 244, 69);
	  COL_TRI(69, 244, 195);
	  COL_TRI(150, 265, 153);
	  COL_TRI(150, 152, 240);
	  COL_TRI(150, 153, 152);
	  COL_TRI(150, 240, 62);
	  COL_TRI(150, 62, 63);
	  COL_TRI(150, 63, 56);
	  COL_TRI(150, 56, 57);
	  COL_TRI(150, 57, 265);
	  COL_TRI(57, 27, 151);
	  COL_TRI(57, 151, 265);
	  COL_TRI(141, 265, 151);
	  COL_TRI(141, 153, 265);
	  COL_TRI(61, 62, 240);
	  COL_TRI(153, 141, 152);
	  COL_TRI(154, 141, 200);
	  COL_TRI(132, 141, 151);
	  COL_TRI(152, 262, 240);
	  COL_TRI(61, 240, 262);
	  COL_TRI(154, 152, 141);
	  COL_TRI(154, 130, 152);
	  COL_TRI(141, 207, 200);
	  COL_TRI(141, 192, 193);
	  COL_TRI(141, 193, 244);
	  COL_TRI(132, 151, 27);
	  COL_TRI(155, 149, 154);
	  COL_TRI(154, 200, 155);
	  COL_TRI(156, 268, 159);
	  COL_TRI(156, 269, 268);
	  COL_TRI(157, 269, 156);
	  COL_TRI(157, 270, 269);
	  COL_TRI(158, 269, 270);
	  COL_TRI(158, 268, 269);
	  COL_TRI(159, 268, 158);
	  COL_TRI(71, 270, 157);
	  COL_TRI(159, 158, 160);
	  COL_TRI(160, 158, 273);
	  COL_TRI(158, 161, 273);
	  COL_TRI(158, 271, 161);
	  COL_TRI(158, 272, 271);
	  COL_TRI(158, 270, 272);
	  COL_TRI(160, 273, 246);
	  COL_TRI(161, 246, 273);
	  COL_TRI(161, 162, 246);
	  COL_TRI(162, 161, 271);
	  COL_TRI(162, 271, 163);
	  COL_TRI(163, 271, 272);
	  COL_TRI(163, 272, 71);
	  COL_TRI(71, 272, 270);
	  COL_TRI(77, 276, 279);
	  COL_TRI(144, 274, 165);
	  COL_TRI(143, 274, 144);
	  COL_TRI(144, 165, 145);
	  COL_TRI(164, 274, 275);
	  COL_TRI(164, 165, 274);
	  COL_TRI(143, 275, 274);
	  COL_TRI(145, 165, 77);
	  COL_TRI(165, 276, 77);
	  COL_TRI(164, 276, 165);
	  COL_TRI(134, 275, 143);
	  COL_TRI(164, 275, 277);
	  COL_TRI(134, 277, 275);
	  COL_TRI(135, 164, 134);
	  COL_TRI(164, 277, 134);
	  COL_TRI(164, 278, 279);
	  COL_TRI(136, 164, 135);
	  COL_TRI(164, 279, 276);
	  COL_TRI(136, 278, 164);
	  COL_TRI(80, 278, 136);
	  COL_TRI(80, 279, 278);
	  COL_TRI(77, 279, 80);
	  COL_TRI(166, 280, 281);
	  COL_TRI(166, 282, 280);
	  COL_TRI(167, 283, 168);
	  COL_TRI(168, 284, 170);
	  COL_TRI(168, 283, 284);
	  COL_TRI(172, 288, 178);
	  COL_TRI(167, 285, 283);
	  COL_TRI(169, 283, 254);
	  COL_TRI(169, 284, 283);
	  COL_TRI(170, 284, 286);
	  COL_TRI(169, 286, 284);
	  COL_TRI(170, 286, 171);
	  COL_TRI(171, 286, 287);
	  COL_TRI(169, 287, 286);
	  COL_TRI(171, 287, 172);
	  COL_TRI(172, 287, 288);
	  COL_TRI(173, 82, 251);
	  COL_TRI(173, 291, 82);
	  COL_TRI(174, 291, 173);
	  COL_TRI(174, 292, 291);
	  COL_TRI(175, 253, 176);
	  COL_TRI(175, 254, 253);
	  COL_TRI(169, 254, 289);
	  COL_TRI(176, 253, 293);
	  COL_TRI(180, 296, 181);
	  COL_TRI(176, 293, 177);
	  COL_TRI(177, 293, 285);
	  COL_TRI(177, 285, 167);
	  COL_TRI(178, 288, 290);
	  COL_TRI(178, 290, 179);
	  COL_TRI(179, 290, 295);
	  COL_TRI(179, 295, 180);
	  COL_TRI(180, 295, 296);
	  COL_TRI(184, 186, 302);
	  COL_TRI(181, 296, 297);
	  COL_TRI(181, 297, 298);
	  COL_TRI(182, 297, 299);
	  COL_TRI(182, 298, 297);
	  COL_TRI(183, 188, 300);
	  COL_TRI(183, 301, 188);
	  COL_TRI(183, 292, 174);
	  COL_TRI(183, 300, 292);
	  COL_TRI(185, 186, 184);
	  COL_TRI(186, 185, 303);
	  COL_TRI(186, 303, 304);
	  COL_TRI(185, 184, 306);
	  COL_TRI(187, 304, 307);
	  COL_TRI(187, 302, 304);
	  COL_TRI(186, 304, 302);
	  COL_TRI(184, 302, 187);
	  COL_TRI(169, 289, 294);
	  COL_TRI(188, 301, 305);
	  COL_TRI(188, 305, 189);
	  COL_TRI(189, 305, 308);
	  COL_TRI(189, 308, 190);
	  COL_TRI(190, 308, 182);
	  COL_TRI(190, 182, 299);
	  COL_TRI(191, 244, 210);
	  COL_TRI(191, 195, 244);
	  COL_TRI(192, 194, 193);
	  COL_TRI(198, 197, 243);
	  COL_TRI(132, 243, 197);
	  COL_TRI(192, 203, 196);
	  COL_TRI(192, 196, 194);
	  COL_TRI(194, 196, 243);
	  COL_TRI(195, 194, 243);
	  COL_TRI(195, 209, 194);
	  COL_TRI(196, 199, 243);
	  COL_TRI(197, 198, 203);
	  COL_TRI(149, 155, 204);
	  COL_TRI(132, 69, 243);
	  COL_TRI(199, 201, 243);
	  COL_TRI(198, 243, 201);
	  COL_TRI(69, 195, 243);
	  COL_TRI(200, 204, 155);
	  COL_TRI(200, 205, 204);
	  COL_TRI(149, 266, 207);
	  COL_TRI(149, 204, 206);
	  COL_TRI(149, 206, 266);
	  COL_TRI(201, 199, 202);
	  COL_TRI(199, 203, 202);
	  COL_TRI(202, 203, 198);
	  COL_TRI(203, 199, 196);
	  COL_TRI(201, 202, 198);
	  COL_TRI(197, 203, 192);
	  COL_TRI(204, 205, 310);
	  COL_TRI(205, 266, 310);
	  COL_TRI(206, 310, 266);
	  COL_TRI(207, 266, 205);
	  COL_TRI(206, 204, 310);
	  COL_TRI(207, 205, 200);
	  COL_TRI(195, 191, 209);
	  COL_TRI(31, 267, 26);
	  COL_TRI(193, 208, 210);
	  COL_TRI(208, 209, 309);
	  COL_TRI(210, 309, 191);
	  COL_TRI(209, 191, 309);
	  COL_TRI(210, 208, 309);
	  COL_TRI(193, 210, 244);
	  COL_TRI(194, 208, 193);
	  COL_TRI(194, 209, 208);
	  COL_TRI(43, 44, 311);
	  COL_TRI(211, 267, 212);
	  COL_TRI(31, 213, 267);
	  COL_TRI(26, 267, 211);
	  COL_TRI(212, 267, 213);
	  COL_TRI(212, 263, 211);
	  COL_TRI(212, 213, 311);
	  COL_TRI(212, 264, 263);
	  COL_TRI(213, 43, 311);
	  COL_TRI(213, 31, 43);
	  COL_TRI(24, 25, 148);
	  COL_TRI(214, 215, 312);
	  COL_TRI(214, 313, 215);
	  COL_TRI(215, 314, 315);
	  COL_TRI(215, 313, 314);
	  COL_TRI(216, 313, 214);
	  COL_TRI(216, 314, 313);
	  COL_TRI(219, 221, 220);
	  COL_TRI(217, 315, 314);
	  COL_TRI(217, 314, 216);
	  COL_TRI(217, 214, 312);
	  COL_TRI(217, 216, 214);
	  COL_TRI(52, 35, 34);
	  COL_TRI(54, 52, 34);
	  COL_TRI(54, 34, 33);
	  COL_TRI(218, 219, 220);
	  COL_TRI(226, 227, 228);
	  COL_TRI(221, 224, 222);
	  COL_TRI(221, 219, 224);
	  COL_TRI(220, 221, 222);
	  COL_TRI(220, 222, 316);
	  COL_TRI(222, 224, 316);
	  COL_TRI(223, 219, 218);
	  COL_TRI(223, 224, 219);
	  COL_TRI(224, 223, 316);
	  COL_TRI(225, 227, 226);
	  COL_TRI(226, 228, 317);
	  COL_TRI(232, 321, 235);
	  COL_TRI(227, 318, 319);
	  COL_TRI(225, 318, 227);
	  COL_TRI(227, 319, 228);
	  COL_TRI(228, 229, 317);
	  COL_TRI(228, 319, 229);
	  COL_TRI(229, 318, 225);
	  COL_TRI(229, 319, 318);
	  COL_TRI(230, 233, 320);
	  COL_TRI(230, 232, 233);
	  COL_TRI(231, 321, 232);
	  COL_TRI(231, 232, 230);
	  COL_TRI(232, 235, 233);
	  COL_TRI(48, 2, 37);
	  COL_TRI(233, 235, 320);
	  COL_TRI(234, 321, 231);
	  COL_TRI(234, 235, 321);
	  COL_TRI(235, 234, 320);
	  COL_TRI(1, 6, 3);
	  COL_TRI(1, 5, 6);
	  COL_TRI(37, 2, 4);
	  COL_TRI(37, 4, 38);
	  COL_TRI(49, 324, 322);
	  COL_TRI(48, 0, 2);
	  COL_TRI(38, 4, 7);
	  COL_TRI(38, 7, 39);
	  COL_TRI(39, 0, 48);
	  COL_TRI(39, 7, 0);
	  COL_TRI(49, 322, 46);
	  COL_TRI(46, 323, 36);
	  COL_TRI(46, 322, 323);
	  COL_TRI(36, 323, 325);
	  COL_TRI(36, 325, 47);
	  COL_TRI(47, 324, 49);
	  COL_TRI(47, 325, 324);
	  COL_TRI(236, 238, 239);
	  COL_TRI(237, 238, 236);
	  COL_TRI(236, 239, 326);
	  COL_TRI(238, 327, 239);
	  COL_TRI(238, 328, 327);
	  COL_TRI(237, 328, 238);
	  COL_TRI(239, 329, 326);
	  COL_TRI(239, 327, 329);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 45);
	  COL_TRI(17, 19, 18);
	  COL_TRI(8, 9, 10);
	  COL_TRI(10, 11, 12);
	  COL_TRI(9, 13, 10);
	  COL_TRI(10, 13, 11);
	  COL_TRI(8, 14, 9);
	  COL_TRI(9, 14, 15);
	  COL_TRI(9, 15, 13);
	  COL_TRI(16, 17, 18);
	  COL_TRI(8, 16, 18);
	  COL_TRI(8, 18, 14);
	  COL_TRI(18, 15, 14);
	  COL_TRI(19, 15, 18);
	  COL_TRI(20, 40, 19);
	  COL_TRI(20, 19, 17);
	  COL_TRI(16, 20, 17);
	  COL_TRI(21, 40, 22);
	  COL_TRI(22, 40, 20);
	  COL_TRI(21, 41, 40);
	  COL_TRI(16, 23, 22);
	  COL_TRI(16, 22, 20);
	  COL_TRI(23, 21, 22);
	  COL_TRI(24, 41, 21);
	  COL_TRI(25, 24, 21);
	  COL_TRI(23, 25, 21);
	  COL_TRI(26, 27, 42);
	  COL_TRI(27, 29, 42);
	  COL_TRI(27, 28, 29);
	  COL_TRI(28, 30, 29);
	  COL_TRI(29, 43, 42);
	  COL_TRI(30, 43, 29);
	  COL_TRI(37, 36, 47);
	  COL_TRI(30, 44, 43);
	  COL_TRI(31, 42, 43);
	  COL_TRI(32, 45, 35);
	  COL_TRI(33, 45, 32);
	  COL_TRI(34, 45, 33);
	  COL_TRI(35, 45, 34);
	  COL_TRI(36, 37, 38);
	  COL_TRI(36, 38, 46);
	  COL_TRI(39, 47, 49);
	  COL_TRI(37, 47, 48);
	  COL_TRI(38, 39, 49);
	  COL_TRI(38, 49, 46);
	  COL_TRI(39, 48, 47);
	  COL_TRI_INIT(SURFACE_WALL_MISC, 8);
	  COL_TRI(0, 1, 2);
	  COL_TRI(2, 1, 3);
	  COL_TRI(2, 3, 4);
	  COL_TRI(0, 5, 1);
	  COL_TRI(4, 3, 6);
	  COL_TRI(4, 6, 7);
	  COL_TRI(7, 6, 5);
	  COL_TRI(7, 5, 0);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(1);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start, /*pos*/ -6750, 1126, 1482, /*yaw*/ 64); // unused, probably an early way to set initial position
	  COL_WATER_BOX_INIT(3);
	  COL_WATER_BOX(0, -6304, -669, 7992, 7814, 1024);
	  COL_WATER_BOX(1, 4433, -4253, 5969, -669, -3016);
	  COL_WATER_BOX(51, -7818, -1125, 9055, 7814, 1229);
	  COL_END();
	}

	function jrb_seg7_area_2_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0xC6);
	  COL_VERTEX(-435, -74, 621);
	  COL_VERTEX(-72, -74, 904);
	  COL_VERTEX(-82, -74, 736);
	  COL_VERTEX(-232, -74, 576);
	  COL_VERTEX(-479, -74, 721);
	  COL_VERTEX(259, -202, 610);
	  COL_VERTEX(628, -202, 616);
	  COL_VERTEX(442, -202, 561);
	  COL_VERTEX(235, -202, 827);
	  COL_VERTEX(495, -202, 944);
	  COL_VERTEX(758, -202, 808);
	  COL_VERTEX(886, -35, 839);
	  COL_VERTEX(847, -35, 1084);
	  COL_VERTEX(906, -35, 1054);
	  COL_VERTEX(979, -35, 846);
	  COL_VERTEX(801, -35, 945);
	  COL_VERTEX(128, -4, 1013);
	  COL_VERTEX(168, 322, 1458);
	  COL_VERTEX(523, 95, 1273);
	  COL_VERTEX(710, 430, 1647);
	  COL_VERTEX(275, 558, 1980);
	  COL_VERTEX(-407, 445, 1450);
	  COL_VERTEX(-417, 694, 1769);
	  COL_VERTEX(414, 943, 2667);
	  COL_VERTEX(-167, 1258, 2584);
	  COL_VERTEX(-472, 287, 1330);
	  COL_VERTEX(545, 11, 1249);
	  COL_VERTEX(-475, -351, 184);
	  COL_VERTEX(-705, -289, 184);
	  COL_VERTEX(784, 583, 2313);
	  COL_VERTEX(70, -4, 1085);
	  COL_VERTEX(313, -4, 1193);
	  COL_VERTEX(290, -4, 1038);
	  COL_VERTEX(239, -4, 980);
	  COL_VERTEX(418, 322, 1606);
	  COL_VERTEX(312, 322, 1474);
	  COL_VERTEX(477, 322, 1814);
	  COL_VERTEX(33, 322, 1615);
	  COL_VERTEX(841, 95, 1342);
	  COL_VERTEX(761, 95, 1210);
	  COL_VERTEX(575, 95, 1479);
	  COL_VERTEX(496, 95, 1444);
	  COL_VERTEX(628, 95, 1151);
	  COL_VERTEX(696, 430, 2063);
	  COL_VERTEX(1031, 430, 1890);
	  COL_VERTEX(661, 430, 1790);
	  COL_VERTEX(1087, 430, 1732);
	  COL_VERTEX(961, 430, 1625);
	  COL_VERTEX(513, 558, 2044);
	  COL_VERTEX(428, 558, 1927);
	  COL_VERTEX(517, 558, 2227);
	  COL_VERTEX(193, 558, 2081);
	  COL_VERTEX(-102, 445, 1567);
	  COL_VERTEX(-189, 445, 1466);
	  COL_VERTEX(-98, 445, 1762);
	  COL_VERTEX(-429, 445, 1614);
	  COL_VERTEX(-480, 445, 1541);
	  COL_VERTEX(-363, 694, 2060);
	  COL_VERTEX(-27, 694, 2210);
	  COL_VERTEX(-500, 694, 1865);
	  COL_VERTEX(-36, 694, 1879);
	  COL_VERTEX(-248, 694, 1740);
	  COL_VERTEX(1027, 943, 2507);
	  COL_VERTEX(751, 943, 2357);
	  COL_VERTEX(1128, 941, 2827);
	  COL_VERTEX(802, 943, 3000);
	  COL_VERTEX(401, 943, 2819);
	  COL_VERTEX(-350, 1258, 2875);
	  COL_VERTEX(-211, 1258, 3072);
	  COL_VERTEX(126, 1258, 3224);
	  COL_VERTEX(388, 1258, 3273);
	  COL_VERTEX(362, 1258, 2944);
	  COL_VERTEX(193, 1258, 2628);
	  COL_VERTEX(523, 18, 1273);
	  COL_VERTEX(-546, 303, 1249);
	  COL_VERTEX(514, 22, 1330);
	  COL_VERTEX(-463, -351, 265);
	  COL_VERTEX(-631, -306, 265);
	  COL_VERTEX(-387, 897, 2313);
	  COL_VERTEX(-313, 880, 2394);
	  COL_VERTEX(712, 605, 2394);
	  COL_VERTEX(-54, 1673, 3483);
	  COL_VERTEX(-189, 1343, 3224);
	  COL_VERTEX(885, 1421, 3483);
	  COL_VERTEX(384, 1189, 3224);
	  COL_VERTEX(836, 1068, 3224);
	  COL_VERTEX(1217, 1125, 3135);
	  COL_VERTEX(362, 1028, 2944);
	  COL_VERTEX(593, -351, 606);
	  COL_VERTEX(628, -336, 616);
	  COL_VERTEX(822, -351, 488);
	  COL_VERTEX(876, -148, 851);
	  COL_VERTEX(801, -120, 945);
	  COL_VERTEX(628, -59, 1151);
	  COL_VERTEX(239, -112, 980);
	  COL_VERTEX(290, -91, 1038);
	  COL_VERTEX(-490, 217, 1205);
	  COL_VERTEX(761, 6, 1210);
	  COL_VERTEX(710, 218, 1647);
	  COL_VERTEX(961, 274, 1625);
	  COL_VERTEX(661, 279, 1790);
	  COL_VERTEX(693, 536, 2270);
	  COL_VERTEX(418, 213, 1606);
	  COL_VERTEX(513, 450, 2044);
	  COL_VERTEX(1027, 748, 2507);
	  COL_VERTEX(193, 884, 2628);
	  COL_VERTEX(275, 475, 1980);
	  COL_VERTEX(-36, 499, 1879);
	  COL_VERTEX(168, 192, 1458);
	  COL_VERTEX(-189, 292, 1466);
	  COL_VERTEX(312, 163, 1474);
	  COL_VERTEX(-82, -171, 736);
	  COL_VERTEX(-232, -227, 576);
	  COL_VERTEX(534, -56, 1205);
	  COL_VERTEX(568, -39, 1221);
	  COL_VERTEX(996, 299, 1655);
	  COL_VERTEX(-331, 811, 2270);
	  COL_VERTEX(751, 597, 2358);
	  COL_VERTEX(428, 402, 1927);
	  COL_VERTEX(414, 848, 2667);
	  COL_VERTEX(-167, 955, 2584);
	  COL_VERTEX(-262, 1070, 2735);
	  COL_VERTEX(-248, 472, 1740);
	  COL_VERTEX(-406, 531, 1767);
	  COL_VERTEX(-102, 330, 1567);
	  COL_VERTEX(-407, 341, 1450);
	  COL_VERTEX(-446, 381, 1499);
	  COL_VERTEX(259, -338, 610);
	  COL_VERTEX(128, -62, 1013);
	  COL_VERTEX(288, -351, 602);
	  COL_VERTEX(-435, -146, 621);
	  COL_VERTEX(442, -351, 561);
	  COL_VERTEX(1110, -351, -333);
	  COL_VERTEX(886, -142, 839);
	  COL_VERTEX(-1009, -351, -332);
	  COL_VERTEX(-864, 191, -2190);
	  COL_VERTEX(-1071, -351, -1741);
	  COL_VERTEX(-560, -42, -2445);
	  COL_VERTEX(759, -351, -2188);
	  COL_VERTEX(822, -351, -2139);
	  COL_VERTEX(1188, -351, -1513);
	  COL_VERTEX(886, -351, -2029);
	  COL_VERTEX(1263, -72, -1679);
	  COL_VERTEX(1188, -351, -556);
	  COL_VERTEX(-665, -351, 154);
	  COL_VERTEX(1695, 1539, 2833);
	  COL_VERTEX(-36, 2599, 3522);
	  COL_VERTEX(-491, 1583, 3135);
	  COL_VERTEX(1653, 1382, -1187);
	  COL_VERTEX(-739, 2023, -1187);
	  COL_VERTEX(1188, -351, -2194);
	  COL_VERTEX(-950, 1237, -860);
	  COL_VERTEX(-993, 1078, -765);
	  COL_VERTEX(482, 2801, 3605);
	  COL_VERTEX(226, 2211, 3699);
	  COL_VERTEX(1180, 2762, 3522);
	  COL_VERTEX(1478, 2782, 3194);
	  COL_VERTEX(1331, 2232, 3522);
	  COL_VERTEX(359, 2982, 3522);
	  COL_VERTEX(415, 3189, 3398);
	  COL_VERTEX(111, 3148, 3194);
	  COL_VERTEX(1162, -351, -2190);
	  COL_VERTEX(-515, 2858, 2428);
	  COL_VERTEX(1876, 2217, 2428);
	  COL_VERTEX(1235, 2969, 3398);
	  COL_VERTEX(-1228, -351, -1152);
	  COL_VERTEX(-697, 2180, 2833);
	  COL_VERTEX(-1205, 283, -2190);
	  COL_VERTEX(-262, -351, -2828);
	  COL_VERTEX(464, -317, -2445);
	  COL_VERTEX(455, -351, -2936);
	  COL_VERTEX(-940, -93, -2701);
	  COL_VERTEX(-703, 792, -3230);
	  COL_VERTEX(-380, 629, -3358);
	  COL_VERTEX(-968, 1168, -2719);
	  COL_VERTEX(1005, 334, -3230);
	  COL_VERTEX(645, 354, -3358);
	  COL_VERTEX(822, -351, -2820);
	  COL_VERTEX(1424, 527, -2719);
	  COL_VERTEX(-417, 543, 1769);
	  COL_VERTEX(-1009, -351, -1865);
	  COL_VERTEX(-1311, -110, -1274);
	  COL_VERTEX(-716, -351, -2182);
	  COL_VERTEX(-643, -351, -2261);
	  COL_VERTEX(455, -351, -2425);
	  COL_VERTEX(-1054, -351, -502);
	  COL_VERTEX(-1129, 568, -1679);
	  COL_VERTEX(844, -266, -2190);
	  COL_VERTEX(-617, -255, -2828);
	  COL_VERTEX(910, 2028, 3699);
	  COL_VERTEX(-934, 1297, -753);
	  COL_VERTEX(1458, 656, -753);
	  COL_VERTEX(1415, 496, -658);
	  COL_VERTEX(-976, 1137, -658);
	  COL_VERTEX(1188, -351, -2178);
	  COL_VERTEX(1442, 596, -860);
	  COL_VERTEX(1399, 436, -765);
	  COL_VERTEX(983, 2666, 3605);
	  COL_TRI_INIT(SURFACE_DEFAULT, 236);
	  COL_TRI(10, 89, 6);
	  COL_TRI(6, 88, 7);
	  COL_TRI(6, 89, 88);
	  COL_TRI(88, 131, 7);
	  COL_TRI(131, 88, 90);
	  COL_TRI(7, 129, 5);
	  COL_TRI(7, 131, 129);
	  COL_TRI(76, 129, 131);
	  COL_TRI(131, 90, 132);
	  COL_TRI(76, 131, 132);
	  COL_TRI(129, 127, 5);
	  COL_TRI(5, 127, 8);
	  COL_TRI(16, 128, 30);
	  COL_TRI(0, 130, 4);
	  COL_TRI(3, 130, 0);
	  COL_TRI(3, 112, 130);
	  COL_TRI(2, 112, 3);
	  COL_TRI(2, 111, 112);
	  COL_TRI(1, 111, 2);
	  COL_TRI(33, 128, 16);
	  COL_TRI(33, 94, 128);
	  COL_TRI(32, 94, 33);
	  COL_TRI(32, 95, 94);
	  COL_TRI(31, 95, 32);
	  COL_TRI(11, 92, 15);
	  COL_TRI(15, 92, 12);
	  COL_TRI(14, 133, 11);
	  COL_TRI(90, 91, 133);
	  COL_TRI(132, 133, 14);
	  COL_TRI(132, 90, 133);
	  COL_TRI(11, 91, 92);
	  COL_TRI(11, 133, 91);
	  COL_TRI(38, 97, 39);
	  COL_TRI(39, 93, 42);
	  COL_TRI(39, 97, 93);
	  COL_TRI(42, 93, 114);
	  COL_TRI(42, 26, 73);
	  COL_TRI(42, 114, 26);
	  COL_TRI(73, 18, 42);
	  COL_TRI(36, 102, 34);
	  COL_TRI(34, 102, 110);
	  COL_TRI(34, 110, 35);
	  COL_TRI(35, 110, 108);
	  COL_TRI(115, 99, 47);
	  COL_TRI(14, 46, 132);
	  COL_TRI(14, 115, 46);
	  COL_TRI(14, 13, 115);
	  COL_TRI(35, 108, 17);
	  COL_TRI(17, 108, 37);
	  COL_TRI(46, 115, 47);
	  COL_TRI(132, 46, 86);
	  COL_TRI(46, 44, 86);
	  COL_TRI(47, 98, 19);
	  COL_TRI(47, 99, 98);
	  COL_TRI(19, 98, 100);
	  COL_TRI(19, 100, 45);
	  COL_TRI(45, 100, 43);
	  COL_TRI(20, 106, 51);
	  COL_TRI(49, 106, 20);
	  COL_TRI(49, 118, 106);
	  COL_TRI(56, 126, 74);
	  COL_TRI(48, 118, 49);
	  COL_TRI(48, 103, 118);
	  COL_TRI(50, 103, 48);
	  COL_TRI(21, 126, 56);
	  COL_TRI(21, 125, 126);
	  COL_TRI(53, 109, 21);
	  COL_TRI(109, 125, 21);
	  COL_TRI(126, 25, 74);
	  COL_TRI(59, 56, 74);
	  COL_TRI(55, 56, 59);
	  COL_TRI(52, 109, 53);
	  COL_TRI(52, 124, 109);
	  COL_TRI(54, 124, 52);
	  COL_TRI(22, 179, 59);
	  COL_TRI(61, 123, 22);
	  COL_TRI(123, 179, 22);
	  COL_TRI(59, 179, 55);
	  COL_TRI(55, 179, 123);
	  COL_TRI(134, 67, 59);
	  COL_TRI(74, 134, 59);
	  COL_TRI(59, 67, 78);
	  COL_TRI(59, 116, 57);
	  COL_TRI(59, 78, 116);
	  COL_TRI(61, 122, 123);
	  COL_TRI(60, 107, 61);
	  COL_TRI(107, 122, 61);
	  COL_TRI(63, 117, 80);
	  COL_TRI(58, 107, 60);
	  COL_TRI(62, 104, 63);
	  COL_TRI(64, 104, 62);
	  COL_TRI(104, 117, 63);
	  COL_TRI(63, 119, 23);
	  COL_TRI(63, 80, 119);
	  COL_TRI(29, 80, 117);
	  COL_TRI(23, 119, 66);
	  COL_TRI(71, 87, 105);
	  COL_TRI(70, 84, 71);
	  COL_TRI(84, 87, 71);
	  COL_TRI(71, 105, 72);
	  COL_TRI(135, 136, 180);
	  COL_TRI(72, 105, 120);
	  COL_TRI(72, 120, 24);
	  COL_TRI(24, 120, 121);
	  COL_TRI(24, 121, 67);
	  COL_TRI(79, 78, 121);
	  COL_TRI(67, 121, 78);
	  COL_TRI(134, 147, 67);
	  COL_TRI(68, 67, 147);
	  COL_TRI(136, 182, 180);
	  COL_TRI(136, 183, 182);
	  COL_TRI(136, 138, 184);
	  COL_TRI(136, 184, 183);
	  COL_TRI(136, 141, 139);
	  COL_TRI(137, 135, 182);
	  COL_TRI(137, 182, 183);
	  COL_TRI(135, 180, 182);
	  COL_TRI(137, 183, 184);
	  COL_TRI(137, 184, 169);
	  COL_TRI(138, 187, 169);
	  COL_TRI(138, 169, 184);
	  COL_TRI(139, 187, 138);
	  COL_TRI(136, 139, 138);
	  COL_TRI(136, 143, 140);
	  COL_TRI(136, 144, 27);
	  COL_TRI(136, 27, 143);
	  COL_TRI(140, 187, 141);
	  COL_TRI(141, 187, 139);
	  COL_TRI(136, 140, 141);
	  COL_TRI(142, 140, 143);
	  COL_TRI(142, 143, 145);
	  COL_TRI(143, 27, 132);
	  COL_TRI(144, 28, 27);
	  COL_TRI(27, 76, 132);
	  COL_TRI(140, 142, 187);
	  COL_TRI(101, 78, 29);
	  COL_TRI(136, 181, 165);
	  COL_TRI(136, 134, 144);
	  COL_TRI(134, 28, 144);
	  COL_TRI(28, 134, 74);
	  COL_TRI(136, 165, 134);
	  COL_TRI(145, 132, 86);
	  COL_TRI(83, 157, 86);
	  COL_TRI(86, 157, 145);
	  COL_TRI(147, 185, 166);
	  COL_TRI(77, 28, 96);
	  COL_TRI(28, 74, 96);
	  COL_TRI(96, 114, 113);
	  COL_TRI(96, 26, 114);
	  COL_TRI(96, 74, 26);
	  COL_TRI(101, 116, 78);
	  COL_TRI(146, 147, 166);
	  COL_TRI(147, 134, 185);
	  COL_TRI(81, 82, 147);
	  COL_TRI(68, 147, 82);
	  COL_TRI(18, 73, 75);
	  COL_TRI(18, 75, 41);
	  COL_TRI(148, 190, 149);
	  COL_TRI(148, 191, 190);
	  COL_TRI(149, 174, 148);
	  COL_TRI(150, 192, 148);
	  COL_TRI(151, 190, 191);
	  COL_TRI(149, 193, 167);
	  COL_TRI(149, 167, 174);
	  COL_TRI(151, 191, 195);
	  COL_TRI(152, 151, 196);
	  COL_TRI(151, 195, 196);
	  COL_TRI(83, 189, 157);
	  COL_TRI(81, 189, 83);
	  COL_TRI(153, 155, 197);
	  COL_TRI(153, 197, 189);
	  COL_TRI(154, 153, 189);
	  COL_TRI(155, 157, 189);
	  COL_TRI(155, 189, 197);
	  COL_TRI(81, 154, 189);
	  COL_TRI(156, 157, 155);
	  COL_TRI(157, 156, 163);
	  COL_TRI(157, 163, 145);
	  COL_TRI(145, 143, 132);
	  COL_TRI(142, 145, 163);
	  COL_TRI(153, 154, 146);
	  COL_TRI(154, 81, 146);
	  COL_TRI(146, 81, 147);
	  COL_TRI(158, 153, 146);
	  COL_TRI(159, 146, 160);
	  COL_TRI(160, 146, 166);
	  COL_TRI(159, 158, 146);
	  COL_TRI(161, 187, 142);
	  COL_TRI(162, 163, 160);
	  COL_TRI(163, 156, 160);
	  COL_TRI(153, 158, 159);
	  COL_TRI(160, 166, 162);
	  COL_TRI(167, 186, 135);
	  COL_TRI(156, 164, 160);
	  COL_TRI(156, 155, 164);
	  COL_TRI(153, 164, 155);
	  COL_TRI(153, 159, 164);
	  COL_TRI(164, 159, 160);
	  COL_TRI(165, 166, 185);
	  COL_TRI(165, 181, 166);
	  COL_TRI(166, 181, 186);
	  COL_TRI(162, 166, 186);
	  COL_TRI(135, 186, 181);
	  COL_TRI(161, 142, 194);
	  COL_TRI(135, 181, 136);
	  COL_TRI(168, 169, 161);
	  COL_TRI(168, 137, 169);
	  COL_TRI(169, 187, 161);
	  COL_TRI(170, 168, 161);
	  COL_TRI(170, 161, 194);
	  COL_TRI(170, 194, 150);
	  COL_TRI(171, 167, 135);
	  COL_TRI(137, 171, 135);
	  COL_TRI(137, 188, 171);
	  COL_TRI(168, 188, 137);
	  COL_TRI(172, 188, 173);
	  COL_TRI(173, 188, 168);
	  COL_TRI(172, 171, 188);
	  COL_TRI(174, 178, 148);
	  COL_TRI(173, 168, 170);
	  COL_TRI(174, 171, 172);
	  COL_TRI(170, 150, 177);
	  COL_TRI(150, 194, 192);
	  COL_TRI(150, 148, 178);
	  COL_TRI(175, 177, 178);
	  COL_TRI(176, 177, 175);
	  COL_TRI(177, 150, 178);
	  COL_TRI(173, 170, 176);
	  COL_TRI(176, 170, 177);
	  COL_TRI(174, 167, 171);
	  COL_TRI(163, 162, 196);
	  COL_TRI(162, 152, 196);
	  COL_TRI(178, 174, 172);
	  COL_TRI(175, 178, 172);
	  COL_TRI(176, 175, 172);
	  COL_TRI(173, 176, 172);
	  COL_TRI_INIT(SURFACE_SLIPPERY, 92);
	  COL_TRI(70, 69, 81);
	  COL_TRI(69, 82, 81);
	  COL_TRI(68, 82, 69);
	  COL_TRI(70, 81, 83);
	  COL_TRI(84, 70, 83);
	  COL_TRI(85, 84, 83);
	  COL_TRI(83, 86, 85);
	  COL_TRI(87, 84, 85);
	  COL_TRI(65, 85, 64);
	  COL_TRI(86, 64, 85);
	  COL_TRI(87, 85, 65);
	  COL_TRI(88, 89, 90);
	  COL_TRI(95, 113, 9);
	  COL_TRI(90, 89, 10);
	  COL_TRI(91, 90, 10);
	  COL_TRI(92, 10, 9);
	  COL_TRI(91, 10, 92);
	  COL_TRI(12, 92, 97);
	  COL_TRI(93, 97, 92);
	  COL_TRI(9, 93, 92);
	  COL_TRI(9, 113, 93);
	  COL_TRI(8, 94, 9);
	  COL_TRI(94, 95, 9);
	  COL_TRI(93, 113, 114);
	  COL_TRI(31, 113, 95);
	  COL_TRI(96, 113, 31);
	  COL_TRI(97, 38, 12);
	  COL_TRI(12, 38, 13);
	  COL_TRI(38, 99, 13);
	  COL_TRI(98, 99, 38);
	  COL_TRI(40, 98, 38);
	  COL_TRI(103, 50, 101);
	  COL_TRI(99, 115, 13);
	  COL_TRI(100, 98, 40);
	  COL_TRI(101, 100, 40);
	  COL_TRI(40, 36, 101);
	  COL_TRI(102, 36, 40);
	  COL_TRI(40, 41, 102);
	  COL_TRI(100, 101, 43);
	  COL_TRI(43, 101, 44);
	  COL_TRI(101, 29, 44);
	  COL_TRI(36, 103, 101);
	  COL_TRI(79, 105, 119);
	  COL_TRI(104, 44, 29);
	  COL_TRI(64, 86, 44);
	  COL_TRI(44, 104, 64);
	  COL_TRI(29, 117, 104);
	  COL_TRI(66, 87, 65);
	  COL_TRI(105, 87, 66);
	  COL_TRI(105, 66, 119);
	  COL_TRI(79, 120, 105);
	  COL_TRI(79, 119, 80);
	  COL_TRI(79, 121, 120);
	  COL_TRI(50, 51, 58);
	  COL_TRI(106, 107, 51);
	  COL_TRI(51, 107, 58);
	  COL_TRI(107, 54, 122);
	  COL_TRI(54, 107, 106);
	  COL_TRI(57, 116, 58);
	  COL_TRI(101, 50, 58);
	  COL_TRI(58, 116, 101);
	  COL_TRI(108, 110, 41);
	  COL_TRI(55, 123, 122);
	  COL_TRI(55, 122, 54);
	  COL_TRI(106, 37, 54);
	  COL_TRI(37, 124, 54);
	  COL_TRI(37, 106, 118);
	  COL_TRI(37, 118, 36);
	  COL_TRI(108, 124, 37);
	  COL_TRI(109, 124, 108);
	  COL_TRI(36, 118, 103);
	  COL_TRI(110, 102, 41);
	  COL_TRI(111, 1, 94);
	  COL_TRI(25, 108, 41);
	  COL_TRI(25, 41, 75);
	  COL_TRI(25, 109, 108);
	  COL_TRI(25, 125, 109);
	  COL_TRI(25, 126, 125);
	  COL_TRI(111, 8, 127);
	  COL_TRI(111, 94, 8);
	  COL_TRI(1, 128, 94);
	  COL_TRI(77, 4, 130);
	  COL_TRI(31, 30, 96);
	  COL_TRI(1, 96, 128);
	  COL_TRI(96, 30, 128);
	  COL_TRI(77, 96, 4);
	  COL_TRI(4, 96, 1);
	  COL_TRI(112, 111, 127);
	  COL_TRI(76, 112, 127);
	  COL_TRI(76, 127, 129);
	  COL_TRI(76, 77, 112);
	  COL_TRI(77, 130, 112);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 51);
	  COL_TRI(11, 13, 14);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(0, 4, 1);
	  COL_TRI(5, 6, 7);
	  COL_TRI(5, 8, 9);
	  COL_TRI(5, 9, 10);
	  COL_TRI(5, 10, 6);
	  COL_TRI(11, 12, 13);
	  COL_TRI(17, 37, 36);
	  COL_TRI(11, 15, 12);
	  COL_TRI(16, 30, 31);
	  COL_TRI(16, 32, 33);
	  COL_TRI(16, 31, 32);
	  COL_TRI(17, 34, 35);
	  COL_TRI(17, 36, 34);
	  COL_TRI(20, 48, 49);
	  COL_TRI(18, 38, 39);
	  COL_TRI(18, 40, 38);
	  COL_TRI(18, 41, 40);
	  COL_TRI(18, 39, 42);
	  COL_TRI(19, 43, 44);
	  COL_TRI(19, 45, 43);
	  COL_TRI(19, 44, 46);
	  COL_TRI(19, 46, 47);
	  COL_TRI(22, 58, 60);
	  COL_TRI(20, 50, 48);
	  COL_TRI(20, 51, 50);
	  COL_TRI(21, 52, 53);
	  COL_TRI(21, 54, 52);
	  COL_TRI(21, 55, 54);
	  COL_TRI(21, 56, 55);
	  COL_TRI(22, 57, 58);
	  COL_TRI(22, 59, 57);
	  COL_TRI(24, 68, 69);
	  COL_TRI(22, 60, 61);
	  COL_TRI(23, 62, 63);
	  COL_TRI(23, 64, 62);
	  COL_TRI(23, 65, 64);
	  COL_TRI(23, 66, 65);
	  COL_TRI(24, 67, 68);
	  COL_TRI(24, 69, 70);
	  COL_TRI(24, 70, 71);
	  COL_TRI(29, 78, 79);
	  COL_TRI(24, 71, 72);
	  COL_TRI(25, 73, 26);
	  COL_TRI(26, 74, 25);
	  COL_TRI(25, 75, 73);
	  COL_TRI(27, 28, 76);
	  COL_TRI(28, 77, 76);
	  COL_TRI(29, 79, 80);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(1);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start, /*pos*/ 866, 798, -1248, /*yaw*/ 128); // unused, probably an early way to set initial position
	  COL_WATER_BOX_INIT(1);
	  COL_WATER_BOX(0, -4095, -4095,  4096,  4096,  2765);
	  COL_END();
	}

	function jrb_seg7_collision_pillar_base() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x5);
	  COL_VERTEX(102, 0, -101);
	  COL_VERTEX(0, 102, 0);
	  COL_VERTEX(102, 0, 102);
	  COL_VERTEX(-101, 0, -101);
	  COL_VERTEX(-101, 0, 102);
	  COL_TRI_INIT(SURFACE_DEFAULT, 4);
	  COL_TRI(0, 1, 2);
	  COL_TRI(3, 4, 1);
	  COL_TRI(2, 1, 4);
	  COL_TRI(1, 0, 3);
	  COL_TRI_STOP();
	  COL_END();
	}

	function jrb_seg7_collision_floating_platform() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(256, -63, 640);
	  COL_VERTEX(-255, 64, 640);
	  COL_VERTEX(-255, -63, 640);
	  COL_VERTEX(-255, -63, -639);
	  COL_VERTEX(-255, 64, -639);
	  COL_VERTEX(256, 64, -639);
	  COL_VERTEX(256, -63, -639);
	  COL_VERTEX(256, 64, 640);
	  COL_TRI_INIT(SURFACE_DEFAULT, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(2, 4, 3);
	  COL_TRI(2, 1, 4);
	  COL_TRI(3, 4, 5);
	  COL_TRI(5, 4, 1);
	  COL_TRI(0, 3, 6);
	  COL_TRI(3, 5, 6);
	  COL_TRI(0, 7, 1);
	  COL_TRI(5, 1, 7);
	  COL_TRI(6, 5, 7);
	  COL_TRI(6, 7, 0);
	  COL_TRI_STOP();
	  COL_END();
	}

	function jrb_seg7_collision_rock_solid() {
	  COL_INIT();
	  COL_VERTEX_INIT(0xC);
	  COL_VERTEX(305, -409, 0);
	  COL_VERTEX(216, -808, -53);
	  COL_VERTEX(32, -409, -338);
	  COL_VERTEX(32, -409, 264);
	  COL_VERTEX(28, -675, 134);
	  COL_VERTEX(-66, -822, -143);
	  COL_VERTEX(8, -822, -218);
	  COL_VERTEX(-108, -9, -53);
	  COL_VERTEX(28, -142, -182);
	  COL_VERTEX(-306, -409, 0);
	  COL_VERTEX(84, 29, 7);
	  COL_VERTEX(8, 29, 82);
	  COL_TRI_INIT(SURFACE_DEFAULT, 20);
	  COL_TRI(7, 11, 10);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 4);
	  COL_TRI(1, 0, 4);
	  COL_TRI(5, 1, 4);
	  COL_TRI(5, 6, 1);
	  COL_TRI(2, 1, 6);
	  COL_TRI(7, 8, 2);
	  COL_TRI(2, 9, 7);
	  COL_TRI(5, 2, 6);
	  COL_TRI(5, 9, 2);
	  COL_TRI(4, 9, 5);
	  COL_TRI(4, 3, 9);
	  COL_TRI(8, 7, 10);
	  COL_TRI(7, 9, 11);
	  COL_TRI(0, 2, 8);
	  COL_TRI(11, 3, 10);
	  COL_TRI(9, 3, 11);
	  COL_TRI(3, 0, 10);
	  COL_TRI(10, 0, 8);
	  COL_TRI_STOP();
	  COL_END();
	}

	function jrb_seg7_collision_floating_box() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(-101, 0, 77);
	  COL_VERTEX(-101, 0, -76);
	  COL_VERTEX(102, 0, -76);
	  COL_VERTEX(102, 0, 77);
	  COL_VERTEX(102, 154, 77);
	  COL_VERTEX(-101, 154, 77);
	  COL_VERTEX(102, 154, -76);
	  COL_VERTEX(-101, 154, -76);
	  COL_TRI_INIT(SURFACE_DEFAULT, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(3, 4, 5);
	  COL_TRI(4, 6, 7);
	  COL_TRI(4, 7, 5);
	  COL_TRI(2, 6, 4);
	  COL_TRI(2, 4, 3);
	  COL_TRI(1, 6, 2);
	  COL_TRI(1, 7, 6);
	  COL_TRI(0, 5, 7);
	  COL_TRI(0, 7, 1);
	  COL_TRI(3, 5, 0);
	  COL_TRI_STOP();
	  COL_END();
	}

	function jrb_seg7_collision_0700D1DC() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x4);
	  COL_VERTEX(123, 0, -122);
	  COL_VERTEX(-122, 0, -122);
	  COL_VERTEX(-122, 0, 123);
	  COL_VERTEX(123, 0, 123);
	  COL_TRI_INIT(SURFACE_DEFAULT, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI_STOP();
	  COL_END();
	}

	function jrb_seg7_collision_in_sunken_ship_3() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x4F);
	  COL_VERTEX(-613, 717, -48);
	  COL_VERTEX(-716, 1126, -91);
	  COL_VERTEX(-716, 717, -48);
	  COL_VERTEX(717, 1126, -91);
	  COL_VERTEX(-613, 1126, -91);
	  COL_VERTEX(-716, 1229, -101);
	  COL_VERTEX(-613, 1229, -101);
	  COL_VERTEX(-613, 1126, -1330);
	  COL_VERTEX(614, 1126, -91);
	  COL_VERTEX(614, 1126, -1310);
	  COL_VERTEX(-613, 1126, -1310);
	  COL_VERTEX(-716, 1331, -1330);
	  COL_VERTEX(-613, 1331, -1330);
	  COL_VERTEX(717, 1229, -101);
	  COL_VERTEX(614, 1126, -1330);
	  COL_VERTEX(717, 1331, -1330);
	  COL_VERTEX(614, 717, -48);
	  COL_VERTEX(-306, 819, 2560);
	  COL_VERTEX(-613, 717, 1946);
	  COL_VERTEX(-716, 717, 1946);
	  COL_VERTEX(-613, 614, -37);
	  COL_VERTEX(614, 614, 1946);
	  COL_VERTEX(614, 717, 1946);
	  COL_VERTEX(717, 717, -48);
	  COL_VERTEX(410, 819, 2560);
	  COL_VERTEX(410, 1536, -1740);
	  COL_VERTEX(512, 1536, -1740);
	  COL_VERTEX(307, 1536, -1842);
	  COL_VERTEX(-306, 1536, -1842);
	  COL_VERTEX(307, 1536, -1945);
	  COL_VERTEX(-40, 1024, 3482);
	  COL_VERTEX(102, 1024, 2970);
	  COL_VERTEX(41, 1126, 3482);
	  COL_VERTEX(-101, 717, 3072);
	  COL_VERTEX(-101, -101, 2662);
	  COL_VERTEX(102, 717, 3072);
	  COL_VERTEX(102, 922, 2867);
	  COL_VERTEX(307, 819, 2560);
	  COL_VERTEX(717, 0, 1946);
	  COL_VERTEX(0, -511, 2048);
	  COL_VERTEX(0, -306, -1637);
	  COL_VERTEX(717, 0, -921);
	  COL_VERTEX(410, 307, 2560);
	  COL_VERTEX(614, 1229, -1330);
	  COL_VERTEX(-409, 1229, -1709);
	  COL_VERTEX(-306, 1536, -1945);
	  COL_VERTEX(-511, 1536, -1740);
	  COL_VERTEX(-409, 1536, -1740);
	  COL_VERTEX(-102, -306, -1637);
	  COL_VERTEX(307, 717, -1945);
	  COL_VERTEX(-306, 717, -1945);
	  COL_VERTEX(-101, 922, 2867);
	  COL_VERTEX(-101, 1024, 2970);
	  COL_VERTEX(-40, 1126, 3482);
	  COL_VERTEX(-101, 922, 2970);
	  COL_VERTEX(614, 614, -37);
	  COL_VERTEX(102, 819, 2867);
	  COL_VERTEX(-306, 614, 2560);
	  COL_VERTEX(-409, 819, 2560);
	  COL_VERTEX(-409, 307, 2560);
	  COL_VERTEX(-716, 0, -921);
	  COL_VERTEX(0, -511, -921);
	  COL_VERTEX(-511, 717, -1740);
	  COL_VERTEX(614, 1229, -101);
	  COL_VERTEX(614, 1331, -1330);
	  COL_VERTEX(-613, 614, 1946);
	  COL_VERTEX(307, 614, 2560);
	  COL_VERTEX(717, 717, 1946);
	  COL_VERTEX(307, 1229, -1811);
	  COL_VERTEX(410, 1229, -1709);
	  COL_VERTEX(-306, 1229, -1812);
	  COL_VERTEX(41, 1024, 3482);
	  COL_VERTEX(102, -101, 2662);
	  COL_VERTEX(-101, 819, 2867);
	  COL_VERTEX(512, 717, -1740);
	  COL_VERTEX(-634, 1126, -1310);
	  COL_VERTEX(635, 1126, -1310);
	  COL_VERTEX(-613, 1229, -1330);
	  COL_VERTEX(-716, 0, 1946);
	  COL_TRI_INIT(SURFACE_DEFAULT, 140);
	  COL_TRI(2, 5, 11);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(1, 4, 5);
	  COL_TRI(4, 6, 5);
	  COL_TRI(6, 4, 7);
	  COL_TRI(4, 8, 9);
	  COL_TRI(4, 9, 10);
	  COL_TRI(11, 5, 6);
	  COL_TRI(11, 6, 12);
	  COL_TRI(6, 7, 12);
	  COL_TRI(8, 13, 63);
	  COL_TRI(8, 3, 13);
	  COL_TRI(14, 8, 63);
	  COL_TRI(13, 15, 64);
	  COL_TRI(13, 64, 63);
	  COL_TRI(15, 13, 23);
	  COL_TRI(14, 63, 64);
	  COL_TRI(0, 16, 3);
	  COL_TRI(16, 23, 3);
	  COL_TRI(17, 18, 19);
	  COL_TRI(17, 65, 18);
	  COL_TRI(18, 0, 2);
	  COL_TRI(19, 18, 2);
	  COL_TRI(18, 65, 20);
	  COL_TRI(18, 20, 0);
	  COL_TRI(0, 20, 16);
	  COL_TRI(20, 55, 16);
	  COL_TRI(17, 57, 65);
	  COL_TRI(17, 19, 58);
	  COL_TRI(21, 16, 55);
	  COL_TRI(21, 22, 16);
	  COL_TRI(22, 21, 66);
	  COL_TRI(23, 16, 67);
	  COL_TRI(16, 22, 67);
	  COL_TRI(15, 26, 25);
	  COL_TRI(22, 66, 37);
	  COL_TRI(24, 22, 37);
	  COL_TRI(24, 67, 22);
	  COL_TRI(15, 25, 64);
	  COL_TRI(25, 43, 64);
	  COL_TRI(26, 27, 25);
	  COL_TRI(27, 68, 69);
	  COL_TRI(26, 29, 27);
	  COL_TRI(27, 69, 25);
	  COL_TRI(28, 68, 27);
	  COL_TRI(29, 28, 27);
	  COL_TRI(25, 69, 43);
	  COL_TRI(28, 70, 68);
	  COL_TRI(29, 45, 28);
	  COL_TRI(30, 32, 53);
	  COL_TRI(30, 71, 32);
	  COL_TRI(31, 32, 35);
	  COL_TRI(32, 71, 35);
	  COL_TRI(33, 35, 71);
	  COL_TRI(33, 71, 30);
	  COL_TRI(34, 72, 35);
	  COL_TRI(34, 35, 33);
	  COL_TRI(35, 72, 42);
	  COL_TRI(33, 30, 53);
	  COL_TRI(38, 41, 23);
	  COL_TRI(24, 36, 31);
	  COL_TRI(24, 37, 36);
	  COL_TRI(36, 52, 31);
	  COL_TRI(36, 51, 52);
	  COL_TRI(37, 56, 36);
	  COL_TRI(36, 73, 51);
	  COL_TRI(36, 56, 73);
	  COL_TRI(31, 35, 24);
	  COL_TRI(37, 66, 56);
	  COL_TRI(15, 23, 41);
	  COL_TRI(42, 38, 24);
	  COL_TRI(38, 39, 61);
	  COL_TRI(39, 38, 72);
	  COL_TRI(38, 42, 72);
	  COL_TRI(38, 61, 41);
	  COL_TRI(38, 23, 67);
	  COL_TRI(40, 74, 41);
	  COL_TRI(15, 41, 74);
	  COL_TRI(41, 61, 40);
	  COL_TRI(35, 42, 24);
	  COL_TRI(38, 67, 24);
	  COL_TRI(43, 75, 76);
	  COL_TRI(43, 77, 75);
	  COL_TRI(44, 77, 43);
	  COL_TRI(44, 43, 69);
	  COL_TRI(44, 69, 68);
	  COL_TRI(44, 68, 70);
	  COL_TRI(49, 50, 29);
	  COL_TRI(45, 46, 47);
	  COL_TRI(46, 12, 47);
	  COL_TRI(46, 11, 12);
	  COL_TRI(12, 44, 47);
	  COL_TRI(12, 77, 44);
	  COL_TRI(45, 47, 28);
	  COL_TRI(47, 70, 28);
	  COL_TRI(47, 44, 70);
	  COL_TRI(40, 48, 49);
	  COL_TRI(48, 50, 49);
	  COL_TRI(50, 45, 29);
	  COL_TRI(51, 73, 57);
	  COL_TRI(51, 58, 52);
	  COL_TRI(51, 17, 58);
	  COL_TRI(51, 57, 17);
	  COL_TRI(52, 54, 53);
	  COL_TRI(53, 31, 52);
	  COL_TRI(53, 32, 31);
	  COL_TRI(55, 65, 21);
	  COL_TRI(33, 53, 54);
	  COL_TRI(39, 72, 34);
	  COL_TRI(54, 52, 58);
	  COL_TRI(55, 20, 65);
	  COL_TRI(56, 57, 73);
	  COL_TRI(57, 66, 21);
	  COL_TRI(57, 21, 65);
	  COL_TRI(56, 66, 57);
	  COL_TRI(49, 74, 40);
	  COL_TRI(48, 40, 61);
	  COL_TRI(58, 33, 52);
	  COL_TRI(58, 59, 33);
	  COL_TRI(58, 19, 78);
	  COL_TRI(34, 59, 78);
	  COL_TRI(59, 34, 33);
	  COL_TRI(34, 78, 39);
	  COL_TRI(60, 61, 78);
	  COL_TRI(61, 39, 78);
	  COL_TRI(19, 2, 78);
	  COL_TRI(2, 60, 78);
	  COL_TRI(58, 78, 59);
	  COL_TRI(60, 2, 11);
	  COL_TRI(60, 62, 48);
	  COL_TRI(62, 60, 11);
	  COL_TRI(48, 61, 60);
	  COL_TRI(48, 62, 50);
	  COL_TRI(45, 50, 46);
	  COL_TRI(50, 62, 46);
	  COL_TRI(46, 62, 11);
	  COL_TRI(15, 74, 26);
	  COL_TRI(26, 74, 49);
	  COL_TRI(26, 49, 29);
	  COL_TRI_STOP();
	  COL_END();
	}

	var jrb = [
	  jrb_seg7_area_1_collision,
	  jrb_seg7_area_2_collision,
	  jrb_seg7_collision_pillar_base,
	  jrb_seg7_collision_floating_platform,
	  jrb_seg7_collision_rock_solid,
	  jrb_seg7_collision_floating_box,
	  jrb_seg7_collision_0700D1DC,
	  jrb_seg7_collision_in_sunken_ship_3
	];

	function lll_seg7_area_1_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x20F);
	  COL_VERTEX(2775, 1280, 4567);
	  COL_VERTEX(2816, 1280, 4608);
	  COL_VERTEX(5888, 1280, 4608);
	  COL_VERTEX(2775, 1280, 8192);
	  COL_VERTEX(2816, 1280, 8192);
	  COL_VERTEX(2816, 563, 4608);
	  COL_VERTEX(4352, 563, 4608);
	  COL_VERTEX(2816, 563, 5504);
	  COL_VERTEX(5888, 0, 4608);
	  COL_VERTEX(4352, 0, 4608);
	  COL_VERTEX(5888, 1280, 4567);
	  COL_VERTEX(5888, 0, 4567);
	  COL_VERTEX(2816, 256, 7552);
	  COL_VERTEX(2816, 256, 8192);
	  COL_VERTEX(-153, 486, 6093);
	  COL_VERTEX(-76, 563, 6093);
	  COL_VERTEX(-229, 486, 6246);
	  COL_VERTEX(-153, 154, 6093);
	  COL_VERTEX(154, 154, 6093);
	  COL_VERTEX(230, 486, 6093);
	  COL_VERTEX(154, 486, 6093);
	  COL_VERTEX(154, 486, 6246);
	  COL_VERTEX(77, 563, 6246);
	  COL_VERTEX(77, 563, 6093);
	  COL_VERTEX(-76, 640, 6246);
	  COL_VERTEX(77, 640, 6093);
	  COL_VERTEX(-229, 154, 6093);
	  COL_VERTEX(-229, 486, 6093);
	  COL_VERTEX(-76, 640, 6093);
	  COL_VERTEX(640, 0, 384);
	  COL_VERTEX(640, 0, -383);
	  COL_VERTEX(186, 512, -107);
	  COL_VERTEX(325, 282, -210);
	  COL_VERTEX(186, 512, 108);
	  COL_VERTEX(335, 282, 194);
	  COL_VERTEX(0, 0, 768);
	  COL_VERTEX(0, 282, 387);
	  COL_VERTEX(0, 0, -767);
	  COL_VERTEX(-324, 282, -210);
	  COL_VERTEX(-639, 0, -383);
	  COL_VERTEX(0, 282, -386);
	  COL_VERTEX(-639, 0, 384);
	  COL_VERTEX(-334, 282, 194);
	  COL_VERTEX(-185, 512, 108);
	  COL_VERTEX(0, 512, 215);
	  COL_VERTEX(-185, 512, -107);
	  COL_VERTEX(0, 512, -214);
	  COL_VERTEX(0, 102, -214);
	  COL_VERTEX(-3327, 10, 3584);
	  COL_VERTEX(-3071, 10, 3584);
	  COL_VERTEX(-3071, 10, 3328);
	  COL_VERTEX(-3327, 10, 3328);
	  COL_VERTEX(2775, 0, 4567);
	  COL_VERTEX(-153, 154, 6246);
	  COL_VERTEX(-153, 486, 6246);
	  COL_VERTEX(-229, 154, 6246);
	  COL_VERTEX(-76, 563, 6246);
	  COL_VERTEX(154, 154, 6246);
	  COL_VERTEX(230, 154, 6093);
	  COL_VERTEX(230, 486, 6246);
	  COL_VERTEX(230, 154, 6246);
	  COL_VERTEX(77, 640, 6246);
	  COL_VERTEX(-185, 102, -107);
	  COL_VERTEX(-185, 102, 108);
	  COL_VERTEX(0, 102, 215);
	  COL_VERTEX(186, 102, 108);
	  COL_VERTEX(186, 102, -107);
	  COL_VERTEX(-3071, 307, 3584);
	  COL_VERTEX(-3071, 307, 3328);
	  COL_VERTEX(-3327, 307, 3584);
	  COL_VERTEX(-3327, 307, 3328);
	  COL_VERTEX(2775, 0, 8192);
	  COL_VERTEX(-2318, 0, 134);
	  COL_VERTEX(0, 0, 8192);
	  COL_VERTEX(0, 0, -8191);
	  COL_VERTEX(-2805, 0, 292);
	  COL_VERTEX(-8191, 0, 0);
	  COL_VERTEX(-1844, 0, 1595);
	  COL_VERTEX(8192, 0, 8192);
	  COL_VERTEX(-5637, 0, 4982);
	  COL_VERTEX(-2331, 0, 1753);
	  COL_VERTEX(-5222, 0, 7040);
	  COL_VERTEX(-5887, 0, 7424);
	  COL_VERTEX(-5222, 0, 6272);
	  COL_VERTEX(-8191, 0, 8192);
	  COL_VERTEX(8192, 0, 0);
	  COL_VERTEX(6656, 0, -2303);
	  COL_VERTEX(7321, 0, -2687);
	  COL_VERTEX(-2053, 0, -2429);
	  COL_VERTEX(-5871, 0, -6578);
	  COL_VERTEX(-5637, 0, -7037);
	  COL_VERTEX(-6151, 0, -7175);
	  COL_VERTEX(5954, 0, -7301);
	  COL_VERTEX(5991, 0, -2687);
	  COL_VERTEX(6656, 0, -3839);
	  COL_VERTEX(5991, 0, -3455);
	  COL_VERTEX(8192, 0, -8191);
	  COL_VERTEX(7040, 0, -6215);
	  COL_VERTEX(6678, 0, -5853);
	  COL_VERTEX(-6552, 0, 7040);
	  COL_VERTEX(-6552, 0, 6272);
	  COL_VERTEX(-5887, 0, 5888);
	  COL_VERTEX(-7042, 0, 3578);
	  COL_VERTEX(-3458, 0, -1025);
	  COL_VERTEX(-3012, 0, -1282);
	  COL_VERTEX(-3081, 0, -1539);
	  COL_VERTEX(-3012, 0, -1796);
	  COL_VERTEX(-2824, 0, -1984);
	  COL_VERTEX(-2567, 0, -2053);
	  COL_VERTEX(-2287, 0, -1970);
	  COL_VERTEX(-7179, 0, 4092);
	  COL_VERTEX(-3595, 0, -1539);
	  COL_VERTEX(-7042, 0, -5633);
	  COL_VERTEX(-6596, 0, 4349);
	  COL_VERTEX(-6665, 0, 4092);
	  COL_VERTEX(-6408, 0, -6592);
	  COL_VERTEX(-6151, 0, -6661);
	  COL_VERTEX(-3458, 0, -2053);
	  COL_VERTEX(-3081, 0, -2429);
	  COL_VERTEX(-2567, 0, -2567);
	  COL_VERTEX(-7179, 0, -6147);
	  COL_VERTEX(-6665, 0, -7037);
	  COL_VERTEX(-7042, 0, -6661);
	  COL_VERTEX(7321, 0, -3455);
	  COL_VERTEX(-8191, 0, -8191);
	  COL_VERTEX(5592, 0, -6939);
	  COL_VERTEX(-7042, 0, 4606);
	  COL_VERTEX(-6665, 0, 4982);
	  COL_VERTEX(-6151, 0, 5120);
	  COL_VERTEX(-6151, 0, 4606);
	  COL_VERTEX(-6408, 0, 4537);
	  COL_VERTEX(-6596, 0, -6404);
	  COL_VERTEX(-6665, 0, -6147);
	  COL_VERTEX(-6596, 0, -5890);
	  COL_VERTEX(-127, 0, -1919);
	  COL_VERTEX(-127, 307, -2175);
	  COL_VERTEX(-127, 0, -2175);
	  COL_VERTEX(128, 307, -2175);
	  COL_VERTEX(128, 0, -2175);
	  COL_VERTEX(128, 307, -1919);
	  COL_VERTEX(128, 0, -1919);
	  COL_VERTEX(-127, 307, -1919);
	  COL_VERTEX(-4607, 0, -1023);
	  COL_VERTEX(-4607, 154, -383);
	  COL_VERTEX(-4607, 0, 0);
	  COL_VERTEX(-4607, 307, -1023);
	  COL_VERTEX(-4607, 307, -639);
	  COL_VERTEX(-5631, 0, -1023);
	  COL_VERTEX(-5631, 307, -639);
	  COL_VERTEX(-5631, 307, -1023);
	  COL_VERTEX(-5631, 154, -383);
	  COL_VERTEX(-4607, 154, 0);
	  COL_VERTEX(-5631, 0, 0);
	  COL_VERTEX(-5631, 154, 0);
	  COL_VERTEX(-4095, 0, 3968);
	  COL_VERTEX(-4095, 0, 2944);
	  COL_VERTEX(-4095, 307, 2944);
	  COL_VERTEX(-4479, 307, 2944);
	  COL_VERTEX(-4735, 154, 3968);
	  COL_VERTEX(-4735, 154, 2944);
	  COL_VERTEX(-5119, 0, 2944);
	  COL_VERTEX(-5119, 0, 3968);
	  COL_VERTEX(1536, 0, 3968);
	  COL_VERTEX(2560, 0, 3968);
	  COL_VERTEX(1536, 307, 3584);
	  COL_VERTEX(2560, 307, 3584);
	  COL_VERTEX(2560, 154, 3328);
	  COL_VERTEX(1536, 154, 3328);
	  COL_VERTEX(2560, 0, 2944);
	  COL_VERTEX(1536, 0, 2944);
	  COL_VERTEX(6144, 0, 1920);
	  COL_VERTEX(6144, 0, 896);
	  COL_VERTEX(6144, 307, 896);
	  COL_VERTEX(5760, 307, 896);
	  COL_VERTEX(5504, 154, 896);
	  COL_VERTEX(5504, 154, 1920);
	  COL_VERTEX(5120, 0, 896);
	  COL_VERTEX(5120, 0, 1920);
	  COL_VERTEX(-255, 154, 6016);
	  COL_VERTEX(-255, 0, 6016);
	  COL_VERTEX(-383, 0, 6144);
	  COL_VERTEX(256, 0, 6016);
	  COL_VERTEX(384, 0, 6144);
	  COL_VERTEX(384, 154, 6144);
	  COL_VERTEX(256, 0, 4224);
	  COL_VERTEX(384, 0, 6400);
	  COL_VERTEX(256, 0, 6528);
	  COL_VERTEX(-255, 0, 6528);
	  COL_VERTEX(-1151, 154, 6528);
	  COL_VERTEX(-1151, 0, 6528);
	  COL_VERTEX(640, 0, 6400);
	  COL_VERTEX(-5375, 307, -3071);
	  COL_VERTEX(-5375, 0, -3071);
	  COL_VERTEX(-5503, 0, -2943);
	  COL_VERTEX(-4863, 0, -3071);
	  COL_VERTEX(-4735, 0, -2943);
	  COL_VERTEX(-4735, 0, -1151);
	  COL_VERTEX(-5375, 0, -1023);
	  COL_VERTEX(-5503, 0, -1151);
	  COL_VERTEX(-2559, 0, 4224);
	  COL_VERTEX(-3839, 0, 2688);
	  COL_VERTEX(-2559, 0, 2688);
	  COL_VERTEX(-3071, 307, 2688);
	  COL_VERTEX(-3839, 0, 4224);
	  COL_VERTEX(-3839, 307, 4224);
	  COL_VERTEX(-3327, 307, 4224);
	  COL_VERTEX(-2559, 0, 3840);
	  COL_VERTEX(-2380, 410, 3840);
	  COL_VERTEX(-2303, 0, 3840);
	  COL_VERTEX(-2303, 307, 3840);
	  COL_VERTEX(-2559, 307, 3968);
	  COL_VERTEX(-2303, 307, 3328);
	  COL_VERTEX(-2380, 410, 3328);
	  COL_VERTEX(-2303, 0, 3328);
	  COL_VERTEX(-2559, 0, 3328);
	  COL_VERTEX(-2559, 307, 3456);
	  COL_VERTEX(-1279, 307, 3840);
	  COL_VERTEX(-1458, 410, 3840);
	  COL_VERTEX(-1535, 0, 3840);
	  COL_VERTEX(-1535, 0, 3968);
	  COL_VERTEX(-1535, 0, 3456);
	  COL_VERTEX(-1535, 307, 3456);
	  COL_VERTEX(-1458, 410, 3328);
	  COL_VERTEX(-1279, 0, 3456);
	  COL_VERTEX(-1023, 307, 3328);
	  COL_VERTEX(-1279, 307, 3328);
	  COL_VERTEX(-1279, 0, 3968);
	  COL_VERTEX(-1535, 307, 3968);
	  COL_VERTEX(-1023, 0, 4096);
	  COL_VERTEX(-1279, 0, 3328);
	  COL_VERTEX(-1023, 0, 3328);
	  COL_VERTEX(1280, 0, 3456);
	  COL_VERTEX(1024, 0, 3328);
	  COL_VERTEX(1280, 0, 3968);
	  COL_VERTEX(1024, 0, 4096);
	  COL_VERTEX(6400, 0, 1152);
	  COL_VERTEX(6912, 0, 640);
	  COL_VERTEX(6912, 307, 640);
	  COL_VERTEX(7936, 0, 1152);
	  COL_VERTEX(7424, 0, 640);
	  COL_VERTEX(7936, 0, 1664);
	  COL_VERTEX(7424, 0, 2176);
	  COL_VERTEX(6912, 0, 2176);
	  COL_VERTEX(6400, 0, 1664);
	  COL_VERTEX(4864, 0, 0);
	  COL_VERTEX(4608, 0, -767);
	  COL_VERTEX(4608, 154, -767);
	  COL_VERTEX(5248, 154, -1279);
	  COL_VERTEX(4992, 154, -895);
	  COL_VERTEX(4992, 0, -895);
	  COL_VERTEX(4992, 0, -767);
	  COL_VERTEX(5632, 0, -1151);
	  COL_VERTEX(5120, 0, -383);
	  COL_VERTEX(5888, 154, 128);
	  COL_VERTEX(5504, 154, 128);
	  COL_VERTEX(5248, 0, 384);
	  COL_VERTEX(5504, 0, 128);
	  COL_VERTEX(4608, 0, -1151);
	  COL_VERTEX(5248, 0, -1279);
	  COL_VERTEX(5632, 154, -1663);
	  COL_VERTEX(5632, 0, -1663);
	  COL_VERTEX(4352, 0, -2047);
	  COL_VERTEX(5248, 154, 384);
	  COL_VERTEX(5504, 0, -383);
	  COL_VERTEX(5888, 0, 128);
	  COL_VERTEX(4096, 0, 384);
	  COL_VERTEX(5248, 0, -1535);
	  COL_VERTEX(4352, 154, -2047);
	  COL_VERTEX(4096, 0, -2047);
	  COL_VERTEX(5504, 0, 640);
	  COL_VERTEX(4096, 0, 768);
	  COL_VERTEX(5248, 0, 0);
	  COL_VERTEX(4480, 0, -1663);
	  COL_VERTEX(4096, 0, -1663);
	  COL_VERTEX(2688, 0, -5247);
	  COL_VERTEX(2688, 0, -6015);
	  COL_VERTEX(3072, 0, -6399);
	  COL_VERTEX(3072, 307, -6399);
	  COL_VERTEX(4608, 0, -6399);
	  COL_VERTEX(4992, 0, -6015);
	  COL_VERTEX(4992, 0, -5247);
	  COL_VERTEX(4608, 0, -4863);
	  COL_VERTEX(3072, 0, -4863);
	  COL_VERTEX(-3839, 307, 3328);
	  COL_VERTEX(6016, 0, 7552);
	  COL_VERTEX(6272, 512, 7552);
	  COL_VERTEX(6656, 153, 7552);
	  COL_VERTEX(6912, 0, 7552);
	  COL_VERTEX(6016, 0, 7040);
	  COL_VERTEX(6912, 0, 7040);
	  COL_VERTEX(6656, 153, 7040);
	  COL_VERTEX(3072, 256, 7552);
	  COL_VERTEX(3328, 0, 7552);
	  COL_VERTEX(3328, 256, 7552);
	  COL_VERTEX(3328, 0, 8192);
	  COL_VERTEX(2816, 0, 8192);
	  COL_VERTEX(2816, 0, 4608);
	  COL_VERTEX(3712, 563, 4992);
	  COL_VERTEX(4352, 0, 4992);
	  COL_VERTEX(3712, 0, 4992);
	  COL_VERTEX(3072, 563, 5504);
	  COL_VERTEX(3712, 563, 5504);
	  COL_VERTEX(-767, 0, -5055);
	  COL_VERTEX(768, 0, -5055);
	  COL_VERTEX(-767, 307, -3647);
	  COL_VERTEX(768, 0, -3647);
	  COL_VERTEX(-767, 0, -3647);
	  COL_VERTEX(384, 0, -6207);
	  COL_VERTEX(-383, 768, -7231);
	  COL_VERTEX(384, 768, -6207);
	  COL_VERTEX(-511, 0, -6335);
	  COL_VERTEX(-511, 768, -6335);
	  COL_VERTEX(512, 0, -7103);
	  COL_VERTEX(512, 768, -7103);
	  COL_VERTEX(-383, 0, -7231);
	  COL_VERTEX(-4095, 154, 6528);
	  COL_VERTEX(-3583, 154, 6528);
	  COL_VERTEX(-3583, 0, 6528);
	  COL_VERTEX(-2303, 0, 6528);
	  COL_VERTEX(-2303, 154, 6016);
	  COL_VERTEX(-3583, 0, 6016);
	  COL_VERTEX(-4095, 0, 6016);
	  COL_VERTEX(-4095, 0, 6528);
	  COL_VERTEX(256, 154, 4096);
	  COL_VERTEX(-255, 230, 4224);
	  COL_VERTEX(256, 154, 4224);
	  COL_VERTEX(-255, 154, 4224);
	  COL_VERTEX(-1663, 0, 6016);
	  COL_VERTEX(-1663, 154, 6528);
	  COL_VERTEX(-4607, 154, 492);
	  COL_VERTEX(-4115, 154, 492);
	  COL_VERTEX(-4115, 154, 0);
	  COL_VERTEX(1280, 154, 6656);
	  COL_VERTEX(1280, 0, 6656);
	  COL_VERTEX(896, 154, 5760);
	  COL_VERTEX(1536, 0, 6400);
	  COL_VERTEX(1536, 0, 6016);
	  COL_VERTEX(896, 154, 6656);
	  COL_VERTEX(640, 0, 6144);
	  COL_VERTEX(640, 154, 6144);
	  COL_VERTEX(640, 0, 6016);
	  COL_VERTEX(896, 0, 5760);
	  COL_VERTEX(1280, 0, 5760);
	  COL_VERTEX(-5887, 154, 6224);
	  COL_VERTEX(-5513, 154, 6872);
	  COL_VERTEX(7030, 154, -3287);
	  COL_VERTEX(6656, 154, -3503);
	  COL_VERTEX(7030, 154, -2855);
	  COL_VERTEX(6282, 154, -3287);
	  COL_VERTEX(-2759, 166, 435);
	  COL_VERTEX(-2722, 403, 550);
	  COL_VERTEX(-2667, 554, 718);
	  COL_VERTEX(-2568, 640, 1023);
	  COL_VERTEX(-2469, 554, 1327);
	  COL_VERTEX(-2408, 376, 1515);
	  COL_VERTEX(-2377, 166, 1611);
	  COL_VERTEX(-2081, 640, 864);
	  COL_VERTEX(-7179, 129, 4092);
	  COL_VERTEX(-6665, 257, 4982);
	  COL_VERTEX(-7042, 257, 4606);
	  COL_VERTEX(-6151, 129, 5120);
	  COL_VERTEX(-6151, 129, -7175);
	  COL_VERTEX(-7042, 257, -6661);
	  COL_VERTEX(-6665, 257, -7037);
	  COL_VERTEX(-7179, 129, -6147);
	  COL_VERTEX(-2567, 129, -2567);
	  COL_VERTEX(-3458, 257, -2053);
	  COL_VERTEX(-3081, 257, -2429);
	  COL_VERTEX(-3595, 129, -1539);
	  COL_VERTEX(5698, 166, -6833);
	  COL_VERTEX(5784, 403, -6748);
	  COL_VERTEX(5909, 554, -6622);
	  COL_VERTEX(6135, 640, -6396);
	  COL_VERTEX(6362, 554, -6170);
	  COL_VERTEX(6501, 376, -6030);
	  COL_VERTEX(6572, 166, -5959);
	  COL_VERTEX(6497, 640, -6758);
	  COL_VERTEX(-4095, 307, 3968);
	  COL_VERTEX(-4479, 307, 3968);
	  COL_VERTEX(-5119, 154, 3968);
	  COL_VERTEX(-5119, 154, 2944);
	  COL_VERTEX(1536, 307, 3968);
	  COL_VERTEX(1280, 307, 3584);
	  COL_VERTEX(1280, 307, 3840);
	  COL_VERTEX(1536, 154, 2944);
	  COL_VERTEX(1536, 307, 3840);
	  COL_VERTEX(2560, 154, 2944);
	  COL_VERTEX(2560, 307, 3968);
	  COL_VERTEX(5760, 307, 1920);
	  COL_VERTEX(6144, 307, 1920);
	  COL_VERTEX(5120, 154, 1920);
	  COL_VERTEX(5120, 154, 896);
	  COL_VERTEX(256, 154, 6016);
	  COL_VERTEX(-383, 154, 6144);
	  COL_VERTEX(256, 154, 6528);
	  COL_VERTEX(384, 154, 6400);
	  COL_VERTEX(-255, 154, 6528);
	  COL_VERTEX(-383, 154, 6400);
	  COL_VERTEX(-1151, 154, 6016);
	  COL_VERTEX(-1151, 0, 6016);
	  COL_VERTEX(-255, 0, 4224);
	  COL_VERTEX(256, 230, 4224);
	  COL_VERTEX(-255, 230, 4096);
	  COL_VERTEX(-383, 0, 6400);
	  COL_VERTEX(640, 154, 6016);
	  COL_VERTEX(-5503, 307, -1151);
	  COL_VERTEX(-5375, 307, -1023);
	  COL_VERTEX(-5503, 307, -2943);
	  COL_VERTEX(-4863, 307, -1023);
	  COL_VERTEX(-4735, 307, -2943);
	  COL_VERTEX(-4863, 307, -3071);
	  COL_VERTEX(-4735, 307, -1151);
	  COL_VERTEX(640, 154, 6400);
	  COL_VERTEX(-4863, 0, -1023);
	  COL_VERTEX(-2559, 307, 4224);
	  COL_VERTEX(-2559, 307, 2688);
	  COL_VERTEX(-3839, 307, 2688);
	  COL_VERTEX(-3071, 307, 4224);
	  COL_VERTEX(-3327, 307, 2688);
	  COL_VERTEX(-2559, 307, 3840);
	  COL_VERTEX(-2303, 307, 3968);
	  COL_VERTEX(-2380, 410, 3968);
	  COL_VERTEX(-2303, 0, 3968);
	  COL_VERTEX(-2559, 0, 3968);
	  COL_VERTEX(-2380, 410, 3456);
	  COL_VERTEX(-2303, 307, 3456);
	  COL_VERTEX(-2559, 307, 3328);
	  COL_VERTEX(-2303, 0, 3456);
	  COL_VERTEX(-2559, 0, 3456);
	  COL_VERTEX(-1458, 410, 3968);
	  COL_VERTEX(-1535, 307, 3840);
	  COL_VERTEX(-1279, 0, 3840);
	  COL_VERTEX(-1279, 307, 3968);
	  COL_VERTEX(-1535, 307, 3328);
	  COL_VERTEX(-1279, 307, 3456);
	  COL_VERTEX(-1458, 410, 3456);
	  COL_VERTEX(-1535, 0, 3328);
	  COL_VERTEX(-1023, 307, 4096);
	  COL_VERTEX(1280, 307, 3456);
	  COL_VERTEX(1280, 307, 3968);
	  COL_VERTEX(1024, 307, 4096);
	  COL_VERTEX(1024, 307, 3328);
	  COL_VERTEX(6400, 307, 1152);
	  COL_VERTEX(7424, 307, 640);
	  COL_VERTEX(7936, 307, 1152);
	  COL_VERTEX(6912, 307, 2176);
	  COL_VERTEX(7424, 307, 2176);
	  COL_VERTEX(7936, 307, 1664);
	  COL_VERTEX(6400, 307, 1664);
	  COL_VERTEX(4864, 154, 0);
	  COL_VERTEX(4608, 154, -1151);
	  COL_VERTEX(5248, 154, 0);
	  COL_VERTEX(5120, 154, -383);
	  COL_VERTEX(4992, 154, -767);
	  COL_VERTEX(5632, 154, -1151);
	  COL_VERTEX(5504, 154, -383);
	  COL_VERTEX(5248, 154, -1535);
	  COL_VERTEX(5504, 154, 640);
	  COL_VERTEX(4096, 154, 384);
	  COL_VERTEX(4096, 154, 768);
	  COL_VERTEX(4480, 154, -1663);
	  COL_VERTEX(4096, 154, -1663);
	  COL_VERTEX(4096, 154, -2047);
	  COL_VERTEX(2688, 307, -6015);
	  COL_VERTEX(4608, 307, -6399);
	  COL_VERTEX(2688, 307, -5247);
	  COL_VERTEX(3072, 307, -4863);
	  COL_VERTEX(4992, 307, -6015);
	  COL_VERTEX(4992, 307, -5247);
	  COL_VERTEX(4608, 307, -4863);
	  COL_VERTEX(-4095, 307, 3584);
	  COL_VERTEX(-3839, 307, 3584);
	  COL_VERTEX(-4095, 307, 3328);
	  COL_VERTEX(6016, 512, 7552);
	  COL_VERTEX(6016, 512, 7040);
	  COL_VERTEX(6272, 512, 7040);
	  COL_VERTEX(6912, 154, 7552);
	  COL_VERTEX(6912, 154, 7040);
	  COL_VERTEX(3072, 0, 7552);
	  COL_VERTEX(3328, 256, 8192);
	  COL_VERTEX(4352, 563, 4992);
	  COL_VERTEX(3712, 0, 5504);
	  COL_VERTEX(3072, 0, 5504);
	  COL_VERTEX(768, 307, -5055);
	  COL_VERTEX(768, 307, -3647);
	  COL_VERTEX(-767, 307, -5055);
	  COL_VERTEX(512, 768, -6335);
	  COL_VERTEX(-383, 768, -6207);
	  COL_VERTEX(-383, 0, -6207);
	  COL_VERTEX(512, 0, -6335);
	  COL_VERTEX(-511, 0, -7103);
	  COL_VERTEX(-511, 768, -7103);
	  COL_VERTEX(384, 768, -7231);
	  COL_VERTEX(384, 0, -7231);
	  COL_VERTEX(-3583, 154, 6016);
	  COL_VERTEX(-2303, 154, 6528);
	  COL_VERTEX(-2303, 0, 6016);
	  COL_VERTEX(-4095, 154, 6016);
	  COL_VERTEX(256, 230, 4096);
	  COL_VERTEX(-255, 154, 4096);
	  COL_VERTEX(-1663, 154, 6016);
	  COL_VERTEX(-1663, 0, 6528);
	  COL_VERTEX(-4115, 0, 492);
	  COL_VERTEX(-4115, 0, 0);
	  COL_VERTEX(-4607, 0, 492);
	  COL_VERTEX(1536, 154, 6400);
	  COL_VERTEX(896, 0, 6656);
	  COL_VERTEX(1536, 154, 6016);
	  COL_VERTEX(1280, 154, 5760);
	  COL_VERTEX(-5513, 154, 6440);
	  COL_VERTEX(-5887, 154, 7088);
	  COL_VERTEX(-6261, 154, 6872);
	  COL_VERTEX(-6261, 154, 6440);
	  COL_VERTEX(6656, 154, -2639);
	  COL_VERTEX(6282, 154, -2855);
	  COL_VERTEX(-2272, 166, 276);
	  COL_VERTEX(-2235, 403, 391);
	  COL_VERTEX(-2180, 554, 560);
	  COL_VERTEX(-1982, 554, 1169);
	  COL_VERTEX(-1921, 376, 1357);
	  COL_VERTEX(-1890, 166, 1452);
	  COL_VERTEX(6060, 166, -7195);
	  COL_VERTEX(6146, 403, -7110);
	  COL_VERTEX(6271, 554, -6984);
	  COL_VERTEX(6724, 554, -6532);
	  COL_VERTEX(6863, 376, -6392);
	  COL_VERTEX(6934, 166, -6321);
	  COL_TRI_INIT(SURFACE_DEFAULT, 622);
	  COL_TRI(142, 143, 144);
	  COL_TRI(48, 49, 50);
	  COL_TRI(48, 50, 51);
	  COL_TRI(134, 135, 136);
	  COL_TRI(136, 137, 138);
	  COL_TRI(136, 135, 137);
	  COL_TRI(135, 139, 137);
	  COL_TRI(138, 137, 139);
	  COL_TRI(138, 139, 140);
	  COL_TRI(135, 141, 139);
	  COL_TRI(134, 141, 135);
	  COL_TRI(140, 139, 141);
	  COL_TRI(140, 141, 134);
	  COL_TRI(142, 145, 146);
	  COL_TRI(147, 145, 142);
	  COL_TRI(148, 143, 146);
	  COL_TRI(149, 146, 145);
	  COL_TRI(149, 148, 146);
	  COL_TRI(142, 146, 143);
	  COL_TRI(148, 150, 143);
	  COL_TRI(150, 151, 143);
	  COL_TRI(143, 151, 144);
	  COL_TRI(150, 153, 151);
	  COL_TRI(152, 153, 150);
	  COL_TRI(152, 150, 147);
	  COL_TRI(150, 148, 147);
	  COL_TRI(148, 149, 147);
	  COL_TRI(147, 149, 145);
	  COL_TRI(144, 151, 153);
	  COL_TRI(144, 153, 152);
	  COL_TRI(154, 158, 161);
	  COL_TRI(154, 377, 378);
	  COL_TRI(154, 378, 158);
	  COL_TRI(156, 378, 377);
	  COL_TRI(156, 157, 378);
	  COL_TRI(157, 158, 378);
	  COL_TRI(158, 379, 161);
	  COL_TRI(157, 159, 158);
	  COL_TRI(159, 379, 158);
	  COL_TRI(159, 157, 155);
	  COL_TRI(160, 380, 159);
	  COL_TRI(160, 159, 155);
	  COL_TRI(159, 380, 379);
	  COL_TRI(157, 156, 155);
	  COL_TRI(155, 377, 154);
	  COL_TRI(155, 156, 377);
	  COL_TRI(161, 379, 380);
	  COL_TRI(161, 380, 160);
	  COL_TRI(162, 164, 167);
	  COL_TRI(162, 167, 169);
	  COL_TRI(163, 381, 162);
	  COL_TRI(164, 382, 383);
	  COL_TRI(164, 383, 385);
	  COL_TRI(165, 164, 381);
	  COL_TRI(165, 167, 164);
	  COL_TRI(162, 381, 164);
	  COL_TRI(165, 166, 167);
	  COL_TRI(166, 384, 167);
	  COL_TRI(167, 384, 169);
	  COL_TRI(166, 386, 384);
	  COL_TRI(166, 165, 163);
	  COL_TRI(168, 386, 166);
	  COL_TRI(168, 166, 163);
	  COL_TRI(169, 384, 386);
	  COL_TRI(169, 386, 168);
	  COL_TRI(165, 381, 387);
	  COL_TRI(165, 387, 163);
	  COL_TRI(163, 387, 381);
	  COL_TRI(170, 388, 175);
	  COL_TRI(171, 389, 170);
	  COL_TRI(170, 389, 388);
	  COL_TRI(170, 175, 177);
	  COL_TRI(172, 388, 389);
	  COL_TRI(172, 173, 388);
	  COL_TRI(173, 175, 388);
	  COL_TRI(173, 174, 175);
	  COL_TRI(174, 390, 175);
	  COL_TRI(175, 390, 177);
	  COL_TRI(174, 173, 171);
	  COL_TRI(173, 172, 171);
	  COL_TRI(171, 172, 389);
	  COL_TRI(178, 394, 395);
	  COL_TRI(176, 391, 174);
	  COL_TRI(176, 174, 171);
	  COL_TRI(174, 391, 390);
	  COL_TRI(177, 390, 391);
	  COL_TRI(177, 391, 176);
	  COL_TRI(178, 325, 326);
	  COL_TRI(178, 392, 325);
	  COL_TRI(179, 178, 326);
	  COL_TRI(180, 393, 178);
	  COL_TRI(180, 178, 179);
	  COL_TRI(186, 396, 187);
	  COL_TRI(178, 395, 183);
	  COL_TRI(178, 183, 392);
	  COL_TRI(181, 183, 182);
	  COL_TRI(182, 183, 185);
	  COL_TRI(183, 395, 185);
	  COL_TRI(181, 392, 183);
	  COL_TRI(184, 392, 181);
	  COL_TRI(184, 325, 392);
	  COL_TRI(185, 395, 394);
	  COL_TRI(178, 396, 394);
	  COL_TRI(186, 394, 396);
	  COL_TRI(185, 394, 186);
	  COL_TRI(178, 397, 396);
	  COL_TRI(187, 396, 397);
	  COL_TRI(182, 339, 338);
	  COL_TRI(188, 397, 393);
	  COL_TRI(189, 403, 397);
	  COL_TRI(189, 397, 188);
	  COL_TRI(178, 393, 397);
	  COL_TRI(187, 397, 403);
	  COL_TRI(180, 398, 393);
	  COL_TRI(188, 393, 398);
	  COL_TRI(182, 183, 339);
	  COL_TRI(190, 395, 185);
	  COL_TRI(180, 399, 398);
	  COL_TRI(179, 326, 400);
	  COL_TRI(191, 405, 406);
	  COL_TRI(191, 407, 405);
	  COL_TRI(191, 406, 408);
	  COL_TRI(191, 409, 410);
	  COL_TRI(191, 411, 409);
	  COL_TRI(191, 408, 411);
	  COL_TRI(194, 409, 195);
	  COL_TRI(194, 410, 409);
	  COL_TRI(195, 409, 411);
	  COL_TRI(192, 191, 410);
	  COL_TRI(192, 410, 194);
	  COL_TRI(195, 411, 196);
	  COL_TRI(196, 411, 408);
	  COL_TRI(196, 408, 413);
	  COL_TRI(197, 406, 405);
	  COL_TRI(200, 416, 415);
	  COL_TRI(197, 405, 198);
	  COL_TRI(198, 405, 407);
	  COL_TRI(198, 407, 193);
	  COL_TRI(193, 407, 191);
	  COL_TRI(193, 191, 192);
	  COL_TRI(199, 414, 204);
	  COL_TRI(199, 204, 203);
	  COL_TRI(200, 415, 201);
	  COL_TRI(201, 415, 414);
	  COL_TRI(201, 414, 199);
	  COL_TRI(202, 414, 415);
	  COL_TRI(202, 417, 414);
	  COL_TRI(203, 204, 416);
	  COL_TRI(203, 416, 200);
	  COL_TRI(204, 418, 416);
	  COL_TRI(204, 205, 418);
	  COL_TRI(70, 68, 202);
	  COL_TRI(70, 202, 418);
	  COL_TRI(210, 422, 420);
	  COL_TRI(205, 417, 67);
	  COL_TRI(205, 67, 69);
	  COL_TRI(206, 419, 209);
	  COL_TRI(206, 209, 208);
	  COL_TRI(207, 419, 210);
	  COL_TRI(207, 209, 419);
	  COL_TRI(208, 209, 420);
	  COL_TRI(209, 421, 420);
	  COL_TRI(209, 207, 421);
	  COL_TRI(208, 420, 422);
	  COL_TRI(207, 210, 421);
	  COL_TRI(210, 420, 421);
	  COL_TRI(215, 428, 427);
	  COL_TRI(210, 423, 422);
	  COL_TRI(211, 212, 424);
	  COL_TRI(211, 424, 425);
	  COL_TRI(212, 211, 426);
	  COL_TRI(213, 211, 425);
	  COL_TRI(214, 426, 211);
	  COL_TRI(214, 211, 213);
	  COL_TRI(212, 426, 215);
	  COL_TRI(212, 215, 424);
	  COL_TRI(215, 425, 424);
	  COL_TRI(213, 425, 427);
	  COL_TRI(215, 427, 425);
	  COL_TRI(216, 217, 429);
	  COL_TRI(217, 216, 430);
	  COL_TRI(217, 227, 429);
	  COL_TRI(217, 430, 227);
	  COL_TRI(218, 430, 216);
	  COL_TRI(218, 216, 431);
	  COL_TRI(216, 429, 432);
	  COL_TRI(219, 430, 218);
	  COL_TRI(219, 227, 430);
	  COL_TRI(220, 221, 433);
	  COL_TRI(221, 220, 223);
	  COL_TRI(221, 434, 435);
	  COL_TRI(221, 223, 434);
	  COL_TRI(227, 432, 429);
	  COL_TRI(229, 436, 433);
	  COL_TRI(223, 225, 434);
	  COL_TRI(224, 434, 432);
	  COL_TRI(225, 435, 434);
	  COL_TRI(223, 434, 224);
	  COL_TRI(226, 434, 223);
	  COL_TRI(226, 432, 434);
	  COL_TRI(225, 222, 435);
	  COL_TRI(222, 221, 435);
	  COL_TRI(223, 229, 225);
	  COL_TRI(223, 224, 230);
	  COL_TRI(220, 433, 436);
	  COL_TRI(229, 222, 225);
	  COL_TRI(229, 433, 222);
	  COL_TRI(222, 433, 221);
	  COL_TRI(227, 219, 226);
	  COL_TRI(227, 226, 432);
	  COL_TRI(224, 432, 437);
	  COL_TRI(228, 432, 226);
	  COL_TRI(228, 437, 432);
	  COL_TRI(224, 438, 441);
	  COL_TRI(224, 439, 438);
	  COL_TRI(224, 440, 439);
	  COL_TRI(224, 437, 440);
	  COL_TRI(230, 224, 441);
	  COL_TRI(231, 438, 439);
	  COL_TRI(232, 438, 231);
	  COL_TRI(232, 441, 438);
	  COL_TRI(230, 441, 232);
	  COL_TRI(233, 439, 440);
	  COL_TRI(231, 439, 233);
	  COL_TRI(233, 440, 234);
	  COL_TRI(234, 440, 437);
	  COL_TRI(234, 437, 228);
	  COL_TRI(235, 442, 237);
	  COL_TRI(235, 237, 236);
	  COL_TRI(236, 237, 443);
	  COL_TRI(237, 444, 443);
	  COL_TRI(237, 445, 446);
	  COL_TRI(237, 448, 445);
	  COL_TRI(238, 444, 447);
	  COL_TRI(239, 444, 238);
	  COL_TRI(239, 443, 444);
	  COL_TRI(237, 447, 444);
	  COL_TRI(236, 443, 239);
	  COL_TRI(240, 447, 446);
	  COL_TRI(238, 447, 240);
	  COL_TRI(237, 446, 447);
	  COL_TRI(241, 446, 445);
	  COL_TRI(240, 446, 241);
	  COL_TRI(242, 445, 448);
	  COL_TRI(241, 445, 242);
	  COL_TRI(248, 247, 246);
	  COL_TRI(242, 448, 243);
	  COL_TRI(243, 448, 442);
	  COL_TRI(237, 442, 448);
	  COL_TRI(243, 442, 235);
	  COL_TRI(244, 449, 246);
	  COL_TRI(244, 246, 245);
	  COL_TRI(245, 246, 450);
	  COL_TRI(246, 449, 451);
	  COL_TRI(246, 451, 254);
	  COL_TRI(247, 450, 246);
	  COL_TRI(249, 453, 250);
	  COL_TRI(249, 248, 453);
	  COL_TRI(250, 453, 452);
	  COL_TRI(246, 453, 248);
	  COL_TRI(246, 452, 453);
	  COL_TRI(248, 454, 259);
	  COL_TRI(251, 248, 249);
	  COL_TRI(251, 454, 248);
	  COL_TRI(248, 259, 247);
	  COL_TRI(250, 452, 252);
	  COL_TRI(252, 452, 455);
	  COL_TRI(253, 455, 452);
	  COL_TRI(254, 253, 452);
	  COL_TRI(246, 254, 452);
	  COL_TRI(255, 262, 254);
	  COL_TRI(256, 254, 451);
	  COL_TRI(255, 254, 256);
	  COL_TRI(254, 262, 253);
	  COL_TRI(257, 247, 258);
	  COL_TRI(257, 450, 247);
	  COL_TRI(258, 247, 456);
	  COL_TRI(259, 456, 247);
	  COL_TRI(259, 267, 456);
	  COL_TRI(260, 259, 454);
	  COL_TRI(267, 460, 456);
	  COL_TRI(262, 457, 253);
	  COL_TRI(263, 455, 253);
	  COL_TRI(264, 253, 457);
	  COL_TRI(263, 253, 264);
	  COL_TRI(262, 458, 459);
	  COL_TRI(262, 459, 457);
	  COL_TRI(265, 262, 255);
	  COL_TRI(265, 458, 262);
	  COL_TRI(266, 456, 460);
	  COL_TRI(258, 456, 266);
	  COL_TRI(261, 259, 260);
	  COL_TRI(267, 461, 460);
	  COL_TRI(267, 462, 461);
	  COL_TRI(268, 267, 261);
	  COL_TRI(268, 462, 267);
	  COL_TRI(261, 267, 259);
	  COL_TRI(260, 454, 251);
	  COL_TRI(252, 455, 263);
	  COL_TRI(245, 450, 257);
	  COL_TRI(269, 457, 459);
	  COL_TRI(264, 457, 269);
	  COL_TRI(270, 459, 458);
	  COL_TRI(269, 459, 270);
	  COL_TRI(270, 458, 265);
	  COL_TRI(271, 451, 449);
	  COL_TRI(256, 451, 271);
	  COL_TRI(271, 449, 244);
	  COL_TRI(272, 460, 461);
	  COL_TRI(266, 460, 272);
	  COL_TRI(272, 461, 273);
	  COL_TRI(273, 461, 462);
	  COL_TRI(273, 462, 268);
	  COL_TRI(274, 463, 275);
	  COL_TRI(275, 463, 277);
	  COL_TRI(275, 277, 276);
	  COL_TRI(276, 277, 464);
	  COL_TRI(277, 463, 465);
	  COL_TRI(277, 465, 466);
	  COL_TRI(274, 465, 463);
	  COL_TRI(277, 467, 464);
	  COL_TRI(277, 468, 467);
	  COL_TRI(277, 469, 468);
	  COL_TRI(276, 464, 278);
	  COL_TRI(278, 467, 279);
	  COL_TRI(278, 464, 467);
	  COL_TRI(279, 467, 468);
	  COL_TRI(280, 468, 469);
	  COL_TRI(279, 468, 280);
	  COL_TRI(277, 466, 469);
	  COL_TRI(281, 469, 466);
	  COL_TRI(280, 469, 281);
	  COL_TRI(281, 466, 282);
	  COL_TRI(282, 466, 465);
	  COL_TRI(282, 465, 274);
	  COL_TRI(283, 470, 471);
	  COL_TRI(283, 472, 470);
	  COL_TRI(284, 473, 474);
	  COL_TRI(284, 474, 288);
	  COL_TRI(285, 473, 284);
	  COL_TRI(286, 285, 284);
	  COL_TRI(287, 286, 284);
	  COL_TRI(291, 292, 478);
	  COL_TRI(288, 474, 475);
	  COL_TRI(288, 290, 289);
	  COL_TRI(288, 475, 290);
	  COL_TRI(289, 477, 476);
	  COL_TRI(289, 476, 287);
	  COL_TRI(290, 477, 289);
	  COL_TRI(287, 476, 286);
	  COL_TRI(291, 293, 292);
	  COL_TRI(296, 6, 9);
	  COL_TRI(292, 293, 479);
	  COL_TRI(293, 12, 13);
	  COL_TRI(293, 13, 479);
	  COL_TRI(292, 479, 294);
	  COL_TRI(294, 13, 295);
	  COL_TRI(294, 479, 13);
	  COL_TRI(295, 12, 296);
	  COL_TRI(295, 13, 12);
	  COL_TRI(9, 6, 480);
	  COL_TRI(9, 480, 298);
	  COL_TRI(7, 5, 296);
	  COL_TRI(6, 5, 7);
	  COL_TRI(297, 480, 6);
	  COL_TRI(297, 6, 7);
	  COL_TRI(296, 5, 6);
	  COL_TRI(298, 480, 297);
	  COL_TRI(298, 297, 299);
	  COL_TRI(7, 301, 297);
	  COL_TRI(299, 297, 301);
	  COL_TRI(299, 301, 481);
	  COL_TRI(300, 291, 478);
	  COL_TRI(300, 478, 482);
	  COL_TRI(301, 300, 482);
	  COL_TRI(7, 291, 300);
	  COL_TRI(301, 482, 481);
	  COL_TRI(307, 486, 309);
	  COL_TRI(7, 12, 291);
	  COL_TRI(12, 7, 296);
	  COL_TRI(302, 483, 303);
	  COL_TRI(303, 483, 484);
	  COL_TRI(303, 484, 305);
	  COL_TRI(304, 484, 483);
	  COL_TRI(304, 483, 485);
	  COL_TRI(302, 485, 483);
	  COL_TRI(305, 484, 304);
	  COL_TRI(305, 304, 306);
	  COL_TRI(306, 485, 302);
	  COL_TRI(306, 304, 485);
	  COL_TRI(308, 309, 486);
	  COL_TRI(308, 487, 309);
	  COL_TRI(309, 487, 488);
	  COL_TRI(308, 311, 487);
	  COL_TRI(310, 488, 487);
	  COL_TRI(310, 487, 311);
	  COL_TRI(309, 488, 307);
	  COL_TRI(307, 489, 486);
	  COL_TRI(311, 490, 310);
	  COL_TRI(311, 491, 490);
	  COL_TRI(308, 491, 311);
	  COL_TRI(312, 492, 313);
	  COL_TRI(308, 486, 313);
	  COL_TRI(308, 313, 492);
	  COL_TRI(313, 489, 312);
	  COL_TRI(313, 486, 489);
	  COL_TRI(312, 493, 492);
	  COL_TRI(308, 492, 493);
	  COL_TRI(314, 491, 308);
	  COL_TRI(308, 493, 314);
	  COL_TRI(314, 490, 491);
	  COL_TRI(315, 316, 494);
	  COL_TRI(316, 495, 319);
	  COL_TRI(317, 316, 315);
	  COL_TRI(316, 319, 494);
	  COL_TRI(318, 495, 316);
	  COL_TRI(318, 316, 317);
	  COL_TRI(319, 495, 318);
	  COL_TRI(323, 498, 401);
	  COL_TRI(319, 318, 496);
	  COL_TRI(320, 494, 319);
	  COL_TRI(320, 319, 496);
	  COL_TRI(315, 494, 497);
	  COL_TRI(321, 497, 494);
	  COL_TRI(321, 494, 320);
	  COL_TRI(317, 315, 322);
	  COL_TRI(322, 315, 497);
	  COL_TRI(322, 497, 321);
	  COL_TRI(323, 401, 325);
	  COL_TRI(328, 398, 500);
	  COL_TRI(324, 498, 402);
	  COL_TRI(324, 401, 498);
	  COL_TRI(325, 401, 324);
	  COL_TRI(325, 324, 326);
	  COL_TRI(326, 324, 402);
	  COL_TRI(326, 402, 499);
	  COL_TRI(327, 500, 398);
	  COL_TRI(327, 398, 399);
	  COL_TRI(327, 501, 328);
	  COL_TRI(327, 328, 500);
	  COL_TRI(151, 144, 504);
	  COL_TRI(189, 328, 501);
	  COL_TRI(189, 188, 328);
	  COL_TRI(328, 188, 398);
	  COL_TRI(329, 502, 330);
	  COL_TRI(330, 503, 331);
	  COL_TRI(330, 502, 503);
	  COL_TRI(331, 329, 330);
	  COL_TRI(329, 504, 502);
	  COL_TRI(331, 503, 144);
	  COL_TRI(331, 144, 151);
	  COL_TRI(331, 151, 329);
	  COL_TRI(151, 504, 329);
	  COL_TRI(332, 333, 335);
	  COL_TRI(333, 332, 337);
	  COL_TRI(334, 332, 505);
	  COL_TRI(334, 337, 332);
	  COL_TRI(335, 505, 332);
	  COL_TRI(333, 337, 506);
	  COL_TRI(336, 505, 335);
	  COL_TRI(337, 190, 506);
	  COL_TRI(337, 412, 190);
	  COL_TRI(334, 412, 337);
	  COL_TRI(190, 412, 395);
	  COL_TRI(338, 404, 340);
	  COL_TRI(340, 404, 334);
	  COL_TRI(334, 404, 412);
	  COL_TRI(342, 508, 507);
	  COL_TRI(338, 339, 404);
	  COL_TRI(339, 183, 395);
	  COL_TRI(339, 395, 412);
	  COL_TRI(340, 334, 341);
	  COL_TRI(341, 334, 508);
	  COL_TRI(334, 505, 507);
	  COL_TRI(334, 507, 508);
	  COL_TRI(341, 508, 342);
	  COL_TRI(342, 507, 336);
	  COL_TRI(336, 507, 505);
	  COL_TRI(101, 509, 83);
	  COL_TRI(83, 344, 81);
	  COL_TRI(83, 509, 344);
	  COL_TRI(343, 344, 509);
	  COL_TRI(101, 343, 509);
	  COL_TRI(343, 510, 344);
	  COL_TRI(344, 510, 82);
	  COL_TRI(81, 344, 82);
	  COL_TRI(343, 511, 510);
	  COL_TRI(82, 510, 511);
	  COL_TRI(346, 347, 345);
	  COL_TRI(82, 511, 99);
	  COL_TRI(343, 512, 511);
	  COL_TRI(99, 511, 512);
	  COL_TRI(99, 512, 100);
	  COL_TRI(100, 512, 343);
	  COL_TRI(100, 343, 101);
	  COL_TRI(345, 347, 87);
	  COL_TRI(123, 345, 87);
	  COL_TRI(94, 346, 345);
	  COL_TRI(94, 345, 123);
	  COL_TRI(87, 347, 86);
	  COL_TRI(347, 513, 86);
	  COL_TRI(346, 513, 347);
	  COL_TRI(86, 513, 514);
	  COL_TRI(346, 514, 513);
	  COL_TRI(86, 514, 93);
	  COL_TRI(93, 514, 348);
	  COL_TRI(346, 348, 514);
	  COL_TRI(93, 348, 95);
	  COL_TRI(348, 346, 94);
	  COL_TRI(95, 348, 94);
	  COL_TRI(349, 75, 80);
	  COL_TRI(349, 80, 355);
	  COL_TRI(349, 355, 354);
	  COL_TRI(351, 516, 350);
	  COL_TRI(349, 354, 353);
	  COL_TRI(349, 353, 352);
	  COL_TRI(349, 352, 351);
	  COL_TRI(349, 351, 350);
	  COL_TRI(349, 72, 75);
	  COL_TRI(350, 515, 349);
	  COL_TRI(349, 515, 72);
	  COL_TRI(350, 516, 515);
	  COL_TRI(80, 77, 520);
	  COL_TRI(351, 517, 516);
	  COL_TRI(352, 517, 351);
	  COL_TRI(352, 356, 517);
	  COL_TRI(353, 356, 352);
	  COL_TRI(353, 518, 356);
	  COL_TRI(354, 518, 353);
	  COL_TRI(354, 519, 518);
	  COL_TRI(355, 519, 354);
	  COL_TRI(355, 520, 519);
	  COL_TRI(80, 520, 355);
	  COL_TRI(102, 110, 357);
	  COL_TRI(356, 520, 77);
	  COL_TRI(77, 72, 515);
	  COL_TRI(77, 515, 516);
	  COL_TRI(77, 516, 517);
	  COL_TRI(77, 517, 356);
	  COL_TRI(356, 519, 520);
	  COL_TRI(356, 518, 519);
	  COL_TRI(102, 357, 114);
	  COL_TRI(357, 110, 126);
	  COL_TRI(357, 359, 114);
	  COL_TRI(357, 126, 359);
	  COL_TRI(358, 359, 126);
	  COL_TRI(358, 126, 127);
	  COL_TRI(359, 358, 113);
	  COL_TRI(359, 113, 114);
	  COL_TRI(358, 360, 129);
	  COL_TRI(358, 129, 130);
	  COL_TRI(358, 130, 113);
	  COL_TRI(360, 358, 127);
	  COL_TRI(360, 127, 128);
	  COL_TRI(360, 79, 129);
	  COL_TRI(360, 128, 79);
	  COL_TRI(89, 90, 361);
	  COL_TRI(90, 91, 361);
	  COL_TRI(361, 91, 121);
	  COL_TRI(361, 363, 116);
	  COL_TRI(89, 361, 116);
	  COL_TRI(361, 121, 363);
	  COL_TRI(362, 363, 121);
	  COL_TRI(362, 121, 122);
	  COL_TRI(363, 115, 116);
	  COL_TRI(363, 131, 115);
	  COL_TRI(363, 362, 131);
	  COL_TRI(362, 132, 131);
	  COL_TRI(362, 364, 132);
	  COL_TRI(364, 362, 122);
	  COL_TRI(364, 122, 120);
	  COL_TRI(364, 120, 112);
	  COL_TRI(364, 112, 133);
	  COL_TRI(364, 133, 132);
	  COL_TRI(88, 119, 365);
	  COL_TRI(109, 88, 365);
	  COL_TRI(365, 119, 118);
	  COL_TRI(365, 118, 367);
	  COL_TRI(365, 367, 108);
	  COL_TRI(109, 365, 108);
	  COL_TRI(369, 372, 371);
	  COL_TRI(366, 367, 118);
	  COL_TRI(366, 118, 117);
	  COL_TRI(367, 106, 107);
	  COL_TRI(367, 107, 108);
	  COL_TRI(367, 366, 106);
	  COL_TRI(368, 366, 117);
	  COL_TRI(366, 368, 105);
	  COL_TRI(366, 105, 106);
	  COL_TRI(368, 117, 111);
	  COL_TRI(368, 111, 103);
	  COL_TRI(368, 103, 104);
	  COL_TRI(368, 104, 105);
	  COL_TRI(369, 92, 125);
	  COL_TRI(369, 371, 370);
	  COL_TRI(369, 373, 372);
	  COL_TRI(369, 125, 98);
	  COL_TRI(369, 98, 375);
	  COL_TRI(369, 375, 374);
	  COL_TRI(369, 374, 373);
	  COL_TRI(370, 521, 369);
	  COL_TRI(369, 521, 92);
	  COL_TRI(375, 526, 525);
	  COL_TRI(370, 522, 521);
	  COL_TRI(371, 522, 370);
	  COL_TRI(371, 523, 522);
	  COL_TRI(372, 523, 371);
	  COL_TRI(372, 376, 523);
	  COL_TRI(373, 376, 372);
	  COL_TRI(373, 524, 376);
	  COL_TRI(374, 524, 373);
	  COL_TRI(374, 525, 524);
	  COL_TRI(375, 525, 374);
	  COL_TRI(376, 525, 526);
	  COL_TRI(98, 526, 375);
	  COL_TRI(98, 97, 526);
	  COL_TRI(376, 526, 97);
	  COL_TRI(97, 522, 523);
	  COL_TRI(97, 523, 376);
	  COL_TRI(97, 521, 522);
	  COL_TRI(97, 92, 521);
	  COL_TRI(376, 524, 525);
	  COL_TRI_INIT(SURFACE_BURNING, 82);
	  COL_TRI(77, 73, 41);
	  COL_TRI(41, 39, 72);
	  COL_TRI(73, 35, 41);
	  COL_TRI(74, 39, 37);
	  COL_TRI(75, 72, 76);
	  COL_TRI(72, 39, 76);
	  COL_TRI(77, 41, 72);
	  COL_TRI(29, 73, 78);
	  COL_TRI(79, 73, 76);
	  COL_TRI(73, 29, 35);
	  COL_TRI(85, 30, 29);
	  COL_TRI(85, 29, 78);
	  COL_TRI(85, 96, 123);
	  COL_TRI(85, 123, 87);
	  COL_TRI(86, 30, 85);
	  COL_TRI(87, 86, 85);
	  COL_TRI(74, 37, 30);
	  COL_TRI(93, 74, 30);
	  COL_TRI(88, 39, 74);
	  COL_TRI(89, 88, 74);
	  COL_TRI(90, 89, 74);
	  COL_TRI(91, 74, 124);
	  COL_TRI(91, 90, 74);
	  COL_TRI(92, 96, 74);
	  COL_TRI(92, 74, 125);
	  COL_TRI(93, 95, 74);
	  COL_TRI(94, 125, 74);
	  COL_TRI(95, 94, 74);
	  COL_TRI(73, 82, 84);
	  COL_TRI(81, 82, 73);
	  COL_TRI(96, 97, 123);
	  COL_TRI(97, 98, 123);
	  COL_TRI(98, 94, 123);
	  COL_TRI(94, 98, 125);
	  COL_TRI(92, 97, 96);
	  COL_TRI(86, 93, 30);
	  COL_TRI(82, 99, 84);
	  COL_TRI(100, 101, 79);
	  COL_TRI(84, 110, 76);
	  COL_TRI(84, 79, 128);
	  COL_TRI(84, 126, 110);
	  COL_TRI(84, 127, 126);
	  COL_TRI(84, 128, 127);
	  COL_TRI(99, 100, 84);
	  COL_TRI(100, 79, 84);
	  COL_TRI(83, 81, 73);
	  COL_TRI(101, 83, 79);
	  COL_TRI(83, 73, 79);
	  COL_TRI(108, 107, 39);
	  COL_TRI(73, 77, 80);
	  COL_TRI(73, 80, 76);
	  COL_TRI(102, 129, 79);
	  COL_TRI(102, 79, 76);
	  COL_TRI(80, 75, 76);
	  COL_TRI(103, 76, 39);
	  COL_TRI(104, 103, 39);
	  COL_TRI(105, 104, 39);
	  COL_TRI(106, 105, 39);
	  COL_TRI(107, 106, 39);
	  COL_TRI(115, 132, 133);
	  COL_TRI(110, 102, 76);
	  COL_TRI(111, 112, 76);
	  COL_TRI(111, 76, 103);
	  COL_TRI(112, 124, 76);
	  COL_TRI(102, 114, 129);
	  COL_TRI(113, 130, 129);
	  COL_TRI(114, 113, 129);
	  COL_TRI(115, 131, 132);
	  COL_TRI(122, 121, 124);
	  COL_TRI(117, 133, 112);
	  COL_TRI(117, 118, 133);
	  COL_TRI(116, 115, 133);
	  COL_TRI(118, 116, 133);
	  COL_TRI(118, 119, 116);
	  COL_TRI(119, 89, 116);
	  COL_TRI(119, 88, 89);
	  COL_TRI(111, 117, 112);
	  COL_TRI(112, 120, 124);
	  COL_TRI(120, 122, 124);
	  COL_TRI(121, 91, 124);
	  COL_TRI(88, 109, 39);
	  COL_TRI(109, 108, 39);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 6);
	  COL_TRI(477, 290, 286);
	  COL_TRI(477, 286, 476);
	  COL_TRI(290, 285, 286);
	  COL_TRI(290, 475, 285);
	  COL_TRI(475, 473, 285);
	  COL_TRI(475, 474, 473);
	  COL_TRI_INIT(SURFACE_WALL_MISC, 106);
	  COL_TRI(0, 1, 2);
	  COL_TRI(1, 0, 3);
	  COL_TRI(1, 3, 4);
	  COL_TRI(1, 5, 6);
	  COL_TRI(7, 5, 1);
	  COL_TRI(6, 2, 1);
	  COL_TRI(4, 7, 1);
	  COL_TRI(6, 8, 2);
	  COL_TRI(6, 9, 8);
	  COL_TRI(8, 10, 2);
	  COL_TRI(8, 11, 10);
	  COL_TRI(0, 2, 10);
	  COL_TRI(4, 12, 7);
	  COL_TRI(4, 13, 12);
	  COL_TRI(11, 0, 10);
	  COL_TRI(26, 55, 16);
	  COL_TRI(14, 53, 17);
	  COL_TRI(14, 54, 53);
	  COL_TRI(14, 17, 27);
	  COL_TRI(14, 27, 28);
	  COL_TRI(15, 14, 28);
	  COL_TRI(15, 54, 14);
	  COL_TRI(16, 55, 53);
	  COL_TRI(16, 53, 54);
	  COL_TRI(17, 26, 27);
	  COL_TRI(15, 56, 54);
	  COL_TRI(16, 54, 56);
	  COL_TRI(18, 21, 20);
	  COL_TRI(18, 57, 21);
	  COL_TRI(26, 16, 27);
	  COL_TRI(19, 59, 60);
	  COL_TRI(20, 21, 22);
	  COL_TRI(21, 59, 61);
	  COL_TRI(21, 60, 59);
	  COL_TRI(21, 57, 60);
	  COL_TRI(22, 21, 61);
	  COL_TRI(19, 20, 23);
	  COL_TRI(19, 18, 20);
	  COL_TRI(20, 22, 23);
	  COL_TRI(23, 22, 56);
	  COL_TRI(24, 56, 22);
	  COL_TRI(22, 61, 24);
	  COL_TRI(25, 23, 15);
	  COL_TRI(25, 19, 23);
	  COL_TRI(23, 56, 15);
	  COL_TRI(25, 61, 59);
	  COL_TRI(25, 59, 19);
	  COL_TRI(29, 34, 35);
	  COL_TRI(24, 16, 56);
	  COL_TRI(15, 28, 25);
	  COL_TRI(27, 16, 24);
	  COL_TRI(27, 24, 28);
	  COL_TRI(28, 24, 61);
	  COL_TRI(28, 61, 25);
	  COL_TRI(19, 58, 18);
	  COL_TRI(19, 60, 58);
	  COL_TRI(31, 33, 34);
	  COL_TRI(32, 31, 34);
	  COL_TRI(33, 36, 34);
	  COL_TRI(34, 36, 35);
	  COL_TRI(30, 34, 29);
	  COL_TRI(30, 32, 34);
	  COL_TRI(35, 42, 41);
	  COL_TRI(35, 36, 42);
	  COL_TRI(36, 44, 43);
	  COL_TRI(33, 44, 36);
	  COL_TRI(36, 43, 42);
	  COL_TRI(37, 32, 30);
	  COL_TRI(32, 40, 46);
	  COL_TRI(32, 46, 31);
	  COL_TRI(37, 40, 32);
	  COL_TRI(38, 40, 37);
	  COL_TRI(39, 38, 37);
	  COL_TRI(40, 38, 46);
	  COL_TRI(41, 42, 39);
	  COL_TRI(42, 38, 39);
	  COL_TRI(42, 45, 38);
	  COL_TRI(38, 45, 46);
	  COL_TRI(42, 43, 45);
	  COL_TRI(43, 62, 45);
	  COL_TRI(43, 63, 62);
	  COL_TRI(44, 63, 43);
	  COL_TRI(49, 67, 68);
	  COL_TRI(33, 64, 44);
	  COL_TRI(44, 64, 63);
	  COL_TRI(45, 62, 47);
	  COL_TRI(45, 47, 46);
	  COL_TRI(46, 47, 66);
	  COL_TRI(46, 66, 31);
	  COL_TRI(31, 65, 33);
	  COL_TRI(33, 65, 64);
	  COL_TRI(31, 66, 65);
	  COL_TRI(47, 63, 64);
	  COL_TRI(47, 64, 65);
	  COL_TRI(47, 65, 66);
	  COL_TRI(47, 62, 63);
	  COL_TRI(48, 67, 49);
	  COL_TRI(11, 52, 0);
	  COL_TRI(48, 69, 67);
	  COL_TRI(50, 68, 70);
	  COL_TRI(49, 68, 50);
	  COL_TRI(50, 70, 51);
	  COL_TRI(51, 69, 48);
	  COL_TRI(51, 70, 69);
	  COL_TRI(3, 0, 52);
	  COL_TRI(3, 52, 71);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(1);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start, /*pos*/ -3839, 154, 6272, /*yaw*/ 64); // unused, probably an early way to set initial position
	  COL_END();
	}

	function lll_seg7_area_1_collision_VERSION_JP() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x21B);
	  COL_VERTEX(2816, 1280, 4608);
	  COL_VERTEX(2775, 1280, 8192);
	  COL_VERTEX(2816, 1280, 8192);
	  COL_VERTEX(2775, 1280, 4567);
	  COL_VERTEX(5888, 1280, 4608);
	  COL_VERTEX(4352, 563, 4608);
	  COL_VERTEX(2816, 563, 4608);
	  COL_VERTEX(2816, 563, 5504);
	  COL_VERTEX(5888, 0, 4608);
	  COL_VERTEX(4352, 0, 4608);
	  COL_VERTEX(5888, 0, 4567);
	  COL_VERTEX(5888, 1280, 4567);
	  COL_VERTEX(2816, 256, 8192);
	  COL_VERTEX(2816, 256, 7552);
	  COL_VERTEX(-76, 563, 6093);
	  COL_VERTEX(-153, 486, 6093);
	  COL_VERTEX(-229, 486, 6246);
	  COL_VERTEX(-153, 154, 6093);
	  COL_VERTEX(230, 486, 6093);
	  COL_VERTEX(154, 154, 6093);
	  COL_VERTEX(154, 486, 6246);
	  COL_VERTEX(154, 486, 6093);
	  COL_VERTEX(77, 563, 6246);
	  COL_VERTEX(77, 563, 6093);
	  COL_VERTEX(-76, 640, 6246);
	  COL_VERTEX(77, 640, 6093);
	  COL_VERTEX(-229, 154, 6093);
	  COL_VERTEX(-229, 486, 6093);
	  COL_VERTEX(-76, 640, 6093);
	  COL_VERTEX(640, 0, -383);
	  COL_VERTEX(640, 0, 384);
	  COL_VERTEX(335, 282, 194);
	  COL_VERTEX(186, 512, 108);
	  COL_VERTEX(325, 282, -210);
	  COL_VERTEX(186, 512, -107);
	  COL_VERTEX(0, 0, 768);
	  COL_VERTEX(0, 282, 387);
	  COL_VERTEX(0, 0, -767);
	  COL_VERTEX(-639, 0, -383);
	  COL_VERTEX(-324, 282, -210);
	  COL_VERTEX(0, 282, -386);
	  COL_VERTEX(-639, 0, 384);
	  COL_VERTEX(-334, 282, 194);
	  COL_VERTEX(0, 512, 215);
	  COL_VERTEX(-185, 512, 108);
	  COL_VERTEX(-185, 512, -107);
	  COL_VERTEX(0, 512, -214);
	  COL_VERTEX(0, 102, -214);
	  COL_VERTEX(-3071, 10, 3584);
	  COL_VERTEX(-3327, 10, 3584);
	  COL_VERTEX(-3071, 10, 3328);
	  COL_VERTEX(-3327, 10, 3328);
	  COL_VERTEX(2775, 0, 4567);
	  COL_VERTEX(-153, 486, 6246);
	  COL_VERTEX(-153, 154, 6246);
	  COL_VERTEX(-229, 154, 6246);
	  COL_VERTEX(-76, 563, 6246);
	  COL_VERTEX(230, 154, 6093);
	  COL_VERTEX(154, 154, 6246);
	  COL_VERTEX(77, 640, 6246);
	  COL_VERTEX(230, 486, 6246);
	  COL_VERTEX(230, 154, 6246);
	  COL_VERTEX(-185, 102, 108);
	  COL_VERTEX(-185, 102, -107);
	  COL_VERTEX(0, 102, 215);
	  COL_VERTEX(186, 102, -107);
	  COL_VERTEX(186, 102, 108);
	  COL_VERTEX(-3071, 307, 3328);
	  COL_VERTEX(-3071, 307, 3584);
	  COL_VERTEX(-3327, 307, 3584);
	  COL_VERTEX(-3327, 307, 3328);
	  COL_VERTEX(2775, 0, 8192);
	  COL_VERTEX(-2318, 0, 134);
	  COL_VERTEX(0, 0, 8192);
	  COL_VERTEX(0, 0, -8191);
	  COL_VERTEX(-8191, 0, 0);
	  COL_VERTEX(-2805, 0, 292);
	  COL_VERTEX(-1844, 0, 1595);
	  COL_VERTEX(-2331, 0, 1753);
	  COL_VERTEX(-5222, 0, 7040);
	  COL_VERTEX(-5887, 0, 7424);
	  COL_VERTEX(-5222, 0, 6272);
	  COL_VERTEX(-5637, 0, 4982);
	  COL_VERTEX(-8191, 0, 8192);
	  COL_VERTEX(8192, 0, 8192);
	  COL_VERTEX(8192, 0, 0);
	  COL_VERTEX(6656, 0, -2303);
	  COL_VERTEX(7321, 0, -2687);
	  COL_VERTEX(5991, 0, -2687);
	  COL_VERTEX(-5871, 0, -6578);
	  COL_VERTEX(-2053, 0, -2429);
	  COL_VERTEX(-6151, 0, -7175);
	  COL_VERTEX(6656, 0, -3839);
	  COL_VERTEX(5954, 0, -7301);
	  COL_VERTEX(-5637, 0, -7037);
	  COL_VERTEX(5991, 0, -3455);
	  COL_VERTEX(7040, 0, -6215);
	  COL_VERTEX(8192, 0, -8191);
	  COL_VERTEX(6678, 0, -5853);
	  COL_VERTEX(-6552, 0, 7040);
	  COL_VERTEX(-6552, 0, 6272);
	  COL_VERTEX(-5887, 0, 5888);
	  COL_VERTEX(-7042, 0, 3578);
	  COL_VERTEX(-2567, 0, -2053);
	  COL_VERTEX(-2287, 0, -1970);
	  COL_VERTEX(-2824, 0, -1984);
	  COL_VERTEX(-3012, 0, -1796);
	  COL_VERTEX(-3081, 0, -1539);
	  COL_VERTEX(-3012, 0, -1282);
	  COL_VERTEX(-3458, 0, -1025);
	  COL_VERTEX(-7179, 0, 4092);
	  COL_VERTEX(-7042, 0, -5633);
	  COL_VERTEX(-3595, 0, -1539);
	  COL_VERTEX(-6596, 0, 4349);
	  COL_VERTEX(-6665, 0, 4092);
	  COL_VERTEX(-6408, 0, -6592);
	  COL_VERTEX(-6151, 0, -6661);
	  COL_VERTEX(-3081, 0, -2429);
	  COL_VERTEX(-3458, 0, -2053);
	  COL_VERTEX(-2567, 0, -2567);
	  COL_VERTEX(-7179, 0, -6147);
	  COL_VERTEX(-7042, 0, -6661);
	  COL_VERTEX(-6665, 0, -7037);
	  COL_VERTEX(7321, 0, -3455);
	  COL_VERTEX(-8191, 0, -8191);
	  COL_VERTEX(5592, 0, -6939);
	  COL_VERTEX(-7042, 0, 4606);
	  COL_VERTEX(-6665, 0, 4982);
	  COL_VERTEX(-6151, 0, 5120);
	  COL_VERTEX(-6151, 0, 4606);
	  COL_VERTEX(-6408, 0, 4537);
	  COL_VERTEX(-6596, 0, -6404);
	  COL_VERTEX(-6665, 0, -6147);
	  COL_VERTEX(-6596, 0, -5890);
	  COL_VERTEX(-127, 0, -1919);
	  COL_VERTEX(-127, 307, -2175);
	  COL_VERTEX(-127, 0, -2175);
	  COL_VERTEX(128, 307, -2175);
	  COL_VERTEX(128, 0, -2175);
	  COL_VERTEX(128, 307, -1919);
	  COL_VERTEX(128, 0, -1919);
	  COL_VERTEX(-127, 307, -1919);
	  COL_VERTEX(-4607, 0, -1023);
	  COL_VERTEX(-4607, 307, -1023);
	  COL_VERTEX(-4607, 307, -639);
	  COL_VERTEX(-4607, 154, -383);
	  COL_VERTEX(-4607, 0, 0);
	  COL_VERTEX(-5631, 0, -1023);
	  COL_VERTEX(-5631, 307, -639);
	  COL_VERTEX(-5631, 307, -1023);
	  COL_VERTEX(-5631, 154, -383);
	  COL_VERTEX(-5631, 0, 0);
	  COL_VERTEX(-4095, 0, 3968);
	  COL_VERTEX(-4095, 0, 2944);
	  COL_VERTEX(-4095, 307, 2944);
	  COL_VERTEX(-4479, 307, 2944);
	  COL_VERTEX(-4735, 154, 3968);
	  COL_VERTEX(-4735, 154, 2944);
	  COL_VERTEX(-5119, 0, 2944);
	  COL_VERTEX(-5119, 0, 3968);
	  COL_VERTEX(1536, 0, 3968);
	  COL_VERTEX(2560, 0, 3968);
	  COL_VERTEX(2560, 307, 3584);
	  COL_VERTEX(1536, 307, 3584);
	  COL_VERTEX(2560, 154, 3328);
	  COL_VERTEX(1536, 154, 3328);
	  COL_VERTEX(2560, 0, 2944);
	  COL_VERTEX(1536, 0, 2944);
	  COL_VERTEX(6144, 0, 896);
	  COL_VERTEX(6144, 0, 1920);
	  COL_VERTEX(6144, 307, 896);
	  COL_VERTEX(5760, 307, 896);
	  COL_VERTEX(5504, 154, 896);
	  COL_VERTEX(5504, 154, 1920);
	  COL_VERTEX(5120, 0, 896);
	  COL_VERTEX(5120, 0, 1920);
	  COL_VERTEX(-255, 154, 6016);
	  COL_VERTEX(-255, 0, 6016);
	  COL_VERTEX(-383, 0, 6144);
	  COL_VERTEX(256, 0, 6016);
	  COL_VERTEX(384, 0, 6144);
	  COL_VERTEX(384, 154, 6144);
	  COL_VERTEX(256, 0, 4224);
	  COL_VERTEX(384, 0, 6400);
	  COL_VERTEX(256, 0, 6528);
	  COL_VERTEX(-255, 0, 6528);
	  COL_VERTEX(-1151, 154, 6528);
	  COL_VERTEX(-1151, 0, 6528);
	  COL_VERTEX(640, 0, 6400);
	  COL_VERTEX(-5375, 307, -3071);
	  COL_VERTEX(-5503, 0, -2943);
	  COL_VERTEX(-5375, 0, -3071);
	  COL_VERTEX(-4735, 0, -2943);
	  COL_VERTEX(-4863, 0, -3071);
	  COL_VERTEX(-4735, 0, -1151);
	  COL_VERTEX(-5375, 0, -1023);
	  COL_VERTEX(-5503, 0, -1151);
	  COL_VERTEX(-2559, 0, 4224);
	  COL_VERTEX(-3839, 0, 2688);
	  COL_VERTEX(-2559, 0, 2688);
	  COL_VERTEX(-3071, 307, 2688);
	  COL_VERTEX(-3839, 0, 4224);
	  COL_VERTEX(-3839, 307, 4224);
	  COL_VERTEX(-3327, 307, 4224);
	  COL_VERTEX(-2559, 0, 3840);
	  COL_VERTEX(-2380, 410, 3840);
	  COL_VERTEX(-2303, 0, 3840);
	  COL_VERTEX(-2303, 307, 3840);
	  COL_VERTEX(-2559, 307, 3968);
	  COL_VERTEX(-2303, 307, 3328);
	  COL_VERTEX(-2559, 0, 3328);
	  COL_VERTEX(-2303, 0, 3328);
	  COL_VERTEX(-2380, 410, 3328);
	  COL_VERTEX(-2559, 307, 3456);
	  COL_VERTEX(-1458, 410, 3840);
	  COL_VERTEX(-1279, 307, 3840);
	  COL_VERTEX(-1535, 0, 3840);
	  COL_VERTEX(-1535, 0, 3968);
	  COL_VERTEX(-1535, 307, 3456);
	  COL_VERTEX(-1535, 0, 3456);
	  COL_VERTEX(-1458, 410, 3328);
	  COL_VERTEX(-1279, 0, 3456);
	  COL_VERTEX(-1279, 0, 3968);
	  COL_VERTEX(-1023, 307, 3328);
	  COL_VERTEX(-1279, 307, 3328);
	  COL_VERTEX(-1535, 307, 3968);
	  COL_VERTEX(-1023, 0, 4096);
	  COL_VERTEX(-1279, 0, 3328);
	  COL_VERTEX(-1023, 0, 3328);
	  COL_VERTEX(1280, 0, 3456);
	  COL_VERTEX(1024, 0, 3328);
	  COL_VERTEX(1280, 0, 3968);
	  COL_VERTEX(1024, 0, 4096);
	  COL_VERTEX(6400, 0, 1152);
	  COL_VERTEX(6912, 0, 640);
	  COL_VERTEX(6912, 307, 640);
	  COL_VERTEX(7424, 0, 640);
	  COL_VERTEX(7936, 0, 1152);
	  COL_VERTEX(7936, 0, 1664);
	  COL_VERTEX(7424, 0, 2176);
	  COL_VERTEX(6912, 0, 2176);
	  COL_VERTEX(6400, 0, 1664);
	  COL_VERTEX(4608, 154, -767);
	  COL_VERTEX(4864, 0, 0);
	  COL_VERTEX(4608, 0, -767);
	  COL_VERTEX(5248, 154, -1279);
	  COL_VERTEX(4992, 154, -895);
	  COL_VERTEX(4992, 0, -767);
	  COL_VERTEX(4992, 0, -895);
	  COL_VERTEX(5632, 0, -1151);
	  COL_VERTEX(5120, 0, -383);
	  COL_VERTEX(5888, 154, 128);
	  COL_VERTEX(5504, 154, 128);
	  COL_VERTEX(5248, 0, 384);
	  COL_VERTEX(5504, 0, 128);
	  COL_VERTEX(5248, 0, -1279);
	  COL_VERTEX(4608, 0, -1151);
	  COL_VERTEX(5632, 154, -1663);
	  COL_VERTEX(4352, 0, -2047);
	  COL_VERTEX(5632, 0, -1663);
	  COL_VERTEX(5248, 154, 384);
	  COL_VERTEX(5504, 0, -383);
	  COL_VERTEX(5888, 0, 128);
	  COL_VERTEX(4096, 0, 384);
	  COL_VERTEX(5248, 0, -1535);
	  COL_VERTEX(4352, 154, -2047);
	  COL_VERTEX(4096, 0, -2047);
	  COL_VERTEX(5504, 0, 640);
	  COL_VERTEX(4096, 0, 768);
	  COL_VERTEX(5248, 0, 0);
	  COL_VERTEX(4480, 0, -1663);
	  COL_VERTEX(4096, 0, -1663);
	  COL_VERTEX(2688, 0, -5247);
	  COL_VERTEX(2688, 0, -6015);
	  COL_VERTEX(3072, 307, -6399);
	  COL_VERTEX(3072, 0, -6399);
	  COL_VERTEX(4992, 0, -6015);
	  COL_VERTEX(4608, 0, -6399);
	  COL_VERTEX(4992, 0, -5247);
	  COL_VERTEX(4608, 0, -4863);
	  COL_VERTEX(3072, 0, -4863);
	  COL_VERTEX(-3839, 307, 3328);
	  COL_VERTEX(6656, 153, 7552);
	  COL_VERTEX(6912, 0, 7552);
	  COL_VERTEX(6272, 512, 7552);
	  COL_VERTEX(6016, 0, 7552);
	  COL_VERTEX(6016, 0, 7040);
	  COL_VERTEX(6912, 0, 7040);
	  COL_VERTEX(6656, 153, 7040);
	  COL_VERTEX(3072, 256, 7552);
	  COL_VERTEX(3328, 0, 7552);
	  COL_VERTEX(3328, 256, 7552);
	  COL_VERTEX(3328, 0, 8192);
	  COL_VERTEX(2816, 0, 8192);
	  COL_VERTEX(2816, 0, 4608);
	  COL_VERTEX(3712, 563, 4992);
	  COL_VERTEX(4352, 0, 4992);
	  COL_VERTEX(3712, 0, 4992);
	  COL_VERTEX(3072, 563, 5504);
	  COL_VERTEX(3712, 563, 5504);
	  COL_VERTEX(768, 0, -5055);
	  COL_VERTEX(-767, 0, -5055);
	  COL_VERTEX(-767, 307, -3647);
	  COL_VERTEX(768, 0, -3647);
	  COL_VERTEX(-767, 0, -3647);
	  COL_VERTEX(384, 0, -6207);
	  COL_VERTEX(384, 768, -6207);
	  COL_VERTEX(-383, 768, -7231);
	  COL_VERTEX(-511, 0, -6335);
	  COL_VERTEX(-511, 768, -6335);
	  COL_VERTEX(512, 0, -7103);
	  COL_VERTEX(512, 768, -7103);
	  COL_VERTEX(-383, 0, -7231);
	  COL_VERTEX(-3583, 154, 6528);
	  COL_VERTEX(-2303, 0, 6528);
	  COL_VERTEX(-4095, 154, 6528);
	  COL_VERTEX(-3583, 0, 6528);
	  COL_VERTEX(-2303, 154, 6016);
	  COL_VERTEX(-3583, 0, 6016);
	  COL_VERTEX(-4095, 0, 6016);
	  COL_VERTEX(-4095, 0, 6528);
	  COL_VERTEX(256, 154, 4096);
	  COL_VERTEX(-255, 230, 4224);
	  COL_VERTEX(256, 154, 4224);
	  COL_VERTEX(-255, 154, 4224);
	  COL_VERTEX(-1663, 0, 6016);
	  COL_VERTEX(-1663, 154, 6528);
	  COL_VERTEX(-4115, 154, 0);
	  COL_VERTEX(-4607, 154, 492);
	  COL_VERTEX(-4115, 154, 492);
	  COL_VERTEX(-4607, 154, 0);
	  COL_VERTEX(3840, -50, 6912);
	  COL_VERTEX(3840, -50, 7040);
	  COL_VERTEX(3840, 51, 6976);
	  COL_VERTEX(6400, -50, 6912);
	  COL_VERTEX(3840, -50, 5120);
	  COL_VERTEX(3840, 51, 5056);
	  COL_VERTEX(6400, -50, 4992);
	  COL_VERTEX(1280, 154, 6656);
	  COL_VERTEX(1280, 0, 6656);
	  COL_VERTEX(896, 154, 5760);
	  COL_VERTEX(1536, 0, 6400);
	  COL_VERTEX(1536, 0, 6016);
	  COL_VERTEX(896, 154, 6656);
	  COL_VERTEX(640, 0, 6144);
	  COL_VERTEX(640, 154, 6144);
	  COL_VERTEX(640, 0, 6016);
	  COL_VERTEX(896, 0, 5760);
	  COL_VERTEX(1280, 0, 5760);
	  COL_VERTEX(-5887, 154, 6224);
	  COL_VERTEX(-5513, 154, 6872);
	  COL_VERTEX(7030, 154, -3287);
	  COL_VERTEX(6656, 154, -3503);
	  COL_VERTEX(7030, 154, -2855);
	  COL_VERTEX(6282, 154, -3287);
	  COL_VERTEX(-2759, 166, 435);
	  COL_VERTEX(-2722, 403, 550);
	  COL_VERTEX(-2667, 554, 718);
	  COL_VERTEX(-2568, 640, 1023);
	  COL_VERTEX(-2469, 554, 1327);
	  COL_VERTEX(-2408, 376, 1515);
	  COL_VERTEX(-2377, 166, 1611);
	  COL_VERTEX(-2081, 640, 864);
	  COL_VERTEX(-7179, 129, 4092);
	  COL_VERTEX(-6665, 257, 4982);
	  COL_VERTEX(-7042, 257, 4606);
	  COL_VERTEX(-6151, 129, 5120);
	  COL_VERTEX(-6151, 129, -7175);
	  COL_VERTEX(-7042, 257, -6661);
	  COL_VERTEX(-6665, 257, -7037);
	  COL_VERTEX(-7179, 129, -6147);
	  COL_VERTEX(-2567, 129, -2567);
	  COL_VERTEX(-3458, 257, -2053);
	  COL_VERTEX(-3081, 257, -2429);
	  COL_VERTEX(-3595, 129, -1539);
	  COL_VERTEX(5698, 166, -6833);
	  COL_VERTEX(5784, 403, -6748);
	  COL_VERTEX(5909, 554, -6622);
	  COL_VERTEX(6135, 640, -6396);
	  COL_VERTEX(6362, 554, -6170);
	  COL_VERTEX(6501, 376, -6030);
	  COL_VERTEX(6572, 166, -5959);
	  COL_VERTEX(6497, 640, -6758);
	  COL_VERTEX(-5631, 154, 0);
	  COL_VERTEX(-4479, 307, 3968);
	  COL_VERTEX(-4095, 307, 3968);
	  COL_VERTEX(-5119, 154, 3968);
	  COL_VERTEX(-5119, 154, 2944);
	  COL_VERTEX(1536, 307, 3968);
	  COL_VERTEX(1280, 307, 3840);
	  COL_VERTEX(1280, 307, 3584);
	  COL_VERTEX(1536, 154, 2944);
	  COL_VERTEX(1536, 307, 3840);
	  COL_VERTEX(2560, 154, 2944);
	  COL_VERTEX(2560, 307, 3968);
	  COL_VERTEX(6144, 307, 1920);
	  COL_VERTEX(5760, 307, 1920);
	  COL_VERTEX(5120, 154, 1920);
	  COL_VERTEX(5120, 154, 896);
	  COL_VERTEX(256, 154, 6016);
	  COL_VERTEX(-255, 154, 6528);
	  COL_VERTEX(256, 154, 6528);
	  COL_VERTEX(-383, 154, 6400);
	  COL_VERTEX(-383, 154, 6144);
	  COL_VERTEX(384, 154, 6400);
	  COL_VERTEX(-255, 0, 4224);
	  COL_VERTEX(256, 230, 4224);
	  COL_VERTEX(-255, 230, 4096);
	  COL_VERTEX(-383, 0, 6400);
	  COL_VERTEX(-1151, 154, 6016);
	  COL_VERTEX(-1151, 0, 6016);
	  COL_VERTEX(640, 154, 6016);
	  COL_VERTEX(-5503, 307, -2943);
	  COL_VERTEX(-5503, 307, -1151);
	  COL_VERTEX(-4735, 307, -1151);
	  COL_VERTEX(-4735, 307, -2943);
	  COL_VERTEX(-4863, 307, -1023);
	  COL_VERTEX(-5375, 307, -1023);
	  COL_VERTEX(-4863, 307, -3071);
	  COL_VERTEX(640, 154, 6400);
	  COL_VERTEX(-4863, 0, -1023);
	  COL_VERTEX(-2559, 307, 4224);
	  COL_VERTEX(-3839, 307, 2688);
	  COL_VERTEX(-2559, 307, 2688);
	  COL_VERTEX(-3071, 307, 4224);
	  COL_VERTEX(-3327, 307, 2688);
	  COL_VERTEX(-2559, 307, 3840);
	  COL_VERTEX(-2303, 307, 3968);
	  COL_VERTEX(-2380, 410, 3968);
	  COL_VERTEX(-2303, 0, 3968);
	  COL_VERTEX(-2559, 0, 3968);
	  COL_VERTEX(-2380, 410, 3456);
	  COL_VERTEX(-2303, 307, 3456);
	  COL_VERTEX(-2559, 307, 3328);
	  COL_VERTEX(-2303, 0, 3456);
	  COL_VERTEX(-2559, 0, 3456);
	  COL_VERTEX(-1535, 307, 3840);
	  COL_VERTEX(-1458, 410, 3968);
	  COL_VERTEX(-1279, 0, 3840);
	  COL_VERTEX(-1279, 307, 3968);
	  COL_VERTEX(-1279, 307, 3456);
	  COL_VERTEX(-1458, 410, 3456);
	  COL_VERTEX(-1535, 307, 3328);
	  COL_VERTEX(-1535, 0, 3328);
	  COL_VERTEX(-1023, 307, 4096);
	  COL_VERTEX(1024, 307, 4096);
	  COL_VERTEX(1280, 307, 3968);
	  COL_VERTEX(1280, 307, 3456);
	  COL_VERTEX(1024, 307, 3328);
	  COL_VERTEX(6400, 307, 1152);
	  COL_VERTEX(7424, 307, 640);
	  COL_VERTEX(6912, 307, 2176);
	  COL_VERTEX(7424, 307, 2176);
	  COL_VERTEX(6400, 307, 1664);
	  COL_VERTEX(7936, 307, 1664);
	  COL_VERTEX(7936, 307, 1152);
	  COL_VERTEX(5120, 154, -383);
	  COL_VERTEX(4992, 154, -767);
	  COL_VERTEX(4864, 154, 0);
	  COL_VERTEX(4608, 154, -1151);
	  COL_VERTEX(5248, 154, 0);
	  COL_VERTEX(5632, 154, -1151);
	  COL_VERTEX(5504, 154, -383);
	  COL_VERTEX(5248, 154, -1535);
	  COL_VERTEX(5504, 154, 640);
	  COL_VERTEX(4096, 154, 768);
	  COL_VERTEX(4096, 154, 384);
	  COL_VERTEX(4480, 154, -1663);
	  COL_VERTEX(4096, 154, -1663);
	  COL_VERTEX(4096, 154, -2047);
	  COL_VERTEX(2688, 307, -6015);
	  COL_VERTEX(2688, 307, -5247);
	  COL_VERTEX(4608, 307, -6399);
	  COL_VERTEX(3072, 307, -4863);
	  COL_VERTEX(4992, 307, -6015);
	  COL_VERTEX(4992, 307, -5247);
	  COL_VERTEX(4608, 307, -4863);
	  COL_VERTEX(-4095, 307, 3584);
	  COL_VERTEX(-3839, 307, 3584);
	  COL_VERTEX(-4095, 307, 3328);
	  COL_VERTEX(6016, 512, 7552);
	  COL_VERTEX(6016, 512, 7040);
	  COL_VERTEX(6272, 512, 7040);
	  COL_VERTEX(6912, 154, 7552);
	  COL_VERTEX(6912, 154, 7040);
	  COL_VERTEX(3072, 0, 7552);
	  COL_VERTEX(3328, 256, 8192);
	  COL_VERTEX(4352, 563, 4992);
	  COL_VERTEX(3712, 0, 5504);
	  COL_VERTEX(3072, 0, 5504);
	  COL_VERTEX(768, 307, -5055);
	  COL_VERTEX(768, 307, -3647);
	  COL_VERTEX(-767, 307, -5055);
	  COL_VERTEX(512, 768, -6335);
	  COL_VERTEX(-383, 768, -6207);
	  COL_VERTEX(-383, 0, -6207);
	  COL_VERTEX(512, 0, -6335);
	  COL_VERTEX(-511, 0, -7103);
	  COL_VERTEX(-511, 768, -7103);
	  COL_VERTEX(384, 768, -7231);
	  COL_VERTEX(384, 0, -7231);
	  COL_VERTEX(-2303, 154, 6528);
	  COL_VERTEX(-3583, 154, 6016);
	  COL_VERTEX(-2303, 0, 6016);
	  COL_VERTEX(-4095, 154, 6016);
	  COL_VERTEX(256, 230, 4096);
	  COL_VERTEX(-255, 154, 4096);
	  COL_VERTEX(-1663, 154, 6016);
	  COL_VERTEX(-1663, 0, 6528);
	  COL_VERTEX(-4115, 0, 492);
	  COL_VERTEX(-4115, 0, 0);
	  COL_VERTEX(-4607, 0, 492);
	  COL_VERTEX(6400, 51, 6976);
	  COL_VERTEX(6400, -50, 7040);
	  COL_VERTEX(3840, -50, 4992);
	  COL_VERTEX(6400, -50, 5120);
	  COL_VERTEX(6400, 51, 5056);
	  COL_VERTEX(1536, 154, 6400);
	  COL_VERTEX(896, 0, 6656);
	  COL_VERTEX(1536, 154, 6016);
	  COL_VERTEX(1280, 154, 5760);
	  COL_VERTEX(-5513, 154, 6440);
	  COL_VERTEX(-5887, 154, 7088);
	  COL_VERTEX(-6261, 154, 6872);
	  COL_VERTEX(-6261, 154, 6440);
	  COL_VERTEX(6656, 154, -2639);
	  COL_VERTEX(6282, 154, -2855);
	  COL_VERTEX(-2272, 166, 276);
	  COL_VERTEX(-2235, 403, 391);
	  COL_VERTEX(-2180, 554, 560);
	  COL_VERTEX(-1982, 554, 1169);
	  COL_VERTEX(-1921, 376, 1357);
	  COL_VERTEX(-1890, 166, 1452);
	  COL_VERTEX(6060, 166, -7195);
	  COL_VERTEX(6146, 403, -7110);
	  COL_VERTEX(6271, 554, -6984);
	  COL_VERTEX(6724, 554, -6532);
	  COL_VERTEX(6863, 376, -6392);
	  COL_VERTEX(6934, 166, -6321);
	  COL_TRI_INIT(SURFACE_DEFAULT, 634);
	  COL_TRI(142, 143, 144);
	  COL_TRI(49, 48, 50);
	  COL_TRI(49, 50, 51);
	  COL_TRI(134, 135, 136);
	  COL_TRI(136, 137, 138);
	  COL_TRI(136, 135, 137);
	  COL_TRI(135, 139, 137);
	  COL_TRI(138, 137, 139);
	  COL_TRI(138, 139, 140);
	  COL_TRI(135, 141, 139);
	  COL_TRI(134, 141, 135);
	  COL_TRI(140, 139, 141);
	  COL_TRI(140, 141, 134);
	  COL_TRI(142, 145, 146);
	  COL_TRI(142, 144, 145);
	  COL_TRI(148, 145, 144);
	  COL_TRI(149, 144, 143);
	  COL_TRI(149, 148, 144);
	  COL_TRI(148, 150, 145);
	  COL_TRI(150, 330, 145);
	  COL_TRI(145, 330, 146);
	  COL_TRI(150, 383, 330);
	  COL_TRI(151, 383, 150);
	  COL_TRI(151, 150, 147);
	  COL_TRI(150, 148, 147);
	  COL_TRI(148, 149, 147);
	  COL_TRI(147, 149, 143);
	  COL_TRI(147, 143, 142);
	  COL_TRI(146, 330, 383);
	  COL_TRI(146, 383, 151);
	  COL_TRI(152, 384, 156);
	  COL_TRI(152, 156, 159);
	  COL_TRI(153, 385, 152);
	  COL_TRI(152, 385, 384);
	  COL_TRI(154, 384, 385);
	  COL_TRI(154, 155, 384);
	  COL_TRI(155, 156, 384);
	  COL_TRI(156, 386, 159);
	  COL_TRI(155, 157, 156);
	  COL_TRI(157, 386, 156);
	  COL_TRI(157, 155, 153);
	  COL_TRI(158, 387, 157);
	  COL_TRI(158, 157, 153);
	  COL_TRI(157, 387, 386);
	  COL_TRI(155, 154, 153);
	  COL_TRI(153, 154, 385);
	  COL_TRI(159, 386, 387);
	  COL_TRI(159, 387, 158);
	  COL_TRI(160, 163, 165);
	  COL_TRI(161, 388, 160);
	  COL_TRI(160, 388, 163);
	  COL_TRI(162, 165, 163);
	  COL_TRI(162, 163, 388);
	  COL_TRI(163, 389, 392);
	  COL_TRI(163, 390, 389);
	  COL_TRI(162, 164, 165);
	  COL_TRI(164, 391, 165);
	  COL_TRI(165, 391, 167);
	  COL_TRI(160, 165, 167);
	  COL_TRI(164, 393, 391);
	  COL_TRI(164, 162, 161);
	  COL_TRI(166, 393, 164);
	  COL_TRI(166, 164, 161);
	  COL_TRI(167, 391, 393);
	  COL_TRI(167, 393, 166);
	  COL_TRI(162, 388, 394);
	  COL_TRI(162, 394, 161);
	  COL_TRI(161, 394, 388);
	  COL_TRI(168, 395, 169);
	  COL_TRI(169, 395, 396);
	  COL_TRI(169, 396, 173);
	  COL_TRI(169, 173, 175);
	  COL_TRI(170, 396, 395);
	  COL_TRI(170, 171, 396);
	  COL_TRI(171, 173, 396);
	  COL_TRI(171, 172, 173);
	  COL_TRI(172, 397, 173);
	  COL_TRI(173, 397, 175);
	  COL_TRI(172, 171, 168);
	  COL_TRI(171, 170, 168);
	  COL_TRI(168, 170, 395);
	  COL_TRI(176, 403, 402);
	  COL_TRI(174, 172, 168);
	  COL_TRI(172, 398, 397);
	  COL_TRI(175, 397, 398);
	  COL_TRI(175, 398, 174);
	  COL_TRI(174, 398, 172);
	  COL_TRI(176, 399, 323);
	  COL_TRI(176, 323, 324);
	  COL_TRI(177, 176, 324);
	  COL_TRI(176, 400, 401);
	  COL_TRI(176, 402, 400);
	  COL_TRI(179, 181, 180);
	  COL_TRI(176, 181, 399);
	  COL_TRI(176, 404, 181);
	  COL_TRI(179, 399, 181);
	  COL_TRI(180, 181, 183);
	  COL_TRI(181, 404, 183);
	  COL_TRI(182, 323, 399);
	  COL_TRI(182, 399, 179);
	  COL_TRI(176, 401, 404);
	  COL_TRI(183, 404, 401);
	  COL_TRI(183, 401, 184);
	  COL_TRI(184, 401, 400);
	  COL_TRI(185, 400, 402);
	  COL_TRI(184, 400, 185);
	  COL_TRI(180, 181, 345);
	  COL_TRI(186, 402, 403);
	  COL_TRI(187, 408, 402);
	  COL_TRI(187, 402, 186);
	  COL_TRI(185, 402, 408);
	  COL_TRI(186, 403, 409);
	  COL_TRI(178, 409, 403);
	  COL_TRI(178, 403, 176);
	  COL_TRI(180, 345, 344);
	  COL_TRI(188, 404, 183);
	  COL_TRI(178, 410, 409);
	  COL_TRI(178, 176, 177);
	  COL_TRI(177, 324, 405);
	  COL_TRI(189, 412, 413);
	  COL_TRI(189, 414, 415);
	  COL_TRI(195, 417, 413);
	  COL_TRI(189, 416, 414);
	  COL_TRI(189, 417, 416);
	  COL_TRI(189, 413, 417);
	  COL_TRI(192, 415, 414);
	  COL_TRI(193, 418, 415);
	  COL_TRI(193, 415, 192);
	  COL_TRI(189, 415, 418);
	  COL_TRI(191, 418, 193);
	  COL_TRI(191, 189, 418);
	  COL_TRI(192, 414, 194);
	  COL_TRI(194, 414, 416);
	  COL_TRI(194, 416, 420);
	  COL_TRI(198, 423, 199);
	  COL_TRI(195, 413, 196);
	  COL_TRI(196, 413, 412);
	  COL_TRI(196, 412, 190);
	  COL_TRI(190, 412, 189);
	  COL_TRI(190, 189, 191);
	  COL_TRI(197, 421, 202);
	  COL_TRI(197, 202, 201);
	  COL_TRI(198, 422, 423);
	  COL_TRI(199, 421, 197);
	  COL_TRI(199, 423, 421);
	  COL_TRI(200, 421, 423);
	  COL_TRI(200, 424, 421);
	  COL_TRI(201, 202, 422);
	  COL_TRI(201, 422, 198);
	  COL_TRI(202, 203, 425);
	  COL_TRI(202, 425, 422);
	  COL_TRI(70, 67, 200);
	  COL_TRI(70, 200, 425);
	  COL_TRI(208, 429, 427);
	  COL_TRI(203, 424, 68);
	  COL_TRI(203, 68, 69);
	  COL_TRI(204, 207, 206);
	  COL_TRI(204, 426, 207);
	  COL_TRI(205, 207, 426);
	  COL_TRI(205, 426, 208);
	  COL_TRI(206, 207, 427);
	  COL_TRI(207, 205, 428);
	  COL_TRI(207, 428, 427);
	  COL_TRI(206, 427, 429);
	  COL_TRI(205, 208, 428);
	  COL_TRI(208, 427, 428);
	  COL_TRI(213, 435, 434);
	  COL_TRI(208, 430, 429);
	  COL_TRI(209, 212, 431);
	  COL_TRI(209, 431, 432);
	  COL_TRI(210, 433, 209);
	  COL_TRI(210, 209, 211);
	  COL_TRI(211, 209, 432);
	  COL_TRI(212, 209, 433);
	  COL_TRI(212, 433, 213);
	  COL_TRI(212, 213, 431);
	  COL_TRI(213, 432, 431);
	  COL_TRI(213, 434, 432);
	  COL_TRI(211, 432, 434);
	  COL_TRI(214, 215, 436);
	  COL_TRI(215, 214, 437);
	  COL_TRI(214, 225, 437);
	  COL_TRI(214, 436, 225);
	  COL_TRI(216, 215, 438);
	  COL_TRI(216, 436, 215);
	  COL_TRI(215, 437, 439);
	  COL_TRI(217, 436, 216);
	  COL_TRI(217, 225, 436);
	  COL_TRI(218, 440, 441);
	  COL_TRI(219, 218, 442);
	  COL_TRI(218, 221, 440);
	  COL_TRI(218, 219, 221);
	  COL_TRI(225, 439, 437);
	  COL_TRI(227, 443, 442);
	  COL_TRI(221, 224, 440);
	  COL_TRI(222, 440, 221);
	  COL_TRI(223, 440, 439);
	  COL_TRI(224, 441, 440);
	  COL_TRI(222, 439, 440);
	  COL_TRI(221, 440, 223);
	  COL_TRI(224, 220, 441);
	  COL_TRI(220, 218, 441);
	  COL_TRI(221, 227, 224);
	  COL_TRI(221, 223, 228);
	  COL_TRI(219, 442, 443);
	  COL_TRI(227, 220, 224);
	  COL_TRI(227, 442, 220);
	  COL_TRI(220, 442, 218);
	  COL_TRI(225, 217, 222);
	  COL_TRI(225, 222, 439);
	  COL_TRI(223, 439, 444);
	  COL_TRI(226, 439, 222);
	  COL_TRI(226, 444, 439);
	  COL_TRI(223, 444, 445);
	  COL_TRI(223, 445, 446);
	  COL_TRI(223, 446, 447);
	  COL_TRI(223, 447, 448);
	  COL_TRI(228, 223, 448);
	  COL_TRI(229, 447, 446);
	  COL_TRI(230, 447, 229);
	  COL_TRI(230, 448, 447);
	  COL_TRI(228, 448, 230);
	  COL_TRI(235, 449, 453);
	  COL_TRI(231, 446, 445);
	  COL_TRI(229, 446, 231);
	  COL_TRI(231, 445, 232);
	  COL_TRI(232, 445, 444);
	  COL_TRI(232, 444, 226);
	  COL_TRI(233, 449, 235);
	  COL_TRI(234, 235, 450);
	  COL_TRI(233, 235, 234);
	  COL_TRI(235, 451, 452);
	  COL_TRI(235, 453, 451);
	  COL_TRI(239, 451, 240);
	  COL_TRI(236, 455, 237);
	  COL_TRI(236, 450, 455);
	  COL_TRI(235, 455, 450);
	  COL_TRI(235, 454, 455);
	  COL_TRI(237, 455, 454);
	  COL_TRI(234, 450, 236);
	  COL_TRI(238, 454, 452);
	  COL_TRI(235, 452, 454);
	  COL_TRI(237, 454, 238);
	  COL_TRI(239, 452, 451);
	  COL_TRI(238, 452, 239);
	  COL_TRI(240, 451, 453);
	  COL_TRI(242, 252, 456);
	  COL_TRI(240, 453, 241);
	  COL_TRI(241, 453, 449);
	  COL_TRI(241, 449, 233);
	  COL_TRI(242, 456, 457);
	  COL_TRI(243, 242, 244);
	  COL_TRI(243, 458, 242);
	  COL_TRI(244, 242, 459);
	  COL_TRI(245, 459, 242);
	  COL_TRI(242, 460, 252);
	  COL_TRI(242, 458, 460);
	  COL_TRI(252, 251, 456);
	  COL_TRI(247, 457, 456);
	  COL_TRI(248, 246, 457);
	  COL_TRI(248, 457, 247);
	  COL_TRI(242, 457, 246);
	  COL_TRI(249, 246, 248);
	  COL_TRI(249, 461, 246);
	  COL_TRI(246, 461, 257);
	  COL_TRI(246, 245, 242);
	  COL_TRI(246, 257, 245);
	  COL_TRI(247, 456, 250);
	  COL_TRI(250, 456, 462);
	  COL_TRI(251, 462, 456);
	  COL_TRI(257, 265, 463);
	  COL_TRI(253, 260, 252);
	  COL_TRI(254, 252, 460);
	  COL_TRI(253, 252, 254);
	  COL_TRI(252, 260, 251);
	  COL_TRI(255, 245, 463);
	  COL_TRI(256, 459, 245);
	  COL_TRI(256, 245, 255);
	  COL_TRI(257, 463, 245);
	  COL_TRI(258, 257, 259);
	  COL_TRI(258, 265, 257);
	  COL_TRI(265, 467, 463);
	  COL_TRI(260, 464, 251);
	  COL_TRI(261, 251, 262);
	  COL_TRI(261, 462, 251);
	  COL_TRI(262, 251, 464);
	  COL_TRI(260, 465, 464);
	  COL_TRI(260, 466, 465);
	  COL_TRI(263, 260, 253);
	  COL_TRI(263, 466, 260);
	  COL_TRI(255, 463, 264);
	  COL_TRI(264, 463, 467);
	  COL_TRI(250, 462, 261);
	  COL_TRI(259, 257, 461);
	  COL_TRI(266, 265, 258);
	  COL_TRI(266, 469, 265);
	  COL_TRI(265, 468, 467);
	  COL_TRI(265, 469, 468);
	  COL_TRI(259, 461, 249);
	  COL_TRI(244, 459, 256);
	  COL_TRI(267, 464, 465);
	  COL_TRI(262, 464, 267);
	  COL_TRI(267, 465, 268);
	  COL_TRI(268, 465, 466);
	  COL_TRI(268, 466, 263);
	  COL_TRI(269, 460, 458);
	  COL_TRI(254, 460, 269);
	  COL_TRI(269, 458, 243);
	  COL_TRI(264, 467, 270);
	  COL_TRI(270, 467, 468);
	  COL_TRI(271, 468, 469);
	  COL_TRI(270, 468, 271);
	  COL_TRI(271, 469, 266);
	  COL_TRI(272, 470, 273);
	  COL_TRI(273, 470, 274);
	  COL_TRI(273, 274, 275);
	  COL_TRI(274, 470, 471);
	  COL_TRI(275, 274, 472);
	  COL_TRI(274, 471, 473);
	  COL_TRI(272, 471, 470);
	  COL_TRI(274, 474, 472);
	  COL_TRI(274, 475, 474);
	  COL_TRI(274, 476, 475);
	  COL_TRI(275, 472, 277);
	  COL_TRI(276, 474, 475);
	  COL_TRI(277, 472, 474);
	  COL_TRI(277, 474, 276);
	  COL_TRI(276, 475, 278);
	  COL_TRI(278, 475, 476);
	  COL_TRI(278, 476, 279);
	  COL_TRI(279, 476, 473);
	  COL_TRI(274, 473, 476);
	  COL_TRI(279, 473, 280);
	  COL_TRI(280, 473, 471);
	  COL_TRI(280, 471, 272);
	  COL_TRI(281, 477, 478);
	  COL_TRI(281, 479, 477);
	  COL_TRI(282, 284, 285);
	  COL_TRI(283, 282, 285);
	  COL_TRI(284, 480, 285);
	  COL_TRI(285, 480, 481);
	  COL_TRI(285, 481, 286);
	  COL_TRI(289, 290, 485);
	  COL_TRI(286, 481, 482);
	  COL_TRI(286, 482, 288);
	  COL_TRI(286, 288, 287);
	  COL_TRI(287, 484, 483);
	  COL_TRI(287, 483, 283);
	  COL_TRI(288, 484, 287);
	  COL_TRI(283, 483, 282);
	  COL_TRI(289, 291, 290);
	  COL_TRI(9, 5, 487);
	  COL_TRI(290, 291, 486);
	  COL_TRI(291, 12, 486);
	  COL_TRI(291, 13, 12);
	  COL_TRI(290, 486, 292);
	  COL_TRI(292, 486, 12);
	  COL_TRI(292, 12, 293);
	  COL_TRI(293, 12, 13);
	  COL_TRI(293, 13, 294);
	  COL_TRI(294, 5, 9);
	  COL_TRI(9, 487, 296);
	  COL_TRI(7, 6, 294);
	  COL_TRI(295, 5, 7);
	  COL_TRI(294, 6, 5);
	  COL_TRI(295, 487, 5);
	  COL_TRI(5, 6, 7);
	  COL_TRI(296, 487, 295);
	  COL_TRI(296, 295, 297);
	  COL_TRI(297, 295, 299);
	  COL_TRI(7, 299, 295);
	  COL_TRI(297, 299, 488);
	  COL_TRI(298, 289, 485);
	  COL_TRI(298, 485, 489);
	  COL_TRI(299, 298, 489);
	  COL_TRI(7, 289, 298);
	  COL_TRI(299, 489, 488);
	  COL_TRI(305, 493, 306);
	  COL_TRI(7, 13, 289);
	  COL_TRI(13, 7, 294);
	  COL_TRI(300, 490, 491);
	  COL_TRI(300, 491, 303);
	  COL_TRI(301, 490, 300);
	  COL_TRI(301, 492, 490);
	  COL_TRI(302, 491, 490);
	  COL_TRI(302, 490, 492);
	  COL_TRI(303, 491, 302);
	  COL_TRI(303, 302, 304);
	  COL_TRI(304, 492, 301);
	  COL_TRI(304, 302, 492);
	  COL_TRI(306, 494, 495);
	  COL_TRI(306, 495, 305);
	  COL_TRI(307, 494, 306);
	  COL_TRI(308, 495, 494);
	  COL_TRI(308, 494, 309);
	  COL_TRI(307, 309, 494);
	  COL_TRI(305, 496, 493);
	  COL_TRI(309, 497, 308);
	  COL_TRI(309, 498, 497);
	  COL_TRI(307, 498, 309);
	  COL_TRI(310, 499, 311);
	  COL_TRI(307, 493, 311);
	  COL_TRI(307, 311, 499);
	  COL_TRI(311, 493, 496);
	  COL_TRI(311, 496, 310);
	  COL_TRI(307, 306, 493);
	  COL_TRI(310, 500, 499);
	  COL_TRI(312, 498, 307);
	  COL_TRI(307, 499, 500);
	  COL_TRI(307, 500, 312);
	  COL_TRI(312, 497, 498);
	  COL_TRI(313, 501, 317);
	  COL_TRI(313, 317, 502);
	  COL_TRI(314, 501, 313);
	  COL_TRI(314, 313, 316);
	  COL_TRI(315, 313, 502);
	  COL_TRI(316, 313, 315);
	  COL_TRI(317, 501, 314);
	  COL_TRI(321, 505, 406);
	  COL_TRI(318, 502, 317);
	  COL_TRI(317, 314, 503);
	  COL_TRI(318, 317, 503);
	  COL_TRI(315, 502, 504);
	  COL_TRI(319, 504, 502);
	  COL_TRI(319, 502, 318);
	  COL_TRI(316, 315, 320);
	  COL_TRI(320, 315, 504);
	  COL_TRI(320, 504, 319);
	  COL_TRI(321, 406, 323);
	  COL_TRI(326, 409, 507);
	  COL_TRI(322, 505, 407);
	  COL_TRI(322, 406, 505);
	  COL_TRI(323, 406, 322);
	  COL_TRI(324, 322, 407);
	  COL_TRI(324, 407, 506);
	  COL_TRI(323, 322, 324);
	  COL_TRI(325, 507, 409);
	  COL_TRI(325, 409, 410);
	  COL_TRI(325, 326, 507);
	  COL_TRI(325, 508, 326);
	  COL_TRI(330, 146, 511);
	  COL_TRI(187, 326, 508);
	  COL_TRI(187, 186, 326);
	  COL_TRI(326, 186, 409);
	  COL_TRI(327, 328, 329);
	  COL_TRI(328, 509, 329);
	  COL_TRI(329, 509, 510);
	  COL_TRI(329, 510, 327);
	  COL_TRI(328, 511, 509);
	  COL_TRI(327, 510, 146);
	  COL_TRI(327, 146, 330);
	  COL_TRI(327, 330, 328);
	  COL_TRI(330, 511, 328);
	  COL_TRI(338, 339, 341);
	  COL_TRI(331, 333, 512);
	  COL_TRI(332, 333, 331);
	  COL_TRI(333, 513, 512);
	  COL_TRI(333, 332, 513);
	  COL_TRI(334, 512, 513);
	  COL_TRI(331, 512, 334);
	  COL_TRI(335, 336, 514);
	  COL_TRI(336, 335, 515);
	  COL_TRI(336, 516, 337);
	  COL_TRI(336, 337, 514);
	  COL_TRI(336, 515, 516);
	  COL_TRI(337, 516, 515);
	  COL_TRI(340, 338, 517);
	  COL_TRI(339, 338, 343);
	  COL_TRI(340, 343, 338);
	  COL_TRI(341, 517, 338);
	  COL_TRI(339, 343, 518);
	  COL_TRI(342, 517, 341);
	  COL_TRI(343, 188, 518);
	  COL_TRI(343, 419, 188);
	  COL_TRI(340, 419, 343);
	  COL_TRI(188, 419, 404);
	  COL_TRI(344, 345, 411);
	  COL_TRI(345, 404, 419);
	  COL_TRI(340, 411, 419);
	  COL_TRI(342, 519, 517);
	  COL_TRI(344, 411, 346);
	  COL_TRI(345, 181, 404);
	  COL_TRI(346, 411, 340);
	  COL_TRI(346, 340, 347);
	  COL_TRI(347, 340, 520);
	  COL_TRI(340, 517, 519);
	  COL_TRI(347, 520, 348);
	  COL_TRI(348, 520, 519);
	  COL_TRI(340, 519, 520);
	  COL_TRI(348, 519, 342);
	  COL_TRI(123, 351, 87);
	  COL_TRI(101, 521, 81);
	  COL_TRI(81, 350, 79);
	  COL_TRI(81, 521, 350);
	  COL_TRI(349, 350, 521);
	  COL_TRI(101, 349, 521);
	  COL_TRI(350, 522, 80);
	  COL_TRI(79, 350, 80);
	  COL_TRI(349, 522, 350);
	  COL_TRI(80, 522, 523);
	  COL_TRI(349, 523, 522);
	  COL_TRI(80, 523, 99);
	  COL_TRI(349, 524, 523);
	  COL_TRI(99, 523, 524);
	  COL_TRI(99, 524, 100);
	  COL_TRI(100, 524, 349);
	  COL_TRI(100, 349, 101);
	  COL_TRI(351, 353, 87);
	  COL_TRI(352, 353, 351);
	  COL_TRI(92, 352, 351);
	  COL_TRI(353, 525, 86);
	  COL_TRI(87, 353, 86);
	  COL_TRI(352, 525, 353);
	  COL_TRI(92, 351, 123);
	  COL_TRI(86, 525, 526);
	  COL_TRI(352, 526, 525);
	  COL_TRI(86, 526, 88);
	  COL_TRI(88, 526, 354);
	  COL_TRI(352, 354, 526);
	  COL_TRI(88, 354, 95);
	  COL_TRI(354, 352, 92);
	  COL_TRI(95, 354, 92);
	  COL_TRI(355, 76, 78);
	  COL_TRI(355, 72, 76);
	  COL_TRI(355, 357, 356);
	  COL_TRI(355, 358, 357);
	  COL_TRI(355, 78, 361);
	  COL_TRI(355, 361, 360);
	  COL_TRI(355, 360, 359);
	  COL_TRI(355, 359, 358);
	  COL_TRI(356, 527, 355);
	  COL_TRI(355, 527, 72);
	  COL_TRI(361, 532, 531);
	  COL_TRI(356, 528, 527);
	  COL_TRI(357, 528, 356);
	  COL_TRI(357, 529, 528);
	  COL_TRI(358, 529, 357);
	  COL_TRI(358, 362, 529);
	  COL_TRI(359, 362, 358);
	  COL_TRI(359, 530, 362);
	  COL_TRI(360, 530, 359);
	  COL_TRI(360, 531, 530);
	  COL_TRI(361, 531, 360);
	  COL_TRI(362, 531, 532);
	  COL_TRI(78, 532, 361);
	  COL_TRI(78, 77, 532);
	  COL_TRI(77, 529, 362);
	  COL_TRI(362, 532, 77);
	  COL_TRI(77, 528, 529);
	  COL_TRI(77, 72, 527);
	  COL_TRI(77, 527, 528);
	  COL_TRI(362, 530, 531);
	  COL_TRI(102, 363, 114);
	  COL_TRI(102, 110, 363);
	  COL_TRI(363, 110, 126);
	  COL_TRI(363, 126, 365);
	  COL_TRI(363, 365, 114);
	  COL_TRI(364, 365, 126);
	  COL_TRI(364, 126, 127);
	  COL_TRI(365, 364, 113);
	  COL_TRI(365, 113, 114);
	  COL_TRI(364, 366, 129);
	  COL_TRI(366, 364, 127);
	  COL_TRI(364, 129, 130);
	  COL_TRI(364, 130, 113);
	  COL_TRI(366, 127, 128);
	  COL_TRI(366, 128, 82);
	  COL_TRI(366, 82, 129);
	  COL_TRI(89, 94, 367);
	  COL_TRI(94, 91, 367);
	  COL_TRI(367, 91, 122);
	  COL_TRI(367, 369, 116);
	  COL_TRI(89, 367, 116);
	  COL_TRI(367, 122, 369);
	  COL_TRI(368, 122, 121);
	  COL_TRI(368, 369, 122);
	  COL_TRI(369, 368, 131);
	  COL_TRI(369, 131, 115);
	  COL_TRI(369, 115, 116);
	  COL_TRI(368, 370, 132);
	  COL_TRI(368, 132, 131);
	  COL_TRI(370, 368, 121);
	  COL_TRI(370, 121, 120);
	  COL_TRI(370, 133, 132);
	  COL_TRI(370, 120, 111);
	  COL_TRI(370, 111, 133);
	  COL_TRI(90, 119, 371);
	  COL_TRI(104, 90, 371);
	  COL_TRI(374, 118, 112);
	  COL_TRI(371, 119, 117);
	  COL_TRI(371, 117, 373);
	  COL_TRI(371, 373, 103);
	  COL_TRI(104, 371, 103);
	  COL_TRI(372, 373, 117);
	  COL_TRI(372, 117, 118);
	  COL_TRI(373, 372, 106);
	  COL_TRI(373, 106, 105);
	  COL_TRI(373, 105, 103);
	  COL_TRI(374, 372, 118);
	  COL_TRI(372, 107, 106);
	  COL_TRI(372, 374, 107);
	  COL_TRI(374, 112, 109);
	  COL_TRI(374, 109, 108);
	  COL_TRI(374, 108, 107);
	  COL_TRI(375, 379, 378);
	  COL_TRI(375, 378, 377);
	  COL_TRI(375, 377, 376);
	  COL_TRI(375, 380, 379);
	  COL_TRI(375, 125, 98);
	  COL_TRI(375, 98, 381);
	  COL_TRI(375, 381, 380);
	  COL_TRI(380, 536, 379);
	  COL_TRI(376, 533, 375);
	  COL_TRI(375, 93, 125);
	  COL_TRI(375, 533, 93);
	  COL_TRI(376, 534, 533);
	  COL_TRI(377, 534, 376);
	  COL_TRI(377, 535, 534);
	  COL_TRI(378, 535, 377);
	  COL_TRI(378, 382, 535);
	  COL_TRI(379, 382, 378);
	  COL_TRI(379, 536, 382);
	  COL_TRI(380, 537, 536);
	  COL_TRI(381, 537, 380);
	  COL_TRI(381, 538, 537);
	  COL_TRI(98, 538, 381);
	  COL_TRI(98, 96, 538);
	  COL_TRI(382, 538, 96);
	  COL_TRI(96, 533, 534);
	  COL_TRI(96, 534, 535);
	  COL_TRI(96, 535, 382);
	  COL_TRI(96, 93, 533);
	  COL_TRI(382, 537, 538);
	  COL_TRI(382, 536, 537);
	  COL_TRI_INIT(SURFACE_BURNING, 82);
	  COL_TRI(41, 38, 72);
	  COL_TRI(73, 35, 41);
	  COL_TRI(74, 38, 37);
	  COL_TRI(72, 38, 75);
	  COL_TRI(76, 72, 75);
	  COL_TRI(77, 41, 72);
	  COL_TRI(73, 78, 75);
	  COL_TRI(79, 80, 73);
	  COL_TRI(77, 73, 41);
	  COL_TRI(78, 76, 75);
	  COL_TRI(74, 37, 29);
	  COL_TRI(30, 73, 84);
	  COL_TRI(73, 30, 35);
	  COL_TRI(85, 29, 30);
	  COL_TRI(86, 29, 85);
	  COL_TRI(87, 86, 85);
	  COL_TRI(85, 30, 84);
	  COL_TRI(85, 97, 123);
	  COL_TRI(85, 123, 87);
	  COL_TRI(95, 92, 74);
	  COL_TRI(88, 74, 29);
	  COL_TRI(89, 90, 74);
	  COL_TRI(90, 38, 74);
	  COL_TRI(91, 94, 74);
	  COL_TRI(91, 74, 124);
	  COL_TRI(88, 95, 74);
	  COL_TRI(92, 125, 74);
	  COL_TRI(93, 74, 125);
	  COL_TRI(93, 97, 74);
	  COL_TRI(94, 89, 74);
	  COL_TRI(73, 80, 83);
	  COL_TRI(96, 98, 123);
	  COL_TRI(97, 96, 123);
	  COL_TRI(98, 92, 123);
	  COL_TRI(92, 98, 125);
	  COL_TRI(93, 96, 97);
	  COL_TRI(86, 88, 29);
	  COL_TRI(80, 99, 83);
	  COL_TRI(81, 79, 73);
	  COL_TRI(81, 73, 82);
	  COL_TRI(83, 82, 128);
	  COL_TRI(100, 82, 83);
	  COL_TRI(99, 100, 83);
	  COL_TRI(83, 110, 75);
	  COL_TRI(83, 126, 110);
	  COL_TRI(83, 127, 126);
	  COL_TRI(83, 128, 127);
	  COL_TRI(101, 81, 82);
	  COL_TRI(100, 101, 82);
	  COL_TRI(82, 73, 75);
	  COL_TRI(102, 82, 75);
	  COL_TRI(73, 77, 78);
	  COL_TRI(103, 105, 38);
	  COL_TRI(104, 103, 38);
	  COL_TRI(90, 104, 38);
	  COL_TRI(105, 106, 38);
	  COL_TRI(106, 107, 38);
	  COL_TRI(107, 108, 38);
	  COL_TRI(108, 109, 38);
	  COL_TRI(109, 75, 38);
	  COL_TRI(110, 102, 75);
	  COL_TRI(111, 124, 75);
	  COL_TRI(112, 75, 109);
	  COL_TRI(112, 111, 75);
	  COL_TRI(102, 129, 82);
	  COL_TRI(102, 114, 129);
	  COL_TRI(113, 130, 129);
	  COL_TRI(114, 113, 129);
	  COL_TRI(115, 131, 132);
	  COL_TRI(115, 132, 133);
	  COL_TRI(116, 115, 133);
	  COL_TRI(117, 116, 133);
	  COL_TRI(118, 117, 133);
	  COL_TRI(118, 133, 111);
	  COL_TRI(117, 119, 116);
	  COL_TRI(119, 89, 116);
	  COL_TRI(119, 90, 89);
	  COL_TRI(112, 118, 111);
	  COL_TRI(111, 120, 124);
	  COL_TRI(122, 91, 124);
	  COL_TRI(120, 121, 124);
	  COL_TRI(121, 122, 124);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 6);
	  COL_TRI(484, 288, 282);
	  COL_TRI(484, 282, 483);
	  COL_TRI(288, 482, 284);
	  COL_TRI(288, 284, 282);
	  COL_TRI(482, 481, 480);
	  COL_TRI(482, 480, 284);
	  COL_TRI_INIT(SURFACE_WALL_MISC, 106);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(3, 0, 4);
	  COL_TRI(5, 4, 0);
	  COL_TRI(0, 6, 5);
	  COL_TRI(2, 7, 0);
	  COL_TRI(7, 6, 0);
	  COL_TRI(5, 8, 4);
	  COL_TRI(5, 9, 8);
	  COL_TRI(8, 10, 11);
	  COL_TRI(8, 11, 4);
	  COL_TRI(3, 4, 11);
	  COL_TRI(2, 12, 13);
	  COL_TRI(2, 13, 7);
	  COL_TRI(10, 3, 11);
	  COL_TRI(26, 55, 16);
	  COL_TRI(14, 15, 28);
	  COL_TRI(15, 27, 28);
	  COL_TRI(15, 17, 27);
	  COL_TRI(14, 53, 15);
	  COL_TRI(15, 54, 17);
	  COL_TRI(15, 53, 54);
	  COL_TRI(16, 54, 53);
	  COL_TRI(16, 55, 54);
	  COL_TRI(17, 26, 27);
	  COL_TRI(16, 53, 56);
	  COL_TRI(14, 56, 53);
	  COL_TRI(18, 19, 21);
	  COL_TRI(18, 57, 19);
	  COL_TRI(26, 16, 27);
	  COL_TRI(20, 61, 60);
	  COL_TRI(20, 58, 61);
	  COL_TRI(20, 60, 59);
	  COL_TRI(21, 20, 22);
	  COL_TRI(19, 20, 21);
	  COL_TRI(19, 58, 20);
	  COL_TRI(22, 20, 59);
	  COL_TRI(18, 21, 23);
	  COL_TRI(21, 22, 23);
	  COL_TRI(23, 22, 56);
	  COL_TRI(22, 59, 24);
	  COL_TRI(24, 56, 22);
	  COL_TRI(25, 23, 14);
	  COL_TRI(25, 18, 23);
	  COL_TRI(23, 56, 14);
	  COL_TRI(25, 59, 60);
	  COL_TRI(25, 60, 18);
	  COL_TRI(18, 60, 61);
	  COL_TRI(30, 31, 35);
	  COL_TRI(24, 16, 56);
	  COL_TRI(14, 28, 25);
	  COL_TRI(27, 16, 24);
	  COL_TRI(27, 24, 28);
	  COL_TRI(28, 24, 59);
	  COL_TRI(28, 59, 25);
	  COL_TRI(18, 61, 57);
	  COL_TRI(29, 31, 30);
	  COL_TRI(29, 33, 31);
	  COL_TRI(31, 36, 35);
	  COL_TRI(32, 36, 31);
	  COL_TRI(33, 34, 31);
	  COL_TRI(34, 32, 31);
	  COL_TRI(35, 42, 41);
	  COL_TRI(35, 36, 42);
	  COL_TRI(32, 43, 36);
	  COL_TRI(36, 44, 42);
	  COL_TRI(36, 43, 44);
	  COL_TRI(37, 33, 29);
	  COL_TRI(37, 40, 33);
	  COL_TRI(33, 46, 34);
	  COL_TRI(33, 40, 46);
	  COL_TRI(32, 64, 43);
	  COL_TRI(38, 39, 37);
	  COL_TRI(39, 40, 37);
	  COL_TRI(40, 39, 46);
	  COL_TRI(41, 42, 38);
	  COL_TRI(42, 39, 38);
	  COL_TRI(39, 45, 46);
	  COL_TRI(42, 45, 39);
	  COL_TRI(42, 44, 45);
	  COL_TRI(43, 62, 44);
	  COL_TRI(44, 63, 45);
	  COL_TRI(44, 62, 63);
	  COL_TRI(43, 64, 62);
	  COL_TRI(45, 47, 46);
	  COL_TRI(45, 63, 47);
	  COL_TRI(46, 47, 65);
	  COL_TRI(46, 65, 34);
	  COL_TRI(32, 66, 64);
	  COL_TRI(34, 66, 32);
	  COL_TRI(34, 65, 66);
	  COL_TRI(47, 66, 65);
	  COL_TRI(47, 64, 66);
	  COL_TRI(47, 62, 64);
	  COL_TRI(47, 63, 62);
	  COL_TRI(48, 67, 50);
	  COL_TRI(49, 68, 48);
	  COL_TRI(48, 68, 67);
	  COL_TRI(49, 69, 68);
	  COL_TRI(50, 67, 70);
	  COL_TRI(50, 70, 51);
	  COL_TRI(51, 70, 69);
	  COL_TRI(51, 69, 49);
	  COL_TRI(1, 3, 52);
	  COL_TRI(1, 52, 71);
	  COL_TRI(10, 52, 3);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(1);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start, /*pos*/ -3839, 154, 6272, /*yaw*/ 64); // unused, probably an early way to set initial position
	  COL_END();
	}

	function lll_seg7_collision_hexagonal_platform() {
	  COL_INIT();
	  COL_VERTEX_INIT(0xC);
	  COL_VERTEX(0, 0, -895);
	  COL_VERTEX(768, 307, -383);
	  COL_VERTEX(768, 0, -383);
	  COL_VERTEX(768, 307, 384);
	  COL_VERTEX(768, 0, 384);
	  COL_VERTEX(0, 307, -895);
	  COL_VERTEX(0, 307, 896);
	  COL_VERTEX(0, 0, 896);
	  COL_VERTEX(-767, 307, 384);
	  COL_VERTEX(-767, 0, 384);
	  COL_VERTEX(-767, 307, -383);
	  COL_VERTEX(-767, 0, -383);
	  COL_TRI_INIT(SURFACE_DEFAULT, 16);
	  COL_TRI(0, 1, 2);
	  COL_TRI(2, 1, 3);
	  COL_TRI(2, 3, 4);
	  COL_TRI(0, 5, 1);
	  COL_TRI(5, 3, 1);
	  COL_TRI(5, 6, 3);
	  COL_TRI(4, 3, 6);
	  COL_TRI(4, 6, 7);
	  COL_TRI(5, 8, 6);
	  COL_TRI(7, 6, 8);
	  COL_TRI(7, 8, 9);
	  COL_TRI(5, 10, 8);
	  COL_TRI(9, 8, 10);
	  COL_TRI(9, 10, 11);
	  COL_TRI(11, 10, 5);
	  COL_TRI(11, 5, 0);
	  COL_TRI_STOP();
	  COL_END();
	}

	function lll_seg7_area_2_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x22F);
	  COL_VERTEX(2601, 218, -533);
	  COL_VERTEX(2943, 179, -787);
	  COL_VERTEX(2297, 179, -997);
	  COL_VERTEX(2419, 179, -1227);
	  COL_VERTEX(2554, 159, -1461);
	  COL_VERTEX(2112, 190, -1381);
	  COL_VERTEX(1866, 179, -1657);
	  COL_VERTEX(1922, 179, -1896);
	  COL_VERTEX(2641, 518, 708);
	  COL_VERTEX(2943, 518, 788);
	  COL_VERTEX(2697, 400, 223);
	  COL_VERTEX(1831, 855, 1831);
	  COL_VERTEX(2154, 978, 2154);
	  COL_VERTEX(2154, 855, 2154);
	  COL_VERTEX(645, 1029, 2328);
	  COL_VERTEX(788, 1152, 2943);
	  COL_VERTEX(-787, 1203, 2943);
	  COL_VERTEX(-787, 1562, 2943);
	  COL_VERTEX(-1719, 1613, 1720);
	  COL_VERTEX(-2942, 2268, -787);
	  COL_VERTEX(-2348, 2268, -628);
	  COL_VERTEX(-2153, 2391, -2153);
	  COL_VERTEX(-2153, 2442, -2153);
	  COL_VERTEX(-1719, 2442, -1719);
	  COL_VERTEX(2411, 3539, -480);
	  COL_VERTEX(2943, 3539, -787);
	  COL_VERTEX(1831, 978, 1831);
	  COL_VERTEX(645, 978, 2328);
	  COL_VERTEX(-787, 1152, 2328);
	  COL_VERTEX(-1719, 2391, -1719);
	  COL_VERTEX(-2942, 2217, -787);
	  COL_VERTEX(-2942, 128, -787);
	  COL_VERTEX(-669, 2391, -2500);
	  COL_VERTEX(-787, 128, -2942);
	  COL_VERTEX(-2153, 128, 2154);
	  COL_VERTEX(-787, 128, 2943);
	  COL_VERTEX(788, 128, 2943);
	  COL_VERTEX(1831, 804, 1831);
	  COL_VERTEX(2943, 128, 788);
	  COL_VERTEX(2641, 466, 708);
	  COL_VERTEX(1704, 3463, -1703);
	  COL_VERTEX(2154, 3463, -2153);
	  COL_VERTEX(2154, 179, -2153);
	  COL_VERTEX(-1874, 1679, 1252);
	  COL_VERTEX(-2255, 1679, 1265);
	  COL_VERTEX(-1741, 1679, 1538);
	  COL_VERTEX(-1950, 1679, 1746);
	  COL_VERTEX(-2370, 1679, 1593);
	  COL_VERTEX(-1950, 1628, 1746);
	  COL_VERTEX(-1741, 1628, 1538);
	  COL_VERTEX(-2370, 1628, 1593);
	  COL_VERTEX(-2255, 1628, 1265);
	  COL_VERTEX(-1570, 1720, 386);
	  COL_VERTEX(-1317, 1720, 631);
	  COL_VERTEX(-1907, 1720, 1054);
	  COL_VERTEX(-1421, 1720, 1096);
	  COL_VERTEX(-1972, 1720, 613);
	  COL_VERTEX(-1725, 1268, 709);
	  COL_VERTEX(-1317, 1669, 631);
	  COL_VERTEX(-1421, 1669, 1096);
	  COL_VERTEX(-1907, 1669, 1054);
	  COL_VERTEX(-2032, 1864, 695);
	  COL_VERTEX(-2090, 1864, 1124);
	  COL_VERTEX(-2406, 1864, 729);
	  COL_VERTEX(-2492, 1864, 967);
	  COL_VERTEX(-2238, 1542, 934);
	  COL_VERTEX(-2090, 1812, 1124);
	  COL_VERTEX(-2295, 1905, -410);
	  COL_VERTEX(-2110, 1853, -520);
	  COL_VERTEX(-1809, 1905, -365);
	  COL_VERTEX(-1940, 1905, -25);
	  COL_VERTEX(-2321, 1905, -173);
	  COL_VERTEX(-2086, 1591, -225);
	  COL_VERTEX(-1940, 1853, -25);
	  COL_VERTEX(-2321, 1853, -173);
	  COL_VERTEX(-2295, 1853, -410);
	  COL_VERTEX(-2275, 1981, 66);
	  COL_VERTEX(-2046, 1981, 475);
	  COL_VERTEX(-2275, 1930, 66);
	  COL_VERTEX(-2219, 1981, 663);
	  COL_VERTEX(-2621, 1981, 551);
	  COL_VERTEX(-2659, 1981, 95);
	  COL_VERTEX(-2046, 1930, 475);
	  COL_VERTEX(-2363, 1799, 402);
	  COL_VERTEX(-2659, 1930, 95);
	  COL_VERTEX(-2621, 1930, 551);
	  COL_VERTEX(-2457, 2089, -488);
	  COL_VERTEX(-2389, 2089, -202);
	  COL_VERTEX(-2837, 2038, -257);
	  COL_VERTEX(-2644, 2089, -36);
	  COL_VERTEX(-2879, 2089, -510);
	  COL_VERTEX(-2644, 2038, -36);
	  COL_VERTEX(-2389, 2038, -202);
	  COL_VERTEX(-2572, 1792, -255);
	  COL_VERTEX(-2457, 2038, -488);
	  COL_VERTEX(-2879, 2038, -510);
	  COL_VERTEX(1032, 2972, -2724);
	  COL_VERTEX(1099, 2972, -2724);
	  COL_VERTEX(1109, 2972, -2642);
	  COL_VERTEX(986, 2972, -2691);
	  COL_VERTEX(1109, 2921, -2642);
	  COL_VERTEX(1065, 2879, -2673);
	  COL_VERTEX(1032, 2921, -2724);
	  COL_VERTEX(1099, 2921, -2724);
	  COL_VERTEX(1032, 2972, -2622);
	  COL_VERTEX(1022, 3078, -2335);
	  COL_VERTEX(1125, 3078, -2382);
	  COL_VERTEX(1245, 3078, -2346);
	  COL_VERTEX(1254, 3078, -2193);
	  COL_VERTEX(1100, 3078, -2138);
	  COL_VERTEX(975, 3078, -2252);
	  COL_VERTEX(1100, 3027, -2138);
	  COL_VERTEX(1254, 3027, -2193);
	  COL_VERTEX(975, 3027, -2252);
	  COL_VERTEX(1125, 3027, -2382);
	  COL_VERTEX(1022, 3027, -2335);
	  COL_VERTEX(1408, 3222, -2260);
	  COL_VERTEX(1520, 3222, -2259);
	  COL_VERTEX(1536, 3222, -2123);
	  COL_VERTEX(1332, 3222, -2205);
	  COL_VERTEX(1463, 3115, -2175);
	  COL_VERTEX(1536, 3171, -2123);
	  COL_VERTEX(1408, 3171, -2260);
	  COL_VERTEX(1520, 3171, -2259);
	  COL_VERTEX(1407, 3222, -2090);
	  COL_VERTEX(763, 1126, -98);
	  COL_VERTEX(830, 1126, -97);
	  COL_VERTEX(840, 1126, -15);
	  COL_VERTEX(718, 1126, -64);
	  COL_VERTEX(797, 1033, -46);
	  COL_VERTEX(840, 1075, -15);
	  COL_VERTEX(763, 1075, -98);
	  COL_VERTEX(830, 1075, -97);
	  COL_VERTEX(763, 1126, 4);
	  COL_VERTEX(876, 2150, 327);
	  COL_VERTEX(624, 2150, 82);
	  COL_VERTEX(286, 2150, 750);
	  COL_VERTEX(772, 2150, 792);
	  COL_VERTEX(221, 2150, 309);
	  COL_VERTEX(876, 2099, 327);
	  COL_VERTEX(468, 1698, 405);
	  COL_VERTEX(772, 2099, 792);
	  COL_VERTEX(286, 2099, 750);
	  COL_VERTEX(472, 3028, 894);
	  COL_VERTEX(921, 3028, 808);
	  COL_VERTEX(608, 3028, 1457);
	  COL_VERTEX(991, 2976, 1187);
	  COL_VERTEX(403, 3028, 1305);
	  COL_VERTEX(608, 2976, 1457);
	  COL_VERTEX(647, 2845, 1135);
	  COL_VERTEX(921, 2976, 808);
	  COL_VERTEX(472, 2976, 894);
	  COL_VERTEX(1021, 3130, 1151);
	  COL_VERTEX(1132, 3130, 1131);
	  COL_VERTEX(1211, 3130, 1346);
	  COL_VERTEX(1240, 3130, 1195);
	  COL_VERTEX(1048, 3130, 1362);
	  COL_VERTEX(955, 3130, 1220);
	  COL_VERTEX(1211, 3079, 1346);
	  COL_VERTEX(1048, 3079, 1362);
	  COL_VERTEX(955, 3079, 1220);
	  COL_VERTEX(1132, 3079, 1131);
	  COL_VERTEX(1021, 3079, 1151);
	  COL_VERTEX(1266, 3202, 1191);
	  COL_VERTEX(1360, 3202, 1204);
	  COL_VERTEX(1356, 3202, 1391);
	  COL_VERTEX(1439, 3202, 1282);
	  COL_VERTEX(1340, 3095, 1304);
	  COL_VERTEX(1356, 3151, 1391);
	  COL_VERTEX(1360, 3151, 1204);
	  COL_VERTEX(1439, 3151, 1282);
	  COL_VERTEX(1240, 3202, 1326);
	  COL_VERTEX(1568, 3181, 1227);
	  COL_VERTEX(1568, 3232, 1227);
	  COL_VERTEX(2034, 3232, 1185);
	  COL_VERTEX(2136, 3232, 1418);
	  COL_VERTEX(1870, 3232, 1740);
	  COL_VERTEX(1438, 3232, 1590);
	  COL_VERTEX(2034, 3181, 1185);
	  COL_VERTEX(1840, 3050, 1444);
	  COL_VERTEX(1438, 3181, 1590);
	  COL_VERTEX(1870, 3181, 1740);
	  COL_VERTEX(-100, 82, -1325);
	  COL_VERTEX(-149, 82, -1492);
	  COL_VERTEX(272, 82, -1355);
	  COL_VERTEX(694, 82, -1310);
	  COL_VERTEX(1063, 82, -1465);
	  COL_VERTEX(1251, 82, -1991);
	  COL_VERTEX(1569, 82, -1978);
	  COL_VERTEX(1683, 0, -1866);
	  COL_VERTEX(83, 82, -1558);
	  COL_VERTEX(334, 82, -1565);
	  COL_VERTEX(549, 82, -1588);
	  COL_VERTEX(812, 82, -1638);
	  COL_VERTEX(996, 82, -1725);
	  COL_VERTEX(1075, 82, -2032);
	  COL_VERTEX(1211, 82, -2222);
	  COL_VERTEX(1610, 82, -2166);
	  COL_VERTEX(-1246, 0, -699);
	  COL_VERTEX(-984, 0, -615);
	  COL_VERTEX(-1386, 0, -1060);
	  COL_VERTEX(-776, 0, -615);
	  COL_VERTEX(-546, 0, -786);
	  COL_VERTEX(-663, 102, -865);
	  COL_VERTEX(-656, 102, -1042);
	  COL_VERTEX(-536, 0, -1039);
	  COL_VERTEX(-488, 0, -1178);
	  COL_VERTEX(-623, 103, -1140);
	  COL_VERTEX(-1008, 0, -1482);
	  COL_VERTEX(-1313, 0, -1368);
	  COL_VERTEX(-987, 103, -1352);
	  COL_VERTEX(-801, 0, -1409);
	  COL_VERTEX(-604, 0, -1392);
	  COL_VERTEX(-704, 103, -1289);
	  COL_VERTEX(-842, 103, -1301);
	  COL_VERTEX(-1201, 103, -1273);
	  COL_VERTEX(1507, 49, -1190);
	  COL_VERTEX(1569, 307, -1149);
	  COL_VERTEX(1621, 0, -1243);
	  COL_VERTEX(1504, 51, -1085);
	  COL_VERTEX(1452, 0, -1046);
	  COL_VERTEX(1606, 0, -997);
	  COL_VERTEX(1565, 54, -1056);
	  COL_VERTEX(1392, 0, -1283);
	  COL_VERTEX(1442, 28, -1272);
	  COL_VERTEX(1492, 184, -1253);
	  COL_VERTEX(1447, 30, -1230);
	  COL_VERTEX(-1457, 102, 813);
	  COL_VERTEX(-1037, 0, 741);
	  COL_VERTEX(-1383, 0, 1047);
	  COL_VERTEX(-1300, 80, 673);
	  COL_VERTEX(-1472, 89, 366);
	  COL_VERTEX(-1415, 0, 130);
	  COL_VERTEX(-1988, 0, 248);
	  COL_VERTEX(-1817, 0, 1021);
	  COL_VERTEX(-2120, 0, 611);
	  COL_VERTEX(-1145, 102, 456);
	  COL_VERTEX(-994, 0, 418);
	  COL_VERTEX(-1741, 0, 1511);
	  COL_VERTEX(-1684, 102, 1704);
	  COL_VERTEX(-1602, 102, 1563);
	  COL_VERTEX(-1300, 0, 1322);
	  COL_VERTEX(-1166, 102, 1583);
	  COL_VERTEX(-1015, 0, 1545);
	  COL_VERTEX(-939, 0, 1785);
	  COL_VERTEX(-1261, 0, 2004);
	  COL_VERTEX(-1314, 102, 1858);
	  COL_VERTEX(-1570, 0, 1928);
	  COL_VERTEX(-1878, 0, 1747);
	  COL_VERTEX(-1367, 0, -632);
	  COL_VERTEX(-1410, 26, -611);
	  COL_VERTEX(-1564, 0, -734);
	  COL_VERTEX(-1578, 26, -699);
	  COL_VERTEX(-1465, 26, -323);
	  COL_VERTEX(-1866, 26, -189);
	  COL_VERTEX(-1942, 0, -641);
	  COL_VERTEX(-1901, 26, -619);
	  COL_VERTEX(-2038, 0, -303);
	  COL_VERTEX(-1983, 26, -330);
	  COL_VERTEX(-1670, 26, -199);
	  COL_VERTEX(-1901, 0, -138);
	  COL_VERTEX(-1671, 0, -150);
	  COL_VERTEX(-1431, 0, -295);
	  COL_VERTEX(-787, 2442, -2942);
	  COL_VERTEX(-353, 2442, -2693);
	  COL_VERTEX(-223, 2442, -2347);
	  COL_VERTEX(661, 2606, -2485);
	  COL_VERTEX(443, 2496, -2449);
	  COL_VERTEX(774, 2554, -2563);
	  COL_VERTEX(583, 2606, -2942);
	  COL_VERTEX(-241, 2454, -2634);
	  COL_VERTEX(-507, 2391, -2942);
	  COL_VERTEX(-223, 2391, -2347);
	  COL_VERTEX(-353, 2391, -2693);
	  COL_VERTEX(315, 2541, -2634);
	  COL_VERTEX(377, 2553, -2663);
	  COL_VERTEX(583, 2352, -2942);
	  COL_VERTEX(774, 2606, -2563);
	  COL_VERTEX(844, 2606, -2742);
	  COL_VERTEX(844, 2554, -2742);
	  COL_VERTEX(2374, 3760, -1651);
	  COL_VERTEX(2374, 3862, -1651);
	  COL_VERTEX(2273, 3760, -1709);
	  COL_VERTEX(2353, 3862, -1730);
	  COL_VERTEX(2004, 3657, -1451);
	  COL_VERTEX(1963, 3657, -1522);
	  COL_VERTEX(1892, 3657, -1481);
	  COL_VERTEX(1892, 3555, -1481);
	  COL_VERTEX(2004, 3555, -1451);
	  COL_VERTEX(2264, 3760, -1696);
	  COL_VERTEX(2273, 3862, -1709);
	  COL_VERTEX(2264, 3555, -1696);
	  COL_VERTEX(2420, 3555, -1692);
	  COL_VERTEX(2295, 3760, -1630);
	  COL_VERTEX(2114, 3621, -1186);
	  COL_VERTEX(2003, 3621, -1256);
	  COL_VERTEX(2005, 3539, -1290);
	  COL_VERTEX(2005, 3621, -1290);
	  COL_VERTEX(2076, 3539, -1330);
	  COL_VERTEX(2114, 3539, -1186);
	  COL_VERTEX(1923, 3539, -1374);
	  COL_VERTEX(2040, 3539, -1442);
	  COL_VERTEX(1929, 3555, -1399);
	  COL_VERTEX(2015, 3555, -1448);
	  COL_VERTEX(1966, 3555, -1534);
	  COL_VERTEX(1972, 3539, -1559);
	  COL_VERTEX(2228, 3539, -1706);
	  COL_VERTEX(2252, 3555, -1700);
	  COL_VERTEX(2375, 3555, -1770);
	  COL_VERTEX(2434, 3539, -1669);
	  COL_VERTEX(1937, 3539, -1413);
	  COL_VERTEX(2076, 3621, -1330);
	  COL_VERTEX(2007, 3621, -1454);
	  COL_VERTEX(2187, 3539, -990);
	  COL_VERTEX(2613, 3539, -1236);
	  COL_VERTEX(2433, 3539, -564);
	  COL_VERTEX(2859, 3539, -810);
	  COL_VERTEX(2254, 3591, -972);
	  COL_VERTEX(2451, 3591, -631);
	  COL_VERTEX(2595, 3591, -1168);
	  COL_VERTEX(2460, 3591, -665);
	  COL_VERTEX(2586, 3591, -1135);
	  COL_VERTEX(2758, 3591, -837);
	  COL_VERTEX(2424, 3539, -1268);
	  COL_VERTEX(2254, 3539, -1170);
	  COL_VERTEX(2302, 690, 1342);
	  COL_VERTEX(2154, 1029, 2154);
	  COL_VERTEX(1831, 1029, 1831);
	  COL_VERTEX(788, 1029, 2943);
	  COL_VERTEX(645, 1152, 2328);
	  COL_VERTEX(645, 1203, 2328);
	  COL_VERTEX(-787, 1203, 2328);
	  COL_VERTEX(788, 1203, 2943);
	  COL_VERTEX(-787, 1562, 2328);
	  COL_VERTEX(-2153, 1613, 2154);
	  COL_VERTEX(-787, 1613, 2943);
	  COL_VERTEX(-787, 1613, 2328);
	  COL_VERTEX(-2153, 2268, -2153);
	  COL_VERTEX(-1719, 2268, -1719);
	  COL_VERTEX(-669, 2442, -2500);
	  COL_VERTEX(1704, 3539, -1703);
	  COL_VERTEX(2154, 3539, -2153);
	  COL_VERTEX(-1719, 2217, -1719);
	  COL_VERTEX(-1719, 1562, 1720);
	  COL_VERTEX(-2348, 2217, -628);
	  COL_VERTEX(-2153, 128, -2153);
	  COL_VERTEX(2154, 128, 2154);
	  COL_VERTEX(-2153, 1562, 2154);
	  COL_VERTEX(-787, 2391, -2942);
	  COL_VERTEX(2302, 639, 1342);
	  COL_VERTEX(2697, 349, 223);
	  COL_VERTEX(2601, 167, -533);
	  COL_VERTEX(2154, 2121, -2153);
	  COL_VERTEX(2943, 2121, -787);
	  COL_VERTEX(2411, 3463, -480);
	  COL_VERTEX(-1874, 1628, 1252);
	  COL_VERTEX(-2102, 1341, 1520);
	  COL_VERTEX(-1972, 1669, 613);
	  COL_VERTEX(-1570, 1669, 386);
	  COL_VERTEX(-2406, 1812, 729);
	  COL_VERTEX(-2032, 1812, 695);
	  COL_VERTEX(-2492, 1812, 967);
	  COL_VERTEX(-2110, 1905, -520);
	  COL_VERTEX(-1809, 1853, -365);
	  COL_VERTEX(-2219, 1930, 663);
	  COL_VERTEX(-2837, 2089, -257);
	  COL_VERTEX(986, 2921, -2691);
	  COL_VERTEX(1032, 2921, -2622);
	  COL_VERTEX(1245, 3027, -2346);
	  COL_VERTEX(1108, 2977, -2271);
	  COL_VERTEX(1332, 3171, -2205);
	  COL_VERTEX(1407, 3171, -2090);
	  COL_VERTEX(718, 1075, -64);
	  COL_VERTEX(763, 1075, 4);
	  COL_VERTEX(624, 2099, 82);
	  COL_VERTEX(221, 2099, 309);
	  COL_VERTEX(991, 3028, 1187);
	  COL_VERTEX(403, 2976, 1305);
	  COL_VERTEX(1089, 3028, 1235);
	  COL_VERTEX(1240, 3079, 1195);
	  COL_VERTEX(1240, 3151, 1326);
	  COL_VERTEX(1266, 3151, 1191);
	  COL_VERTEX(2136, 3181, 1418);
	  COL_VERTEX(1413, 0, -1841);
	  COL_VERTEX(1708, 0, -2241);
	  COL_VERTEX(-203, 0, -1241);
	  COL_VERTEX(203, 0, -1250);
	  COL_VERTEX(-292, 0, -1565);
	  COL_VERTEX(724, 0, -1191);
	  COL_VERTEX(1147, 0, -1406);
	  COL_VERTEX(-56, 0, -1627);
	  COL_VERTEX(248, 0, -1650);
	  COL_VERTEX(464, 0, -1691);
	  COL_VERTEX(747, 0, -1727);
	  COL_VERTEX(948, 0, -1849);
	  COL_VERTEX(1006, 0, -2087);
	  COL_VERTEX(1165, 0, -2342);
	  COL_VERTEX(-1251, 103, -1057);
	  COL_VERTEX(-1153, 102, -805);
	  COL_VERTEX(-970, 102, -746);
	  COL_VERTEX(-825, 102, -746);
	  COL_VERTEX(1663, 0, -1131);
	  COL_VERTEX(1564, 0, -1290);
	  COL_VERTEX(1402, 0, -1186);
	  COL_VERTEX(1496, 0, -1319);
	  COL_VERTEX(-1643, 102, 767);
	  COL_VERTEX(-1805, 88, 533);
	  COL_VERTEX(-1828, 102, 659);
	  COL_VERTEX(-1337, 102, 1449);
	  COL_VERTEX(-1121, 102, 1727);
	  COL_VERTEX(-1499, 102, 1813);
	  COL_VERTEX(-1663, 56, -490);
	  COL_VERTEX(-507, 2442, -2942);
	  COL_VERTEX(788, 2606, -2942);
	  COL_VERTEX(443, 2547, -2449);
	  COL_VERTEX(661, 2554, -2485);
	  COL_VERTEX(377, 2502, -2663);
	  COL_VERTEX(583, 2554, -2942);
	  COL_VERTEX(788, 2554, -2942);
	  COL_VERTEX(-241, 2403, -2634);
	  COL_VERTEX(315, 2490, -2634);
	  COL_VERTEX(2295, 3862, -1630);
	  COL_VERTEX(2353, 3760, -1730);
	  COL_VERTEX(1933, 3657, -1410);
	  COL_VERTEX(1933, 3555, -1410);
	  COL_VERTEX(1963, 3555, -1522);
	  COL_VERTEX(2305, 3555, -1625);
	  COL_VERTEX(2305, 3760, -1625);
	  COL_VERTEX(2379, 3760, -1763);
	  COL_VERTEX(2379, 3555, -1763);
	  COL_VERTEX(2420, 3760, -1692);
	  COL_VERTEX(2036, 3621, -1159);
	  COL_VERTEX(2080, 3621, -1283);
	  COL_VERTEX(2036, 3539, -1159);
	  COL_VERTEX(2003, 3539, -1256);
	  COL_VERTEX(2080, 3539, -1283);
	  COL_VERTEX(2007, 3539, -1454);
	  COL_VERTEX(1855, 3539, -1491);
	  COL_VERTEX(1880, 3555, -1484);
	  COL_VERTEX(2295, 3539, -1589);
	  COL_VERTEX(2302, 3555, -1614);
	  COL_VERTEX(2366, 3539, -1786);
	  COL_VERTEX(2425, 3555, -1685);
	  COL_VERTEX(1937, 3621, -1413);
	  COL_VERTEX(2004, 3539, -1451);
	  COL_VERTEX(2004, 3621, -1451);
	  COL_VERTEX(2288, 3591, -963);
	  COL_VERTEX(2792, 3591, -828);
	  COL_VERTEX(2510, 3591, -1119);
	  COL_VERTEX(2485, 3539, -1162);
	  COL_VERTEX(2340, 3591, -1021);
	  COL_VERTEX(2315, 3539, -1064);
	  COL_VERTEX(153, 55, -2784);
	  COL_VERTEX(179, 22, -2717);
	  COL_VERTEX(188, 33, -2720);
	  COL_VERTEX(228, 103, -2759);
	  COL_VERTEX(230, 192, -2785);
	  COL_VERTEX(206, 231, -2809);
	  COL_VERTEX(174, 20, -2713);
	  COL_VERTEX(111, 42, -2755);
	  COL_VERTEX(119, 27, -2729);
	  COL_VERTEX(142, 21, -2721);
	  COL_VERTEX(39, 458, -2942);
	  COL_VERTEX(190, 650, -2942);
	  COL_VERTEX(214, 313, -2829);
	  COL_VERTEX(238, 350, -2828);
	  COL_VERTEX(480, 0, -2942);
	  COL_VERTEX(75, 102, -2775);
	  COL_VERTEX(40, 141, -2784);
	  COL_VERTEX(-138, 0, -2942);
	  COL_VERTEX(448, 0, -2847);
	  COL_VERTEX(277, 261, -2827);
	  COL_VERTEX(260, 294, -2824);
	  COL_VERTEX(349, 84, -2817);
	  COL_VERTEX(250, 318, -2824);
	  COL_VERTEX(405, 25, -2831);
	  COL_VERTEX(272, 132, -2745);
	  COL_VERTEX(324, 52, -2711);
	  COL_VERTEX(269, 280, -2827);
	  COL_VERTEX(184, 25, -2716);
	  COL_VERTEX(239, 51, -2703);
	  COL_VERTEX(181, 23, -2713);
	  COL_VERTEX(179, 22, -2713);
	  COL_VERTEX(199, 0, -2520);
	  COL_VERTEX(135, 0, -2681);
	  COL_VERTEX(100, 38, -2738);
	  COL_VERTEX(5, 0, -2587);
	  COL_VERTEX(77, 46, -2748);
	  COL_VERTEX(28, 77, -2768);
	  COL_VERTEX(41, 51, -2739);
	  COL_VERTEX(20, 60, -2769);
	  COL_VERTEX(-73, 0, -2781);
	  COL_VERTEX(24, 68, -2769);
	  COL_VERTEX(343, 0, -2531);
	  COL_VERTEX(18, 44, -2764);
	  COL_VERTEX(-470, 247, -2942);
	  COL_VERTEX(-546, 0, -2942);
	  COL_VERTEX(-388, 775, -2942);
	  COL_VERTEX(-787, 0, -2942);
	  COL_VERTEX(437, 832, -2942);
	  COL_VERTEX(-389, 2555, -2942);
	  COL_VERTEX(527, 256, -2942);
	  COL_VERTEX(623, 0, -2942);
	  COL_VERTEX(788, 0, -2942);
	  COL_VERTEX(430, 2555, -2942);
	  COL_VERTEX(430, 5248, -2942);
	  COL_VERTEX(-787, 5248, -2942);
	  COL_VERTEX(-429, 5248, -2942);
	  COL_VERTEX(788, 128, -2942);
	  COL_VERTEX(-2942, 128, 788);
	  COL_VERTEX(2411, 5248, -480);
	  COL_VERTEX(2154, 128, -2153);
	  COL_VERTEX(1922, 128, -1896);
	  COL_VERTEX(1866, 128, -1657);
	  COL_VERTEX(2305, 0, -1103);
	  COL_VERTEX(1977, 0, -1848);
	  COL_VERTEX(2144, 0, -1286);
	  COL_VERTEX(2112, 139, -1381);
	  COL_VERTEX(2410, 0, -880);
	  COL_VERTEX(2297, 128, -997);
	  COL_VERTEX(2596, 0, -605);
	  COL_VERTEX(2943, 0, 788);
	  COL_VERTEX(788, 5248, -2942);
	  COL_VERTEX(2154, 0, -2153);
	  COL_VERTEX(2154, 5248, -2153);
	  COL_VERTEX(2943, 5248, -787);
	  COL_VERTEX(-2153, 5248, -2153);
	  COL_VERTEX(-2942, 5248, -787);
	  COL_VERTEX(-2942, 5248, 788);
	  COL_VERTEX(-2153, 5248, 2154);
	  COL_VERTEX(-787, 5248, 2943);
	  COL_VERTEX(788, 5248, 2943);
	  COL_VERTEX(2154, 5248, 2154);
	  COL_VERTEX(2943, 5248, 788);
	  COL_VERTEX(2011, 0, -1995);
	  COL_VERTEX(1911, 0, -1676);
	  COL_VERTEX(2154, 0, 2154);
	  COL_VERTEX(788, 0, 2943);
	  COL_VERTEX(-787, 0, 2943);
	  COL_VERTEX(-2153, 0, 2154);
	  COL_VERTEX(-2942, 0, 788);
	  COL_VERTEX(-2942, 0, -787);
	  COL_VERTEX(-2153, 0, -2153);
	  COL_VERTEX(527, 256, -2931);
	  COL_VERTEX(562, 0, -2906);
	  COL_VERTEX(623, 0, -2931);
	  COL_VERTEX(138, 946, -2870);
	  COL_VERTEX(437, 832, -2931);
	  COL_VERTEX(-388, 775, -2931);
	  COL_VERTEX(-389, 2555, -2931);
	  COL_VERTEX(-470, 247, -2931);
	  COL_VERTEX(-546, 0, -2931);
	  COL_VERTEX(430, 2555, -2931);
	  COL_VERTEX(430, 5248, -2931);
	  COL_VERTEX(120, 4229, -2916);
	  COL_VERTEX(1, 2555, -2916);
	  COL_VERTEX(-221, 0, -2835);
	  COL_VERTEX(0, 5248, -2926);
	  COL_VERTEX(-429, 5248, -2931);
	  COL_TRI_INIT(SURFACE_DEFAULT, 127);
	  COL_TRI(469, 462, 495);
	  COL_TRI(495, 496, 469);
	  COL_TRI(497, 462, 463);
	  COL_TRI(497, 495, 462);
	  COL_TRI(498, 495, 497);
	  COL_TRI(498, 496, 495);
	  COL_TRI(499, 500, 497);
	  COL_TRI(498, 497, 500);
	  COL_TRI(463, 499, 497);
	  COL_TRI(501, 502, 503);
	  COL_TRI(502, 501, 466);
	  COL_TRI(499, 501, 503);
	  COL_TRI(463, 501, 499);
	  COL_TRI(466, 501, 463);
	  COL_TRI(508, 511, 524);
	  COL_TRI(499, 504, 500);
	  COL_TRI(504, 499, 503);
	  COL_TRI(500, 504, 505);
	  COL_TRI(504, 522, 505);
	  COL_TRI(504, 503, 522);
	  COL_TRI(500, 505, 507);
	  COL_TRI(498, 500, 506);
	  COL_TRI(500, 507, 506);
	  COL_TRI(508, 503, 523);
	  COL_TRI(508, 524, 522);
	  COL_TRI(22, 29, 23);
	  COL_TRI(25, 524, 341);
	  COL_TRI(25, 525, 524);
	  COL_TRI(263, 506, 526);
	  COL_TRI(263, 526, 22);
	  COL_TRI(337, 526, 527);
	  COL_TRI(22, 21, 29);
	  COL_TRI(337, 527, 19);
	  COL_TRI(31, 527, 528);
	  COL_TRI(19, 344, 20);
	  COL_TRI(19, 30, 344);
	  COL_TRI(31, 528, 509);
	  COL_TRI(509, 528, 529);
	  COL_TRI(509, 529, 34);
	  COL_TRI(334, 529, 530);
	  COL_TRI(334, 530, 335);
	  COL_TRI(18, 343, 334);
	  COL_TRI(343, 347, 334);
	  COL_TRI(16, 530, 531);
	  COL_TRI(335, 333, 336);
	  COL_TRI(335, 17, 333);
	  COL_TRI(16, 531, 332);
	  COL_TRI(328, 531, 532);
	  COL_TRI(336, 333, 343);
	  COL_TRI(336, 343, 18);
	  COL_TRI(13, 533, 9);
	  COL_TRI(332, 329, 330);
	  COL_TRI(332, 15, 329);
	  COL_TRI(328, 532, 326);
	  COL_TRI(13, 532, 533);
	  COL_TRI(326, 26, 327);
	  COL_TRI(326, 12, 26);
	  COL_TRI(1, 9, 533);
	  COL_TRI(510, 354, 533);
	  COL_TRI(353, 1, 533);
	  COL_TRI(354, 353, 533);
	  COL_TRI(340, 354, 24);
	  COL_TRI(340, 40, 354);
	  COL_TRI(24, 510, 525);
	  COL_TRI(352, 1, 353);
	  COL_TRI(352, 4, 1);
	  COL_TRI(42, 4, 352);
	  COL_TRI(24, 525, 25);
	  COL_TRI(42, 511, 7);
	  COL_TRI(511, 512, 7);
	  COL_TRI(512, 511, 523);
	  COL_TRI(7, 513, 6);
	  COL_TRI(7, 512, 513);
	  COL_TRI(513, 512, 534);
	  COL_TRI(512, 523, 534);
	  COL_TRI(513, 517, 5);
	  COL_TRI(513, 5, 6);
	  COL_TRI(514, 513, 516);
	  COL_TRI(514, 517, 513);
	  COL_TRI(517, 2, 5);
	  COL_TRI(517, 519, 2);
	  COL_TRI(518, 517, 514);
	  COL_TRI(518, 519, 517);
	  COL_TRI(519, 0, 2);
	  COL_TRI(519, 351, 0);
	  COL_TRI(520, 519, 518);
	  COL_TRI(520, 351, 519);
	  COL_TRI(0, 350, 10);
	  COL_TRI(0, 351, 350);
	  COL_TRI(521, 351, 520);
	  COL_TRI(521, 38, 351);
	  COL_TRI(330, 329, 28);
	  COL_TRI(350, 8, 10);
	  COL_TRI(350, 39, 8);
	  COL_TRI(8, 349, 325);
	  COL_TRI(8, 39, 349);
	  COL_TRI(349, 11, 325);
	  COL_TRI(349, 37, 11);
	  COL_TRI(327, 26, 27);
	  COL_TRI(327, 27, 14);
	  COL_TRI(330, 28, 331);
	  COL_TRI(20, 344, 342);
	  COL_TRI(20, 342, 338);
	  COL_TRI(23, 29, 32);
	  COL_TRI(23, 32, 339);
	  COL_TRI(341, 41, 340);
	  COL_TRI(34, 540, 509);
	  COL_TRI(41, 40, 340);
	  COL_TRI(36, 537, 538);
	  COL_TRI(346, 537, 36);
	  COL_TRI(36, 538, 35);
	  COL_TRI(35, 538, 539);
	  COL_TRI(35, 539, 34);
	  COL_TRI(346, 536, 537);
	  COL_TRI(34, 539, 540);
	  COL_TRI(509, 540, 541);
	  COL_TRI(509, 541, 31);
	  COL_TRI(31, 541, 542);
	  COL_TRI(31, 542, 345);
	  COL_TRI(345, 542, 498);
	  COL_TRI(345, 498, 33);
	  COL_TRI(508, 523, 511);
	  COL_TRI(516, 513, 535);
	  COL_TRI(38, 536, 346);
	  COL_TRI(38, 521, 536);
	  COL_TRI(515, 513, 534);
	  COL_TRI(513, 515, 535);
	  COL_TRI_INIT(SURFACE_BURNING, 156);
	  COL_TRI(455, 456, 454);
	  COL_TRI(467, 456, 457);
	  COL_TRI(467, 485, 460);
	  COL_TRI(467, 487, 485);
	  COL_TRI(467, 460, 461);
	  COL_TRI(467, 482, 481);
	  COL_TRI(467, 458, 482);
	  COL_TRI(467, 461, 458);
	  COL_TRI(467, 481, 456);
	  COL_TRI(454, 456, 481);
	  COL_TRI(479, 454, 481);
	  COL_TRI(543, 471, 544);
	  COL_TRI(543, 544, 545);
	  COL_TRI(544, 471, 473);
	  COL_TRI(544, 473, 475);
	  COL_TRI(544, 475, 470);
	  COL_TRI(543, 478, 471);
	  COL_TRI(543, 547, 472);
	  COL_TRI(478, 543, 472);
	  COL_TRI(543, 499, 547);
	  COL_TRI(545, 501, 543);
	  COL_TRI(543, 501, 499);
	  COL_TRI(545, 502, 501);
	  COL_TRI(503, 502, 545);
	  COL_TRI(545, 502, 466);
	  COL_TRI(546, 474, 547);
	  COL_TRI(474, 472, 547);
	  COL_TRI(547, 499, 504);
	  COL_TRI(547, 504, 552);
	  COL_TRI(547, 552, 555);
	  COL_TRI(546, 547, 555);
	  COL_TRI(546, 464, 465);
	  COL_TRI(546, 548, 464);
	  COL_TRI(546, 555, 548);
	  COL_TRI(474, 546, 465);
	  COL_TRI(457, 464, 468);
	  COL_TRI(548, 492, 488);
	  COL_TRI(548, 488, 468);
	  COL_TRI(548, 550, 492);
	  COL_TRI(497, 548, 549);
	  COL_TRI(495, 548, 497);
	  COL_TRI(495, 550, 548);
	  COL_TRI(549, 548, 555);
	  COL_TRI(464, 548, 468);
	  COL_TRI(496, 551, 469);
	  COL_TRI(467, 457, 468);
	  COL_TRI(550, 551, 556);
	  COL_TRI(550, 556, 490);
	  COL_TRI(550, 490, 492);
	  COL_TRI(496, 550, 495);
	  COL_TRI(496, 551, 550);
	  COL_TRI(490, 556, 491);
	  COL_TRI(551, 496, 498);
	  COL_TRI(490, 491, 494);
	  COL_TRI(552, 504, 505);
	  COL_TRI(552, 505, 553);
	  COL_TRI(552, 554, 555);
	  COL_TRI(553, 554, 552);
	  COL_TRI(554, 553, 557);
	  COL_TRI(500, 558, 507);
	  COL_TRI(497, 549, 500);
	  COL_TRI(500, 549, 558);
	  COL_TRI(554, 557, 558);
	  COL_TRI(549, 554, 558);
	  COL_TRI(554, 549, 555);
	  COL_TRI(498, 208, 211);
	  COL_TRI(498, 486, 551);
	  COL_TRI(498, 387, 486);
	  COL_TRI(498, 212, 387);
	  COL_TRI(498, 211, 212);
	  COL_TRI(208, 498, 542);
	  COL_TRI(486, 469, 551);
	  COL_TRI(466, 396, 545);
	  COL_TRI(466, 395, 396);
	  COL_TRI(466, 493, 395);
	  COL_TRI(198, 249, 262);
	  COL_TRI(396, 503, 545);
	  COL_TRI(384, 523, 503);
	  COL_TRI(396, 384, 503);
	  COL_TRI(542, 255, 251);
	  COL_TRI(251, 200, 542);
	  COL_TRI(251, 198, 200);
	  COL_TRI(251, 249, 198);
	  COL_TRI(199, 198, 262);
	  COL_TRI(200, 209, 542);
	  COL_TRI(199, 237, 201);
	  COL_TRI(199, 232, 237);
	  COL_TRI(199, 262, 232);
	  COL_TRI(262, 261, 232);
	  COL_TRI(201, 237, 537);
	  COL_TRI(237, 228, 537);
	  COL_TRI(202, 201, 537);
	  COL_TRI(233, 232, 260);
	  COL_TRI(261, 260, 232);
	  COL_TRI(212, 206, 385);
	  COL_TRI(209, 208, 542);
	  COL_TRI(542, 541, 255);
	  COL_TRI(387, 483, 486);
	  COL_TRI(483, 484, 486);
	  COL_TRI(212, 385, 387);
	  COL_TRI(387, 390, 483);
	  COL_TRI(515, 534, 189);
	  COL_TRI(483, 392, 393);
	  COL_TRI(483, 391, 392);
	  COL_TRI(483, 390, 391);
	  COL_TRI(483, 393, 394);
	  COL_TRI(483, 395, 493);
	  COL_TRI(483, 394, 395);
	  COL_TRI(189, 534, 384);
	  COL_TRI(534, 523, 384);
	  COL_TRI(383, 535, 189);
	  COL_TRI(535, 515, 189);
	  COL_TRI(218, 401, 516);
	  COL_TRI(383, 516, 535);
	  COL_TRI(206, 205, 385);
	  COL_TRI(385, 205, 202);
	  COL_TRI(385, 202, 537);
	  COL_TRI(386, 385, 536);
	  COL_TRI(537, 536, 385);
	  COL_TRI(383, 389, 516);
	  COL_TRI(516, 402, 218);
	  COL_TRI(516, 404, 402);
	  COL_TRI(389, 404, 516);
	  COL_TRI(389, 223, 404);
	  COL_TRI(223, 389, 403);
	  COL_TRI(403, 389, 388);
	  COL_TRI(221, 516, 401);
	  COL_TRI(536, 221, 220);
	  COL_TRI(536, 521, 221);
	  COL_TRI(521, 520, 221);
	  COL_TRI(514, 516, 221);
	  COL_TRI(221, 518, 514);
	  COL_TRI(520, 518, 221);
	  COL_TRI(536, 220, 388);
	  COL_TRI(220, 403, 388);
	  COL_TRI(244, 245, 538);
	  COL_TRI(388, 386, 536);
	  COL_TRI(228, 243, 537);
	  COL_TRI(243, 244, 537);
	  COL_TRI(244, 538, 537);
	  COL_TRI(228, 229, 241);
	  COL_TRI(228, 241, 243);
	  COL_TRI(234, 238, 241);
	  COL_TRI(241, 229, 234);
	  COL_TRI(257, 255, 541);
	  COL_TRI(538, 247, 539);
	  COL_TRI(538, 245, 247);
	  COL_TRI(247, 248, 539);
	  COL_TRI(540, 539, 248);
	  COL_TRI(238, 540, 248);
	  COL_TRI(541, 540, 235);
	  COL_TRI(234, 235, 540);
	  COL_TRI(238, 234, 540);
	  COL_TRI(235, 233, 541);
	  COL_TRI(233, 257, 541);
	  COL_TRI(233, 260, 257);
	  COL_TRI_INIT(SURFACE_VERY_SLIPPERY, 74);
	  COL_TRI(452, 453, 454);
	  COL_TRI(454, 455, 452);
	  COL_TRI(456, 457, 452);
	  COL_TRI(458, 453, 452);
	  COL_TRI(459, 460, 452);
	  COL_TRI(461, 452, 460);
	  COL_TRI(459, 452, 462);
	  COL_TRI(458, 452, 461);
	  COL_TRI(452, 463, 462);
	  COL_TRI(455, 456, 452);
	  COL_TRI(452, 457, 463);
	  COL_TRI(457, 464, 463);
	  COL_TRI(463, 464, 465);
	  COL_TRI(463, 465, 466);
	  COL_TRI(457, 456, 465);
	  COL_TRI(465, 464, 457);
	  COL_TRI(465, 474, 466);
	  COL_TRI(462, 467, 459);
	  COL_TRI(462, 468, 467);
	  COL_TRI(469, 468, 462);
	  COL_TRI(470, 466, 475);
	  COL_TRI(470, 475, 493);
	  COL_TRI(471, 466, 478);
	  COL_TRI(472, 478, 466);
	  COL_TRI(471, 473, 466);
	  COL_TRI(473, 475, 466);
	  COL_TRI(474, 472, 466);
	  COL_TRI(476, 465, 456);
	  COL_TRI(475, 477, 493);
	  COL_TRI(475, 473, 477);
	  COL_TRI(476, 473, 471);
	  COL_TRI(477, 473, 476);
	  COL_TRI(476, 471, 478);
	  COL_TRI(478, 472, 476);
	  COL_TRI(476, 472, 474);
	  COL_TRI(476, 474, 465);
	  COL_TRI(476, 455, 454);
	  COL_TRI(476, 456, 455);
	  COL_TRI(485, 459, 487);
	  COL_TRI(453, 479, 454);
	  COL_TRI(454, 480, 476);
	  COL_TRI(479, 480, 454);
	  COL_TRI(481, 479, 453);
	  COL_TRI(453, 482, 481);
	  COL_TRI(482, 453, 458);
	  COL_TRI(483, 480, 479);
	  COL_TRI(483, 479, 481);
	  COL_TRI(481, 482, 483);
	  COL_TRI(483, 482, 458);
	  COL_TRI(483, 458, 484);
	  COL_TRI(484, 458, 461);
	  COL_TRI(484, 461, 460);
	  COL_TRI(459, 485, 460);
	  COL_TRI(484, 460, 486);
	  COL_TRI(460, 485, 486);
	  COL_TRI(485, 487, 486);
	  COL_TRI(486, 487, 489);
	  COL_TRI(487, 467, 489);
	  COL_TRI(467, 487, 459);
	  COL_TRI(467, 468, 489);
	  COL_TRI(488, 468, 469);
	  COL_TRI(489, 468, 488);
	  COL_TRI(490, 492, 469);
	  COL_TRI(469, 494, 490);
	  COL_TRI(491, 494, 469);
	  COL_TRI(492, 488, 469);
	  COL_TRI(489, 488, 492);
	  COL_TRI(489, 492, 490);
	  COL_TRI(489, 490, 494);
	  COL_TRI(486, 494, 491);
	  COL_TRI(486, 489, 494);
	  COL_TRI(480, 477, 476);
	  COL_TRI(493, 477, 483);
	  COL_TRI(477, 480, 483);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 625);
	  COL_TRI(9, 1, 10);
	  COL_TRI(0, 1, 2);
	  COL_TRI(1, 3, 2);
	  COL_TRI(3, 1, 4);
	  COL_TRI(3, 5, 2);
	  COL_TRI(3, 6, 5);
	  COL_TRI(7, 6, 4);
	  COL_TRI(6, 3, 4);
	  COL_TRI(8, 9, 10);
	  COL_TRI(15, 328, 14);
	  COL_TRI(1, 0, 10);
	  COL_TRI(11, 13, 325);
	  COL_TRI(12, 13, 11);
	  COL_TRI(12, 11, 26);
	  COL_TRI(13, 9, 325);
	  COL_TRI(9, 8, 325);
	  COL_TRI(14, 326, 327);
	  COL_TRI(14, 328, 326);
	  COL_TRI(19, 20, 337);
	  COL_TRI(16, 330, 331);
	  COL_TRI(17, 16, 331);
	  COL_TRI(16, 332, 330);
	  COL_TRI(17, 331, 333);
	  COL_TRI(18, 334, 335);
	  COL_TRI(18, 335, 336);
	  COL_TRI(25, 341, 340);
	  COL_TRI(20, 338, 337);
	  COL_TRI(21, 337, 338);
	  COL_TRI(21, 338, 29);
	  COL_TRI(22, 23, 263);
	  COL_TRI(23, 339, 263);
	  COL_TRI(24, 25, 340);
	  COL_TRI(31, 342, 344);
	  COL_TRI(26, 37, 27);
	  COL_TRI(15, 14, 329);
	  COL_TRI(27, 28, 329);
	  COL_TRI(28, 343, 333);
	  COL_TRI(29, 342, 32);
	  COL_TRI(30, 31, 344);
	  COL_TRI(31, 345, 342);
	  COL_TRI(32, 342, 345);
	  COL_TRI(33, 32, 345);
	  COL_TRI(34, 343, 35);
	  COL_TRI(34, 347, 343);
	  COL_TRI(28, 35, 343);
	  COL_TRI(35, 28, 36);
	  COL_TRI(27, 36, 28);
	  COL_TRI(36, 27, 346);
	  COL_TRI(37, 346, 27);
	  COL_TRI(38, 37, 349);
	  COL_TRI(38, 346, 37);
	  COL_TRI(39, 38, 349);
	  COL_TRI(38, 39, 350);
	  COL_TRI(38, 350, 351);
	  COL_TRI(33, 348, 32);
	  COL_TRI(40, 352, 353);
	  COL_TRI(40, 353, 354);
	  COL_TRI(41, 352, 40);
	  COL_TRI(42, 7, 4);
	  COL_TRI(43, 51, 44);
	  COL_TRI(44, 51, 50);
	  COL_TRI(44, 50, 47);
	  COL_TRI(44, 45, 43);
	  COL_TRI(44, 46, 45);
	  COL_TRI(44, 47, 46);
	  COL_TRI(53, 358, 52);
	  COL_TRI(45, 49, 355);
	  COL_TRI(45, 355, 43);
	  COL_TRI(46, 49, 45);
	  COL_TRI(43, 355, 51);
	  COL_TRI(47, 48, 46);
	  COL_TRI(46, 48, 49);
	  COL_TRI(47, 50, 48);
	  COL_TRI(48, 356, 49);
	  COL_TRI(49, 356, 355);
	  COL_TRI(50, 51, 356);
	  COL_TRI(48, 50, 356);
	  COL_TRI(51, 355, 356);
	  COL_TRI(52, 357, 56);
	  COL_TRI(52, 358, 357);
	  COL_TRI(61, 359, 63);
	  COL_TRI(54, 59, 55);
	  COL_TRI(55, 59, 58);
	  COL_TRI(55, 58, 53);
	  COL_TRI(52, 55, 53);
	  COL_TRI(52, 54, 55);
	  COL_TRI(53, 58, 358);
	  COL_TRI(54, 60, 59);
	  COL_TRI(56, 60, 54);
	  COL_TRI(52, 56, 54);
	  COL_TRI(56, 357, 60);
	  COL_TRI(57, 58, 59);
	  COL_TRI(58, 57, 358);
	  COL_TRI(59, 60, 57);
	  COL_TRI(57, 357, 358);
	  COL_TRI(60, 357, 57);
	  COL_TRI(61, 63, 62);
	  COL_TRI(67, 69, 362);
	  COL_TRI(63, 359, 361);
	  COL_TRI(63, 361, 64);
	  COL_TRI(63, 64, 62);
	  COL_TRI(64, 66, 62);
	  COL_TRI(62, 360, 61);
	  COL_TRI(62, 66, 360);
	  COL_TRI(64, 361, 66);
	  COL_TRI(65, 361, 359);
	  COL_TRI(65, 359, 360);
	  COL_TRI(61, 360, 359);
	  COL_TRI(66, 65, 360);
	  COL_TRI(65, 66, 361);
	  COL_TRI(67, 74, 71);
	  COL_TRI(67, 75, 74);
	  COL_TRI(76, 80, 79);
	  COL_TRI(67, 70, 69);
	  COL_TRI(69, 68, 362);
	  COL_TRI(69, 363, 68);
	  COL_TRI(70, 363, 69);
	  COL_TRI(68, 67, 362);
	  COL_TRI(71, 73, 70);
	  COL_TRI(67, 71, 70);
	  COL_TRI(70, 73, 363);
	  COL_TRI(71, 74, 73);
	  COL_TRI(72, 73, 74);
	  COL_TRI(73, 72, 363);
	  COL_TRI(74, 75, 72);
	  COL_TRI(75, 68, 72);
	  COL_TRI(68, 75, 67);
	  COL_TRI(68, 363, 72);
	  COL_TRI(76, 79, 77);
	  COL_TRI(76, 81, 80);
	  COL_TRI(79, 364, 82);
	  COL_TRI(80, 364, 79);
	  COL_TRI(79, 82, 77);
	  COL_TRI(77, 78, 76);
	  COL_TRI(77, 82, 78);
	  COL_TRI(80, 85, 364);
	  COL_TRI(81, 85, 80);
	  COL_TRI(78, 81, 76);
	  COL_TRI(78, 84, 81);
	  COL_TRI(81, 84, 85);
	  COL_TRI(82, 83, 78);
	  COL_TRI(83, 84, 78);
	  COL_TRI(82, 364, 83);
	  COL_TRI(84, 83, 85);
	  COL_TRI(85, 83, 364);
	  COL_TRI(86, 95, 90);
	  COL_TRI(86, 94, 95);
	  COL_TRI(87, 94, 86);
	  COL_TRI(86, 365, 89);
	  COL_TRI(88, 91, 89);
	  COL_TRI(88, 89, 365);
	  COL_TRI(89, 92, 87);
	  COL_TRI(89, 91, 92);
	  COL_TRI(86, 89, 87);
	  COL_TRI(87, 92, 94);
	  COL_TRI(90, 88, 365);
	  COL_TRI(86, 90, 365);
	  COL_TRI(90, 95, 88);
	  COL_TRI(91, 93, 92);
	  COL_TRI(92, 93, 94);
	  COL_TRI(93, 91, 88);
	  COL_TRI(94, 93, 95);
	  COL_TRI(95, 93, 88);
	  COL_TRI(96, 102, 366);
	  COL_TRI(96, 366, 99);
	  COL_TRI(97, 102, 96);
	  COL_TRI(96, 98, 97);
	  COL_TRI(98, 103, 97);
	  COL_TRI(98, 100, 103);
	  COL_TRI(96, 104, 98);
	  COL_TRI(97, 103, 102);
	  COL_TRI(96, 99, 104);
	  COL_TRI(99, 367, 104);
	  COL_TRI(99, 366, 367);
	  COL_TRI(100, 367, 101);
	  COL_TRI(101, 367, 366);
	  COL_TRI(102, 101, 366);
	  COL_TRI(102, 103, 101);
	  COL_TRI(103, 100, 101);
	  COL_TRI(104, 100, 98);
	  COL_TRI(104, 367, 100);
	  COL_TRI(105, 113, 110);
	  COL_TRI(105, 115, 113);
	  COL_TRI(105, 107, 106);
	  COL_TRI(105, 108, 107);
	  COL_TRI(105, 109, 108);
	  COL_TRI(106, 115, 105);
	  COL_TRI(105, 110, 109);
	  COL_TRI(107, 114, 106);
	  COL_TRI(107, 368, 114);
	  COL_TRI(108, 368, 107);
	  COL_TRI(106, 114, 115);
	  COL_TRI(108, 112, 368);
	  COL_TRI(109, 112, 108);
	  COL_TRI(110, 111, 109);
	  COL_TRI(109, 111, 112);
	  COL_TRI(110, 113, 111);
	  COL_TRI(111, 113, 369);
	  COL_TRI(112, 111, 369);
	  COL_TRI(113, 115, 369);
	  COL_TRI(112, 369, 368);
	  COL_TRI(114, 368, 369);
	  COL_TRI(115, 114, 369);
	  COL_TRI(116, 118, 117);
	  COL_TRI(116, 124, 118);
	  COL_TRI(116, 370, 119);
	  COL_TRI(116, 122, 370);
	  COL_TRI(117, 122, 116);
	  COL_TRI(116, 119, 124);
	  COL_TRI(118, 123, 117);
	  COL_TRI(118, 121, 123);
	  COL_TRI(117, 123, 122);
	  COL_TRI(119, 371, 124);
	  COL_TRI(119, 370, 371);
	  COL_TRI(120, 371, 370);
	  COL_TRI(121, 371, 120);
	  COL_TRI(122, 120, 370);
	  COL_TRI(122, 123, 120);
	  COL_TRI(123, 121, 120);
	  COL_TRI(124, 121, 118);
	  COL_TRI(124, 371, 121);
	  COL_TRI(125, 133, 127);
	  COL_TRI(125, 128, 133);
	  COL_TRI(125, 127, 126);
	  COL_TRI(126, 131, 125);
	  COL_TRI(125, 372, 128);
	  COL_TRI(125, 131, 372);
	  COL_TRI(127, 130, 132);
	  COL_TRI(127, 132, 126);
	  COL_TRI(126, 132, 131);
	  COL_TRI(128, 373, 133);
	  COL_TRI(128, 372, 373);
	  COL_TRI(129, 373, 372);
	  COL_TRI(130, 373, 129);
	  COL_TRI(131, 129, 372);
	  COL_TRI(131, 132, 129);
	  COL_TRI(132, 130, 129);
	  COL_TRI(133, 373, 130);
	  COL_TRI(133, 130, 127);
	  COL_TRI(134, 374, 135);
	  COL_TRI(135, 137, 134);
	  COL_TRI(135, 136, 137);
	  COL_TRI(135, 138, 136);
	  COL_TRI(135, 375, 138);
	  COL_TRI(135, 374, 375);
	  COL_TRI(136, 141, 137);
	  COL_TRI(137, 141, 139);
	  COL_TRI(137, 139, 134);
	  COL_TRI(134, 139, 374);
	  COL_TRI(136, 142, 141);
	  COL_TRI(138, 142, 136);
	  COL_TRI(138, 375, 142);
	  COL_TRI(139, 140, 374);
	  COL_TRI(140, 139, 141);
	  COL_TRI(141, 142, 140);
	  COL_TRI(140, 375, 374);
	  COL_TRI(142, 375, 140);
	  COL_TRI(143, 376, 144);
	  COL_TRI(143, 145, 376);
	  COL_TRI(143, 147, 145);
	  COL_TRI(143, 377, 147);
	  COL_TRI(145, 146, 376);
	  COL_TRI(146, 144, 376);
	  COL_TRI(146, 150, 144);
	  COL_TRI(144, 151, 143);
	  COL_TRI(144, 150, 151);
	  COL_TRI(145, 148, 146);
	  COL_TRI(147, 148, 145);
	  COL_TRI(147, 377, 148);
	  COL_TRI(148, 149, 146);
	  COL_TRI(149, 150, 146);
	  COL_TRI(148, 377, 149);
	  COL_TRI(150, 149, 151);
	  COL_TRI(143, 151, 377);
	  COL_TRI(151, 149, 377);
	  COL_TRI(152, 160, 157);
	  COL_TRI(152, 162, 160);
	  COL_TRI(153, 162, 152);
	  COL_TRI(152, 156, 154);
	  COL_TRI(152, 157, 156);
	  COL_TRI(154, 379, 155);
	  COL_TRI(155, 161, 153);
	  COL_TRI(155, 379, 161);
	  COL_TRI(152, 154, 155);
	  COL_TRI(152, 155, 153);
	  COL_TRI(153, 161, 162);
	  COL_TRI(154, 158, 379);
	  COL_TRI(156, 158, 154);
	  COL_TRI(156, 159, 158);
	  COL_TRI(157, 159, 156);
	  COL_TRI(157, 160, 159);
	  COL_TRI(158, 159, 378);
	  COL_TRI(159, 160, 378);
	  COL_TRI(160, 162, 378);
	  COL_TRI(158, 378, 379);
	  COL_TRI(161, 379, 378);
	  COL_TRI(162, 161, 378);
	  COL_TRI(163, 171, 165);
	  COL_TRI(163, 380, 171);
	  COL_TRI(163, 381, 380);
	  COL_TRI(163, 165, 166);
	  COL_TRI(163, 166, 164);
	  COL_TRI(164, 381, 163);
	  COL_TRI(165, 170, 166);
	  COL_TRI(166, 169, 164);
	  COL_TRI(166, 170, 169);
	  COL_TRI(164, 169, 381);
	  COL_TRI(165, 168, 170);
	  COL_TRI(167, 380, 381);
	  COL_TRI(168, 380, 167);
	  COL_TRI(169, 167, 381);
	  COL_TRI(170, 168, 167);
	  COL_TRI(169, 170, 167);
	  COL_TRI(171, 168, 165);
	  COL_TRI(171, 380, 168);
	  COL_TRI(172, 177, 173);
	  COL_TRI(173, 175, 174);
	  COL_TRI(173, 176, 175);
	  COL_TRI(173, 177, 176);
	  COL_TRI(174, 172, 173);
	  COL_TRI(175, 178, 174);
	  COL_TRI(175, 382, 178);
	  COL_TRI(176, 382, 175);
	  COL_TRI(174, 178, 172);
	  COL_TRI(177, 181, 176);
	  COL_TRI(176, 181, 382);
	  COL_TRI(177, 180, 181);
	  COL_TRI(172, 180, 177);
	  COL_TRI(178, 179, 172);
	  COL_TRI(179, 180, 172);
	  COL_TRI(178, 382, 179);
	  COL_TRI(180, 179, 181);
	  COL_TRI(181, 179, 382);
	  COL_TRI(182, 184, 190);
	  COL_TRI(183, 182, 190);
	  COL_TRI(187, 196, 195);
	  COL_TRI(184, 191, 190);
	  COL_TRI(184, 185, 191);
	  COL_TRI(185, 192, 191);
	  COL_TRI(185, 193, 192);
	  COL_TRI(185, 186, 193);
	  COL_TRI(186, 194, 193);
	  COL_TRI(186, 187, 194);
	  COL_TRI(187, 195, 194);
	  COL_TRI(187, 383, 188);
	  COL_TRI(187, 188, 196);
	  COL_TRI(185, 389, 186);
	  COL_TRI(188, 197, 196);
	  COL_TRI(183, 385, 182);
	  COL_TRI(182, 385, 386);
	  COL_TRI(182, 386, 184);
	  COL_TRI(183, 387, 385);
	  COL_TRI(184, 386, 388);
	  COL_TRI(184, 388, 185);
	  COL_TRI(185, 388, 389);
	  COL_TRI(186, 389, 383);
	  COL_TRI(186, 383, 187);
	  COL_TRI(189, 188, 383);
	  COL_TRI(190, 387, 183);
	  COL_TRI(190, 390, 387);
	  COL_TRI(191, 390, 190);
	  COL_TRI(191, 391, 390);
	  COL_TRI(192, 391, 191);
	  COL_TRI(197, 384, 396);
	  COL_TRI(192, 392, 391);
	  COL_TRI(193, 392, 192);
	  COL_TRI(193, 393, 392);
	  COL_TRI(194, 393, 193);
	  COL_TRI(194, 394, 393);
	  COL_TRI(195, 394, 194);
	  COL_TRI(195, 395, 394);
	  COL_TRI(196, 395, 195);
	  COL_TRI(196, 396, 395);
	  COL_TRI(197, 396, 196);
	  COL_TRI(201, 399, 199);
	  COL_TRI(188, 384, 197);
	  COL_TRI(188, 189, 384);
	  COL_TRI(198, 397, 200);
	  COL_TRI(198, 398, 397);
	  COL_TRI(199, 398, 198);
	  COL_TRI(200, 397, 215);
	  COL_TRI(200, 215, 209);
	  COL_TRI(199, 399, 398);
	  COL_TRI(209, 210, 208);
	  COL_TRI(201, 400, 399);
	  COL_TRI(202, 203, 201);
	  COL_TRI(203, 400, 201);
	  COL_TRI(204, 203, 202);
	  COL_TRI(205, 204, 202);
	  COL_TRI(206, 207, 205);
	  COL_TRI(207, 204, 205);
	  COL_TRI(208, 210, 211);
	  COL_TRI(215, 207, 213);
	  COL_TRI(210, 214, 211);
	  COL_TRI(209, 215, 210);
	  COL_TRI(211, 214, 212);
	  COL_TRI(212, 213, 206);
	  COL_TRI(213, 207, 206);
	  COL_TRI(214, 213, 212);
	  COL_TRI(215, 214, 210);
	  COL_TRI(215, 213, 214);
	  COL_TRI(216, 217, 218);
	  COL_TRI(215, 204, 207);
	  COL_TRI(215, 203, 204);
	  COL_TRI(215, 400, 203);
	  COL_TRI(215, 399, 400);
	  COL_TRI(215, 398, 399);
	  COL_TRI(215, 397, 398);
	  COL_TRI(216, 219, 217);
	  COL_TRI(216, 220, 219);
	  COL_TRI(223, 403, 226);
	  COL_TRI(217, 219, 222);
	  COL_TRI(217, 401, 218);
	  COL_TRI(217, 222, 401);
	  COL_TRI(218, 402, 216);
	  COL_TRI(219, 220, 222);
	  COL_TRI(220, 216, 403);
	  COL_TRI(221, 222, 220);
	  COL_TRI(222, 221, 401);
	  COL_TRI(223, 224, 404);
	  COL_TRI(223, 226, 224);
	  COL_TRI(229, 227, 405);
	  COL_TRI(224, 225, 404);
	  COL_TRI(225, 402, 404);
	  COL_TRI(225, 216, 402);
	  COL_TRI(225, 226, 216);
	  COL_TRI(226, 225, 224);
	  COL_TRI(226, 403, 216);
	  COL_TRI(227, 230, 231);
	  COL_TRI(228, 227, 229);
	  COL_TRI(228, 230, 227);
	  COL_TRI(227, 231, 405);
	  COL_TRI(230, 236, 231);
	  COL_TRI(231, 406, 407);
	  COL_TRI(231, 407, 405);
	  COL_TRI(232, 231, 236);
	  COL_TRI(233, 231, 232);
	  COL_TRI(233, 406, 231);
	  COL_TRI(229, 405, 234);
	  COL_TRI(234, 405, 407);
	  COL_TRI(234, 407, 235);
	  COL_TRI(235, 407, 406);
	  COL_TRI(235, 406, 233);
	  COL_TRI(236, 230, 228);
	  COL_TRI(237, 236, 228);
	  COL_TRI(232, 236, 237);
	  COL_TRI(247, 410, 239);
	  COL_TRI(238, 240, 408);
	  COL_TRI(239, 240, 238);
	  COL_TRI(240, 242, 408);
	  COL_TRI(240, 409, 242);
	  COL_TRI(240, 246, 409);
	  COL_TRI(240, 410, 246);
	  COL_TRI(240, 239, 410);
	  COL_TRI(241, 242, 243);
	  COL_TRI(241, 408, 242);
	  COL_TRI(242, 409, 244);
	  COL_TRI(243, 242, 244);
	  COL_TRI(238, 408, 241);
	  COL_TRI(244, 409, 246);
	  COL_TRI(244, 246, 245);
	  COL_TRI(245, 246, 247);
	  COL_TRI(246, 410, 247);
	  COL_TRI(248, 239, 238);
	  COL_TRI(247, 239, 248);
	  COL_TRI(249, 250, 253);
	  COL_TRI(250, 411, 253);
	  COL_TRI(249, 253, 262);
	  COL_TRI(251, 252, 249);
	  COL_TRI(252, 250, 249);
	  COL_TRI(252, 411, 250);
	  COL_TRI(253, 411, 259);
	  COL_TRI(254, 411, 258);
	  COL_TRI(255, 256, 251);
	  COL_TRI(256, 252, 251);
	  COL_TRI(257, 256, 255);
	  COL_TRI(258, 411, 256);
	  COL_TRI(256, 411, 252);
	  COL_TRI(257, 258, 256);
	  COL_TRI(259, 411, 254);
	  COL_TRI(254, 258, 257);
	  COL_TRI(265, 339, 32);
	  COL_TRI(261, 259, 254);
	  COL_TRI(261, 254, 260);
	  COL_TRI(253, 259, 261);
	  COL_TRI(262, 253, 261);
	  COL_TRI(260, 254, 257);
	  COL_TRI(263, 339, 412);
	  COL_TRI(264, 412, 339);
	  COL_TRI(264, 339, 265);
	  COL_TRI(266, 277, 278);
	  COL_TRI(264, 271, 412);
	  COL_TRI(266, 413, 269);
	  COL_TRI(266, 278, 413);
	  COL_TRI(267, 266, 414);
	  COL_TRI(266, 269, 414);
	  COL_TRI(267, 415, 266);
	  COL_TRI(268, 277, 266);
	  COL_TRI(268, 266, 415);
	  COL_TRI(269, 416, 275);
	  COL_TRI(269, 417, 416);
	  COL_TRI(269, 275, 414);
	  COL_TRI(270, 264, 265);
	  COL_TRI(270, 273, 264);
	  COL_TRI(264, 273, 271);
	  COL_TRI(265, 32, 272);
	  COL_TRI(265, 272, 267);
	  COL_TRI(265, 267, 414);
	  COL_TRI(270, 265, 414);
	  COL_TRI(32, 271, 273);
	  COL_TRI(272, 32, 273);
	  COL_TRI(271, 32, 348);
	  COL_TRI(273, 419, 272);
	  COL_TRI(267, 272, 419);
	  COL_TRI(274, 270, 414);
	  COL_TRI(275, 274, 414);
	  COL_TRI(275, 420, 274);
	  COL_TRI(275, 416, 420);
	  COL_TRI(274, 420, 419);
	  COL_TRI(274, 419, 270);
	  COL_TRI(270, 419, 273);
	  COL_TRI(267, 420, 416);
	  COL_TRI(267, 419, 420);
	  COL_TRI(276, 268, 415);
	  COL_TRI(267, 276, 415);
	  COL_TRI(277, 279, 278);
	  COL_TRI(278, 418, 413);
	  COL_TRI(278, 279, 418);
	  COL_TRI(277, 268, 279);
	  COL_TRI(276, 279, 268);
	  COL_TRI(279, 276, 418);
	  COL_TRI(267, 416, 276);
	  COL_TRI(276, 416, 417);
	  COL_TRI(280, 281, 421);
	  COL_TRI(280, 283, 281);
	  COL_TRI(282, 283, 422);
	  COL_TRI(282, 290, 283);
	  COL_TRI(280, 422, 283);
	  COL_TRI(281, 283, 421);
	  COL_TRI(283, 290, 421);
	  COL_TRI(284, 285, 423);
	  COL_TRI(285, 286, 423);
	  COL_TRI(286, 287, 424);
	  COL_TRI(288, 284, 423);
	  COL_TRI(286, 424, 423);
	  COL_TRI(284, 288, 425);
	  COL_TRI(284, 425, 285);
	  COL_TRI(287, 285, 425);
	  COL_TRI(287, 286, 285);
	  COL_TRI(288, 423, 424);
	  COL_TRI(289, 430, 428);
	  COL_TRI(289, 291, 426);
	  COL_TRI(289, 426, 427);
	  COL_TRI(290, 282, 293);
	  COL_TRI(290, 293, 421);
	  COL_TRI(291, 289, 428);
	  COL_TRI(291, 428, 429);
	  COL_TRI(289, 427, 430);
	  COL_TRI(282, 422, 280);
	  COL_TRI(292, 427, 426);
	  COL_TRI(292, 430, 427);
	  COL_TRI(280, 421, 293);
	  COL_TRI(293, 282, 280);
	  COL_TRI(294, 295, 431);
	  COL_TRI(294, 432, 295);
	  COL_TRI(299, 294, 431);
	  COL_TRI(295, 433, 431);
	  COL_TRI(295, 434, 433);
	  COL_TRI(296, 295, 297);
	  COL_TRI(296, 434, 295);
	  COL_TRI(297, 295, 432);
	  COL_TRI(294, 299, 435);
	  COL_TRI(294, 435, 432);
	  COL_TRI(298, 432, 435);
	  COL_TRI(297, 432, 311);
	  COL_TRI(298, 311, 432);
	  COL_TRI(307, 306, 440);
	  COL_TRI(299, 431, 433);
	  COL_TRI(300, 302, 437);
	  COL_TRI(301, 302, 300);
	  COL_TRI(302, 438, 437);
	  COL_TRI(301, 303, 302);
	  COL_TRI(303, 438, 302);
	  COL_TRI(304, 437, 438);
	  COL_TRI(304, 305, 437);
	  COL_TRI(303, 304, 438);
	  COL_TRI(305, 303, 301);
	  COL_TRI(305, 304, 303);
	  COL_TRI(306, 439, 440);
	  COL_TRI(312, 443, 297);
	  COL_TRI(306, 308, 441);
	  COL_TRI(306, 307, 308);
	  COL_TRI(308, 307, 440);
	  COL_TRI(308, 440, 442);
	  COL_TRI(309, 442, 440);
	  COL_TRI(309, 440, 439);
	  COL_TRI(310, 296, 297);
	  COL_TRI(311, 312, 297);
	  COL_TRI(314, 313, 317);
	  COL_TRI(311, 298, 312);
	  COL_TRI(298, 436, 312);
	  COL_TRI(310, 297, 443);
	  COL_TRI(312, 436, 444);
	  COL_TRI(312, 444, 445);
	  COL_TRI(313, 315, 317);
	  COL_TRI(315, 318, 317);
	  COL_TRI(316, 318, 315);
	  COL_TRI(314, 317, 319);
	  COL_TRI(317, 446, 321);
	  COL_TRI(318, 446, 317);
	  COL_TRI(319, 317, 321);
	  COL_TRI(316, 447, 318);
	  COL_TRI(318, 320, 446);
	  COL_TRI(320, 318, 322);
	  COL_TRI(318, 447, 322);
	  COL_TRI(319, 316, 314);
	  COL_TRI(319, 447, 316);
	  COL_TRI(321, 447, 319);
	  COL_TRI(321, 322, 447);
	  COL_TRI(322, 446, 320);
	  COL_TRI(322, 321, 446);
	  COL_TRI(323, 448, 449);
	  COL_TRI(323, 450, 448);
	  COL_TRI(323, 324, 450);
	  COL_TRI(324, 451, 450);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(1);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start, /*pos*/ -955, 103, -1029, /*yaw*/ 84); // unused, probably an early way to set initial position
	  COL_WATER_BOX_INIT(1);
	  COL_WATER_BOX(10, -3071, -3071,  3072,  3072, 20);
	  COL_END();
	}

	function lll_seg7_collision_0701D21C() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(-255, 0, 64);
	  COL_VERTEX(-255, 154, -63);
	  COL_VERTEX(-255, 0, -63);
	  COL_VERTEX(256, 154, -63);
	  COL_VERTEX(256, 0, -63);
	  COL_VERTEX(-255, 154, 64);
	  COL_VERTEX(256, 154, 64);
	  COL_VERTEX(256, 0, 64);
	  COL_TRI_INIT(SURFACE_DEFAULT, 10);
	  COL_TRI(0, 1, 2);
	  COL_TRI(2, 1, 3);
	  COL_TRI(2, 3, 4);
	  COL_TRI(5, 3, 1);
	  COL_TRI(0, 5, 1);
	  COL_TRI(5, 6, 3);
	  COL_TRI(3, 6, 7);
	  COL_TRI(3, 7, 4);
	  COL_TRI(7, 6, 5);
	  COL_TRI(7, 5, 0);
	  COL_TRI_STOP();
	  COL_END();
	}

	function lll_seg7_collision_drawbridge() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x4);
	  COL_VERTEX(0, 0, -191);
	  COL_VERTEX(-639, 0, -191);
	  COL_VERTEX(-639, 0, 192);
	  COL_VERTEX(0, 0, 192);
	  COL_TRI_INIT(SURFACE_DEFAULT, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI_STOP();
	  COL_END();
	}

	function lll_seg7_collision_octagonal_moving_platform() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x10);
	  COL_VERTEX(-255, 0, -127);
	  COL_VERTEX(-127, 154, -255);
	  COL_VERTEX(-127, 0, -255);
	  COL_VERTEX(256, 154, 128);
	  COL_VERTEX(256, 154, -127);
	  COL_VERTEX(128, 154, 256);
	  COL_VERTEX(-127, 154, 256);
	  COL_VERTEX(-255, 154, 128);
	  COL_VERTEX(-255, 154, -127);
	  COL_VERTEX(128, 154, -255);
	  COL_VERTEX(-255, 0, 128);
	  COL_VERTEX(-127, 0, 256);
	  COL_VERTEX(128, 0, 256);
	  COL_VERTEX(256, 0, 128);
	  COL_VERTEX(256, 0, -127);
	  COL_VERTEX(128, 0, -255);
	  COL_TRI_INIT(SURFACE_DEFAULT, 22);
	  COL_TRI(12, 6, 11);
	  COL_TRI(0, 1, 2);
	  COL_TRI(1, 3, 4);
	  COL_TRI(1, 5, 3);
	  COL_TRI(1, 6, 5);
	  COL_TRI(1, 7, 6);
	  COL_TRI(1, 8, 7);
	  COL_TRI(1, 4, 9);
	  COL_TRI(0, 8, 1);
	  COL_TRI(2, 1, 9);
	  COL_TRI(10, 8, 0);
	  COL_TRI(10, 7, 8);
	  COL_TRI(11, 7, 10);
	  COL_TRI(11, 6, 7);
	  COL_TRI(12, 5, 6);
	  COL_TRI(2, 9, 15);
	  COL_TRI(13, 5, 12);
	  COL_TRI(13, 3, 5);
	  COL_TRI(14, 3, 13);
	  COL_TRI(14, 4, 3);
	  COL_TRI(15, 4, 14);
	  COL_TRI(15, 9, 4);
	  COL_TRI_STOP();
	  COL_END();
	}

	function lll_seg7_collision_puzzle_piece() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x4);
	  COL_VERTEX(246, 0, -245);
	  COL_VERTEX(-245, 0, -245);
	  COL_VERTEX(-245, 0, 246);
	  COL_VERTEX(246, 0, 246);
	  COL_TRI_INIT(SURFACE_DEFAULT, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI_STOP();
	  COL_END();
	}

	function lll_seg7_collision_pitoune() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x10);
	  COL_VERTEX(1024, 106, 256);
	  COL_VERTEX(1024, 256, -105);
	  COL_VERTEX(1024, 256, 106);
	  COL_VERTEX(1024, 106, -255);
	  COL_VERTEX(1024, -105, -255);
	  COL_VERTEX(1024, -255, -105);
	  COL_VERTEX(1024, -255, 106);
	  COL_VERTEX(1024, -105, 256);
	  COL_VERTEX(-1023, 256, 106);
	  COL_VERTEX(-1023, 106, 256);
	  COL_VERTEX(-1023, -255, 106);
	  COL_VERTEX(-1023, 256, -105);
	  COL_VERTEX(-1023, -105, 256);
	  COL_VERTEX(-1023, 106, -255);
	  COL_VERTEX(-1023, -105, -255);
	  COL_VERTEX(-1023, -255, -105);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 28);
	  COL_TRI(2, 9, 0);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(0, 4, 3);
	  COL_TRI(0, 5, 4);
	  COL_TRI(0, 6, 5);
	  COL_TRI(0, 7, 6);
	  COL_TRI(2, 8, 9);
	  COL_TRI(1, 8, 2);
	  COL_TRI(10, 8, 11);
	  COL_TRI(10, 9, 8);
	  COL_TRI(1, 11, 8);
	  COL_TRI(0, 9, 12);
	  COL_TRI(10, 12, 9);
	  COL_TRI(0, 12, 7);
	  COL_TRI(3, 11, 1);
	  COL_TRI(10, 11, 13);
	  COL_TRI(3, 13, 11);
	  COL_TRI(4, 13, 3);
	  COL_TRI(10, 13, 14);
	  COL_TRI(4, 14, 13);
	  COL_TRI(5, 14, 4);
	  COL_TRI(7, 12, 10);
	  COL_TRI(7, 10, 6);
	  COL_TRI(10, 14, 15);
	  COL_TRI(5, 15, 14);
	  COL_TRI(6, 15, 5);
	  COL_TRI(6, 10, 15);
	  COL_TRI_STOP();
	  COL_END();
	}

	function lll_seg7_collision_rotating_fire_bars() {
	  COL_INIT();
	  COL_VERTEX_INIT(0xC);
	  COL_VERTEX(-165, 0, 0);
	  COL_VERTEX(-115, 205, 0);
	  COL_VERTEX(-57, 205, -100);
	  COL_VERTEX(-82, 0, -143);
	  COL_VERTEX(-82, 0, 144);
	  COL_VERTEX(-57, 205, 101);
	  COL_VERTEX(58, 205, -100);
	  COL_VERTEX(58, 205, 101);
	  COL_VERTEX(116, 205, 0);
	  COL_VERTEX(83, 0, -143);
	  COL_VERTEX(83, 0, 144);
	  COL_VERTEX(166, 0, 0);
	  COL_TRI_INIT(SURFACE_DEFAULT, 16);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(4, 5, 0);
	  COL_TRI(5, 1, 0);
	  COL_TRI(3, 2, 6);
	  COL_TRI(2, 1, 5);
	  COL_TRI(2, 5, 7);
	  COL_TRI(2, 7, 8);
	  COL_TRI(2, 8, 6);
	  COL_TRI(3, 6, 9);
	  COL_TRI(10, 5, 4);
	  COL_TRI(10, 7, 5);
	  COL_TRI(11, 8, 7);
	  COL_TRI(11, 7, 10);
	  COL_TRI(9, 6, 8);
	  COL_TRI(9, 8, 11);
	  COL_TRI_STOP();
	  COL_END();
	}

	function lll_seg7_collision_rotating_platform() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x18);
	  COL_VERTEX(-895, 0, 512);
	  COL_VERTEX(-895, 154, 512);
	  COL_VERTEX(0, 154, 1024);
	  COL_VERTEX(-1535, 154, 896);
	  COL_VERTEX(0, 154, 1792);
	  COL_VERTEX(0, 0, 1792);
	  COL_VERTEX(-1535, 0, 896);
	  COL_VERTEX(0, 0, 1024);
	  COL_VERTEX(896, 154, 512);
	  COL_VERTEX(896, 0, 512);
	  COL_VERTEX(1536, 154, 896);
	  COL_VERTEX(896, 154, -511);
	  COL_VERTEX(1536, 0, -895);
	  COL_VERTEX(1536, 0, 896);
	  COL_VERTEX(-895, 0, -511);
	  COL_VERTEX(-1535, 154, -895);
	  COL_VERTEX(0, 0, -1023);
	  COL_VERTEX(-895, 154, -511);
	  COL_VERTEX(-1535, 0, -895);
	  COL_VERTEX(0, 154, -1023);
	  COL_VERTEX(896, 0, -511);
	  COL_VERTEX(0, 0, -1791);
	  COL_VERTEX(1536, 154, -895);
	  COL_VERTEX(0, 154, -1791);
	  COL_TRI_INIT(SURFACE_DEFAULT, 36);
	  COL_TRI(0, 1, 2);
	  COL_TRI(1, 3, 4);
	  COL_TRI(1, 4, 2);
	  COL_TRI(5, 4, 3);
	  COL_TRI(5, 3, 6);
	  COL_TRI(0, 2, 7);
	  COL_TRI(7, 2, 8);
	  COL_TRI(7, 8, 9);
	  COL_TRI(2, 4, 10);
	  COL_TRI(2, 10, 8);
	  COL_TRI(9, 11, 20);
	  COL_TRI(9, 8, 11);
	  COL_TRI(12, 10, 13);
	  COL_TRI(13, 4, 5);
	  COL_TRI(13, 10, 4);
	  COL_TRI(14, 1, 0);
	  COL_TRI(19, 23, 15);
	  COL_TRI(6, 15, 18);
	  COL_TRI(6, 3, 15);
	  COL_TRI(16, 17, 14);
	  COL_TRI(14, 17, 1);
	  COL_TRI(17, 3, 1);
	  COL_TRI(17, 15, 3);
	  COL_TRI(18, 15, 23);
	  COL_TRI(18, 23, 21);
	  COL_TRI(16, 19, 17);
	  COL_TRI(19, 15, 17);
	  COL_TRI(8, 22, 11);
	  COL_TRI(20, 19, 16);
	  COL_TRI(20, 11, 19);
	  COL_TRI(11, 22, 23);
	  COL_TRI(11, 23, 19);
	  COL_TRI(21, 23, 22);
	  COL_TRI(21, 22, 12);
	  COL_TRI(12, 22, 10);
	  COL_TRI(8, 10, 22);
	  COL_TRI_STOP();
	  COL_END();
	}

	function lll_seg7_collision_slow_tilting_platform() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x6);
	  COL_VERTEX(-383, 0, -1023);
	  COL_VERTEX(5, 41, 1024);
	  COL_VERTEX(5, 41, -1023);
	  COL_VERTEX(-383, 0, 1024);
	  COL_VERTEX(384, 0, -1023);
	  COL_VERTEX(384, 0, 1024);
	  COL_TRI_INIT(SURFACE_DEFAULT, 4);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(1, 4, 2);
	  COL_TRI(1, 5, 4);
	  COL_TRI_STOP();
	  COL_END();
	}

	function lll_seg7_collision_sinking_pyramids() {
	  COL_INIT();
	  COL_VERTEX_INIT(0xE);
	  COL_VERTEX(0, 0, -1023);
	  COL_VERTEX(-1, 0, 0);
	  COL_VERTEX(514, 41, -511);
	  COL_VERTEX(1024, 0, 0);
	  COL_VERTEX(1024, 0, -1023);
	  COL_VERTEX(514, 41, 512);
	  COL_VERTEX(0, 0, 0);
	  COL_VERTEX(1024, 0, 1024);
	  COL_VERTEX(0, 0, 1024);
	  COL_VERTEX(-509, 41, -511);
	  COL_VERTEX(-1023, 0, 0);
	  COL_VERTEX(-1023, 0, -1023);
	  COL_VERTEX(-1023, 0, 1024);
	  COL_VERTEX(-509, 41, 512);
	  COL_TRI_INIT(SURFACE_DEFAULT, 16);
	  COL_TRI(10, 12, 13);
	  COL_TRI(0, 1, 2);
	  COL_TRI(1, 3, 2);
	  COL_TRI(4, 2, 3);
	  COL_TRI(5, 3, 6);
	  COL_TRI(7, 3, 5);
	  COL_TRI(4, 0, 2);
	  COL_TRI(8, 5, 6);
	  COL_TRI(8, 7, 5);
	  COL_TRI(9, 10, 1);
	  COL_TRI(11, 10, 9);
	  COL_TRI(0, 11, 9);
	  COL_TRI(12, 8, 13);
	  COL_TRI(13, 8, 6);
	  COL_TRI(10, 13, 6);
	  COL_TRI(0, 9, 1);
	  COL_TRI_STOP();
	  COL_END();
	}

	var lll = [
	  lll_seg7_area_1_collision,
	  lll_seg7_area_1_collision_VERSION_JP,
	  lll_seg7_collision_hexagonal_platform,
	  lll_seg7_area_2_collision,
	  lll_seg7_collision_0701D21C,
	  lll_seg7_collision_drawbridge,
	  lll_seg7_collision_octagonal_moving_platform,
	  lll_seg7_collision_puzzle_piece,
	  lll_seg7_collision_pitoune,
	  lll_seg7_collision_rotating_fire_bars,
	  lll_seg7_collision_rotating_platform,
	  lll_seg7_collision_slow_tilting_platform,
	  lll_seg7_collision_sinking_pyramids
	];

	function pss_seg7_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x2A5);
	  COL_VERTEX(8192, -8191, -8191);
	  COL_VERTEX(-8191, -8191, 8192);
	  COL_VERTEX(8192, -8191, 8192);
	  COL_VERTEX(-8191, -8191, -8191);
	  COL_VERTEX(-5128, -2129, 4118);
	  COL_VERTEX(-5128, -2129, 6525);
	  COL_VERTEX(-7586, -2129, 6525);
	  COL_VERTEX(-7586, -2129, 4118);
	  COL_VERTEX(3226, 6144, -6245);
	  COL_VERTEX(3072, 6144, -6245);
	  COL_VERTEX(3072, 7035, -6245);
	  COL_VERTEX(3226, 7035, -6245);
	  COL_VERTEX(3072, 7035, -5017);
	  COL_VERTEX(3226, 7035, -5017);
	  COL_VERTEX(3072, 6144, -5017);
	  COL_VERTEX(3226, 6144, -5017);
	  COL_VERTEX(6144, 7680, -4095);
	  COL_VERTEX(3072, 7680, -4095);
	  COL_VERTEX(3072, 7680, -7167);
	  COL_VERTEX(6144, 7680, -7167);
	  COL_VERTEX(-6920, -3460, 4118);
	  COL_VERTEX(-5794, -3460, 4118);
	  COL_VERTEX(-5794, -4587, 4118);
	  COL_VERTEX(-5128, -4587, 4118);
	  COL_VERTEX(-7586, -4587, 4118);
	  COL_VERTEX(-6920, -4587, 4118);
	  COL_VERTEX(3072, 6144, -7167);
	  COL_VERTEX(3072, 6144, -4095);
	  COL_VERTEX(2275, -2343, -1719);
	  COL_VERTEX(2275, -2343, -1668);
	  COL_VERTEX(2275, -1443, -1668);
	  COL_VERTEX(2275, -1443, -1719);
	  COL_VERTEX(2327, -2343, -1719);
	  COL_VERTEX(2254, -1421, -1668);
	  COL_VERTEX(2327, -1421, -1668);
	  COL_VERTEX(2275, -1370, -1668);
	  COL_VERTEX(2254, -1421, -1719);
	  COL_VERTEX(2327, -1421, -1719);
	  COL_VERTEX(2327, -2343, -1668);
	  COL_VERTEX(1456, -1370, -1668);
	  COL_VERTEX(1477, -1421, -1668);
	  COL_VERTEX(1477, -1421, -1719);
	  COL_VERTEX(2275, -1370, -1719);
	  COL_VERTEX(1405, -1421, -1668);
	  COL_VERTEX(1456, -1443, -1668);
	  COL_VERTEX(1456, -1443, -1719);
	  COL_VERTEX(1456, -2343, -1668);
	  COL_VERTEX(1456, -2343, -1719);
	  COL_VERTEX(1456, -1370, -1719);
	  COL_VERTEX(1405, -1421, -1719);
	  COL_VERTEX(1405, -2343, -1719);
	  COL_VERTEX(2275, -1091, 31);
	  COL_VERTEX(2275, -1991, 31);
	  COL_VERTEX(2275, -1091, 83);
	  COL_VERTEX(2275, -1991, 83);
	  COL_VERTEX(2254, -1070, 31);
	  COL_VERTEX(1477, -1070, 83);
	  COL_VERTEX(2254, -1070, 83);
	  COL_VERTEX(1477, -1070, 31);
	  COL_VERTEX(1456, -1091, 83);
	  COL_VERTEX(1456, -1091, 31);
	  COL_VERTEX(1456, -1991, 83);
	  COL_VERTEX(1456, -1991, 31);
	  COL_VERTEX(2327, -1991, 83);
	  COL_VERTEX(2327, -1070, 83);
	  COL_VERTEX(1456, -1018, 31);
	  COL_VERTEX(1405, -1070, 31);
	  COL_VERTEX(1405, -1991, 31);
	  COL_VERTEX(2275, -1735, 1664);
	  COL_VERTEX(2275, -835, 1664);
	  COL_VERTEX(2275, -835, 1715);
	  COL_VERTEX(2275, -1735, 1715);
	  COL_VERTEX(2254, -814, 1664);
	  COL_VERTEX(1477, -814, 1715);
	  COL_VERTEX(2254, -814, 1715);
	  COL_VERTEX(1477, -814, 1664);
	  COL_VERTEX(1456, -835, 1715);
	  COL_VERTEX(1456, -835, 1664);
	  COL_VERTEX(1456, -1735, 1715);
	  COL_VERTEX(1456, -1735, 1664);
	  COL_VERTEX(2327, -1735, 1715);
	  COL_VERTEX(2327, -814, 1715);
	  COL_VERTEX(1456, -763, 1664);
	  COL_VERTEX(1405, -814, 1664);
	  COL_VERTEX(1405, -1735, 1664);
	  COL_VERTEX(1405, -2343, -1668);
	  COL_VERTEX(2327, -1991, 31);
	  COL_VERTEX(2327, -1070, 31);
	  COL_VERTEX(2275, -1018, 83);
	  COL_VERTEX(1456, -1018, 83);
	  COL_VERTEX(2275, -1018, 31);
	  COL_VERTEX(1405, -1070, 83);
	  COL_VERTEX(1405, -1991, 83);
	  COL_VERTEX(2327, -1735, 1664);
	  COL_VERTEX(2275, -763, 1715);
	  COL_VERTEX(2327, -814, 1664);
	  COL_VERTEX(1456, -763, 1715);
	  COL_VERTEX(2275, -763, 1664);
	  COL_VERTEX(1405, -814, 1715);
	  COL_VERTEX(1405, -1735, 1715);
	  COL_VERTEX(-6178, -4587, 5117);
	  COL_VERTEX(-5973, -4587, 5321);
	  COL_VERTEX(-6588, -4587, 5117);
	  COL_VERTEX(-6178, -4587, 5321);
	  COL_VERTEX(-5128, -4587, 6525);
	  COL_VERTEX(-7586, -4587, 6525);
	  COL_VERTEX(-6741, -4587, 5321);
	  COL_VERTEX(-6588, -4587, 5321);
	  COL_VERTEX(-6741, -4587, 6089);
	  COL_VERTEX(-5973, -4587, 6089);
	  COL_VERTEX(6144, 6144, -7167);
	  COL_VERTEX(-6178, -4561, 5188);
	  COL_VERTEX(-5973, -4484, 5321);
	  COL_VERTEX(-6741, -4484, 5321);
	  COL_VERTEX(-5973, -4484, 6089);
	  COL_VERTEX(-6720, -4484, 6068);
	  COL_VERTEX(-6720, -4484, 5342);
	  COL_VERTEX(-6588, -4535, 5255);
	  COL_VERTEX(-6588, -4510, 5321);
	  COL_VERTEX(6144, 6144, -4095);
	  COL_VERTEX(-6588, -4561, 5117);
	  COL_VERTEX(-6588, -4561, 5188);
	  COL_VERTEX(-6178, -4561, 5117);
	  COL_VERTEX(-5994, -4484, 5342);
	  COL_VERTEX(-5994, -4484, 6068);
	  COL_VERTEX(-6741, -4484, 6089);
	  COL_VERTEX(-6178, -4535, 5255);
	  COL_VERTEX(-6178, -4535, 5188);
	  COL_VERTEX(-6588, -4535, 5188);
	  COL_VERTEX(-6178, -4510, 5255);
	  COL_VERTEX(-6588, -4510, 5255);
	  COL_VERTEX(-6178, -4510, 5321);
	  COL_VERTEX(2872, 6098, -6143);
	  COL_VERTEX(2673, 6052, -6143);
	  COL_VERTEX(2673, 6052, -5119);
	  COL_VERTEX(2872, 6098, -5119);
	  COL_VERTEX(-5845, -4509, 3251);
	  COL_VERTEX(-5845, -4490, 3047);
	  COL_VERTEX(-6869, -4490, 3047);
	  COL_VERTEX(-6869, -4509, 3251);
	  COL_VERTEX(-6869, -3010, -1778);
	  COL_VERTEX(-5845, -3010, -1778);
	  COL_VERTEX(-5845, -3563, 4067);
	  COL_VERTEX(-6869, -3563, 4067);
	  COL_VERTEX(-3930, 3523, 1674);
	  COL_VERTEX(-4057, 3523, 2698);
	  COL_VERTEX(-5095, 3697, 2438);
	  COL_VERTEX(-4701, 3666, 1481);
	  COL_VERTEX(-5957, 3871, 1926);
	  COL_VERTEX(-5233, 3809, 1164);
	  COL_VERTEX(-6534, 4014, 1059);
	  COL_VERTEX(-5560, 3953, 674);
	  COL_VERTEX(-6710, 4127, 5);
	  COL_VERTEX(-5686, 4096, -79);
	  COL_VERTEX(-6710, 4536, -3107);
	  COL_VERTEX(-5686, 4506, -3071);
	  COL_VERTEX(-5636, 4608, -3769);
	  COL_VERTEX(-5432, 4710, -4308);
	  COL_VERTEX(-5097, 4813, -4685);
	  COL_VERTEX(-4646, 4915, -4947);
	  COL_VERTEX(-4146, 5018, -5073);
	  COL_VERTEX(-3563, 5120, -5119);
	  COL_VERTEX(-6647, 4669, -3992);
	  COL_VERTEX(-6323, 4803, -4847);
	  COL_VERTEX(-5753, 4905, -5488);
	  COL_VERTEX(-5036, 4977, -5904);
	  COL_VERTEX(-4313, 5048, -6087);
	  COL_VERTEX(-3603, 5120, -6143);
	  COL_VERTEX(3072, 6656, -6143);
	  COL_VERTEX(3072, 6656, -5119);
	  COL_VERTEX(3072, 6144, -6143);
	  COL_VERTEX(3226, 6144, -6143);
	  COL_VERTEX(3226, 6656, -6143);
	  COL_VERTEX(3226, 6656, -5119);
	  COL_VERTEX(3226, 6144, -5119);
	  COL_VERTEX(-5026, -5058, -1778);
	  COL_VERTEX(-5026, -5058, 6627);
	  COL_VERTEX(-7688, -2027, 6627);
	  COL_VERTEX(-7688, -5058, 6627);
	  COL_VERTEX(-5845, -4587, 4067);
	  COL_VERTEX(-6869, -4034, -1778);
	  COL_VERTEX(-5845, -4034, -1778);
	  COL_VERTEX(-6841, -3890, -2797);
	  COL_VERTEX(-5095, 3185, 2438);
	  COL_VERTEX(-5957, 3359, 1926);
	  COL_VERTEX(-4057, 3011, 2698);
	  COL_VERTEX(-6534, 3502, 1059);
	  COL_VERTEX(-6710, 3615, 5);
	  COL_VERTEX(-6710, 4024, -3107);
	  COL_VERTEX(-6647, 4157, -3992);
	  COL_VERTEX(-6323, 4291, -4847);
	  COL_VERTEX(-5753, 4393, -5488);
	  COL_VERTEX(-5036, 4465, -5904);
	  COL_VERTEX(-4313, 4536, -6087);
	  COL_VERTEX(-4229, 4521, -5578);
	  COL_VERTEX(-3603, 4608, -6143);
	  COL_VERTEX(-3563, 4608, -5119);
	  COL_VERTEX(-4896, 3169, 1954);
	  COL_VERTEX(-3930, 3011, 1674);
	  COL_VERTEX(-2731, 2819, 1675);
	  COL_VERTEX(-4701, 3154, 1481);
	  COL_VERTEX(-5585, 3327, 1535);
	  COL_VERTEX(-5233, 3297, 1164);
	  COL_VERTEX(-6035, 3471, 862);
	  COL_VERTEX(-5560, 3441, 674);
	  COL_VERTEX(-6196, 3599, -37);
	  COL_VERTEX(-5686, 3584, -79);
	  COL_VERTEX(-6197, 4009, -3089);
	  COL_VERTEX(-5686, 3994, -3071);
	  COL_VERTEX(-6135, 4126, -3879);
	  COL_VERTEX(-5636, 4096, -3769);
	  COL_VERTEX(-5868, 4244, -4572);
	  COL_VERTEX(-5432, 4198, -4308);
	  COL_VERTEX(-5420, 4346, -5080);
	  COL_VERTEX(-5097, 4301, -4685);
	  COL_VERTEX(-4839, 4434, -5420);
	  COL_VERTEX(-4646, 4403, -4947);
	  COL_VERTEX(-4146, 4506, -5073);
	  COL_VERTEX(-3583, 4608, -5631);
	  COL_VERTEX(-3930, 2601, 1059);
	  COL_VERTEX(-4057, 4137, 3312);
	  COL_VERTEX(-4057, 2601, 3312);
	  COL_VERTEX(2598, 726, 1683);
	  COL_VERTEX(-781, 2778, 2804);
	  COL_VERTEX(2471, 761, 2809);
	  COL_VERTEX(-781, 2778, 2702);
	  COL_VERTEX(2275, -1966, -2810);
	  COL_VERTEX(2378, -2866, -2811);
	  COL_VERTEX(2378, -1842, -2811);
	  COL_VERTEX(2275, -1842, -2810);
	  COL_VERTEX(2275, -1945, -2810);
	  COL_VERTEX(1347, -1996, -4028);
	  COL_VERTEX(1456, -1966, -2810);
	  COL_VERTEX(1449, -1996, -4029);
	  COL_VERTEX(1309, -2088, -4698);
	  COL_VERTEX(1184, -2177, -5235);
	  COL_VERTEX(919, -2267, -5544);
	  COL_VERTEX(620, -2357, -5702);
	  COL_VERTEX(308, -2457, -5717);
	  COL_VERTEX(-31, -2542, -5634);
	  COL_VERTEX(-285, -2640, -5388);
	  COL_VERTEX(-465, -2733, -5061);
	  COL_VERTEX(-598, -2825, -4492);
	  COL_VERTEX(-860, -2866, -3832);
	  COL_VERTEX(-1323, -2907, -3338);
	  COL_VERTEX(-1863, -2948, -3044);
	  COL_VERTEX(-2498, -3091, -2970);
	  COL_VERTEX(-3155, -3235, -3092);
	  COL_VERTEX(-3639, -3378, -3373);
	  COL_VERTEX(-4119, -3468, -3631);
	  COL_VERTEX(-4716, -3548, -3712);
	  COL_VERTEX(-5267, -3636, -3493);
	  COL_VERTEX(-5599, -3740, -3116);
	  COL_VERTEX(-5721, -3839, -2592);
	  COL_VERTEX(-5743, -3931, -1777);
	  COL_VERTEX(-6942, -3788, -2815);
	  COL_VERTEX(-6649, -3638, -3818);
	  COL_VERTEX(-5839, -3487, -4563);
	  COL_VERTEX(-4919, -3455, -4866);
	  COL_VERTEX(-4001, -3419, -4822);
	  COL_VERTEX(-3295, -3378, -4494);
	  COL_VERTEX(-2736, -3281, -4177);
	  COL_VERTEX(-2459, -3182, -4116);
	  COL_VERTEX(-2204, -3080, -4121);
	  COL_VERTEX(-2003, -2993, -4217);
	  COL_VERTEX(-1819, -2913, -4474);
	  COL_VERTEX(-1730, -2825, -4882);
	  COL_VERTEX(-1589, -2733, -5471);
	  COL_VERTEX(-1242, -2590, -6161);
	  COL_VERTEX(-580, -2446, -6691);
	  COL_VERTEX(212, -2303, -6922);
	  COL_VERTEX(1035, -2211, -6819);
	  COL_VERTEX(1757, -2170, -6338);
	  COL_VERTEX(2180, -2129, -5624);
	  COL_VERTEX(2352, -2088, -4825);
	  COL_VERTEX(2378, -1996, -4044);
	  COL_VERTEX(-5845, -3931, -1778);
	  COL_VERTEX(-5822, -3839, -2610);
	  COL_VERTEX(-5685, -3740, -3173);
	  COL_VERTEX(-5315, -3636, -3584);
	  COL_VERTEX(-4734, -3548, -3813);
	  COL_VERTEX(-4109, -3468, -3733);
	  COL_VERTEX(-3609, -3378, -3471);
	  COL_VERTEX(-3119, -3235, -3188);
	  COL_VERTEX(-2495, -3091, -3072);
	  COL_VERTEX(-1894, -2948, -3142);
	  COL_VERTEX(-2495, -3194, -3072);
	  COL_VERTEX(-1894, -3051, -3142);
	  COL_VERTEX(-1385, -2907, -3419);
	  COL_VERTEX(-945, -2866, -3888);
	  COL_VERTEX(-945, -2969, -3888);
	  COL_VERTEX(-1385, -3010, -3419);
	  COL_VERTEX(-695, -2825, -4526);
	  COL_VERTEX(-695, -2928, -4526);
	  COL_VERTEX(-562, -2733, -5096);
	  COL_VERTEX(-562, -2835, -5096);
	  COL_VERTEX(-365, -2640, -5453);
	  COL_VERTEX(-365, -2742, -5453);
	  COL_VERTEX(-78, -2542, -5725);
	  COL_VERTEX(-78, -2644, -5725);
	  COL_VERTEX(300, -2457, -5819);
	  COL_VERTEX(300, -2559, -5819);
	  COL_VERTEX(656, -2357, -5798);
	  COL_VERTEX(656, -2459, -5798);
	  COL_VERTEX(993, -2267, -5614);
	  COL_VERTEX(993, -2369, -5614);
	  COL_VERTEX(1280, -2177, -5272);
	  COL_VERTEX(1280, -2280, -5272);
	  COL_VERTEX(1410, -2088, -4710);
	  COL_VERTEX(1410, -2190, -4710);
	  COL_VERTEX(1449, -2098, -4029);
	  COL_VERTEX(1456, -1945, -2810);
	  COL_VERTEX(-3119, -3337, -3188);
	  COL_VERTEX(-3609, -3481, -3471);
	  COL_VERTEX(-4109, -3571, -3733);
	  COL_VERTEX(-4734, -3650, -3813);
	  COL_VERTEX(-5315, -3738, -3584);
	  COL_VERTEX(-5685, -3842, -3173);
	  COL_VERTEX(-5822, -3941, -2610);
	  COL_VERTEX(2598, 726, 1580);
	  COL_VERTEX(-896, 2324, 1576);
	  COL_VERTEX(-776, 2779, 1678);
	  COL_VERTEX(-1024, 2359, 1575);
	  COL_VERTEX(-896, 2836, 1678);
	  COL_VERTEX(-2568, 2401, 1573);
	  COL_VERTEX(-1024, 2871, 1678);
	  COL_VERTEX(-2731, 2409, 1573);
	  COL_VERTEX(-2568, 2913, 1676);
	  COL_VERTEX(-3930, 2601, 1571);
	  COL_VERTEX(-2731, 2921, 1675);
	  COL_VERTEX(-900, 2834, 2702);
	  COL_VERTEX(-781, 2266, 2804);
	  COL_VERTEX(-1029, 2868, 2702);
	  COL_VERTEX(-900, 2322, 2804);
	  COL_VERTEX(-2573, 2913, 2700);
	  COL_VERTEX(-1029, 2356, 2804);
	  COL_VERTEX(-2736, 2920, 2699);
	  COL_VERTEX(-2573, 2401, 2802);
	  COL_VERTEX(-4057, 3113, 2698);
	  COL_VERTEX(-2736, 2408, 2802);
	  COL_VERTEX(2598, 624, 1683);
	  COL_VERTEX(-776, 2677, 1678);
	  COL_VERTEX(-896, 2734, 1678);
	  COL_VERTEX(-1024, 2769, 1678);
	  COL_VERTEX(-2573, 2810, 2700);
	  COL_VERTEX(-1029, 2765, 2702);
	  COL_VERTEX(-900, 2732, 2702);
	  COL_VERTEX(-781, 2676, 2702);
	  COL_VERTEX(2946, 512, 1683);
	  COL_VERTEX(2471, 658, 2707);
	  COL_VERTEX(-6564, -3740, -3761);
	  COL_VERTEX(-6841, -3788, -2797);
	  COL_VERTEX(-6564, -3638, -3761);
	  COL_VERTEX(-5790, -3590, -4473);
	  COL_VERTEX(-5790, -3487, -4473);
	  COL_VERTEX(-4901, -3557, -4765);
	  COL_VERTEX(-4901, -3455, -4765);
	  COL_VERTEX(-4011, -3419, -4720);
	  COL_VERTEX(-3325, -3378, -4396);
	  COL_VERTEX(-2773, -3281, -4081);
	  COL_VERTEX(-2462, -3285, -4014);
	  COL_VERTEX(-2773, -3384, -4081);
	  COL_VERTEX(-2462, -3182, -4014);
	  COL_VERTEX(-2174, -3080, -4024);
	  COL_VERTEX(-1940, -3096, -4136);
	  COL_VERTEX(-2174, -3183, -4024);
	  COL_VERTEX(-1940, -2993, -4136);
	  COL_VERTEX(-1734, -2913, -4417);
	  COL_VERTEX(-1634, -2825, -4848);
	  COL_VERTEX(-1493, -2733, -5435);
	  COL_VERTEX(-1162, -2590, -6097);
	  COL_VERTEX(-533, -2446, -6600);
	  COL_VERTEX(220, -2303, -6820);
	  COL_VERTEX(999, -2211, -6723);
	  COL_VERTEX(1683, -2170, -6267);
	  COL_VERTEX(2085, -2129, -5586);
	  COL_VERTEX(2251, -2088, -4813);
	  COL_VERTEX(2275, -1996, -4043);
	  COL_VERTEX(2275, -1812, -1477);
	  COL_VERTEX(2275, -2098, -4043);
	  COL_VERTEX(2251, -2190, -4813);
	  COL_VERTEX(2085, -2231, -5586);
	  COL_VERTEX(1683, -2272, -6267);
	  COL_VERTEX(999, -2313, -6723);
	  COL_VERTEX(220, -2405, -6820);
	  COL_VERTEX(-533, -2549, -6600);
	  COL_VERTEX(-1162, -2692, -6097);
	  COL_VERTEX(-1493, -2835, -5435);
	  COL_VERTEX(-1634, -2928, -4848);
	  COL_VERTEX(-1734, -3015, -4417);
	  COL_VERTEX(-3325, -3481, -4396);
	  COL_VERTEX(-4011, -3522, -4720);
	  COL_VERTEX(-2736, 2817, 2699);
	  COL_VERTEX(-2568, 2811, 1676);
	  COL_VERTEX(1456, -1812, -1477);
	  COL_VERTEX(2275, -1725, -1299);
	  COL_VERTEX(1456, -1725, -1299);
	  COL_VERTEX(1456, -1508, -1062);
	  COL_VERTEX(2275, -1508, -1062);
	  COL_VERTEX(2275, -1484, -965);
	  COL_VERTEX(1456, -1484, -965);
	  COL_VERTEX(2275, -1479, 216);
	  COL_VERTEX(1456, -1479, 216);
	  COL_VERTEX(2275, -1431, 371);
	  COL_VERTEX(1456, -1431, 371);
	  COL_VERTEX(1456, -1244, 779);
	  COL_VERTEX(2275, -1244, 779);
	  COL_VERTEX(2275, -1228, 878);
	  COL_VERTEX(1456, -1228, 878);
	  COL_VERTEX(1456, -1223, 1846);
	  COL_VERTEX(1456, -1201, 2024);
	  COL_VERTEX(2275, -988, 2623);
	  COL_VERTEX(1456, -988, 2623);
	  COL_VERTEX(2275, -972, 2722);
	  COL_VERTEX(1456, -972, 2722);
	  COL_VERTEX(2275, -967, 3644);
	  COL_VERTEX(1456, -980, 3644);
	  COL_VERTEX(1456, -921, 4677);
	  COL_VERTEX(1483, -768, 5546);
	  COL_VERTEX(1914, -564, 6355);
	  COL_VERTEX(2701, -456, 6904);
	  COL_VERTEX(3681, -333, 7088);
	  COL_VERTEX(4672, -229, 6979);
	  COL_VERTEX(5531, -127, 6436);
	  COL_VERTEX(6060, -26, 5553);
	  COL_VERTEX(6292, 78, 4538);
	  COL_VERTEX(6072, 146, 3531);
	  COL_VERTEX(5540, 215, 2725);
	  COL_VERTEX(4823, 236, 2128);
	  COL_VERTEX(3904, 307, 1784);
	  COL_VERTEX(2275, -1223, 1846);
	  COL_VERTEX(2275, -1201, 2024);
	  COL_VERTEX(2275, -921, 4566);
	  COL_VERTEX(2343, -828, 5186);
	  COL_VERTEX(2617, -736, 5671);
	  COL_VERTEX(3057, -644, 6044);
	  COL_VERTEX(3681, -552, 6163);
	  COL_VERTEX(4329, -450, 6074);
	  COL_VERTEX(4860, -347, 5748);
	  COL_VERTEX(5191, -245, 5215);
	  COL_VERTEX(5380, -139, 4525);
	  COL_VERTEX(5245, -37, 3820);
	  COL_VERTEX(4846, 72, 3315);
	  COL_VERTEX(4360, 184, 2924);
	  COL_VERTEX(3699, 297, 2752);
	  COL_VERTEX(2892, 512, 2707);
	  COL_VERTEX(220, -10034, -5286);
	  COL_VERTEX(66, -10034, -5020);
	  COL_VERTEX(527, -10034, -5286);
	  COL_VERTEX(220, -1387, -5286);
	  COL_VERTEX(681, -10034, -5020);
	  COL_VERTEX(527, -10034, -4754);
	  COL_VERTEX(220, -10034, -4754);
	  COL_VERTEX(-2795, -10034, -4968);
	  COL_VERTEX(-2641, -10034, -5234);
	  COL_VERTEX(-2641, -2866, -5234);
	  COL_VERTEX(-2334, -10034, -5234);
	  COL_VERTEX(-2180, -10034, -4968);
	  COL_VERTEX(-2334, -2866, -4702);
	  COL_VERTEX(-2334, -10034, -4702);
	  COL_VERTEX(-2641, -10034, -4702);
	  COL_VERTEX(-4895, -10034, -3251);
	  COL_VERTEX(-5048, -10034, -2985);
	  COL_VERTEX(-4588, -10034, -3251);
	  COL_VERTEX(-4895, -3057, -3251);
	  COL_VERTEX(-4434, -10034, -2985);
	  COL_VERTEX(-4588, -10034, -2719);
	  COL_VERTEX(-4895, -10034, -2719);
	  COL_VERTEX(-6439, -3913, -2723);
	  COL_VERTEX(-5923, -3941, -2629);
	  COL_VERTEX(-6226, -3789, -3535);
	  COL_VERTEX(-5855, -3842, -3287);
	  COL_VERTEX(-5600, -3664, -4117);
	  COL_VERTEX(-5412, -3738, -3764);
	  COL_VERTEX(-4831, -3607, -4365);
	  COL_VERTEX(-4769, -3650, -4015);
	  COL_VERTEX(-4051, -3544, -4313);
	  COL_VERTEX(-4098, -3571, -3835);
	  COL_VERTEX(-3475, -3481, -3907);
	  COL_VERTEX(-2971, -3360, -3569);
	  COL_VERTEX(-2810, -3384, -3986);
	  COL_VERTEX(-2481, -3244, -3479);
	  COL_VERTEX(-2469, -3285, -3809);
	  COL_VERTEX(-2016, -3124, -3526);
	  COL_VERTEX(-2112, -3183, -3828);
	  COL_VERTEX(-1634, -3060, -3740);
	  COL_VERTEX(-1815, -3096, -3974);
	  COL_VERTEX(-1285, -2991, -4116);
	  COL_VERTEX(-1649, -3015, -4360);
	  COL_VERTEX(-1179, -2928, -4692);
	  COL_VERTEX(-1108, -2835, -5295);
	  COL_VERTEX(-844, -2714, -5840);
	  COL_VERTEX(-345, -2598, -6239);
	  COL_VERTEX(-445, -2742, -5517);
	  COL_VERTEX(-172, -2644, -5907);
	  COL_VERTEX(283, -2559, -6023);
	  COL_VERTEX(252, -2483, -6419);
	  COL_VERTEX(859, -2388, -6345);
	  COL_VERTEX(727, -2459, -5990);
	  COL_VERTEX(1388, -2325, -5988);
	  COL_VERTEX(1142, -2369, -5755);
	  COL_VERTEX(1704, -2257, -5438);
	  COL_VERTEX(1375, -2280, -5309);
	  COL_VERTEX(1844, -2190, -4763);
	  COL_VERTEX(1970, -670, 6301);
	  COL_VERTEX(2743, -559, 6802);
	  COL_VERTEX(2069, -719, 6204);
	  COL_VERTEX(2807, -620, 6648);
	  COL_VERTEX(1605, -819, 5495);
	  COL_VERTEX(4782, 203, 2199);
	  COL_VERTEX(5400, 96, 2844);
	  COL_VERTEX(5487, 136, 2770);
	  COL_VERTEX(-3993, 3011, 2182);
	  COL_VERTEX(-6460, -4034, -1778);
	  COL_VERTEX(5821, -9, 3619);
	  COL_VERTEX(5974, 51, 3565);
	  COL_VERTEX(5944, -112, 4533);
	  COL_VERTEX(6153, -31, 4536);
	  COL_VERTEX(5736, -217, 5427);
	  COL_VERTEX(5931, -136, 5502);
	  COL_VERTEX(5288, -318, 6187);
	  COL_VERTEX(5434, -237, 6337);
	  COL_VERTEX(4549, -420, 6654);
	  COL_VERTEX(4623, -339, 6849);
	  COL_VERTEX(3681, -524, 6740);
	  COL_VERTEX(3681, -443, 6949);
	  COL_VERTEX(3072, 6144, -5119);
	  COL_VERTEX(-5026, -2027, 6627);
	  COL_VERTEX(-5026, -2027, -1778);
	  COL_VERTEX(-7688, -2027, -1778);
	  COL_VERTEX(-7688, -5058, -1778);
	  COL_VERTEX(-6869, -5058, -1778);
	  COL_VERTEX(-5845, -5058, -1778);
	  COL_VERTEX(-6869, -4587, 4067);
	  COL_VERTEX(-6869, -3931, -1778);
	  COL_VERTEX(-3930, 3113, 1674);
	  COL_VERTEX(-3930, 2601, 1674);
	  COL_VERTEX(-3930, 4137, 1059);
	  COL_VERTEX(-4057, 2601, 2698);
	  COL_VERTEX(2598, 214, 1580);
	  COL_VERTEX(2598, 214, 1683);
	  COL_VERTEX(-776, 2779, 1576);
	  COL_VERTEX(-896, 2836, 1576);
	  COL_VERTEX(2471, 249, 2809);
	  COL_VERTEX(2471, 249, 2707);
	  COL_VERTEX(2471, 761, 2707);
	  COL_VERTEX(1354, -2866, -2810);
	  COL_VERTEX(2378, -3020, -4044);
	  COL_VERTEX(1354, -1842, -2810);
	  COL_VERTEX(1456, -1842, -2810);
	  COL_VERTEX(-900, 2834, 2804);
	  COL_VERTEX(1347, -3020, -4028);
	  COL_VERTEX(2352, -3112, -4825);
	  COL_VERTEX(1309, -3112, -4698);
	  COL_VERTEX(1184, -3201, -5235);
	  COL_VERTEX(919, -3291, -5544);
	  COL_VERTEX(620, -3381, -5702);
	  COL_VERTEX(308, -3481, -5717);
	  COL_VERTEX(-31, -3566, -5634);
	  COL_VERTEX(-285, -3664, -5388);
	  COL_VERTEX(-465, -3757, -5061);
	  COL_VERTEX(-598, -3849, -4492);
	  COL_VERTEX(-860, -3890, -3832);
	  COL_VERTEX(-1323, -3931, -3338);
	  COL_VERTEX(-1863, -3972, -3044);
	  COL_VERTEX(-2498, -4115, -2970);
	  COL_VERTEX(-3155, -4259, -3092);
	  COL_VERTEX(-3639, -4402, -3373);
	  COL_VERTEX(-4119, -4492, -3631);
	  COL_VERTEX(-4716, -4572, -3712);
	  COL_VERTEX(-5267, -4660, -3493);
	  COL_VERTEX(-5599, -4764, -3116);
	  COL_VERTEX(-5721, -4863, -2592);
	  COL_VERTEX(-5743, -4955, -1777);
	  COL_VERTEX(-6972, -4955, -1794);
	  COL_VERTEX(-6972, -3931, -1794);
	  COL_VERTEX(-6942, -4812, -2815);
	  COL_VERTEX(-6649, -4662, -3818);
	  COL_VERTEX(-5839, -4511, -4563);
	  COL_VERTEX(-4919, -4479, -4866);
	  COL_VERTEX(-4001, -4443, -4822);
	  COL_VERTEX(-3295, -4402, -4494);
	  COL_VERTEX(-2736, -4305, -4177);
	  COL_VERTEX(-2459, -4206, -4116);
	  COL_VERTEX(-2204, -4104, -4121);
	  COL_VERTEX(-2003, -4017, -4217);
	  COL_VERTEX(-1819, -3937, -4474);
	  COL_VERTEX(-1730, -3849, -4882);
	  COL_VERTEX(-1589, -3757, -5471);
	  COL_VERTEX(-1242, -3614, -6161);
	  COL_VERTEX(-580, -3470, -6691);
	  COL_VERTEX(212, -3327, -6922);
	  COL_VERTEX(1035, -3235, -6819);
	  COL_VERTEX(1757, -3194, -6338);
	  COL_VERTEX(2180, -3153, -5624);
	  COL_VERTEX(1456, -2324, -1477);
	  COL_VERTEX(1456, -2457, -2810);
	  COL_VERTEX(1456, -2237, -1299);
	  COL_VERTEX(-776, 2267, 1576);
	  COL_VERTEX(-1024, 2871, 1575);
	  COL_VERTEX(-2568, 2913, 1573);
	  COL_VERTEX(-2731, 2921, 1573);
	  COL_VERTEX(-3930, 3113, 1571);
	  COL_VERTEX(-1029, 2868, 2804);
	  COL_VERTEX(-2573, 2913, 2802);
	  COL_VERTEX(-2736, 2920, 2802);
	  COL_VERTEX(-4057, 3113, 2800);
	  COL_VERTEX(-4057, 2601, 2800);
	  COL_VERTEX(2598, 112, 1683);
	  COL_VERTEX(2892, 0, 2707);
	  COL_VERTEX(2471, 146, 2707);
	  COL_VERTEX(2946, 0, 1683);
	  COL_VERTEX(3699, -214, 2752);
	  COL_VERTEX(2275, -2457, -2810);
	  COL_VERTEX(2275, -2324, -1477);
	  COL_VERTEX(1456, -2020, -1062);
	  COL_VERTEX(1456, -1996, -965);
	  COL_VERTEX(1456, -1991, 216);
	  COL_VERTEX(1456, -1943, 371);
	  COL_VERTEX(1456, -1756, 779);
	  COL_VERTEX(1456, -1740, 878);
	  COL_VERTEX(1456, -1735, 1846);
	  COL_VERTEX(1456, -1713, 2024);
	  COL_VERTEX(1456, -1500, 2623);
	  COL_VERTEX(1456, -1484, 2722);
	  COL_VERTEX(1456, -1492, 3644);
	  COL_VERTEX(1456, -1433, 4677);
	  COL_VERTEX(1483, -1280, 5546);
	  COL_VERTEX(1914, -1076, 6355);
	  COL_VERTEX(2701, -968, 6904);
	  COL_VERTEX(3681, -845, 7088);
	  COL_VERTEX(4672, -741, 6979);
	  COL_VERTEX(5531, -639, 6436);
	  COL_VERTEX(2275, -1479, 3644);
	  COL_VERTEX(2275, -1433, 4566);
	  COL_VERTEX(6060, -538, 5553);
	  COL_VERTEX(6292, -433, 4538);
	  COL_VERTEX(6072, -365, 3531);
	  COL_VERTEX(5540, -296, 2725);
	  COL_VERTEX(4823, -275, 2128);
	  COL_VERTEX(3904, -204, 1784);
	  COL_VERTEX(2275, -2237, -1299);
	  COL_VERTEX(2275, -2020, -1062);
	  COL_VERTEX(2275, -1996, -965);
	  COL_VERTEX(2275, -1991, 216);
	  COL_VERTEX(2275, -1943, 371);
	  COL_VERTEX(2275, -1756, 779);
	  COL_VERTEX(2275, -1740, 878);
	  COL_VERTEX(2275, -1735, 1846);
	  COL_VERTEX(2275, -1713, 2024);
	  COL_VERTEX(2275, -1500, 2623);
	  COL_VERTEX(2275, -1484, 2722);
	  COL_VERTEX(2343, -1340, 5186);
	  COL_VERTEX(2617, -1248, 5671);
	  COL_VERTEX(3057, -1156, 6044);
	  COL_VERTEX(3681, -1064, 6163);
	  COL_VERTEX(4329, -962, 6074);
	  COL_VERTEX(4860, -859, 5748);
	  COL_VERTEX(5191, -757, 5215);
	  COL_VERTEX(5380, -651, 4525);
	  COL_VERTEX(5245, -549, 3820);
	  COL_VERTEX(4846, -439, 3315);
	  COL_VERTEX(4360, -327, 2924);
	  COL_VERTEX(527, -1387, -5286);
	  COL_VERTEX(681, -1387, -5020);
	  COL_VERTEX(66, -1387, -5020);
	  COL_VERTEX(527, -1387, -4754);
	  COL_VERTEX(220, -1387, -4754);
	  COL_VERTEX(-2334, -2866, -5234);
	  COL_VERTEX(-2180, -2866, -4968);
	  COL_VERTEX(-2795, -2866, -4968);
	  COL_VERTEX(-2641, -2866, -4702);
	  COL_VERTEX(-4588, -3057, -3251);
	  COL_VERTEX(-4434, -3057, -2985);
	  COL_VERTEX(-4895, -3057, -2719);
	  COL_VERTEX(-5048, -3057, -2985);
	  COL_VERTEX(-4588, -3057, -2719);
	  COL_TRI_INIT(SURFACE_DEFAULT, 968);
	  COL_TRI(16, 17, 18);
	  COL_TRI(4, 5, 6);
	  COL_TRI(4, 6, 7);
	  COL_TRI(8, 9, 10);
	  COL_TRI(8, 10, 11);
	  COL_TRI(12, 11, 10);
	  COL_TRI(12, 13, 11);
	  COL_TRI(14, 13, 12);
	  COL_TRI(14, 15, 13);
	  COL_TRI(16, 18, 19);
	  COL_TRI(4, 20, 21);
	  COL_TRI(4, 7, 20);
	  COL_TRI(4, 21, 22);
	  COL_TRI(4, 22, 23);
	  COL_TRI(20, 7, 24);
	  COL_TRI(20, 24, 25);
	  COL_TRI(9, 26, 18);
	  COL_TRI(9, 18, 10);
	  COL_TRI(10, 18, 17);
	  COL_TRI(27, 12, 17);
	  COL_TRI(27, 14, 12);
	  COL_TRI(10, 17, 12);
	  COL_TRI(151, 150, 152);
	  COL_TRI(140, 141, 142);
	  COL_TRI(140, 142, 143);
	  COL_TRI(144, 145, 146);
	  COL_TRI(144, 146, 147);
	  COL_TRI(147, 146, 148);
	  COL_TRI(147, 148, 149);
	  COL_TRI(149, 148, 150);
	  COL_TRI(149, 150, 151);
	  COL_TRI(158, 165, 159);
	  COL_TRI(151, 152, 153);
	  COL_TRI(153, 152, 154);
	  COL_TRI(153, 154, 155);
	  COL_TRI(154, 162, 156);
	  COL_TRI(155, 154, 156);
	  COL_TRI(156, 163, 157);
	  COL_TRI(156, 162, 163);
	  COL_TRI(157, 163, 164);
	  COL_TRI(157, 164, 158);
	  COL_TRI(158, 164, 165);
	  COL_TRI(159, 165, 166);
	  COL_TRI(159, 166, 160);
	  COL_TRI(160, 166, 167);
	  COL_TRI(160, 167, 161);
	  COL_TRI(161, 167, 168);
	  COL_TRI(161, 168, 169);
	  COL_TRI(171, 8, 11);
	  COL_TRI(23, 5, 4);
	  COL_TRI(23, 104, 5);
	  COL_TRI(6, 5, 104);
	  COL_TRI(6, 104, 105);
	  COL_TRI(6, 24, 7);
	  COL_TRI(6, 105, 24);
	  COL_TRI(170, 171, 172);
	  COL_TRI(171, 11, 172);
	  COL_TRI(19, 110, 119);
	  COL_TRI(170, 172, 168);
	  COL_TRI(173, 172, 11);
	  COL_TRI(168, 172, 173);
	  COL_TRI(15, 174, 13);
	  COL_TRI(174, 173, 13);
	  COL_TRI(174, 169, 173);
	  COL_TRI(174, 526, 169);
	  COL_TRI(173, 11, 13);
	  COL_TRI(168, 173, 169);
	  COL_TRI(19, 119, 16);
	  COL_TRI(176, 527, 177);
	  COL_TRI(119, 17, 16);
	  COL_TRI(119, 27, 17);
	  COL_TRI(19, 26, 110);
	  COL_TRI(19, 18, 26);
	  COL_TRI(175, 527, 176);
	  COL_TRI(176, 177, 178);
	  COL_TRI(179, 142, 141);
	  COL_TRI(177, 528, 529);
	  COL_TRI(177, 527, 528);
	  COL_TRI(178, 177, 529);
	  COL_TRI(178, 529, 530);
	  COL_TRI(175, 528, 527);
	  COL_TRI(141, 529, 528);
	  COL_TRI(141, 140, 529);
	  COL_TRI(140, 530, 529);
	  COL_TRI(140, 531, 530);
	  COL_TRI(141, 175, 532);
	  COL_TRI(141, 528, 175);
	  COL_TRI(179, 141, 181);
	  COL_TRI(20, 142, 21);
	  COL_TRI(180, 140, 143);
	  COL_TRI(143, 25, 533);
	  COL_TRI(143, 20, 25);
	  COL_TRI(20, 143, 142);
	  COL_TRI(22, 533, 25);
	  COL_TRI(22, 179, 533);
	  COL_TRI(179, 139, 533);
	  COL_TRI(180, 143, 533);
	  COL_TRI(21, 142, 179);
	  COL_TRI(21, 179, 22);
	  COL_TRI(179, 136, 139);
	  COL_TRI(181, 277, 318);
	  COL_TRI(181, 276, 277);
	  COL_TRI(182, 534, 180);
	  COL_TRI(185, 338, 336);
	  COL_TRI(135, 170, 132);
	  COL_TRI(135, 526, 170);
	  COL_TRI(170, 168, 167);
	  COL_TRI(170, 167, 195);
	  COL_TRI(183, 145, 185);
	  COL_TRI(183, 146, 145);
	  COL_TRI(184, 146, 183);
	  COL_TRI(185, 336, 392);
	  COL_TRI(190, 163, 162);
	  COL_TRI(184, 148, 146);
	  COL_TRI(186, 148, 184);
	  COL_TRI(186, 150, 148);
	  COL_TRI(187, 150, 186);
	  COL_TRI(187, 152, 150);
	  COL_TRI(188, 152, 187);
	  COL_TRI(188, 154, 152);
	  COL_TRI(189, 154, 188);
	  COL_TRI(189, 162, 154);
	  COL_TRI(190, 162, 189);
	  COL_TRI(133, 195, 218);
	  COL_TRI(191, 163, 190);
	  COL_TRI(191, 164, 163);
	  COL_TRI(192, 164, 191);
	  COL_TRI(192, 165, 164);
	  COL_TRI(193, 165, 192);
	  COL_TRI(193, 166, 165);
	  COL_TRI(194, 195, 193);
	  COL_TRI(195, 166, 193);
	  COL_TRI(195, 167, 166);
	  COL_TRI(194, 218, 195);
	  COL_TRI(196, 169, 526);
	  COL_TRI(196, 161, 169);
	  COL_TRI(197, 198, 200);
	  COL_TRI(197, 512, 198);
	  COL_TRI(198, 147, 200);
	  COL_TRI(198, 144, 147);
	  COL_TRI(199, 535, 198);
	  COL_TRI(200, 147, 149);
	  COL_TRI(206, 155, 208);
	  COL_TRI(201, 200, 202);
	  COL_TRI(197, 200, 201);
	  COL_TRI(200, 149, 202);
	  COL_TRI(202, 149, 151);
	  COL_TRI(201, 202, 203);
	  COL_TRI(203, 202, 204);
	  COL_TRI(202, 151, 204);
	  COL_TRI(204, 151, 153);
	  COL_TRI(205, 203, 204);
	  COL_TRI(205, 204, 206);
	  COL_TRI(204, 153, 206);
	  COL_TRI(206, 153, 155);
	  COL_TRI(205, 206, 207);
	  COL_TRI(207, 206, 208);
	  COL_TRI(214, 158, 159);
	  COL_TRI(208, 155, 156);
	  COL_TRI(209, 208, 210);
	  COL_TRI(209, 207, 208);
	  COL_TRI(208, 156, 210);
	  COL_TRI(210, 156, 157);
	  COL_TRI(211, 209, 210);
	  COL_TRI(211, 210, 212);
	  COL_TRI(210, 157, 212);
	  COL_TRI(212, 157, 158);
	  COL_TRI(213, 211, 212);
	  COL_TRI(213, 212, 214);
	  COL_TRI(212, 158, 214);
	  COL_TRI(134, 133, 196);
	  COL_TRI(215, 214, 216);
	  COL_TRI(213, 214, 215);
	  COL_TRI(214, 159, 216);
	  COL_TRI(216, 159, 160);
	  COL_TRI(194, 216, 217);
	  COL_TRI(215, 216, 194);
	  COL_TRI(216, 160, 217);
	  COL_TRI(217, 160, 161);
	  COL_TRI(218, 217, 196);
	  COL_TRI(217, 218, 194);
	  COL_TRI(217, 161, 196);
	  COL_TRI(133, 218, 196);
	  COL_TRI(219, 144, 536);
	  COL_TRI(219, 537, 144);
	  COL_TRI(220, 144, 537);
	  COL_TRI(220, 145, 144);
	  COL_TRI(221, 145, 220);
	  COL_TRI(221, 538, 145);
	  COL_TRI(222, 539, 319);
	  COL_TRI(222, 540, 539);
	  COL_TRI(222, 319, 541);
	  COL_TRI(222, 541, 321);
	  COL_TRI(223, 543, 224);
	  COL_TRI(224, 544, 545);
	  COL_TRI(224, 543, 544);
	  COL_TRI(225, 224, 545);
	  COL_TRI(223, 331, 543);
	  COL_TRI(226, 228, 229);
	  COL_TRI(226, 227, 228);
	  COL_TRI(227, 226, 546);
	  COL_TRI(226, 232, 546);
	  COL_TRI(225, 223, 224);
	  COL_TRI(228, 227, 547);
	  COL_TRI(228, 547, 275);
	  COL_TRI(229, 275, 377);
	  COL_TRI(229, 228, 275);
	  COL_TRI(230, 229, 377);
	  COL_TRI(231, 546, 548);
	  COL_TRI(231, 551, 546);
	  COL_TRI(232, 548, 546);
	  COL_TRI(232, 549, 548);
	  COL_TRI(233, 548, 549);
	  COL_TRI(234, 551, 231);
	  COL_TRI(234, 553, 551);
	  COL_TRI(235, 553, 234);
	  COL_TRI(235, 554, 553);
	  COL_TRI(236, 554, 235);
	  COL_TRI(236, 555, 554);
	  COL_TRI(242, 560, 241);
	  COL_TRI(237, 555, 236);
	  COL_TRI(237, 556, 555);
	  COL_TRI(238, 556, 237);
	  COL_TRI(238, 557, 556);
	  COL_TRI(239, 557, 238);
	  COL_TRI(239, 558, 557);
	  COL_TRI(240, 558, 239);
	  COL_TRI(240, 559, 558);
	  COL_TRI(241, 559, 240);
	  COL_TRI(241, 560, 559);
	  COL_TRI(247, 566, 565);
	  COL_TRI(242, 561, 560);
	  COL_TRI(243, 561, 242);
	  COL_TRI(243, 562, 561);
	  COL_TRI(244, 562, 243);
	  COL_TRI(244, 563, 562);
	  COL_TRI(245, 563, 244);
	  COL_TRI(245, 564, 563);
	  COL_TRI(246, 564, 245);
	  COL_TRI(246, 565, 564);
	  COL_TRI(247, 565, 246);
	  COL_TRI(253, 571, 252);
	  COL_TRI(248, 566, 247);
	  COL_TRI(248, 567, 566);
	  COL_TRI(249, 567, 248);
	  COL_TRI(249, 568, 567);
	  COL_TRI(250, 568, 249);
	  COL_TRI(250, 569, 568);
	  COL_TRI(251, 569, 250);
	  COL_TRI(251, 570, 569);
	  COL_TRI(252, 570, 251);
	  COL_TRI(252, 571, 570);
	  COL_TRI(257, 578, 577);
	  COL_TRI(253, 572, 571);
	  COL_TRI(254, 572, 253);
	  COL_TRI(254, 573, 572);
	  COL_TRI(255, 574, 575);
	  COL_TRI(255, 576, 574);
	  COL_TRI(256, 576, 255);
	  COL_TRI(256, 577, 576);
	  COL_TRI(257, 577, 256);
	  COL_TRI(263, 583, 262);
	  COL_TRI(258, 578, 257);
	  COL_TRI(258, 579, 578);
	  COL_TRI(259, 579, 258);
	  COL_TRI(259, 580, 579);
	  COL_TRI(260, 580, 259);
	  COL_TRI(260, 581, 580);
	  COL_TRI(261, 581, 260);
	  COL_TRI(261, 582, 581);
	  COL_TRI(262, 582, 261);
	  COL_TRI(262, 583, 582);
	  COL_TRI(268, 589, 588);
	  COL_TRI(263, 584, 583);
	  COL_TRI(264, 584, 263);
	  COL_TRI(264, 585, 584);
	  COL_TRI(265, 585, 264);
	  COL_TRI(265, 586, 585);
	  COL_TRI(266, 586, 265);
	  COL_TRI(266, 587, 586);
	  COL_TRI(267, 587, 266);
	  COL_TRI(267, 588, 587);
	  COL_TRI(268, 588, 267);
	  COL_TRI(274, 594, 273);
	  COL_TRI(269, 589, 268);
	  COL_TRI(269, 590, 589);
	  COL_TRI(270, 590, 269);
	  COL_TRI(270, 591, 590);
	  COL_TRI(271, 591, 270);
	  COL_TRI(271, 592, 591);
	  COL_TRI(272, 592, 271);
	  COL_TRI(272, 593, 592);
	  COL_TRI(273, 593, 272);
	  COL_TRI(273, 594, 593);
	  COL_TRI(278, 251, 279);
	  COL_TRI(274, 552, 594);
	  COL_TRI(275, 552, 274);
	  COL_TRI(275, 547, 552);
	  COL_TRI(276, 253, 277);
	  COL_TRI(276, 254, 253);
	  COL_TRI(277, 253, 252);
	  COL_TRI(277, 252, 278);
	  COL_TRI(278, 252, 251);
	  COL_TRI(284, 246, 285);
	  COL_TRI(279, 251, 250);
	  COL_TRI(279, 250, 280);
	  COL_TRI(280, 250, 249);
	  COL_TRI(280, 249, 281);
	  COL_TRI(281, 249, 248);
	  COL_TRI(281, 248, 282);
	  COL_TRI(282, 248, 247);
	  COL_TRI(282, 247, 283);
	  COL_TRI(283, 247, 284);
	  COL_TRI(247, 246, 284);
	  COL_TRI(287, 288, 291);
	  COL_TRI(246, 245, 285);
	  COL_TRI(285, 245, 288);
	  COL_TRI(286, 284, 285);
	  COL_TRI(287, 285, 288);
	  COL_TRI(286, 285, 287);
	  COL_TRI(245, 244, 288);
	  COL_TRI(288, 244, 289);
	  COL_TRI(244, 243, 289);
	  COL_TRI(289, 243, 292);
	  COL_TRI(290, 289, 292);
	  COL_TRI(291, 289, 290);
	  COL_TRI(291, 288, 289);
	  COL_TRI(295, 296, 297);
	  COL_TRI(243, 242, 292);
	  COL_TRI(292, 241, 294);
	  COL_TRI(292, 242, 241);
	  COL_TRI(290, 292, 293);
	  COL_TRI(293, 292, 294);
	  COL_TRI(294, 241, 240);
	  COL_TRI(294, 240, 296);
	  COL_TRI(295, 294, 296);
	  COL_TRI(293, 294, 295);
	  COL_TRI(296, 240, 239);
	  COL_TRI(296, 239, 298);
	  COL_TRI(297, 296, 298);
	  COL_TRI(304, 236, 235);
	  COL_TRI(298, 239, 238);
	  COL_TRI(298, 238, 300);
	  COL_TRI(297, 298, 299);
	  COL_TRI(299, 298, 300);
	  COL_TRI(300, 238, 237);
	  COL_TRI(300, 237, 302);
	  COL_TRI(301, 300, 302);
	  COL_TRI(299, 300, 301);
	  COL_TRI(302, 237, 236);
	  COL_TRI(302, 236, 304);
	  COL_TRI(303, 302, 304);
	  COL_TRI(301, 302, 303);
	  COL_TRI(304, 235, 306);
	  COL_TRI(305, 304, 306);
	  COL_TRI(303, 304, 305);
	  COL_TRI(306, 235, 234);
	  COL_TRI(306, 234, 308);
	  COL_TRI(307, 306, 308);
	  COL_TRI(305, 306, 307);
	  COL_TRI(308, 234, 231);
	  COL_TRI(309, 308, 233);
	  COL_TRI(307, 308, 309);
	  COL_TRI(308, 231, 233);
	  COL_TRI(233, 231, 548);
	  COL_TRI(310, 233, 549);
	  COL_TRI(309, 233, 310);
	  COL_TRI(310, 549, 311);
	  COL_TRI(311, 595, 394);
	  COL_TRI(311, 596, 595);
	  COL_TRI(312, 284, 286);
	  COL_TRI(312, 283, 284);
	  COL_TRI(313, 283, 312);
	  COL_TRI(313, 282, 283);
	  COL_TRI(314, 282, 313);
	  COL_TRI(320, 541, 598);
	  COL_TRI(314, 281, 282);
	  COL_TRI(315, 281, 314);
	  COL_TRI(315, 280, 281);
	  COL_TRI(316, 280, 315);
	  COL_TRI(316, 279, 280);
	  COL_TRI(317, 279, 316);
	  COL_TRI(317, 278, 279);
	  COL_TRI(318, 278, 317);
	  COL_TRI(318, 277, 278);
	  COL_TRI(319, 598, 541);
	  COL_TRI(320, 542, 541);
	  COL_TRI(321, 542, 323);
	  COL_TRI(321, 541, 542);
	  COL_TRI(322, 542, 320);
	  COL_TRI(322, 599, 542);
	  COL_TRI(323, 542, 599);
	  COL_TRI(323, 599, 325);
	  COL_TRI(324, 599, 322);
	  COL_TRI(324, 600, 599);
	  COL_TRI(325, 599, 600);
	  COL_TRI(325, 600, 327);
	  COL_TRI(326, 601, 600);
	  COL_TRI(326, 600, 324);
	  COL_TRI(327, 600, 601);
	  COL_TRI(332, 550, 330);
	  COL_TRI(327, 601, 329);
	  COL_TRI(328, 601, 326);
	  COL_TRI(328, 602, 601);
	  COL_TRI(329, 601, 602);
	  COL_TRI(329, 602, 535);
	  COL_TRI(331, 223, 550);
	  COL_TRI(330, 550, 223);
	  COL_TRI(330, 223, 225);
	  COL_TRI(338, 606, 605);
	  COL_TRI(331, 550, 333);
	  COL_TRI(333, 550, 603);
	  COL_TRI(332, 603, 550);
	  COL_TRI(334, 603, 332);
	  COL_TRI(335, 603, 604);
	  COL_TRI(333, 603, 335);
	  COL_TRI(334, 604, 603);
	  COL_TRI(336, 604, 334);
	  COL_TRI(337, 604, 605);
	  COL_TRI(335, 604, 337);
	  COL_TRI(336, 605, 604);
	  COL_TRI(338, 605, 336);
	  COL_TRI(337, 605, 339);
	  COL_TRI(339, 605, 606);
	  COL_TRI(343, 327, 393);
	  COL_TRI(339, 606, 607);
	  COL_TRI(340, 321, 341);
	  COL_TRI(341, 323, 342);
	  COL_TRI(341, 321, 323);
	  COL_TRI(342, 323, 325);
	  COL_TRI(342, 325, 343);
	  COL_TRI(340, 222, 321);
	  COL_TRI(343, 325, 327);
	  COL_TRI(348, 608, 340);
	  COL_TRI(344, 332, 345);
	  COL_TRI(345, 332, 330);
	  COL_TRI(345, 330, 346);
	  COL_TRI(346, 330, 225);
	  COL_TRI(346, 225, 347);
	  COL_TRI(344, 334, 332);
	  COL_TRI(347, 225, 545);
	  COL_TRI(347, 545, 349);
	  COL_TRI(352, 256, 255);
	  COL_TRI(349, 609, 445);
	  COL_TRI(349, 610, 609);
	  COL_TRI(350, 351, 182);
	  COL_TRI(350, 352, 351);
	  COL_TRI(182, 351, 534);
	  COL_TRI(351, 255, 575);
	  COL_TRI(352, 255, 351);
	  COL_TRI(351, 575, 534);
	  COL_TRI(358, 259, 357);
	  COL_TRI(353, 354, 352);
	  COL_TRI(353, 352, 350);
	  COL_TRI(354, 256, 352);
	  COL_TRI(354, 257, 256);
	  COL_TRI(355, 354, 353);
	  COL_TRI(355, 356, 354);
	  COL_TRI(356, 257, 354);
	  COL_TRI(356, 258, 257);
	  COL_TRI(357, 258, 356);
	  COL_TRI(357, 259, 258);
	  COL_TRI(358, 260, 259);
	  COL_TRI(359, 260, 358);
	  COL_TRI(359, 261, 260);
	  COL_TRI(360, 359, 361);
	  COL_TRI(360, 362, 359);
	  COL_TRI(361, 359, 358);
	  COL_TRI(362, 262, 359);
	  COL_TRI(262, 261, 359);
	  COL_TRI(363, 263, 362);
	  COL_TRI(263, 262, 362);
	  COL_TRI(364, 366, 363);
	  COL_TRI(365, 363, 362);
	  COL_TRI(364, 363, 365);
	  COL_TRI(366, 264, 363);
	  COL_TRI(264, 263, 363);
	  COL_TRI(367, 265, 366);
	  COL_TRI(265, 264, 366);
	  COL_TRI(266, 265, 367);
	  COL_TRI(368, 266, 367);
	  COL_TRI(369, 266, 368);
	  COL_TRI(374, 272, 271);
	  COL_TRI(369, 267, 266);
	  COL_TRI(370, 267, 369);
	  COL_TRI(370, 268, 267);
	  COL_TRI(371, 268, 370);
	  COL_TRI(371, 269, 268);
	  COL_TRI(372, 269, 371);
	  COL_TRI(372, 270, 269);
	  COL_TRI(373, 270, 372);
	  COL_TRI(373, 271, 270);
	  COL_TRI(374, 271, 373);
	  COL_TRI(375, 272, 374);
	  COL_TRI(375, 273, 272);
	  COL_TRI(376, 273, 375);
	  COL_TRI(376, 274, 273);
	  COL_TRI(377, 274, 376);
	  COL_TRI(377, 275, 274);
	  COL_TRI(378, 613, 230);
	  COL_TRI(230, 377, 379);
	  COL_TRI(384, 372, 371);
	  COL_TRI(379, 377, 376);
	  COL_TRI(379, 376, 380);
	  COL_TRI(380, 376, 375);
	  COL_TRI(380, 375, 381);
	  COL_TRI(381, 375, 374);
	  COL_TRI(381, 374, 382);
	  COL_TRI(382, 374, 373);
	  COL_TRI(382, 373, 383);
	  COL_TRI(383, 373, 372);
	  COL_TRI(383, 372, 384);
	  COL_TRI(389, 366, 364);
	  COL_TRI(384, 371, 385);
	  COL_TRI(385, 371, 370);
	  COL_TRI(385, 370, 386);
	  COL_TRI(386, 370, 369);
	  COL_TRI(386, 369, 387);
	  COL_TRI(387, 369, 368);
	  COL_TRI(387, 368, 388);
	  COL_TRI(388, 368, 367);
	  COL_TRI(388, 367, 389);
	  COL_TRI(389, 367, 366);
	  COL_TRI(392, 334, 344);
	  COL_TRI(365, 362, 360);
	  COL_TRI(361, 358, 390);
	  COL_TRI(390, 358, 357);
	  COL_TRI(390, 357, 391);
	  COL_TRI(391, 357, 356);
	  COL_TRI(391, 356, 355);
	  COL_TRI(392, 336, 334);
	  COL_TRI(393, 327, 329);
	  COL_TRI(393, 329, 199);
	  COL_TRI(199, 329, 535);
	  COL_TRI(394, 595, 597);
	  COL_TRI(395, 378, 394);
	  COL_TRI(395, 394, 396);
	  COL_TRI(378, 311, 394);
	  COL_TRI(394, 597, 396);
	  COL_TRI(396, 597, 615);
	  COL_TRI(396, 615, 397);
	  COL_TRI(397, 615, 616);
	  COL_TRI(398, 396, 397);
	  COL_TRI(399, 398, 397);
	  COL_TRI(399, 397, 400);
	  COL_TRI(397, 616, 400);
	  COL_TRI(400, 616, 617);
	  COL_TRI(401, 399, 400);
	  COL_TRI(401, 400, 402);
	  COL_TRI(400, 617, 402);
	  COL_TRI(402, 617, 618);
	  COL_TRI(403, 401, 402);
	  COL_TRI(403, 402, 404);
	  COL_TRI(402, 618, 404);
	  COL_TRI(404, 618, 619);
	  COL_TRI(404, 619, 405);
	  COL_TRI(405, 619, 620);
	  COL_TRI(406, 404, 405);
	  COL_TRI(407, 405, 408);
	  COL_TRI(407, 406, 405);
	  COL_TRI(405, 620, 408);
	  COL_TRI(406, 403, 404);
	  COL_TRI(408, 620, 621);
	  COL_TRI(408, 409, 430);
	  COL_TRI(408, 430, 407);
	  COL_TRI(408, 621, 409);
	  COL_TRI(409, 621, 622);
	  COL_TRI(409, 622, 410);
	  COL_TRI(410, 622, 623);
	  COL_TRI(409, 410, 431);
	  COL_TRI(411, 431, 410);
	  COL_TRI(411, 410, 412);
	  COL_TRI(410, 623, 412);
	  COL_TRI(409, 431, 430);
	  COL_TRI(412, 623, 624);
	  COL_TRI(413, 411, 412);
	  COL_TRI(413, 412, 414);
	  COL_TRI(412, 624, 414);
	  COL_TRI(414, 624, 625);
	  COL_TRI(415, 413, 414);
	  COL_TRI(415, 414, 416);
	  COL_TRI(414, 625, 416);
	  COL_TRI(416, 625, 626);
	  COL_TRI(416, 626, 417);
	  COL_TRI(417, 626, 627);
	  COL_TRI(417, 415, 416);
	  COL_TRI(417, 432, 415);
	  COL_TRI(417, 627, 418);
	  COL_TRI(418, 627, 628);
	  COL_TRI(418, 628, 419);
	  COL_TRI(419, 628, 629);
	  COL_TRI(419, 629, 420);
	  COL_TRI(420, 629, 630);
	  COL_TRI(420, 630, 421);
	  COL_TRI(421, 630, 631);
	  COL_TRI(421, 631, 422);
	  COL_TRI(422, 631, 632);
	  COL_TRI(422, 632, 423);
	  COL_TRI(423, 632, 635);
	  COL_TRI(423, 635, 424);
	  COL_TRI(424, 635, 636);
	  COL_TRI(424, 519, 521);
	  COL_TRI(424, 521, 423);
	  COL_TRI(425, 519, 424);
	  COL_TRI(424, 636, 425);
	  COL_TRI(425, 636, 637);
	  COL_TRI(425, 637, 426);
	  COL_TRI(426, 637, 638);
	  COL_TRI(426, 638, 427);
	  COL_TRI(427, 638, 639);
	  COL_TRI(427, 639, 428);
	  COL_TRI(427, 511, 426);
	  COL_TRI(428, 511, 427);
	  COL_TRI(428, 639, 640);
	  COL_TRI(428, 640, 429);
	  COL_TRI(429, 640, 611);
	  COL_TRI(399, 643, 642);
	  COL_TRI(429, 611, 348);
	  COL_TRI(348, 611, 608);
	  COL_TRI(378, 614, 613);
	  COL_TRI(395, 614, 378);
	  COL_TRI(395, 641, 614);
	  COL_TRI(398, 641, 395);
	  COL_TRI(398, 642, 641);
	  COL_TRI(399, 642, 398);
	  COL_TRI(431, 648, 430);
	  COL_TRI(401, 643, 399);
	  COL_TRI(401, 644, 643);
	  COL_TRI(403, 644, 401);
	  COL_TRI(403, 645, 644);
	  COL_TRI(406, 645, 403);
	  COL_TRI(406, 646, 645);
	  COL_TRI(407, 646, 406);
	  COL_TRI(407, 647, 646);
	  COL_TRI(430, 647, 407);
	  COL_TRI(430, 648, 647);
	  COL_TRI(433, 652, 634);
	  COL_TRI(431, 649, 648);
	  COL_TRI(411, 649, 431);
	  COL_TRI(411, 650, 649);
	  COL_TRI(413, 650, 411);
	  COL_TRI(413, 651, 650);
	  COL_TRI(415, 651, 413);
	  COL_TRI(415, 633, 651);
	  COL_TRI(432, 633, 415);
	  COL_TRI(432, 634, 633);
	  COL_TRI(433, 634, 432);
	  COL_TRI(437, 656, 655);
	  COL_TRI(319, 539, 598);
	  COL_TRI(434, 652, 433);
	  COL_TRI(434, 653, 652);
	  COL_TRI(435, 653, 434);
	  COL_TRI(435, 654, 653);
	  COL_TRI(436, 654, 435);
	  COL_TRI(436, 655, 654);
	  COL_TRI(437, 655, 436);
	  COL_TRI(443, 661, 442);
	  COL_TRI(438, 656, 437);
	  COL_TRI(438, 657, 656);
	  COL_TRI(439, 657, 438);
	  COL_TRI(439, 658, 657);
	  COL_TRI(440, 658, 439);
	  COL_TRI(440, 659, 658);
	  COL_TRI(441, 659, 440);
	  COL_TRI(441, 660, 659);
	  COL_TRI(442, 660, 441);
	  COL_TRI(442, 661, 660);
	  COL_TRI(443, 662, 661);
	  COL_TRI(444, 662, 443);
	  COL_TRI(444, 612, 662);
	  COL_TRI(445, 612, 444);
	  COL_TRI(445, 609, 612);
	  COL_TRI(446, 663, 448);
	  COL_TRI(446, 449, 663);
	  COL_TRI(447, 449, 446);
	  COL_TRI(448, 663, 664);
	  COL_TRI(449, 664, 663);
	  COL_TRI(448, 664, 450);
	  COL_TRI(447, 665, 449);
	  COL_TRI(449, 666, 664);
	  COL_TRI(449, 667, 666);
	  COL_TRI(449, 665, 667);
	  COL_TRI(450, 664, 666);
	  COL_TRI(450, 666, 451);
	  COL_TRI(451, 666, 667);
	  COL_TRI(451, 667, 452);
	  COL_TRI(452, 667, 665);
	  COL_TRI(452, 665, 447);
	  COL_TRI(453, 455, 454);
	  COL_TRI(454, 455, 668);
	  COL_TRI(454, 668, 456);
	  COL_TRI(461, 464, 672);
	  COL_TRI(455, 669, 668);
	  COL_TRI(456, 668, 669);
	  COL_TRI(456, 669, 457);
	  COL_TRI(455, 670, 671);
	  COL_TRI(455, 671, 458);
	  COL_TRI(453, 670, 455);
	  COL_TRI(455, 458, 669);
	  COL_TRI(457, 669, 458);
	  COL_TRI(457, 458, 459);
	  COL_TRI(458, 671, 460);
	  COL_TRI(459, 458, 460);
	  COL_TRI(460, 670, 453);
	  COL_TRI(460, 671, 670);
	  COL_TRI(461, 672, 463);
	  COL_TRI(468, 513, 181);
	  COL_TRI(463, 672, 673);
	  COL_TRI(464, 673, 672);
	  COL_TRI(463, 673, 465);
	  COL_TRI(464, 674, 676);
	  COL_TRI(464, 675, 674);
	  COL_TRI(464, 676, 673);
	  COL_TRI(462, 464, 461);
	  COL_TRI(462, 675, 464);
	  COL_TRI(465, 673, 676);
	  COL_TRI(465, 676, 466);
	  COL_TRI(466, 676, 674);
	  COL_TRI(466, 674, 467);
	  COL_TRI(467, 674, 675);
	  COL_TRI(467, 675, 462);
	  COL_TRI(469, 468, 181);
	  COL_TRI(470, 468, 469);
	  COL_TRI(468, 182, 513);
	  COL_TRI(470, 350, 468);
	  COL_TRI(182, 180, 513);
	  COL_TRI(318, 469, 181);
	  COL_TRI(181, 513, 137);
	  COL_TRI(469, 471, 470);
	  COL_TRI(471, 469, 318);
	  COL_TRI(472, 470, 471);
	  COL_TRI(353, 350, 470);
	  COL_TRI(472, 353, 470);
	  COL_TRI(350, 182, 468);
	  COL_TRI(513, 180, 137);
	  COL_TRI(315, 475, 316);
	  COL_TRI(471, 473, 472);
	  COL_TRI(317, 471, 318);
	  COL_TRI(473, 471, 317);
	  COL_TRI(474, 472, 473);
	  COL_TRI(355, 353, 472);
	  COL_TRI(474, 355, 472);
	  COL_TRI(473, 475, 474);
	  COL_TRI(475, 473, 316);
	  COL_TRI(316, 473, 317);
	  COL_TRI(476, 474, 475);
	  COL_TRI(391, 355, 474);
	  COL_TRI(476, 391, 474);
	  COL_TRI(475, 477, 476);
	  COL_TRI(477, 475, 315);
	  COL_TRI(480, 361, 390);
	  COL_TRI(478, 476, 477);
	  COL_TRI(390, 391, 476);
	  COL_TRI(478, 390, 476);
	  COL_TRI(477, 313, 478);
	  COL_TRI(314, 477, 315);
	  COL_TRI(313, 477, 314);
	  COL_TRI(390, 478, 479);
	  COL_TRI(312, 479, 478);
	  COL_TRI(312, 478, 313);
	  COL_TRI(479, 480, 390);
	  COL_TRI(480, 479, 481);
	  COL_TRI(286, 481, 479);
	  COL_TRI(286, 479, 312);
	  COL_TRI(481, 482, 480);
	  COL_TRI(482, 361, 480);
	  COL_TRI(483, 482, 481);
	  COL_TRI(287, 483, 481);
	  COL_TRI(287, 481, 286);
	  COL_TRI(483, 484, 482);
	  COL_TRI(484, 360, 482);
	  COL_TRI(482, 360, 361);
	  COL_TRI(485, 483, 291);
	  COL_TRI(483, 287, 291);
	  COL_TRI(484, 483, 485);
	  COL_TRI(488, 389, 364);
	  COL_TRI(484, 485, 486);
	  COL_TRI(484, 365, 360);
	  COL_TRI(486, 365, 484);
	  COL_TRI(486, 485, 487);
	  COL_TRI(290, 487, 485);
	  COL_TRI(290, 485, 291);
	  COL_TRI(487, 488, 486);
	  COL_TRI(488, 364, 486);
	  COL_TRI(486, 364, 365);
	  COL_TRI(488, 487, 489);
	  COL_TRI(293, 487, 290);
	  COL_TRI(293, 489, 487);
	  COL_TRI(489, 388, 488);
	  COL_TRI(388, 389, 488);
	  COL_TRI(295, 490, 489);
	  COL_TRI(489, 490, 388);
	  COL_TRI(295, 489, 293);
	  COL_TRI(490, 387, 388);
	  COL_TRI(295, 493, 491);
	  COL_TRI(491, 490, 295);
	  COL_TRI(297, 493, 295);
	  COL_TRI(386, 387, 490);
	  COL_TRI(491, 386, 490);
	  COL_TRI(491, 493, 492);
	  COL_TRI(385, 386, 491);
	  COL_TRI(492, 385, 491);
	  COL_TRI(493, 494, 492);
	  COL_TRI(494, 493, 297);
	  COL_TRI(492, 494, 496);
	  COL_TRI(494, 495, 496);
	  COL_TRI(495, 494, 299);
	  COL_TRI(496, 384, 492);
	  COL_TRI(384, 385, 492);
	  COL_TRI(495, 497, 496);
	  COL_TRI(383, 384, 496);
	  COL_TRI(497, 383, 496);
	  COL_TRI(495, 498, 497);
	  COL_TRI(301, 495, 299);
	  COL_TRI(498, 495, 301);
	  COL_TRI(299, 494, 297);
	  COL_TRI(503, 380, 501);
	  COL_TRI(499, 497, 498);
	  COL_TRI(382, 383, 497);
	  COL_TRI(499, 382, 497);
	  COL_TRI(498, 500, 499);
	  COL_TRI(500, 498, 303);
	  COL_TRI(303, 498, 301);
	  COL_TRI(501, 499, 500);
	  COL_TRI(381, 382, 499);
	  COL_TRI(501, 381, 499);
	  COL_TRI(501, 500, 502);
	  COL_TRI(502, 500, 305);
	  COL_TRI(305, 500, 303);
	  COL_TRI(503, 501, 502);
	  COL_TRI(380, 381, 501);
	  COL_TRI(503, 502, 309);
	  COL_TRI(307, 502, 305);
	  COL_TRI(309, 502, 307);
	  COL_TRI(379, 503, 309);
	  COL_TRI(310, 379, 309);
	  COL_TRI(197, 183, 512);
	  COL_TRI(201, 184, 197);
	  COL_TRI(184, 183, 197);
	  COL_TRI(209, 189, 207);
	  COL_TRI(183, 185, 512);
	  COL_TRI(186, 184, 201);
	  COL_TRI(203, 186, 201);
	  COL_TRI(187, 186, 203);
	  COL_TRI(205, 187, 203);
	  COL_TRI(207, 188, 205);
	  COL_TRI(188, 187, 205);
	  COL_TRI(189, 188, 207);
	  COL_TRI(398, 395, 396);
	  COL_TRI(190, 189, 209);
	  COL_TRI(211, 190, 209);
	  COL_TRI(191, 190, 211);
	  COL_TRI(213, 191, 211);
	  COL_TRI(215, 192, 213);
	  COL_TRI(192, 191, 213);
	  COL_TRI(193, 192, 215);
	  COL_TRI(194, 193, 215);
	  COL_TRI(505, 507, 506);
	  COL_TRI(378, 230, 311);
	  COL_TRI(504, 506, 508);
	  COL_TRI(504, 508, 418);
	  COL_TRI(419, 504, 418);
	  COL_TRI(420, 504, 419);
	  COL_TRI(505, 506, 504);
	  COL_TRI(420, 505, 504);
	  COL_TRI(506, 434, 433);
	  COL_TRI(506, 433, 508);
	  COL_TRI(507, 434, 506);
	  COL_TRI(509, 442, 510);
	  COL_TRI(508, 433, 432);
	  COL_TRI(508, 432, 417);
	  COL_TRI(418, 508, 417);
	  COL_TRI(429, 509, 428);
	  COL_TRI(348, 444, 429);
	  COL_TRI(429, 444, 443);
	  COL_TRI(429, 443, 509);
	  COL_TRI(509, 510, 511);
	  COL_TRI(509, 511, 428);
	  COL_TRI(509, 443, 442);
	  COL_TRI(445, 348, 340);
	  COL_TRI(510, 514, 515);
	  COL_TRI(510, 442, 441);
	  COL_TRI(510, 441, 514);
	  COL_TRI(511, 510, 515);
	  COL_TRI(511, 515, 426);
	  COL_TRI(349, 340, 341);
	  COL_TRI(347, 349, 341);
	  COL_TRI(349, 445, 340);
	  COL_TRI(198, 512, 199);
	  COL_TRI(346, 347, 341);
	  COL_TRI(346, 341, 342);
	  COL_TRI(345, 346, 342);
	  COL_TRI(345, 342, 343);
	  COL_TRI(344, 345, 343);
	  COL_TRI(344, 343, 393);
	  COL_TRI(392, 344, 393);
	  COL_TRI(392, 393, 199);
	  COL_TRI(185, 392, 199);
	  COL_TRI(512, 185, 199);
	  COL_TRI(514, 441, 440);
	  COL_TRI(230, 379, 310);
	  COL_TRI(311, 230, 310);
	  COL_TRI(180, 138, 137);
	  COL_TRI(348, 445, 444);
	  COL_TRI(426, 515, 425);
	  COL_TRI(514, 440, 516);
	  COL_TRI(514, 516, 517);
	  COL_TRI(515, 514, 517);
	  COL_TRI(516, 440, 439);
	  COL_TRI(516, 439, 518);
	  COL_TRI(516, 518, 519);
	  COL_TRI(517, 516, 519);
	  COL_TRI(425, 517, 519);
	  COL_TRI(515, 517, 425);
	  COL_TRI(518, 439, 438);
	  COL_TRI(519, 518, 520);
	  COL_TRI(518, 438, 520);
	  COL_TRI(519, 520, 521);
	  COL_TRI(520, 438, 437);
	  COL_TRI(520, 437, 522);
	  COL_TRI(521, 520, 522);
	  COL_TRI(423, 521, 523);
	  COL_TRI(423, 523, 422);
	  COL_TRI(522, 437, 436);
	  COL_TRI(521, 522, 523);
	  COL_TRI(422, 523, 525);
	  COL_TRI(523, 524, 525);
	  COL_TRI(523, 522, 524);
	  COL_TRI(422, 525, 421);
	  COL_TRI(522, 436, 524);
	  COL_TRI(102, 122, 100);
	  COL_TRI(524, 436, 435);
	  COL_TRI(524, 435, 507);
	  COL_TRI(525, 524, 507);
	  COL_TRI(421, 505, 420);
	  COL_TRI(421, 525, 505);
	  COL_TRI(507, 435, 434);
	  COL_TRI(525, 507, 505);
	  COL_TRI(379, 380, 503);
	  COL_TRI(100, 111, 103);
	  COL_TRI(121, 127, 111);
	  COL_TRI(100, 122, 111);
	  COL_TRI(111, 126, 103);
	  COL_TRI(111, 127, 126);
	  COL_TRI(101, 103, 131);
	  COL_TRI(103, 129, 131);
	  COL_TRI(103, 126, 129);
	  COL_TRI(102, 120, 122);
	  COL_TRI(117, 129, 126);
	  COL_TRI(131, 118, 113);
	  COL_TRI(121, 128, 127);
	  COL_TRI(118, 107, 106);
	  COL_TRI(121, 107, 117);
	  COL_TRI(130, 107, 118);
	  COL_TRI(130, 117, 107);
	  COL_TRI(107, 120, 102);
	  COL_TRI(107, 121, 120);
	  COL_TRI(121, 117, 128);
	  COL_TRI(117, 130, 129);
	  COL_TRI(118, 106, 113);
	  COL_TRI(113, 106, 108);
	  COL_TRI(131, 113, 112);
	  COL_TRI(113, 108, 125);
	  COL_TRI(101, 131, 112);
	  COL_TRI(101, 112, 114);
	  COL_TRI(101, 114, 109);
	  COL_TRI(125, 108, 109);
	  COL_TRI(125, 109, 114);
	  COL_TRI_INIT(SURFACE_DEATH_PLANE, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI_INIT(SURFACE_TIMER_START, 2);
	  COL_TRI(132, 133, 134);
	  COL_TRI(134, 135, 132);
	  COL_TRI_INIT(SURFACE_TIMER_END, 2);
	  COL_TRI(136, 137, 138);
	  COL_TRI(139, 136, 138);
	  COL_TRI_INIT(SURFACE_NO_CAM_COLLISION, 120);
	  COL_TRI(28, 29, 30);
	  COL_TRI(28, 30, 31);
	  COL_TRI(31, 32, 28);
	  COL_TRI(31, 30, 33);
	  COL_TRI(30, 34, 35);
	  COL_TRI(30, 35, 33);
	  COL_TRI(29, 34, 30);
	  COL_TRI(36, 37, 31);
	  COL_TRI(31, 33, 36);
	  COL_TRI(31, 37, 32);
	  COL_TRI(29, 38, 34);
	  COL_TRI(33, 35, 39);
	  COL_TRI(33, 39, 40);
	  COL_TRI(40, 36, 33);
	  COL_TRI(38, 32, 37);
	  COL_TRI(38, 37, 34);
	  COL_TRI(49, 43, 39);
	  COL_TRI(40, 41, 36);
	  COL_TRI(41, 42, 36);
	  COL_TRI(36, 42, 37);
	  COL_TRI(40, 39, 43);
	  COL_TRI(40, 43, 44);
	  COL_TRI(44, 41, 40);
	  COL_TRI(41, 48, 42);
	  COL_TRI(45, 48, 41);
	  COL_TRI(44, 45, 41);
	  COL_TRI(44, 85, 46);
	  COL_TRI(44, 43, 85);
	  COL_TRI(46, 45, 44);
	  COL_TRI(47, 49, 45);
	  COL_TRI(45, 49, 48);
	  COL_TRI(46, 47, 45);
	  COL_TRI(49, 39, 48);
	  COL_TRI(47, 50, 49);
	  COL_TRI(34, 37, 42);
	  COL_TRI(34, 42, 35);
	  COL_TRI(48, 35, 42);
	  COL_TRI(48, 39, 35);
	  COL_TRI(50, 43, 49);
	  COL_TRI(50, 85, 43);
	  COL_TRI(51, 86, 52);
	  COL_TRI(63, 86, 87);
	  COL_TRI(52, 54, 53);
	  COL_TRI(51, 53, 57);
	  COL_TRI(52, 53, 51);
	  COL_TRI(53, 64, 88);
	  COL_TRI(53, 88, 57);
	  COL_TRI(54, 64, 53);
	  COL_TRI(55, 87, 51);
	  COL_TRI(51, 87, 86);
	  COL_TRI(51, 57, 55);
	  COL_TRI(54, 63, 64);
	  COL_TRI(56, 55, 57);
	  COL_TRI(57, 89, 56);
	  COL_TRI(57, 88, 89);
	  COL_TRI(63, 87, 64);
	  COL_TRI(66, 91, 89);
	  COL_TRI(55, 90, 87);
	  COL_TRI(58, 90, 55);
	  COL_TRI(56, 58, 55);
	  COL_TRI(59, 58, 56);
	  COL_TRI(56, 91, 59);
	  COL_TRI(56, 89, 91);
	  COL_TRI(58, 65, 90);
	  COL_TRI(60, 65, 58);
	  COL_TRI(59, 60, 58);
	  COL_TRI(61, 60, 59);
	  COL_TRI(59, 92, 61);
	  COL_TRI(59, 91, 92);
	  COL_TRI(61, 62, 60);
	  COL_TRI(62, 66, 60);
	  COL_TRI(60, 66, 65);
	  COL_TRI(66, 89, 65);
	  COL_TRI(68, 70, 69);
	  COL_TRI(62, 67, 66);
	  COL_TRI(64, 87, 90);
	  COL_TRI(64, 90, 88);
	  COL_TRI(65, 88, 90);
	  COL_TRI(65, 89, 88);
	  COL_TRI(67, 91, 66);
	  COL_TRI(67, 92, 91);
	  COL_TRI(68, 71, 70);
	  COL_TRI(69, 70, 74);
	  COL_TRI(70, 81, 94);
	  COL_TRI(71, 81, 70);
	  COL_TRI(70, 94, 74);
	  COL_TRI(69, 74, 72);
	  COL_TRI(69, 95, 93);
	  COL_TRI(72, 95, 69);
	  COL_TRI(69, 93, 68);
	  COL_TRI(71, 80, 81);
	  COL_TRI(73, 72, 74);
	  COL_TRI(74, 96, 73);
	  COL_TRI(74, 94, 96);
	  COL_TRI(80, 93, 95);
	  COL_TRI(80, 95, 81);
	  COL_TRI(83, 98, 96);
	  COL_TRI(73, 75, 72);
	  COL_TRI(72, 97, 95);
	  COL_TRI(75, 97, 72);
	  COL_TRI(76, 75, 73);
	  COL_TRI(73, 98, 76);
	  COL_TRI(73, 96, 98);
	  COL_TRI(76, 77, 75);
	  COL_TRI(75, 82, 97);
	  COL_TRI(77, 82, 75);
	  COL_TRI(78, 77, 76);
	  COL_TRI(76, 99, 78);
	  COL_TRI(76, 98, 99);
	  COL_TRI(78, 79, 77);
	  COL_TRI(77, 83, 82);
	  COL_TRI(79, 83, 77);
	  COL_TRI(83, 96, 82);
	  COL_TRI(84, 99, 98);
	  COL_TRI(79, 84, 83);
	  COL_TRI(81, 95, 97);
	  COL_TRI(81, 97, 94);
	  COL_TRI(82, 94, 97);
	  COL_TRI(82, 96, 94);
	  COL_TRI(84, 98, 83);
	  COL_TRI_INIT(SURFACE_NO_CAM_COL_SLIPPERY, 32);
	  COL_TRI(105, 108, 106);
	  COL_TRI(100, 22, 25);
	  COL_TRI(22, 100, 101);
	  COL_TRI(25, 102, 100);
	  COL_TRI(100, 103, 101);
	  COL_TRI(104, 23, 22);
	  COL_TRI(22, 101, 104);
	  COL_TRI(25, 105, 106);
	  COL_TRI(24, 105, 25);
	  COL_TRI(25, 106, 102);
	  COL_TRI(106, 107, 102);
	  COL_TRI(111, 122, 120);
	  COL_TRI(109, 104, 101);
	  COL_TRI(104, 109, 105);
	  COL_TRI(109, 108, 105);
	  COL_TRI(110, 27, 119);
	  COL_TRI(110, 26, 27);
	  COL_TRI(111, 120, 121);
	  COL_TRI(118, 129, 130);
	  COL_TRI(112, 123, 124);
	  COL_TRI(112, 124, 114);
	  COL_TRI(113, 123, 112);
	  COL_TRI(114, 124, 115);
	  COL_TRI(115, 124, 123);
	  COL_TRI(114, 115, 125);
	  COL_TRI(113, 116, 123);
	  COL_TRI(115, 123, 116);
	  COL_TRI(116, 125, 115);
	  COL_TRI(116, 113, 125);
	  COL_TRI(117, 126, 127);
	  COL_TRI(117, 127, 128);
	  COL_TRI(118, 131, 129);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(1);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start, /*pos*/ 5632, 6656, -5631, /*yaw*/ 192);
	  COL_END();
	}

	var pss = [
	  pss_seg7_collision
	];

	function rr_seg7_collision_level() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x454);
	  COL_VERTEX(-6677, 1443, 270);
	  COL_VERTEX(-6677, -1782, 270);
	  COL_VERTEX(-6063, -1116, 270);
	  COL_VERTEX(-6677, 1443, -343);
	  COL_VERTEX(-6677, -1782, -445);
	  COL_VERTEX(-6063, 1443, 270);
	  COL_VERTEX(-3093, 1443, 270);
	  COL_VERTEX(-2888, 1648, 270);
	  COL_VERTEX(-6063, 1648, 270);
	  COL_VERTEX(-6472, 1443, 270);
	  COL_VERTEX(4622, 2923, -2858);
	  COL_VERTEX(2881, 2872, -2858);
	  COL_VERTEX(4622, 2923, -1834);
	  COL_VERTEX(2881, 2872, -1834);
	  COL_VERTEX(1857, 2958, -2687);
	  COL_VERTEX(1857, 2958, -2004);
	  COL_VERTEX(1038, 3231, -2448);
	  COL_VERTEX(-190, 3538, -2397);
	  COL_VERTEX(-190, 3538, -2294);
	  COL_VERTEX(1653, 3128, -1834);
	  COL_VERTEX(1653, 3128, -2858);
	  COL_VERTEX(1038, 3231, -2243);
	  COL_VERTEX(2881, 3026, -1834);
	  COL_VERTEX(2881, 3026, -1629);
	  COL_VERTEX(1653, 3128, -2038);
	  COL_VERTEX(1653, 3128, -2653);
	  COL_VERTEX(5117, 3322, -1729);
	  COL_VERTEX(4622, 3077, -1834);
	  COL_VERTEX(5117, 3322, -2958);
	  COL_VERTEX(4622, 3077, -3062);
	  COL_VERTEX(5117, 3322, -2753);
	  COL_VERTEX(5117, 3322, -1934);
	  COL_VERTEX(5953, 3333, -2038);
	  COL_VERTEX(5117, 2954, -1934);
	  COL_VERTEX(5441, 3333, -2448);
	  COL_VERTEX(-7394, 2364, -445);
	  COL_VERTEX(2881, 3026, -3062);
	  COL_VERTEX(4622, 3077, -1629);
	  COL_VERTEX(4622, 3077, -2858);
	  COL_VERTEX(2881, 3026, -2858);
	  COL_VERTEX(5441, 3333, -2243);
	  COL_VERTEX(5953, 3333, -2653);
	  COL_VERTEX(5117, 2954, -2753);
	  COL_VERTEX(5646, 3333, -2243);
	  COL_VERTEX(5646, 3333, -2448);
	  COL_VERTEX(-7394, 2364, 270);
	  COL_VERTEX(-2274, 2364, 270);
	  COL_VERTEX(-2274, 2364, -445);
	  COL_VERTEX(-1509, -1280, 5438);
	  COL_VERTEX(-1304, -1270, 5438);
	  COL_VERTEX(-1304, -1280, 5438);
	  COL_VERTEX(-1509, -1270, 5438);
	  COL_VERTEX(2424, -348, 85);
	  COL_VERTEX(3089, 214, 494);
	  COL_VERTEX(3089, 214, 85);
	  COL_VERTEX(2424, -348, 494);
	  COL_VERTEX(-4339, 3098, -6604);
	  COL_VERTEX(-4032, 3507, -6604);
	  COL_VERTEX(-4339, 3507, -6604);
	  COL_VERTEX(-4032, 3098, -6604);
	  COL_VERTEX(-4339, 3098, -6450);
	  COL_VERTEX(-4032, 3098, -6655);
	  COL_VERTEX(-4339, 3098, -6655);
	  COL_VERTEX(-4032, 3098, -6450);
	  COL_VERTEX(1653, 2975, -2653);
	  COL_VERTEX(1653, 2975, -2038);
	  COL_VERTEX(975, 3083, -954);
	  COL_VERTEX(2613, 2878, -954);
	  COL_VERTEX(1180, 2878, -954);
	  COL_VERTEX(2613, 3083, -954);
	  COL_VERTEX(975, 2878, -954);
	  COL_VERTEX(2613, 3083, -340);
	  COL_VERTEX(1180, 3083, 274);
	  COL_VERTEX(975, 2878, 274);
	  COL_VERTEX(1180, 2878, -340);
	  COL_VERTEX(-6860, 3021, -2713);
	  COL_VERTEX(-4197, 3021, -2405);
	  COL_VERTEX(-4197, 3021, -2713);
	  COL_VERTEX(-6860, 3021, -2405);
	  COL_VERTEX(2987, -604, -3864);
	  COL_VERTEX(2987, -655, -3454);
	  COL_VERTEX(2987, -655, -3864);
	  COL_VERTEX(2065, 982, -1860);
	  COL_VERTEX(2065, 982, -1450);
	  COL_VERTEX(2065, 1033, -1860);
	  COL_VERTEX(3089, 1033, -1860);
	  COL_VERTEX(4011, 880, -1860);
	  COL_VERTEX(4216, 880, -1860);
	  COL_VERTEX(4216, 777, -1860);
	  COL_VERTEX(3960, 777, -1860);
	  COL_VERTEX(4011, 982, -1450);
	  COL_VERTEX(3601, 931, -1860);
	  COL_VERTEX(4011, 982, -1860);
	  COL_VERTEX(3960, 777, -1450);
	  COL_VERTEX(3243, -41, -3864);
	  COL_VERTEX(3243, 112, -3864);
	  COL_VERTEX(3089, 112, -3864);
	  COL_VERTEX(3089, -41, -3454);
	  COL_VERTEX(3089, -41, -3864);
	  COL_VERTEX(3806, -195, -3864);
	  COL_VERTEX(3806, -41, -3864);
	  COL_VERTEX(4113, -195, -3864);
	  COL_VERTEX(4113, -41, -3864);
	  COL_VERTEX(3806, -195, -3454);
	  COL_VERTEX(921, -1321, -3882);
	  COL_VERTEX(921, -1321, -2243);
	  COL_VERTEX(307, -1321, -2243);
	  COL_VERTEX(307, -1321, -3882);
	  COL_VERTEX(2719, -1321, -343);
	  COL_VERTEX(2719, -1321, 270);
	  COL_VERTEX(3538, -1321, -343);
	  COL_VERTEX(3538, -1321, 270);
	  COL_VERTEX(4113, 982, 85);
	  COL_VERTEX(3089, 982, 85);
	  COL_VERTEX(4113, 1033, 85);
	  COL_VERTEX(2782, 982, 494);
	  COL_VERTEX(2782, 982, -938);
	  COL_VERTEX(3089, 982, -938);
	  COL_VERTEX(2424, -399, 85);
	  COL_VERTEX(3089, 163, 85);
	  COL_VERTEX(3806, -604, -3864);
	  COL_VERTEX(2475, -1014, -3864);
	  COL_VERTEX(3396, -1014, -3864);
	  COL_VERTEX(2475, -1065, -3454);
	  COL_VERTEX(4735, -937, 6257);
	  COL_VERTEX(4735, -937, 6871);
	  COL_VERTEX(4121, -937, 6257);
	  COL_VERTEX(4121, -732, 6871);
	  COL_VERTEX(4838, -1935, 6257);
	  COL_VERTEX(4838, -1935, 5950);
	  COL_VERTEX(4624, 3675, 2919);
	  COL_VERTEX(3959, 3675, 3584);
	  COL_VERTEX(4527, 2999, 3819);
	  COL_VERTEX(4624, 3819, 5189);
	  COL_VERTEX(6230, 3675, 3584);
	  COL_VERTEX(6230, 3675, 4524);
	  COL_VERTEX(5565, 3675, 2919);
	  COL_VERTEX(5565, 3819, 2919);
	  COL_VERTEX(4624, 3819, 2919);
	  COL_VERTEX(5565, 3819, 5189);
	  COL_VERTEX(3455, -1935, 5387);
	  COL_VERTEX(3148, -1935, 5387);
	  COL_VERTEX(3353, -1731, 5489);
	  COL_VERTEX(3250, -1731, 5591);
	  COL_VERTEX(3404, -1935, 5745);
	  COL_VERTEX(3199, -1935, 5745);
	  COL_VERTEX(3303, -937, 6871);
	  COL_VERTEX(3712, -732, 7076);
	  COL_VERTEX(3712, -937, 6052);
	  COL_VERTEX(4838, -2089, 6257);
	  COL_VERTEX(3609, -2089, 6257);
	  COL_VERTEX(3609, -2089, 6871);
	  COL_VERTEX(4838, -2089, 6871);
	  COL_VERTEX(4838, -2396, 7179);
	  COL_VERTEX(7602, -2396, 7179);
	  COL_VERTEX(4838, -2396, 5950);
	  COL_VERTEX(7602, -2396, 5950);
	  COL_VERTEX(-1040, 1690, 133);
	  COL_VERTEX(-630, 1690, -480);
	  COL_VERTEX(-630, 922, -480);
	  COL_VERTEX(-1040, 922, -480);
	  COL_VERTEX(-630, 1690, 133);
	  COL_VERTEX(-1626, 3120, 119);
	  COL_VERTEX(-1626, 1843, 119);
	  COL_VERTEX(-2036, 3120, 119);
	  COL_VERTEX(-2036, 3120, -494);
	  COL_VERTEX(-1626, 3120, -494);
	  COL_VERTEX(1921, 2612, 279);
	  COL_VERTEX(1998, 2714, -130);
	  COL_VERTEX(2075, 2509, -130);
	  COL_VERTEX(2075, 2612, -130);
	  COL_VERTEX(1921, 2509, -130);
	  COL_VERTEX(2974, 2314, -124);
	  COL_VERTEX(2974, 2570, -124);
	  COL_VERTEX(2820, 2570, -124);
	  COL_VERTEX(2820, 2314, 285);
	  COL_VERTEX(2820, 2314, -124);
	  COL_VERTEX(3844, 2314, -124);
	  COL_VERTEX(3844, 2519, -124);
	  COL_VERTEX(3998, 2314, -124);
	  COL_VERTEX(3998, 2519, -124);
	  COL_VERTEX(3844, 2314, 285);
	  COL_VERTEX(3332, 2468, -124);
	  COL_VERTEX(3332, 2314, -124);
	  COL_VERTEX(3486, 2314, -124);
	  COL_VERTEX(3486, 2468, -124);
	  COL_VERTEX(3332, 2314, 285);
	  COL_VERTEX(2357, 3109, -1773);
	  COL_VERTEX(2357, 3109, -852);
	  COL_VERTEX(2204, 3083, -1773);
	  COL_VERTEX(2204, 3109, -1773);
	  COL_VERTEX(2204, 3109, -852);
	  COL_VERTEX(1180, 3083, -340);
	  COL_VERTEX(2613, 2878, -340);
	  COL_VERTEX(-8049, 3891, -4426);
	  COL_VERTEX(-8049, 3891, -3351);
	  COL_VERTEX(-7435, 3891, -4426);
	  COL_VERTEX(-7435, 3891, -3351);
	  COL_VERTEX(-7173, 3584, -2387);
	  COL_VERTEX(-6292, 3584, -1770);
	  COL_VERTEX(-6821, 3584, -2890);
	  COL_VERTEX(-5940, 3584, -2273);
	  COL_VERTEX(5646, -2038, 2241);
	  COL_VERTEX(5646, -2038, 1831);
	  COL_VERTEX(5031, -2038, 2241);
	  COL_VERTEX(5031, -2038, 1831);
	  COL_VERTEX(3247, 4225, -2653);
	  COL_VERTEX(3861, 4225, -2038);
	  COL_VERTEX(3861, 4430, -2038);
	  COL_VERTEX(3247, 4430, -2038);
	  COL_VERTEX(3247, 4430, -2653);
	  COL_VERTEX(3452, 4245, -2243);
	  COL_VERTEX(3247, 4245, -2038);
	  COL_VERTEX(3452, 4245, -2448);
	  COL_VERTEX(3656, 4245, -2243);
	  COL_VERTEX(3861, 4245, -2038);
	  COL_VERTEX(3247, 4245, -2653);
	  COL_VERTEX(3861, 4245, -2653);
	  COL_VERTEX(3656, 4276, -2448);
	  COL_VERTEX(921, -1116, 3364);
	  COL_VERTEX(307, -1116, 3364);
	  COL_VERTEX(921, -973, 3354);
	  COL_VERTEX(921, -963, 3364);
	  COL_VERTEX(307, -963, 3364);
	  COL_VERTEX(307, -973, 3354);
	  COL_VERTEX(716, -1116, 3569);
	  COL_VERTEX(512, -1147, 3569);
	  COL_VERTEX(307, -1147, 3364);
	  COL_VERTEX(921, -1147, 3364);
	  COL_VERTEX(716, -1147, 3774);
	  COL_VERTEX(512, -1147, 3774);
	  COL_VERTEX(307, -1147, 3979);
	  COL_VERTEX(921, -1147, 3979);
	  COL_VERTEX(307, -1167, 3364);
	  COL_VERTEX(307, -963, 3979);
	  COL_VERTEX(921, -963, 3979);
	  COL_VERTEX(921, -1167, 3979);
	  COL_VERTEX(307, -1321, 2135);
	  COL_VERTEX(307, -1321, 3364);
	  COL_VERTEX(921, -1321, 2135);
	  COL_VERTEX(4212, -1946, 2241);
	  COL_VERTEX(3393, -1946, 2241);
	  COL_VERTEX(4212, -1720, 1831);
	  COL_VERTEX(-2661, 3072, -4044);
	  COL_VERTEX(-2661, 4198, -5324);
	  COL_VERTEX(-2661, 5939, -4044);
	  COL_VERTEX(-3071, 6246, -6245);
	  COL_VERTEX(-2661, 4198, -5733);
	  COL_VERTEX(-2661, 3994, -5938);
	  COL_VERTEX(-2661, 5939, -6194);
	  COL_VERTEX(-2661, 3072, -6194);
	  COL_VERTEX(-2661, 3379, -5938);
	  COL_VERTEX(-5426, 3072, -3583);
	  COL_VERTEX(-5426, 5939, -3583);
	  COL_VERTEX(-4402, 4198, -3583);
	  COL_VERTEX(-3993, 4198, -3583);
	  COL_VERTEX(-3071, 6246, -3993);
	  COL_VERTEX(-5324, 6246, -3993);
	  COL_VERTEX(-3788, 3994, -3583);
	  COL_VERTEX(-2969, 5939, -3583);
	  COL_VERTEX(-3788, 3379, -3583);
	  COL_VERTEX(-5733, 5325, -5017);
	  COL_VERTEX(-5733, 5325, -5426);
	  COL_VERTEX(-5733, 5939, -6245);
	  COL_VERTEX(-5324, 6246, -6245);
	  COL_VERTEX(-5733, 3072, -6245);
	  COL_VERTEX(-5733, 5120, -4812);
	  COL_VERTEX(-5733, 4506, -4812);
	  COL_VERTEX(-5733, 5939, -3993);
	  COL_VERTEX(-2969, 3072, -6655);
	  COL_VERTEX(-2989, 3072, -6512);
	  COL_VERTEX(-2969, 5939, -6655);
	  COL_VERTEX(-2989, 5939, -6512);
	  COL_VERTEX(-5590, 3072, -3972);
	  COL_VERTEX(-5406, 3072, -3726);
	  COL_VERTEX(-2989, 5939, -3726);
	  COL_VERTEX(-2805, 5939, -3972);
	  COL_VERTEX(-5406, 5939, -6512);
	  COL_VERTEX(-5426, 5939, -6655);
	  COL_VERTEX(-5426, 3072, -6655);
	  COL_VERTEX(-4262, 5939, -6655);
	  COL_VERTEX(-4262, 3686, -6655);
	  COL_VERTEX(-4109, 5939, -6655);
	  COL_VERTEX(-4262, 3686, -6501);
	  COL_VERTEX(-3725, 3072, -6655);
	  COL_VERTEX(-4646, 3072, -6348);
	  COL_VERTEX(-3827, 3482, -6450);
	  COL_VERTEX(-4032, 3686, -6450);
	  COL_VERTEX(-4032, 3686, -6655);
	  COL_VERTEX(-4339, 3686, -6655);
	  COL_VERTEX(-4237, 3430, -6450);
	  COL_VERTEX(-4237, 3430, -6655);
	  COL_VERTEX(-4134, 3430, -6655);
	  COL_VERTEX(-4032, 3328, -6450);
	  COL_VERTEX(-4032, 3328, -6655);
	  COL_VERTEX(-4544, 3482, -6655);
	  COL_VERTEX(-4032, 3123, -6450);
	  COL_VERTEX(-3827, 3482, -6655);
	  COL_VERTEX(-4544, 3123, -6655);
	  COL_VERTEX(-4339, 3328, -6450);
	  COL_VERTEX(-4032, 3072, -6655);
	  COL_VERTEX(-4339, 3328, -6655);
	  COL_VERTEX(-4607, 3379, -3839);
	  COL_VERTEX(-4607, 3072, -3583);
	  COL_VERTEX(-3788, 3072, -4351);
	  COL_VERTEX(-4607, 3174, -4351);
	  COL_VERTEX(-4607, 3277, -4095);
	  COL_VERTEX(-3788, 3072, -3583);
	  COL_VERTEX(-3071, 3068, -4402);
	  COL_VERTEX(-3583, 3068, -4402);
	  COL_VERTEX(-3583, 3068, -5733);
	  COL_VERTEX(-3071, 3068, -5733);
	  COL_VERTEX(-2457, 5939, -6143);
	  COL_VERTEX(-2880, 7203, -6570);
	  COL_VERTEX(-3071, 6451, -6245);
	  COL_VERTEX(-2230, 5939, -6637);
	  COL_VERTEX(-2486, 2831, -6138);
	  COL_VERTEX(-3071, 5939, -6860);
	  COL_VERTEX(-5324, 6451, -6245);
	  COL_VERTEX(-4607, 6451, -5426);
	  COL_VERTEX(-3788, 6451, -4812);
	  COL_VERTEX(-5847, 2838, -7037);
	  COL_VERTEX(-6165, 5939, -6637);
	  COL_VERTEX(-5938, 5939, -6143);
	  COL_VERTEX(-5817, 5939, -7042);
	  COL_VERTEX(-5324, 5939, -6860);
	  COL_VERTEX(-5515, 7203, -3668);
	  COL_VERTEX(-5938, 5939, -4095);
	  COL_VERTEX(-5324, 6451, -3993);
	  COL_VERTEX(-3788, 6246, -5426);
	  COL_VERTEX(-4607, 6246, -4812);
	  COL_VERTEX(-3788, 6246, -4812);
	  COL_VERTEX(-2577, 5939, -3196);
	  COL_VERTEX(-2230, 5939, -3601);
	  COL_VERTEX(-3071, 6451, -3993);
	  COL_VERTEX(-3071, 5939, -3378);
	  COL_VERTEX(-4607, 6246, -5426);
	  COL_VERTEX(-3071, 2867, -6860);
	  COL_VERTEX(-5938, 2867, -4095);
	  COL_VERTEX(-5938, 2970, -3378);
	  COL_VERTEX(-5053, 3328, -3086);
	  COL_VERTEX(-5068, 3328, -3378);
	  COL_VERTEX(-3890, 3072, -2815);
	  COL_VERTEX(-3552, 2970, -3378);
	  COL_VERTEX(-3788, 3482, -2713);
	  COL_VERTEX(-3788, 3328, -2713);
	  COL_VERTEX(-3342, 3328, -3086);
	  COL_VERTEX(-3327, 3328, -3378);
	  COL_VERTEX(-4607, 3328, -2713);
	  COL_VERTEX(-3788, 3381, -2764);
	  COL_VERTEX(-3788, 3379, -2713);
	  COL_VERTEX(-4610, 3482, -2766);
	  COL_VERTEX(-5053, 3482, -3086);
	  COL_VERTEX(-3788, 3482, -2764);
	  COL_VERTEX(-3378, 3482, -3378);
	  COL_VERTEX(-3378, 3482, -3122);
	  COL_VERTEX(-5324, 2867, -3378);
	  COL_VERTEX(-6165, 2867, -3601);
	  COL_VERTEX(-5324, 2867, -6860);
	  COL_VERTEX(-5938, 2867, -6143);
	  COL_VERTEX(-2457, 3994, -5119);
	  COL_VERTEX(-2457, 4198, -5324);
	  COL_VERTEX(-2457, 5939, -4095);
	  COL_VERTEX(-2457, 2867, -4095);
	  COL_VERTEX(-2457, 3379, -5119);
	  COL_VERTEX(-2457, 3379, -5938);
	  COL_VERTEX(-3071, 2867, -3378);
	  COL_VERTEX(-2457, 4198, -5733);
	  COL_VERTEX(-5324, 5939, -3378);
	  COL_VERTEX(-5817, 5939, -3196);
	  COL_VERTEX(-5017, 3482, -3378);
	  COL_VERTEX(-5017, 3379, -3378);
	  COL_VERTEX(-4607, 3482, -2764);
	  COL_VERTEX(-5017, 3482, -3122);
	  COL_VERTEX(-5938, 4506, -5631);
	  COL_VERTEX(-5733, 4506, -5631);
	  COL_VERTEX(-2661, 3379, -5119);
	  COL_VERTEX(-4607, 3379, -3583);
	  COL_VERTEX(-4607, 3379, -3378);
	  COL_VERTEX(1653, 2616, -2755);
	  COL_VERTEX(1857, 2104, -2346);
	  COL_VERTEX(1038, 3026, -2346);
	  COL_VERTEX(1653, 2616, -1936);
	  COL_VERTEX(2881, 2514, -1629);
	  COL_VERTEX(2881, 2514, -3062);
	  COL_VERTEX(5237, 2002, -2346);
	  COL_VERTEX(5117, 2657, -2958);
	  COL_VERTEX(5117, 2606, -1729);
	  COL_VERTEX(4139, 2568, -1627);
	  COL_VERTEX(4417, 1695, -2346);
	  COL_VERTEX(2881, 1695, -2346);
	  COL_VERTEX(5646, 2821, -2448);
	  COL_VERTEX(6618, -858, -836);
	  COL_VERTEX(6874, -858, -477);
	  COL_VERTEX(6721, -1012, -631);
	  COL_VERTEX(6107, -1219, 1831);
	  COL_VERTEX(6260, -1219, 1831);
	  COL_VERTEX(6260, -1372, 1831);
	  COL_VERTEX(6107, -1372, 1831);
	  COL_VERTEX(6107, -1372, 2241);
	  COL_VERTEX(6925, -858, -836);
	  COL_VERTEX(6823, -653, -733);
	  COL_VERTEX(6721, -653, -631);
	  COL_VERTEX(6669, -858, -477);
	  COL_VERTEX(7084, -1295, 1094);
	  COL_VERTEX(6778, -1091, 1674);
	  COL_VERTEX(6199, -1091, 1674);
	  COL_VERTEX(5889, -1295, 660);
	  COL_VERTEX(7084, -1295, 660);
	  COL_VERTEX(-6009, -4598, 7054);
	  COL_VERTEX(-5600, -4598, 7259);
	  COL_VERTEX(-5600, -4803, 5928);
	  COL_VERTEX(-5600, -4803, 7259);
	  COL_VERTEX(-787, -4803, 7259);
	  COL_VERTEX(-377, -4803, 7054);
	  COL_VERTEX(-787, -4598, 5928);
	  COL_VERTEX(-5600, -4598, 5928);
	  COL_VERTEX(332, -1935, 6257);
	  COL_VERTEX(1254, -1935, 6257);
	  COL_VERTEX(844, -1526, 6257);
	  COL_VERTEX(1254, -1935, 6871);
	  COL_VERTEX(742, -1526, 6257);
	  COL_VERTEX(921, -3267, 6129);
	  COL_VERTEX(921, -3676, 6129);
	  COL_VERTEX(921, -3267, 5207);
	  COL_VERTEX(921, -2857, 3364);
	  COL_VERTEX(921, -3062, 4286);
	  COL_VERTEX(921, -3676, 3364);
	  COL_VERTEX(716, -3553, 6231);
	  COL_VERTEX(563, -3471, 6231);
	  COL_VERTEX(665, -3471, 6231);
	  COL_VERTEX(-377, -4700, 6440);
	  COL_VERTEX(825, -4700, 6440);
	  COL_VERTEX(825, -4700, 7566);
	  COL_VERTEX(415, -4700, 7566);
	  COL_VERTEX(415, -4700, 6747);
	  COL_VERTEX(665, -3471, 6887);
	  COL_VERTEX(563, -3471, 6989);
	  COL_VERTEX(512, -3553, 6887);
	  COL_VERTEX(563, -3635, 6887);
	  COL_VERTEX(614, -3635, 6989);
	  COL_VERTEX(665, -3635, 6887);
	  COL_VERTEX(-358, -3625, 6871);
	  COL_VERTEX(-358, -3625, 6257);
	  COL_VERTEX(-1126, -3625, 6257);
	  COL_VERTEX(-1126, -3625, 6871);
	  COL_VERTEX(921, -3062, 5207);
	  COL_VERTEX(921, -2857, 4286);
	  COL_VERTEX(307, -2857, 3364);
	  COL_VERTEX(307, -3062, 4286);
	  COL_VERTEX(-1202, -1321, 4619);
	  COL_VERTEX(-2482, -1321, 4619);
	  COL_VERTEX(-1202, -2140, 6257);
	  COL_VERTEX(-1816, -2140, 6257);
	  COL_VERTEX(-1816, -1935, 6257);
	  COL_VERTEX(-1304, -1412, 5603);
	  COL_VERTEX(-1509, -1238, 5603);
	  COL_VERTEX(-1509, -1412, 5603);
	  COL_VERTEX(-1304, -1248, 5398);
	  COL_VERTEX(-1714, -1658, 5910);
	  COL_VERTEX(-1509, -1658, 5910);
	  COL_VERTEX(-1714, -1494, 5910);
	  COL_VERTEX(-1509, -1494, 5705);
	  COL_VERTEX(-1304, -1903, 6217);
	  COL_VERTEX(-1509, -1903, 6217);
	  COL_VERTEX(-1509, -1750, 6217);
	  COL_VERTEX(-1304, -1750, 6025);
	  COL_VERTEX(-1304, -1782, 6065);
	  COL_VERTEX(-2482, -1321, 5233);
	  COL_VERTEX(-4991, -1116, 3851);
	  COL_VERTEX(-4888, -911, 3953);
	  COL_VERTEX(-4888, -911, 4055);
	  COL_VERTEX(-4939, -1116, 4209);
	  COL_VERTEX(-4735, -1116, 4209);
	  COL_VERTEX(-4888, -1270, 4055);
	  COL_VERTEX(-4786, -911, 3953);
	  COL_VERTEX(-4786, -911, 4055);
	  COL_VERTEX(-690, -1935, 6257);
	  COL_VERTEX(-690, -2140, 6871);
	  COL_VERTEX(-1816, -2140, 6871);
	  COL_VERTEX(307, -3267, 5207);
	  COL_VERTEX(307, -3676, 6129);
	  COL_VERTEX(-6269, -1321, 5233);
	  COL_VERTEX(-5451, -1321, 4619);
	  COL_VERTEX(-5860, -1321, 4414);
	  COL_VERTEX(-5451, -1116, 5233);
	  COL_VERTEX(-5860, -1116, 5438);
	  COL_VERTEX(-4632, -1321, 4619);
	  COL_VERTEX(-4632, -1321, 5233);
	  COL_VERTEX(-4887, -1935, 6257);
	  COL_VERTEX(-4887, -2140, 6871);
	  COL_VERTEX(-5809, -2140, 6257);
	  COL_VERTEX(-5809, -2140, 6871);
	  COL_VERTEX(-1816, -1321, 5233);
	  COL_VERTEX(-4068, -3625, 6257);
	  COL_VERTEX(-3709, -2755, 6871);
	  COL_VERTEX(-3300, -3625, 6871);
	  COL_VERTEX(-3300, -3625, 6257);
	  COL_VERTEX(-4068, -3625, 6871);
	  COL_VERTEX(-3865, -3558, 6887);
	  COL_VERTEX(-5962, -3456, 6887);
	  COL_VERTEX(-6013, -3558, 6989);
	  COL_VERTEX(-5962, -3456, 6231);
	  COL_VERTEX(-3968, -3558, 6129);
	  COL_VERTEX(-6065, -3558, 6231);
	  COL_VERTEX(-6013, -2893, 6989);
	  COL_VERTEX(-6065, -2893, 6887);
	  COL_VERTEX(-5962, -2893, 6887);
	  COL_VERTEX(-6065, -2893, 6231);
	  COL_VERTEX(-6013, -2893, 6129);
	  COL_VERTEX(-5962, -2893, 6231);
	  COL_VERTEX(-5962, -2729, 6231);
	  COL_VERTEX(-6065, -2729, 6231);
	  COL_VERTEX(-5911, -2811, 6231);
	  COL_VERTEX(-6065, -2893, 6129);
	  COL_VERTEX(-6065, -2729, 6989);
	  COL_VERTEX(-5962, -2729, 6887);
	  COL_VERTEX(-6116, -2811, 6887);
	  COL_VERTEX(-5962, -1935, 5489);
	  COL_VERTEX(-5655, -1935, 5489);
	  COL_VERTEX(-5757, -1731, 5591);
	  COL_VERTEX(-5706, -1935, 5847);
	  COL_VERTEX(-5860, -1731, 5694);
	  COL_VERTEX(-5911, -1935, 5847);
	  COL_VERTEX(3393, -2089, 2359);
	  COL_VERTEX(2886, -1833, 2866);
	  COL_VERTEX(2307, -1833, 2866);
	  COL_VERTEX(1800, -2089, 1780);
	  COL_VERTEX(2307, -1833, 1273);
	  COL_VERTEX(2886, -1833, 1273);
	  COL_VERTEX(3393, -2089, 1780);
	  COL_VERTEX(-6370, -1782, -343);
	  COL_VERTEX(-3093, -1782, -445);
	  COL_VERTEX(-3093, -1116, -343);
	  COL_VERTEX(-3605, -860, -343);
	  COL_VERTEX(-4322, -860, -343);
	  COL_VERTEX(-4322, -860, 270);
	  COL_VERTEX(-3605, -707, -343);
	  COL_VERTEX(-2786, -451, 270);
	  COL_VERTEX(-3298, -297, 270);
	  COL_VERTEX(-3605, -451, -343);
	  COL_VERTEX(-2786, -297, -445);
	  COL_VERTEX(-6063, -1116, -343);
	  COL_VERTEX(-3093, 1443, -343);
	  COL_VERTEX(-7087, -1782, 885);
	  COL_VERTEX(-7496, -1782, 680);
	  COL_VERTEX(-7087, -1987, -445);
	  COL_VERTEX(-7087, -1987, 885);
	  COL_VERTEX(-2274, -1987, 885);
	  COL_VERTEX(-1864, -1987, 680);
	  COL_VERTEX(-2274, -1782, -445);
	  COL_VERTEX(-7087, -1782, -445);
	  COL_VERTEX(-5448, -195, -343);
	  COL_VERTEX(-6063, -195, 270);
	  COL_VERTEX(-5653, 931, -343);
	  COL_VERTEX(-4629, -1782, 270);
	  COL_VERTEX(-4629, -1782, -343);
	  COL_VERTEX(-5039, 521, 270);
	  COL_VERTEX(-5039, 521, -343);
	  COL_VERTEX(-4936, 521, -343);
	  COL_VERTEX(-4936, 726, -343);
	  COL_VERTEX(-3093, 316, 270);
	  COL_VERTEX(-3298, -297, -343);
	  COL_VERTEX(-3298, -451, 270);
	  COL_VERTEX(-3298, -758, -343);
	  COL_VERTEX(-3093, -758, -343);
	  COL_VERTEX(-3912, -41, 270);
	  COL_VERTEX(-4117, 112, 270);
	  COL_VERTEX(-4117, -707, 270);
	  COL_VERTEX(-3605, -41, -343);
	  COL_VERTEX(-3912, -41, -343);
	  COL_VERTEX(-3605, 112, -343);
	  COL_VERTEX(-4117, -143, -343);
	  COL_VERTEX(-4117, -143, 270);
	  COL_VERTEX(-4322, -297, -343);
	  COL_VERTEX(-4117, -297, -343);
	  COL_VERTEX(-4117, -707, -343);
	  COL_VERTEX(-4629, 419, -343);
	  COL_VERTEX(-4629, 572, 270);
	  COL_VERTEX(-3810, 419, 270);
	  COL_VERTEX(-3810, 419, -343);
	  COL_VERTEX(-3810, 572, -343);
	  COL_VERTEX(-4220, 982, -343);
	  COL_VERTEX(-4424, 572, -343);
	  COL_VERTEX(-5141, -195, -343);
	  COL_VERTEX(-4629, -195, -343);
	  COL_VERTEX(-5141, -195, 270);
	  COL_VERTEX(-4629, 9, -343);
	  COL_VERTEX(-4834, 112, -343);
	  COL_VERTEX(-4936, 214, -343);
	  COL_VERTEX(-7394, -1116, -445);
	  COL_VERTEX(-2479, 2160, 270);
	  COL_VERTEX(-7189, -1116, 270);
	  COL_VERTEX(-7189, 2160, -343);
	  COL_VERTEX(-2479, 2160, -343);
	  COL_VERTEX(-2479, 1648, -343);
	  COL_VERTEX(-5653, -1116, -343);
	  COL_VERTEX(-4527, -655, -343);
	  COL_VERTEX(-6063, -655, 270);
	  COL_VERTEX(-4527, -502, -343);
	  COL_VERTEX(-5448, 214, -343);
	  COL_VERTEX(-3093, 726, -343);
	  COL_VERTEX(-2888, 726, -445);
	  COL_VERTEX(-2888, 1648, -445);
	  COL_VERTEX(-6677, -1116, -445);
	  COL_VERTEX(-3093, -297, -445);
	  COL_VERTEX(-2888, 1648, -343);
	  COL_VERTEX(-6677, -1116, -343);
	  COL_VERTEX(-2274, 1648, -445);
	  COL_VERTEX(-1864, -1321, -343);
	  COL_VERTEX(-1864, -1321, 270);
	  COL_VERTEX(-1455, -1321, 270);
	  COL_VERTEX(-1455, -1321, -343);
	  COL_VERTEX(-2479, -1321, -343);
	  COL_VERTEX(-2274, -1321, -343);
	  COL_VERTEX(-2274, -1321, 270);
	  COL_VERTEX(-2479, -1321, 270);
	  COL_VERTEX(975, 3083, 274);
	  COL_VERTEX(1180, 2878, 274);
	  COL_VERTEX(-4197, 3123, -2405);
	  COL_VERTEX(-6860, 3123, -2405);
	  COL_VERTEX(-6860, 3123, -2713);
	  COL_VERTEX(-4197, 3123, -2713);
	  COL_VERTEX(2987, -604, -3454);
	  COL_VERTEX(3806, -655, -3454);
	  COL_VERTEX(3806, -604, -3454);
	  COL_VERTEX(3806, -655, -3864);
	  COL_VERTEX(3089, 982, -1450);
	  COL_VERTEX(3089, 982, -1860);
	  COL_VERTEX(3089, 1033, -1450);
	  COL_VERTEX(2065, 1033, -1450);
	  COL_VERTEX(4216, 880, -1450);
	  COL_VERTEX(4216, 777, -1450);
	  COL_VERTEX(3601, 931, -1450);
	  COL_VERTEX(3601, 982, -1450);
	  COL_VERTEX(3601, 982, -1860);
	  COL_VERTEX(4011, 880, -1450);
	  COL_VERTEX(3243, -41, -3454);
	  COL_VERTEX(3243, 112, -3454);
	  COL_VERTEX(3089, 112, -3454);
	  COL_VERTEX(3806, -41, -3454);
	  COL_VERTEX(4113, -195, -3454);
	  COL_VERTEX(4113, -41, -3454);
	  COL_VERTEX(921, -1116, -2243);
	  COL_VERTEX(307, -1116, -2243);
	  COL_VERTEX(307, -1116, -3882);
	  COL_VERTEX(921, -1116, -3882);
	  COL_VERTEX(3538, -1116, -343);
	  COL_VERTEX(2719, -1116, -343);
	  COL_VERTEX(3538, -1116, 270);
	  COL_VERTEX(2719, -1116, 270);
	  COL_VERTEX(3089, 1033, 85);
	  COL_VERTEX(4113, 982, 494);
	  COL_VERTEX(2782, 1033, 494);
	  COL_VERTEX(2782, 1033, -938);
	  COL_VERTEX(4113, 1033, 494);
	  COL_VERTEX(3089, 1033, -938);
	  COL_VERTEX(2424, -399, 494);
	  COL_VERTEX(3089, 163, 494);
	  COL_VERTEX(3396, -1065, -3864);
	  COL_VERTEX(3396, -1065, -3454);
	  COL_VERTEX(3396, -1014, -3454);
	  COL_VERTEX(2475, -1014, -3454);
	  COL_VERTEX(2475, -1065, -3864);
	  COL_VERTEX(4940, -732, 6871);
	  COL_VERTEX(4121, -937, 6871);
	  COL_VERTEX(4940, -732, 6257);
	  COL_VERTEX(4121, -732, 6257);
	  COL_VERTEX(3712, -732, 6052);
	  COL_VERTEX(3712, -937, 7076);
	  COL_VERTEX(4838, -2038, 5950);
	  COL_VERTEX(4838, -2038, 6257);
	  COL_VERTEX(3303, -732, 6257);
	  COL_VERTEX(3303, -937, 6257);
	  COL_VERTEX(4735, -1935, 6257);
	  COL_VERTEX(4735, -1935, 5950);
	  COL_VERTEX(4860, 2999, 3486);
	  COL_VERTEX(3959, 3675, 4524);
	  COL_VERTEX(4527, 2999, 4289);
	  COL_VERTEX(4624, 3675, 5189);
	  COL_VERTEX(3959, 3819, 4524);
	  COL_VERTEX(3959, 3819, 3584);
	  COL_VERTEX(5330, 2999, 3486);
	  COL_VERTEX(5662, 2999, 3819);
	  COL_VERTEX(6230, 3819, 3584);
	  COL_VERTEX(6230, 3819, 4524);
	  COL_VERTEX(5565, 3675, 5189);
	  COL_VERTEX(3353, -1731, 5591);
	  COL_VERTEX(3250, -1731, 5489);
	  COL_VERTEX(3353, -2089, 5591);
	  COL_VERTEX(3250, -2089, 5591);
	  COL_VERTEX(3303, -732, 6871);
	  COL_VERTEX(3609, -1935, 6257);
	  COL_VERTEX(3609, -1935, 6871);
	  COL_VERTEX(4838, -1935, 6871);
	  COL_VERTEX(4838, -2243, 5950);
	  COL_VERTEX(4838, -2243, 7179);
	  COL_VERTEX(7602, -2243, 5950);
	  COL_VERTEX(7602, -2243, 7179);
	  COL_VERTEX(-630, 922, 133);
	  COL_VERTEX(-1040, 922, 133);
	  COL_VERTEX(-1040, 1690, -480);
	  COL_VERTEX(-1626, 1843, -494);
	  COL_VERTEX(-2036, 1843, -494);
	  COL_VERTEX(-2036, 1843, 119);
	  COL_VERTEX(2075, 2612, 279);
	  COL_VERTEX(1998, 2714, 279);
	  COL_VERTEX(2075, 2509, 279);
	  COL_VERTEX(1921, 2612, -130);
	  COL_VERTEX(1921, 2509, 279);
	  COL_VERTEX(2974, 2314, 285);
	  COL_VERTEX(2974, 2570, 285);
	  COL_VERTEX(2820, 2570, 285);
	  COL_VERTEX(3844, 2519, 285);
	  COL_VERTEX(3998, 2314, 285);
	  COL_VERTEX(3998, 2519, 285);
	  COL_VERTEX(3332, 2468, 285);
	  COL_VERTEX(3486, 2314, 285);
	  COL_VERTEX(3486, 2468, 285);
	  COL_VERTEX(2357, 3083, -1773);
	  COL_VERTEX(2357, 3083, -852);
	  COL_VERTEX(2204, 3083, -852);
	  COL_VERTEX(-8049, 4352, -4426);
	  COL_VERTEX(-7435, 4352, -4426);
	  COL_VERTEX(-7435, 4352, -3351);
	  COL_VERTEX(-8049, 4352, -3351);
	  COL_VERTEX(-6821, 3942, -2890);
	  COL_VERTEX(-7173, 3942, -2387);
	  COL_VERTEX(-5940, 3942, -2273);
	  COL_VERTEX(-6292, 3942, -1770);
	  COL_VERTEX(5031, -1884, 2241);
	  COL_VERTEX(5646, -1884, 2241);
	  COL_VERTEX(5031, -1884, 1831);
	  COL_VERTEX(5646, -1884, 1831);
	  COL_VERTEX(3861, 4430, -2653);
	  COL_VERTEX(3861, 4225, -2653);
	  COL_VERTEX(3247, 4225, -2038);
	  COL_VERTEX(3452, 4276, -2243);
	  COL_VERTEX(3656, 4245, -2448);
	  COL_VERTEX(3656, 4276, -2243);
	  COL_VERTEX(3452, 4276, -2448);
	  COL_VERTEX(921, -1116, 3354);
	  COL_VERTEX(307, -1116, 3354);
	  COL_VERTEX(512, -1116, 3569);
	  COL_VERTEX(716, -1147, 3569);
	  COL_VERTEX(512, -1116, 3774);
	  COL_VERTEX(716, -1116, 3774);
	  COL_VERTEX(307, -1167, 3979);
	  COL_VERTEX(921, -1167, 3364);
	  COL_VERTEX(307, -1116, 2135);
	  COL_VERTEX(921, -1116, 2135);
	  COL_VERTEX(921, -1321, 3364);
	  COL_VERTEX(4212, -1720, 2241);
	  COL_VERTEX(3396, -1716, 2241);
	  COL_VERTEX(3393, -1946, 1831);
	  COL_VERTEX(4212, -1946, 1831);
	  COL_VERTEX(3396, -1716, 1831);
	  COL_VERTEX(-2805, 3072, -3972);
	  COL_VERTEX(-2661, 3994, -5119);
	  COL_VERTEX(-2457, 3994, -5938);
	  COL_VERTEX(-2805, 3072, -6266);
	  COL_VERTEX(-2805, 5939, -6266);
	  COL_VERTEX(-5406, 5939, -3726);
	  COL_VERTEX(-4607, 3994, -3583);
	  COL_VERTEX(-3993, 4198, -3378);
	  COL_VERTEX(-4402, 4198, -3378);
	  COL_VERTEX(-2989, 3072, -3726);
	  COL_VERTEX(-2969, 3072, -3583);
	  COL_VERTEX(-3788, 3379, -3378);
	  COL_VERTEX(-3788, 3994, -3378);
	  COL_VERTEX(-4607, 3994, -3378);
	  COL_VERTEX(-5938, 5325, -5426);
	  COL_VERTEX(-5938, 5120, -5631);
	  COL_VERTEX(-5733, 5120, -5631);
	  COL_VERTEX(-5938, 5325, -5017);
	  COL_VERTEX(-5590, 5939, -6266);
	  COL_VERTEX(-5733, 3072, -3993);
	  COL_VERTEX(-5590, 5939, -3972);
	  COL_VERTEX(-5938, 4506, -4812);
	  COL_VERTEX(-5938, 5120, -4812);
	  COL_VERTEX(-5406, 3072, -6512);
	  COL_VERTEX(-5590, 3072, -6266);
	  COL_VERTEX(-4109, 5837, -6501);
	  COL_VERTEX(-4262, 5837, -6501);
	  COL_VERTEX(-4109, 3686, -6501);
	  COL_VERTEX(-4109, 3686, -6655);
	  COL_VERTEX(-3725, 3123, -6655);
	  COL_VERTEX(-3725, 3123, -6348);
	  COL_VERTEX(-3725, 3072, -6348);
	  COL_VERTEX(-4646, 3123, -6348);
	  COL_VERTEX(-4646, 3123, -6655);
	  COL_VERTEX(-4646, 3072, -6655);
	  COL_VERTEX(-4134, 3430, -6450);
	  COL_VERTEX(-4339, 3686, -6450);
	  COL_VERTEX(-4544, 3482, -6450);
	  COL_VERTEX(-4544, 3123, -6450);
	  COL_VERTEX(-3827, 3123, -6450);
	  COL_VERTEX(-3827, 3123, -6655);
	  COL_VERTEX(-4032, 3072, -6450);
	  COL_VERTEX(-4339, 3072, -6450);
	  COL_VERTEX(-4339, 3123, -6450);
	  COL_VERTEX(-4339, 3072, -6655);
	  COL_VERTEX(-3788, 3379, -3839);
	  COL_VERTEX(-3788, 3277, -3839);
	  COL_VERTEX(-4607, 3277, -3839);
	  COL_VERTEX(-4607, 3174, -4095);
	  COL_VERTEX(-3788, 3277, -4095);
	  COL_VERTEX(-3788, 3174, -4095);
	  COL_VERTEX(-4607, 3072, -4351);
	  COL_VERTEX(-3788, 3174, -4351);
	  COL_VERTEX(-3583, 3222, -4402);
	  COL_VERTEX(-3583, 3222, -5733);
	  COL_VERTEX(-3071, 3222, -5733);
	  COL_VERTEX(-3071, 3222, -4402);
	  COL_VERTEX(-2577, 5939, -7042);
	  COL_VERTEX(-2259, 2838, -6632);
	  COL_VERTEX(-2607, 2838, -7037);
	  COL_VERTEX(-3788, 6451, -5426);
	  COL_VERTEX(-6195, 2838, -6632);
	  COL_VERTEX(-5515, 7203, -6570);
	  COL_VERTEX(-6165, 5939, -3601);
	  COL_VERTEX(-2880, 7203, -3668);
	  COL_VERTEX(-4607, 6451, -4812);
	  COL_VERTEX(-2457, 2970, -6860);
	  COL_VERTEX(-2457, 2970, -3378);
	  COL_VERTEX(-5938, 2970, -6860);
	  COL_VERTEX(-5068, 3482, -3378);
	  COL_VERTEX(-4843, 2959, -3378);
	  COL_VERTEX(-4505, 3072, -2815);
	  COL_VERTEX(-3342, 3482, -3086);
	  COL_VERTEX(-3327, 3482, -3378);
	  COL_VERTEX(-4607, 3379, -2713);
	  COL_VERTEX(-4607, 3482, -2713);
	  COL_VERTEX(-4610, 3379, -2766);
	  COL_VERTEX(-3378, 3379, -3122);
	  COL_VERTEX(-3378, 3379, -3378);
	  COL_VERTEX(-3788, 3379, -2764);
	  COL_VERTEX(-5817, 2867, -3196);
	  COL_VERTEX(-4607, 3998, -3378);
	  COL_VERTEX(-4607, 3383, -3378);
	  COL_VERTEX(-2230, 2867, -3601);
	  COL_VERTEX(-2577, 2867, -3196);
	  COL_VERTEX(-4690, 3324, -3378);
	  COL_VERTEX(-3788, 3998, -3378);
	  COL_VERTEX(-3788, 3383, -3378);
	  COL_VERTEX(-3704, 3320, -3378);
	  COL_VERTEX(-4402, 4202, -3378);
	  COL_VERTEX(-3993, 4202, -3378);
	  COL_VERTEX(-5017, 3379, -3122);
	  COL_VERTEX(-4607, 3379, -2764);
	  COL_VERTEX(4036, 2567, -3062);
	  COL_VERTEX(5953, 2923, -2653);
	  COL_VERTEX(5953, 2923, -2038);
	  COL_VERTEX(5441, 2821, -2448);
	  COL_VERTEX(5441, 2821, -2243);
	  COL_VERTEX(5646, 2821, -2243);
	  COL_VERTEX(6823, -1012, -631);
	  COL_VERTEX(6260, -1372, 2241);
	  COL_VERTEX(6107, -1219, 2241);
	  COL_VERTEX(6260, -1219, 2241);
	  COL_VERTEX(6823, -653, -631);
	  COL_VERTEX(6721, -653, -733);
	  COL_VERTEX(6704, -1295, 1474);
	  COL_VERTEX(7285, -1091, 1167);
	  COL_VERTEX(7285, -1091, 588);
	  COL_VERTEX(6269, -1295, 1474);
	  COL_VERTEX(6778, -1091, 81);
	  COL_VERTEX(5692, -1091, 1167);
	  COL_VERTEX(5889, -1295, 1094);
	  COL_VERTEX(5692, -1091, 588);
	  COL_VERTEX(6199, -1091, 81);
	  COL_VERTEX(-6009, -4598, 6133);
	  COL_VERTEX(-6009, -4803, 6133);
	  COL_VERTEX(-6009, -4803, 7054);
	  COL_VERTEX(-787, -4598, 7259);
	  COL_VERTEX(-377, -4598, 7054);
	  COL_VERTEX(-377, -4598, 6133);
	  COL_VERTEX(-377, -4803, 6133);
	  COL_VERTEX(-787, -4803, 5928);
	  COL_VERTEX(332, -1935, 6871);
	  COL_VERTEX(742, -1526, 6871);
	  COL_VERTEX(844, -1526, 6871);
	  COL_VERTEX(307, -3267, 6129);
	  COL_VERTEX(307, -3676, 3364);
	  COL_VERTEX(512, -3553, 6231);
	  COL_VERTEX(512, -3553, 6129);
	  COL_VERTEX(563, -3471, 6129);
	  COL_VERTEX(665, -3471, 6129);
	  COL_VERTEX(-377, -4598, 6440);
	  COL_VERTEX(825, -4598, 6440);
	  COL_VERTEX(825, -4598, 7566);
	  COL_VERTEX(415, -4598, 7566);
	  COL_VERTEX(716, -3553, 6129);
	  COL_VERTEX(415, -4598, 6747);
	  COL_VERTEX(-377, -4598, 6747);
	  COL_VERTEX(-377, -4700, 6747);
	  COL_VERTEX(665, -3471, 6989);
	  COL_VERTEX(716, -3553, 6989);
	  COL_VERTEX(716, -3553, 6887);
	  COL_VERTEX(563, -3471, 6887);
	  COL_VERTEX(665, -3635, 6989);
	  COL_VERTEX(512, -3553, 6989);
	  COL_VERTEX(563, -3635, 6989);
	  COL_VERTEX(665, -4598, 6887);
	  COL_VERTEX(582, -4598, 6887);
	  COL_VERTEX(563, -4598, 6887);
	  COL_VERTEX(605, -4598, 6970);
	  COL_VERTEX(614, -4598, 6989);
	  COL_VERTEX(660, -4598, 6897);
	  COL_VERTEX(-358, -2959, 6257);
	  COL_VERTEX(-358, -2959, 6871);
	  COL_VERTEX(-1126, -2959, 6871);
	  COL_VERTEX(-1126, -2959, 6257);
	  COL_VERTEX(307, -3062, 5207);
	  COL_VERTEX(307, -2857, 4286);
	  COL_VERTEX(-1202, -1116, 4619);
	  COL_VERTEX(-1202, -1116, 5233);
	  COL_VERTEX(-1202, -1321, 5233);
	  COL_VERTEX(-2482, -1116, 5233);
	  COL_VERTEX(-2482, -1116, 4619);
	  COL_VERTEX(-1202, -1935, 6257);
	  COL_VERTEX(-1816, -1116, 5233);
	  COL_VERTEX(-1304, -1238, 5603);
	  COL_VERTEX(-1304, -1238, 5398);
	  COL_VERTEX(-1509, -1238, 5398);
	  COL_VERTEX(-1509, -1248, 5398);
	  COL_VERTEX(-1714, -1494, 5705);
	  COL_VERTEX(-1509, -1494, 5910);
	  COL_VERTEX(-1509, -1750, 6025);
	  COL_VERTEX(-1304, -1750, 6217);
	  COL_VERTEX(-1304, -1782, 6052);
	  COL_VERTEX(-1509, -1782, 6052);
	  COL_VERTEX(-1509, -1782, 6065);
	  COL_VERTEX(-4683, -1116, 3851);
	  COL_VERTEX(-4786, -1270, 4055);
	  COL_VERTEX(-690, -2140, 6257);
	  COL_VERTEX(-690, -1935, 6871);
	  COL_VERTEX(-1816, -1935, 6871);
	  COL_VERTEX(-6269, -1321, 4619);
	  COL_VERTEX(-5860, -1116, 4414);
	  COL_VERTEX(-6269, -1116, 4619);
	  COL_VERTEX(-6269, -1116, 5233);
	  COL_VERTEX(-5451, -1116, 4619);
	  COL_VERTEX(-5860, -1321, 5438);
	  COL_VERTEX(-5451, -1321, 5233);
	  COL_VERTEX(-4632, -1116, 4619);
	  COL_VERTEX(-4632, -1116, 5233);
	  COL_VERTEX(-4887, -1935, 6871);
	  COL_VERTEX(-4887, -2140, 6257);
	  COL_VERTEX(-5809, -1935, 6871);
	  COL_VERTEX(-5809, -1935, 6257);
	  COL_VERTEX(-3709, -2755, 6257);
	  COL_VERTEX(-3505, -2959, 6257);
	  COL_VERTEX(-3300, -2959, 6257);
	  COL_VERTEX(-4068, -2755, 6257);
	  COL_VERTEX(-3300, -2959, 6871);
	  COL_VERTEX(-3505, -2959, 6871);
	  COL_VERTEX(-4068, -2755, 6871);
	  COL_VERTEX(-3903, -3456, 6887);
	  COL_VERTEX(-3967, -3558, 6989);
	  COL_VERTEX(-6065, -3558, 6887);
	  COL_VERTEX(-6013, -3558, 6129);
	  COL_VERTEX(-3904, -3456, 6231);
	  COL_VERTEX(-3866, -3558, 6231);
	  COL_VERTEX(-5911, -2811, 6887);
	  COL_VERTEX(-6065, -2729, 6887);
	  COL_VERTEX(-6065, -2729, 6129);
	  COL_VERTEX(-6116, -2811, 6129);
	  COL_VERTEX(-6116, -2811, 6231);
	  COL_VERTEX(-5962, -2729, 6129);
	  COL_VERTEX(-5911, -2811, 6129);
	  COL_VERTEX(-5962, -2893, 6129);
	  COL_VERTEX(-5962, -2729, 6989);
	  COL_VERTEX(-5911, -2811, 6989);
	  COL_VERTEX(-6116, -2811, 6989);
	  COL_VERTEX(-6065, -2893, 6989);
	  COL_VERTEX(-5962, -2893, 6989);
	  COL_VERTEX(-5757, -1731, 5694);
	  COL_VERTEX(-5860, -1731, 5591);
	  COL_VERTEX(3393, -1833, 1780);
	  COL_VERTEX(3393, -1833, 2359);
	  COL_VERTEX(2886, -2089, 2866);
	  COL_VERTEX(2307, -2089, 2866);
	  COL_VERTEX(2886, -2089, 1273);
	  COL_VERTEX(1800, -2089, 2359);
	  COL_VERTEX(1800, -1833, 2359);
	  COL_VERTEX(2307, -2089, 1273);
	  COL_VERTEX(1800, -1833, 1780);
	  COL_VERTEX(-6370, 1443, -343);
	  COL_VERTEX(-3093, -1782, -343);
	  COL_VERTEX(-3093, -1782, 270);
	  COL_VERTEX(-3605, -860, 270);
	  COL_VERTEX(-4322, -707, 270);
	  COL_VERTEX(-3605, -707, 270);
	  COL_VERTEX(-3093, -1116, 270);
	  COL_VERTEX(-3093, 726, -445);
	  COL_VERTEX(-4322, -707, -343);
	  COL_VERTEX(-3605, -451, -445);
	  COL_VERTEX(-2786, -451, -445);
	  COL_VERTEX(-3605, -451, 270);
	  COL_VERTEX(-3605, -297, 270);
	  COL_VERTEX(-6063, 1443, -343);
	  COL_VERTEX(-3605, -297, -343);
	  COL_VERTEX(-3298, -758, 270);
	  COL_VERTEX(-3093, -297, 270);
	  COL_VERTEX(-2786, -297, 270);
	  COL_VERTEX(-3093, -758, 270);
	  COL_VERTEX(-5653, -1116, 270);
	  COL_VERTEX(-7496, -1987, 680);
	  COL_VERTEX(-7496, -1782, -241);
	  COL_VERTEX(-7496, -1987, -241);
	  COL_VERTEX(-5653, -1782, 270);
	  COL_VERTEX(-2888, 726, 270);
	  COL_VERTEX(-3093, 726, 270);
	  COL_VERTEX(-2274, -1782, 885);
	  COL_VERTEX(-1864, -1782, 680);
	  COL_VERTEX(-1864, -1987, -241);
	  COL_VERTEX(-1864, -1782, -241);
	  COL_VERTEX(-2274, -1987, -445);
	  COL_VERTEX(-6063, -195, -343);
	  COL_VERTEX(-5448, -195, 270);
	  COL_VERTEX(-5448, 214, 270);
	  COL_VERTEX(-5756, 1033, 270);
	  COL_VERTEX(-6063, 1033, 270);
	  COL_VERTEX(-5653, 214, 270);
	  COL_VERTEX(-5653, 931, 270);
	  COL_VERTEX(-4629, -1116, 270);
	  COL_VERTEX(-4629, -1116, -343);
	  COL_VERTEX(-4936, 726, 270);
	  COL_VERTEX(-5141, 726, 270);
	  COL_VERTEX(-4936, 521, 270);
	  COL_VERTEX(-5653, 214, -343);
	  COL_VERTEX(-5141, 726, -343);
	  COL_VERTEX(-3298, 316, 270);
	  COL_VERTEX(-3298, 316, -343);
	  COL_VERTEX(-3093, -451, 270);
	  COL_VERTEX(-3298, -451, -343);
	  COL_VERTEX(-3093, 316, -343);
	  COL_VERTEX(-3605, 112, 270);
	  COL_VERTEX(-3605, -41, 270);
	  COL_VERTEX(-3912, -707, 270);
	  COL_VERTEX(-4117, 112, -343);
	  COL_VERTEX(-4322, -143, 270);
	  COL_VERTEX(-4322, -297, 270);
	  COL_VERTEX(-4117, -297, 270);
	  COL_VERTEX(-3912, -707, -343);
	  COL_VERTEX(-4322, -143, -343);
	  COL_VERTEX(-4629, 572, -343);
	  COL_VERTEX(-4629, 419, 270);
	  COL_VERTEX(-4424, 572, 270);
	  COL_VERTEX(-3810, 572, 270);
	  COL_VERTEX(-4220, 982, 270);
	  COL_VERTEX(-4424, 982, 270);
	  COL_VERTEX(-4424, 982, -343);
	  COL_VERTEX(-5141, 214, 270);
	  COL_VERTEX(-4629, -195, 270);
	  COL_VERTEX(-4834, 112, 270);
	  COL_VERTEX(-4936, 112, 270);
	  COL_VERTEX(-4834, 9, 270);
	  COL_VERTEX(-4629, 9, 270);
	  COL_VERTEX(-4936, 214, 270);
	  COL_VERTEX(-4834, 9, -343);
	  COL_VERTEX(-5141, 214, -343);
	  COL_VERTEX(-4936, 112, -343);
	  COL_VERTEX(-7394, -1116, 270);
	  COL_VERTEX(-7189, 2160, 270);
	  COL_VERTEX(-2274, 1648, 270);
	  COL_VERTEX(-2479, 1648, 270);
	  COL_VERTEX(-7189, -1116, -343);
	  COL_VERTEX(-5653, -1782, -343);
	  COL_VERTEX(-6063, -655, -343);
	  COL_VERTEX(-4527, -655, 270);
	  COL_VERTEX(-4527, -502, 270);
	  COL_VERTEX(-6063, -502, 270);
	  COL_VERTEX(-3093, -451, -445);
	  COL_VERTEX(-1455, -1116, -343);
	  COL_VERTEX(-1864, -1116, -343);
	  COL_VERTEX(-1864, -1116, 270);
	  COL_VERTEX(-1455, -1116, 270);
	  COL_VERTEX(-2274, -1116, -343);
	  COL_VERTEX(-2274, -1116, 270);
	  COL_VERTEX(-2479, -1116, -343);
	  COL_VERTEX(-2479, -1116, 270);
	  COL_VERTEX(-8191, -8191, 8192);
	  COL_VERTEX(8192, -8191, 8192);
	  COL_VERTEX(8192, -8191, -8191);
	  COL_VERTEX(-8191, -8191, -8191);
	  COL_VERTEX(-6472, 1443, -343);
	  COL_VERTEX(3247, 4276, -2653);
	  COL_VERTEX(3861, 4276, -2653);
	  COL_VERTEX(3861, 4276, -2038);
	  COL_VERTEX(921, -1116, 3979);
	  COL_VERTEX(3393, -1833, 1831);
	  COL_VERTEX(-2661, 3072, -6655);
	  COL_VERTEX(-5756, 1033, -343);
	  COL_VERTEX(-6063, 1033, -343);
	  COL_VERTEX(-6063, -502, -343);
	  COL_VERTEX(-6063, 1648, -343);
	  COL_VERTEX(1180, 3083, -954);
	  COL_VERTEX(3247, 4276, -2038);
	  COL_VERTEX(307, -1116, 3979);
	  COL_VERTEX(3393, -1833, 2241);
	  COL_VERTEX(4212, -1833, 2241);
	  COL_VERTEX(4212, -1833, 1831);
	  COL_VERTEX(-5733, 3072, -6655);
	  COL_VERTEX(-5733, 3072, -3583);
	  COL_VERTEX(-2661, 3072, -3583);
	  COL_VERTEX(-3605, -297, -445);
	  COL_TRI_INIT(SURFACE_DEFAULT, 1324);
	  COL_TRI(5, 8, 9);
	  COL_TRI(0, 1, 2);
	  COL_TRI(1, 0, 3);
	  COL_TRI(1, 3, 4);
	  COL_TRI(5, 0, 2);
	  COL_TRI(5, 6, 7);
	  COL_TRI(5, 7, 8);
	  COL_TRI(48, 49, 50);
	  COL_TRI(48, 51, 49);
	  COL_TRI(14, 64, 65);
	  COL_TRI(14, 65, 15);
	  COL_TRI(13, 65, 24);
	  COL_TRI(24, 65, 64);
	  COL_TRI(25, 64, 11);
	  COL_TRI(24, 64, 25);
	  COL_TRI(66, 67, 68);
	  COL_TRI(66, 69, 67);
	  COL_TRI(68, 70, 66);
	  COL_TRI(75, 77, 76);
	  COL_TRI(71, 67, 69);
	  COL_TRI(72, 617, 73);
	  COL_TRI(72, 73, 618);
	  COL_TRI(73, 617, 66);
	  COL_TRI(73, 66, 70);
	  COL_TRI(74, 72, 618);
	  COL_TRI(80, 623, 79);
	  COL_TRI(76, 619, 620);
	  COL_TRI(76, 620, 78);
	  COL_TRI(77, 619, 76);
	  COL_TRI(75, 76, 78);
	  COL_TRI(78, 620, 621);
	  COL_TRI(78, 621, 75);
	  COL_TRI(75, 621, 622);
	  COL_TRI(75, 622, 77);
	  COL_TRI(77, 622, 619);
	  COL_TRI(79, 80, 623);
	  COL_TRI(79, 81, 80);
	  COL_TRI(80, 79, 81);
	  COL_TRI(120, 625, 624);
	  COL_TRI(81, 624, 80);
	  COL_TRI(80, 625, 623);
	  COL_TRI(80, 624, 625);
	  COL_TRI(81, 626, 624);
	  COL_TRI(79, 626, 81);
	  COL_TRI(79, 120, 626);
	  COL_TRI(82, 627, 83);
	  COL_TRI(82, 628, 627);
	  COL_TRI(83, 84, 82);
	  COL_TRI(84, 628, 82);
	  COL_TRI(87, 632, 88);
	  COL_TRI(83, 627, 629);
	  COL_TRI(83, 629, 630);
	  COL_TRI(83, 630, 84);
	  COL_TRI(84, 85, 628);
	  COL_TRI(85, 629, 627);
	  COL_TRI(85, 627, 628);
	  COL_TRI(86, 87, 88);
	  COL_TRI(87, 631, 632);
	  COL_TRI(88, 632, 93);
	  COL_TRI(86, 88, 89);
	  COL_TRI(88, 93, 89);
	  COL_TRI(89, 93, 633);
	  COL_TRI(86, 89, 91);
	  COL_TRI(89, 633, 91);
	  COL_TRI(90, 634, 633);
	  COL_TRI(90, 633, 93);
	  COL_TRI(91, 633, 634);
	  COL_TRI(91, 634, 635);
	  COL_TRI(92, 90, 636);
	  COL_TRI(92, 636, 86);
	  COL_TRI(91, 92, 86);
	  COL_TRI(93, 631, 636);
	  COL_TRI(93, 636, 90);
	  COL_TRI(93, 632, 631);
	  COL_TRI(91, 635, 92);
	  COL_TRI(94, 637, 97);
	  COL_TRI(94, 97, 98);
	  COL_TRI(95, 637, 94);
	  COL_TRI(96, 94, 98);
	  COL_TRI(96, 95, 94);
	  COL_TRI(97, 638, 639);
	  COL_TRI(97, 637, 638);
	  COL_TRI(98, 97, 639);
	  COL_TRI(98, 639, 96);
	  COL_TRI(95, 638, 637);
	  COL_TRI(99, 640, 100);
	  COL_TRI(100, 102, 101);
	  COL_TRI(100, 101, 99);
	  COL_TRI(101, 641, 103);
	  COL_TRI(101, 103, 99);
	  COL_TRI(102, 641, 101);
	  COL_TRI(99, 103, 640);
	  COL_TRI(107, 645, 646);
	  COL_TRI(102, 642, 641);
	  COL_TRI(103, 642, 640);
	  COL_TRI(103, 641, 642);
	  COL_TRI(104, 643, 105);
	  COL_TRI(105, 643, 644);
	  COL_TRI(105, 644, 106);
	  COL_TRI(106, 644, 645);
	  COL_TRI(106, 645, 107);
	  COL_TRI(104, 646, 643);
	  COL_TRI(107, 646, 104);
	  COL_TRI(113, 112, 652);
	  COL_TRI(108, 647, 110);
	  COL_TRI(108, 648, 647);
	  COL_TRI(109, 648, 108);
	  COL_TRI(110, 647, 649);
	  COL_TRI(110, 649, 111);
	  COL_TRI(109, 650, 648);
	  COL_TRI(111, 650, 109);
	  COL_TRI(111, 649, 650);
	  COL_TRI(112, 113, 651);
	  COL_TRI(113, 652, 115);
	  COL_TRI(114, 652, 112);
	  COL_TRI(112, 651, 114);
	  COL_TRI(114, 655, 652);
	  COL_TRI(115, 652, 655);
	  COL_TRI(115, 653, 654);
	  COL_TRI(116, 113, 115);
	  COL_TRI(115, 654, 116);
	  COL_TRI(117, 651, 113);
	  COL_TRI(117, 656, 651);
	  COL_TRI(116, 117, 113);
	  COL_TRI(116, 656, 117);
	  COL_TRI(116, 654, 656);
	  COL_TRI(119, 54, 53);
	  COL_TRI(115, 655, 653);
	  COL_TRI(118, 657, 55);
	  COL_TRI(118, 55, 52);
	  COL_TRI(119, 53, 658);
	  COL_TRI(121, 659, 663);
	  COL_TRI(120, 624, 626);
	  COL_TRI(121, 122, 659);
	  COL_TRI(122, 660, 659);
	  COL_TRI(122, 661, 660);
	  COL_TRI(123, 661, 662);
	  COL_TRI(123, 660, 661);
	  COL_TRI(123, 121, 663);
	  COL_TRI(123, 662, 121);
	  COL_TRI(128, 671, 670);
	  COL_TRI(124, 664, 125);
	  COL_TRI(125, 127, 665);
	  COL_TRI(125, 664, 127);
	  COL_TRI(125, 126, 124);
	  COL_TRI(125, 665, 126);
	  COL_TRI(126, 666, 124);
	  COL_TRI(126, 667, 666);
	  COL_TRI(126, 668, 667);
	  COL_TRI(126, 148, 668);
	  COL_TRI(124, 666, 664);
	  COL_TRI(127, 669, 665);
	  COL_TRI(128, 670, 129);
	  COL_TRI(133, 680, 677);
	  COL_TRI(129, 674, 128);
	  COL_TRI(129, 675, 674);
	  COL_TRI(130, 676, 132);
	  COL_TRI(130, 132, 131);
	  COL_TRI(131, 132, 677);
	  COL_TRI(132, 678, 677);
	  COL_TRI(133, 677, 679);
	  COL_TRI(131, 677, 680);
	  COL_TRI(131, 138, 130);
	  COL_TRI(131, 681, 138);
	  COL_TRI(131, 680, 681);
	  COL_TRI(134, 682, 136);
	  COL_TRI(134, 683, 682);
	  COL_TRI(134, 136, 137);
	  COL_TRI(134, 137, 684);
	  COL_TRI(135, 134, 684);
	  COL_TRI(135, 684, 685);
	  COL_TRI(136, 682, 676);
	  COL_TRI(136, 676, 130);
	  COL_TRI(137, 136, 130);
	  COL_TRI(138, 137, 130);
	  COL_TRI(135, 685, 139);
	  COL_TRI(135, 139, 686);
	  COL_TRI(145, 689, 144);
	  COL_TRI(139, 133, 679);
	  COL_TRI(139, 679, 686);
	  COL_TRI(140, 142, 687);
	  COL_TRI(141, 688, 142);
	  COL_TRI(142, 143, 687);
	  COL_TRI(142, 688, 143);
	  COL_TRI(141, 142, 140);
	  COL_TRI(143, 688, 141);
	  COL_TRI(144, 143, 145);
	  COL_TRI(144, 687, 143);
	  COL_TRI(145, 143, 141);
	  COL_TRI(140, 687, 144);
	  COL_TRI(145, 690, 689);
	  COL_TRI(144, 689, 140);
	  COL_TRI(140, 689, 690);
	  COL_TRI(140, 690, 141);
	  COL_TRI(141, 690, 145);
	  COL_TRI(127, 147, 669);
	  COL_TRI(146, 672, 673);
	  COL_TRI(146, 691, 672);
	  COL_TRI(147, 691, 146);
	  COL_TRI(147, 146, 669);
	  COL_TRI(153, 695, 155);
	  COL_TRI(148, 672, 668);
	  COL_TRI(148, 673, 672);
	  COL_TRI(149, 151, 150);
	  COL_TRI(150, 128, 149);
	  COL_TRI(150, 692, 128);
	  COL_TRI(151, 692, 150);
	  COL_TRI(151, 693, 692);
	  COL_TRI(149, 128, 694);
	  COL_TRI(149, 152, 151);
	  COL_TRI(149, 694, 152);
	  COL_TRI(152, 694, 693);
	  COL_TRI(152, 693, 151);
	  COL_TRI(153, 696, 695);
	  COL_TRI(154, 696, 153);
	  COL_TRI(154, 698, 696);
	  COL_TRI(155, 695, 697);
	  COL_TRI(155, 697, 156);
	  COL_TRI(156, 697, 698);
	  COL_TRI(156, 698, 154);
	  COL_TRI(157, 699, 161);
	  COL_TRI(157, 700, 699);
	  COL_TRI(157, 160, 700);
	  COL_TRI(157, 701, 160);
	  COL_TRI(160, 699, 700);
	  COL_TRI(158, 159, 701);
	  COL_TRI(159, 160, 701);
	  COL_TRI(160, 159, 699);
	  COL_TRI(161, 159, 158);
	  COL_TRI(161, 699, 159);
	  COL_TRI(162, 163, 702);
	  COL_TRI(163, 703, 702);
	  COL_TRI(163, 704, 703);
	  COL_TRI(164, 704, 163);
	  COL_TRI(164, 163, 162);
	  COL_TRI(165, 704, 164);
	  COL_TRI(165, 703, 704);
	  COL_TRI(166, 703, 165);
	  COL_TRI(166, 702, 703);
	  COL_TRI(162, 702, 166);
	  COL_TRI(167, 705, 706);
	  COL_TRI(167, 707, 705);
	  COL_TRI(168, 708, 167);
	  COL_TRI(168, 167, 706);
	  COL_TRI(167, 709, 707);
	  COL_TRI(168, 705, 170);
	  COL_TRI(168, 706, 705);
	  COL_TRI(169, 708, 168);
	  COL_TRI(169, 168, 170);
	  COL_TRI(169, 171, 708);
	  COL_TRI(170, 705, 707);
	  COL_TRI(170, 707, 169);
	  COL_TRI(169, 707, 709);
	  COL_TRI(169, 709, 171);
	  COL_TRI(171, 709, 167);
	  COL_TRI(171, 167, 708);
	  COL_TRI(172, 175, 176);
	  COL_TRI(178, 179, 177);
	  COL_TRI(172, 710, 175);
	  COL_TRI(173, 710, 172);
	  COL_TRI(174, 173, 172);
	  COL_TRI(175, 710, 711);
	  COL_TRI(175, 711, 712);
	  COL_TRI(176, 175, 712);
	  COL_TRI(176, 712, 174);
	  COL_TRI(174, 172, 176);
	  COL_TRI(173, 711, 710);
	  COL_TRI(177, 713, 178);
	  COL_TRI(178, 180, 179);
	  COL_TRI(183, 186, 716);
	  COL_TRI(179, 714, 181);
	  COL_TRI(179, 181, 177);
	  COL_TRI(180, 714, 179);
	  COL_TRI(177, 181, 713);
	  COL_TRI(180, 715, 714);
	  COL_TRI(181, 715, 713);
	  COL_TRI(181, 714, 715);
	  COL_TRI(182, 185, 184);
	  COL_TRI(182, 184, 183);
	  COL_TRI(183, 716, 182);
	  COL_TRI(184, 717, 186);
	  COL_TRI(184, 186, 183);
	  COL_TRI(185, 717, 184);
	  COL_TRI(191, 720, 188);
	  COL_TRI(185, 718, 717);
	  COL_TRI(186, 718, 716);
	  COL_TRI(186, 717, 718);
	  COL_TRI(187, 189, 190);
	  COL_TRI(187, 719, 189);
	  COL_TRI(188, 719, 187);
	  COL_TRI(189, 719, 720);
	  COL_TRI(188, 720, 719);
	  COL_TRI(189, 720, 721);
	  COL_TRI(190, 189, 721);
	  COL_TRI(190, 721, 191);
	  COL_TRI(191, 721, 720);
	  COL_TRI(194, 723, 196);
	  COL_TRI(192, 193, 71);
	  COL_TRI(71, 193, 67);
	  COL_TRI(193, 68, 67);
	  COL_TRI(193, 74, 68);
	  COL_TRI(192, 74, 193);
	  COL_TRI(74, 192, 72);
	  COL_TRI(194, 197, 195);
	  COL_TRI(194, 196, 197);
	  COL_TRI(195, 722, 194);
	  COL_TRI(194, 722, 723);
	  COL_TRI(196, 723, 724);
	  COL_TRI(196, 724, 197);
	  COL_TRI(195, 725, 722);
	  COL_TRI(197, 725, 195);
	  COL_TRI(197, 724, 725);
	  COL_TRI(198, 200, 201);
	  COL_TRI(198, 201, 199);
	  COL_TRI(198, 726, 200);
	  COL_TRI(199, 727, 198);
	  COL_TRI(198, 727, 726);
	  COL_TRI(202, 730, 204);
	  COL_TRI(200, 728, 201);
	  COL_TRI(201, 729, 199);
	  COL_TRI(201, 728, 729);
	  COL_TRI(199, 729, 727);
	  COL_TRI(200, 726, 728);
	  COL_TRI(18, 381, 21);
	  COL_TRI(18, 17, 381);
	  COL_TRI(16, 381, 17);
	  COL_TRI(203, 731, 202);
	  COL_TRI(202, 731, 730);
	  COL_TRI(202, 204, 205);
	  COL_TRI(204, 732, 205);
	  COL_TRI(205, 732, 733);
	  COL_TRI(205, 733, 203);
	  COL_TRI(202, 205, 203);
	  COL_TRI(203, 733, 731);
	  COL_TRI(204, 730, 732);
	  COL_TRI(206, 734, 210);
	  COL_TRI(206, 735, 734);
	  COL_TRI(207, 734, 735);
	  COL_TRI(212, 211, 215);
	  COL_TRI(207, 208, 734);
	  COL_TRI(208, 207, 736);
	  COL_TRI(209, 208, 736);
	  COL_TRI(210, 209, 736);
	  COL_TRI(206, 210, 736);
	  COL_TRI(211, 212, 216);
	  COL_TRI(211, 214, 215);
	  COL_TRI(213, 211, 216);
	  COL_TRI(214, 211, 737);
	  COL_TRI(213, 737, 211);
	  COL_TRI(215, 214, 217);
	  COL_TRI(216, 217, 213);
	  COL_TRI(214, 738, 217);
	  COL_TRI(214, 737, 739);
	  COL_TRI(214, 739, 218);
	  COL_TRI(214, 218, 738);
	  COL_TRI(217, 738, 213);
	  COL_TRI(218, 213, 738);
	  COL_TRI(218, 740, 213);
	  COL_TRI(213, 740, 737);
	  COL_TRI(219, 221, 222);
	  COL_TRI(219, 741, 221);
	  COL_TRI(226, 743, 745);
	  COL_TRI(221, 741, 742);
	  COL_TRI(222, 221, 224);
	  COL_TRI(222, 224, 223);
	  COL_TRI(220, 219, 222);
	  COL_TRI(220, 222, 223);
	  COL_TRI(223, 742, 220);
	  COL_TRI(223, 224, 742);
	  COL_TRI(224, 221, 742);
	  COL_TRI(225, 743, 226);
	  COL_TRI(225, 226, 744);
	  COL_TRI(233, 223, 747);
	  COL_TRI(226, 745, 230);
	  COL_TRI(229, 230, 745);
	  COL_TRI(229, 745, 746);
	  COL_TRI(230, 229, 232);
	  COL_TRI(230, 231, 227);
	  COL_TRI(231, 230, 232);
	  COL_TRI(226, 230, 227);
	  COL_TRI(229, 225, 744);
	  COL_TRI(229, 746, 225);
	  COL_TRI(232, 229, 228);
	  COL_TRI(228, 744, 226);
	  COL_TRI(227, 228, 226);
	  COL_TRI(223, 234, 747);
	  COL_TRI(234, 235, 747);
	  COL_TRI(235, 236, 747);
	  COL_TRI(236, 235, 222);
	  COL_TRI(236, 222, 748);
	  COL_TRI(237, 749, 750);
	  COL_TRI(237, 750, 239);
	  COL_TRI(237, 751, 238);
	  COL_TRI(238, 749, 237);
	  COL_TRI(237, 239, 751);
	  COL_TRI(241, 753, 752);
	  COL_TRI(239, 219, 751);
	  COL_TRI(239, 750, 219);
	  COL_TRI(219, 238, 751);
	  COL_TRI(238, 220, 749);
	  COL_TRI(219, 220, 238);
	  COL_TRI(240, 241, 752);
	  COL_TRI(242, 754, 755);
	  COL_TRI(242, 756, 754);
	  COL_TRI(243, 276, 245);
	  COL_TRI(243, 757, 276);
	  COL_TRI(243, 251, 250);
	  COL_TRI(243, 376, 251);
	  COL_TRI(243, 758, 376);
	  COL_TRI(243, 245, 758);
	  COL_TRI(244, 360, 758);
	  COL_TRI(245, 244, 758);
	  COL_TRI(245, 276, 256);
	  COL_TRI(246, 249, 245);
	  COL_TRI(246, 245, 256);
	  COL_TRI(245, 247, 244);
	  COL_TRI(245, 249, 247);
	  COL_TRI(247, 361, 244);
	  COL_TRI(244, 361, 360);
	  COL_TRI(248, 367, 247);
	  COL_TRI(247, 367, 361);
	  COL_TRI(249, 248, 247);
	  COL_TRI(249, 760, 250);
	  COL_TRI(249, 761, 760);
	  COL_TRI(246, 761, 249);
	  COL_TRI(250, 248, 249);
	  COL_TRI(256, 259, 253);
	  COL_TRI(251, 759, 248);
	  COL_TRI(248, 759, 367);
	  COL_TRI(250, 251, 248);
	  COL_TRI(251, 365, 759);
	  COL_TRI(252, 762, 253);
	  COL_TRI(253, 377, 252);
	  COL_TRI(253, 763, 377);
	  COL_TRI(254, 763, 253);
	  COL_TRI(255, 253, 259);
	  COL_TRI(255, 254, 253);
	  COL_TRI(260, 259, 767);
	  COL_TRI(252, 377, 260);
	  COL_TRI(252, 274, 762);
	  COL_TRI(252, 260, 767);
	  COL_TRI(258, 764, 255);
	  COL_TRI(255, 764, 765);
	  COL_TRI(255, 765, 254);
	  COL_TRI(258, 255, 259);
	  COL_TRI(260, 258, 259);
	  COL_TRI(259, 766, 767);
	  COL_TRI(259, 275, 766);
	  COL_TRI(259, 256, 275);
	  COL_TRI(260, 768, 769);
	  COL_TRI(260, 769, 258);
	  COL_TRI(261, 771, 262);
	  COL_TRI(262, 771, 772);
	  COL_TRI(262, 772, 773);
	  COL_TRI(261, 262, 263);
	  COL_TRI(262, 773, 263);
	  COL_TRI(267, 266, 268);
	  COL_TRI(263, 773, 375);
	  COL_TRI(264, 263, 775);
	  COL_TRI(261, 263, 268);
	  COL_TRI(263, 375, 265);
	  COL_TRI(257, 268, 263);
	  COL_TRI(257, 263, 264);
	  COL_TRI(265, 375, 267);
	  COL_TRI(265, 267, 776);
	  COL_TRI(266, 774, 261);
	  COL_TRI(261, 774, 771);
	  COL_TRI(266, 261, 268);
	  COL_TRI(267, 268, 776);
	  COL_TRI(270, 760, 761);
	  COL_TRI(268, 273, 776);
	  COL_TRI(268, 777, 273);
	  COL_TRI(267, 778, 779);
	  COL_TRI(267, 779, 266);
	  COL_TRI(266, 779, 774);
	  COL_TRI(269, 270, 271);
	  COL_TRI(270, 272, 271);
	  COL_TRI(270, 761, 272);
	  COL_TRI(271, 272, 246);
	  COL_TRI(271, 264, 278);
	  COL_TRI(271, 246, 264);
	  COL_TRI(272, 761, 246);
	  COL_TRI(273, 777, 762);
	  COL_TRI(274, 273, 762);
	  COL_TRI(257, 762, 777);
	  COL_TRI(257, 253, 762);
	  COL_TRI(264, 775, 277);
	  COL_TRI(257, 777, 268);
	  COL_TRI(275, 757, 766);
	  COL_TRI(275, 276, 757);
	  COL_TRI(276, 275, 256);
	  COL_TRI(277, 781, 780);
	  COL_TRI(264, 277, 278);
	  COL_TRI(277, 775, 781);
	  COL_TRI(278, 277, 780);
	  COL_TRI(265, 781, 775);
	  COL_TRI(278, 780, 279);
	  COL_TRI(265, 775, 263);
	  COL_TRI(279, 269, 271);
	  COL_TRI(279, 271, 278);
	  COL_TRI(280, 782, 282);
	  COL_TRI(280, 783, 782);
	  COL_TRI(281, 783, 280);
	  COL_TRI(285, 788, 787);
	  COL_TRI(282, 782, 784);
	  COL_TRI(283, 782, 783);
	  COL_TRI(283, 784, 782);
	  COL_TRI(282, 784, 785);
	  COL_TRI(281, 283, 783);
	  COL_TRI(284, 786, 787);
	  COL_TRI(284, 787, 788);
	  COL_TRI(285, 787, 789);
	  COL_TRI(292, 792, 290);
	  COL_TRI(285, 789, 790);
	  COL_TRI(285, 790, 791);
	  COL_TRI(286, 287, 792);
	  COL_TRI(287, 793, 290);
	  COL_TRI(287, 290, 792);
	  COL_TRI(288, 287, 286);
	  COL_TRI(289, 793, 287);
	  COL_TRI(289, 287, 288);
	  COL_TRI(290, 794, 299);
	  COL_TRI(290, 793, 794);
	  COL_TRI(291, 290, 299);
	  COL_TRI(292, 290, 291);
	  COL_TRI(296, 286, 293);
	  COL_TRI(293, 286, 792);
	  COL_TRI(294, 792, 292);
	  COL_TRI(294, 293, 792);
	  COL_TRI(295, 793, 289);
	  COL_TRI(295, 794, 793);
	  COL_TRI(296, 796, 286);
	  COL_TRI(297, 286, 796);
	  COL_TRI(288, 286, 297);
	  COL_TRI(298, 794, 295);
	  COL_TRI(298, 795, 794);
	  COL_TRI(299, 794, 795);
	  COL_TRI(300, 293, 294);
	  COL_TRI(300, 798, 293);
	  COL_TRI(301, 299, 799);
	  COL_TRI(291, 299, 301);
	  COL_TRI(299, 795, 800);
	  COL_TRI(303, 804, 306);
	  COL_TRI(297, 796, 797);
	  COL_TRI(301, 799, 801);
	  COL_TRI(302, 802, 803);
	  COL_TRI(302, 803, 804);
	  COL_TRI(303, 302, 804);
	  COL_TRI(303, 377, 302);
	  COL_TRI(307, 809, 807);
	  COL_TRI(304, 808, 305);
	  COL_TRI(304, 305, 809);
	  COL_TRI(303, 805, 305);
	  COL_TRI(305, 808, 303);
	  COL_TRI(303, 306, 805);
	  COL_TRI(306, 806, 807);
	  COL_TRI(306, 807, 805);
	  COL_TRI(307, 304, 809);
	  COL_TRI(307, 807, 806);
	  COL_TRI(307, 806, 803);
	  COL_TRI(312, 313, 314);
	  COL_TRI(307, 802, 260);
	  COL_TRI(307, 803, 802);
	  COL_TRI(308, 810, 309);
	  COL_TRI(309, 811, 310);
	  COL_TRI(309, 810, 811);
	  COL_TRI(310, 811, 812);
	  COL_TRI(310, 812, 311);
	  COL_TRI(308, 813, 810);
	  COL_TRI(311, 812, 813);
	  COL_TRI(311, 813, 308);
	  COL_TRI(313, 315, 814);
	  COL_TRI(313, 814, 317);
	  COL_TRI(314, 313, 317);
	  COL_TRI(315, 815, 816);
	  COL_TRI(316, 315, 312);
	  COL_TRI(316, 815, 315);
	  COL_TRI(315, 816, 814);
	  COL_TRI(313, 312, 315);
	  COL_TRI(317, 814, 816);
	  COL_TRI(318, 319, 314);
	  COL_TRI(319, 817, 314);
	  COL_TRI(320, 314, 817);
	  COL_TRI(326, 369, 368);
	  COL_TRI(321, 818, 322);
	  COL_TRI(321, 322, 324);
	  COL_TRI(322, 818, 359);
	  COL_TRI(323, 322, 359);
	  COL_TRI(322, 323, 819);
	  COL_TRI(324, 322, 819);
	  COL_TRI(318, 819, 323);
	  COL_TRI(325, 819, 318);
	  COL_TRI(325, 324, 819);
	  COL_TRI(321, 324, 325);
	  COL_TRI(327, 326, 328);
	  COL_TRI(328, 326, 368);
	  COL_TRI(326, 327, 820);
	  COL_TRI(326, 820, 369);
	  COL_TRI(246, 336, 264);
	  COL_TRI(246, 329, 336);
	  COL_TRI(329, 246, 256);
	  COL_TRI(256, 253, 257);
	  COL_TRI(257, 331, 256);
	  COL_TRI(329, 256, 331);
	  COL_TRI(257, 330, 331);
	  COL_TRI(330, 257, 264);
	  COL_TRI(329, 319, 336);
	  COL_TRI(329, 817, 319);
	  COL_TRI(331, 817, 329);
	  COL_TRI(330, 264, 336);
	  COL_TRI(332, 333, 821);
	  COL_TRI(333, 362, 821);
	  COL_TRI(320, 334, 314);
	  COL_TRI(312, 334, 362);
	  COL_TRI(334, 821, 362);
	  COL_TRI(335, 332, 821);
	  COL_TRI(335, 821, 334);
	  COL_TRI(335, 334, 328);
	  COL_TRI(335, 328, 368);
	  COL_TRI(334, 822, 328);
	  COL_TRI(334, 320, 822);
	  COL_TRI(331, 320, 817);
	  COL_TRI(330, 320, 331);
	  COL_TRI(330, 822, 320);
	  COL_TRI(336, 822, 330);
	  COL_TRI(336, 319, 822);
	  COL_TRI(319, 328, 822);
	  COL_TRI(318, 327, 328);
	  COL_TRI(319, 318, 328);
	  COL_TRI(318, 323, 327);
	  COL_TRI(325, 318, 314);
	  COL_TRI(339, 825, 823);
	  COL_TRI(312, 314, 334);
	  COL_TRI(325, 314, 317);
	  COL_TRI(337, 325, 317);
	  COL_TRI(317, 816, 337);
	  COL_TRI(338, 820, 327);
	  COL_TRI(339, 823, 824);
	  COL_TRI(340, 826, 341);
	  COL_TRI(341, 827, 340);
	  COL_TRI(342, 828, 827);
	  COL_TRI(343, 342, 827);
	  COL_TRI(340, 827, 828);
	  COL_TRI(340, 352, 826);
	  COL_TRI(340, 828, 348);
	  COL_TRI(344, 345, 346);
	  COL_TRI(344, 346, 829);
	  COL_TRI(342, 343, 346);
	  COL_TRI(345, 342, 346);
	  COL_TRI(346, 343, 347);
	  COL_TRI(348, 828, 342);
	  COL_TRI(348, 342, 345);
	  COL_TRI(347, 829, 346);
	  COL_TRI(347, 830, 829);
	  COL_TRI(348, 345, 350);
	  COL_TRI(348, 350, 831);
	  COL_TRI(349, 350, 353);
	  COL_TRI(350, 344, 353);
	  COL_TRI(351, 832, 831);
	  COL_TRI(351, 831, 833);
	  COL_TRI(352, 348, 832);
	  COL_TRI(353, 829, 355);
	  COL_TRI(354, 834, 355);
	  COL_TRI(353, 355, 834);
	  COL_TRI(355, 829, 830);
	  COL_TRI(355, 830, 354);
	  COL_TRI(354, 835, 834);
	  COL_TRI(353, 344, 829);
	  COL_TRI(369, 837, 356);
	  COL_TRI(338, 357, 820);
	  COL_TRI(356, 357, 338);
	  COL_TRI(338, 327, 779);
	  COL_TRI(338, 779, 778);
	  COL_TRI(338, 778, 374);
	  COL_TRI(338, 374, 359);
	  COL_TRI(357, 369, 820);
	  COL_TRI(357, 837, 369);
	  COL_TRI(356, 837, 357);
	  COL_TRI(337, 358, 325);
	  COL_TRI(358, 321, 325);
	  COL_TRI(323, 772, 771);
	  COL_TRI(359, 772, 323);
	  COL_TRI(327, 323, 771);
	  COL_TRI(359, 374, 772);
	  COL_TRI(360, 361, 362);
	  COL_TRI(361, 312, 362);
	  COL_TRI(362, 333, 840);
	  COL_TRI(366, 335, 843);
	  COL_TRI(332, 841, 840);
	  COL_TRI(332, 840, 333);
	  COL_TRI(362, 840, 363);
	  COL_TRI(363, 840, 841);
	  COL_TRI(364, 360, 363);
	  COL_TRI(363, 841, 366);
	  COL_TRI(360, 362, 363);
	  COL_TRI(365, 364, 363);
	  COL_TRI(316, 365, 363);
	  COL_TRI(366, 841, 332);
	  COL_TRI(366, 332, 335);
	  COL_TRI(366, 842, 356);
	  COL_TRI(335, 368, 846);
	  COL_TRI(335, 846, 847);
	  COL_TRI(335, 847, 843);
	  COL_TRI(361, 367, 312);
	  COL_TRI(367, 759, 312);
	  COL_TRI(312, 759, 365);
	  COL_TRI(312, 365, 316);
	  COL_TRI(368, 369, 356);
	  COL_TRI(368, 838, 846);
	  COL_TRI(356, 838, 368);
	  COL_TRI(373, 832, 372);
	  COL_TRI(356, 839, 838);
	  COL_TRI(370, 826, 352);
	  COL_TRI(352, 340, 348);
	  COL_TRI(371, 370, 373);
	  COL_TRI(371, 373, 848);
	  COL_TRI(372, 848, 373);
	  COL_TRI(370, 352, 373);
	  COL_TRI(373, 352, 832);
	  COL_TRI(364, 376, 360);
	  COL_TRI(372, 849, 848);
	  COL_TRI(353, 834, 836);
	  COL_TRI(374, 375, 772);
	  COL_TRI(375, 773, 772);
	  COL_TRI(376, 758, 360);
	  COL_TRI(254, 770, 763);
	  COL_TRI(254, 765, 770);
	  COL_TRI(377, 763, 770);
	  COL_TRI(378, 377, 770);
	  COL_TRI(258, 769, 764);
	  COL_TRI(366, 845, 842);
	  COL_TRI(366, 843, 844);
	  COL_TRI(327, 771, 774);
	  COL_TRI(327, 774, 779);
	  COL_TRI(21, 381, 382);
	  COL_TRI(21, 382, 19);
	  COL_TRI(384, 379, 20);
	  COL_TRI(379, 381, 16);
	  COL_TRI(20, 379, 16);
	  COL_TRI(380, 381, 379);
	  COL_TRI(381, 380, 382);
	  COL_TRI(19, 383, 23);
	  COL_TRI(19, 382, 383);
	  COL_TRI(382, 380, 383);
	  COL_TRI(383, 388, 23);
	  COL_TRI(380, 390, 383);
	  COL_TRI(36, 850, 384);
	  COL_TRI(379, 384, 380);
	  COL_TRI(26, 852, 32);
	  COL_TRI(36, 384, 20);
	  COL_TRI(32, 851, 41);
	  COL_TRI(41, 386, 28);
	  COL_TRI(41, 851, 386);
	  COL_TRI(385, 851, 852);
	  COL_TRI(32, 852, 851);
	  COL_TRI(386, 29, 28);
	  COL_TRI(386, 850, 29);
	  COL_TRI(385, 852, 387);
	  COL_TRI(26, 387, 852);
	  COL_TRI(387, 26, 37);
	  COL_TRI(388, 387, 37);
	  COL_TRI(389, 387, 388);
	  COL_TRI(389, 385, 387);
	  COL_TRI(390, 389, 383);
	  COL_TRI(388, 37, 23);
	  COL_TRI(389, 388, 383);
	  COL_TRI(36, 29, 850);
	  COL_TRI(22, 13, 24);
	  COL_TRI(27, 13, 22);
	  COL_TRI(25, 11, 39);
	  COL_TRI(39, 11, 10);
	  COL_TRI(39, 10, 38);
	  COL_TRI(27, 12, 13);
	  COL_TRI(31, 33, 27);
	  COL_TRI(33, 12, 27);
	  COL_TRI(40, 853, 34);
	  COL_TRI(38, 10, 42);
	  COL_TRI(38, 42, 30);
	  COL_TRI(30, 42, 33);
	  COL_TRI(30, 33, 31);
	  COL_TRI(34, 391, 44);
	  COL_TRI(34, 853, 391);
	  COL_TRI(391, 854, 855);
	  COL_TRI(44, 391, 855);
	  COL_TRI(391, 853, 854);
	  COL_TRI(40, 854, 853);
	  COL_TRI(394, 393, 403);
	  COL_TRI(43, 854, 40);
	  COL_TRI(43, 855, 854);
	  COL_TRI(44, 855, 43);
	  COL_TRI(392, 400, 856);
	  COL_TRI(392, 394, 403);
	  COL_TRI(392, 856, 394);
	  COL_TRI(393, 856, 400);
	  COL_TRI(394, 856, 393);
	  COL_TRI(400, 401, 860);
	  COL_TRI(395, 396, 397);
	  COL_TRI(395, 397, 398);
	  COL_TRI(396, 857, 397);
	  COL_TRI(397, 857, 399);
	  COL_TRI(397, 399, 398);
	  COL_TRI(398, 399, 858);
	  COL_TRI(399, 857, 859);
	  COL_TRI(399, 859, 858);
	  COL_TRI(398, 858, 395);
	  COL_TRI(396, 859, 857);
	  COL_TRI(392, 401, 400);
	  COL_TRI(400, 860, 393);
	  COL_TRI(404, 864, 863);
	  COL_TRI(401, 402, 860);
	  COL_TRI(393, 860, 402);
	  COL_TRI(393, 402, 403);
	  COL_TRI(392, 861, 401);
	  COL_TRI(401, 861, 402);
	  COL_TRI(402, 861, 392);
	  COL_TRI(403, 402, 392);
	  COL_TRI(404, 405, 862);
	  COL_TRI(404, 863, 405);
	  COL_TRI(404, 408, 864);
	  COL_TRI(409, 871, 872);
	  COL_TRI(405, 865, 862);
	  COL_TRI(405, 406, 865);
	  COL_TRI(406, 867, 868);
	  COL_TRI(406, 868, 865);
	  COL_TRI(407, 868, 867);
	  COL_TRI(407, 867, 869);
	  COL_TRI(407, 869, 870);
	  COL_TRI(408, 866, 864);
	  COL_TRI(410, 409, 873);
	  COL_TRI(411, 872, 871);
	  COL_TRI(409, 872, 873);
	  COL_TRI(410, 873, 412);
	  COL_TRI(411, 871, 416);
	  COL_TRI(412, 874, 410);
	  COL_TRI(412, 413, 874);
	  COL_TRI(413, 875, 874);
	  COL_TRI(419, 420, 418);
	  COL_TRI(413, 414, 875);
	  COL_TRI(414, 876, 875);
	  COL_TRI(414, 877, 876);
	  COL_TRI(415, 876, 877);
	  COL_TRI(415, 877, 878);
	  COL_TRI(416, 415, 878);
	  COL_TRI(416, 878, 411);
	  COL_TRI(417, 419, 418);
	  COL_TRI(418, 879, 417);
	  COL_TRI(418, 420, 879);
	  COL_TRI(423, 427, 425);
	  COL_TRI(420, 880, 879);
	  COL_TRI(417, 879, 880);
	  COL_TRI(417, 421, 419);
	  COL_TRI(417, 880, 421);
	  COL_TRI(420, 881, 880);
	  COL_TRI(419, 881, 420);
	  COL_TRI(421, 880, 881);
	  COL_TRI(421, 881, 419);
	  COL_TRI(422, 481, 423);
	  COL_TRI(422, 882, 481);
	  COL_TRI(428, 429, 884);
	  COL_TRI(424, 422, 423);
	  COL_TRI(423, 425, 426);
	  COL_TRI(425, 447, 426);
	  COL_TRI(426, 446, 424);
	  COL_TRI(423, 426, 424);
	  COL_TRI(427, 883, 448);
	  COL_TRI(427, 448, 425);
	  COL_TRI(428, 430, 429);
	  COL_TRI(432, 889, 890);
	  COL_TRI(429, 885, 884);
	  COL_TRI(429, 886, 885);
	  COL_TRI(428, 887, 430);
	  COL_TRI(430, 887, 886);
	  COL_TRI(430, 886, 429);
	  COL_TRI(431, 888, 889);
	  COL_TRI(431, 889, 432);
	  COL_TRI(432, 890, 433);
	  COL_TRI(433, 890, 891);
	  COL_TRI(433, 891, 434);
	  COL_TRI(434, 891, 893);
	  COL_TRI(434, 893, 435);
	  COL_TRI(435, 893, 894);
	  COL_TRI(435, 894, 895);
	  COL_TRI(436, 896, 897);
	  COL_TRI(436, 897, 898);
	  COL_TRI(437, 436, 899);
	  COL_TRI(437, 896, 436);
	  COL_TRI(437, 900, 897);
	  COL_TRI(437, 897, 896);
	  COL_TRI(438, 437, 899);
	  COL_TRI(438, 901, 437);
	  COL_TRI(437, 901, 902);
	  COL_TRI(437, 902, 900);
	  COL_TRI(439, 438, 899);
	  COL_TRI(439, 899, 436);
	  COL_TRI(439, 436, 898);
	  COL_TRI(439, 898, 441);
	  COL_TRI(442, 444, 443);
	  COL_TRI(440, 903, 441);
	  COL_TRI(441, 903, 904);
	  COL_TRI(441, 904, 905);
	  COL_TRI(441, 905, 439);
	  COL_TRI(439, 905, 906);
	  COL_TRI(439, 906, 907);
	  COL_TRI(439, 907, 440);
	  COL_TRI(440, 908, 903);
	  COL_TRI(440, 907, 908);
	  COL_TRI(428, 892, 887);
	  COL_TRI(443, 444, 445);
	  COL_TRI(443, 445, 442);
	  COL_TRI(443, 909, 910);
	  COL_TRI(443, 910, 442);
	  COL_TRI(442, 910, 911);
	  COL_TRI(442, 445, 444);
	  COL_TRI(442, 911, 445);
	  COL_TRI(444, 912, 909);
	  COL_TRI(444, 909, 443);
	  COL_TRI(445, 911, 912);
	  COL_TRI(445, 912, 444);
	  COL_TRI(446, 913, 480);
	  COL_TRI(446, 480, 424);
	  COL_TRI(447, 449, 426);
	  COL_TRI(447, 914, 449);
	  COL_TRI(448, 883, 481);
	  COL_TRI(449, 914, 448);
	  COL_TRI(449, 448, 481);
	  COL_TRI(450, 915, 916);
	  COL_TRI(450, 916, 917);
	  COL_TRI(451, 450, 917);
	  COL_TRI(451, 917, 468);
	  COL_TRI(456, 922, 923);
	  COL_TRI(452, 916, 920);
	  COL_TRI(452, 917, 916);
	  COL_TRI(453, 454, 921);
	  COL_TRI(453, 921, 493);
	  COL_TRI(454, 916, 921);
	  COL_TRI(454, 920, 916);
	  COL_TRI(455, 922, 456);
	  COL_TRI(455, 456, 457);
	  COL_TRI(456, 923, 924);
	  COL_TRI(458, 923, 922);
	  COL_TRI(456, 924, 925);
	  COL_TRI(458, 922, 455);
	  COL_TRI(459, 461, 926);
	  COL_TRI(460, 927, 461);
	  COL_TRI(460, 461, 459);
	  COL_TRI(461, 927, 462);
	  COL_TRI(461, 462, 926);
	  COL_TRI(462, 927, 460);
	  COL_TRI(457, 456, 925);
	  COL_TRI(463, 465, 464);
	  COL_TRI(464, 465, 928);
	  COL_TRI(465, 466, 928);
	  COL_TRI(463, 929, 465);
	  COL_TRI(465, 929, 466);
	  COL_TRI(466, 929, 463);
	  COL_TRI(467, 930, 931);
	  COL_TRI(467, 931, 932);
	  COL_TRI(472, 471, 469);
	  COL_TRI(468, 918, 919);
	  COL_TRI(468, 919, 451);
	  COL_TRI(451, 915, 450);
	  COL_TRI(469, 933, 934);
	  COL_TRI(469, 934, 474);
	  COL_TRI(469, 474, 472);
	  COL_TRI(470, 933, 469);
	  COL_TRI(471, 470, 469);
	  COL_TRI(473, 934, 933);
	  COL_TRI(474, 934, 473);
	  COL_TRI(474, 473, 472);
	  COL_TRI(470, 475, 933);
	  COL_TRI(475, 476, 933);
	  COL_TRI(476, 473, 933);
	  COL_TRI(473, 476, 471);
	  COL_TRI(473, 471, 472);
	  COL_TRI(452, 920, 477);
	  COL_TRI(452, 477, 935);
	  COL_TRI(481, 882, 480);
	  COL_TRI(477, 936, 478);
	  COL_TRI(477, 478, 935);
	  COL_TRI(478, 453, 935);
	  COL_TRI(478, 479, 453);
	  COL_TRI(478, 937, 479);
	  COL_TRI(479, 937, 454);
	  COL_TRI(479, 454, 453);
	  COL_TRI(478, 936, 937);
	  COL_TRI(449, 481, 480);
	  COL_TRI(480, 913, 449);
	  COL_TRI(485, 943, 944);
	  COL_TRI(482, 484, 483);
	  COL_TRI(482, 938, 484);
	  COL_TRI(483, 484, 939);
	  COL_TRI(484, 938, 940);
	  COL_TRI(484, 940, 939);
	  COL_TRI(482, 940, 938);
	  COL_TRI(482, 941, 940);
	  COL_TRI(483, 939, 942);
	  COL_TRI(485, 486, 943);
	  COL_TRI(486, 941, 482);
	  COL_TRI(486, 482, 943);
	  COL_TRI(482, 483, 487);
	  COL_TRI(487, 943, 482);
	  COL_TRI(487, 944, 943);
	  COL_TRI(483, 942, 945);
	  COL_TRI(483, 945, 487);
	  COL_TRI(488, 946, 485);
	  COL_TRI(488, 485, 944);
	  COL_TRI(487, 488, 944);
	  COL_TRI(487, 945, 946);
	  COL_TRI(487, 946, 488);
	  COL_TRI(475, 470, 471);
	  COL_TRI(475, 471, 476);
	  COL_TRI(489, 947, 490);
	  COL_TRI(489, 490, 948);
	  COL_TRI(490, 492, 491);
	  COL_TRI(490, 491, 948);
	  COL_TRI(490, 947, 949);
	  COL_TRI(491, 950, 489);
	  COL_TRI(491, 489, 948);
	  COL_TRI(492, 950, 491);
	  COL_TRI(492, 949, 950);
	  COL_TRI(490, 949, 492);
	  COL_TRI(493, 918, 468);
	  COL_TRI(493, 921, 918);
	  COL_TRI(451, 919, 915);
	  COL_TRI(494, 951, 952);
	  COL_TRI(494, 952, 953);
	  COL_TRI(494, 953, 497);
	  COL_TRI(494, 954, 951);
	  COL_TRI(495, 498, 496);
	  COL_TRI(496, 955, 956);
	  COL_TRI(496, 956, 495);
	  COL_TRI(496, 498, 494);
	  COL_TRI(496, 494, 497);
	  COL_TRI(497, 955, 496);
	  COL_TRI(500, 958, 499);
	  COL_TRI(495, 957, 498);
	  COL_TRI(497, 953, 955);
	  COL_TRI(498, 954, 494);
	  COL_TRI(498, 957, 954);
	  COL_TRI(499, 958, 959);
	  COL_TRI(500, 499, 960);
	  COL_TRI(501, 958, 500);
	  COL_TRI(501, 959, 958);
	  COL_TRI(502, 503, 961);
	  COL_TRI(502, 962, 503);
	  COL_TRI(503, 962, 963);
	  COL_TRI(504, 962, 502);
	  COL_TRI(504, 963, 962);
	  COL_TRI(505, 501, 500);
	  COL_TRI(506, 501, 505);
	  COL_TRI(506, 960, 501);
	  COL_TRI(506, 965, 516);
	  COL_TRI(505, 500, 507);
	  COL_TRI(507, 500, 960);
	  COL_TRI(507, 960, 506);
	  COL_TRI(508, 504, 502);
	  COL_TRI(509, 504, 508);
	  COL_TRI(509, 961, 504);
	  COL_TRI(508, 502, 510);
	  COL_TRI(510, 502, 961);
	  COL_TRI(510, 961, 509);
	  COL_TRI(506, 516, 964);
	  COL_TRI(512, 968, 508);
	  COL_TRI(506, 517, 965);
	  COL_TRI(506, 964, 507);
	  COL_TRI(511, 966, 512);
	  COL_TRI(512, 967, 968);
	  COL_TRI(512, 966, 967);
	  COL_TRI(512, 513, 511);
	  COL_TRI(512, 510, 513);
	  COL_TRI(512, 508, 510);
	  COL_TRI(516, 973, 964);
	  COL_TRI(513, 969, 511);
	  COL_TRI(513, 970, 969);
	  COL_TRI(511, 969, 966);
	  COL_TRI(514, 970, 971);
	  COL_TRI(514, 969, 970);
	  COL_TRI(514, 966, 969);
	  COL_TRI(514, 967, 966);
	  COL_TRI(515, 516, 965);
	  COL_TRI(515, 972, 516);
	  COL_TRI(516, 972, 973);
	  COL_TRI(519, 977, 521);
	  COL_TRI(517, 515, 965);
	  COL_TRI(515, 974, 975);
	  COL_TRI(515, 975, 976);
	  COL_TRI(517, 974, 515);
	  COL_TRI(515, 973, 972);
	  COL_TRI(515, 976, 973);
	  COL_TRI(518, 520, 519);
	  COL_TRI(519, 520, 977);
	  COL_TRI(524, 525, 981);
	  COL_TRI(520, 522, 977);
	  COL_TRI(521, 977, 522);
	  COL_TRI(521, 522, 523);
	  COL_TRI(520, 978, 522);
	  COL_TRI(518, 978, 520);
	  COL_TRI(522, 978, 518);
	  COL_TRI(523, 522, 518);
	  COL_TRI(524, 530, 979);
	  COL_TRI(524, 979, 980);
	  COL_TRI(524, 980, 525);
	  COL_TRI(525, 982, 981);
	  COL_TRI(525, 526, 982);
	  COL_TRI(526, 984, 982);
	  COL_TRI(526, 985, 984);
	  COL_TRI(527, 528, 986);
	  COL_TRI(527, 987, 528);
	  COL_TRI(527, 985, 987);
	  COL_TRI(527, 984, 985);
	  COL_TRI(528, 529, 986);
	  COL_TRI(529, 983, 986);
	  COL_TRI(534, 536, 535);
	  COL_TRI(530, 983, 529);
	  COL_TRI(530, 529, 979);
	  COL_TRI(531, 543, 988);
	  COL_TRI(531, 989, 543);
	  COL_TRI(532, 601, 989);
	  COL_TRI(533, 990, 989);
	  COL_TRI(538, 999, 997);
	  COL_TRI(534, 991, 536);
	  COL_TRI(535, 536, 992);
	  COL_TRI(536, 991, 993);
	  COL_TRI(537, 991, 534);
	  COL_TRI(537, 993, 991);
	  COL_TRI(536, 993, 992);
	  COL_TRI(535, 992, 996);
	  COL_TRI(538, 997, 998);
	  COL_TRI(543, 5, 1001);
	  COL_TRI(539, 999, 563);
	  COL_TRI(539, 1000, 999);
	  COL_TRI(540, 999, 1000);
	  COL_TRI(541, 538, 998);
	  COL_TRI(542, 5, 2);
	  COL_TRI(542, 1001, 5);
	  COL_TRI(543, 6, 5);
	  COL_TRI(1, 1007, 2);
	  COL_TRI(544, 545, 1008);
	  COL_TRI(545, 1009, 1010);
	  COL_TRI(545, 1010, 1008);
	  COL_TRI(546, 1010, 1009);
	  COL_TRI(544, 1008, 547);
	  COL_TRI(546, 1009, 551);
	  COL_TRI(547, 548, 1014);
	  COL_TRI(547, 1014, 544);
	  COL_TRI(548, 1015, 1014);
	  COL_TRI(548, 549, 1015);
	  COL_TRI(549, 1016, 1017);
	  COL_TRI(549, 1017, 1015);
	  COL_TRI(553, 1025, 1022);
	  COL_TRI(550, 1017, 1016);
	  COL_TRI(550, 1016, 1018);
	  COL_TRI(551, 1018, 546);
	  COL_TRI(551, 550, 1018);
	  COL_TRI(552, 553, 1019);
	  COL_TRI(552, 1020, 553);
	  COL_TRI(553, 1020, 1021);
	  COL_TRI(553, 1022, 1023);
	  COL_TRI(553, 1024, 1025);
	  COL_TRI(553, 1021, 1024);
	  COL_TRI(554, 1025, 1024);
	  COL_TRI(555, 994, 1026);
	  COL_TRI(555, 990, 994);
	  COL_TRI(556, 555, 1026);
	  COL_TRI(533, 994, 990);
	  COL_TRI(556, 1026, 1027);
	  COL_TRI(557, 1028, 1029);
	  COL_TRI(557, 1030, 1028);
	  COL_TRI(559, 557, 558);
	  COL_TRI(558, 557, 1029);
	  COL_TRI(560, 1030, 559);
	  COL_TRI(560, 1028, 1030);
	  COL_TRI(559, 1030, 557);
	  COL_TRI(558, 1029, 1032);
	  COL_TRI(539, 563, 561);
	  COL_TRI(561, 1033, 539);
	  COL_TRI(562, 539, 1033);
	  COL_TRI(540, 1000, 1002);
	  COL_TRI(563, 1003, 1006);
	  COL_TRI(563, 1004, 561);
	  COL_TRI(563, 1005, 1004);
	  COL_TRI(563, 538, 1005);
	  COL_TRI(563, 1006, 1035);
	  COL_TRI(564, 563, 1036);
	  COL_TRI(564, 1003, 563);
	  COL_TRI(565, 1003, 564);
	  COL_TRI(565, 1006, 1003);
	  COL_TRI(541, 1005, 538);
	  COL_TRI(561, 565, 1037);
	  COL_TRI(561, 1006, 565);
	  COL_TRI(562, 1033, 1034);
	  COL_TRI(573, 1043, 1044);
	  COL_TRI(566, 1038, 567);
	  COL_TRI(566, 1039, 1038);
	  COL_TRI(567, 568, 566);
	  COL_TRI(568, 1040, 566);
	  COL_TRI(569, 566, 570);
	  COL_TRI(569, 1039, 566);
	  COL_TRI(570, 566, 1040);
	  COL_TRI(571, 1038, 1039);
	  COL_TRI(571, 1039, 569);
	  COL_TRI(572, 567, 1041);
	  COL_TRI(572, 573, 567);
	  COL_TRI(573, 1042, 1043);
	  COL_TRI(577, 1048, 578);
	  COL_TRI(574, 1042, 1046);
	  COL_TRI(574, 1043, 1042);
	  COL_TRI(575, 1043, 574);
	  COL_TRI(575, 1044, 1043);
	  COL_TRI(576, 568, 1044);
	  COL_TRI(576, 1044, 575);
	  COL_TRI(570, 1040, 1045);
	  COL_TRI(577, 578, 1047);
	  COL_TRI(583, 1052, 1053);
	  COL_TRI(580, 579, 1048);
	  COL_TRI(580, 1048, 577);
	  COL_TRI(578, 1048, 579);
	  COL_TRI(581, 579, 580);
	  COL_TRI(581, 1050, 579);
	  COL_TRI(579, 1051, 1052);
	  COL_TRI(579, 1050, 1051);
	  COL_TRI(579, 1052, 1049);
	  COL_TRI(579, 1049, 578);
	  COL_TRI(582, 1050, 581);
	  COL_TRI(582, 1051, 1050);
	  COL_TRI(583, 1049, 1052);
	  COL_TRI(588, 1056, 1058);
	  COL_TRI(584, 586, 1054);
	  COL_TRI(585, 586, 584);
	  COL_TRI(585, 1055, 586);
	  COL_TRI(586, 1056, 1057);
	  COL_TRI(586, 1058, 1056);
	  COL_TRI(586, 1059, 1058);
	  COL_TRI(586, 1055, 1059);
	  COL_TRI(586, 1057, 1060);
	  COL_TRI(586, 1060, 1054);
	  COL_TRI(587, 1055, 585);
	  COL_TRI(587, 1059, 1055);
	  COL_TRI(588, 1058, 1061);
	  COL_TRI(45, 1064, 592);
	  COL_TRI(589, 1057, 1063);
	  COL_TRI(589, 1060, 1057);
	  COL_TRI(584, 1054, 1062);
	  COL_TRI(590, 45, 35);
	  COL_TRI(590, 1064, 45);
	  COL_TRI(591, 46, 45);
	  COL_TRI(45, 1065, 591);
	  COL_TRI(45, 592, 1065);
	  COL_TRI(592, 1064, 590);
	  COL_TRI(593, 592, 1068);
	  COL_TRI(593, 1065, 592);
	  COL_TRI(590, 1068, 592);
	  COL_TRI(594, 591, 1065);
	  COL_TRI(594, 1065, 593);
	  COL_TRI(595, 591, 594);
	  COL_TRI(595, 1067, 591);
	  COL_TRI(591, 1066, 46);
	  COL_TRI(591, 1067, 1066);
	  COL_TRI(598, 1071, 1072);
	  COL_TRI(47, 1066, 608);
	  COL_TRI(47, 46, 1066);
	  COL_TRI(1, 1011, 1007);
	  COL_TRI(596, 1011, 1069);
	  COL_TRI(596, 1007, 1011);
	  COL_TRI(597, 598, 1070);
	  COL_TRI(597, 1071, 598);
	  COL_TRI(598, 1072, 1073);
	  COL_TRI(601, 6, 543);
	  COL_TRI(599, 1072, 1071);
	  COL_TRI(599, 1071, 597);
	  COL_TRI(600, 1020, 552);
	  COL_TRI(600, 1021, 1020);
	  COL_TRI(554, 1024, 1031);
	  COL_TRI(601, 1013, 6);
	  COL_TRI(602, 1013, 995);
	  COL_TRI(602, 1012, 1013);
	  COL_TRI(6, 1013, 1012);
	  COL_TRI(6, 1012, 7);
	  COL_TRI(602, 7, 1012);
	  COL_TRI(602, 606, 7);
	  COL_TRI(603, 602, 995);
	  COL_TRI(602, 603, 606);
	  COL_TRI(604, 35, 47);
	  COL_TRI(604, 590, 35);
	  COL_TRI(604, 47, 603);
	  COL_TRI(604, 603, 995);
	  COL_TRI(47, 608, 603);
	  COL_TRI(605, 541, 998);
	  COL_TRI(595, 594, 606);
	  COL_TRI(606, 594, 988);
	  COL_TRI(594, 593, 988);
	  COL_TRI(607, 988, 593);
	  COL_TRI(590, 604, 607);
	  COL_TRI(590, 607, 1068);
	  COL_TRI(607, 593, 1068);
	  COL_TRI(608, 595, 606);
	  COL_TRI(606, 603, 608);
	  COL_TRI(608, 1067, 595);
	  COL_TRI(608, 1066, 1067);
	  COL_TRI(605, 4, 604);
	  COL_TRI(604, 995, 605);
	  COL_TRI(532, 995, 601);
	  COL_TRI(605, 532, 4);
	  COL_TRI(605, 998, 1074);
	  COL_TRI(609, 1075, 612);
	  COL_TRI(609, 1076, 1075);
	  COL_TRI(610, 1076, 609);
	  COL_TRI(611, 609, 612);
	  COL_TRI(611, 610, 609);
	  COL_TRI(610, 1077, 1076);
	  COL_TRI(612, 1075, 1078);
	  COL_TRI(612, 1078, 611);
	  COL_TRI(611, 1077, 610);
	  COL_TRI(611, 1078, 1077);
	  COL_TRI(613, 614, 615);
	  COL_TRI(613, 1079, 614);
	  COL_TRI(614, 1079, 1080);
	  COL_TRI(614, 1080, 615);
	  COL_TRI(613, 1081, 1079);
	  COL_TRI(616, 1081, 613);
	  COL_TRI(615, 1080, 1082);
	  COL_TRI(613, 615, 616);
	  COL_TRI(615, 1082, 616);
	  COL_TRI(616, 1082, 1081);
	  COL_TRI_INIT(SURFACE_BURNING, 4);
	  COL_TRI(56, 57, 58);
	  COL_TRI(56, 59, 57);
	  COL_TRI(60, 61, 62);
	  COL_TRI(60, 63, 61);
	  COL_TRI_INIT(SURFACE_DEATH_PLANE, 2);
	  COL_TRI(1083, 1084, 1085);
	  COL_TRI(1083, 1085, 1086);
	  COL_TRI_INIT(SURFACE_VERY_SLIPPERY, 2);
	  COL_TRI(52, 53, 54);
	  COL_TRI(52, 55, 53);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 216);
	  COL_TRI(555, 556, 1069);
	  COL_TRI(1, 4, 551);
	  COL_TRI(1, 551, 544);
	  COL_TRI(1, 544, 1015);
	  COL_TRI(1, 1015, 555);
	  COL_TRI(544, 1014, 1015);
	  COL_TRI(1015, 1017, 550);
	  COL_TRI(1015, 550, 532);
	  COL_TRI(1015, 532, 990);
	  COL_TRI(1015, 990, 555);
	  COL_TRI(555, 1069, 1011);
	  COL_TRI(620, 619, 622);
	  COL_TRI(551, 545, 544);
	  COL_TRI(551, 1009, 545);
	  COL_TRI(1087, 8, 1097);
	  COL_TRI(1087, 9, 8);
	  COL_TRI(0, 9, 1087);
	  COL_TRI(0, 1087, 3);
	  COL_TRI(8, 7, 603);
	  COL_TRI(8, 603, 1097);
	  COL_TRI(86, 631, 87);
	  COL_TRI(620, 622, 621);
	  COL_TRI(79, 625, 120);
	  COL_TRI(79, 623, 625);
	  COL_TRI(84, 630, 629);
	  COL_TRI(84, 629, 85);
	  COL_TRI(86, 636, 631);
	  COL_TRI(644, 643, 646);
	  COL_TRI(635, 90, 92);
	  COL_TRI(635, 634, 90);
	  COL_TRI(96, 638, 95);
	  COL_TRI(96, 639, 638);
	  COL_TRI(100, 640, 642);
	  COL_TRI(100, 642, 102);
	  COL_TRI(653, 656, 654);
	  COL_TRI(644, 646, 645);
	  COL_TRI(647, 648, 650);
	  COL_TRI(647, 650, 649);
	  COL_TRI(655, 651, 653);
	  COL_TRI(655, 114, 651);
	  COL_TRI(653, 651, 656);
	  COL_TRI(668, 672, 691);
	  COL_TRI(662, 122, 121);
	  COL_TRI(662, 661, 122);
	  COL_TRI(137, 681, 680);
	  COL_TRI(137, 680, 133);
	  COL_TRI(137, 133, 139);
	  COL_TRI(137, 139, 685);
	  COL_TRI(137, 685, 684);
	  COL_TRI(137, 138, 681);
	  COL_TRI(696, 697, 695);
	  COL_TRI(668, 691, 147);
	  COL_TRI(668, 147, 127);
	  COL_TRI(668, 127, 664);
	  COL_TRI(664, 666, 667);
	  COL_TRI(664, 667, 668);
	  COL_TRI(692, 693, 694);
	  COL_TRI(692, 694, 128);
	  COL_TRI(696, 698, 697);
	  COL_TRI(174, 712, 711);
	  COL_TRI(158, 701, 157);
	  COL_TRI(158, 157, 161);
	  COL_TRI(166, 165, 164);
	  COL_TRI(166, 164, 162);
	  COL_TRI(617, 1098, 66);
	  COL_TRI(617, 72, 1098);
	  COL_TRI(191, 188, 187);
	  COL_TRI(174, 711, 173);
	  COL_TRI(178, 715, 180);
	  COL_TRI(178, 713, 715);
	  COL_TRI(182, 718, 185);
	  COL_TRI(182, 716, 718);
	  COL_TRI(191, 187, 190);
	  COL_TRI(69, 1098, 192);
	  COL_TRI(69, 192, 71);
	  COL_TRI(723, 722, 725);
	  COL_TRI(723, 725, 724);
	  COL_TRI(726, 729, 728);
	  COL_TRI(726, 727, 729);
	  COL_TRI(740, 218, 1089);
	  COL_TRI(219, 225, 746);
	  COL_TRI(740, 1089, 1088);
	  COL_TRI(1088, 737, 740);
	  COL_TRI(1089, 739, 1090);
	  COL_TRI(1089, 218, 739);
	  COL_TRI(1088, 1099, 737);
	  COL_TRI(1090, 737, 1099);
	  COL_TRI(1090, 739, 737);
	  COL_TRI(229, 744, 228);
	  COL_TRI(219, 746, 1091);
	  COL_TRI(1092, 1101, 1102);
	  COL_TRI(743, 219, 220);
	  COL_TRI(743, 225, 219);
	  COL_TRI(1091, 746, 745);
	  COL_TRI(1091, 745, 1100);
	  COL_TRI(220, 745, 743);
	  COL_TRI(220, 1100, 745);
	  COL_TRI(220, 219, 750);
	  COL_TRI(220, 750, 749);
	  COL_TRI(377, 260, 802);
	  COL_TRI(1092, 1102, 1103);
	  COL_TRI(795, 790, 789);
	  COL_TRI(795, 298, 790);
	  COL_TRI(787, 796, 795);
	  COL_TRI(787, 795, 789);
	  COL_TRI(787, 786, 797);
	  COL_TRI(787, 797, 796);
	  COL_TRI(377, 802, 302);
	  COL_TRI(371, 848, 831);
	  COL_TRI(804, 806, 306);
	  COL_TRI(804, 803, 806);
	  COL_TRI(805, 807, 809);
	  COL_TRI(805, 809, 305);
	  COL_TRI(810, 812, 811);
	  COL_TRI(810, 813, 812);
	  COL_TRI(376, 364, 365);
	  COL_TRI(371, 260, 377);
	  COL_TRI(371, 835, 260);
	  COL_TRI(371, 834, 835);
	  COL_TRI(371, 350, 834);
	  COL_TRI(371, 831, 350);
	  COL_TRI(375, 374, 778);
	  COL_TRI(375, 778, 267);
	  COL_TRI(376, 365, 251);
	  COL_TRI(416, 871, 409);
	  COL_TRI(395, 859, 396);
	  COL_TRI(395, 858, 859);
	  COL_TRI(866, 406, 405);
	  COL_TRI(866, 405, 863);
	  COL_TRI(866, 863, 864);
	  COL_TRI(866, 867, 406);
	  COL_TRI(866, 870, 869);
	  COL_TRI(866, 869, 867);
	  COL_TRI(416, 875, 876);
	  COL_TRI(416, 874, 875);
	  COL_TRI(416, 410, 874);
	  COL_TRI(416, 409, 410);
	  COL_TRI(416, 876, 415);
	  COL_TRI(730, 731, 733);
	  COL_TRI(730, 733, 732);
	  COL_TRI(889, 888, 894);
	  COL_TRI(882, 424, 480);
	  COL_TRI(889, 891, 890);
	  COL_TRI(889, 894, 893);
	  COL_TRI(889, 893, 891);
	  COL_TRI(909, 912, 911);
	  COL_TRI(909, 911, 910);
	  COL_TRI(882, 422, 424);
	  COL_TRI(454, 937, 936);
	  COL_TRI(914, 425, 448);
	  COL_TRI(914, 447, 425);
	  COL_TRI(426, 449, 913);
	  COL_TRI(426, 913, 446);
	  COL_TRI(918, 916, 915);
	  COL_TRI(918, 915, 919);
	  COL_TRI(950, 947, 489);
	  COL_TRI(454, 936, 477);
	  COL_TRI(939, 485, 946);
	  COL_TRI(946, 945, 942);
	  COL_TRI(946, 942, 939);
	  COL_TRI(939, 940, 941);
	  COL_TRI(939, 941, 486);
	  COL_TRI(939, 486, 485);
	  COL_TRI(950, 949, 947);
	  COL_TRI(953, 952, 956);
	  COL_TRI(953, 956, 955);
	  COL_TRI(951, 956, 952);
	  COL_TRI(951, 495, 956);
	  COL_TRI(957, 495, 951);
	  COL_TRI(957, 951, 954);
	  COL_TRI(529, 985, 526);
	  COL_TRI(529, 987, 985);
	  COL_TRI(529, 528, 987);
	  COL_TRI(529, 526, 525);
	  COL_TRI(529, 525, 980);
	  COL_TRI(529, 980, 979);
	  COL_TRI(1093, 1104, 1105);
	  COL_TRI(1093, 1105, 1106);
	  COL_TRI(992, 993, 537);
	  COL_TRI(992, 537, 996);
	  COL_TRI(1000, 1005, 541);
	  COL_TRI(1000, 541, 1107);
	  COL_TRI(1094, 1022, 1025);
	  COL_TRI(1094, 1025, 554);
	  COL_TRI(1095, 1022, 1094);
	  COL_TRI(1095, 1023, 1022);
	  COL_TRI(542, 2, 1007);
	  COL_TRI(542, 1007, 596);
	  COL_TRI(1061, 1059, 587);
	  COL_TRI(1096, 1072, 599);
	  COL_TRI(1096, 1073, 1072);
	  COL_TRI(1031, 1024, 1021);
	  COL_TRI(1031, 1021, 600);
	  COL_TRI(1062, 1054, 1060);
	  COL_TRI(1062, 1060, 589);
	  COL_TRI(1047, 1049, 583);
	  COL_TRI(1061, 1058, 1059);
	  COL_TRI(1063, 1057, 1056);
	  COL_TRI(1063, 1056, 588);
	  COL_TRI(1053, 1051, 582);
	  COL_TRI(1053, 1052, 1051);
	  COL_TRI(1047, 578, 1049);
	  COL_TRI(1032, 1029, 1028);
	  COL_TRI(1046, 1042, 573);
	  COL_TRI(1046, 573, 572);
	  COL_TRI(1041, 567, 1038);
	  COL_TRI(1041, 1038, 571);
	  COL_TRI(1034, 1033, 561);
	  COL_TRI(1034, 561, 1037);
	  COL_TRI(1079, 1082, 1080);
	  COL_TRI(1032, 1028, 560);
	  COL_TRI(1027, 994, 533);
	  COL_TRI(1027, 1026, 994);
	  COL_TRI(1075, 1076, 1077);
	  COL_TRI(1075, 1077, 1078);
	  COL_TRI(1079, 1081, 1082);
	  COL_TRI_INIT(SURFACE_HORIZONTAL_WIND, 34);
	  COL_TRI_SPECIAL(10, 11, 12, 0x140);
	  COL_TRI_SPECIAL(11, 13, 12, 0x140);
	  COL_TRI_SPECIAL(11, 14, 13, 0x140);
	  COL_TRI_SPECIAL(14, 15, 13, 0x140);
	  COL_TRI_SPECIAL(16, 17, 18, 0x140);
	  COL_TRI_SPECIAL(16, 19, 20, 0x140);
	  COL_TRI_SPECIAL(16, 21, 19, 0x140);
	  COL_TRI_SPECIAL(16, 18, 21, 0x140);
	  COL_TRI_SPECIAL(22, 19, 23, 0x140);
	  COL_TRI_SPECIAL(22, 24, 19, 0x140);
	  COL_TRI_SPECIAL(25, 39, 36, 0x140);
	  COL_TRI_SPECIAL(20, 25, 36, 0x140);
	  COL_TRI_SPECIAL(26, 31, 27, 0x140);
	  COL_TRI_SPECIAL(27, 22, 23, 0x140);
	  COL_TRI_SPECIAL(27, 23, 37, 0x140);
	  COL_TRI_SPECIAL(26, 27, 37, 0x140);
	  COL_TRI_SPECIAL(28, 29, 38, 0x140);
	  COL_TRI_SPECIAL(29, 39, 38, 0x140);
	  COL_TRI_SPECIAL(29, 36, 39, 0x140);
	  COL_TRI_SPECIAL(10, 33, 42, 0x140);
	  COL_TRI_SPECIAL(30, 28, 38, 0x140);
	  COL_TRI_SPECIAL(26, 32, 31, 0x140);
	  COL_TRI_SPECIAL(31, 34, 30, 0x140);
	  COL_TRI_SPECIAL(32, 40, 31, 0x140);
	  COL_TRI_SPECIAL(31, 40, 34, 0x140);
	  COL_TRI_SPECIAL(28, 30, 34, 0x140);
	  COL_TRI_SPECIAL(28, 34, 41, 0x140);
	  COL_TRI_SPECIAL(10, 12, 33, 0x140);
	  COL_TRI_SPECIAL(32, 43, 40, 0x140);
	  COL_TRI_SPECIAL(34, 44, 41, 0x140);
	  COL_TRI_SPECIAL(32, 44, 43, 0x140);
	  COL_TRI_SPECIAL(32, 41, 44, 0x140);
	  COL_TRI_SPECIAL(35, 45, 46, 0x100);
	  COL_TRI_SPECIAL(35, 46, 47, 0x100);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(23);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start,   /*pos*/  2599, -1833,  2071, /*yaw*/   64); // unused, probably an early way to set initial position
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03, /*pos*/  1902, -1833,  1063, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_04, /*pos*/  3803, -1833,  2036, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_05, /*pos*/ -4888, -2550,  5847, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_06, /*pos*/  5324, -2038,  6155, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_07, /*pos*/  -409, -3164,  5207, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_08, /*pos*/ -3193, -4726,  6670, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_08, /*pos*/ -4680, -1910,   296, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_09, /*pos*/  6506, -1295,   762, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0A, /*pos*/ -4629,   137,  -113, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0B, /*pos*/  2639,  2724,  -622, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0C, /*pos*/  3577,  2486, -2346, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0D, /*pos*/   614, -1116,  3671, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0D, /*pos*/  3554,  4276, -2346, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0E, /*pos*/  5280,  4937,   603, /*yaw*/  128);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0F, /*pos*/ -4197,  4608, -5119, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_10, /*pos*/  2628,  -143, -1611, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_11, /*pos*/  5094,  3440,  4029, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_12, /*pos*/ -3708,  2006,   270, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_13, /*pos*/  5994,  -988,  1341, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_14, /*pos*/  3917,   624, -1133, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_15, /*pos*/ -3981,  3328, -2736, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_16, /*pos*/ -6053,  4096, -3197, /*yaw*/    0);
	  COL_END();
	}

	function rr_seg7_collision_level_VERSION_JP() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x454);
	  COL_VERTEX(-6677, -1782, 270);
	  COL_VERTEX(-6677, 1443, 270);
	  COL_VERTEX(-6677, 1443, -343);
	  COL_VERTEX(-6063, 1443, 270);
	  COL_VERTEX(-6063, -1116, 270);
	  COL_VERTEX(-6677, -1782, -445);
	  COL_VERTEX(-6063, 1648, 270);
	  COL_VERTEX(-6472, 1443, 270);
	  COL_VERTEX(-2888, 1648, 270);
	  COL_VERTEX(-3093, 1443, 270);
	  COL_VERTEX(-7394, 2364, -445);
	  COL_VERTEX(-7394, 2364, 270);
	  COL_VERTEX(-2274, 2364, 270);
	  COL_VERTEX(-2274, 2364, -445);
	  COL_VERTEX(2881, 2872, -2858);
	  COL_VERTEX(2881, 2872, -1834);
	  COL_VERTEX(4622, 2923, -1834);
	  COL_VERTEX(4622, 2923, -2858);
	  COL_VERTEX(5117, 2954, -1934);
	  COL_VERTEX(5117, 2954, -2753);
	  COL_VERTEX(1867, 2957, -2689);
	  COL_VERTEX(1875, 2956, -2001);
	  COL_VERTEX(5953, 3333, -2038);
	  COL_VERTEX(5117, 3322, -1729);
	  COL_VERTEX(5441, 3333, -2448);
	  COL_VERTEX(5117, 3322, -2958);
	  COL_VERTEX(5117, 3322, -1934);
	  COL_VERTEX(5117, 3322, -2753);
	  COL_VERTEX(4622, 3077, -3062);
	  COL_VERTEX(4622, 3077, -1834);
	  COL_VERTEX(1653, 3128, -2858);
	  COL_VERTEX(1038, 3231, -2448);
	  COL_VERTEX(1653, 3128, -2653);
	  COL_VERTEX(2881, 3026, -1834);
	  COL_VERTEX(5441, 3333, -2243);
	  COL_VERTEX(5646, 3333, -2243);
	  COL_VERTEX(5646, 3333, -2448);
	  COL_VERTEX(5953, 3333, -2653);
	  COL_VERTEX(4622, 3077, -2858);
	  COL_VERTEX(4622, 3077, -1629);
	  COL_VERTEX(2881, 3026, -2858);
	  COL_VERTEX(2881, 3026, -3062);
	  COL_VERTEX(2881, 3026, -1629);
	  COL_VERTEX(1653, 3128, -1834);
	  COL_VERTEX(1653, 3128, -2038);
	  COL_VERTEX(1038, 3231, -2243);
	  COL_VERTEX(-190, 3538, -2294);
	  COL_VERTEX(-190, 3538, -2397);
	  COL_VERTEX(-1509, -1280, 5438);
	  COL_VERTEX(-1304, -1270, 5438);
	  COL_VERTEX(-1304, -1280, 5438);
	  COL_VERTEX(-1509, -1270, 5438);
	  COL_VERTEX(2424, -348, 85);
	  COL_VERTEX(2424, -348, 494);
	  COL_VERTEX(3089, 214, 494);
	  COL_VERTEX(3089, 214, 85);
	  COL_VERTEX(-4339, 3098, -6450);
	  COL_VERTEX(-4032, 3098, -6450);
	  COL_VERTEX(-4032, 3098, -6655);
	  COL_VERTEX(-4339, 3098, -6655);
	  COL_VERTEX(-4339, 3098, -6604);
	  COL_VERTEX(-4032, 3507, -6604);
	  COL_VERTEX(-4339, 3507, -6604);
	  COL_VERTEX(-4032, 3098, -6604);
	  COL_VERTEX(1180, 2878, -340);
	  COL_VERTEX(1180, 3083, 274);
	  COL_VERTEX(1180, 2878, 274);
	  COL_VERTEX(1180, 3083, -340);
	  COL_VERTEX(2613, 2878, -340);
	  COL_VERTEX(2613, 3083, -340);
	  COL_VERTEX(975, 2878, 274);
	  COL_VERTEX(-3298, -451, 270);
	  COL_VERTEX(-3093, -297, 270);
	  COL_VERTEX(-3093, 316, 270);
	  COL_VERTEX(-3298, 316, 270);
	  COL_VERTEX(-3298, -297, 270);
	  COL_VERTEX(-3093, -758, 270);
	  COL_VERTEX(-3093, -758, -343);
	  COL_VERTEX(-3093, 316, -343);
	  COL_VERTEX(-3093, -1116, -343);
	  COL_VERTEX(-6370, -1782, -343);
	  COL_VERTEX(-3093, -1782, -445);
	  COL_VERTEX(-2888, 1648, -445);
	  COL_VERTEX(-6677, -1116, -445);
	  COL_VERTEX(-2479, -1321, 270);
	  COL_VERTEX(-2479, -1321, -343);
	  COL_VERTEX(-2274, -1321, 270);
	  COL_VERTEX(-2274, -1321, -343);
	  COL_VERTEX(-1455, -1321, -343);
	  COL_VERTEX(-1455, -1321, 270);
	  COL_VERTEX(-1864, -1321, 270);
	  COL_VERTEX(-1864, -1321, -343);
	  COL_VERTEX(-7394, -1116, -445);
	  COL_VERTEX(-3093, -297, -445);
	  COL_VERTEX(-2888, 1648, -343);
	  COL_VERTEX(-2786, -297, -445);
	  COL_VERTEX(-2888, 726, -445);
	  COL_VERTEX(-2274, 1648, -445);
	  COL_VERTEX(-7189, -1116, 270);
	  COL_VERTEX(-6677, -1116, -343);
	  COL_VERTEX(-7189, 2160, -343);
	  COL_VERTEX(-2479, 1648, -343);
	  COL_VERTEX(-2479, 2160, -343);
	  COL_VERTEX(-4629, -1782, 270);
	  COL_VERTEX(-4629, -1782, -343);
	  COL_VERTEX(-5039, 521, -343);
	  COL_VERTEX(-4936, 521, -343);
	  COL_VERTEX(-5039, 521, 270);
	  COL_VERTEX(-4936, 726, -343);
	  COL_VERTEX(-2786, -451, 270);
	  COL_VERTEX(-2786, -297, 270);
	  COL_VERTEX(-3298, -758, 270);
	  COL_VERTEX(-3298, -758, -343);
	  COL_VERTEX(-3605, -451, 270);
	  COL_VERTEX(-3605, -451, -343);
	  COL_VERTEX(-3605, -297, 270);
	  COL_VERTEX(-3298, -297, -343);
	  COL_VERTEX(-4117, -143, -343);
	  COL_VERTEX(-4117, 112, 270);
	  COL_VERTEX(-3912, -41, 270);
	  COL_VERTEX(-4117, -143, 270);
	  COL_VERTEX(-3605, 112, -343);
	  COL_VERTEX(-3605, -41, -343);
	  COL_VERTEX(-4117, -707, 270);
	  COL_VERTEX(-3912, -41, -343);
	  COL_VERTEX(-3605, -707, -343);
	  COL_VERTEX(-4322, -860, 270);
	  COL_VERTEX(-3605, -860, -343);
	  COL_VERTEX(-4322, -860, -343);
	  COL_VERTEX(-4117, -707, -343);
	  COL_VERTEX(-4117, -297, -343);
	  COL_VERTEX(-4322, -297, -343);
	  COL_VERTEX(-4424, 572, -343);
	  COL_VERTEX(-3810, 419, 270);
	  COL_VERTEX(-4220, 982, -343);
	  COL_VERTEX(-3810, 572, -343);
	  COL_VERTEX(-4629, 572, 270);
	  COL_VERTEX(-3810, 419, -343);
	  COL_VERTEX(-4629, 419, -343);
	  COL_VERTEX(-4936, 214, -343);
	  COL_VERTEX(-5141, -195, 270);
	  COL_VERTEX(-4834, 112, -343);
	  COL_VERTEX(-4629, 9, -343);
	  COL_VERTEX(-4629, -195, -343);
	  COL_VERTEX(-5141, -195, -343);
	  COL_VERTEX(-2479, 2160, 270);
	  COL_VERTEX(-3093, 726, -343);
	  COL_VERTEX(-3093, 1443, -343);
	  COL_VERTEX(-6063, -1116, -343);
	  COL_VERTEX(-5653, 931, -343);
	  COL_VERTEX(-6063, -195, 270);
	  COL_VERTEX(-5448, 214, -343);
	  COL_VERTEX(-5448, -195, -343);
	  COL_VERTEX(-4527, -502, -343);
	  COL_VERTEX(-4527, -655, -343);
	  COL_VERTEX(-6063, -655, 270);
	  COL_VERTEX(-5653, -1116, -343);
	  COL_VERTEX(-2274, -1987, 885);
	  COL_VERTEX(-7087, -1987, 885);
	  COL_VERTEX(-1864, -1987, 680);
	  COL_VERTEX(-2274, -1782, -445);
	  COL_VERTEX(-7087, -1782, -445);
	  COL_VERTEX(-7087, -1782, 885);
	  COL_VERTEX(-7496, -1782, 680);
	  COL_VERTEX(-7087, -1987, -445);
	  COL_VERTEX(3393, -2089, 2359);
	  COL_VERTEX(3393, -2089, 1780);
	  COL_VERTEX(2886, -1833, 1273);
	  COL_VERTEX(2307, -1833, 1273);
	  COL_VERTEX(1800, -2089, 1780);
	  COL_VERTEX(2307, -1833, 2866);
	  COL_VERTEX(2886, -1833, 2866);
	  COL_VERTEX(-3300, -3625, 6257);
	  COL_VERTEX(-3300, -3625, 6871);
	  COL_VERTEX(-3709, -2755, 6871);
	  COL_VERTEX(-4068, -3625, 6871);
	  COL_VERTEX(-5809, -2140, 6257);
	  COL_VERTEX(-5809, -2140, 6871);
	  COL_VERTEX(-4887, -2140, 6871);
	  COL_VERTEX(-4887, -1935, 6257);
	  COL_VERTEX(-5757, -1731, 5591);
	  COL_VERTEX(-5962, -1935, 5489);
	  COL_VERTEX(-5655, -1935, 5489);
	  COL_VERTEX(-5860, -1731, 5694);
	  COL_VERTEX(-5706, -1935, 5847);
	  COL_VERTEX(-5911, -1935, 5847);
	  COL_VERTEX(-6065, -2729, 6989);
	  COL_VERTEX(-5962, -2729, 6887);
	  COL_VERTEX(-6116, -2811, 6887);
	  COL_VERTEX(-6065, -2893, 6129);
	  COL_VERTEX(-5911, -2811, 6231);
	  COL_VERTEX(-5962, -2729, 6231);
	  COL_VERTEX(-6065, -2729, 6231);
	  COL_VERTEX(-6065, -2893, 6887);
	  COL_VERTEX(-6013, -2893, 6989);
	  COL_VERTEX(-5962, -2893, 6887);
	  COL_VERTEX(-5962, -3456, 6887);
	  COL_VERTEX(-6013, -3558, 6989);
	  COL_VERTEX(-5962, -2893, 6231);
	  COL_VERTEX(-6065, -2893, 6231);
	  COL_VERTEX(-5962, -3456, 6231);
	  COL_VERTEX(-6013, -2893, 6129);
	  COL_VERTEX(-6065, -3558, 6231);
	  COL_VERTEX(-3968, -3558, 6129);
	  COL_VERTEX(-3865, -3558, 6887);
	  COL_VERTEX(-4068, -3625, 6257);
	  COL_VERTEX(-2482, -1321, 4619);
	  COL_VERTEX(-1816, -1321, 5233);
	  COL_VERTEX(-2482, -1321, 5233);
	  COL_VERTEX(-4786, -911, 3953);
	  COL_VERTEX(-6269, -1321, 5233);
	  COL_VERTEX(-4632, -1321, 4619);
	  COL_VERTEX(-5860, -1116, 5438);
	  COL_VERTEX(-5860, -1321, 4414);
	  COL_VERTEX(-5451, -1321, 4619);
	  COL_VERTEX(-4632, -1321, 5233);
	  COL_VERTEX(-5451, -1116, 5233);
	  COL_VERTEX(-4888, -1270, 4055);
	  COL_VERTEX(-4991, -1116, 3851);
	  COL_VERTEX(-4735, -1116, 4209);
	  COL_VERTEX(-4786, -911, 4055);
	  COL_VERTEX(-4888, -911, 3953);
	  COL_VERTEX(-4939, -1116, 4209);
	  COL_VERTEX(-4888, -911, 4055);
	  COL_VERTEX(307, -2857, 3364);
	  COL_VERTEX(921, -3676, 3364);
	  COL_VERTEX(307, -3062, 4286);
	  COL_VERTEX(307, -3676, 6129);
	  COL_VERTEX(307, -3267, 5207);
	  COL_VERTEX(-690, -2140, 6871);
	  COL_VERTEX(-690, -1935, 6257);
	  COL_VERTEX(-1816, -2140, 6871);
	  COL_VERTEX(-1202, -2140, 6257);
	  COL_VERTEX(-1202, -1321, 4619);
	  COL_VERTEX(-1509, -1412, 5603);
	  COL_VERTEX(-1509, -1238, 5603);
	  COL_VERTEX(-1304, -1412, 5603);
	  COL_VERTEX(-1304, -1248, 5398);
	  COL_VERTEX(-1304, -1782, 6065);
	  COL_VERTEX(-1509, -1750, 6217);
	  COL_VERTEX(-1304, -1903, 6217);
	  COL_VERTEX(-1509, -1903, 6217);
	  COL_VERTEX(-1304, -1750, 6025);
	  COL_VERTEX(-1714, -1658, 5910);
	  COL_VERTEX(-1714, -1494, 5910);
	  COL_VERTEX(-1509, -1658, 5910);
	  COL_VERTEX(-1509, -1494, 5705);
	  COL_VERTEX(-1816, -1935, 6257);
	  COL_VERTEX(-1816, -2140, 6257);
	  COL_VERTEX(1653, 2975, -2038);
	  COL_VERTEX(921, -3676, 6129);
	  COL_VERTEX(921, -2857, 4286);
	  COL_VERTEX(921, -3062, 5207);
	  COL_VERTEX(-358, -3625, 6257);
	  COL_VERTEX(-358, -3625, 6871);
	  COL_VERTEX(-1126, -3625, 6871);
	  COL_VERTEX(-1126, -3625, 6257);
	  COL_VERTEX(825, -4700, 6440);
	  COL_VERTEX(825, -4700, 7566);
	  COL_VERTEX(415, -4700, 7566);
	  COL_VERTEX(415, -4700, 6747);
	  COL_VERTEX(716, -3553, 6231);
	  COL_VERTEX(665, -3471, 6231);
	  COL_VERTEX(563, -3471, 6231);
	  COL_VERTEX(563, -3635, 6887);
	  COL_VERTEX(665, -3635, 6887);
	  COL_VERTEX(614, -3635, 6989);
	  COL_VERTEX(563, -3471, 6989);
	  COL_VERTEX(665, -3471, 6887);
	  COL_VERTEX(512, -3553, 6887);
	  COL_VERTEX(-377, -4700, 6440);
	  COL_VERTEX(921, -3267, 5207);
	  COL_VERTEX(921, -2857, 3364);
	  COL_VERTEX(921, -3062, 4286);
	  COL_VERTEX(921, -3267, 6129);
	  COL_VERTEX(5646, -2038, 2241);
	  COL_VERTEX(5646, -2038, 1831);
	  COL_VERTEX(5031, -2038, 2241);
	  COL_VERTEX(5031, -2038, 1831);
	  COL_VERTEX(332, -1935, 6257);
	  COL_VERTEX(1254, -1935, 6257);
	  COL_VERTEX(742, -1526, 6257);
	  COL_VERTEX(844, -1526, 6257);
	  COL_VERTEX(1254, -1935, 6871);
	  COL_VERTEX(-5600, -4803, 7259);
	  COL_VERTEX(-787, -4803, 7259);
	  COL_VERTEX(-377, -4803, 7054);
	  COL_VERTEX(-5600, -4598, 5928);
	  COL_VERTEX(-787, -4598, 5928);
	  COL_VERTEX(-5600, -4598, 7259);
	  COL_VERTEX(-6009, -4598, 7054);
	  COL_VERTEX(-5600, -4803, 5928);
	  COL_VERTEX(7084, -1295, 1094);
	  COL_VERTEX(7084, -1295, 660);
	  COL_VERTEX(5889, -1295, 660);
	  COL_VERTEX(6778, -1091, 1674);
	  COL_VERTEX(6199, -1091, 1674);
	  COL_VERTEX(6823, -653, -733);
	  COL_VERTEX(6618, -858, -836);
	  COL_VERTEX(6925, -858, -836);
	  COL_VERTEX(6721, -653, -631);
	  COL_VERTEX(6874, -858, -477);
	  COL_VERTEX(6669, -858, -477);
	  COL_VERTEX(6107, -1219, 1831);
	  COL_VERTEX(6107, -1372, 1831);
	  COL_VERTEX(6260, -1219, 1831);
	  COL_VERTEX(6260, -1372, 1831);
	  COL_VERTEX(6107, -1372, 2241);
	  COL_VERTEX(6721, -1012, -631);
	  COL_VERTEX(5646, 2821, -2448);
	  COL_VERTEX(2881, 2514, -3062);
	  COL_VERTEX(1653, 2616, -2755);
	  COL_VERTEX(1857, 2104, -2346);
	  COL_VERTEX(1038, 3026, -2346);
	  COL_VERTEX(4139, 2568, -1627);
	  COL_VERTEX(4417, 1695, -2346);
	  COL_VERTEX(2881, 2514, -1629);
	  COL_VERTEX(5237, 2002, -2346);
	  COL_VERTEX(5117, 2606, -1729);
	  COL_VERTEX(5117, 2657, -2958);
	  COL_VERTEX(2881, 1695, -2346);
	  COL_VERTEX(1653, 2616, -1936);
	  COL_VERTEX(-5938, 2867, -4095);
	  COL_VERTEX(-5324, 2867, -3378);
	  COL_VERTEX(-5938, 2867, -6143);
	  COL_VERTEX(-6165, 5939, -6637);
	  COL_VERTEX(-5938, 5939, -6143);
	  COL_VERTEX(-5938, 5939, -4095);
	  COL_VERTEX(-5324, 5939, -3378);
	  COL_VERTEX(-3071, 5939, -3378);
	  COL_VERTEX(-3071, 2867, -3378);
	  COL_VERTEX(-2457, 2867, -4095);
	  COL_VERTEX(-5817, 5939, -3196);
	  COL_VERTEX(-2457, 5939, -6143);
	  COL_VERTEX(-2486, 2831, -6138);
	  COL_VERTEX(-2457, 3379, -5938);
	  COL_VERTEX(-2457, 3379, -5119);
	  COL_VERTEX(-2457, 3994, -5119);
	  COL_VERTEX(-2457, 5939, -4095);
	  COL_VERTEX(-2457, 4198, -5324);
	  COL_VERTEX(-2457, 4198, -5733);
	  COL_VERTEX(-3071, 2867, -6860);
	  COL_VERTEX(-3071, 5939, -6860);
	  COL_VERTEX(-5324, 2867, -6860);
	  COL_VERTEX(-5847, 2838, -7037);
	  COL_VERTEX(-5324, 5939, -6860);
	  COL_VERTEX(-4607, 3379, -3378);
	  COL_VERTEX(-4607, 3379, -3583);
	  COL_VERTEX(-4402, 4198, -3583);
	  COL_VERTEX(-3788, 3379, -3583);
	  COL_VERTEX(-5426, 3072, -3583);
	  COL_VERTEX(-3788, 3994, -3583);
	  COL_VERTEX(-3993, 4198, -3583);
	  COL_VERTEX(-2661, 5939, -4044);
	  COL_VERTEX(-2661, 5939, -6194);
	  COL_VERTEX(-2661, 3994, -5938);
	  COL_VERTEX(-2661, 4198, -5733);
	  COL_VERTEX(-2661, 4198, -5324);
	  COL_VERTEX(-2661, 3379, -5119);
	  COL_VERTEX(-2661, 3072, -4044);
	  COL_VERTEX(-2661, 3072, -6194);
	  COL_VERTEX(-2661, 3379, -5938);
	  COL_VERTEX(-5938, 4506, -5631);
	  COL_VERTEX(-5733, 4506, -5631);
	  COL_VERTEX(-5733, 5325, -5426);
	  COL_VERTEX(-5733, 4506, -4812);
	  COL_VERTEX(-5733, 3072, -6245);
	  COL_VERTEX(-5733, 5120, -4812);
	  COL_VERTEX(-5733, 5325, -5017);
	  COL_VERTEX(-5733, 5939, -6245);
	  COL_VERTEX(-6165, 2867, -3601);
	  COL_VERTEX(-2577, 5939, -3196);
	  COL_VERTEX(-5817, 5939, -7042);
	  COL_VERTEX(-2880, 7203, -6570);
	  COL_VERTEX(-2230, 5939, -6637);
	  COL_VERTEX(-5017, 3379, -3378);
	  COL_VERTEX(-5017, 3482, -3378);
	  COL_VERTEX(-4607, 3482, -2764);
	  COL_VERTEX(-5017, 3482, -3122);
	  COL_VERTEX(-3378, 3482, -3378);
	  COL_VERTEX(-3378, 3482, -3122);
	  COL_VERTEX(-3788, 3482, -2764);
	  COL_VERTEX(-5053, 3328, -3086);
	  COL_VERTEX(-5053, 3482, -3086);
	  COL_VERTEX(-4610, 3482, -2766);
	  COL_VERTEX(-5068, 3328, -3378);
	  COL_VERTEX(-5324, 6451, -6245);
	  COL_VERTEX(-3342, 3328, -3086);
	  COL_VERTEX(-3327, 3328, -3378);
	  COL_VERTEX(-3788, 3482, -2713);
	  COL_VERTEX(-4607, 3328, -2713);
	  COL_VERTEX(-3788, 3328, -2713);
	  COL_VERTEX(-3890, 3072, -2815);
	  COL_VERTEX(-3788, 3381, -2764);
	  COL_VERTEX(-3788, 3379, -2713);
	  COL_VERTEX(-3552, 2970, -3378);
	  COL_VERTEX(-5938, 2970, -3378);
	  COL_VERTEX(-3071, 6451, -3993);
	  COL_VERTEX(-4607, 6451, -5426);
	  COL_VERTEX(-2230, 5939, -3601);
	  COL_VERTEX(-3788, 6451, -4812);
	  COL_VERTEX(-3071, 6451, -6245);
	  COL_VERTEX(-3788, 6246, -5426);
	  COL_VERTEX(-3071, 6246, -6245);
	  COL_VERTEX(-3788, 6246, -4812);
	  COL_VERTEX(-4607, 6246, -5426);
	  COL_VERTEX(-4607, 6246, -4812);
	  COL_VERTEX(-5324, 6246, -3993);
	  COL_VERTEX(-3071, 6246, -3993);
	  COL_VERTEX(-2805, 5939, -3972);
	  COL_VERTEX(-2969, 5939, -3583);
	  COL_VERTEX(-2969, 5939, -6655);
	  COL_VERTEX(-2989, 5939, -6512);
	  COL_VERTEX(-5324, 6246, -6245);
	  COL_VERTEX(-5406, 3072, -3726);
	  COL_VERTEX(-5590, 3072, -3972);
	  COL_VERTEX(-5733, 5939, -3993);
	  COL_VERTEX(-2989, 5939, -3726);
	  COL_VERTEX(-2989, 3072, -6512);
	  COL_VERTEX(-5406, 5939, -6512);
	  COL_VERTEX(-5426, 5939, -6655);
	  COL_VERTEX(-2969, 3072, -6655);
	  COL_VERTEX(-5426, 3072, -6655);
	  COL_VERTEX(-5426, 5939, -3583);
	  COL_VERTEX(-5324, 6451, -3993);
	  COL_VERTEX(-5515, 7203, -3668);
	  COL_VERTEX(-3071, 3068, -4402);
	  COL_VERTEX(-3071, 3068, -5733);
	  COL_VERTEX(-3583, 3068, -4402);
	  COL_VERTEX(-3583, 3068, -5733);
	  COL_VERTEX(-3788, 3072, -3583);
	  COL_VERTEX(-4607, 3072, -3583);
	  COL_VERTEX(-3788, 3072, -4351);
	  COL_VERTEX(-4607, 3174, -4351);
	  COL_VERTEX(-4607, 3379, -3839);
	  COL_VERTEX(-4607, 3277, -4095);
	  COL_VERTEX(-3827, 3482, -6655);
	  COL_VERTEX(-4032, 3686, -6655);
	  COL_VERTEX(-4032, 3123, -6450);
	  COL_VERTEX(-3827, 3482, -6450);
	  COL_VERTEX(-4032, 3328, -6450);
	  COL_VERTEX(-4339, 3686, -6655);
	  COL_VERTEX(-4032, 3686, -6450);
	  COL_VERTEX(-4544, 3482, -6655);
	  COL_VERTEX(-4237, 3430, -6450);
	  COL_VERTEX(-4544, 3123, -6655);
	  COL_VERTEX(-4339, 3328, -6450);
	  COL_VERTEX(-4237, 3430, -6655);
	  COL_VERTEX(-4339, 3328, -6655);
	  COL_VERTEX(-4134, 3430, -6655);
	  COL_VERTEX(-4032, 3328, -6655);
	  COL_VERTEX(-4032, 3072, -6655);
	  COL_VERTEX(-4646, 3072, -6348);
	  COL_VERTEX(-3725, 3072, -6655);
	  COL_VERTEX(-4262, 3686, -6501);
	  COL_VERTEX(-4262, 3686, -6655);
	  COL_VERTEX(-4109, 5939, -6655);
	  COL_VERTEX(-4262, 5939, -6655);
	  COL_VERTEX(4212, -1720, 1831);
	  COL_VERTEX(4212, -1946, 2241);
	  COL_VERTEX(3393, -1946, 2241);
	  COL_VERTEX(921, -1116, 3364);
	  COL_VERTEX(307, -1321, 2135);
	  COL_VERTEX(921, -1321, 2135);
	  COL_VERTEX(307, -1321, 3364);
	  COL_VERTEX(307, -1116, 3364);
	  COL_VERTEX(307, -963, 3364);
	  COL_VERTEX(921, -963, 3364);
	  COL_VERTEX(921, -963, 3979);
	  COL_VERTEX(921, -1167, 3979);
	  COL_VERTEX(307, -963, 3979);
	  COL_VERTEX(307, -1167, 3364);
	  COL_VERTEX(512, -1147, 3774);
	  COL_VERTEX(307, -1147, 3979);
	  COL_VERTEX(512, -1147, 3569);
	  COL_VERTEX(716, -1147, 3774);
	  COL_VERTEX(921, -1147, 3979);
	  COL_VERTEX(307, -1147, 3364);
	  COL_VERTEX(921, -1147, 3364);
	  COL_VERTEX(716, -1116, 3569);
	  COL_VERTEX(921, -973, 3354);
	  COL_VERTEX(307, -973, 3354);
	  COL_VERTEX(3861, 4245, -2653);
	  COL_VERTEX(3452, 4245, -2448);
	  COL_VERTEX(3247, 4245, -2653);
	  COL_VERTEX(3656, 4276, -2448);
	  COL_VERTEX(3656, 4245, -2243);
	  COL_VERTEX(3247, 4245, -2038);
	  COL_VERTEX(3452, 4245, -2243);
	  COL_VERTEX(3861, 4245, -2038);
	  COL_VERTEX(3247, 4225, -2653);
	  COL_VERTEX(3247, 4430, -2653);
	  COL_VERTEX(3247, 4430, -2038);
	  COL_VERTEX(3861, 4225, -2038);
	  COL_VERTEX(3861, 4430, -2038);
	  COL_VERTEX(-7173, 3584, -2387);
	  COL_VERTEX(-6292, 3584, -1770);
	  COL_VERTEX(-6821, 3584, -2890);
	  COL_VERTEX(-5940, 3584, -2273);
	  COL_VERTEX(-8049, 3891, -4426);
	  COL_VERTEX(-8049, 3891, -3351);
	  COL_VERTEX(-7435, 3891, -4426);
	  COL_VERTEX(-7435, 3891, -3351);
	  COL_VERTEX(2204, 3083, -1773);
	  COL_VERTEX(2357, 3109, -1773);
	  COL_VERTEX(2204, 3109, -1773);
	  COL_VERTEX(2204, 3109, -852);
	  COL_VERTEX(2357, 3109, -852);
	  COL_VERTEX(1180, 2878, -954);
	  COL_VERTEX(2613, 2878, -954);
	  COL_VERTEX(975, 3083, -954);
	  COL_VERTEX(3332, 2468, -124);
	  COL_VERTEX(3486, 2314, -124);
	  COL_VERTEX(3486, 2468, -124);
	  COL_VERTEX(3332, 2314, 285);
	  COL_VERTEX(3332, 2314, -124);
	  COL_VERTEX(3844, 2519, -124);
	  COL_VERTEX(3844, 2314, -124);
	  COL_VERTEX(3998, 2519, -124);
	  COL_VERTEX(3998, 2314, -124);
	  COL_VERTEX(3844, 2314, 285);
	  COL_VERTEX(2820, 2314, -124);
	  COL_VERTEX(2820, 2570, -124);
	  COL_VERTEX(2974, 2570, -124);
	  COL_VERTEX(2974, 2314, -124);
	  COL_VERTEX(2820, 2314, 285);
	  COL_VERTEX(2075, 2509, -130);
	  COL_VERTEX(1921, 2509, -130);
	  COL_VERTEX(1998, 2714, -130);
	  COL_VERTEX(2075, 2612, -130);
	  COL_VERTEX(1921, 2612, 279);
	  COL_VERTEX(-1040, 1690, 133);
	  COL_VERTEX(-1040, 922, -480);
	  COL_VERTEX(-630, 922, -480);
	  COL_VERTEX(-630, 1690, 133);
	  COL_VERTEX(-630, 1690, -480);
	  COL_VERTEX(-1626, 3120, 119);
	  COL_VERTEX(-2036, 3120, 119);
	  COL_VERTEX(-1626, 3120, -494);
	  COL_VERTEX(-1626, 1843, 119);
	  COL_VERTEX(-2036, 3120, -494);
	  COL_VERTEX(7602, -2396, 5950);
	  COL_VERTEX(7602, -2396, 7179);
	  COL_VERTEX(4838, -2396, 7179);
	  COL_VERTEX(4838, -2396, 5950);
	  COL_VERTEX(3609, -2089, 6257);
	  COL_VERTEX(4838, -2089, 6257);
	  COL_VERTEX(3609, -2089, 6871);
	  COL_VERTEX(4838, -2089, 6871);
	  COL_VERTEX(3712, -937, 6052);
	  COL_VERTEX(4121, -937, 6257);
	  COL_VERTEX(3303, -937, 6871);
	  COL_VERTEX(3712, -732, 7076);
	  COL_VERTEX(4121, -732, 6871);
	  COL_VERTEX(4735, -937, 6871);
	  COL_VERTEX(4735, -937, 6257);
	  COL_VERTEX(3455, -1935, 5387);
	  COL_VERTEX(3404, -1935, 5745);
	  COL_VERTEX(3199, -1935, 5745);
	  COL_VERTEX(3148, -1935, 5387);
	  COL_VERTEX(3353, -1731, 5489);
	  COL_VERTEX(3250, -1731, 5591);
	  COL_VERTEX(6230, 3675, 4524);
	  COL_VERTEX(5565, 3819, 5189);
	  COL_VERTEX(4624, 3819, 5189);
	  COL_VERTEX(4624, 3675, 2919);
	  COL_VERTEX(3959, 3675, 3584);
	  COL_VERTEX(4527, 2999, 3819);
	  COL_VERTEX(6230, 3675, 3584);
	  COL_VERTEX(5565, 3819, 2919);
	  COL_VERTEX(4624, 3819, 2919);
	  COL_VERTEX(5565, 3675, 2919);
	  COL_VERTEX(4838, -1935, 5950);
	  COL_VERTEX(4838, -1935, 6257);
	  COL_VERTEX(2475, -1014, -3864);
	  COL_VERTEX(2475, -1065, -3454);
	  COL_VERTEX(3396, -1014, -3864);
	  COL_VERTEX(3806, -604, -3864);
	  COL_VERTEX(2987, -604, -3864);
	  COL_VERTEX(2987, -655, -3454);
	  COL_VERTEX(2987, -655, -3864);
	  COL_VERTEX(3089, 163, 85);
	  COL_VERTEX(2424, -399, 85);
	  COL_VERTEX(2782, 982, 494);
	  COL_VERTEX(4113, 1033, 85);
	  COL_VERTEX(3089, 982, 85);
	  COL_VERTEX(4113, 982, 85);
	  COL_VERTEX(3089, 982, -938);
	  COL_VERTEX(2782, 982, -938);
	  COL_VERTEX(2719, -1321, -343);
	  COL_VERTEX(3538, -1321, -343);
	  COL_VERTEX(3538, -1321, 270);
	  COL_VERTEX(2719, -1321, 270);
	  COL_VERTEX(307, -1321, -2243);
	  COL_VERTEX(921, -1321, -2243);
	  COL_VERTEX(307, -1321, -3882);
	  COL_VERTEX(921, -1321, -3882);
	  COL_VERTEX(4113, -195, -3864);
	  COL_VERTEX(4113, -41, -3864);
	  COL_VERTEX(3806, -41, -3864);
	  COL_VERTEX(3806, -195, -3454);
	  COL_VERTEX(3806, -195, -3864);
	  COL_VERTEX(3089, -41, -3864);
	  COL_VERTEX(3089, 112, -3864);
	  COL_VERTEX(3243, 112, -3864);
	  COL_VERTEX(3243, -41, -3864);
	  COL_VERTEX(3089, -41, -3454);
	  COL_VERTEX(4011, 880, -1860);
	  COL_VERTEX(3601, 931, -1860);
	  COL_VERTEX(4011, 982, -1860);
	  COL_VERTEX(4216, 880, -1860);
	  COL_VERTEX(4216, 777, -1860);
	  COL_VERTEX(3960, 777, -1860);
	  COL_VERTEX(3960, 777, -1450);
	  COL_VERTEX(4011, 982, -1450);
	  COL_VERTEX(3089, 1033, -1860);
	  COL_VERTEX(2065, 1033, -1860);
	  COL_VERTEX(2065, 982, -1450);
	  COL_VERTEX(2065, 982, -1860);
	  COL_VERTEX(-6860, 3021, -2713);
	  COL_VERTEX(-4197, 3021, -2405);
	  COL_VERTEX(-4197, 3021, -2713);
	  COL_VERTEX(-6860, 3021, -2405);
	  COL_VERTEX(975, 3083, 274);
	  COL_VERTEX(-3093, -1116, 270);
	  COL_VERTEX(-3093, -1782, 270);
	  COL_VERTEX(-3093, -1782, -343);
	  COL_VERTEX(-3093, 726, -445);
	  COL_VERTEX(-6370, 1443, -343);
	  COL_VERTEX(-2479, -1116, -343);
	  COL_VERTEX(-2274, -1116, -343);
	  COL_VERTEX(-2479, -1116, 270);
	  COL_VERTEX(-2274, -1116, 270);
	  COL_VERTEX(-2786, -451, -445);
	  COL_VERTEX(-3093, 726, 270);
	  COL_VERTEX(-2888, 726, 270);
	  COL_VERTEX(-1455, -1116, 270);
	  COL_VERTEX(-1864, -1116, 270);
	  COL_VERTEX(-1864, -1116, -343);
	  COL_VERTEX(-1455, -1116, -343);
	  COL_VERTEX(-2274, 1648, 270);
	  COL_VERTEX(-7189, -1116, -343);
	  COL_VERTEX(-3093, -451, -445);
	  COL_VERTEX(-2479, 1648, 270);
	  COL_VERTEX(-7394, -1116, 270);
	  COL_VERTEX(-7189, 2160, 270);
	  COL_VERTEX(-4629, -1116, 270);
	  COL_VERTEX(-4629, -1116, -343);
	  COL_VERTEX(-5141, 726, 270);
	  COL_VERTEX(-5141, 726, -343);
	  COL_VERTEX(-4936, 726, 270);
	  COL_VERTEX(-4936, 521, 270);
	  COL_VERTEX(-3605, -451, -445);
	  COL_VERTEX(-3093, -451, 270);
	  COL_VERTEX(-3298, -451, -343);
	  COL_VERTEX(-3605, -297, -343);
	  COL_VERTEX(-3298, 316, -343);
	  COL_VERTEX(-4117, 112, -343);
	  COL_VERTEX(-3605, 112, 270);
	  COL_VERTEX(-4322, -297, 270);
	  COL_VERTEX(-4117, -297, 270);
	  COL_VERTEX(-4322, -143, 270);
	  COL_VERTEX(-3605, -41, 270);
	  COL_VERTEX(-3912, -707, 270);
	  COL_VERTEX(-3912, -707, -343);
	  COL_VERTEX(-3605, -860, 270);
	  COL_VERTEX(-3605, -707, 270);
	  COL_VERTEX(-4322, -707, 270);
	  COL_VERTEX(-4322, -707, -343);
	  COL_VERTEX(-4322, -143, -343);
	  COL_VERTEX(-4424, 572, 270);
	  COL_VERTEX(-4424, 982, 270);
	  COL_VERTEX(-4424, 982, -343);
	  COL_VERTEX(-4220, 982, 270);
	  COL_VERTEX(-3810, 572, 270);
	  COL_VERTEX(-4629, 419, 270);
	  COL_VERTEX(-4629, 572, -343);
	  COL_VERTEX(-4936, 214, 270);
	  COL_VERTEX(-4936, 112, 270);
	  COL_VERTEX(-4936, 112, -343);
	  COL_VERTEX(-4834, 112, 270);
	  COL_VERTEX(-5141, 214, 270);
	  COL_VERTEX(-4834, 9, 270);
	  COL_VERTEX(-4834, 9, -343);
	  COL_VERTEX(-4629, 9, 270);
	  COL_VERTEX(-4629, -195, 270);
	  COL_VERTEX(-5141, 214, -343);
	  COL_VERTEX(-6063, 1443, -343);
	  COL_VERTEX(-5653, 214, 270);
	  COL_VERTEX(-5653, 214, -343);
	  COL_VERTEX(-5653, 931, 270);
	  COL_VERTEX(-5448, 214, 270);
	  COL_VERTEX(-5756, 1033, 270);
	  COL_VERTEX(-5448, -195, 270);
	  COL_VERTEX(-6063, -195, -343);
	  COL_VERTEX(-6063, 1033, 270);
	  COL_VERTEX(-4527, -502, 270);
	  COL_VERTEX(-4527, -655, 270);
	  COL_VERTEX(-6063, -655, -343);
	  COL_VERTEX(-6063, -502, 270);
	  COL_VERTEX(-5653, -1116, 270);
	  COL_VERTEX(-5653, -1782, 270);
	  COL_VERTEX(-5653, -1782, -343);
	  COL_VERTEX(-1864, -1782, 680);
	  COL_VERTEX(-2274, -1782, 885);
	  COL_VERTEX(-1864, -1782, -241);
	  COL_VERTEX(-1864, -1987, -241);
	  COL_VERTEX(-2274, -1987, -445);
	  COL_VERTEX(-7496, -1987, 680);
	  COL_VERTEX(-7496, -1782, -241);
	  COL_VERTEX(-7496, -1987, -241);
	  COL_VERTEX(3393, -1833, 1780);
	  COL_VERTEX(3393, -1833, 2359);
	  COL_VERTEX(2886, -2089, 2866);
	  COL_VERTEX(2886, -2089, 1273);
	  COL_VERTEX(2307, -2089, 2866);
	  COL_VERTEX(2307, -2089, 1273);
	  COL_VERTEX(1800, -1833, 1780);
	  COL_VERTEX(1800, -2089, 2359);
	  COL_VERTEX(1800, -1833, 2359);
	  COL_VERTEX(-3300, -2959, 6871);
	  COL_VERTEX(-3505, -2959, 6871);
	  COL_VERTEX(-4068, -2755, 6257);
	  COL_VERTEX(-4068, -2755, 6871);
	  COL_VERTEX(-3300, -2959, 6257);
	  COL_VERTEX(-5809, -1935, 6257);
	  COL_VERTEX(-4887, -2140, 6257);
	  COL_VERTEX(-5809, -1935, 6871);
	  COL_VERTEX(-4887, -1935, 6871);
	  COL_VERTEX(-5860, -1731, 5591);
	  COL_VERTEX(-5757, -1731, 5694);
	  COL_VERTEX(-5962, -2729, 6989);
	  COL_VERTEX(-6065, -2729, 6887);
	  COL_VERTEX(-5911, -2811, 6989);
	  COL_VERTEX(-5911, -2811, 6887);
	  COL_VERTEX(-5962, -2893, 6989);
	  COL_VERTEX(-6116, -2811, 6989);
	  COL_VERTEX(-6065, -2893, 6989);
	  COL_VERTEX(-6065, -2729, 6129);
	  COL_VERTEX(-5962, -2729, 6129);
	  COL_VERTEX(-5911, -2811, 6129);
	  COL_VERTEX(-5962, -2893, 6129);
	  COL_VERTEX(-6116, -2811, 6129);
	  COL_VERTEX(-6116, -2811, 6231);
	  COL_VERTEX(-6065, -3558, 6887);
	  COL_VERTEX(-3903, -3456, 6887);
	  COL_VERTEX(-3967, -3558, 6989);
	  COL_VERTEX(-6013, -3558, 6129);
	  COL_VERTEX(-3904, -3456, 6231);
	  COL_VERTEX(-3866, -3558, 6231);
	  COL_VERTEX(-3709, -2755, 6257);
	  COL_VERTEX(-3505, -2959, 6257);
	  COL_VERTEX(-2482, -1116, 4619);
	  COL_VERTEX(-1202, -1116, 4619);
	  COL_VERTEX(-1202, -1321, 5233);
	  COL_VERTEX(-2482, -1116, 5233);
	  COL_VERTEX(-1816, -1116, 5233);
	  COL_VERTEX(-5860, -1321, 5438);
	  COL_VERTEX(-6269, -1321, 4619);
	  COL_VERTEX(-6269, -1116, 5233);
	  COL_VERTEX(-6269, -1116, 4619);
	  COL_VERTEX(-5860, -1116, 4414);
	  COL_VERTEX(-5451, -1116, 4619);
	  COL_VERTEX(-4632, -1116, 4619);
	  COL_VERTEX(-5451, -1321, 5233);
	  COL_VERTEX(-4632, -1116, 5233);
	  COL_VERTEX(-4786, -1270, 4055);
	  COL_VERTEX(-4683, -1116, 3851);
	  COL_VERTEX(307, -3676, 3364);
	  COL_VERTEX(307, -2857, 4286);
	  COL_VERTEX(307, -3267, 6129);
	  COL_VERTEX(307, -3062, 5207);
	  COL_VERTEX(-690, -2140, 6257);
	  COL_VERTEX(-690, -1935, 6871);
	  COL_VERTEX(-1816, -1935, 6871);
	  COL_VERTEX(-1202, -1935, 6257);
	  COL_VERTEX(-1202, -1116, 5233);
	  COL_VERTEX(-1509, -1248, 5398);
	  COL_VERTEX(-1509, -1238, 5398);
	  COL_VERTEX(-1304, -1238, 5603);
	  COL_VERTEX(-1304, -1238, 5398);
	  COL_VERTEX(-1509, -1782, 6052);
	  COL_VERTEX(-1509, -1782, 6065);
	  COL_VERTEX(-1304, -1782, 6052);
	  COL_VERTEX(-1304, -1750, 6217);
	  COL_VERTEX(-1509, -1750, 6025);
	  COL_VERTEX(-1714, -1494, 5705);
	  COL_VERTEX(-1509, -1494, 5910);
	  COL_VERTEX(1653, 2975, -2653);
	  COL_VERTEX(-358, -2959, 6871);
	  COL_VERTEX(-1126, -2959, 6871);
	  COL_VERTEX(-1126, -2959, 6257);
	  COL_VERTEX(-358, -2959, 6257);
	  COL_VERTEX(825, -4598, 7566);
	  COL_VERTEX(415, -4598, 7566);
	  COL_VERTEX(825, -4598, 6440);
	  COL_VERTEX(415, -4598, 6747);
	  COL_VERTEX(-377, -4598, 6747);
	  COL_VERTEX(-377, -4700, 6747);
	  COL_VERTEX(716, -3553, 6129);
	  COL_VERTEX(665, -3471, 6129);
	  COL_VERTEX(563, -3471, 6129);
	  COL_VERTEX(512, -3553, 6129);
	  COL_VERTEX(512, -3553, 6231);
	  COL_VERTEX(605, -4598, 6970);
	  COL_VERTEX(614, -4598, 6989);
	  COL_VERTEX(563, -4598, 6887);
	  COL_VERTEX(582, -4598, 6887);
	  COL_VERTEX(660, -4598, 6897);
	  COL_VERTEX(665, -4598, 6887);
	  COL_VERTEX(716, -3553, 6887);
	  COL_VERTEX(563, -3471, 6887);
	  COL_VERTEX(665, -3471, 6989);
	  COL_VERTEX(716, -3553, 6989);
	  COL_VERTEX(512, -3553, 6989);
	  COL_VERTEX(665, -3635, 6989);
	  COL_VERTEX(563, -3635, 6989);
	  COL_VERTEX(-377, -4598, 6440);
	  COL_VERTEX(5031, -1884, 2241);
	  COL_VERTEX(5646, -1884, 2241);
	  COL_VERTEX(5646, -1884, 1831);
	  COL_VERTEX(5031, -1884, 1831);
	  COL_VERTEX(332, -1935, 6871);
	  COL_VERTEX(742, -1526, 6871);
	  COL_VERTEX(844, -1526, 6871);
	  COL_VERTEX(-787, -4598, 7259);
	  COL_VERTEX(-377, -4598, 7054);
	  COL_VERTEX(-377, -4803, 6133);
	  COL_VERTEX(-377, -4598, 6133);
	  COL_VERTEX(-787, -4803, 5928);
	  COL_VERTEX(-6009, -4803, 7054);
	  COL_VERTEX(-6009, -4803, 6133);
	  COL_VERTEX(-6009, -4598, 6133);
	  COL_VERTEX(7285, -1091, 1167);
	  COL_VERTEX(6704, -1295, 1474);
	  COL_VERTEX(7285, -1091, 588);
	  COL_VERTEX(6778, -1091, 81);
	  COL_VERTEX(6269, -1295, 1474);
	  COL_VERTEX(5889, -1295, 1094);
	  COL_VERTEX(5692, -1091, 1167);
	  COL_VERTEX(5692, -1091, 588);
	  COL_VERTEX(6199, -1091, 81);
	  COL_VERTEX(6721, -653, -733);
	  COL_VERTEX(6823, -653, -631);
	  COL_VERTEX(6107, -1219, 2241);
	  COL_VERTEX(6260, -1372, 2241);
	  COL_VERTEX(6260, -1219, 2241);
	  COL_VERTEX(6823, -1012, -631);
	  COL_VERTEX(5646, 2821, -2243);
	  COL_VERTEX(5441, 2821, -2243);
	  COL_VERTEX(5441, 2821, -2448);
	  COL_VERTEX(5953, 2923, -2038);
	  COL_VERTEX(5953, 2923, -2653);
	  COL_VERTEX(4036, 2567, -3062);
	  COL_VERTEX(-5938, 4506, -4812);
	  COL_VERTEX(-5938, 5120, -4812);
	  COL_VERTEX(-6165, 5939, -3601);
	  COL_VERTEX(-5938, 5120, -5631);
	  COL_VERTEX(-5938, 5325, -5426);
	  COL_VERTEX(-5938, 5325, -5017);
	  COL_VERTEX(-4607, 3998, -3378);
	  COL_VERTEX(-4607, 3383, -3378);
	  COL_VERTEX(-5817, 2867, -3196);
	  COL_VERTEX(-6195, 2838, -6632);
	  COL_VERTEX(-4402, 4202, -3378);
	  COL_VERTEX(-3993, 4202, -3378);
	  COL_VERTEX(-3788, 3998, -3378);
	  COL_VERTEX(-3788, 3383, -3378);
	  COL_VERTEX(-4690, 3324, -3378);
	  COL_VERTEX(-3704, 3320, -3378);
	  COL_VERTEX(-2577, 2867, -3196);
	  COL_VERTEX(-2230, 2867, -3601);
	  COL_VERTEX(-2457, 3994, -5938);
	  COL_VERTEX(-2607, 2838, -7037);
	  COL_VERTEX(-2577, 5939, -7042);
	  COL_VERTEX(-2259, 2838, -6632);
	  COL_VERTEX(-4607, 3994, -3378);
	  COL_VERTEX(-4607, 3994, -3583);
	  COL_VERTEX(-4402, 4198, -3378);
	  COL_VERTEX(-2969, 3072, -3583);
	  COL_VERTEX(-3788, 3994, -3378);
	  COL_VERTEX(-3788, 3379, -3378);
	  COL_VERTEX(-3993, 4198, -3378);
	  COL_VERTEX(-5406, 5939, -3726);
	  COL_VERTEX(-2989, 3072, -3726);
	  COL_VERTEX(-2661, 3994, -5119);
	  COL_VERTEX(-2805, 5939, -6266);
	  COL_VERTEX(-2805, 3072, -6266);
	  COL_VERTEX(-2805, 3072, -3972);
	  COL_VERTEX(-5733, 5120, -5631);
	  COL_VERTEX(-5733, 3072, -3993);
	  COL_VERTEX(-5590, 5939, -3972);
	  COL_VERTEX(-5515, 7203, -6570);
	  COL_VERTEX(-5017, 3379, -3122);
	  COL_VERTEX(-5068, 3482, -3378);
	  COL_VERTEX(-4607, 3482, -2713);
	  COL_VERTEX(-4607, 3379, -2764);
	  COL_VERTEX(-3378, 3379, -3122);
	  COL_VERTEX(-3378, 3379, -3378);
	  COL_VERTEX(-3327, 3482, -3378);
	  COL_VERTEX(-3342, 3482, -3086);
	  COL_VERTEX(-3788, 3379, -2764);
	  COL_VERTEX(-4505, 3072, -2815);
	  COL_VERTEX(-4843, 2959, -3378);
	  COL_VERTEX(-4607, 3379, -2713);
	  COL_VERTEX(-4610, 3379, -2766);
	  COL_VERTEX(-2457, 2970, -6860);
	  COL_VERTEX(-2457, 2970, -3378);
	  COL_VERTEX(-5938, 2970, -6860);
	  COL_VERTEX(-2880, 7203, -3668);
	  COL_VERTEX(-4607, 6451, -4812);
	  COL_VERTEX(-3788, 6451, -5426);
	  COL_VERTEX(-5590, 5939, -6266);
	  COL_VERTEX(-5590, 3072, -6266);
	  COL_VERTEX(-5406, 3072, -6512);
	  COL_VERTEX(-3583, 3222, -4402);
	  COL_VERTEX(-3071, 3222, -4402);
	  COL_VERTEX(-3071, 3222, -5733);
	  COL_VERTEX(-3583, 3222, -5733);
	  COL_VERTEX(-3788, 3174, -4351);
	  COL_VERTEX(-3788, 3174, -4095);
	  COL_VERTEX(-3788, 3379, -3839);
	  COL_VERTEX(-3788, 3277, -3839);
	  COL_VERTEX(-3788, 3277, -4095);
	  COL_VERTEX(-4607, 3174, -4095);
	  COL_VERTEX(-4607, 3072, -4351);
	  COL_VERTEX(-4607, 3277, -3839);
	  COL_VERTEX(-3827, 3123, -6450);
	  COL_VERTEX(-3827, 3123, -6655);
	  COL_VERTEX(-4134, 3430, -6450);
	  COL_VERTEX(-4339, 3686, -6450);
	  COL_VERTEX(-4544, 3482, -6450);
	  COL_VERTEX(-4544, 3123, -6450);
	  COL_VERTEX(-4339, 3123, -6450);
	  COL_VERTEX(-4339, 3072, -6450);
	  COL_VERTEX(-4339, 3072, -6655);
	  COL_VERTEX(-4032, 3072, -6450);
	  COL_VERTEX(-4646, 3123, -6655);
	  COL_VERTEX(-4646, 3072, -6655);
	  COL_VERTEX(-4646, 3123, -6348);
	  COL_VERTEX(-3725, 3123, -6348);
	  COL_VERTEX(-3725, 3072, -6348);
	  COL_VERTEX(-3725, 3123, -6655);
	  COL_VERTEX(-4109, 5837, -6501);
	  COL_VERTEX(-4262, 5837, -6501);
	  COL_VERTEX(-4109, 3686, -6501);
	  COL_VERTEX(-4109, 3686, -6655);
	  COL_VERTEX(3396, -1716, 1831);
	  COL_VERTEX(3393, -1946, 1831);
	  COL_VERTEX(4212, -1946, 1831);
	  COL_VERTEX(4212, -1720, 2241);
	  COL_VERTEX(3396, -1716, 2241);
	  COL_VERTEX(921, -1321, 3364);
	  COL_VERTEX(307, -1116, 2135);
	  COL_VERTEX(921, -1116, 2135);
	  COL_VERTEX(307, -1116, 3354);
	  COL_VERTEX(921, -1116, 3354);
	  COL_VERTEX(307, -1167, 3979);
	  COL_VERTEX(921, -1167, 3364);
	  COL_VERTEX(512, -1116, 3774);
	  COL_VERTEX(716, -1116, 3774);
	  COL_VERTEX(512, -1116, 3569);
	  COL_VERTEX(716, -1147, 3569);
	  COL_VERTEX(3656, 4245, -2448);
	  COL_VERTEX(3452, 4276, -2448);
	  COL_VERTEX(3452, 4276, -2243);
	  COL_VERTEX(3656, 4276, -2243);
	  COL_VERTEX(3247, 4225, -2038);
	  COL_VERTEX(3861, 4430, -2653);
	  COL_VERTEX(3861, 4225, -2653);
	  COL_VERTEX(-7173, 3942, -2387);
	  COL_VERTEX(-6821, 3942, -2890);
	  COL_VERTEX(-5940, 3942, -2273);
	  COL_VERTEX(-6292, 3942, -1770);
	  COL_VERTEX(-7435, 4352, -4426);
	  COL_VERTEX(-8049, 4352, -4426);
	  COL_VERTEX(-7435, 4352, -3351);
	  COL_VERTEX(-8049, 4352, -3351);
	  COL_VERTEX(2357, 3083, -1773);
	  COL_VERTEX(2357, 3083, -852);
	  COL_VERTEX(2204, 3083, -852);
	  COL_VERTEX(2613, 3083, -954);
	  COL_VERTEX(3486, 2314, 285);
	  COL_VERTEX(3486, 2468, 285);
	  COL_VERTEX(3332, 2468, 285);
	  COL_VERTEX(3844, 2519, 285);
	  COL_VERTEX(3998, 2314, 285);
	  COL_VERTEX(3998, 2519, 285);
	  COL_VERTEX(2820, 2570, 285);
	  COL_VERTEX(2974, 2314, 285);
	  COL_VERTEX(2974, 2570, 285);
	  COL_VERTEX(1921, 2509, 279);
	  COL_VERTEX(1921, 2612, -130);
	  COL_VERTEX(2075, 2509, 279);
	  COL_VERTEX(2075, 2612, 279);
	  COL_VERTEX(1998, 2714, 279);
	  COL_VERTEX(-1040, 922, 133);
	  COL_VERTEX(-630, 922, 133);
	  COL_VERTEX(-1040, 1690, -480);
	  COL_VERTEX(-1626, 1843, -494);
	  COL_VERTEX(-2036, 1843, -494);
	  COL_VERTEX(-2036, 1843, 119);
	  COL_VERTEX(7602, -2243, 7179);
	  COL_VERTEX(4838, -2243, 7179);
	  COL_VERTEX(4838, -2243, 5950);
	  COL_VERTEX(7602, -2243, 5950);
	  COL_VERTEX(4838, -1935, 6871);
	  COL_VERTEX(3609, -1935, 6257);
	  COL_VERTEX(3609, -1935, 6871);
	  COL_VERTEX(3303, -937, 6257);
	  COL_VERTEX(3303, -732, 6257);
	  COL_VERTEX(3712, -732, 6052);
	  COL_VERTEX(3303, -732, 6871);
	  COL_VERTEX(4121, -732, 6257);
	  COL_VERTEX(3712, -937, 7076);
	  COL_VERTEX(4121, -937, 6871);
	  COL_VERTEX(4940, -732, 6257);
	  COL_VERTEX(4940, -732, 6871);
	  COL_VERTEX(3250, -2089, 5591);
	  COL_VERTEX(3353, -2089, 5591);
	  COL_VERTEX(3353, -1731, 5591);
	  COL_VERTEX(3250, -1731, 5489);
	  COL_VERTEX(6230, 3819, 3584);
	  COL_VERTEX(6230, 3819, 4524);
	  COL_VERTEX(5565, 3675, 5189);
	  COL_VERTEX(4624, 3675, 5189);
	  COL_VERTEX(5330, 2999, 3486);
	  COL_VERTEX(5662, 2999, 3819);
	  COL_VERTEX(3959, 3675, 4524);
	  COL_VERTEX(3959, 3819, 4524);
	  COL_VERTEX(3959, 3819, 3584);
	  COL_VERTEX(4527, 2999, 4289);
	  COL_VERTEX(4860, 2999, 3486);
	  COL_VERTEX(4735, -1935, 5950);
	  COL_VERTEX(4735, -1935, 6257);
	  COL_VERTEX(4838, -2038, 6257);
	  COL_VERTEX(4838, -2038, 5950);
	  COL_VERTEX(3396, -1065, -3864);
	  COL_VERTEX(2475, -1065, -3864);
	  COL_VERTEX(3396, -1014, -3454);
	  COL_VERTEX(3396, -1065, -3454);
	  COL_VERTEX(2475, -1014, -3454);
	  COL_VERTEX(3806, -655, -3454);
	  COL_VERTEX(3806, -655, -3864);
	  COL_VERTEX(3806, -604, -3454);
	  COL_VERTEX(2987, -604, -3454);
	  COL_VERTEX(3089, 163, 494);
	  COL_VERTEX(2424, -399, 494);
	  COL_VERTEX(4113, 982, 494);
	  COL_VERTEX(4113, 1033, 494);
	  COL_VERTEX(2782, 1033, 494);
	  COL_VERTEX(3089, 1033, 85);
	  COL_VERTEX(2782, 1033, -938);
	  COL_VERTEX(3089, 1033, -938);
	  COL_VERTEX(3538, -1116, -343);
	  COL_VERTEX(3538, -1116, 270);
	  COL_VERTEX(2719, -1116, -343);
	  COL_VERTEX(2719, -1116, 270);
	  COL_VERTEX(307, -1116, -3882);
	  COL_VERTEX(307, -1116, -2243);
	  COL_VERTEX(921, -1116, -2243);
	  COL_VERTEX(921, -1116, -3882);
	  COL_VERTEX(4113, -195, -3454);
	  COL_VERTEX(4113, -41, -3454);
	  COL_VERTEX(3806, -41, -3454);
	  COL_VERTEX(3089, 112, -3454);
	  COL_VERTEX(3243, -41, -3454);
	  COL_VERTEX(3243, 112, -3454);
	  COL_VERTEX(3601, 982, -1860);
	  COL_VERTEX(4011, 880, -1450);
	  COL_VERTEX(4216, 777, -1450);
	  COL_VERTEX(4216, 880, -1450);
	  COL_VERTEX(3601, 931, -1450);
	  COL_VERTEX(3601, 982, -1450);
	  COL_VERTEX(3089, 982, -1450);
	  COL_VERTEX(3089, 982, -1860);
	  COL_VERTEX(3089, 1033, -1450);
	  COL_VERTEX(2065, 1033, -1450);
	  COL_VERTEX(-4197, 3123, -2405);
	  COL_VERTEX(-6860, 3123, -2405);
	  COL_VERTEX(-6860, 3123, -2713);
	  COL_VERTEX(-4197, 3123, -2713);
	  COL_VERTEX(975, 2878, -954);
	  COL_VERTEX(-8191, -8191, 8192);
	  COL_VERTEX(8192, -8191, 8192);
	  COL_VERTEX(8192, -8191, -8191);
	  COL_VERTEX(-8191, -8191, -8191);
	  COL_VERTEX(-6063, 1033, -343);
	  COL_VERTEX(-5756, 1033, -343);
	  COL_VERTEX(-6063, -502, -343);
	  COL_VERTEX(-2661, 3072, -6655);
	  COL_VERTEX(3393, -1833, 1831);
	  COL_VERTEX(921, -1116, 3979);
	  COL_VERTEX(3861, 4276, -2653);
	  COL_VERTEX(3861, 4276, -2038);
	  COL_VERTEX(3247, 4276, -2653);
	  COL_VERTEX(-6472, 1443, -343);
	  COL_VERTEX(-3605, -297, -445);
	  COL_VERTEX(-5733, 3072, -3583);
	  COL_VERTEX(-2661, 3072, -3583);
	  COL_VERTEX(-5733, 3072, -6655);
	  COL_VERTEX(4212, -1833, 2241);
	  COL_VERTEX(4212, -1833, 1831);
	  COL_VERTEX(3393, -1833, 2241);
	  COL_VERTEX(307, -1116, 3979);
	  COL_VERTEX(3247, 4276, -2038);
	  COL_VERTEX(1180, 3083, -954);
	  COL_VERTEX(-6063, 1648, -343);
	  COL_TRI_INIT(SURFACE_DEFAULT, 1324);
	  COL_TRI(3, 9, 8);
	  COL_TRI(0, 1, 2);
	  COL_TRI(3, 1, 4);
	  COL_TRI(1, 0, 4);
	  COL_TRI(0, 2, 5);
	  COL_TRI(3, 6, 7);
	  COL_TRI(3, 8, 6);
	  COL_TRI(48, 49, 50);
	  COL_TRI(48, 51, 49);
	  COL_TRI(64, 65, 66);
	  COL_TRI(64, 67, 65);
	  COL_TRI(67, 68, 69);
	  COL_TRI(67, 64, 68);
	  COL_TRI(65, 70, 66);
	  COL_TRI(71, 72, 73);
	  COL_TRI(73, 74, 75);
	  COL_TRI(75, 71, 73);
	  COL_TRI(77, 111, 112);
	  COL_TRI(77, 76, 111);
	  COL_TRI(73, 76, 77);
	  COL_TRI(73, 77, 78);
	  COL_TRI(79, 624, 625);
	  COL_TRI(79, 625, 626);
	  COL_TRI(80, 626, 147);
	  COL_TRI(81, 146, 626);
	  COL_TRI(85, 86, 84);
	  COL_TRI(81, 627, 146);
	  COL_TRI(82, 96, 627);
	  COL_TRI(83, 82, 627);
	  COL_TRI(83, 627, 93);
	  COL_TRI(84, 629, 85);
	  COL_TRI(85, 629, 630);
	  COL_TRI(85, 630, 87);
	  COL_TRI(85, 87, 86);
	  COL_TRI(86, 631, 84);
	  COL_TRI(87, 632, 86);
	  COL_TRI(86, 632, 631);
	  COL_TRI(84, 631, 629);
	  COL_TRI(87, 630, 632);
	  COL_TRI(88, 636, 89);
	  COL_TRI(89, 90, 91);
	  COL_TRI(89, 91, 88);
	  COL_TRI(89, 636, 637);
	  COL_TRI(89, 637, 90);
	  COL_TRI(93, 5, 83);
	  COL_TRI(90, 638, 91);
	  COL_TRI(91, 639, 88);
	  COL_TRI(91, 638, 639);
	  COL_TRI(88, 639, 636);
	  COL_TRI(90, 637, 638);
	  COL_TRI(83, 10, 13);
	  COL_TRI(92, 83, 99);
	  COL_TRI(83, 92, 10);
	  COL_TRI(93, 95, 633);
	  COL_TRI(93, 633, 642);
	  COL_TRI(93, 81, 5);
	  COL_TRI(94, 82, 97);
	  COL_TRI(13, 97, 82);
	  COL_TRI(83, 13, 82);
	  COL_TRI(13, 12, 640);
	  COL_TRI(13, 640, 97);
	  COL_TRI(95, 110, 109);
	  COL_TRI(95, 109, 633);
	  COL_TRI(96, 82, 94);
	  COL_TRI(96, 94, 8);
	  COL_TRI(96, 8, 635);
	  COL_TRI(96, 634, 627);
	  COL_TRI(96, 635, 634);
	  COL_TRI(97, 643, 101);
	  COL_TRI(97, 101, 94);
	  COL_TRI(92, 644, 11);
	  COL_TRI(92, 11, 10);
	  COL_TRI(98, 644, 92);
	  COL_TRI(92, 99, 641);
	  COL_TRI(92, 641, 98);
	  COL_TRI(99, 100, 641);
	  COL_TRI(11, 644, 98);
	  COL_TRI(11, 98, 645);
	  COL_TRI(100, 645, 98);
	  COL_TRI(100, 98, 641);
	  COL_TRI(99, 628, 100);
	  COL_TRI(97, 640, 643);
	  COL_TRI(101, 102, 94);
	  COL_TRI(102, 100, 628);
	  COL_TRI(94, 102, 628);
	  COL_TRI(9, 635, 8);
	  COL_TRI(9, 634, 635);
	  COL_TRI(103, 624, 646);
	  COL_TRI(103, 625, 624);
	  COL_TRI(104, 646, 647);
	  COL_TRI(104, 103, 646);
	  COL_TRI(105, 107, 648);
	  COL_TRI(105, 648, 649);
	  COL_TRI(106, 107, 105);
	  COL_TRI(107, 650, 648);
	  COL_TRI(107, 651, 650);
	  COL_TRI(106, 651, 107);
	  COL_TRI(112, 111, 71);
	  COL_TRI(108, 651, 106);
	  COL_TRI(108, 650, 651);
	  COL_TRI(71, 109, 110);
	  COL_TRI(109, 652, 633);
	  COL_TRI(71, 110, 72);
	  COL_TRI(71, 111, 76);
	  COL_TRI(116, 74, 656);
	  COL_TRI(71, 76, 653);
	  COL_TRI(112, 71, 654);
	  COL_TRI(75, 113, 71);
	  COL_TRI(114, 113, 115);
	  COL_TRI(114, 115, 655);
	  COL_TRI(75, 115, 113);
	  COL_TRI(109, 113, 652);
	  COL_TRI(116, 75, 74);
	  COL_TRI(117, 120, 118);
	  COL_TRI(117, 118, 657);
	  COL_TRI(118, 123, 119);
	  COL_TRI(119, 658, 118);
	  COL_TRI(120, 659, 660);
	  COL_TRI(120, 661, 659);
	  COL_TRI(121, 662, 122);
	  COL_TRI(121, 658, 662);
	  COL_TRI(119, 662, 658);
	  COL_TRI(122, 662, 119);
	  COL_TRI(127, 126, 128);
	  COL_TRI(122, 119, 124);
	  COL_TRI(123, 663, 119);
	  COL_TRI(124, 119, 663);
	  COL_TRI(124, 663, 664);
	  COL_TRI(125, 665, 127);
	  COL_TRI(125, 666, 665);
	  COL_TRI(126, 665, 666);
	  COL_TRI(127, 665, 126);
	  COL_TRI(131, 661, 669);
	  COL_TRI(126, 666, 667);
	  COL_TRI(128, 126, 667);
	  COL_TRI(128, 667, 668);
	  COL_TRI(129, 123, 660);
	  COL_TRI(129, 660, 130);
	  COL_TRI(130, 660, 659);
	  COL_TRI(130, 659, 131);
	  COL_TRI(131, 659, 661);
	  COL_TRI(132, 670, 671);
	  COL_TRI(132, 671, 672);
	  COL_TRI(133, 673, 671);
	  COL_TRI(133, 671, 670);
	  COL_TRI(133, 670, 136);
	  COL_TRI(134, 673, 674);
	  COL_TRI(134, 674, 135);
	  COL_TRI(133, 674, 673);
	  COL_TRI(135, 674, 133);
	  COL_TRI(135, 133, 137);
	  COL_TRI(136, 675, 133);
	  COL_TRI(137, 133, 675);
	  COL_TRI(137, 675, 138);
	  COL_TRI(138, 675, 136);
	  COL_TRI(140, 682, 680);
	  COL_TRI(138, 136, 676);
	  COL_TRI(139, 677, 678);
	  COL_TRI(139, 678, 679);
	  COL_TRI(140, 680, 678);
	  COL_TRI(140, 678, 677);
	  COL_TRI(140, 677, 681);
	  COL_TRI(141, 680, 682);
	  COL_TRI(141, 682, 683);
	  COL_TRI(140, 684, 682);
	  COL_TRI(142, 685, 143);
	  COL_TRI(142, 684, 685);
	  COL_TRI(140, 685, 684);
	  COL_TRI(143, 685, 140);
	  COL_TRI(143, 140, 144);
	  COL_TRI(144, 140, 681);
	  COL_TRI(144, 681, 686);
	  COL_TRI(145, 643, 640);
	  COL_TRI(145, 640, 12);
	  COL_TRI(147, 9, 3);
	  COL_TRI(145, 12, 11);
	  COL_TRI(101, 643, 145);
	  COL_TRI(101, 145, 102);
	  COL_TRI(11, 645, 145);
	  COL_TRI(102, 145, 645);
	  COL_TRI(102, 645, 100);
	  COL_TRI(146, 634, 9);
	  COL_TRI(146, 9, 147);
	  COL_TRI(147, 3, 687);
	  COL_TRI(148, 687, 3);
	  COL_TRI(148, 3, 4);
	  COL_TRI(149, 688, 689);
	  COL_TRI(149, 690, 688);
	  COL_TRI(150, 688, 690);
	  COL_TRI(150, 691, 688);
	  COL_TRI(150, 690, 692);
	  COL_TRI(151, 691, 693);
	  COL_TRI(151, 693, 152);
	  COL_TRI(152, 693, 150);
	  COL_TRI(150, 693, 691);
	  COL_TRI(156, 700, 701);
	  COL_TRI(152, 150, 694);
	  COL_TRI(150, 692, 695);
	  COL_TRI(153, 696, 697);
	  COL_TRI(153, 697, 154);
	  COL_TRI(154, 697, 155);
	  COL_TRI(155, 697, 696);
	  COL_TRI(154, 155, 698);
	  COL_TRI(155, 696, 699);
	  COL_TRI(156, 701, 702);
	  COL_TRI(0, 701, 700);
	  COL_TRI(0, 700, 4);
	  COL_TRI(157, 703, 704);
	  COL_TRI(157, 159, 703);
	  COL_TRI(158, 157, 704);
	  COL_TRI(159, 705, 703);
	  COL_TRI(159, 706, 705);
	  COL_TRI(162, 163, 708);
	  COL_TRI(158, 704, 162);
	  COL_TRI(160, 705, 706);
	  COL_TRI(160, 706, 707);
	  COL_TRI(161, 160, 707);
	  COL_TRI(161, 707, 164);
	  COL_TRI(162, 708, 158);
	  COL_TRI(163, 709, 710);
	  COL_TRI(163, 710, 708);
	  COL_TRI(164, 709, 161);
	  COL_TRI(164, 710, 709);
	  COL_TRI(80, 147, 628);
	  COL_TRI(165, 711, 712);
	  COL_TRI(165, 166, 711);
	  COL_TRI(165, 712, 171);
	  COL_TRI(166, 714, 167);
	  COL_TRI(166, 167, 711);
	  COL_TRI(167, 714, 716);
	  COL_TRI(168, 167, 716);
	  COL_TRI(169, 717, 168);
	  COL_TRI(169, 168, 716);
	  COL_TRI(169, 718, 719);
	  COL_TRI(169, 719, 717);
	  COL_TRI(174, 175, 173);
	  COL_TRI(170, 718, 715);
	  COL_TRI(170, 719, 718);
	  COL_TRI(171, 170, 715);
	  COL_TRI(171, 715, 713);
	  COL_TRI(165, 171, 713);
	  COL_TRI(172, 720, 173);
	  COL_TRI(173, 205, 172);
	  COL_TRI(173, 175, 205);
	  COL_TRI(173, 721, 174);
	  COL_TRI(173, 720, 721);
	  COL_TRI(175, 722, 205);
	  COL_TRI(175, 723, 722);
	  COL_TRI(174, 723, 175);
	  COL_TRI(172, 724, 720);
	  COL_TRI(176, 725, 179);
	  COL_TRI(177, 725, 176);
	  COL_TRI(176, 179, 726);
	  COL_TRI(178, 176, 726);
	  COL_TRI(178, 177, 176);
	  COL_TRI(179, 178, 726);
	  COL_TRI(177, 727, 725);
	  COL_TRI(179, 728, 178);
	  COL_TRI(178, 727, 177);
	  COL_TRI(178, 728, 727);
	  COL_TRI(180, 729, 183);
	  COL_TRI(180, 183, 730);
	  COL_TRI(181, 729, 180);
	  COL_TRI(182, 180, 730);
	  COL_TRI(181, 180, 182);
	  COL_TRI(183, 729, 181);
	  COL_TRI(184, 730, 183);
	  COL_TRI(185, 183, 181);
	  COL_TRI(184, 183, 185);
	  COL_TRI(182, 730, 184);
	  COL_TRI(189, 738, 739);
	  COL_TRI(186, 731, 187);
	  COL_TRI(186, 187, 732);
	  COL_TRI(187, 731, 733);
	  COL_TRI(187, 733, 734);
	  COL_TRI(186, 735, 733);
	  COL_TRI(186, 733, 731);
	  COL_TRI(188, 186, 732);
	  COL_TRI(188, 736, 186);
	  COL_TRI(186, 736, 737);
	  COL_TRI(186, 737, 735);
	  COL_TRI(189, 739, 740);
	  COL_TRI(189, 740, 741);
	  COL_TRI(190, 740, 739);
	  COL_TRI(191, 739, 738);
	  COL_TRI(190, 739, 191);
	  COL_TRI(189, 742, 738);
	  COL_TRI(192, 738, 742);
	  COL_TRI(191, 738, 192);
	  COL_TRI(192, 742, 743);
	  COL_TRI(192, 190, 191);
	  COL_TRI(192, 199, 198);
	  COL_TRI(192, 198, 190);
	  COL_TRI(192, 743, 199);
	  COL_TRI(193, 188, 732);
	  COL_TRI(193, 732, 187);
	  COL_TRI(193, 187, 734);
	  COL_TRI(193, 734, 195);
	  COL_TRI(194, 196, 195);
	  COL_TRI(195, 196, 744);
	  COL_TRI(195, 744, 193);
	  COL_TRI(196, 204, 744);
	  COL_TRI(193, 744, 197);
	  COL_TRI(193, 197, 194);
	  COL_TRI(197, 745, 196);
	  COL_TRI(196, 745, 204);
	  COL_TRI(194, 197, 196);
	  COL_TRI(204, 745, 746);
	  COL_TRI(197, 746, 745);
	  COL_TRI(198, 747, 201);
	  COL_TRI(199, 200, 198);
	  COL_TRI(198, 200, 747);
	  COL_TRI(200, 203, 747);
	  COL_TRI(201, 747, 202);
	  COL_TRI(201, 202, 199);
	  COL_TRI(202, 748, 200);
	  COL_TRI(200, 748, 203);
	  COL_TRI(199, 202, 200);
	  COL_TRI(202, 749, 748);
	  COL_TRI(203, 748, 749);
	  COL_TRI(205, 722, 750);
	  COL_TRI(205, 724, 172);
	  COL_TRI(205, 751, 724);
	  COL_TRI(205, 750, 751);
	  COL_TRI(206, 752, 753);
	  COL_TRI(206, 753, 233);
	  COL_TRI(206, 233, 754);
	  COL_TRI(207, 755, 208);
	  COL_TRI(207, 756, 755);
	  COL_TRI(208, 752, 206);
	  COL_TRI(208, 755, 752);
	  COL_TRI(206, 754, 208);
	  COL_TRI(209, 223, 220);
	  COL_TRI(209, 221, 223);
	  COL_TRI(210, 214, 211);
	  COL_TRI(210, 213, 214);
	  COL_TRI(211, 757, 210);
	  COL_TRI(210, 758, 213);
	  COL_TRI(212, 210, 757);
	  COL_TRI(212, 759, 210);
	  COL_TRI(210, 759, 760);
	  COL_TRI(210, 760, 758);
	  COL_TRI(213, 758, 760);
	  COL_TRI(213, 760, 761);
	  COL_TRI(214, 213, 761);
	  COL_TRI(214, 762, 763);
	  COL_TRI(214, 761, 762);
	  COL_TRI(214, 763, 211);
	  COL_TRI(211, 764, 757);
	  COL_TRI(211, 215, 764);
	  COL_TRI(211, 765, 215);
	  COL_TRI(211, 763, 765);
	  COL_TRI(215, 216, 764);
	  COL_TRI(215, 765, 216);
	  COL_TRI(216, 757, 764);
	  COL_TRI(216, 212, 757);
	  COL_TRI(217, 766, 219);
	  COL_TRI(217, 219, 222);
	  COL_TRI(218, 766, 217);
	  COL_TRI(218, 217, 222);
	  COL_TRI(218, 767, 766);
	  COL_TRI(219, 766, 767);
	  COL_TRI(219, 220, 223);
	  COL_TRI(209, 220, 767);
	  COL_TRI(220, 219, 767);
	  COL_TRI(219, 223, 222);
	  COL_TRI(221, 209, 767);
	  COL_TRI(221, 767, 218);
	  COL_TRI(222, 223, 218);
	  COL_TRI(223, 221, 218);
	  COL_TRI(224, 768, 227);
	  COL_TRI(225, 224, 272);
	  COL_TRI(225, 768, 224);
	  COL_TRI(226, 224, 227);
	  COL_TRI(227, 770, 228);
	  COL_TRI(226, 227, 228);
	  COL_TRI(228, 771, 226);
	  COL_TRI(226, 769, 224);
	  COL_TRI(229, 248, 772);
	  COL_TRI(229, 231, 248);
	  COL_TRI(230, 773, 229);
	  COL_TRI(230, 229, 772);
	  COL_TRI(229, 773, 774);
	  COL_TRI(229, 774, 231);
	  COL_TRI(235, 778, 777);
	  COL_TRI(231, 247, 248);
	  COL_TRI(231, 774, 247);
	  COL_TRI(232, 230, 772);
	  COL_TRI(232, 775, 230);
	  COL_TRI(233, 776, 754);
	  COL_TRI(234, 235, 777);
	  COL_TRI(236, 235, 234);
	  COL_TRI(235, 779, 780);
	  COL_TRI(235, 780, 778);
	  COL_TRI(237, 780, 779);
	  COL_TRI(237, 779, 236);
	  COL_TRI(236, 779, 235);
	  COL_TRI(238, 781, 782);
	  COL_TRI(238, 783, 781);
	  COL_TRI(239, 784, 242);
	  COL_TRI(239, 242, 785);
	  COL_TRI(240, 784, 239);
	  COL_TRI(242, 784, 240);
	  COL_TRI(241, 239, 785);
	  COL_TRI(240, 239, 241);
	  COL_TRI(243, 244, 786);
	  COL_TRI(244, 246, 786);
	  COL_TRI(244, 787, 246);
	  COL_TRI(245, 787, 244);
	  COL_TRI(245, 244, 243);
	  COL_TRI(246, 787, 245);
	  COL_TRI(233, 753, 776);
	  COL_TRI(247, 775, 776);
	  COL_TRI(247, 776, 756);
	  COL_TRI(248, 247, 756);
	  COL_TRI(248, 756, 207);
	  COL_TRI(232, 754, 776);
	  COL_TRI(232, 776, 775);
	  COL_TRI(252, 228, 271);
	  COL_TRI(249, 20, 788);
	  COL_TRI(249, 21, 20);
	  COL_TRI(250, 225, 272);
	  COL_TRI(251, 226, 273);
	  COL_TRI(251, 769, 226);
	  COL_TRI(252, 771, 228);
	  COL_TRI(258, 793, 794);
	  COL_TRI(253, 255, 254);
	  COL_TRI(253, 789, 254);
	  COL_TRI(254, 790, 255);
	  COL_TRI(254, 789, 790);
	  COL_TRI(254, 255, 256);
	  COL_TRI(254, 256, 253);
	  COL_TRI(253, 256, 255);
	  COL_TRI(255, 790, 791);
	  COL_TRI(255, 791, 256);
	  COL_TRI(256, 792, 253);
	  COL_TRI(256, 791, 792);
	  COL_TRI(253, 792, 789);
	  COL_TRI(257, 793, 258);
	  COL_TRI(258, 794, 259);
	  COL_TRI(261, 800, 262);
	  COL_TRI(257, 795, 793);
	  COL_TRI(259, 794, 796);
	  COL_TRI(259, 796, 260);
	  COL_TRI(260, 797, 798);
	  COL_TRI(260, 796, 797);
	  COL_TRI(261, 799, 800);
	  COL_TRI(262, 800, 801);
	  COL_TRI(261, 262, 263);
	  COL_TRI(262, 801, 263);
	  COL_TRI(263, 802, 803);
	  COL_TRI(261, 263, 803);
	  COL_TRI(263, 801, 802);
	  COL_TRI(264, 804, 805);
	  COL_TRI(264, 806, 804);
	  COL_TRI(264, 805, 266);
	  COL_TRI(265, 806, 264);
	  COL_TRI(264, 269, 811);
	  COL_TRI(265, 807, 806);
	  COL_TRI(266, 805, 808);
	  COL_TRI(266, 809, 265);
	  COL_TRI(266, 808, 809);
	  COL_TRI(265, 809, 807);
	  COL_TRI(264, 810, 265);
	  COL_TRI(264, 268, 810);
	  COL_TRI(264, 811, 268);
	  COL_TRI(270, 795, 257);
	  COL_TRI(267, 268, 811);
	  COL_TRI(267, 812, 268);
	  COL_TRI(268, 813, 810);
	  COL_TRI(268, 812, 813);
	  COL_TRI(269, 267, 811);
	  COL_TRI(269, 814, 267);
	  COL_TRI(267, 813, 812);
	  COL_TRI(267, 815, 813);
	  COL_TRI(267, 816, 815);
	  COL_TRI(267, 814, 816);
	  COL_TRI(270, 817, 795);
	  COL_TRI(250, 273, 271);
	  COL_TRI(250, 272, 273);
	  COL_TRI(271, 274, 250);
	  COL_TRI(272, 251, 273);
	  COL_TRI(273, 252, 271);
	  COL_TRI(274, 227, 250);
	  COL_TRI(274, 770, 227);
	  COL_TRI(279, 822, 823);
	  COL_TRI(275, 278, 276);
	  COL_TRI(275, 277, 278);
	  COL_TRI(275, 818, 277);
	  COL_TRI(275, 819, 818);
	  COL_TRI(276, 819, 275);
	  COL_TRI(276, 820, 819);
	  COL_TRI(277, 818, 821);
	  COL_TRI(277, 821, 278);
	  COL_TRI(278, 820, 276);
	  COL_TRI(278, 821, 820);
	  COL_TRI(279, 281, 282);
	  COL_TRI(279, 282, 280);
	  COL_TRI(280, 822, 279);
	  COL_TRI(279, 823, 281);
	  COL_TRI(281, 823, 824);
	  COL_TRI(281, 824, 282);
	  COL_TRI(282, 283, 280);
	  COL_TRI(282, 824, 283);
	  COL_TRI(280, 283, 822);
	  COL_TRI(283, 823, 822);
	  COL_TRI(283, 824, 823);
	  COL_TRI(284, 285, 825);
	  COL_TRI(285, 826, 825);
	  COL_TRI(285, 286, 826);
	  COL_TRI(286, 827, 828);
	  COL_TRI(286, 828, 826);
	  COL_TRI(289, 290, 830);
	  COL_TRI(284, 825, 289);
	  COL_TRI(287, 288, 829);
	  COL_TRI(288, 827, 829);
	  COL_TRI(288, 828, 827);
	  COL_TRI(287, 829, 291);
	  COL_TRI(289, 830, 284);
	  COL_TRI(293, 836, 835);
	  COL_TRI(290, 831, 830);
	  COL_TRI(290, 832, 831);
	  COL_TRI(291, 831, 832);
	  COL_TRI(291, 832, 287);
	  COL_TRI(292, 833, 295);
	  COL_TRI(292, 295, 834);
	  COL_TRI(292, 835, 833);
	  COL_TRI(292, 293, 835);
	  COL_TRI(300, 842, 298);
	  COL_TRI(294, 838, 839);
	  COL_TRI(294, 839, 840);
	  COL_TRI(294, 840, 841);
	  COL_TRI(295, 296, 837);
	  COL_TRI(296, 839, 838);
	  COL_TRI(296, 838, 837);
	  COL_TRI(295, 837, 834);
	  COL_TRI(297, 842, 300);
	  COL_TRI(297, 300, 843);
	  COL_TRI(298, 297, 299);
	  COL_TRI(298, 842, 297);
	  COL_TRI(299, 297, 843);
	  COL_TRI(305, 846, 845);
	  COL_TRI(301, 843, 300);
	  COL_TRI(302, 300, 298);
	  COL_TRI(301, 300, 302);
	  COL_TRI(299, 843, 301);
	  COL_TRI(303, 306, 304);
	  COL_TRI(303, 305, 306);
	  COL_TRI(304, 844, 303);
	  COL_TRI(305, 845, 306);
	  COL_TRI(301, 847, 299);
	  COL_TRI(306, 307, 304);
	  COL_TRI(306, 845, 307);
	  COL_TRI(304, 307, 844);
	  COL_TRI(307, 846, 844);
	  COL_TRI(307, 845, 846);
	  COL_TRI(298, 308, 302);
	  COL_TRI(308, 301, 302);
	  COL_TRI(308, 847, 301);
	  COL_TRI(298, 847, 308);
	  COL_TRI(298, 299, 847);
	  COL_TRI(38, 19, 27);
	  COL_TRI(24, 309, 36);
	  COL_TRI(36, 309, 848);
	  COL_TRI(36, 848, 35);
	  COL_TRI(309, 849, 848);
	  COL_TRI(35, 848, 849);
	  COL_TRI(35, 849, 34);
	  COL_TRI(309, 850, 849);
	  COL_TRI(24, 850, 309);
	  COL_TRI(34, 849, 850);
	  COL_TRI(34, 850, 24);
	  COL_TRI(27, 18, 26);
	  COL_TRI(27, 19, 18);
	  COL_TRI(18, 16, 29);
	  COL_TRI(26, 18, 29);
	  COL_TRI(38, 17, 19);
	  COL_TRI(29, 16, 15);
	  COL_TRI(29, 15, 33);
	  COL_TRI(40, 17, 38);
	  COL_TRI(40, 14, 17);
	  COL_TRI(32, 14, 40);
	  COL_TRI(33, 15, 44);
	  COL_TRI(44, 249, 788);
	  COL_TRI(44, 788, 32);
	  COL_TRI(15, 249, 44);
	  COL_TRI(32, 788, 14);
	  COL_TRI(41, 310, 30);
	  COL_TRI(310, 311, 30);
	  COL_TRI(30, 311, 31);
	  COL_TRI(311, 313, 31);
	  COL_TRI(311, 310, 312);
	  COL_TRI(312, 313, 311);
	  COL_TRI(31, 313, 47);
	  COL_TRI(45, 313, 321);
	  COL_TRI(313, 312, 321);
	  COL_TRI(314, 318, 39);
	  COL_TRI(315, 318, 314);
	  COL_TRI(314, 39, 42);
	  COL_TRI(316, 314, 42);
	  COL_TRI(321, 312, 316);
	  COL_TRI(317, 851, 318);
	  COL_TRI(23, 318, 851);
	  COL_TRI(315, 317, 318);
	  COL_TRI(318, 23, 39);
	  COL_TRI(23, 851, 22);
	  COL_TRI(317, 852, 851);
	  COL_TRI(37, 852, 319);
	  COL_TRI(37, 319, 25);
	  COL_TRI(319, 853, 28);
	  COL_TRI(319, 28, 25);
	  COL_TRI(22, 851, 852);
	  COL_TRI(22, 852, 37);
	  COL_TRI(43, 316, 42);
	  COL_TRI(41, 28, 853);
	  COL_TRI(41, 853, 310);
	  COL_TRI(312, 320, 316);
	  COL_TRI(320, 315, 316);
	  COL_TRI(315, 314, 316);
	  COL_TRI(43, 321, 316);
	  COL_TRI(322, 370, 856);
	  COL_TRI(45, 321, 43);
	  COL_TRI(46, 313, 45);
	  COL_TRI(46, 47, 313);
	  COL_TRI(322, 362, 324);
	  COL_TRI(322, 854, 362);
	  COL_TRI(322, 327, 855);
	  COL_TRI(322, 855, 854);
	  COL_TRI(323, 370, 322);
	  COL_TRI(323, 860, 328);
	  COL_TRI(324, 362, 857);
	  COL_TRI(324, 857, 326);
	  COL_TRI(325, 863, 324);
	  COL_TRI(326, 325, 324);
	  COL_TRI(326, 857, 858);
	  COL_TRI(327, 326, 858);
	  COL_TRI(327, 858, 859);
	  COL_TRI(327, 859, 855);
	  COL_TRI(328, 860, 864);
	  COL_TRI(329, 328, 864);
	  COL_TRI(323, 861, 860);
	  COL_TRI(329, 864, 865);
	  COL_TRI(330, 329, 866);
	  COL_TRI(329, 865, 866);
	  COL_TRI(330, 371, 329);
	  COL_TRI(330, 866, 867);
	  COL_TRI(330, 868, 323);
	  COL_TRI(330, 869, 868);
	  COL_TRI(330, 870, 371);
	  COL_TRI(331, 870, 330);
	  COL_TRI(328, 332, 323);
	  COL_TRI(332, 862, 323);
	  COL_TRI(323, 862, 370);
	  COL_TRI(333, 335, 334);
	  COL_TRI(333, 872, 335);
	  COL_TRI(334, 335, 331);
	  COL_TRI(335, 336, 331);
	  COL_TRI(336, 337, 331);
	  COL_TRI(337, 338, 331);
	  COL_TRI(338, 871, 331);
	  COL_TRI(331, 871, 870);
	  COL_TRI(370, 862, 332);
	  COL_TRI(342, 873, 341);
	  COL_TRI(339, 340, 333);
	  COL_TRI(340, 872, 333);
	  COL_TRI(339, 333, 338);
	  COL_TRI(334, 374, 333);
	  COL_TRI(337, 339, 338);
	  COL_TRI(338, 399, 871);
	  COL_TRI(341, 345, 342);
	  COL_TRI(341, 343, 345);
	  COL_TRI(343, 344, 345);
	  COL_TRI(344, 372, 345);
	  COL_TRI(345, 401, 342);
	  COL_TRI(342, 874, 873);
	  COL_TRI(346, 347, 876);
	  COL_TRI(347, 877, 876);
	  COL_TRI(348, 876, 877);
	  COL_TRI(348, 878, 876);
	  COL_TRI(349, 410, 879);
	  COL_TRI(349, 351, 410);
	  COL_TRI(350, 349, 879);
	  COL_TRI(350, 347, 349);
	  COL_TRI(349, 880, 351);
	  COL_TRI(349, 881, 880);
	  COL_TRI(351, 880, 882);
	  COL_TRI(351, 882, 352);
	  COL_TRI(352, 882, 878);
	  COL_TRI(351, 352, 410);
	  COL_TRI(352, 423, 410);
	  COL_TRI(352, 348, 423);
	  COL_TRI(352, 878, 348);
	  COL_TRI(353, 356, 357);
	  COL_TRI(353, 354, 356);
	  COL_TRI(354, 355, 356);
	  COL_TRI(359, 353, 885);
	  COL_TRI(355, 872, 340);
	  COL_TRI(355, 340, 356);
	  COL_TRI(356, 340, 339);
	  COL_TRI(357, 339, 337);
	  COL_TRI(356, 339, 357);
	  COL_TRI(353, 357, 885);
	  COL_TRI(357, 337, 885);
	  COL_TRI(336, 358, 337);
	  COL_TRI(358, 885, 337);
	  COL_TRI(359, 885, 358);
	  COL_TRI(360, 361, 355);
	  COL_TRI(359, 361, 360);
	  COL_TRI(359, 358, 361);
	  COL_TRI(361, 872, 355);
	  COL_TRI(361, 335, 872);
	  COL_TRI(360, 355, 354);
	  COL_TRI(362, 363, 857);
	  COL_TRI(363, 889, 857);
	  COL_TRI(364, 858, 857);
	  COL_TRI(364, 857, 889);
	  COL_TRI(365, 416, 890);
	  COL_TRI(365, 367, 416);
	  COL_TRI(366, 365, 890);
	  COL_TRI(366, 363, 365);
	  COL_TRI(365, 855, 367);
	  COL_TRI(365, 854, 855);
	  COL_TRI(367, 855, 859);
	  COL_TRI(367, 368, 416);
	  COL_TRI(367, 859, 368);
	  COL_TRI(368, 859, 858);
	  COL_TRI(368, 369, 416);
	  COL_TRI(368, 364, 369);
	  COL_TRI(368, 858, 364);
	  COL_TRI(369, 363, 366);
	  COL_TRI(344, 863, 325);
	  COL_TRI(364, 889, 369);
	  COL_TRI(369, 889, 363);
	  COL_TRI(370, 332, 856);
	  COL_TRI(371, 871, 399);
	  COL_TRI(371, 870, 871);
	  COL_TRI(344, 325, 372);
	  COL_TRI(373, 874, 342);
	  COL_TRI(372, 325, 892);
	  COL_TRI(325, 326, 892);
	  COL_TRI(345, 372, 892);
	  COL_TRI(373, 374, 874);
	  COL_TRI(373, 333, 374);
	  COL_TRI(374, 873, 874);
	  COL_TRI(374, 875, 873);
	  COL_TRI(334, 875, 374);
	  COL_TRI(380, 899, 379);
	  COL_TRI(375, 378, 893);
	  COL_TRI(375, 376, 378);
	  COL_TRI(376, 894, 383);
	  COL_TRI(376, 383, 378);
	  COL_TRI(377, 893, 378);
	  COL_TRI(378, 895, 377);
	  COL_TRI(378, 383, 895);
	  COL_TRI(377, 896, 893);
	  COL_TRI(379, 897, 380);
	  COL_TRI(379, 898, 897);
	  COL_TRI(381, 380, 897);
	  COL_TRI(380, 900, 899);
	  COL_TRI(381, 900, 380);
	  COL_TRI(381, 897, 901);
	  COL_TRI(382, 894, 385);
	  COL_TRI(382, 383, 894);
	  COL_TRI(383, 382, 390);
	  COL_TRI(383, 390, 895);
	  COL_TRI(386, 326, 327);
	  COL_TRI(384, 895, 904);
	  COL_TRI(382, 902, 390);
	  COL_TRI(382, 903, 902);
	  COL_TRI(385, 903, 382);
	  COL_TRI(322, 856, 327);
	  COL_TRI(386, 327, 424);
	  COL_TRI(387, 395, 388);
	  COL_TRI(388, 899, 900);
	  COL_TRI(388, 900, 387);
	  COL_TRI(389, 387, 900);
	  COL_TRI(389, 391, 387);
	  COL_TRI(390, 392, 391);
	  COL_TRI(390, 391, 394);
	  COL_TRI(391, 392, 387);
	  COL_TRI(392, 395, 387);
	  COL_TRI(381, 389, 900);
	  COL_TRI(392, 902, 903);
	  COL_TRI(390, 394, 904);
	  COL_TRI(390, 902, 392);
	  COL_TRI(393, 394, 381);
	  COL_TRI(394, 389, 381);
	  COL_TRI(384, 904, 905);
	  COL_TRI(395, 392, 903);
	  COL_TRI(397, 909, 338);
	  COL_TRI(396, 906, 907);
	  COL_TRI(396, 908, 906);
	  COL_TRI(329, 424, 328);
	  COL_TRI(329, 397, 424);
	  COL_TRI(329, 909, 397);
	  COL_TRI(329, 371, 909);
	  COL_TRI(333, 401, 397);
	  COL_TRI(333, 397, 338);
	  COL_TRI(400, 397, 401);
	  COL_TRI(397, 910, 424);
	  COL_TRI(398, 424, 910);
	  COL_TRI(398, 386, 424);
	  COL_TRI(345, 386, 401);
	  COL_TRI(399, 338, 909);
	  COL_TRI(397, 400, 910);
	  COL_TRI(402, 403, 408);
	  COL_TRI(400, 401, 911);
	  COL_TRI(333, 373, 401);
	  COL_TRI(401, 373, 342);
	  COL_TRI(386, 398, 401);
	  COL_TRI(398, 911, 401);
	  COL_TRI(402, 398, 405);
	  COL_TRI(403, 402, 405);
	  COL_TRI(402, 408, 404);
	  COL_TRI(402, 911, 398);
	  COL_TRI(404, 911, 402);
	  COL_TRI(404, 400, 911);
	  COL_TRI(405, 398, 910);
	  COL_TRI(405, 910, 406);
	  COL_TRI(406, 910, 400);
	  COL_TRI(406, 400, 404);
	  COL_TRI(371, 399, 909);
	  COL_TRI(406, 413, 405);
	  COL_TRI(406, 407, 413);
	  COL_TRI(408, 423, 407);
	  COL_TRI(407, 423, 883);
	  COL_TRI(407, 416, 369);
	  COL_TRI(407, 369, 413);
	  COL_TRI(407, 891, 416);
	  COL_TRI(407, 406, 404);
	  COL_TRI(407, 404, 408);
	  COL_TRI(403, 353, 408);
	  COL_TRI(408, 410, 423);
	  COL_TRI(409, 417, 408);
	  COL_TRI(410, 408, 417);
	  COL_TRI(353, 409, 408);
	  COL_TRI(407, 883, 891);
	  COL_TRI(403, 354, 353);
	  COL_TRI(411, 403, 413);
	  COL_TRI(412, 886, 403);
	  COL_TRI(411, 412, 403);
	  COL_TRI(403, 886, 354);
	  COL_TRI(403, 405, 413);
	  COL_TRI(411, 413, 420);
	  COL_TRI(413, 912, 419);
	  COL_TRI(413, 419, 420);
	  COL_TRI(413, 369, 912);
	  COL_TRI(350, 883, 423);
	  COL_TRI(350, 414, 883);
	  COL_TRI(414, 415, 883);
	  COL_TRI(415, 891, 883);
	  COL_TRI(416, 891, 415);
	  COL_TRI(359, 409, 353);
	  COL_TRI(359, 888, 409);
	  COL_TRI(417, 409, 888);
	  COL_TRI(410, 417, 884);
	  COL_TRI(417, 888, 884);
	  COL_TRI(420, 419, 914);
	  COL_TRI(418, 886, 412);
	  COL_TRI(418, 412, 411);
	  COL_TRI(354, 886, 887);
	  COL_TRI(418, 887, 886);
	  COL_TRI(419, 912, 913);
	  COL_TRI(366, 912, 369);
	  COL_TRI(366, 913, 912);
	  COL_TRI(419, 913, 914);
	  COL_TRI(410, 884, 879);
	  COL_TRI(421, 418, 411);
	  COL_TRI(420, 914, 422);
	  COL_TRI(422, 411, 420);
	  COL_TRI(354, 887, 360);
	  COL_TRI(327, 425, 424);
	  COL_TRI(423, 877, 347);
	  COL_TRI(348, 877, 423);
	  COL_TRI(423, 347, 350);
	  COL_TRI(416, 415, 890);
	  COL_TRI(424, 425, 328);
	  COL_TRI(425, 332, 328);
	  COL_TRI(425, 327, 856);
	  COL_TRI(425, 856, 332);
	  COL_TRI(430, 432, 919);
	  COL_TRI(386, 892, 326);
	  COL_TRI(345, 892, 386);
	  COL_TRI(426, 915, 428);
	  COL_TRI(426, 916, 915);
	  COL_TRI(427, 916, 426);
	  COL_TRI(427, 917, 916);
	  COL_TRI(428, 915, 918);
	  COL_TRI(428, 918, 429);
	  COL_TRI(429, 917, 427);
	  COL_TRI(429, 918, 917);
	  COL_TRI(433, 925, 431);
	  COL_TRI(430, 919, 920);
	  COL_TRI(430, 921, 349);
	  COL_TRI(430, 922, 921);
	  COL_TRI(430, 923, 922);
	  COL_TRI(430, 920, 923);
	  COL_TRI(431, 924, 433);
	  COL_TRI(432, 433, 919);
	  COL_TRI(432, 925, 433);
	  COL_TRI(437, 439, 436);
	  COL_TRI(431, 435, 924);
	  COL_TRI(431, 926, 435);
	  COL_TRI(431, 434, 926);
	  COL_TRI(431, 347, 434);
	  COL_TRI(434, 922, 926);
	  COL_TRI(434, 921, 922);
	  COL_TRI(435, 920, 924);
	  COL_TRI(435, 923, 920);
	  COL_TRI(436, 927, 928);
	  COL_TRI(436, 439, 927);
	  COL_TRI(445, 931, 443);
	  COL_TRI(437, 442, 439);
	  COL_TRI(438, 439, 440);
	  COL_TRI(438, 927, 439);
	  COL_TRI(439, 442, 929);
	  COL_TRI(440, 439, 929);
	  COL_TRI(441, 442, 437);
	  COL_TRI(441, 930, 442);
	  COL_TRI(442, 444, 929);
	  COL_TRI(442, 930, 444);
	  COL_TRI(443, 930, 441);
	  COL_TRI(443, 931, 930);
	  COL_TRI(444, 930, 931);
	  COL_TRI(450, 929, 449);
	  COL_TRI(445, 932, 931);
	  COL_TRI(446, 931, 932);
	  COL_TRI(444, 931, 446);
	  COL_TRI(446, 932, 933);
	  COL_TRI(447, 446, 448);
	  COL_TRI(448, 934, 935);
	  COL_TRI(448, 446, 934);
	  COL_TRI(447, 444, 446);
	  COL_TRI(449, 444, 447);
	  COL_TRI(449, 929, 444);
	  COL_TRI(450, 440, 929);
	  COL_TRI(451, 440, 450);
	  COL_TRI(451, 936, 440);
	  COL_TRI(452, 937, 938);
	  COL_TRI(452, 939, 937);
	  COL_TRI(452, 940, 939);
	  COL_TRI(452, 941, 940);
	  COL_TRI(453, 940, 941);
	  COL_TRI(453, 942, 940);
	  COL_TRI(454, 943, 944);
	  COL_TRI(454, 945, 943);
	  COL_TRI(455, 454, 944);
	  COL_TRI(456, 945, 946);
	  COL_TRI(456, 943, 945);
	  COL_TRI(457, 943, 456);
	  COL_TRI(457, 944, 943);
	  COL_TRI(455, 944, 457);
	  COL_TRI(422, 421, 411);
	  COL_TRI(458, 947, 948);
	  COL_TRI(458, 948, 949);
	  COL_TRI(459, 460, 950);
	  COL_TRI(460, 951, 950);
	  COL_TRI(461, 465, 464);
	  COL_TRI(461, 464, 952);
	  COL_TRI(462, 952, 464);
	  COL_TRI(462, 463, 952);
	  COL_TRI(466, 955, 465);
	  COL_TRI(464, 465, 953);
	  COL_TRI(464, 953, 462);
	  COL_TRI(462, 953, 954);
	  COL_TRI(462, 954, 463);
	  COL_TRI(463, 954, 461);
	  COL_TRI(463, 461, 952);
	  COL_TRI(465, 467, 466);
	  COL_TRI(465, 461, 467);
	  COL_TRI(481, 480, 955);
	  COL_TRI(461, 956, 480);
	  COL_TRI(461, 480, 467);
	  COL_TRI(467, 480, 481);
	  COL_TRI(467, 481, 466);
	  COL_TRI(466, 481, 955);
	  COL_TRI(468, 469, 957);
	  COL_TRI(469, 467, 958);
	  COL_TRI(469, 468, 467);
	  COL_TRI(475, 472, 959);
	  COL_TRI(470, 468, 957);
	  COL_TRI(471, 466, 957);
	  COL_TRI(466, 470, 957);
	  COL_TRI(472, 473, 477);
	  COL_TRI(473, 472, 476);
	  COL_TRI(472, 475, 476);
	  COL_TRI(474, 472, 477);
	  COL_TRI(474, 959, 472);
	  COL_TRI(476, 475, 478);
	  COL_TRI(477, 478, 474);
	  COL_TRI(475, 959, 960);
	  COL_TRI(475, 960, 479);
	  COL_TRI(475, 479, 962);
	  COL_TRI(478, 962, 474);
	  COL_TRI(479, 474, 962);
	  COL_TRI(479, 961, 474);
	  COL_TRI(474, 961, 959);
	  COL_TRI(480, 956, 955);
	  COL_TRI(490, 491, 967);
	  COL_TRI(482, 963, 483);
	  COL_TRI(483, 964, 965);
	  COL_TRI(483, 965, 488);
	  COL_TRI(484, 482, 483);
	  COL_TRI(483, 488, 484);
	  COL_TRI(485, 964, 483);
	  COL_TRI(485, 483, 963);
	  COL_TRI(486, 965, 966);
	  COL_TRI(486, 488, 965);
	  COL_TRI(487, 488, 489);
	  COL_TRI(488, 487, 484);
	  COL_TRI(488, 486, 489);
	  COL_TRI(489, 486, 482);
	  COL_TRI(486, 963, 482);
	  COL_TRI(486, 966, 485);
	  COL_TRI(486, 485, 963);
	  COL_TRI(495, 971, 497);
	  COL_TRI(491, 492, 967);
	  COL_TRI(492, 494, 967);
	  COL_TRI(493, 494, 968);
	  COL_TRI(494, 493, 967);
	  COL_TRI(493, 968, 969);
	  COL_TRI(490, 969, 968);
	  COL_TRI(490, 968, 491);
	  COL_TRI(495, 970, 971);
	  COL_TRI(500, 975, 499);
	  COL_TRI(496, 970, 495);
	  COL_TRI(496, 973, 970);
	  COL_TRI(497, 971, 972);
	  COL_TRI(497, 972, 498);
	  COL_TRI(495, 497, 498);
	  COL_TRI(498, 973, 496);
	  COL_TRI(495, 498, 496);
	  COL_TRI(498, 972, 973);
	  COL_TRI(499, 974, 501);
	  COL_TRI(499, 502, 500);
	  COL_TRI(499, 501, 502);
	  COL_TRI(499, 975, 974);
	  COL_TRI(501, 974, 976);
	  COL_TRI(501, 976, 502);
	  COL_TRI(502, 977, 500);
	  COL_TRI(502, 976, 977);
	  COL_TRI(500, 977, 975);
	  COL_TRI(503, 978, 979);
	  COL_TRI(503, 979, 980);
	  COL_TRI(504, 978, 503);
	  COL_TRI(504, 503, 505);
	  COL_TRI(505, 503, 980);
	  COL_TRI(69, 509, 981);
	  COL_TRI(506, 980, 979);
	  COL_TRI(506, 979, 507);
	  COL_TRI(507, 979, 978);
	  COL_TRI(505, 980, 506);
	  COL_TRI(507, 978, 504);
	  COL_TRI(68, 64, 508);
	  COL_TRI(68, 508, 509);
	  COL_TRI(69, 68, 509);
	  COL_TRI(516, 518, 519);
	  COL_TRI(510, 981, 509);
	  COL_TRI(511, 512, 515);
	  COL_TRI(511, 513, 512);
	  COL_TRI(512, 982, 514);
	  COL_TRI(512, 514, 515);
	  COL_TRI(513, 982, 512);
	  COL_TRI(513, 983, 982);
	  COL_TRI(514, 982, 983);
	  COL_TRI(515, 514, 984);
	  COL_TRI(514, 983, 984);
	  COL_TRI(515, 984, 511);
	  COL_TRI(516, 519, 517);
	  COL_TRI(522, 523, 524);
	  COL_TRI(518, 986, 519);
	  COL_TRI(518, 987, 986);
	  COL_TRI(519, 986, 520);
	  COL_TRI(519, 520, 517);
	  COL_TRI(517, 520, 985);
	  COL_TRI(517, 985, 516);
	  COL_TRI(520, 987, 985);
	  COL_TRI(520, 986, 987);
	  COL_TRI(521, 988, 522);
	  COL_TRI(522, 524, 521);
	  COL_TRI(526, 993, 991);
	  COL_TRI(523, 989, 524);
	  COL_TRI(523, 990, 989);
	  COL_TRI(524, 989, 525);
	  COL_TRI(524, 525, 521);
	  COL_TRI(521, 525, 988);
	  COL_TRI(525, 990, 988);
	  COL_TRI(525, 989, 990);
	  COL_TRI(526, 991, 527);
	  COL_TRI(527, 530, 992);
	  COL_TRI(527, 991, 530);
	  COL_TRI(526, 528, 529);
	  COL_TRI(528, 994, 529);
	  COL_TRI(529, 993, 526);
	  COL_TRI(529, 994, 993);
	  COL_TRI(526, 992, 528);
	  COL_TRI(526, 527, 992);
	  COL_TRI(528, 992, 530);
	  COL_TRI(528, 995, 994);
	  COL_TRI(528, 530, 995);
	  COL_TRI(530, 994, 995);
	  COL_TRI(530, 993, 994);
	  COL_TRI(530, 991, 993);
	  COL_TRI(537, 539, 536);
	  COL_TRI(531, 532, 996);
	  COL_TRI(532, 533, 997);
	  COL_TRI(532, 997, 996);
	  COL_TRI(533, 532, 998);
	  COL_TRI(531, 998, 532);
	  COL_TRI(531, 997, 534);
	  COL_TRI(531, 996, 997);
	  COL_TRI(534, 997, 533);
	  COL_TRI(534, 533, 535);
	  COL_TRI(535, 533, 998);
	  COL_TRI(536, 539, 999);
	  COL_TRI(536, 999, 538);
	  COL_TRI(543, 1003, 1004);
	  COL_TRI(538, 999, 1000);
	  COL_TRI(539, 1000, 999);
	  COL_TRI(538, 1000, 540);
	  COL_TRI(539, 1001, 1000);
	  COL_TRI(537, 1001, 539);
	  COL_TRI(540, 1000, 1001);
	  COL_TRI(540, 1001, 537);
	  COL_TRI(541, 1002, 542);
	  COL_TRI(542, 1002, 1003);
	  COL_TRI(542, 1003, 543);
	  COL_TRI(543, 1004, 544);
	  COL_TRI(541, 1005, 1002);
	  COL_TRI(544, 1005, 541);
	  COL_TRI(544, 1004, 1005);
	  COL_TRI(545, 573, 546);
	  COL_TRI(546, 548, 547);
	  COL_TRI(546, 547, 545);
	  COL_TRI(546, 573, 1006);
	  COL_TRI(546, 1006, 548);
	  COL_TRI(547, 1007, 545);
	  COL_TRI(548, 1008, 547);
	  COL_TRI(547, 1008, 1007);
	  COL_TRI(545, 1007, 573);
	  COL_TRI(548, 1006, 1008);
	  COL_TRI(554, 553, 1015);
	  COL_TRI(549, 1009, 1010);
	  COL_TRI(549, 1010, 1011);
	  COL_TRI(550, 549, 1011);
	  COL_TRI(551, 1012, 1010);
	  COL_TRI(551, 1010, 1009);
	  COL_TRI(550, 1011, 1013);
	  COL_TRI(552, 1012, 551);
	  COL_TRI(552, 551, 1014);
	  COL_TRI(553, 552, 1014);
	  COL_TRI(553, 1014, 1015);
	  COL_TRI(554, 550, 555);
	  COL_TRI(554, 1015, 550);
	  COL_TRI(550, 1013, 1016);
	  COL_TRI(550, 1016, 555);
	  COL_TRI(556, 560, 1020);
	  COL_TRI(554, 1017, 553);
	  COL_TRI(555, 1016, 1017);
	  COL_TRI(555, 1017, 554);
	  COL_TRI(556, 1018, 559);
	  COL_TRI(557, 1019, 556);
	  COL_TRI(556, 1019, 1018);
	  COL_TRI(558, 1018, 1019);
	  COL_TRI(559, 1018, 558);
	  COL_TRI(558, 1019, 557);
	  COL_TRI(556, 1020, 557);
	  COL_TRI(557, 1020, 561);
	  COL_TRI(560, 561, 1020);
	  COL_TRI(557, 561, 558);
	  COL_TRI(559, 560, 556);
	  COL_TRI(560, 1021, 561);
	  COL_TRI(559, 1021, 560);
	  COL_TRI(561, 1021, 559);
	  COL_TRI(558, 561, 559);
	  COL_TRI(562, 1022, 1023);
	  COL_TRI(562, 568, 1022);
	  COL_TRI(562, 563, 1024);
	  COL_TRI(562, 1023, 563);
	  COL_TRI(563, 1025, 1024);
	  COL_TRI(563, 564, 1025);
	  COL_TRI(564, 1028, 1025);
	  COL_TRI(564, 1029, 1028);
	  COL_TRI(565, 567, 566);
	  COL_TRI(566, 567, 1028);
	  COL_TRI(566, 1029, 1030);
	  COL_TRI(566, 1028, 1029);
	  COL_TRI(566, 570, 565);
	  COL_TRI(566, 1030, 570);
	  COL_TRI(567, 1031, 1028);
	  COL_TRI(568, 569, 1022);
	  COL_TRI(568, 571, 569);
	  COL_TRI(569, 571, 565);
	  COL_TRI(570, 569, 565);
	  COL_TRI(568, 1026, 571);
	  COL_TRI(568, 1027, 1026);
	  COL_TRI(571, 1032, 565);
	  COL_TRI(565, 1032, 567);
	  COL_TRI(571, 1026, 1032);
	  COL_TRI(572, 1033, 1034);
	  COL_TRI(572, 1034, 573);
	  COL_TRI(573, 1035, 1036);
	  COL_TRI(573, 1036, 572);
	  COL_TRI(574, 576, 1037);
	  COL_TRI(574, 1037, 1038);
	  COL_TRI(575, 574, 1038);
	  COL_TRI(576, 1039, 1040);
	  COL_TRI(576, 1040, 1037);
	  COL_TRI(575, 1040, 1039);
	  COL_TRI(579, 1044, 1045);
	  COL_TRI(575, 1039, 1041);
	  COL_TRI(575, 1041, 574);
	  COL_TRI(577, 1042, 1043);
	  COL_TRI(577, 1044, 1042);
	  COL_TRI(578, 577, 1043);
	  COL_TRI(579, 1042, 1044);
	  COL_TRI(582, 53, 52);
	  COL_TRI(579, 1045, 578);
	  COL_TRI(579, 578, 580);
	  COL_TRI(580, 1042, 579);
	  COL_TRI(578, 579, 1045);
	  COL_TRI(578, 580, 579);
	  COL_TRI(578, 1043, 580);
	  COL_TRI(580, 1043, 1042);
	  COL_TRI(581, 55, 54);
	  COL_TRI(581, 54, 1046);
	  COL_TRI(582, 1047, 53);
	  COL_TRI(583, 1048, 1049);
	  COL_TRI(583, 1049, 1050);
	  COL_TRI(584, 1049, 1048);
	  COL_TRI(584, 1048, 586);
	  COL_TRI(585, 1048, 583);
	  COL_TRI(585, 586, 1048);
	  COL_TRI(586, 585, 1051);
	  COL_TRI(586, 1051, 584);
	  COL_TRI(590, 1054, 1055);
	  COL_TRI(587, 1053, 1051);
	  COL_TRI(587, 1051, 585);
	  COL_TRI(588, 1053, 587);
	  COL_TRI(588, 587, 585);
	  COL_TRI(588, 585, 583);
	  COL_TRI(588, 1052, 1053);
	  COL_TRI(583, 1050, 1052);
	  COL_TRI(583, 1052, 588);
	  COL_TRI(589, 1054, 590);
	  COL_TRI(590, 1055, 591);
	  COL_TRI(594, 1060, 1059);
	  COL_TRI(589, 1056, 1054);
	  COL_TRI(591, 1055, 1057);
	  COL_TRI(591, 1057, 592);
	  COL_TRI(592, 1057, 1056);
	  COL_TRI(592, 1056, 589);
	  COL_TRI(593, 1058, 595);
	  COL_TRI(593, 1059, 1058);
	  COL_TRI(594, 1059, 593);
	  COL_TRI(600, 1062, 1063);
	  COL_TRI(595, 1058, 1061);
	  COL_TRI(595, 1061, 596);
	  COL_TRI(596, 1061, 1060);
	  COL_TRI(596, 1060, 594);
	  COL_TRI(597, 1062, 600);
	  COL_TRI(598, 1062, 597);
	  COL_TRI(597, 600, 601);
	  COL_TRI(599, 597, 601);
	  COL_TRI(599, 598, 597);
	  COL_TRI(598, 1063, 1062);
	  COL_TRI(606, 1066, 1067);
	  COL_TRI(600, 1063, 1064);
	  COL_TRI(601, 600, 1064);
	  COL_TRI(601, 1064, 599);
	  COL_TRI(602, 1065, 603);
	  COL_TRI(603, 605, 602);
	  COL_TRI(603, 604, 605);
	  COL_TRI(604, 1066, 605);
	  COL_TRI(604, 1067, 1066);
	  COL_TRI(605, 1066, 606);
	  COL_TRI(605, 606, 602);
	  COL_TRI(602, 606, 1065);
	  COL_TRI(606, 1067, 1065);
	  COL_TRI(607, 612, 608);
	  COL_TRI(608, 609, 607);
	  COL_TRI(608, 1068, 609);
	  COL_TRI(609, 1069, 607);
	  COL_TRI(607, 611, 612);
	  COL_TRI(607, 610, 611);
	  COL_TRI(610, 1070, 611);
	  COL_TRI(610, 1071, 1070);
	  COL_TRI(611, 613, 612);
	  COL_TRI(611, 1070, 613);
	  COL_TRI(612, 1072, 608);
	  COL_TRI(612, 613, 1072);
	  COL_TRI(615, 1074, 1075);
	  COL_TRI(613, 1069, 614);
	  COL_TRI(614, 1072, 613);
	  COL_TRI(614, 1073, 1072);
	  COL_TRI(608, 1073, 1068);
	  COL_TRI(608, 1072, 1073);
	  COL_TRI(613, 1071, 1069);
	  COL_TRI(613, 1070, 1071);
	  COL_TRI(609, 614, 1069);
	  COL_TRI(619, 621, 620);
	  COL_TRI(615, 1076, 1074);
	  COL_TRI(617, 1074, 1076);
	  COL_TRI(617, 1076, 1077);
	  COL_TRI(617, 616, 618);
	  COL_TRI(617, 1077, 616);
	  COL_TRI(618, 1074, 617);
	  COL_TRI(616, 1075, 618);
	  COL_TRI(618, 1075, 1074);
	  COL_TRI(616, 615, 1075);
	  COL_TRI(619, 620, 622);
	  COL_TRI(70, 510, 1082);
	  COL_TRI(620, 1078, 1079);
	  COL_TRI(621, 1078, 620);
	  COL_TRI(621, 1081, 1078);
	  COL_TRI(622, 1079, 1080);
	  COL_TRI(620, 1079, 622);
	  COL_TRI(622, 1080, 619);
	  COL_TRI(619, 1081, 621);
	  COL_TRI(619, 1080, 1081);
	  COL_TRI(65, 623, 70);
	  COL_TRI(70, 623, 510);
	  COL_TRI(508, 1082, 510);
	  COL_TRI(510, 509, 508);
	  COL_TRI_INIT(SURFACE_BURNING, 4);
	  COL_TRI(56, 57, 58);
	  COL_TRI(56, 58, 59);
	  COL_TRI(60, 61, 62);
	  COL_TRI(60, 63, 61);
	  COL_TRI_INIT(SURFACE_DEATH_PLANE, 2);
	  COL_TRI(1083, 1084, 1085);
	  COL_TRI(1083, 1085, 1086);
	  COL_TRI_INIT(SURFACE_VERY_SLIPPERY, 2);
	  COL_TRI(52, 53, 54);
	  COL_TRI(52, 54, 55);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 209);
	  COL_TRI(649, 650, 108);
	  COL_TRI(630, 629, 631);
	  COL_TRI(630, 631, 632);
	  COL_TRI(639, 638, 637);
	  COL_TRI(639, 637, 636);
	  COL_TRI(647, 646, 624);
	  COL_TRI(647, 624, 79);
	  COL_TRI(669, 661, 120);
	  COL_TRI(649, 648, 650);
	  COL_TRI(656, 74, 73);
	  COL_TRI(656, 73, 78);
	  COL_TRI(657, 118, 658);
	  COL_TRI(657, 658, 121);
	  COL_TRI(669, 120, 117);
	  COL_TRI(683, 682, 684);
	  COL_TRI(676, 670, 132);
	  COL_TRI(676, 136, 670);
	  COL_TRI(672, 671, 673);
	  COL_TRI(672, 673, 134);
	  COL_TRI(679, 678, 680);
	  COL_TRI(679, 680, 141);
	  COL_TRI(1088, 690, 149);
	  COL_TRI(683, 684, 142);
	  COL_TRI(686, 677, 139);
	  COL_TRI(686, 681, 677);
	  COL_TRI(1087, 692, 1088);
	  COL_TRI(1087, 695, 692);
	  COL_TRI(1088, 692, 690);
	  COL_TRI(161, 704, 703);
	  COL_TRI(689, 688, 691);
	  COL_TRI(689, 691, 151);
	  COL_TRI(1089, 696, 153);
	  COL_TRI(1089, 699, 696);
	  COL_TRI(148, 4, 700);
	  COL_TRI(148, 700, 156);
	  COL_TRI(161, 162, 704);
	  COL_TRI(161, 163, 162);
	  COL_TRI(161, 709, 163);
	  COL_TRI(161, 703, 705);
	  COL_TRI(161, 705, 160);
	  COL_TRI(115, 110, 95);
	  COL_TRI(115, 95, 1097);
	  COL_TRI(667, 125, 668);
	  COL_TRI(167, 171, 712);
	  COL_TRI(667, 666, 125);
	  COL_TRI(1090, 1098, 1099);
	  COL_TRI(1090, 1100, 1098);
	  COL_TRI(167, 717, 719);
	  COL_TRI(167, 168, 717);
	  COL_TRI(167, 719, 170);
	  COL_TRI(167, 712, 711);
	  COL_TRI(167, 170, 171);
	  COL_TRI(723, 174, 750);
	  COL_TRI(723, 750, 722);
	  COL_TRI(750, 174, 721);
	  COL_TRI(750, 721, 751);
	  COL_TRI(724, 751, 721);
	  COL_TRI(724, 721, 720);
	  COL_TRI(725, 727, 728);
	  COL_TRI(725, 728, 179);
	  COL_TRI(755, 753, 752);
	  COL_TRI(765, 762, 761);
	  COL_TRI(761, 216, 765);
	  COL_TRI(761, 212, 216);
	  COL_TRI(761, 759, 212);
	  COL_TRI(761, 760, 759);
	  COL_TRI(765, 763, 762);
	  COL_TRI(247, 773, 230);
	  COL_TRI(247, 774, 773);
	  COL_TRI(770, 271, 228);
	  COL_TRI(755, 776, 753);
	  COL_TRI(273, 771, 252);
	  COL_TRI(273, 226, 771);
	  COL_TRI(769, 251, 272);
	  COL_TRI(769, 272, 224);
	  COL_TRI(770, 274, 271);
	  COL_TRI(792, 790, 789);
	  COL_TRI(792, 791, 790);
	  COL_TRI(795, 797, 796);
	  COL_TRI(795, 796, 794);
	  COL_TRI(795, 794, 793);
	  COL_TRI(795, 817, 797);
	  COL_TRI(818, 819, 820);
	  COL_TRI(818, 820, 821);
	  COL_TRI(836, 840, 839);
	  COL_TRI(287, 825, 826);
	  COL_TRI(287, 289, 825);
	  COL_TRI(287, 826, 828);
	  COL_TRI(287, 828, 288);
	  COL_TRI(287, 290, 289);
	  COL_TRI(287, 832, 290);
	  COL_TRI(836, 841, 840);
	  COL_TRI(836, 295, 833);
	  COL_TRI(836, 296, 295);
	  COL_TRI(836, 839, 296);
	  COL_TRI(363, 362, 854);
	  COL_TRI(836, 833, 835);
	  COL_TRI(303, 844, 846);
	  COL_TRI(303, 846, 305);
	  COL_TRI(358, 335, 361);
	  COL_TRI(358, 336, 335);
	  COL_TRI(363, 854, 365);
	  COL_TRI(924, 920, 919);
	  COL_TRI(375, 898, 349);
	  COL_TRI(375, 897, 898);
	  COL_TRI(375, 394, 897);
	  COL_TRI(375, 904, 394);
	  COL_TRI(375, 893, 904);
	  COL_TRI(375, 349, 347);
	  COL_TRI(915, 916, 917);
	  COL_TRI(915, 917, 918);
	  COL_TRI(940, 927, 932);
	  COL_TRI(924, 919, 433);
	  COL_TRI(926, 922, 923);
	  COL_TRI(926, 923, 435);
	  COL_TRI(347, 349, 921);
	  COL_TRI(347, 921, 434);
	  COL_TRI(940, 928, 927);
	  COL_TRI(932, 445, 937);
	  COL_TRI(932, 937, 939);
	  COL_TRI(940, 932, 939);
	  COL_TRI(940, 942, 928);
	  COL_TRI(1091, 1101, 1102);
	  COL_TRI(1091, 1103, 1101);
	  COL_TRI(465, 461, 954);
	  COL_TRI(465, 954, 953);
	  COL_TRI(964, 1093, 1095);
	  COL_TRI(961, 479, 461);
	  COL_TRI(961, 461, 465);
	  COL_TRI(465, 959, 961);
	  COL_TRI(461, 479, 960);
	  COL_TRI(461, 960, 1092);
	  COL_TRI(465, 1104, 959);
	  COL_TRI(1092, 959, 1104);
	  COL_TRI(1092, 960, 959);
	  COL_TRI(475, 962, 478);
	  COL_TRI(964, 485, 1093);
	  COL_TRI(974, 977, 976);
	  COL_TRI(1093, 966, 1094);
	  COL_TRI(1093, 485, 966);
	  COL_TRI(1094, 966, 965);
	  COL_TRI(1094, 965, 1105);
	  COL_TRI(1095, 965, 964);
	  COL_TRI(1095, 1105, 965);
	  COL_TRI(971, 973, 972);
	  COL_TRI(971, 970, 973);
	  COL_TRI(511, 983, 513);
	  COL_TRI(974, 975, 977);
	  COL_TRI(981, 1106, 67);
	  COL_TRI(981, 67, 69);
	  COL_TRI(506, 507, 504);
	  COL_TRI(506, 504, 505);
	  COL_TRI(511, 984, 983);
	  COL_TRI(535, 998, 531);
	  COL_TRI(516, 985, 987);
	  COL_TRI(516, 987, 518);
	  COL_TRI(522, 990, 523);
	  COL_TRI(522, 988, 990);
	  COL_TRI(623, 65, 1106);
	  COL_TRI(623, 1106, 510);
	  COL_TRI(1007, 1008, 1006);
	  COL_TRI(535, 531, 534);
	  COL_TRI(538, 537, 536);
	  COL_TRI(538, 540, 537);
	  COL_TRI(1003, 1002, 1005);
	  COL_TRI(1003, 1005, 1004);
	  COL_TRI(1007, 1006, 573);
	  COL_TRI(569, 1030, 1029);
	  COL_TRI(1011, 553, 1017);
	  COL_TRI(1017, 1016, 1013);
	  COL_TRI(1017, 1013, 1011);
	  COL_TRI(1011, 1012, 552);
	  COL_TRI(1011, 1010, 1012);
	  COL_TRI(1011, 552, 553);
	  COL_TRI(569, 564, 563);
	  COL_TRI(569, 563, 1023);
	  COL_TRI(569, 1023, 1022);
	  COL_TRI(569, 1029, 564);
	  COL_TRI(1050, 1051, 1053);
	  COL_TRI(569, 570, 1030);
	  COL_TRI(1041, 1039, 576);
	  COL_TRI(1041, 576, 574);
	  COL_TRI(578, 1044, 577);
	  COL_TRI(578, 1045, 1044);
	  COL_TRI(1049, 1051, 1050);
	  COL_TRI(1050, 1053, 1052);
	  COL_TRI(1049, 584, 1051);
	  COL_TRI(1054, 1057, 1055);
	  COL_TRI(1054, 1056, 1057);
	  COL_TRI(1059, 1060, 1061);
	  COL_TRI(1059, 1061, 1058);
	  COL_TRI(607, 1071, 610);
	  COL_TRI(599, 1064, 1063);
	  COL_TRI(599, 1063, 598);
	  COL_TRI(603, 1065, 1067);
	  COL_TRI(603, 1067, 604);
	  COL_TRI(1068, 1073, 614);
	  COL_TRI(1068, 614, 609);
	  COL_TRI(1, 7, 1096);
	  COL_TRI(607, 1069, 1071);
	  COL_TRI(616, 1076, 615);
	  COL_TRI(616, 1077, 1076);
	  COL_TRI(1079, 1078, 1081);
	  COL_TRI(1079, 1081, 1080);
	  COL_TRI(1, 1096, 2);
	  COL_TRI(1096, 7, 6);
	  COL_TRI(1096, 6, 1107);
	  COL_TRI(6, 8, 82);
	  COL_TRI(6, 82, 1107);
	  COL_TRI_INIT(SURFACE_HORIZONTAL_WIND, 34);
	  COL_TRI_SPECIAL(10, 11, 12, 0x100);
	  COL_TRI_SPECIAL(10, 12, 13, 0x100);
	  COL_TRI_SPECIAL(14, 15, 16, 0x140);
	  COL_TRI_SPECIAL(17, 14, 16, 0x140);
	  COL_TRI_SPECIAL(17, 16, 18, 0x140);
	  COL_TRI_SPECIAL(17, 18, 19, 0x140);
	  COL_TRI_SPECIAL(20, 15, 14, 0x140);
	  COL_TRI_SPECIAL(20, 21, 15, 0x140);
	  COL_TRI_SPECIAL(22, 34, 26, 0x140);
	  COL_TRI_SPECIAL(23, 22, 26, 0x140);
	  COL_TRI_SPECIAL(22, 35, 34, 0x140);
	  COL_TRI_SPECIAL(22, 36, 35, 0x140);
	  COL_TRI_SPECIAL(22, 37, 36, 0x140);
	  COL_TRI_SPECIAL(24, 36, 37, 0x140);
	  COL_TRI_SPECIAL(25, 24, 37, 0x140);
	  COL_TRI_SPECIAL(26, 34, 24, 0x140);
	  COL_TRI_SPECIAL(25, 27, 24, 0x140);
	  COL_TRI_SPECIAL(26, 24, 27, 0x140);
	  COL_TRI_SPECIAL(27, 25, 38, 0x140);
	  COL_TRI_SPECIAL(25, 28, 38, 0x140);
	  COL_TRI_SPECIAL(23, 26, 29, 0x140);
	  COL_TRI_SPECIAL(23, 29, 39, 0x140);
	  COL_TRI_SPECIAL(33, 43, 42, 0x140);
	  COL_TRI_SPECIAL(28, 40, 38, 0x140);
	  COL_TRI_SPECIAL(28, 41, 40, 0x140);
	  COL_TRI_SPECIAL(29, 42, 39, 0x140);
	  COL_TRI_SPECIAL(29, 33, 42, 0x140);
	  COL_TRI_SPECIAL(30, 32, 41, 0x140);
	  COL_TRI_SPECIAL(31, 43, 30, 0x140);
	  COL_TRI_SPECIAL(32, 40, 41, 0x140);
	  COL_TRI_SPECIAL(33, 44, 43, 0x140);
	  COL_TRI_SPECIAL(31, 47, 46, 0x140);
	  COL_TRI_SPECIAL(31, 45, 43, 0x140);
	  COL_TRI_SPECIAL(31, 46, 45, 0x140);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(23);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start,   /*pos*/  2599, -1833,  2071, /*yaw*/   64); // unused, probably an early way to set initial position
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03, /*pos*/  1902, -1833,  1063, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_04, /*pos*/  3803, -1833,  2036, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_05, /*pos*/ -4888, -2550,  5847, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_06, /*pos*/  5324, -2038,  6155, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_07, /*pos*/  -409, -3164,  5207, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_08, /*pos*/ -4680, -1910,   296, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_08, /*pos*/ -3193, -4726,  6670, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_09, /*pos*/  6506, -1295,   762, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0A, /*pos*/ -4629,   137,  -113, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0B, /*pos*/  2639,  2724,  -622, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0C, /*pos*/  3577,  2486, -2346, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0D, /*pos*/  3554,  4276, -2346, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0D, /*pos*/   614, -1116,  3671, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0E, /*pos*/  5280,  4937,   603, /*yaw*/  128);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0F, /*pos*/ -4197,  4608, -5119, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_10, /*pos*/  2628,  -143, -1611, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_11, /*pos*/  5094,  3440,  4029, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_12, /*pos*/ -3708,  2006,   270, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_13, /*pos*/  5994,  -988,  1341, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_14, /*pos*/  3917,   624, -1133, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_15, /*pos*/ -3981,  3328, -2736, /*yaw*/    0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_16, /*pos*/ -6053,  4096, -3197, /*yaw*/    0);
	  COL_END();
	}

	function rr_seg7_collision_donut_platform() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(-101, 0, -306);
	  COL_VERTEX(-101, 0, 307);
	  COL_VERTEX(-101, 154, 307);
	  COL_VERTEX(102, 0, 307);
	  COL_VERTEX(102, 154, 307);
	  COL_VERTEX(102, 0, -306);
	  COL_VERTEX(102, 154, -306);
	  COL_VERTEX(-101, 154, -306);
	  COL_TRI_INIT(SURFACE_DEFAULT, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(1, 3, 4);
	  COL_TRI(1, 4, 2);
	  COL_TRI(5, 3, 1);
	  COL_TRI(5, 1, 0);
	  COL_TRI(6, 4, 3);
	  COL_TRI(6, 3, 5);
	  COL_TRI(7, 4, 6);
	  COL_TRI(7, 2, 4);
	  COL_TRI(0, 2, 7);
	  COL_TRI(7, 6, 5);
	  COL_TRI(7, 5, 0);
	  COL_TRI_STOP();
	  COL_END();
	}

	function rr_seg7_collision_elevator_platform() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(205, 102, 307);
	  COL_VERTEX(205, 0, 307);
	  COL_VERTEX(205, 0, -306);
	  COL_VERTEX(-204, 0, 307);
	  COL_VERTEX(-204, 0, -306);
	  COL_VERTEX(-204, 102, 307);
	  COL_VERTEX(-204, 102, -306);
	  COL_VERTEX(205, 102, -306);
	  COL_TRI_INIT(SURFACE_DEFAULT, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(1, 3, 4);
	  COL_TRI(1, 4, 2);
	  COL_TRI(5, 3, 1);
	  COL_TRI(5, 1, 0);
	  COL_TRI(6, 4, 3);
	  COL_TRI(6, 3, 5);
	  COL_TRI(7, 4, 6);
	  COL_TRI(7, 2, 4);
	  COL_TRI(0, 2, 7);
	  COL_TRI(7, 6, 5);
	  COL_TRI(7, 5, 0);
	  COL_TRI_STOP();
	  COL_END();
	}

	function rr_seg7_collision_07029038() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x15);
	  COL_VERTEX(-101, 20, 0);
	  COL_VERTEX(-204, 20, 0);
	  COL_VERTEX(-204, 20, 205);
	  COL_VERTEX(-204, 20, -204);
	  COL_VERTEX(-306, 20, 0);
	  COL_VERTEX(-306, 20, 205);
	  COL_VERTEX(-101, 20, -204);
	  COL_VERTEX(-306, 20, -204);
	  COL_VERTEX(-101, 20, 205);
	  COL_VERTEX(0, 20, -204);
	  COL_VERTEX(0, 20, 0);
	  COL_VERTEX(0, 20, 205);
	  COL_VERTEX(102, 20, -204);
	  COL_VERTEX(102, 20, 0);
	  COL_VERTEX(102, 20, 205);
	  COL_VERTEX(205, 20, 0);
	  COL_VERTEX(205, 20, -204);
	  COL_VERTEX(307, 20, -204);
	  COL_VERTEX(307, 20, 0);
	  COL_VERTEX(205, 20, 205);
	  COL_VERTEX(307, 20, 205);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 24);
	  COL_TRI(13, 10, 11);
	  COL_TRI(0, 1, 2);
	  COL_TRI(3, 4, 1);
	  COL_TRI(1, 5, 2);
	  COL_TRI(1, 4, 5);
	  COL_TRI(6, 1, 0);
	  COL_TRI(6, 3, 1);
	  COL_TRI(3, 7, 4);
	  COL_TRI(0, 2, 8);
	  COL_TRI(9, 0, 10);
	  COL_TRI(9, 6, 0);
	  COL_TRI(10, 0, 8);
	  COL_TRI(10, 8, 11);
	  COL_TRI(12, 10, 13);
	  COL_TRI(12, 9, 10);
	  COL_TRI(18, 19, 20);
	  COL_TRI(13, 11, 14);
	  COL_TRI(15, 13, 14);
	  COL_TRI(16, 12, 13);
	  COL_TRI(16, 13, 15);
	  COL_TRI(15, 14, 19);
	  COL_TRI(17, 15, 18);
	  COL_TRI(17, 16, 15);
	  COL_TRI(18, 15, 19);
	  COL_TRI_STOP();
	  COL_END();
	}

	function rr_seg7_collision_07029858() {
	  COL_INIT();
	  COL_VERTEX_INIT(0xC);
	  COL_VERTEX(26, 154, 0);
	  COL_VERTEX(666, 154, -613);
	  COL_VERTEX(26, 154, -613);
	  COL_VERTEX(666, 154, 410);
	  COL_VERTEX(-665, 154, 410);
	  COL_VERTEX(-665, 154, 0);
	  COL_VERTEX(26, 0, 0);
	  COL_VERTEX(-665, 0, 0);
	  COL_VERTEX(-665, 0, 410);
	  COL_VERTEX(666, 0, 410);
	  COL_VERTEX(666, 0, -613);
	  COL_VERTEX(26, 0, -613);
	  COL_TRI_INIT(SURFACE_DEFAULT, 20);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(0, 4, 3);
	  COL_TRI(0, 5, 4);
	  COL_TRI(6, 0, 2);
	  COL_TRI(7, 0, 6);
	  COL_TRI(7, 5, 0);
	  COL_TRI(8, 5, 7);
	  COL_TRI(8, 4, 5);
	  COL_TRI(9, 4, 8);
	  COL_TRI(9, 3, 4);
	  COL_TRI(10, 3, 9);
	  COL_TRI(10, 1, 3);
	  COL_TRI(11, 2, 1);
	  COL_TRI(11, 1, 10);
	  COL_TRI(6, 2, 11);
	  COL_TRI(6, 9, 8);
	  COL_TRI(6, 10, 9);
	  COL_TRI(6, 11, 10);
	  COL_TRI(8, 7, 6);
	  COL_TRI_STOP();
	  COL_END();
	}

	function rr_seg7_collision_07029508() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x10);
	  COL_VERTEX(-578, 0, -578);
	  COL_VERTEX(-578, 205, -578);
	  COL_VERTEX(0, 205, -818);
	  COL_VERTEX(0, 0, -818);
	  COL_VERTEX(579, 0, 579);
	  COL_VERTEX(819, 0, 0);
	  COL_VERTEX(819, 205, 0);
	  COL_VERTEX(579, 205, 579);
	  COL_VERTEX(-818, 205, 0);
	  COL_VERTEX(-818, 0, 0);
	  COL_VERTEX(0, 205, 819);
	  COL_VERTEX(-578, 0, 579);
	  COL_VERTEX(0, 0, 819);
	  COL_VERTEX(-578, 205, 579);
	  COL_VERTEX(579, 205, -578);
	  COL_VERTEX(579, 0, -578);
	  COL_TRI_INIT(SURFACE_DEFAULT, 22);
	  COL_TRI(10, 11, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(4, 5, 6);
	  COL_TRI(4, 6, 7);
	  COL_TRI(0, 8, 1);
	  COL_TRI(0, 9, 8);
	  COL_TRI(14, 2, 1);
	  COL_TRI(10, 13, 11);
	  COL_TRI(4, 7, 10);
	  COL_TRI(4, 10, 12);
	  COL_TRI(14, 7, 6);
	  COL_TRI(14, 10, 7);
	  COL_TRI(14, 13, 10);
	  COL_TRI(14, 8, 13);
	  COL_TRI(14, 1, 8);
	  COL_TRI(13, 8, 9);
	  COL_TRI(13, 9, 11);
	  COL_TRI(2, 14, 3);
	  COL_TRI(14, 15, 3);
	  COL_TRI(5, 14, 6);
	  COL_TRI(5, 15, 14);
	  COL_TRI_STOP();
	  COL_END();
	}

	function rr_seg7_collision_0702967C() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x5);
	  COL_VERTEX(307, 307, -306);
	  COL_VERTEX(-306, 307, -306);
	  COL_VERTEX(-306, 307, 307);
	  COL_VERTEX(307, 307, 307);
	  COL_VERTEX(0, 0, 0);
	  COL_TRI_INIT(SURFACE_DEFAULT, 6);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(2, 1, 4);
	  COL_TRI(4, 3, 2);
	  COL_TRI(0, 4, 1);
	  COL_TRI(4, 0, 3);
	  COL_TRI_STOP();
	  COL_END();
	}

	function rr_seg7_collision_rotating_platform_with_fire() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x21);
	  COL_VERTEX(-1114, 461, -117);
	  COL_VERTEX(-387, 461, -139);
	  COL_VERTEX(-387, 461, 138);
	  COL_VERTEX(-1114, 461, 138);
	  COL_VERTEX(-1114, 563, -117);
	  COL_VERTEX(-1114, 563, 138);
	  COL_VERTEX(376, 461, -139);
	  COL_VERTEX(1103, 461, -139);
	  COL_VERTEX(1103, 461, 138);
	  COL_VERTEX(376, 461, 138);
	  COL_VERTEX(1103, 563, -139);
	  COL_VERTEX(1103, 563, 138);
	  COL_VERTEX(376, 563, 138);
	  COL_VERTEX(0, 0, 0);
	  COL_VERTEX(133, 410, -382);
	  COL_VERTEX(-387, 563, 138);
	  COL_VERTEX(-387, 563, -139);
	  COL_VERTEX(376, 563, -139);
	  COL_VERTEX(-387, 410, 138);
	  COL_VERTEX(-387, 410, -139);
	  COL_VERTEX(133, 614, -382);
	  COL_VERTEX(-144, 410, -382);
	  COL_VERTEX(-144, 410, 381);
	  COL_VERTEX(133, 410, 381);
	  COL_VERTEX(376, 410, 138);
	  COL_VERTEX(376, 410, -139);
	  COL_VERTEX(-387, 614, -139);
	  COL_VERTEX(-144, 614, -382);
	  COL_VERTEX(-387, 614, 138);
	  COL_VERTEX(376, 614, -139);
	  COL_VERTEX(-144, 614, 381);
	  COL_VERTEX(133, 614, 381);
	  COL_VERTEX(376, 614, 138);
	  COL_TRI_INIT(SURFACE_DEFAULT, 50);
	  COL_TRI(8, 12, 9);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(3, 4, 0);
	  COL_TRI(3, 5, 4);
	  COL_TRI(6, 7, 8);
	  COL_TRI(6, 8, 9);
	  COL_TRI(6, 10, 7);
	  COL_TRI(8, 11, 12);
	  COL_TRI(13, 25, 24);
	  COL_TRI(14, 25, 13);
	  COL_TRI(13, 24, 23);
	  COL_TRI(13, 23, 22);
	  COL_TRI(13, 22, 18);
	  COL_TRI(13, 18, 19);
	  COL_TRI(13, 19, 21);
	  COL_TRI(13, 21, 14);
	  COL_TRI(5, 15, 16);
	  COL_TRI(5, 16, 4);
	  COL_TRI(2, 15, 5);
	  COL_TRI(2, 5, 3);
	  COL_TRI(18, 26, 19);
	  COL_TRI(0, 4, 16);
	  COL_TRI(7, 11, 8);
	  COL_TRI(7, 10, 11);
	  COL_TRI(12, 11, 10);
	  COL_TRI(12, 10, 17);
	  COL_TRI(6, 17, 10);
	  COL_TRI(19, 26, 27);
	  COL_TRI(20, 27, 26);
	  COL_TRI(19, 27, 21);
	  COL_TRI(21, 27, 20);
	  COL_TRI(21, 20, 14);
	  COL_TRI(14, 29, 25);
	  COL_TRI(14, 20, 29);
	  COL_TRI(22, 28, 18);
	  COL_TRI(18, 28, 26);
	  COL_TRI(20, 26, 28);
	  COL_TRI(22, 30, 28);
	  COL_TRI(20, 28, 30);
	  COL_TRI(23, 30, 22);
	  COL_TRI(23, 31, 30);
	  COL_TRI(20, 30, 31);
	  COL_TRI(24, 31, 23);
	  COL_TRI(24, 32, 31);
	  COL_TRI(20, 31, 32);
	  COL_TRI(25, 32, 24);
	  COL_TRI(25, 29, 32);
	  COL_TRI(20, 32, 29);
	  COL_TRI(0, 16, 1);
	  COL_TRI_STOP();
	  COL_END();
	}

	function rr_seg7_collision_07029750() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(307, 102, 819);
	  COL_VERTEX(307, 0, -767);
	  COL_VERTEX(307, 102, -818);
	  COL_VERTEX(-306, 0, -767);
	  COL_VERTEX(-306, 102, -818);
	  COL_VERTEX(307, 0, 768);
	  COL_VERTEX(-306, 0, 768);
	  COL_VERTEX(-306, 102, 819);
	  COL_TRI_INIT(SURFACE_DEFAULT, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(2, 1, 3);
	  COL_TRI(2, 3, 4);
	  COL_TRI(4, 0, 2);
	  COL_TRI(0, 5, 1);
	  COL_TRI(1, 6, 3);
	  COL_TRI(1, 5, 6);
	  COL_TRI(4, 3, 6);
	  COL_TRI(4, 7, 0);
	  COL_TRI(4, 6, 7);
	  COL_TRI(7, 5, 0);
	  COL_TRI(7, 6, 5);
	  COL_TRI_STOP();
	  COL_END();
	}

	function rr_seg7_collision_070295F8() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(-409, 0, -306);
	  COL_VERTEX(410, 0, 307);
	  COL_VERTEX(-409, 0, 307);
	  COL_VERTEX(-409, 102, 307);
	  COL_VERTEX(-409, 102, -306);
	  COL_VERTEX(410, 102, 307);
	  COL_VERTEX(410, 102, -306);
	  COL_VERTEX(410, 0, -306);
	  COL_TRI_INIT(SURFACE_DEFAULT, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(2, 3, 4);
	  COL_TRI(2, 4, 0);
	  COL_TRI(1, 3, 2);
	  COL_TRI(3, 5, 6);
	  COL_TRI(3, 6, 4);
	  COL_TRI(1, 5, 3);
	  COL_TRI(0, 4, 6);
	  COL_TRI(0, 6, 7);
	  COL_TRI(0, 7, 1);
	  COL_TRI(7, 5, 1);
	  COL_TRI(7, 6, 5);
	  COL_TRI_STOP();
	  COL_END();
	}

	function rr_seg7_collision_pendulum() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x1C);
	  COL_VERTEX(515, -921, -25);
	  COL_VERTEX(-457, -1023, -25);
	  COL_VERTEX(-508, -921, -25);
	  COL_VERTEX(-457, -1023, 589);
	  COL_VERTEX(-508, -921, 589);
	  COL_VERTEX(463, -1023, 589);
	  COL_VERTEX(515, -921, 589);
	  COL_VERTEX(463, -1023, -25);
	  COL_VERTEX(-48, -921, -76);
	  COL_VERTEX(-48, -1023, -25);
	  COL_VERTEX(-48, -101, -25);
	  COL_VERTEX(54, -921, -76);
	  COL_VERTEX(54, -1023, -25);
	  COL_VERTEX(54, -101, -25);
	  COL_VERTEX(54, -101, -76);
	  COL_VERTEX(-48, -101, -76);
	  COL_VERTEX(-48, 102, -101);
	  COL_VERTEX(-48, 102, 0);
	  COL_VERTEX(-114, 0, -101);
	  COL_VERTEX(-48, -101, -101);
	  COL_VERTEX(54, -101, -101);
	  COL_VERTEX(120, 0, -101);
	  COL_VERTEX(54, 102, -101);
	  COL_VERTEX(54, 102, 0);
	  COL_VERTEX(-114, 0, 0);
	  COL_VERTEX(-48, -101, 0);
	  COL_VERTEX(54, -101, 0);
	  COL_VERTEX(120, 0, 0);
	  COL_TRI_INIT(SURFACE_DEFAULT, 40);
	  COL_TRI(9, 12, 13);
	  COL_TRI(0, 1, 2);
	  COL_TRI(2, 3, 4);
	  COL_TRI(2, 1, 3);
	  COL_TRI(4, 3, 5);
	  COL_TRI(5, 3, 1);
	  COL_TRI(4, 5, 6);
	  COL_TRI(0, 7, 1);
	  COL_TRI(5, 1, 7);
	  COL_TRI(6, 5, 7);
	  COL_TRI(6, 7, 0);
	  COL_TRI(8, 9, 10);
	  COL_TRI(11, 9, 8);
	  COL_TRI(11, 12, 9);
	  COL_TRI(9, 13, 10);
	  COL_TRI(14, 13, 12);
	  COL_TRI(14, 12, 11);
	  COL_TRI(8, 10, 15);
	  COL_TRI(15, 11, 8);
	  COL_TRI(15, 14, 11);
	  COL_TRI(16, 17, 23);
	  COL_TRI(17, 24, 25);
	  COL_TRI(17, 25, 26);
	  COL_TRI(17, 26, 27);
	  COL_TRI(17, 27, 23);
	  COL_TRI(18, 24, 17);
	  COL_TRI(18, 17, 16);
	  COL_TRI(19, 18, 16);
	  COL_TRI(19, 25, 24);
	  COL_TRI(19, 24, 18);
	  COL_TRI(20, 26, 25);
	  COL_TRI(20, 25, 19);
	  COL_TRI(21, 26, 20);
	  COL_TRI(21, 27, 26);
	  COL_TRI(22, 23, 27);
	  COL_TRI(22, 27, 21);
	  COL_TRI(16, 23, 22);
	  COL_TRI(19, 22, 21);
	  COL_TRI(19, 21, 20);
	  COL_TRI(19, 16, 22);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 2);
	  COL_TRI(0, 2, 4);
	  COL_TRI(0, 4, 6);
	  COL_TRI_STOP();
	  COL_END();
	}

	function rr_seg7_collision_07029924() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x40);
	  COL_VERTEX(973, -588, -613);
	  COL_VERTEX(-1023, -588, -613);
	  COL_VERTEX(-1023, -690, -613);
	  COL_VERTEX(973, -690, -613);
	  COL_VERTEX(-767, -588, -634);
	  COL_VERTEX(-665, 461, -634);
	  COL_VERTEX(-767, 461, -634);
	  COL_VERTEX(-665, -588, -634);
	  COL_VERTEX(-357, -588, -634);
	  COL_VERTEX(-255, -588, -634);
	  COL_VERTEX(-255, 256, -634);
	  COL_VERTEX(-357, 256, -634);
	  COL_VERTEX(51, -588, -634);
	  COL_VERTEX(154, 51, -634);
	  COL_VERTEX(51, 51, -634);
	  COL_VERTEX(154, -588, -634);
	  COL_VERTEX(461, -588, -634);
	  COL_VERTEX(973, -153, -634);
	  COL_VERTEX(-511, 614, 205);
	  COL_VERTEX(-921, 614, 205);
	  COL_VERTEX(-716, 410, 0);
	  COL_VERTEX(-511, 410, 205);
	  COL_VERTEX(-306, 205, 0);
	  COL_VERTEX(-101, 410, 205);
	  COL_VERTEX(-101, 205, 205);
	  COL_VERTEX(307, 205, 205);
	  COL_VERTEX(102, 0, 0);
	  COL_VERTEX(717, 0, 205);
	  COL_VERTEX(922, -204, 0);
	  COL_VERTEX(1126, 0, 205);
	  COL_VERTEX(717, -204, 205);
	  COL_VERTEX(307, -204, 205);
	  COL_VERTEX(512, -409, 0);
	  COL_VERTEX(-921, -409, 205);
	  COL_VERTEX(-716, -613, 0);
	  COL_VERTEX(-511, -409, 205);
	  COL_VERTEX(-101, -409, 205);
	  COL_VERTEX(307, -409, 205);
	  COL_VERTEX(102, -613, 0);
	  COL_VERTEX(-511, -204, 205);
	  COL_VERTEX(-306, -409, 0);
	  COL_VERTEX(-101, -204, 205);
	  COL_VERTEX(563, -588, -634);
	  COL_VERTEX(563, -357, -634);
	  COL_VERTEX(461, -357, -634);
	  COL_VERTEX(870, -153, -634);
	  COL_VERTEX(870, -588, -634);
	  COL_VERTEX(973, -588, -634);
	  COL_VERTEX(-511, 614, -204);
	  COL_VERTEX(-921, 614, -204);
	  COL_VERTEX(-511, 410, -204);
	  COL_VERTEX(-101, 410, -204);
	  COL_VERTEX(307, 205, -204);
	  COL_VERTEX(-101, 205, -204);
	  COL_VERTEX(717, 0, -204);
	  COL_VERTEX(1126, 0, -204);
	  COL_VERTEX(717, -204, -204);
	  COL_VERTEX(307, -204, -204);
	  COL_VERTEX(-921, -409, -204);
	  COL_VERTEX(-511, -409, -204);
	  COL_VERTEX(307, -409, -204);
	  COL_VERTEX(-101, -409, -204);
	  COL_VERTEX(-511, -204, -204);
	  COL_VERTEX(-101, -204, -204);
	  COL_TRI_INIT(SURFACE_DEFAULT, 44);
	  COL_TRI(12, 13, 14);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(4, 5, 6);
	  COL_TRI(4, 7, 5);
	  COL_TRI(8, 9, 10);
	  COL_TRI(8, 10, 11);
	  COL_TRI(19, 20, 18);
	  COL_TRI(12, 15, 13);
	  COL_TRI(16, 42, 43);
	  COL_TRI(16, 43, 44);
	  COL_TRI(17, 45, 46);
	  COL_TRI(17, 46, 47);
	  COL_TRI(18, 20, 48);
	  COL_TRI(20, 19, 49);
	  COL_TRI(20, 49, 48);
	  COL_TRI(21, 22, 23);
	  COL_TRI(22, 21, 50);
	  COL_TRI(22, 50, 51);
	  COL_TRI(23, 22, 51);
	  COL_TRI(24, 26, 25);
	  COL_TRI(25, 26, 52);
	  COL_TRI(26, 53, 52);
	  COL_TRI(26, 24, 53);
	  COL_TRI(27, 28, 29);
	  COL_TRI(28, 27, 54);
	  COL_TRI(29, 28, 55);
	  COL_TRI(28, 54, 55);
	  COL_TRI(30, 32, 56);
	  COL_TRI(31, 32, 30);
	  COL_TRI(32, 31, 57);
	  COL_TRI(32, 57, 56);
	  COL_TRI(33, 34, 35);
	  COL_TRI(34, 33, 58);
	  COL_TRI(34, 58, 59);
	  COL_TRI(35, 34, 59);
	  COL_TRI(36, 38, 37);
	  COL_TRI(37, 38, 60);
	  COL_TRI(38, 36, 61);
	  COL_TRI(38, 61, 60);
	  COL_TRI(39, 40, 41);
	  COL_TRI(40, 39, 62);
	  COL_TRI(40, 62, 63);
	  COL_TRI(41, 40, 63);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 16);
	  COL_TRI(39, 41, 63);
	  COL_TRI(21, 23, 51);
	  COL_TRI(21, 51, 50);
	  COL_TRI(19, 18, 48);
	  COL_TRI(19, 48, 49);
	  COL_TRI(33, 35, 59);
	  COL_TRI(33, 59, 58);
	  COL_TRI(27, 55, 54);
	  COL_TRI(39, 63, 62);
	  COL_TRI(36, 60, 61);
	  COL_TRI(36, 37, 60);
	  COL_TRI(31, 30, 56);
	  COL_TRI(31, 56, 57);
	  COL_TRI(27, 29, 55);
	  COL_TRI(24, 25, 52);
	  COL_TRI(24, 52, 53);
	  COL_TRI_STOP();
	  COL_END();
	}

	function rr_seg7_collision_07029C1C() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x48);
	  COL_VERTEX(-101, -255, 205);
	  COL_VERTEX(-306, -204, 0);
	  COL_VERTEX(-511, -255, 205);
	  COL_VERTEX(-101, -255, -204);
	  COL_VERTEX(-511, -255, -204);
	  COL_VERTEX(307, -460, -204);
	  COL_VERTEX(-101, -460, -204);
	  COL_VERTEX(102, -409, 0);
	  COL_VERTEX(307, -460, 205);
	  COL_VERTEX(-101, -460, 205);
	  COL_VERTEX(-511, -460, 205);
	  COL_VERTEX(-716, -409, 0);
	  COL_VERTEX(-921, -460, 205);
	  COL_VERTEX(-511, -460, -204);
	  COL_VERTEX(-921, -460, -204);
	  COL_VERTEX(717, -255, -204);
	  COL_VERTEX(717, -255, 205);
	  COL_VERTEX(307, -255, -204);
	  COL_VERTEX(1126, -50, 205);
	  COL_VERTEX(1126, -50, -204);
	  COL_VERTEX(717, -50, -204);
	  COL_VERTEX(307, 154, -204);
	  COL_VERTEX(307, 154, 205);
	  COL_VERTEX(-101, 154, -204);
	  COL_VERTEX(-101, 358, 205);
	  COL_VERTEX(-101, 358, -204);
	  COL_VERTEX(-511, 358, -204);
	  COL_VERTEX(-511, 563, -204);
	  COL_VERTEX(-921, 563, -204);
	  COL_VERTEX(-511, 563, 205);
	  COL_VERTEX(512, -204, 0);
	  COL_VERTEX(307, -255, 205);
	  COL_VERTEX(922, 0, 0);
	  COL_VERTEX(717, -50, 205);
	  COL_VERTEX(102, 205, 0);
	  COL_VERTEX(-101, 154, 205);
	  COL_VERTEX(-306, 410, 0);
	  COL_VERTEX(-511, 358, 205);
	  COL_VERTEX(-716, 614, 0);
	  COL_VERTEX(-921, 563, 205);
	  COL_VERTEX(-767, -588, -634);
	  COL_VERTEX(-665, -588, -634);
	  COL_VERTEX(-665, 461, -634);
	  COL_VERTEX(-767, 461, -634);
	  COL_VERTEX(-357, -588, -634);
	  COL_VERTEX(-255, -588, -634);
	  COL_VERTEX(-255, 256, -634);
	  COL_VERTEX(-357, 256, -634);
	  COL_VERTEX(51, -588, -634);
	  COL_VERTEX(154, 51, -634);
	  COL_VERTEX(51, 51, -634);
	  COL_VERTEX(154, -588, -634);
	  COL_VERTEX(461, -588, -634);
	  COL_VERTEX(563, -588, -634);
	  COL_VERTEX(563, -357, -634);
	  COL_VERTEX(461, -357, -634);
	  COL_VERTEX(973, -153, -634);
	  COL_VERTEX(973, -588, -613);
	  COL_VERTEX(-306, -409, 0);
	  COL_VERTEX(102, -613, 0);
	  COL_VERTEX(-716, -613, 0);
	  COL_VERTEX(512, -409, 0);
	  COL_VERTEX(922, -204, 0);
	  COL_VERTEX(102, 0, 0);
	  COL_VERTEX(-306, 205, 0);
	  COL_VERTEX(-716, 410, 0);
	  COL_VERTEX(870, -153, -634);
	  COL_VERTEX(870, -588, -634);
	  COL_VERTEX(973, -588, -634);
	  COL_VERTEX(-1023, -588, -613);
	  COL_VERTEX(-1023, -690, -613);
	  COL_VERTEX(973, -690, -613);
	  COL_TRI_INIT(SURFACE_DEFAULT, 44);
	  COL_TRI(52, 53, 54);
	  COL_TRI(40, 41, 42);
	  COL_TRI(40, 42, 43);
	  COL_TRI(44, 45, 46);
	  COL_TRI(44, 46, 47);
	  COL_TRI(48, 49, 50);
	  COL_TRI(48, 51, 49);
	  COL_TRI(2, 58, 0);
	  COL_TRI(52, 54, 55);
	  COL_TRI(56, 66, 67);
	  COL_TRI(56, 67, 68);
	  COL_TRI(57, 69, 70);
	  COL_TRI(57, 70, 71);
	  COL_TRI(0, 58, 3);
	  COL_TRI(58, 2, 4);
	  COL_TRI(58, 4, 3);
	  COL_TRI(9, 59, 8);
	  COL_TRI(59, 9, 6);
	  COL_TRI(59, 6, 5);
	  COL_TRI(8, 59, 5);
	  COL_TRI(12, 60, 10);
	  COL_TRI(10, 60, 13);
	  COL_TRI(60, 12, 14);
	  COL_TRI(60, 14, 13);
	  COL_TRI(61, 31, 17);
	  COL_TRI(31, 61, 16);
	  COL_TRI(61, 17, 15);
	  COL_TRI(16, 61, 15);
	  COL_TRI(18, 62, 19);
	  COL_TRI(33, 62, 18);
	  COL_TRI(62, 20, 19);
	  COL_TRI(62, 33, 20);
	  COL_TRI(35, 63, 22);
	  COL_TRI(63, 35, 23);
	  COL_TRI(63, 23, 21);
	  COL_TRI(22, 63, 21);
	  COL_TRI(37, 64, 24);
	  COL_TRI(24, 64, 25);
	  COL_TRI(64, 26, 25);
	  COL_TRI(64, 37, 26);
	  COL_TRI(39, 65, 29);
	  COL_TRI(65, 39, 28);
	  COL_TRI(65, 28, 27);
	  COL_TRI(29, 65, 27);
	  COL_TRI_INIT(SURFACE_VERY_SLIPPERY, 32);
	  COL_TRI(0, 1, 2);
	  COL_TRI(3, 1, 0);
	  COL_TRI(3, 4, 1);
	  COL_TRI(4, 2, 1);
	  COL_TRI(5, 6, 7);
	  COL_TRI(5, 7, 8);
	  COL_TRI(8, 7, 9);
	  COL_TRI(6, 9, 7);
	  COL_TRI(10, 11, 12);
	  COL_TRI(13, 11, 10);
	  COL_TRI(13, 14, 11);
	  COL_TRI(14, 12, 11);
	  COL_TRI(15, 30, 16);
	  COL_TRI(15, 17, 30);
	  COL_TRI(16, 30, 31);
	  COL_TRI(17, 31, 30);
	  COL_TRI(18, 32, 33);
	  COL_TRI(19, 32, 18);
	  COL_TRI(19, 20, 32);
	  COL_TRI(20, 33, 32);
	  COL_TRI(21, 23, 34);
	  COL_TRI(21, 34, 22);
	  COL_TRI(22, 34, 35);
	  COL_TRI(23, 35, 34);
	  COL_TRI(24, 36, 37);
	  COL_TRI(25, 36, 24);
	  COL_TRI(26, 37, 36);
	  COL_TRI(25, 26, 36);
	  COL_TRI(27, 38, 29);
	  COL_TRI(27, 28, 38);
	  COL_TRI(28, 39, 38);
	  COL_TRI(29, 38, 39);
	  COL_TRI_STOP();
	  COL_END();
	}

	function rr_seg7_collision_07029FA4() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x48);
	  COL_VERTEX(-101, -306, 205);
	  COL_VERTEX(-306, -178, 0);
	  COL_VERTEX(-511, -306, 205);
	  COL_VERTEX(-101, -306, -204);
	  COL_VERTEX(-511, -306, -204);
	  COL_VERTEX(307, -511, -204);
	  COL_VERTEX(-101, -511, -204);
	  COL_VERTEX(102, -383, 0);
	  COL_VERTEX(307, -511, 205);
	  COL_VERTEX(-101, -511, 205);
	  COL_VERTEX(-511, -511, 205);
	  COL_VERTEX(-716, -383, 0);
	  COL_VERTEX(-921, -511, 205);
	  COL_VERTEX(-511, -511, -204);
	  COL_VERTEX(-921, -511, -204);
	  COL_VERTEX(717, -306, -204);
	  COL_VERTEX(717, -306, 205);
	  COL_VERTEX(307, -306, -204);
	  COL_VERTEX(1126, -101, 205);
	  COL_VERTEX(1126, -101, -204);
	  COL_VERTEX(717, -101, -204);
	  COL_VERTEX(307, 102, -204);
	  COL_VERTEX(307, 102, 205);
	  COL_VERTEX(-101, 102, -204);
	  COL_VERTEX(-101, 307, 205);
	  COL_VERTEX(-101, 307, -204);
	  COL_VERTEX(-511, 307, -204);
	  COL_VERTEX(-511, 512, -204);
	  COL_VERTEX(-921, 512, -204);
	  COL_VERTEX(-511, 512, 205);
	  COL_VERTEX(512, -178, 0);
	  COL_VERTEX(307, -306, 205);
	  COL_VERTEX(922, 26, 0);
	  COL_VERTEX(717, -101, 205);
	  COL_VERTEX(102, 230, 0);
	  COL_VERTEX(-101, 102, 205);
	  COL_VERTEX(-306, 435, 0);
	  COL_VERTEX(-511, 307, 205);
	  COL_VERTEX(-716, 640, 0);
	  COL_VERTEX(-921, 512, 205);
	  COL_VERTEX(-767, -588, -634);
	  COL_VERTEX(-665, -588, -634);
	  COL_VERTEX(-665, 461, -634);
	  COL_VERTEX(-767, 461, -634);
	  COL_VERTEX(-357, -588, -634);
	  COL_VERTEX(-255, -588, -634);
	  COL_VERTEX(-255, 256, -634);
	  COL_VERTEX(-357, 256, -634);
	  COL_VERTEX(51, -588, -634);
	  COL_VERTEX(154, 51, -634);
	  COL_VERTEX(51, 51, -634);
	  COL_VERTEX(154, -588, -634);
	  COL_VERTEX(461, -588, -634);
	  COL_VERTEX(563, -588, -634);
	  COL_VERTEX(563, -357, -634);
	  COL_VERTEX(461, -357, -634);
	  COL_VERTEX(973, -153, -634);
	  COL_VERTEX(973, -588, -613);
	  COL_VERTEX(-306, -409, 0);
	  COL_VERTEX(102, -613, 0);
	  COL_VERTEX(-716, -613, 0);
	  COL_VERTEX(512, -409, 0);
	  COL_VERTEX(922, -204, 0);
	  COL_VERTEX(102, 0, 0);
	  COL_VERTEX(-306, 205, 0);
	  COL_VERTEX(-716, 410, 0);
	  COL_VERTEX(870, -153, -634);
	  COL_VERTEX(870, -588, -634);
	  COL_VERTEX(973, -588, -634);
	  COL_VERTEX(-1023, -588, -613);
	  COL_VERTEX(-1023, -690, -613);
	  COL_VERTEX(973, -690, -613);
	  COL_TRI_INIT(SURFACE_DEFAULT, 44);
	  COL_TRI(52, 53, 54);
	  COL_TRI(40, 41, 42);
	  COL_TRI(40, 42, 43);
	  COL_TRI(44, 45, 46);
	  COL_TRI(44, 46, 47);
	  COL_TRI(48, 49, 50);
	  COL_TRI(48, 51, 49);
	  COL_TRI(2, 58, 0);
	  COL_TRI(52, 54, 55);
	  COL_TRI(56, 66, 67);
	  COL_TRI(56, 67, 68);
	  COL_TRI(57, 69, 70);
	  COL_TRI(57, 70, 71);
	  COL_TRI(0, 58, 3);
	  COL_TRI(58, 2, 4);
	  COL_TRI(58, 4, 3);
	  COL_TRI(9, 59, 8);
	  COL_TRI(59, 9, 6);
	  COL_TRI(59, 6, 5);
	  COL_TRI(8, 59, 5);
	  COL_TRI(12, 60, 10);
	  COL_TRI(10, 60, 13);
	  COL_TRI(60, 12, 14);
	  COL_TRI(60, 14, 13);
	  COL_TRI(61, 31, 17);
	  COL_TRI(31, 61, 16);
	  COL_TRI(61, 17, 15);
	  COL_TRI(16, 61, 15);
	  COL_TRI(18, 62, 19);
	  COL_TRI(33, 62, 18);
	  COL_TRI(62, 20, 19);
	  COL_TRI(62, 33, 20);
	  COL_TRI(35, 63, 22);
	  COL_TRI(63, 35, 23);
	  COL_TRI(63, 23, 21);
	  COL_TRI(22, 63, 21);
	  COL_TRI(37, 64, 24);
	  COL_TRI(24, 64, 25);
	  COL_TRI(64, 26, 25);
	  COL_TRI(64, 37, 26);
	  COL_TRI(39, 65, 29);
	  COL_TRI(65, 39, 28);
	  COL_TRI(65, 28, 27);
	  COL_TRI(29, 65, 27);
	  COL_TRI_INIT(SURFACE_VERY_SLIPPERY, 32);
	  COL_TRI(0, 1, 2);
	  COL_TRI(3, 1, 0);
	  COL_TRI(3, 4, 1);
	  COL_TRI(4, 2, 1);
	  COL_TRI(5, 6, 7);
	  COL_TRI(5, 7, 8);
	  COL_TRI(8, 7, 9);
	  COL_TRI(6, 9, 7);
	  COL_TRI(10, 11, 12);
	  COL_TRI(13, 11, 10);
	  COL_TRI(13, 14, 11);
	  COL_TRI(14, 12, 11);
	  COL_TRI(15, 30, 16);
	  COL_TRI(15, 17, 30);
	  COL_TRI(16, 30, 31);
	  COL_TRI(17, 31, 30);
	  COL_TRI(18, 32, 33);
	  COL_TRI(19, 32, 18);
	  COL_TRI(19, 20, 32);
	  COL_TRI(20, 33, 32);
	  COL_TRI(21, 23, 34);
	  COL_TRI(21, 34, 22);
	  COL_TRI(22, 34, 35);
	  COL_TRI(23, 35, 34);
	  COL_TRI(24, 36, 37);
	  COL_TRI(25, 36, 24);
	  COL_TRI(26, 37, 36);
	  COL_TRI(25, 26, 36);
	  COL_TRI(27, 38, 29);
	  COL_TRI(27, 28, 38);
	  COL_TRI(28, 39, 38);
	  COL_TRI(29, 38, 39);
	  COL_TRI_STOP();
	  COL_END();
	}

	function rr_seg7_collision_0702A32C() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x48);
	  COL_VERTEX(-101, -357, 205);
	  COL_VERTEX(-306, -153, 0);
	  COL_VERTEX(-511, -357, 205);
	  COL_VERTEX(-101, -357, -204);
	  COL_VERTEX(-511, -357, -204);
	  COL_VERTEX(307, -562, -204);
	  COL_VERTEX(-101, -562, -204);
	  COL_VERTEX(102, -357, 0);
	  COL_VERTEX(307, -562, 205);
	  COL_VERTEX(-101, -562, 205);
	  COL_VERTEX(-511, -562, 205);
	  COL_VERTEX(-716, -357, 0);
	  COL_VERTEX(-921, -562, 205);
	  COL_VERTEX(-511, -562, -204);
	  COL_VERTEX(-921, -562, -204);
	  COL_VERTEX(717, -357, -204);
	  COL_VERTEX(717, -357, 205);
	  COL_VERTEX(307, -357, -204);
	  COL_VERTEX(1126, -153, 205);
	  COL_VERTEX(1126, -153, -204);
	  COL_VERTEX(717, -153, -204);
	  COL_VERTEX(307, 51, -204);
	  COL_VERTEX(307, 51, 205);
	  COL_VERTEX(-101, 51, -204);
	  COL_VERTEX(-101, 256, 205);
	  COL_VERTEX(-101, 256, -204);
	  COL_VERTEX(-511, 256, -204);
	  COL_VERTEX(-511, 461, -204);
	  COL_VERTEX(-921, 461, -204);
	  COL_VERTEX(-511, 461, 205);
	  COL_VERTEX(512, -153, 0);
	  COL_VERTEX(307, -357, 205);
	  COL_VERTEX(922, 51, 0);
	  COL_VERTEX(717, -153, 205);
	  COL_VERTEX(102, 256, 0);
	  COL_VERTEX(-101, 51, 205);
	  COL_VERTEX(-306, 461, 0);
	  COL_VERTEX(-511, 256, 205);
	  COL_VERTEX(-716, 666, 0);
	  COL_VERTEX(-921, 461, 205);
	  COL_VERTEX(-767, -588, -634);
	  COL_VERTEX(-665, -588, -634);
	  COL_VERTEX(-665, 461, -634);
	  COL_VERTEX(-767, 461, -634);
	  COL_VERTEX(-357, -588, -634);
	  COL_VERTEX(-255, -588, -634);
	  COL_VERTEX(-255, 256, -634);
	  COL_VERTEX(-357, 256, -634);
	  COL_VERTEX(51, -588, -634);
	  COL_VERTEX(154, 51, -634);
	  COL_VERTEX(51, 51, -634);
	  COL_VERTEX(154, -588, -634);
	  COL_VERTEX(461, -588, -634);
	  COL_VERTEX(563, -588, -634);
	  COL_VERTEX(563, -357, -634);
	  COL_VERTEX(461, -357, -634);
	  COL_VERTEX(973, -153, -634);
	  COL_VERTEX(973, -588, -613);
	  COL_VERTEX(-306, -409, 0);
	  COL_VERTEX(102, -613, 0);
	  COL_VERTEX(-716, -613, 0);
	  COL_VERTEX(512, -409, 0);
	  COL_VERTEX(922, -204, 0);
	  COL_VERTEX(102, 0, 0);
	  COL_VERTEX(-306, 205, 0);
	  COL_VERTEX(-716, 410, 0);
	  COL_VERTEX(870, -153, -634);
	  COL_VERTEX(870, -588, -634);
	  COL_VERTEX(973, -588, -634);
	  COL_VERTEX(-1023, -588, -613);
	  COL_VERTEX(-1023, -690, -613);
	  COL_VERTEX(973, -690, -613);
	  COL_TRI_INIT(SURFACE_DEFAULT, 44);
	  COL_TRI(52, 53, 54);
	  COL_TRI(40, 41, 42);
	  COL_TRI(40, 42, 43);
	  COL_TRI(44, 45, 46);
	  COL_TRI(44, 46, 47);
	  COL_TRI(48, 49, 50);
	  COL_TRI(48, 51, 49);
	  COL_TRI(2, 58, 0);
	  COL_TRI(52, 54, 55);
	  COL_TRI(56, 66, 67);
	  COL_TRI(56, 67, 68);
	  COL_TRI(57, 69, 70);
	  COL_TRI(57, 70, 71);
	  COL_TRI(0, 58, 3);
	  COL_TRI(58, 2, 4);
	  COL_TRI(58, 4, 3);
	  COL_TRI(9, 59, 8);
	  COL_TRI(59, 9, 6);
	  COL_TRI(59, 6, 5);
	  COL_TRI(8, 59, 5);
	  COL_TRI(12, 60, 10);
	  COL_TRI(10, 60, 13);
	  COL_TRI(60, 12, 14);
	  COL_TRI(60, 14, 13);
	  COL_TRI(61, 31, 17);
	  COL_TRI(31, 61, 16);
	  COL_TRI(61, 17, 15);
	  COL_TRI(16, 61, 15);
	  COL_TRI(18, 62, 19);
	  COL_TRI(33, 62, 18);
	  COL_TRI(62, 20, 19);
	  COL_TRI(62, 33, 20);
	  COL_TRI(35, 63, 22);
	  COL_TRI(63, 35, 23);
	  COL_TRI(63, 23, 21);
	  COL_TRI(22, 63, 21);
	  COL_TRI(37, 64, 24);
	  COL_TRI(24, 64, 25);
	  COL_TRI(64, 26, 25);
	  COL_TRI(64, 37, 26);
	  COL_TRI(39, 65, 29);
	  COL_TRI(65, 39, 28);
	  COL_TRI(65, 28, 27);
	  COL_TRI(29, 65, 27);
	  COL_TRI_INIT(SURFACE_VERY_SLIPPERY, 32);
	  COL_TRI(0, 1, 2);
	  COL_TRI(3, 1, 0);
	  COL_TRI(3, 4, 1);
	  COL_TRI(4, 2, 1);
	  COL_TRI(5, 6, 7);
	  COL_TRI(5, 7, 8);
	  COL_TRI(8, 7, 9);
	  COL_TRI(6, 9, 7);
	  COL_TRI(10, 11, 12);
	  COL_TRI(13, 11, 10);
	  COL_TRI(13, 14, 11);
	  COL_TRI(14, 12, 11);
	  COL_TRI(15, 30, 16);
	  COL_TRI(15, 17, 30);
	  COL_TRI(16, 30, 31);
	  COL_TRI(17, 31, 30);
	  COL_TRI(18, 32, 33);
	  COL_TRI(19, 32, 18);
	  COL_TRI(19, 20, 32);
	  COL_TRI(20, 33, 32);
	  COL_TRI(21, 23, 34);
	  COL_TRI(21, 34, 22);
	  COL_TRI(22, 34, 35);
	  COL_TRI(23, 35, 34);
	  COL_TRI(24, 36, 37);
	  COL_TRI(25, 36, 24);
	  COL_TRI(26, 37, 36);
	  COL_TRI(25, 26, 36);
	  COL_TRI(27, 38, 29);
	  COL_TRI(27, 28, 38);
	  COL_TRI(28, 39, 38);
	  COL_TRI(29, 38, 39);
	  COL_TRI_STOP();
	  COL_END();
	}

	function rr_seg7_collision_0702A6B4() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x3F);
	  COL_VERTEX(-511, 410, 205);
	  COL_VERTEX(-716, 691, 0);
	  COL_VERTEX(-921, 410, 205);
	  COL_VERTEX(-511, 410, -204);
	  COL_VERTEX(-921, 410, -204);
	  COL_VERTEX(-101, 205, -204);
	  COL_VERTEX(-511, 205, -204);
	  COL_VERTEX(-306, 486, 0);
	  COL_VERTEX(-101, 205, 205);
	  COL_VERTEX(-511, 205, 205);
	  COL_VERTEX(307, 0, 205);
	  COL_VERTEX(102, 282, 0);
	  COL_VERTEX(-101, 0, 205);
	  COL_VERTEX(307, 0, -204);
	  COL_VERTEX(-101, 0, -204);
	  COL_VERTEX(1126, -204, -204);
	  COL_VERTEX(1126, -204, 205);
	  COL_VERTEX(717, -204, -204);
	  COL_VERTEX(717, -409, -204);
	  COL_VERTEX(717, -409, 205);
	  COL_VERTEX(307, -409, -204);
	  COL_VERTEX(-511, -613, -204);
	  COL_VERTEX(-921, -613, -204);
	  COL_VERTEX(-511, -613, 205);
	  COL_VERTEX(307, -613, -204);
	  COL_VERTEX(307, -613, 205);
	  COL_VERTEX(-101, -613, -204);
	  COL_VERTEX(-101, -409, -204);
	  COL_VERTEX(-511, -409, -204);
	  COL_VERTEX(-101, -409, 205);
	  COL_VERTEX(922, 77, 0);
	  COL_VERTEX(717, -204, 205);
	  COL_VERTEX(512, -127, 0);
	  COL_VERTEX(307, -409, 205);
	  COL_VERTEX(-716, -332, 0);
	  COL_VERTEX(-921, -613, 205);
	  COL_VERTEX(102, -332, 0);
	  COL_VERTEX(-101, -613, 205);
	  COL_VERTEX(-306, -127, 0);
	  COL_VERTEX(-511, -409, 205);
	  COL_VERTEX(973, -588, -634);
	  COL_VERTEX(973, -153, -634);
	  COL_VERTEX(461, -588, -634);
	  COL_VERTEX(51, -588, -634);
	  COL_VERTEX(-357, -588, -634);
	  COL_VERTEX(-767, -588, -634);
	  COL_VERTEX(-1023, -690, -634);
	  COL_VERTEX(973, -690, -634);
	  COL_VERTEX(-1023, -588, -634);
	  COL_VERTEX(870, -588, -634);
	  COL_VERTEX(870, -153, -634);
	  COL_VERTEX(563, -588, -634);
	  COL_VERTEX(563, -357, -634);
	  COL_VERTEX(461, -357, -634);
	  COL_VERTEX(154, -588, -634);
	  COL_VERTEX(154, 51, -634);
	  COL_VERTEX(51, 51, -634);
	  COL_VERTEX(-255, -588, -634);
	  COL_VERTEX(-255, 256, -634);
	  COL_VERTEX(-357, 256, -634);
	  COL_VERTEX(-665, 461, -634);
	  COL_VERTEX(-767, 461, -634);
	  COL_VERTEX(-665, -588, -634);
	  COL_TRI_INIT(SURFACE_DEFAULT, 28);
	  COL_TRI(16, 31, 17);
	  COL_TRI(25, 37, 26);
	  COL_TRI(25, 26, 24);
	  COL_TRI(29, 28, 27);
	  COL_TRI(29, 39, 28);
	  COL_TRI(23, 22, 21);
	  COL_TRI(23, 35, 22);
	  COL_TRI(8, 9, 6);
	  COL_TRI(16, 17, 15);
	  COL_TRI(19, 20, 18);
	  COL_TRI(19, 33, 20);
	  COL_TRI(10, 14, 13);
	  COL_TRI(10, 12, 14);
	  COL_TRI(8, 6, 5);
	  COL_TRI(40, 46, 47);
	  COL_TRI(40, 48, 46);
	  COL_TRI(41, 49, 40);
	  COL_TRI(41, 50, 49);
	  COL_TRI(42, 51, 52);
	  COL_TRI(42, 52, 53);
	  COL_TRI(43, 54, 55);
	  COL_TRI(43, 55, 56);
	  COL_TRI(44, 57, 58);
	  COL_TRI(44, 58, 59);
	  COL_TRI(45, 60, 61);
	  COL_TRI(45, 62, 60);
	  COL_TRI(0, 2, 4);
	  COL_TRI(0, 4, 3);
	  COL_TRI_INIT(SURFACE_VERY_SLIPPERY, 32);
	  COL_TRI(0, 1, 2);
	  COL_TRI(3, 1, 0);
	  COL_TRI(4, 2, 1);
	  COL_TRI(3, 4, 1);
	  COL_TRI(5, 6, 7);
	  COL_TRI(5, 7, 8);
	  COL_TRI(8, 7, 9);
	  COL_TRI(6, 9, 7);
	  COL_TRI(10, 11, 12);
	  COL_TRI(13, 11, 10);
	  COL_TRI(14, 12, 11);
	  COL_TRI(13, 14, 11);
	  COL_TRI(15, 17, 30);
	  COL_TRI(15, 30, 16);
	  COL_TRI(16, 30, 31);
	  COL_TRI(17, 31, 30);
	  COL_TRI(18, 32, 19);
	  COL_TRI(19, 32, 33);
	  COL_TRI(18, 20, 32);
	  COL_TRI(20, 33, 32);
	  COL_TRI(21, 34, 23);
	  COL_TRI(21, 22, 34);
	  COL_TRI(22, 35, 34);
	  COL_TRI(23, 34, 35);
	  COL_TRI(24, 36, 25);
	  COL_TRI(25, 36, 37);
	  COL_TRI(26, 37, 36);
	  COL_TRI(24, 26, 36);
	  COL_TRI(27, 38, 29);
	  COL_TRI(27, 28, 38);
	  COL_TRI(28, 39, 38);
	  COL_TRI(29, 38, 39);
	  COL_TRI_STOP();
	  COL_END();
	}

	var rr = [
	  rr_seg7_collision_level,
	  rr_seg7_collision_level_VERSION_JP,
	  rr_seg7_collision_donut_platform,
	  rr_seg7_collision_elevator_platform,
	  rr_seg7_collision_07029038,
	  rr_seg7_collision_07029858,
	  rr_seg7_collision_07029508,
	  rr_seg7_collision_0702967C,
	  rr_seg7_collision_rotating_platform_with_fire,
	  rr_seg7_collision_07029750,
	  rr_seg7_collision_070295F8,
	  rr_seg7_collision_pendulum,
	  rr_seg7_collision_07029924,
	  rr_seg7_collision_07029C1C,
	  rr_seg7_collision_07029FA4,
	  rr_seg7_collision_0702A32C,
	  rr_seg7_collision_0702A6B4
	];

	function sa_seg7_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x30);
	  COL_VERTEX(-2661, 0, 3072);
	  COL_VERTEX(2662, 0, 3072);
	  COL_VERTEX(2662, -4607, 3072);
	  COL_VERTEX(-2661, -4607, 3072);
	  COL_VERTEX(2662, 0, -3071);
	  COL_VERTEX(-2661, 0, -3071);
	  COL_VERTEX(-2661, -4607, -3071);
	  COL_VERTEX(2662, -4607, -3071);
	  COL_VERTEX(-3071, 0, -2661);
	  COL_VERTEX(-3071, 0, 2662);
	  COL_VERTEX(-3071, -4607, 2662);
	  COL_VERTEX(-3071, -4607, -2661);
	  COL_VERTEX(3072, 0, 2662);
	  COL_VERTEX(3072, -4607, -2661);
	  COL_VERTEX(3072, -4607, 2662);
	  COL_VERTEX(3072, 0, -2661);
	  COL_VERTEX(3072, 0, 3072);
	  COL_VERTEX(-3071, -4607, 3072);
	  COL_VERTEX(512, -4607, -511);
	  COL_VERTEX(-511, -4607, -511);
	  COL_VERTEX(307, -4402, -306);
	  COL_VERTEX(-511, -4607, 512);
	  COL_VERTEX(512, -4607, 512);
	  COL_VERTEX(-2866, -4607, 2662);
	  COL_VERTEX(-2661, -4607, 2867);
	  COL_VERTEX(-2661, -4607, -2866);
	  COL_VERTEX(-2866, -4607, -2661);
	  COL_VERTEX(2867, -4607, -2661);
	  COL_VERTEX(2662, -4607, -2866);
	  COL_VERTEX(2662, -4607, 2867);
	  COL_VERTEX(2867, -4607, 2662);
	  COL_VERTEX(-3071, 0, -3071);
	  COL_VERTEX(3072, 0, -3071);
	  COL_VERTEX(-3071, 0, 3072);
	  COL_VERTEX(3072, -4607, 3072);
	  COL_VERTEX(-3071, -4607, -3071);
	  COL_VERTEX(3072, -4607, -3071);
	  COL_VERTEX(-306, -4402, 307);
	  COL_VERTEX(307, -4402, 307);
	  COL_VERTEX(-306, -4402, -306);
	  COL_VERTEX(-2866, 0, 2662);
	  COL_VERTEX(-2661, 0, 2867);
	  COL_VERTEX(-2661, 0, -2866);
	  COL_VERTEX(-2866, 0, -2661);
	  COL_VERTEX(2867, 0, -2661);
	  COL_VERTEX(2662, 0, -2866);
	  COL_VERTEX(2662, 0, 2867);
	  COL_VERTEX(2867, 0, 2662);
	  COL_TRI_INIT(SURFACE_DEFAULT, 52);
	  COL_TRI(12, 13, 14);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(4, 5, 6);
	  COL_TRI(4, 6, 7);
	  COL_TRI(8, 9, 10);
	  COL_TRI(8, 10, 11);
	  COL_TRI(17, 19, 35);
	  COL_TRI(12, 15, 13);
	  COL_TRI(16, 31, 32);
	  COL_TRI(16, 33, 31);
	  COL_TRI(17, 34, 22);
	  COL_TRI(17, 22, 21);
	  COL_TRI(17, 21, 19);
	  COL_TRI(21, 39, 19);
	  COL_TRI(18, 22, 34);
	  COL_TRI(18, 34, 36);
	  COL_TRI(19, 18, 36);
	  COL_TRI(19, 36, 35);
	  COL_TRI(20, 37, 38);
	  COL_TRI(19, 39, 20);
	  COL_TRI(19, 20, 18);
	  COL_TRI(18, 20, 38);
	  COL_TRI(20, 39, 37);
	  COL_TRI(21, 37, 39);
	  COL_TRI(24, 0, 3);
	  COL_TRI(22, 38, 37);
	  COL_TRI(22, 37, 21);
	  COL_TRI(18, 38, 22);
	  COL_TRI(10, 9, 40);
	  COL_TRI(10, 40, 23);
	  COL_TRI(23, 40, 41);
	  COL_TRI(23, 41, 24);
	  COL_TRI(24, 41, 0);
	  COL_TRI(27, 44, 45);
	  COL_TRI(6, 5, 42);
	  COL_TRI(6, 42, 25);
	  COL_TRI(25, 42, 43);
	  COL_TRI(25, 43, 26);
	  COL_TRI(26, 43, 8);
	  COL_TRI(26, 8, 11);
	  COL_TRI(13, 15, 44);
	  COL_TRI(13, 44, 27);
	  COL_TRI(30, 12, 14);
	  COL_TRI(27, 45, 28);
	  COL_TRI(28, 45, 4);
	  COL_TRI(28, 4, 7);
	  COL_TRI(2, 1, 46);
	  COL_TRI(2, 46, 29);
	  COL_TRI(29, 46, 47);
	  COL_TRI(29, 47, 30);
	  COL_TRI(30, 47, 12);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(1);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start, /*pos*/ 0, -1535, 0, /*yaw*/ 64); // unused, probably an early way to set initial position
	  COL_WATER_BOX_INIT(1);
	  COL_WATER_BOX(0, -3173, -3173, 3174, 3174, 102);
	  COL_END();
	}

	var sa = [
	  sa_seg7_collision
	];

	function sl_seg7_area_1_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x202);
	  COL_VERTEX(4786, 1229, 5078);
	  COL_VERTEX(4582, 1229, 5078);
	  COL_VERTEX(4582, 1229, 4873);
	  COL_VERTEX(4786, 1229, 4873);
	  COL_VERTEX(4582, 1229, 4666);
	  COL_VERTEX(4786, 1229, 4054);
	  COL_VERTEX(4786, 1229, 4668);
	  COL_VERTEX(4582, 1229, 4054);
	  COL_VERTEX(4274, 1434, 4259);
	  COL_VERTEX(4070, 1434, 4259);
	  COL_VERTEX(4070, 1434, 4054);
	  COL_VERTEX(4274, 1434, 4054);
	  COL_VERTEX(4377, 1434, 5078);
	  COL_VERTEX(4377, 1434, 4668);
	  COL_VERTEX(4582, 1434, 4873);
	  COL_VERTEX(4582, 1434, 5078);
	  COL_VERTEX(3967, 1434, 4873);
	  COL_VERTEX(1725, 3328, 260);
	  COL_VERTEX(1753, 3174, 78);
	  COL_VERTEX(1753, 3072, 78);
	  COL_VERTEX(63, 3226, 1704);
	  COL_VERTEX(-327, 3564, 1450);
	  COL_VERTEX(365, 3308, 2052);
	  COL_VERTEX(-440, 3360, 1636);
	  COL_VERTEX(63, 3328, 1704);
	  COL_VERTEX(365, 3328, 2052);
	  COL_VERTEX(2037, 3174, 278);
	  COL_VERTEX(2037, 3072, 278);
	  COL_VERTEX(768, 1249, -5375);
	  COL_VERTEX(-522, 1352, -5052);
	  COL_VERTEX(-200, 1352, -3761);
	  COL_VERTEX(1091, 1352, -4084);
	  COL_VERTEX(-587, 3564, 1793);
	  COL_VERTEX(-589, 3584, 1792);
	  COL_VERTEX(-608, 3564, 1786);
	  COL_VERTEX(-327, 3584, 1450);
	  COL_VERTEX(0, 3584, 1024);
	  COL_VERTEX(-156, 3584, 1228);
	  COL_VERTEX(-703, 3584, 1173);
	  COL_VERTEX(-346, 3840, 1124);
	  COL_VERTEX(-703, 3738, 1173);
	  COL_VERTEX(-243, 3308, 2011);
	  COL_VERTEX(-243, 3226, 2011);
	  COL_VERTEX(-243, 3328, 2011);
	  COL_VERTEX(66, 3308, 2176);
	  COL_VERTEX(1195, 2210, 384);
	  COL_VERTEX(1323, 2185, 469);
	  COL_VERTEX(1408, 2185, 341);
	  COL_VERTEX(1408, 2364, -170);
	  COL_VERTEX(1763, 2534, -560);
	  COL_VERTEX(1408, 2338, -170);
	  COL_VERTEX(1635, 2304, -646);
	  COL_VERTEX(1280, 2108, -255);
	  COL_VERTEX(1848, 2560, -688);
	  COL_VERTEX(1848, 2534, -688);
	  COL_VERTEX(-3634, 1382, 4096);
	  COL_VERTEX(-3634, 768, 4096);
	  COL_VERTEX(4378, 307, 1062);
	  COL_VERTEX(1919, 2108, 682);
	  COL_VERTEX(1308, 2108, 1473);
	  COL_VERTEX(1280, 1400, 256);
	  COL_VERTEX(1895, 3174, -132);
	  COL_VERTEX(1453, 2970, -444);
	  COL_VERTEX(1280, 3072, -255);
	  COL_VERTEX(1195, 2108, 384);
	  COL_VERTEX(1919, 1903, 682);
	  COL_VERTEX(-4044, 1024, 572);
	  COL_VERTEX(-3756, 1024, 2637);
	  COL_VERTEX(-403, 819, 1818);
	  COL_VERTEX(-3439, 1024, 1818);
	  COL_VERTEX(-3551, 1024, 2330);
	  COL_VERTEX(875, 1024, 2330);
	  COL_VERTEX(875, 1536, 2626);
	  COL_VERTEX(504, 2253, 1426);
	  COL_VERTEX(405, 2253, 1450);
	  COL_VERTEX(499, 2324, 1427);
	  COL_VERTEX(389, 2273, 1275);
	  COL_VERTEX(396, 2288, 1304);
	  COL_VERTEX(388, 2275, 1306);
	  COL_VERTEX(371, 2253, 1310);
	  COL_VERTEX(371, 2150, 1310);
	  COL_VERTEX(471, 2253, 1286);
	  COL_VERTEX(488, 2324, 1250);
	  COL_VERTEX(525, 2324, 1273);
	  COL_VERTEX(636, 2273, 1425);
	  COL_VERTEX(537, 2324, 1449);
	  COL_VERTEX(644, 2273, 1392);
	  COL_VERTEX(636, 2253, 1425);
	  COL_VERTEX(636, 2150, 1425);
	  COL_VERTEX(662, 2150, 1314);
	  COL_VERTEX(662, 2253, 1314);
	  COL_VERTEX(588, 2150, 1226);
	  COL_VERTEX(588, 2253, 1226);
	  COL_VERTEX(476, 2150, 1201);
	  COL_VERTEX(476, 2253, 1201);
	  COL_VERTEX(588, 2273, 1226);
	  COL_VERTEX(610, 2273, 1252);
	  COL_VERTEX(389, 2253, 1275);
	  COL_VERTEX(389, 2150, 1275);
	  COL_VERTEX(549, 2253, 1499);
	  COL_VERTEX(549, 2150, 1499);
	  COL_VERTEX(437, 2273, 1474);
	  COL_VERTEX(422, 2275, 1445);
	  COL_VERTEX(437, 2253, 1474);
	  COL_VERTEX(437, 2150, 1474);
	  COL_VERTEX(4172, 1434, 4668);
	  COL_VERTEX(4172, 1434, 4873);
	  COL_VERTEX(3967, 1434, 4668);
	  COL_VERTEX(4786, 1434, 4668);
	  COL_VERTEX(4786, 1434, 4873);
	  COL_VERTEX(1725, 3226, 260);
	  COL_VERTEX(365, 3226, 2052);
	  COL_VERTEX(66, 3226, 2176);
	  COL_VERTEX(63, 3308, 1704);
	  COL_VERTEX(2027, 3226, 608);
	  COL_VERTEX(2027, 3328, 608);
	  COL_VERTEX(1895, 3072, -132);
	  COL_VERTEX(-522, 1249, -5052);
	  COL_VERTEX(768, 1352, -5375);
	  COL_VERTEX(-200, 1249, -3761);
	  COL_VERTEX(1091, 1249, -4084);
	  COL_VERTEX(-602, 3584, 1808);
	  COL_VERTEX(-767, 3584, 768);
	  COL_VERTEX(-3, 3564, 1029);
	  COL_VERTEX(0, 3840, 1024);
	  COL_VERTEX(-769, 3564, 774);
	  COL_VERTEX(-156, 3840, 1228);
	  COL_VERTEX(-767, 3738, 768);
	  COL_VERTEX(-589, 3738, 1043);
	  COL_VERTEX(-589, 3584, 1043);
	  COL_VERTEX(66, 3328, 2176);
	  COL_VERTEX(1195, 2185, 384);
	  COL_VERTEX(1323, 2210, 469);
	  COL_VERTEX(1408, 2210, 341);
	  COL_VERTEX(1280, 2108, 256);
	  COL_VERTEX(1763, 2560, -560);
	  COL_VERTEX(1740, 2534, -760);
	  COL_VERTEX(1740, 2466, -760);
	  COL_VERTEX(1740, 2560, -760);
	  COL_VERTEX(-6143, 1382, 4096);
	  COL_VERTEX(-6143, 768, 4096);
	  COL_VERTEX(4582, 307, 1267);
	  COL_VERTEX(4582, 307, 1062);
	  COL_VERTEX(4378, 307, 1267);
	  COL_VERTEX(1308, 1741, 1473);
	  COL_VERTEX(2175, 1024, 852);
	  COL_VERTEX(1408, 2108, 341);
	  COL_VERTEX(1453, 3072, -444);
	  COL_VERTEX(1323, 2108, 469);
	  COL_VERTEX(2175, 1903, 852);
	  COL_VERTEX(-4035, 768, 445);
	  COL_VERTEX(-4201, 819, 2833);
	  COL_VERTEX(-4186, 1024, 2629);
	  COL_VERTEX(-3551, 819, 2330);
	  COL_VERTEX(-3439, 819, 1818);
	  COL_VERTEX(-403, 1024, 1818);
	  COL_VERTEX(-3432, 768, 552);
	  COL_VERTEX(90, 819, 2330);
	  COL_VERTEX(90, 1024, 2330);
	  COL_VERTEX(875, 1024, 1818);
	  COL_VERTEX(875, 1536, 1571);
	  COL_VERTEX(504, 2150, 1426);
	  COL_VERTEX(405, 2150, 1450);
	  COL_VERTEX(529, 2331, 1419);
	  COL_VERTEX(430, 2288, 1444);
	  COL_VERTEX(466, 2324, 1287);
	  COL_VERTEX(495, 2331, 1280);
	  COL_VERTEX(471, 2150, 1286);
	  COL_VERTEX(476, 2273, 1201);
	  COL_VERTEX(629, 2289, 1395);
	  COL_VERTEX(559, 2324, 1412);
	  COL_VERTEX(549, 2273, 1499);
	  COL_VERTEX(644, 2253, 1392);
	  COL_VERTEX(644, 2150, 1392);
	  COL_VERTEX(610, 2150, 1252);
	  COL_VERTEX(610, 2253, 1252);
	  COL_VERTEX(595, 2289, 1256);
	  COL_VERTEX(430, 2289, 1444);
	  COL_VERTEX(-72, 2852, 1244);
	  COL_VERTEX(-840, 2816, 988);
	  COL_VERTEX(-511, 3328, 512);
	  COL_VERTEX(-840, 1823, 988);
	  COL_VERTEX(-1279, 2816, 256);
	  COL_VERTEX(1280, 1022, -255);
	  COL_VERTEX(2687, 1024, 340);
	  COL_VERTEX(768, 1331, -1023);
	  COL_VERTEX(768, 2108, -1023);
	  COL_VERTEX(623, 4352, 623);
	  COL_VERTEX(0, 4864, 512);
	  COL_VERTEX(512, 4864, 0);
	  COL_VERTEX(768, 4352, -767);
	  COL_VERTEX(0, 4864, -511);
	  COL_VERTEX(-767, 973, -1023);
	  COL_VERTEX(1280, 2816, 256);
	  COL_VERTEX(1280, 2364, -255);
	  COL_VERTEX(1635, 2560, -646);
	  COL_VERTEX(1635, 2816, -646);
	  COL_VERTEX(768, 3328, 0);
	  COL_VERTEX(1379, 2304, -1030);
	  COL_VERTEX(1379, 2816, -1030);
	  COL_VERTEX(-1279, 1656, -255);
	  COL_VERTEX(-1279, 2816, -255);
	  COL_VERTEX(0, 2816, -1279);
	  COL_VERTEX(-767, 2816, -1023);
	  COL_VERTEX(0, 3328, -767);
	  COL_VERTEX(-767, 3328, 0);
	  COL_VERTEX(512, 3328, -511);
	  COL_VERTEX(768, 4352, 768);
	  COL_VERTEX(1024, 3585, 0);
	  COL_VERTEX(768, 3584, -767);
	  COL_VERTEX(-1648, 768, 748);
	  COL_VERTEX(-1033, 1823, 1428);
	  COL_VERTEX(0, 3584, -1023);
	  COL_VERTEX(768, 3072, -1023);
	  COL_VERTEX(-767, 4352, -767);
	  COL_VERTEX(-511, 4864, 0);
	  COL_VERTEX(1333, 3072, -683);
	  COL_VERTEX(1195, 3072, -383);
	  COL_VERTEX(768, 2816, 1024);
	  COL_VERTEX(512, 3328, 512);
	  COL_VERTEX(0, 3328, 768);
	  COL_VERTEX(768, 3584, 768);
	  COL_VERTEX(0, 4352, 1024);
	  COL_VERTEX(-1023, 4352, 0);
	  COL_VERTEX(-767, 4352, 768);
	  COL_VERTEX(-2303, 1024, -511);
	  COL_VERTEX(-3668, 1024, 633);
	  COL_VERTEX(3328, 1536, -1791);
	  COL_VERTEX(771, 1331, -1252);
	  COL_VERTEX(4378, 819, 1267);
	  COL_VERTEX(1008, 1536, -2834);
	  COL_VERTEX(6144, 1024, -1535);
	  COL_VERTEX(-1137, 1536, -2814);
	  COL_VERTEX(-1015, 1536, -2225);
	  COL_VERTEX(-808, 986, -1223);
	  COL_VERTEX(394, 1536, -2630);
	  COL_VERTEX(0, 1024, -3071);
	  COL_VERTEX(-1599, 1244, -5055);
	  COL_VERTEX(-1217, 1119, -3205);
	  COL_VERTEX(-5688, 2048, -6079);
	  COL_VERTEX(-5688, 1024, -7264);
	  COL_VERTEX(-5688, 1024, -6079);
	  COL_VERTEX(7168, 2458, -8191);
	  COL_VERTEX(6144, 1024, -6143);
	  COL_VERTEX(3584, 1075, -4863);
	  COL_VERTEX(7168, 2458, 8192);
	  COL_VERTEX(1024, 1024, -6143);
	  COL_VERTEX(-1279, 1024, -5631);
	  COL_VERTEX(-5247, 2048, -1279);
	  COL_VERTEX(-4965, 1024, -2303);
	  COL_VERTEX(-7167, 2048, -7167);
	  COL_VERTEX(-7167, 2048, -1279);
	  COL_VERTEX(2330, 819, 1779);
	  COL_VERTEX(-511, 1024, 6656);
	  COL_VERTEX(1536, 1024, 2560);
	  COL_VERTEX(6144, 1024, 6144);
	  COL_VERTEX(5172, 1024, 2581);
	  COL_VERTEX(3762, 1024, 3849);
	  COL_VERTEX(4403, 1434, -3737);
	  COL_VERTEX(5325, 1075, -4991);
	  COL_VERTEX(4608, 1434, -3532);
	  COL_VERTEX(2373, 1024, -5119);
	  COL_VERTEX(2816, 1024, -5375);
	  COL_VERTEX(1115, 1229, -5778);
	  COL_VERTEX(768, 1331, -5375);
	  COL_VERTEX(3551, 1651, -2881);
	  COL_VERTEX(-6143, 1946, -460);
	  COL_VERTEX(-7167, 1382, 7168);
	  COL_VERTEX(-4351, 1024, 6144);
	  COL_VERTEX(-3781, 1024, -511);
	  COL_VERTEX(-3941, 1382, 4710);
	  COL_VERTEX(-5887, 1024, 5632);
	  COL_VERTEX(5632, 1024, 1280);
	  COL_VERTEX(5401, 1024, 5487);
	  COL_VERTEX(4582, 819, 1062);
	  COL_VERTEX(4378, 819, 1062);
	  COL_VERTEX(5120, 1024, 512);
	  COL_VERTEX(-72, 2150, 1244);
	  COL_VERTEX(-87, 4352, 671);
	  COL_VERTEX(-24, 4352, 925);
	  COL_VERTEX(1024, 4351, 0);
	  COL_VERTEX(0, 4352, -1023);
	  COL_VERTEX(1990, 2816, -1036);
	  COL_VERTEX(0, 973, -1279);
	  COL_VERTEX(768, 1024, -1023);
	  COL_VERTEX(-2223, 1024, -1319);
	  COL_VERTEX(-767, 3584, -767);
	  COL_VERTEX(-1023, 3584, 0);
	  COL_VERTEX(995, 2816, 683);
	  COL_VERTEX(995, 2108, 683);
	  COL_VERTEX(1280, 2210, 256);
	  COL_VERTEX(-511, 3328, -511);
	  COL_VERTEX(-1801, 768, 952);
	  COL_VERTEX(0, 2150, 1818);
	  COL_VERTEX(1493, 2816, -859);
	  COL_VERTEX(1379, 2816, -1029);
	  COL_VERTEX(-670, 4352, 477);
	  COL_VERTEX(1008, 1536, -2015);
	  COL_VERTEX(1536, 1536, -4095);
	  COL_VERTEX(3014, 1616, -3129);
	  COL_VERTEX(-629, 1536, -2425);
	  COL_VERTEX(-629, 1536, -2630);
	  COL_VERTEX(394, 1536, -2425);
	  COL_VERTEX(-5688, 3927, -8191);
	  COL_VERTEX(-1185, 1024, -6079);
	  COL_VERTEX(5191, 1024, -2866);
	  COL_VERTEX(1074, 1024, -5944);
	  COL_VERTEX(4915, 1434, -4044);
	  COL_VERTEX(-8191, 2970, -8191);
	  COL_VERTEX(-8191, 2970, 8192);
	  COL_VERTEX(-6143, 1028, -460);
	  COL_VERTEX(1418, 1229, 2366);
	  COL_VERTEX(4582, 819, 1267);
	  COL_VERTEX(5401, 1024, 3849);
	  COL_VERTEX(3762, 1024, 5487);
	  COL_VERTEX(4301, 1434, -3532);
	  COL_VERTEX(1190, 1229, -5480);
	  COL_VERTEX(693, 1331, -5673);
	  COL_VERTEX(371, 1331, -5276);
	  COL_VERTEX(3716, 1613, -3303);
	  COL_VERTEX(3818, 1613, -3201);
	  COL_VERTEX(-3327, 2099, 7168);
	  COL_VERTEX(-6143, 1024, 6144);
	  COL_VERTEX(-5119, 1382, 4710);
	  COL_VERTEX(-4351, 1024, 5632);
	  COL_VERTEX(-3537, 1024, 255);
	  COL_VERTEX(1534, 1741, 1678);
	  COL_VERTEX(-1277, 1741, 7168);
	  COL_VERTEX(908, 2150, 1563);
	  COL_VERTEX(768, 2150, 1024);
	  COL_VERTEX(-378, 3840, 898);
	  COL_VERTEX(-476, 3738, 865);
	  COL_VERTEX(1418, 1741, 2366);
	  COL_VERTEX(1182, 1536, 1673);
	  COL_VERTEX(1248, 1024, -5249);
	  COL_VERTEX(1182, 1536, 2288);
	  COL_VERTEX(102, 922, -2928);
	  COL_VERTEX(922, 922, -2928);
	  COL_VERTEX(1024, 1024, -3071);
	  COL_VERTEX(57, 922, -1398);
	  COL_VERTEX(717, 922, -1289);
	  COL_VERTEX(-56, 922, -1379);
	  COL_VERTEX(-739, 922, -1151);
	  COL_VERTEX(-101, 922, -2892);
	  COL_VERTEX(-987, 922, -2869);
	  COL_VERTEX(-2195, 817, 3060);
	  COL_VERTEX(-3756, 819, 2842);
	  COL_VERTEX(2373, 1024, -4607);
	  COL_VERTEX(2816, 1024, -4351);
	  COL_VERTEX(1417, 952, -4143);
	  COL_VERTEX(1536, 1024, -4095);
	  COL_VERTEX(24, 952, -3214);
	  COL_VERTEX(997, 952, -5819);
	  COL_VERTEX(1155, 952, -5189);
	  COL_VERTEX(-511, 819, 2816);
	  COL_VERTEX(-6143, 768, 1024);
	  COL_VERTEX(2483, 973, -5055);
	  COL_VERTEX(2816, 973, -5247);
	  COL_VERTEX(3277, 973, -4863);
	  COL_VERTEX(2483, 973, -4671);
	  COL_VERTEX(2816, 973, -4479);
	  COL_VERTEX(952, 952, -3214);
	  COL_VERTEX(-1051, 952, -4923);
	  COL_VERTEX(-1136, 952, -5535);
	  COL_VERTEX(-1050, 952, -5942);
	  COL_VERTEX(952, 952, -6000);
	  COL_VERTEX(3967, 1229, 5078);
	  COL_VERTEX(3967, 1229, 4054);
	  COL_VERTEX(1008, 1126, -2425);
	  COL_VERTEX(-1053, 1271, -2411);
	  COL_VERTEX(4438, 1178, -3702);
	  COL_VERTEX(3811, 1329, -2332);
	  COL_VERTEX(3246, 1306, -2897);
	  COL_VERTEX(4220, 754, -2333);
	  COL_VERTEX(4220, 754, -1924);
	  COL_VERTEX(743, 1229, -5474);
	  COL_VERTEX(-1479, 2214, 3942);
	  COL_VERTEX(-3611, 2099, 4329);
	  COL_VERTEX(1519, 1843, 1664);
	  COL_VERTEX(2145, 2002, 857);
	  COL_VERTEX(2116, 1978, 862);
	  COL_VERTEX(1534, 1823, 1678);
	  COL_VERTEX(1504, 1823, 1650);
	  COL_VERTEX(1418, 1823, 2366);
	  COL_VERTEX(1404, 1823, 2246);
	  COL_VERTEX(1411, 1843, 2306);
	  COL_VERTEX(0, 2232, 1818);
	  COL_VERTEX(17, 2253, 1792);
	  COL_VERTEX(34, 2232, 1766);
	  COL_VERTEX(879, 963, -4018);
	  COL_VERTEX(902, 963, -3949);
	  COL_VERTEX(924, 963, -4064);
	  COL_VERTEX(970, 963, -4041);
	  COL_VERTEX(993, 963, -3972);
	  COL_VERTEX(-918, 963, -5190);
	  COL_VERTEX(-872, 963, -5167);
	  COL_VERTEX(-964, 963, -5144);
	  COL_VERTEX(-849, 963, -5099);
	  COL_VERTEX(-941, 963, -5076);
	  COL_VERTEX(236, 952, -3662);
	  COL_VERTEX(133, 998, -3588);
	  COL_VERTEX(110, 952, -3588);
	  COL_VERTEX(236, 998, -3639);
	  COL_VERTEX(412, 952, -3639);
	  COL_VERTEX(236, 952, -3522);
	  COL_VERTEX(310, 963, -5702);
	  COL_VERTEX(264, 963, -5656);
	  COL_VERTEX(356, 963, -5679);
	  COL_VERTEX(379, 963, -5611);
	  COL_VERTEX(287, 963, -5588);
	  COL_VERTEX(-238, 952, -4482);
	  COL_VERTEX(-286, 952, -4434);
	  COL_VERTEX(-286, 952, -4597);
	  COL_VERTEX(-343, 952, -4539);
	  COL_VERTEX(-511, 1311, 2816);
	  COL_VERTEX(-2366, 1021, 4425);
	  COL_VERTEX(4211, 760, -2971);
	  COL_VERTEX(3746, 1511, -3273);
	  COL_VERTEX(3913, 754, -2897);
	  COL_VERTEX(909, 2816, 1571);
	  COL_VERTEX(1919, 1985, 682);
	  COL_VERTEX(1908, 2002, 699);
	  COL_VERTEX(2175, 1985, 852);
	  COL_VERTEX(1897, 1978, 716);
	  COL_VERTEX(-52, 2253, 1239);
	  COL_VERTEX(-33, 2232, 1233);
	  COL_VERTEX(908, 2232, 1563);
	  COL_VERTEX(903, 2253, 1544);
	  COL_VERTEX(898, 2232, 1524);
	  COL_VERTEX(-72, 2232, 1244);
	  COL_VERTEX(926, 952, -4055);
	  COL_VERTEX(887, 952, -4016);
	  COL_VERTEX(936, 1041, -4007);
	  COL_VERTEX(965, 952, -4036);
	  COL_VERTEX(907, 952, -3958);
	  COL_VERTEX(985, 952, -3977);
	  COL_VERTEX(-906, 1041, -5133);
	  COL_VERTEX(-877, 952, -5162);
	  COL_VERTEX(-916, 952, -5182);
	  COL_VERTEX(-955, 952, -5143);
	  COL_VERTEX(-857, 952, -5104);
	  COL_VERTEX(-936, 952, -5084);
	  COL_VERTEX(389, 998, -3639);
	  COL_VERTEX(236, 998, -3537);
	  COL_VERTEX(351, 952, -5674);
	  COL_VERTEX(312, 952, -5694);
	  COL_VERTEX(273, 952, -5655);
	  COL_VERTEX(322, 1041, -5645);
	  COL_VERTEX(370, 952, -5616);
	  COL_VERTEX(292, 952, -5596);
	  COL_VERTEX(-286, 1067, -4539);
	  COL_VERTEX(843, 922, -2401);
	  COL_VERTEX(-713, 922, -2195);
	  COL_VERTEX(-768, 922, -1353);
	  COL_VERTEX(-804, 922, -2302);
	  COL_VERTEX(-761, 922, -2431);
	  COL_VERTEX(4582, 1638, 4668);
	  COL_VERTEX(4377, 1638, 4873);
	  COL_VERTEX(4582, 1638, 4873);
	  COL_VERTEX(4377, 1638, 4668);
	  COL_VERTEX(4582, 1843, 4873);
	  COL_VERTEX(4172, 1843, 4873);
	  COL_VERTEX(4172, 1843, 5078);
	  COL_VERTEX(4582, 1843, 5078);
	  COL_VERTEX(3967, 1638, 5078);
	  COL_VERTEX(4172, 1843, 4156);
	  COL_VERTEX(4786, 1638, 5078);
	  COL_VERTEX(4786, 1638, 4054);
	  COL_VERTEX(4582, 1843, 4156);
	  COL_VERTEX(3967, 1638, 4054);
	  COL_VERTEX(4274, 1843, 4259);
	  COL_VERTEX(4479, 1843, 4259);
	  COL_VERTEX(4582, 1843, 4668);
	  COL_VERTEX(4479, 1843, 4463);
	  COL_VERTEX(4172, 1843, 4668);
	  COL_VERTEX(4274, 1843, 4463);
	  COL_VERTEX(1091, 1300, -4084);
	  COL_VERTEX(-200, 1300, -3761);
	  COL_VERTEX(-522, 1300, -5052);
	  COL_VERTEX(768, 1300, -5375);
	  COL_VERTEX(3967, 1024, 5078);
	  COL_VERTEX(4582, 1024, 5078);
	  COL_VERTEX(3967, 1024, 4054);
	  COL_VERTEX(4582, 1024, 4054);
	  COL_VERTEX(4786, 1434, 5078);
	  COL_VERTEX(3967, 1434, 5078);
	  COL_VERTEX(3967, 1434, 4054);
	  COL_VERTEX(4377, 1434, 4873);
	  COL_VERTEX(4786, 1434, 4054);
	  COL_VERTEX(4274, 1229, 4259);
	  COL_VERTEX(4070, 1229, 4259);
	  COL_VERTEX(4377, 1229, 5078);
	  COL_VERTEX(4479, 1229, 4259);
	  COL_VERTEX(4274, 1229, 4463);
	  COL_VERTEX(4479, 1229, 4463);
	  COL_VERTEX(1404, 1741, 2246);
	  COL_VERTEX(2116, 1896, 862);
	  COL_VERTEX(4377, 1229, 4873);
	  COL_VERTEX(4274, 1229, 4054);
	  COL_VERTEX(4070, 1229, 4054);
	  COL_VERTEX(3967, 1229, 4668);
	  COL_VERTEX(3967, 1229, 4873);
	  COL_VERTEX(1504, 1741, 1650);
	  COL_VERTEX(1897, 1896, 716);
	  COL_VERTEX(34, 2150, 1766);
	  COL_VERTEX(-33, 2150, 1233);
	  COL_VERTEX(898, 2150, 1524);
	  COL_VERTEX(-8191, 5018, -8191);
	  COL_VERTEX(-8191, 5018, 8192);
	  COL_VERTEX(-5688, 5975, -8191);
	  COL_VERTEX(-3327, 4147, 7168);
	  COL_VERTEX(7168, 4506, -8191);
	  COL_VERTEX(7168, 4506, 8192);
	  COL_VERTEX(-1277, 3789, 7168);
	  COL_TRI_INIT(SURFACE_DEFAULT, 192);
	  COL_TRI(12, 13, 14);
	  COL_TRI(0, 1, 2);
	  COL_TRI(3, 0, 2);
	  COL_TRI(4, 5, 6);
	  COL_TRI(4, 7, 5);
	  COL_TRI(8, 9, 10);
	  COL_TRI(8, 10, 11);
	  COL_TRI(17, 20, 24);
	  COL_TRI(15, 12, 14);
	  COL_TRI(16, 105, 106);
	  COL_TRI(16, 107, 105);
	  COL_TRI(13, 108, 109);
	  COL_TRI(14, 13, 109);
	  COL_TRI(17, 110, 20);
	  COL_TRI(23, 21, 20);
	  COL_TRI(18, 19, 110);
	  COL_TRI(19, 114, 110);
	  COL_TRI(17, 110, 114);
	  COL_TRI(18, 110, 17);
	  COL_TRI(20, 111, 112);
	  COL_TRI(20, 112, 42);
	  COL_TRI(21, 113, 20);
	  COL_TRI(22, 111, 20);
	  COL_TRI(22, 20, 113);
	  COL_TRI(23, 20, 42);
	  COL_TRI(24, 113, 21);
	  COL_TRI(24, 21, 35);
	  COL_TRI(25, 113, 24);
	  COL_TRI(25, 111, 114);
	  COL_TRI(25, 114, 115);
	  COL_TRI(25, 22, 113);
	  COL_TRI(26, 115, 114);
	  COL_TRI(27, 26, 114);
	  COL_TRI(19, 27, 114);
	  COL_TRI(17, 114, 115);
	  COL_TRI(31, 120, 28);
	  COL_TRI(28, 117, 29);
	  COL_TRI(28, 29, 118);
	  COL_TRI(29, 117, 119);
	  COL_TRI(29, 119, 30);
	  COL_TRI(30, 119, 120);
	  COL_TRI(30, 120, 31);
	  COL_TRI(31, 28, 118);
	  COL_TRI(32, 33, 121);
	  COL_TRI(32, 121, 34);
	  COL_TRI(33, 41, 43);
	  COL_TRI(33, 32, 41);
	  COL_TRI(34, 121, 122);
	  COL_TRI(35, 21, 123);
	  COL_TRI(35, 123, 36);
	  COL_TRI(36, 124, 126);
	  COL_TRI(37, 36, 126);
	  COL_TRI(34, 122, 125);
	  COL_TRI(38, 127, 122);
	  COL_TRI(39, 37, 126);
	  COL_TRI(37, 128, 129);
	  COL_TRI(37, 39, 128);
	  COL_TRI(40, 129, 128);
	  COL_TRI(40, 38, 129);
	  COL_TRI(38, 40, 127);
	  COL_TRI(41, 42, 112);
	  COL_TRI(42, 41, 32);
	  COL_TRI(32, 23, 42);
	  COL_TRI(25, 130, 44);
	  COL_TRI(25, 44, 22);
	  COL_TRI(41, 112, 44);
	  COL_TRI(43, 41, 44);
	  COL_TRI(44, 111, 22);
	  COL_TRI(44, 112, 111);
	  COL_TRI(43, 44, 130);
	  COL_TRI(45, 131, 46);
	  COL_TRI(45, 46, 132);
	  COL_TRI(49, 53, 135);
	  COL_TRI(46, 133, 132);
	  COL_TRI(46, 47, 133);
	  COL_TRI(47, 134, 52);
	  COL_TRI(47, 52, 50);
	  COL_TRI(48, 47, 50);
	  COL_TRI(48, 133, 47);
	  COL_TRI(49, 135, 48);
	  COL_TRI(49, 48, 50);
	  COL_TRI(50, 52, 49);
	  COL_TRI(51, 54, 49);
	  COL_TRI(49, 54, 53);
	  COL_TRI(52, 51, 49);
	  COL_TRI(53, 136, 138);
	  COL_TRI(53, 54, 136);
	  COL_TRI(51, 137, 54);
	  COL_TRI(54, 137, 136);
	  COL_TRI(55, 56, 139);
	  COL_TRI(56, 140, 139);
	  COL_TRI(57, 141, 142);
	  COL_TRI(57, 143, 141);
	  COL_TRI(26, 116, 61);
	  COL_TRI(58, 59, 65);
	  COL_TRI(59, 144, 65);
	  COL_TRI(60, 65, 145);
	  COL_TRI(60, 58, 65);
	  COL_TRI(60, 134, 58);
	  COL_TRI(47, 146, 134);
	  COL_TRI(64, 46, 131);
	  COL_TRI(26, 27, 116);
	  COL_TRI(61, 116, 62);
	  COL_TRI(62, 116, 19);
	  COL_TRI(27, 19, 116);
	  COL_TRI(63, 62, 19);
	  COL_TRI(63, 19, 18);
	  COL_TRI(62, 147, 61);
	  COL_TRI(64, 148, 46);
	  COL_TRI(46, 148, 146);
	  COL_TRI(46, 146, 47);
	  COL_TRI(65, 149, 145);
	  COL_TRI(66, 150, 151);
	  COL_TRI(66, 151, 152);
	  COL_TRI(67, 153, 70);
	  COL_TRI(72, 160, 159);
	  COL_TRI(68, 154, 69);
	  COL_TRI(68, 69, 155);
	  COL_TRI(69, 154, 156);
	  COL_TRI(70, 153, 157);
	  COL_TRI(70, 157, 158);
	  COL_TRI(71, 72, 159);
	  COL_TRI(78, 79, 81);
	  COL_TRI(73, 74, 102);
	  COL_TRI(74, 161, 162);
	  COL_TRI(74, 73, 161);
	  COL_TRI(75, 163, 73);
	  COL_TRI(75, 73, 164);
	  COL_TRI(73, 102, 164);
	  COL_TRI(76, 78, 77);
	  COL_TRI(77, 78, 81);
	  COL_TRI(76, 77, 82);
	  COL_TRI(79, 98, 80);
	  COL_TRI(79, 97, 98);
	  COL_TRI(79, 76, 97);
	  COL_TRI(80, 81, 79);
	  COL_TRI(80, 167, 81);
	  COL_TRI(77, 81, 165);
	  COL_TRI(81, 166, 165);
	  COL_TRI(77, 165, 82);
	  COL_TRI(82, 165, 166);
	  COL_TRI(83, 82, 166);
	  COL_TRI(84, 169, 170);
	  COL_TRI(84, 170, 85);
	  COL_TRI(84, 86, 169);
	  COL_TRI(85, 171, 84);
	  COL_TRI(86, 84, 172);
	  COL_TRI(84, 87, 172);
	  COL_TRI(87, 84, 171);
	  COL_TRI(87, 173, 172);
	  COL_TRI(87, 88, 173);
	  COL_TRI(88, 99, 100);
	  COL_TRI(88, 87, 99);
	  COL_TRI(87, 171, 99);
	  COL_TRI(91, 175, 174);
	  COL_TRI(89, 172, 173);
	  COL_TRI(90, 89, 174);
	  COL_TRI(89, 90, 172);
	  COL_TRI(90, 174, 175);
	  COL_TRI(91, 92, 175);
	  COL_TRI(92, 95, 96);
	  COL_TRI(92, 96, 175);
	  COL_TRI(93, 92, 91);
	  COL_TRI(93, 94, 92);
	  COL_TRI(94, 95, 92);
	  COL_TRI(73, 162, 74);
	  COL_TRI(95, 82, 83);
	  COL_TRI(96, 95, 176);
	  COL_TRI(95, 83, 176);
	  COL_TRI(95, 168, 82);
	  COL_TRI(94, 168, 95);
	  COL_TRI(73, 161, 162);
	  COL_TRI(97, 76, 168);
	  COL_TRI(82, 168, 76);
	  COL_TRI(97, 168, 94);
	  COL_TRI(98, 94, 93);
	  COL_TRI(85, 101, 171);
	  COL_TRI(99, 171, 101);
	  COL_TRI(100, 103, 104);
	  COL_TRI(100, 99, 103);
	  COL_TRI(99, 101, 103);
	  COL_TRI(98, 97, 94);
	  COL_TRI(74, 101, 102);
	  COL_TRI(101, 75, 177);
	  COL_TRI(101, 85, 75);
	  COL_TRI(102, 101, 177);
	  COL_TRI(103, 101, 74);
	  COL_TRI(104, 103, 74);
	  COL_TRI(104, 74, 162);
	  COL_TRI(75, 85, 163);
	  COL_TRI(85, 170, 163);
	  COL_TRI(76, 79, 78);
	  COL_TRI_INIT(SURFACE_BURNING, 7);
	  COL_TRI(353, 362, 351);
	  COL_TRI(352, 365, 364);
	  COL_TRI(364, 353, 352);
	  COL_TRI(353, 364, 363);
	  COL_TRI(349, 353, 361);
	  COL_TRI(353, 363, 362);
	  COL_TRI(351, 361, 353);
	  COL_TRI_INIT(SURFACE_SLIPPERY, 233);
	  COL_TRI(183, 60, 145);
	  COL_TRI(178, 123, 23);
	  COL_TRI(178, 32, 34);
	  COL_TRI(178, 34, 179);
	  COL_TRI(123, 21, 23);
	  COL_TRI(179, 34, 125);
	  COL_TRI(179, 125, 180);
	  COL_TRI(181, 179, 182);
	  COL_TRI(179, 180, 182);
	  COL_TRI(188, 189, 191);
	  COL_TRI(183, 185, 186);
	  COL_TRI(183, 186, 52);
	  COL_TRI(186, 198, 51);
	  COL_TRI(186, 51, 52);
	  COL_TRI(187, 189, 188);
	  COL_TRI(188, 278, 279);
	  COL_TRI(188, 279, 187);
	  COL_TRI(188, 191, 215);
	  COL_TRI(192, 202, 283);
	  COL_TRI(189, 187, 280);
	  COL_TRI(189, 280, 190);
	  COL_TRI(190, 191, 189);
	  COL_TRI(191, 190, 281);
	  COL_TRI(191, 281, 214);
	  COL_TRI(191, 214, 215);
	  COL_TRI(186, 185, 283);
	  COL_TRI(185, 284, 283);
	  COL_TRI(193, 219, 218);
	  COL_TRI(183, 52, 134);
	  COL_TRI(186, 213, 198);
	  COL_TRI(186, 202, 213);
	  COL_TRI(186, 283, 202);
	  COL_TRI(134, 193, 288);
	  COL_TRI(134, 288, 289);
	  COL_TRI(183, 134, 60);
	  COL_TRI(63, 219, 193);
	  COL_TRI(194, 193, 290);
	  COL_TRI(195, 137, 282);
	  COL_TRI(195, 196, 62);
	  COL_TRI(194, 195, 62);
	  COL_TRI(196, 195, 282);
	  COL_TRI(147, 62, 196);
	  COL_TRI(196, 282, 199);
	  COL_TRI(194, 62, 63);
	  COL_TRI(194, 63, 193);
	  COL_TRI(201, 291, 203);
	  COL_TRI(197, 63, 217);
	  COL_TRI(63, 197, 219);
	  COL_TRI(198, 282, 137);
	  COL_TRI(199, 282, 198);
	  COL_TRI(200, 203, 192);
	  COL_TRI(200, 201, 203);
	  COL_TRI(204, 291, 286);
	  COL_TRI(201, 205, 291);
	  COL_TRI(205, 286, 291);
	  COL_TRI(203, 291, 204);
	  COL_TRI(202, 204, 213);
	  COL_TRI(204, 286, 212);
	  COL_TRI(204, 206, 213);
	  COL_TRI(202, 203, 204);
	  COL_TRI(204, 212, 209);
	  COL_TRI(206, 204, 209);
	  COL_TRI(192, 203, 202);
	  COL_TRI(207, 208, 280);
	  COL_TRI(210, 211, 181);
	  COL_TRI(208, 209, 190);
	  COL_TRI(190, 209, 212);
	  COL_TRI(206, 209, 197);
	  COL_TRI(209, 208, 197);
	  COL_TRI(190, 212, 281);
	  COL_TRI(208, 190, 280);
	  COL_TRI(182, 210, 181);
	  COL_TRI(210, 292, 211);
	  COL_TRI(206, 197, 217);
	  COL_TRI(181, 211, 277);
	  COL_TRI(192, 285, 225);
	  COL_TRI(192, 234, 285);
	  COL_TRI(212, 214, 281);
	  COL_TRI(212, 286, 214);
	  COL_TRI(213, 206, 217);
	  COL_TRI(214, 286, 287);
	  COL_TRI(205, 287, 286);
	  COL_TRI(215, 214, 223);
	  COL_TRI(214, 287, 223);
	  COL_TRI(216, 294, 295);
	  COL_TRI(217, 216, 213);
	  COL_TRI(216, 295, 213);
	  COL_TRI(213, 199, 198);
	  COL_TRI(221, 36, 220);
	  COL_TRI(197, 221, 219);
	  COL_TRI(197, 208, 221);
	  COL_TRI(218, 219, 220);
	  COL_TRI(219, 221, 220);
	  COL_TRI(125, 122, 180);
	  COL_TRI(180, 122, 205);
	  COL_TRI(182, 180, 205);
	  COL_TRI(218, 220, 178);
	  COL_TRI(220, 123, 178);
	  COL_TRI(220, 36, 123);
	  COL_TRI(122, 287, 205);
	  COL_TRI(207, 221, 208);
	  COL_TRI(122, 36, 222);
	  COL_TRI(222, 36, 221);
	  COL_TRI(198, 137, 51);
	  COL_TRI(222, 221, 207);
	  COL_TRI(122, 222, 224);
	  COL_TRI(223, 122, 224);
	  COL_TRI(223, 287, 122);
	  COL_TRI(182, 225, 210);
	  COL_TRI(224, 296, 215);
	  COL_TRI(215, 223, 224);
	  COL_TRI(182, 205, 201);
	  COL_TRI(182, 201, 200);
	  COL_TRI(182, 200, 225);
	  COL_TRI(225, 200, 192);
	  COL_TRI(211, 293, 277);
	  COL_TRI(66, 152, 70);
	  COL_TRI(152, 67, 70);
	  COL_TRI(226, 66, 69);
	  COL_TRI(66, 70, 69);
	  COL_TRI(227, 297, 228);
	  COL_TRI(228, 184, 227);
	  COL_TRI(184, 228, 185);
	  COL_TRI(184, 185, 183);
	  COL_TRI(145, 184, 183);
	  COL_TRI(229, 184, 145);
	  COL_TRI(230, 297, 227);
	  COL_TRI(231, 227, 184);
	  COL_TRI(227, 265, 299);
	  COL_TRI(227, 298, 230);
	  COL_TRI(227, 299, 298);
	  COL_TRI(232, 233, 300);
	  COL_TRI(232, 300, 301);
	  COL_TRI(232, 238, 249);
	  COL_TRI(233, 232, 285);
	  COL_TRI(232, 249, 285);
	  COL_TRI(234, 233, 285);
	  COL_TRI(235, 302, 297);
	  COL_TRI(235, 297, 230);
	  COL_TRI(236, 237, 238);
	  COL_TRI(238, 237, 249);
	  COL_TRI(249, 241, 239);
	  COL_TRI(237, 241, 249);
	  COL_TRI(239, 240, 303);
	  COL_TRI(240, 304, 246);
	  COL_TRI(240, 246, 243);
	  COL_TRI(240, 243, 242);
	  COL_TRI(241, 304, 240);
	  COL_TRI(242, 303, 240);
	  COL_TRI(239, 241, 240);
	  COL_TRI(243, 246, 262);
	  COL_TRI(244, 243, 262);
	  COL_TRI(243, 259, 305);
	  COL_TRI(231, 243, 305);
	  COL_TRI(245, 242, 243);
	  COL_TRI(246, 306, 262);
	  COL_TRI(247, 304, 241);
	  COL_TRI(248, 249, 239);
	  COL_TRI(239, 250, 251);
	  COL_TRI(239, 251, 248);
	  COL_TRI(250, 239, 303);
	  COL_TRI(254, 252, 311);
	  COL_TRI(237, 247, 241);
	  COL_TRI(250, 303, 308);
	  COL_TRI(251, 250, 308);
	  COL_TRI(252, 256, 229);
	  COL_TRI(252, 254, 256);
	  COL_TRI(253, 256, 254);
	  COL_TRI(259, 244, 307);
	  COL_TRI(255, 272, 256);
	  COL_TRI(256, 272, 312);
	  COL_TRI(256, 312, 229);
	  COL_TRI(257, 256, 253);
	  COL_TRI(256, 313, 255);
	  COL_TRI(256, 257, 313);
	  COL_TRI(245, 243, 231);
	  COL_TRI(258, 307, 244);
	  COL_TRI(262, 263, 316);
	  COL_TRI(243, 244, 259);
	  COL_TRI(259, 307, 305);
	  COL_TRI(260, 305, 307);
	  COL_TRI(260, 307, 258);
	  COL_TRI(260, 258, 315);
	  COL_TRI(261, 262, 316);
	  COL_TRI(263, 264, 316);
	  COL_TRI(263, 317, 264);
	  COL_TRI(264, 317, 318);
	  COL_TRI(265, 319, 299);
	  COL_TRI(265, 320, 319);
	  COL_TRI(251, 267, 266);
	  COL_TRI(251, 309, 267);
	  COL_TRI(251, 308, 309);
	  COL_TRI(155, 71, 159);
	  COL_TRI(267, 309, 321);
	  COL_TRI(268, 322, 267);
	  COL_TRI(267, 322, 139);
	  COL_TRI(268, 267, 321);
	  COL_TRI(139, 266, 267);
	  COL_TRI(158, 155, 70);
	  COL_TRI(271, 323, 139);
	  COL_TRI(155, 69, 70);
	  COL_TRI(266, 248, 251);
	  COL_TRI(248, 310, 269);
	  COL_TRI(269, 249, 248);
	  COL_TRI(270, 323, 271);
	  COL_TRI(270, 271, 324);
	  COL_TRI(270, 139, 323);
	  COL_TRI(225, 269, 325);
	  COL_TRI(225, 249, 269);
	  COL_TRI(225, 285, 249);
	  COL_TRI(184, 229, 275);
	  COL_TRI(229, 145, 252);
	  COL_TRI(270, 55, 139);
	  COL_TRI(255, 245, 231);
	  COL_TRI(245, 255, 253);
	  COL_TRI(245, 253, 327);
	  COL_TRI(272, 255, 231);
	  COL_TRI(253, 255, 314);
	  COL_TRI(255, 273, 314);
	  COL_TRI(273, 255, 313);
	  COL_TRI(252, 149, 326);
	  COL_TRI(274, 312, 272);
	  COL_TRI(272, 276, 274);
	  COL_TRI(275, 274, 276);
	  COL_TRI(276, 272, 231);
	  COL_TRI(276, 184, 275);
	  COL_TRI(184, 276, 231);
	  COL_TRI(252, 326, 311);
	  COL_TRI(149, 252, 145);
	  COL_TRI(277, 328, 329);
	  COL_TRI(277, 293, 328);
	  COL_TRI(155, 158, 71);
	  COL_TRI(253, 314, 257);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 1);
	  COL_TRI(122, 121, 33);
	  COL_TRI_INIT(SURFACE_WALL_MISC, 107);
	  COL_TRI(484, 464, 485);
	  COL_TRI(367, 480, 366);
	  COL_TRI(366, 480, 481);
	  COL_TRI(366, 481, 1);
	  COL_TRI(367, 482, 480);
	  COL_TRI(1, 481, 483);
	  COL_TRI(1, 483, 7);
	  COL_TRI(7, 482, 367);
	  COL_TRI(7, 483, 482);
	  COL_TRI(106, 461, 457);
	  COL_TRI(485, 464, 469);
	  COL_TRI(485, 469, 486);
	  COL_TRI(486, 469, 467);
	  COL_TRI(486, 467, 488);
	  COL_TRI(460, 458, 457);
	  COL_TRI(457, 461, 460);
	  COL_TRI(458, 460, 472);
	  COL_TRI(487, 457, 459);
	  COL_TRI(105, 461, 106);
	  COL_TRI(105, 474, 461);
	  COL_TRI(459, 472, 474);
	  COL_TRI(472, 459, 456);
	  COL_TRI(458, 472, 456);
	  COL_TRI(488, 466, 484);
	  COL_TRI(367, 486, 10);
	  COL_TRI(484, 466, 464);
	  COL_TRI(489, 9, 8);
	  COL_TRI(489, 490, 9);
	  COL_TRI(8, 498, 489);
	  COL_TRI(490, 10, 9);
	  COL_TRI(490, 499, 10);
	  COL_TRI(8, 11, 498);
	  COL_TRI(367, 10, 499);
	  COL_TRI(1, 15, 14);
	  COL_TRI(107, 367, 500);
	  COL_TRI(107, 486, 367);
	  COL_TRI(488, 498, 11);
	  COL_TRI(488, 5, 498);
	  COL_TRI(5, 488, 108);
	  COL_TRI(5, 108, 6);
	  COL_TRI(1, 14, 2);
	  COL_TRI(0, 15, 1);
	  COL_TRI(0, 484, 15);
	  COL_TRI(14, 3, 2);
	  COL_TRI(14, 109, 3);
	  COL_TRI(491, 497, 487);
	  COL_TRI(491, 487, 12);
	  COL_TRI(12, 366, 491);
	  COL_TRI(16, 497, 501);
	  COL_TRI(16, 106, 497);
	  COL_TRI(109, 484, 0);
	  COL_TRI(109, 0, 3);
	  COL_TRI(494, 473, 471);
	  COL_TRI(12, 485, 366);
	  COL_TRI(366, 485, 16);
	  COL_TRI(366, 16, 501);
	  COL_TRI(489, 470, 475);
	  COL_TRI(492, 470, 489);
	  COL_TRI(489, 475, 493);
	  COL_TRI(492, 471, 470);
	  COL_TRI(493, 475, 473);
	  COL_TRI(493, 473, 494);
	  COL_TRI(494, 471, 492);
	  COL_TRI(106, 457, 497);
	  COL_TRI(13, 474, 105);
	  COL_TRI(13, 459, 474);
	  COL_TRI(487, 459, 13);
	  COL_TRI(108, 107, 500);
	  COL_TRI(108, 500, 6);
	  COL_TRI(488, 467, 466);
	  COL_TRI(229, 57, 275);
	  COL_TRI(275, 57, 142);
	  COL_TRI(275, 142, 274);
	  COL_TRI(274, 142, 141);
	  COL_TRI(274, 141, 312);
	  COL_TRI(229, 143, 57);
	  COL_TRI(312, 141, 143);
	  COL_TRI(312, 143, 229);
	  COL_TRI(328, 419, 329);
	  COL_TRI(419, 218, 329);
	  COL_TRI(329, 218, 178);
	  COL_TRI(329, 178, 277);
	  COL_TRI(277, 178, 179);
	  COL_TRI(277, 179, 181);
	  COL_TRI(495, 332, 385);
	  COL_TRI(383, 332, 326);
	  COL_TRI(332, 383, 385);
	  COL_TRI(422, 149, 65);
	  COL_TRI(383, 326, 381);
	  COL_TRI(495, 385, 384);
	  COL_TRI(495, 384, 382);
	  COL_TRI(495, 382, 502);
	  COL_TRI(149, 422, 381);
	  COL_TRI(149, 381, 326);
	  COL_TRI(277, 293, 386);
	  COL_TRI(422, 65, 420);
	  COL_TRI(380, 423, 503);
	  COL_TRI(380, 503, 496);
	  COL_TRI(496, 382, 380);
	  COL_TRI(496, 502, 382);
	  COL_TRI(277, 386, 429);
	  COL_TRI(293, 328, 426);
	  COL_TRI(293, 426, 386);
	  COL_TRI(425, 388, 504);
	  COL_TRI(425, 504, 505);
	  COL_TRI(388, 506, 504);
	  COL_TRI(388, 428, 506);
	  COL_TRI_INIT(SURFACE_HORIZONTAL_WIND, 10);
	  COL_TRI_SPECIAL(334, 350, 347, 0x2A);
	  COL_TRI_SPECIAL(416, 244, 418, 0x1C);
	  COL_TRI_SPECIAL(416, 231, 305, 0x37);
	  COL_TRI_SPECIAL(416, 418, 373, 0x35);
	  COL_TRI_SPECIAL(244, 348, 418, 0x21);
	  COL_TRI_SPECIAL(348, 350, 418, 0x34);
	  COL_TRI_SPECIAL(373, 374, 231, 0x48);
	  COL_TRI_SPECIAL(231, 416, 373, 0x48);
	  COL_TRI_SPECIAL(348, 347, 350, 0x26);
	  COL_TRI_SPECIAL(334, 347, 261, 0x0);
	  COL_TRI_INIT(SURFACE_ICE, 40);
	  COL_TRI(456, 457, 458);
	  COL_TRI(456, 459, 457);
	  COL_TRI(460, 461, 462);
	  COL_TRI(460, 462, 463);
	  COL_TRI(464, 462, 465);
	  COL_TRI(466, 463, 462);
	  COL_TRI(466, 462, 464);
	  COL_TRI(467, 468, 466);
	  COL_TRI(469, 468, 467);
	  COL_TRI(469, 465, 468);
	  COL_TRI(470, 468, 465);
	  COL_TRI(470, 471, 468);
	  COL_TRI(472, 468, 473);
	  COL_TRI(468, 471, 473);
	  COL_TRI(474, 473, 475);
	  COL_TRI(474, 472, 473);
	  COL_TRI(475, 470, 465);
	  COL_TRI(475, 465, 474);
	  COL_TRI(464, 465, 469);
	  COL_TRI(468, 463, 466);
	  COL_TRI(451, 343, 455);
	  COL_TRI(25, 17, 24);
	  COL_TRI(25, 115, 17);
	  COL_TRI(476, 477, 478);
	  COL_TRI(476, 478, 479);
	  COL_TRI(118, 29, 30);
	  COL_TRI(118, 30, 31);
	  COL_TRI(343, 344, 455);
	  COL_TRI(455, 454, 451);
	  COL_TRI(451, 336, 343);
	  COL_TRI(337, 336, 451);
	  COL_TRI(339, 340, 451);
	  COL_TRI(454, 452, 451);
	  COL_TRI(341, 451, 452);
	  COL_TRI(451, 341, 339);
	  COL_TRI(341, 452, 453);
	  COL_TRI(453, 342, 341);
	  COL_TRI(358, 357, 356);
	  COL_TRI(359, 360, 358);
	  COL_TRI(358, 356, 359);
	  COL_TRI_INIT(SURFACE_HARD, 39);
	  COL_TRI(58, 289, 59);
	  COL_TRI(330, 39, 126);
	  COL_TRI(330, 126, 124);
	  COL_TRI(330, 331, 39);
	  COL_TRI(39, 331, 128);
	  COL_TRI(127, 128, 331);
	  COL_TRI(127, 40, 128);
	  COL_TRI(263, 306, 317);
	  COL_TRI(58, 134, 289);
	  COL_TRI(332, 333, 335);
	  COL_TRI(332, 144, 333);
	  COL_TRI(333, 144, 160);
	  COL_TRI(332, 326, 144);
	  COL_TRI(144, 326, 65);
	  COL_TRI(72, 332, 335);
	  COL_TRI(306, 263, 262);
	  COL_TRI(334, 316, 264);
	  COL_TRI(316, 334, 261);
	  COL_TRI(326, 149, 65);
	  COL_TRI(322, 271, 139);
	  COL_TRI(268, 271, 322);
	  COL_TRI(268, 324, 271);
	  COL_TRI(279, 222, 207);
	  COL_TRI(188, 215, 296);
	  COL_TRI(278, 188, 296);
	  COL_TRI(224, 278, 296);
	  COL_TRI(224, 222, 278);
	  COL_TRI(187, 207, 280);
	  COL_TRI(279, 207, 187);
	  COL_TRI(342, 192, 341);
	  COL_TRI(236, 336, 337);
	  COL_TRI(236, 337, 338);
	  COL_TRI(339, 284, 340);
	  COL_TRI(339, 283, 284);
	  COL_TRI(341, 283, 339);
	  COL_TRI(192, 283, 341);
	  COL_TRI(343, 238, 344);
	  COL_TRI(343, 236, 238);
	  COL_TRI(336, 236, 343);
	  COL_TRI_INIT(SURFACE_HARD_VERY_SLIPPERY, 173);
	  COL_TRI(155, 160, 293);
	  COL_TRI(366, 7, 367);
	  COL_TRI(366, 1, 7);
	  COL_TRI(211, 292, 155);
	  COL_TRI(68, 155, 292);
	  COL_TRI(211, 155, 293);
	  COL_TRI(159, 160, 155);
	  COL_TRI(369, 300, 233);
	  COL_TRI(230, 338, 368);
	  COL_TRI(338, 298, 350);
	  COL_TRI(338, 230, 298);
	  COL_TRI(368, 235, 230);
	  COL_TRI(368, 302, 235);
	  COL_TRI(302, 368, 297);
	  COL_TRI(369, 232, 301);
	  COL_TRI(369, 301, 300);
	  COL_TRI(158, 157, 354);
	  COL_TRI(284, 297, 368);
	  COL_TRI(284, 185, 228);
	  COL_TRI(297, 284, 228);
	  COL_TRI(72, 158, 414);
	  COL_TRI(71, 158, 72);
	  COL_TRI(72, 414, 376);
	  COL_TRI(332, 72, 376);
	  COL_TRI(354, 414, 158);
	  COL_TRI(345, 376, 414);
	  COL_TRI(345, 414, 354);
	  COL_TRI(244, 370, 258);
	  COL_TRI(370, 315, 258);
	  COL_TRI(370, 260, 315);
	  COL_TRI(370, 305, 260);
	  COL_TRI(244, 416, 370);
	  COL_TRI(370, 416, 305);
	  COL_TRI(319, 417, 299);
	  COL_TRI(371, 372, 265);
	  COL_TRI(372, 299, 417);
	  COL_TRI(265, 372, 417);
	  COL_TRI(299, 372, 350);
	  COL_TRI(372, 371, 418);
	  COL_TRI(350, 372, 418);
	  COL_TRI(227, 371, 265);
	  COL_TRI(373, 418, 371);
	  COL_TRI(374, 371, 227);
	  COL_TRI(374, 373, 371);
	  COL_TRI(299, 350, 298);
	  COL_TRI(374, 227, 231);
	  COL_TRI(320, 417, 319);
	  COL_TRI(265, 417, 320);
	  COL_TRI(306, 375, 317);
	  COL_TRI(306, 334, 375);
	  COL_TRI(334, 264, 375);
	  COL_TRI(317, 375, 318);
	  COL_TRI(375, 264, 318);
	  COL_TRI(56, 55, 345);
	  COL_TRI(345, 415, 376);
	  COL_TRI(345, 55, 415);
	  COL_TRI(332, 376, 327);
	  COL_TRI(376, 415, 327);
	  COL_TRI(55, 321, 415);
	  COL_TRI(321, 327, 415);
	  COL_TRI(253, 332, 327);
	  COL_TRI(55, 377, 321);
	  COL_TRI(377, 270, 321);
	  COL_TRI(268, 321, 270);
	  COL_TRI(326, 332, 311);
	  COL_TRI(311, 332, 253);
	  COL_TRI(253, 254, 311);
	  COL_TRI(377, 55, 270);
	  COL_TRI(324, 268, 270);
	  COL_TRI(160, 328, 293);
	  COL_TRI(144, 59, 328);
	  COL_TRI(160, 144, 328);
	  COL_TRI(218, 419, 59);
	  COL_TRI(59, 288, 218);
	  COL_TRI(289, 288, 59);
	  COL_TRI(59, 419, 328);
	  COL_TRI(355, 310, 139);
	  COL_TRI(139, 140, 355);
	  COL_TRI(139, 310, 266);
	  COL_TRI(266, 310, 248);
	  COL_TRI(378, 379, 380);
	  COL_TRI(379, 420, 421);
	  COL_TRI(380, 379, 421);
	  COL_TRI(381, 422, 379);
	  COL_TRI(378, 381, 379);
	  COL_TRI(379, 422, 420);
	  COL_TRI(380, 421, 423);
	  COL_TRI(382, 378, 380);
	  COL_TRI(383, 381, 378);
	  COL_TRI(384, 378, 382);
	  COL_TRI(385, 383, 378);
	  COL_TRI(384, 385, 378);
	  COL_TRI(386, 387, 424);
	  COL_TRI(387, 425, 424);
	  COL_TRI(387, 386, 426);
	  COL_TRI(387, 426, 427);
	  COL_TRI(391, 389, 432);
	  COL_TRI(386, 424, 429);
	  COL_TRI(387, 427, 428);
	  COL_TRI(388, 387, 428);
	  COL_TRI(387, 388, 425);
	  COL_TRI(389, 391, 430);
	  COL_TRI(389, 430, 431);
	  COL_TRI(390, 389, 431);
	  COL_TRI(389, 390, 432);
	  COL_TRI(394, 395, 437);
	  COL_TRI(391, 433, 430);
	  COL_TRI(391, 392, 433);
	  COL_TRI(392, 391, 432);
	  COL_TRI(390, 431, 434);
	  COL_TRI(390, 434, 435);
	  COL_TRI(393, 390, 435);
	  COL_TRI(390, 393, 432);
	  COL_TRI(392, 393, 435);
	  COL_TRI(392, 435, 433);
	  COL_TRI(393, 392, 432);
	  COL_TRI(394, 396, 436);
	  COL_TRI(395, 394, 436);
	  COL_TRI(397, 395, 436);
	  COL_TRI(395, 440, 437);
	  COL_TRI(395, 397, 440);
	  COL_TRI(394, 437, 438);
	  COL_TRI(394, 438, 439);
	  COL_TRI(396, 394, 439);
	  COL_TRI(398, 396, 439);
	  COL_TRI(398, 439, 441);
	  COL_TRI(396, 398, 436);
	  COL_TRI(398, 397, 436);
	  COL_TRI(397, 398, 441);
	  COL_TRI(397, 441, 440);
	  COL_TRI(399, 402, 442);
	  COL_TRI(399, 442, 403);
	  COL_TRI(402, 443, 442);
	  COL_TRI(402, 400, 443);
	  COL_TRI(400, 402, 399);
	  COL_TRI(403, 442, 443);
	  COL_TRI(403, 443, 404);
	  COL_TRI(404, 443, 400);
	  COL_TRI(404, 400, 401);
	  COL_TRI(401, 400, 399);
	  COL_TRI(405, 407, 444);
	  COL_TRI(405, 444, 445);
	  COL_TRI(405, 445, 446);
	  COL_TRI(406, 405, 446);
	  COL_TRI(411, 450, 413);
	  COL_TRI(407, 408, 448);
	  COL_TRI(408, 407, 447);
	  COL_TRI(407, 405, 447);
	  COL_TRI(407, 448, 444);
	  COL_TRI(409, 446, 449);
	  COL_TRI(409, 406, 446);
	  COL_TRI(405, 406, 447);
	  COL_TRI(406, 409, 447);
	  COL_TRI(409, 408, 447);
	  COL_TRI(408, 409, 449);
	  COL_TRI(408, 449, 448);
	  COL_TRI(410, 450, 411);
	  COL_TRI(412, 450, 410);
	  COL_TRI(413, 450, 412);
	  COL_TRI(453, 234, 192);
	  COL_TRI(451, 338, 337);
	  COL_TRI(451, 368, 338);
	  COL_TRI(284, 368, 451);
	  COL_TRI(284, 451, 340);
	  COL_TRI(452, 234, 453);
	  COL_TRI(452, 233, 234);
	  COL_TRI(238, 455, 344);
	  COL_TRI(453, 192, 342);
	  COL_TRI(454, 369, 233);
	  COL_TRI(454, 233, 452);
	  COL_TRI(232, 369, 454);
	  COL_TRI(455, 232, 454);
	  COL_TRI(238, 232, 455);
	  COL_TRI_INIT(SURFACE_HARD_NOT_SLIPPERY, 78);
	  COL_TRI(24, 130, 25);
	  COL_TRI(314, 313, 257);
	  COL_TRI(314, 273, 313);
	  COL_TRI(160, 72, 335);
	  COL_TRI(160, 335, 333);
	  COL_TRI(122, 33, 35);
	  COL_TRI(36, 122, 35);
	  COL_TRI(133, 48, 194);
	  COL_TRI(24, 43, 130);
	  COL_TRI(24, 35, 43);
	  COL_TRI(35, 33, 43);
	  COL_TRI(45, 133, 290);
	  COL_TRI(45, 132, 133);
	  COL_TRI(133, 194, 290);
	  COL_TRI(115, 26, 17);
	  COL_TRI(194, 48, 135);
	  COL_TRI(194, 135, 195);
	  COL_TRI(135, 138, 195);
	  COL_TRI(135, 53, 138);
	  COL_TRI(63, 147, 217);
	  COL_TRI(217, 147, 216);
	  COL_TRI(196, 216, 147);
	  COL_TRI(196, 294, 216);
	  COL_TRI(345, 346, 140);
	  COL_TRI(26, 18, 17);
	  COL_TRI(18, 26, 61);
	  COL_TRI(63, 18, 61);
	  COL_TRI(63, 61, 147);
	  COL_TRI(345, 153, 346);
	  COL_TRI(153, 345, 354);
	  COL_TRI(67, 346, 153);
	  COL_TRI(152, 151, 346);
	  COL_TRI(152, 346, 67);
	  COL_TRI(156, 292, 210);
	  COL_TRI(156, 210, 225);
	  COL_TRI(150, 156, 325);
	  COL_TRI(156, 154, 292);
	  COL_TRI(154, 68, 292);
	  COL_TRI(69, 156, 226);
	  COL_TRI(226, 156, 150);
	  COL_TRI(226, 150, 66);
	  COL_TRI(310, 151, 150);
	  COL_TRI(310, 150, 269);
	  COL_TRI(325, 269, 150);
	  COL_TRI(325, 156, 225);
	  COL_TRI(151, 310, 355);
	  COL_TRI(151, 355, 140);
	  COL_TRI(346, 151, 140);
	  COL_TRI(140, 56, 345);
	  COL_TRI(153, 354, 157);
	  COL_TRI(350, 349, 361);
	  COL_TRI(262, 261, 356);
	  COL_TRI(262, 356, 357);
	  COL_TRI(262, 357, 358);
	  COL_TRI(244, 262, 358);
	  COL_TRI(261, 347, 359);
	  COL_TRI(261, 359, 356);
	  COL_TRI(347, 360, 359);
	  COL_TRI(347, 348, 360);
	  COL_TRI(348, 244, 358);
	  COL_TRI(348, 358, 360);
	  COL_TRI(349, 350, 353);
	  COL_TRI(350, 334, 353);
	  COL_TRI(304, 247, 363);
	  COL_TRI(351, 338, 361);
	  COL_TRI(350, 361, 338);
	  COL_TRI(351, 236, 338);
	  COL_TRI(237, 236, 351);
	  COL_TRI(237, 351, 362);
	  COL_TRI(237, 362, 363);
	  COL_TRI(247, 237, 363);
	  COL_TRI(304, 363, 364);
	  COL_TRI(304, 364, 365);
	  COL_TRI(304, 365, 246);
	  COL_TRI(306, 246, 365);
	  COL_TRI(352, 306, 365);
	  COL_TRI(353, 306, 352);
	  COL_TRI(353, 334, 306);
	  COL_TRI_INIT(SURFACE_CAMERA_BOUNDARY, 14);
	  COL_TRI(308, 507, 508);
	  COL_TRI(308, 508, 309);
	  COL_TRI(509, 507, 308);
	  COL_TRI(509, 308, 303);
	  COL_TRI(309, 508, 510);
	  COL_TRI(309, 510, 321);
	  COL_TRI(242, 509, 303);
	  COL_TRI(242, 511, 509);
	  COL_TRI(245, 511, 242);
	  COL_TRI(245, 512, 511);
	  COL_TRI(513, 245, 327);
	  COL_TRI(513, 512, 245);
	  COL_TRI(510, 513, 327);
	  COL_TRI(510, 327, 321);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(10);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start, /*pos*/  5541,  1024,   443, /*yaw*/ 192); // unused, probably an early way to set initial position
	  SPECIAL_OBJECT(/*preset*/ special_snow_tree,  /*pos*/  5395,  1054, -5443);
	  SPECIAL_OBJECT(/*preset*/ special_snow_tree,  /*pos*/     0,  4864,     0);
	  SPECIAL_OBJECT(/*preset*/ special_snow_tree,  /*pos*/  5666,  1024, -3341);
	  SPECIAL_OBJECT(/*preset*/ special_snow_tree,  /*pos*/  1919,  1024, -4759);
	  SPECIAL_OBJECT(/*preset*/ special_snow_tree,  /*pos*/  3645,  1024, -5889);
	  SPECIAL_OBJECT(/*preset*/ special_snow_tree,  /*pos*/  1658,  1536, -3605);
	  SPECIAL_OBJECT(/*preset*/ special_snow_tree,  /*pos*/ -3769,  1024, -1197);
	  SPECIAL_OBJECT(/*preset*/ special_snow_tree,  /*pos*/ -2745,  1024,  -582);
	  SPECIAL_OBJECT(/*preset*/ special_snow_tree,  /*pos*/  1766,  2816,  -942);
	  COL_WATER_BOX_INIT(2);
	  COL_WATER_BOX(0, -6194, -409, 154, 4198, 973);
	  COL_WATER_BOX(1, -1279, -6143, 1485, -3071, 973);
	  COL_END();
	}

	function sl_seg7_area_2_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0xC1);
	  COL_VERTEX(205, 0, 3482);
	  COL_VERTEX(-204, 154, 3482);
	  COL_VERTEX(0, 256, 3482);
	  COL_VERTEX(-204, 0, 3482);
	  COL_VERTEX(205, 154, 3482);
	  COL_VERTEX(205, 154, 3072);
	  COL_VERTEX(205, 0, 3072);
	  COL_VERTEX(-204, 0, 3072);
	  COL_VERTEX(0, 256, 3072);
	  COL_VERTEX(-204, 154, 3072);
	  COL_VERTEX(205, 154, 2662);
	  COL_VERTEX(205, 0, 2662);
	  COL_VERTEX(-204, 0, 2662);
	  COL_VERTEX(0, 256, 2662);
	  COL_VERTEX(-204, 154, 2662);
	  COL_VERTEX(-1668, 614, -1433);
	  COL_VERTEX(-1433, 0, -1433);
	  COL_VERTEX(-1668, 0, -1433);
	  COL_VERTEX(-1433, 614, -1433);
	  COL_VERTEX(-1433, 0, -1228);
	  COL_VERTEX(-1433, 614, -1228);
	  COL_VERTEX(-1668, 614, -1228);
	  COL_VERTEX(-1668, 0, -1228);
	  COL_VERTEX(-1228, 614, -613);
	  COL_VERTEX(-1023, 614, -613);
	  COL_VERTEX(-1023, 0, -613);
	  COL_VERTEX(-1228, 0, -613);
	  COL_VERTEX(-1023, 614, 717);
	  COL_VERTEX(-1023, 0, 717);
	  COL_VERTEX(512, 0, -818);
	  COL_VERTEX(1229, 0, -1433);
	  COL_VERTEX(1229, 0, -1228);
	  COL_VERTEX(1024, 0, -1228);
	  COL_VERTEX(1024, 0, -1433);
	  COL_VERTEX(-1433, 0, -613);
	  COL_VERTEX(-2047, 0, -818);
	  COL_VERTEX(-1433, 0, -818);
	  COL_VERTEX(205, 0, 410);
	  COL_VERTEX(-409, 0, 205);
	  COL_VERTEX(205, 0, 1434);
	  COL_VERTEX(410, 0, 410);
	  COL_VERTEX(410, 0, 1434);
	  COL_VERTEX(-204, 0, 1434);
	  COL_VERTEX(-409, 0, 1434);
	  COL_VERTEX(-204, 0, 205);
	  COL_VERTEX(-1228, 0, 205);
	  COL_VERTEX(-1842, 0, 205);
	  COL_VERTEX(-1842, 0, 0);
	  COL_VERTEX(-1228, 0, 717);
	  COL_VERTEX(512, 614, -1740);
	  COL_VERTEX(1024, 0, 0);
	  COL_VERTEX(1024, 0, -818);
	  COL_VERTEX(1229, 0, -818);
	  COL_VERTEX(1229, 0, 0);
	  COL_VERTEX(717, 0, -1740);
	  COL_VERTEX(1024, 0, 2662);
	  COL_VERTEX(-1023, 614, 2662);
	  COL_VERTEX(1024, 614, 2662);
	  COL_VERTEX(-2047, 614, 1229);
	  COL_VERTEX(-2047, 614, -2047);
	  COL_VERTEX(2048, 614, 1229);
	  COL_VERTEX(-2047, 0, -2047);
	  COL_VERTEX(717, 0, -818);
	  COL_VERTEX(717, 614, -818);
	  COL_VERTEX(512, 614, -818);
	  COL_VERTEX(1229, 614, -1433);
	  COL_VERTEX(1229, 614, -1228);
	  COL_VERTEX(1024, 614, -1228);
	  COL_VERTEX(1024, 614, -1433);
	  COL_VERTEX(-1228, 614, 717);
	  COL_VERTEX(-2047, 614, -613);
	  COL_VERTEX(-2047, 0, -613);
	  COL_VERTEX(-1433, 614, -613);
	  COL_VERTEX(-1433, 614, -818);
	  COL_VERTEX(-2047, 614, -818);
	  COL_VERTEX(205, 614, 410);
	  COL_VERTEX(410, 614, 410);
	  COL_VERTEX(-409, 614, 205);
	  COL_VERTEX(-204, 614, 205);
	  COL_VERTEX(205, 614, 1434);
	  COL_VERTEX(410, 614, 1434);
	  COL_VERTEX(-409, 614, 1434);
	  COL_VERTEX(-204, 614, 1434);
	  COL_VERTEX(-1842, 614, 205);
	  COL_VERTEX(-1228, 614, 205);
	  COL_VERTEX(-1842, 614, 0);
	  COL_VERTEX(-1228, 614, 0);
	  COL_VERTEX(-1228, 0, 0);
	  COL_VERTEX(717, 614, -1740);
	  COL_VERTEX(512, 0, -1740);
	  COL_VERTEX(1024, 614, -818);
	  COL_VERTEX(1024, 614, 0);
	  COL_VERTEX(1229, 614, -818);
	  COL_VERTEX(1229, 614, 0);
	  COL_VERTEX(-1023, 0, 2662);
	  COL_VERTEX(2048, 0, 1229);
	  COL_VERTEX(-2047, 0, 1229);
	  COL_VERTEX(2048, 0, -2047);
	  COL_VERTEX(2048, 614, -2047);
	  COL_VERTEX(205, 317, 819);
	  COL_VERTEX(-204, 307, 819);
	  COL_VERTEX(-204, 317, 819);
	  COL_VERTEX(205, 307, 819);
	  COL_VERTEX(205, 307, 1229);
	  COL_VERTEX(-204, 307, 1229);
	  COL_VERTEX(-204, 317, 1229);
	  COL_VERTEX(205, 317, 1229);
	  COL_VERTEX(410, 0, 1147);
	  COL_VERTEX(2048, 614, 1147);
	  COL_VERTEX(410, 614, 1147);
	  COL_VERTEX(2048, 0, 1147);
	  COL_VERTEX(-2047, 614, 1147);
	  COL_VERTEX(-2047, 0, 1147);
	  COL_VERTEX(-409, 0, 1147);
	  COL_VERTEX(-409, 614, 1147);
	  COL_VERTEX(-409, 614, 1106);
	  COL_VERTEX(-409, 0, 1106);
	  COL_VERTEX(-2047, 0, 1106);
	  COL_VERTEX(-2047, 614, 1106);
	  COL_VERTEX(410, 614, 1106);
	  COL_VERTEX(2048, 614, 1106);
	  COL_VERTEX(2048, 0, 1106);
	  COL_VERTEX(410, 0, 1106);
	  COL_VERTEX(-204, 614, 819);
	  COL_VERTEX(205, 0, -1228);
	  COL_VERTEX(-613, 0, -613);
	  COL_VERTEX(-1228, 0, -818);
	  COL_VERTEX(-613, 614, -818);
	  COL_VERTEX(2048, 0, -1228);
	  COL_VERTEX(1434, 0, -204);
	  COL_VERTEX(2048, 0, 0);
	  COL_VERTEX(1229, 0, -2047);
	  COL_VERTEX(0, 0, -2047);
	  COL_VERTEX(0, 0, -1433);
	  COL_VERTEX(205, 0, -2047);
	  COL_VERTEX(819, 0, 410);
	  COL_VERTEX(819, 0, 614);
	  COL_VERTEX(2048, 0, 614);
	  COL_VERTEX(-409, 0, -1023);
	  COL_VERTEX(205, 0, -818);
	  COL_VERTEX(-204, 0, -204);
	  COL_VERTEX(-204, 0, -818);
	  COL_VERTEX(-409, 0, -204);
	  COL_VERTEX(205, 0, -204);
	  COL_VERTEX(205, 614, 0);
	  COL_VERTEX(512, 0, -613);
	  COL_VERTEX(1024, 0, -613);
	  COL_VERTEX(205, 614, 1229);
	  COL_VERTEX(-204, 614, 1229);
	  COL_VERTEX(205, 614, 819);
	  COL_VERTEX(0, 614, -1433);
	  COL_VERTEX(205, 614, -1228);
	  COL_VERTEX(-613, 614, -613);
	  COL_VERTEX(-1228, 614, -818);
	  COL_VERTEX(-613, 0, -818);
	  COL_VERTEX(2048, 410, -1228);
	  COL_VERTEX(1229, 410, -1228);
	  COL_VERTEX(2048, 410, -1433);
	  COL_VERTEX(2048, 0, -1433);
	  COL_VERTEX(1229, 410, -1433);
	  COL_VERTEX(2048, 614, -204);
	  COL_VERTEX(2048, 0, -204);
	  COL_VERTEX(1434, 614, -204);
	  COL_VERTEX(2048, 614, 0);
	  COL_VERTEX(1434, 614, 0);
	  COL_VERTEX(1434, 0, 0);
	  COL_VERTEX(1229, 614, -2047);
	  COL_VERTEX(1024, 614, -2047);
	  COL_VERTEX(1024, 0, -2047);
	  COL_VERTEX(0, 614, -2047);
	  COL_VERTEX(205, 614, -2047);
	  COL_VERTEX(819, 614, 410);
	  COL_VERTEX(2048, 614, 410);
	  COL_VERTEX(2048, 0, 410);
	  COL_VERTEX(819, 614, 614);
	  COL_VERTEX(2048, 614, 614);
	  COL_VERTEX(-409, 614, -1023);
	  COL_VERTEX(205, 614, -1023);
	  COL_VERTEX(205, 0, -1023);
	  COL_VERTEX(205, 614, -818);
	  COL_VERTEX(-204, 614, -818);
	  COL_VERTEX(-409, 614, -204);
	  COL_VERTEX(-204, 614, -204);
	  COL_VERTEX(205, 0, 0);
	  COL_VERTEX(1024, 614, -204);
	  COL_VERTEX(1024, 0, -204);
	  COL_VERTEX(205, 614, -204);
	  COL_VERTEX(512, 614, -613);
	  COL_VERTEX(1024, 614, -613);
	  COL_VERTEX(-1975, 0, -1433);
	  COL_VERTEX(-1975, 614, -1433);
	  COL_VERTEX(-1975, 0, -1228);
	  COL_VERTEX(-1975, 614, -1228);
	  COL_TRI_INIT(SURFACE_DEFAULT, 106);
	  COL_TRI(12, 9, 7);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(0, 4, 5);
	  COL_TRI(0, 5, 6);
	  COL_TRI(3, 0, 6);
	  COL_TRI(0, 2, 4);
	  COL_TRI(7, 1, 3);
	  COL_TRI(3, 6, 7);
	  COL_TRI(8, 2, 1);
	  COL_TRI(8, 1, 9);
	  COL_TRI(7, 9, 1);
	  COL_TRI(5, 4, 2);
	  COL_TRI(5, 2, 8);
	  COL_TRI(10, 5, 8);
	  COL_TRI(6, 5, 10);
	  COL_TRI(11, 7, 6);
	  COL_TRI(6, 10, 11);
	  COL_TRI(11, 12, 7);
	  COL_TRI(13, 8, 9);
	  COL_TRI(13, 9, 14);
	  COL_TRI(12, 14, 9);
	  COL_TRI(10, 8, 13);
	  COL_TRI(25, 24, 27);
	  COL_TRI(15, 16, 17);
	  COL_TRI(15, 18, 16);
	  COL_TRI(19, 20, 21);
	  COL_TRI(19, 21, 22);
	  COL_TRI(23, 24, 25);
	  COL_TRI(23, 25, 26);
	  COL_TRI(31, 67, 32);
	  COL_TRI(25, 27, 28);
	  COL_TRI(29, 62, 63);
	  COL_TRI(29, 63, 64);
	  COL_TRI(30, 65, 66);
	  COL_TRI(30, 66, 31);
	  COL_TRI(31, 66, 67);
	  COL_TRI(32, 67, 68);
	  COL_TRI(32, 68, 33);
	  COL_TRI(33, 68, 65);
	  COL_TRI(33, 65, 30);
	  COL_TRI(34, 70, 71);
	  COL_TRI(34, 72, 70);
	  COL_TRI(35, 73, 36);
	  COL_TRI(35, 74, 73);
	  COL_TRI(39, 79, 75);
	  COL_TRI(36, 73, 72);
	  COL_TRI(36, 72, 34);
	  COL_TRI(37, 75, 76);
	  COL_TRI(37, 76, 40);
	  COL_TRI(38, 77, 78);
	  COL_TRI(38, 78, 44);
	  COL_TRI(41, 79, 39);
	  COL_TRI(39, 75, 37);
	  COL_TRI(16, 18, 20);
	  COL_TRI(16, 20, 19);
	  COL_TRI(40, 76, 80);
	  COL_TRI(40, 80, 41);
	  COL_TRI(41, 80, 79);
	  COL_TRI(45, 83, 46);
	  COL_TRI(42, 81, 43);
	  COL_TRI(42, 82, 81);
	  COL_TRI(43, 77, 38);
	  COL_TRI(43, 81, 77);
	  COL_TRI(44, 78, 82);
	  COL_TRI(44, 82, 42);
	  COL_TRI(48, 23, 26);
	  COL_TRI(45, 84, 83);
	  COL_TRI(46, 83, 85);
	  COL_TRI(46, 85, 47);
	  COL_TRI(47, 85, 86);
	  COL_TRI(47, 86, 87);
	  COL_TRI(48, 69, 23);
	  COL_TRI(52, 92, 93);
	  COL_TRI(49, 88, 54);
	  COL_TRI(49, 54, 89);
	  COL_TRI(50, 90, 51);
	  COL_TRI(50, 91, 90);
	  COL_TRI(51, 92, 52);
	  COL_TRI(51, 90, 92);
	  COL_TRI(54, 63, 62);
	  COL_TRI(52, 93, 53);
	  COL_TRI(53, 91, 50);
	  COL_TRI(53, 93, 91);
	  COL_TRI(28, 27, 69);
	  COL_TRI(28, 69, 48);
	  COL_TRI(54, 88, 63);
	  COL_TRI(57, 10, 13);
	  COL_TRI(29, 49, 89);
	  COL_TRI(29, 64, 49);
	  COL_TRI(14, 12, 94);
	  COL_TRI(55, 11, 10);
	  COL_TRI(56, 57, 13);
	  COL_TRI(57, 55, 10);
	  COL_TRI(59, 61, 97);
	  COL_TRI(56, 13, 14);
	  COL_TRI(56, 14, 94);
	  COL_TRI(57, 60, 95);
	  COL_TRI(57, 95, 55);
	  COL_TRI(58, 56, 94);
	  COL_TRI(58, 94, 96);
	  COL_TRI(61, 59, 58);
	  COL_TRI(59, 97, 98);
	  COL_TRI(60, 97, 95);
	  COL_TRI(60, 98, 97);
	  COL_TRI(61, 58, 96);
	  COL_TRI_INIT(SURFACE_ICE, 2);
	  COL_TRI(159, 156, 155);
	  COL_TRI(159, 155, 157);
	  COL_TRI_INIT(SURFACE_HARD_SLIPPERY, 8);
	  COL_TRI(58, 98, 60);
	  COL_TRI(58, 57, 56);
	  COL_TRI(58, 60, 57);
	  COL_TRI(58, 59, 98);
	  COL_TRI(97, 61, 96);
	  COL_TRI(97, 55, 95);
	  COL_TRI(97, 94, 55);
	  COL_TRI(97, 96, 94);
	  COL_TRI_INIT(SURFACE_HARD_NOT_SLIPPERY, 8);
	  COL_TRI(99, 100, 101);
	  COL_TRI(99, 102, 100);
	  COL_TRI(100, 103, 104);
	  COL_TRI(100, 102, 103);
	  COL_TRI(105, 103, 106);
	  COL_TRI(105, 104, 103);
	  COL_TRI(105, 99, 101);
	  COL_TRI(105, 106, 99);
	  COL_TRI_INIT(SURFACE_NO_CAM_COLLISION, 6);
	  COL_TRI(189, 15, 17);
	  COL_TRI(189, 190, 15);
	  COL_TRI(21, 191, 22);
	  COL_TRI(21, 192, 191);
	  COL_TRI(191, 192, 190);
	  COL_TRI(191, 190, 189);
	  COL_TRI_INIT(SURFACE_VANISH_CAP_WALLS, 74);
	  COL_TRI(119, 120, 121);
	  COL_TRI(107, 108, 109);
	  COL_TRI(107, 110, 108);
	  COL_TRI(111, 112, 113);
	  COL_TRI(111, 113, 114);
	  COL_TRI(115, 116, 117);
	  COL_TRI(115, 117, 118);
	  COL_TRI(16, 18, 150);
	  COL_TRI(119, 121, 122);
	  COL_TRI(105, 106, 147);
	  COL_TRI(105, 147, 148);
	  COL_TRI(123, 99, 101);
	  COL_TRI(123, 149, 99);
	  COL_TRI(16, 150, 133);
	  COL_TRI(126, 26, 23);
	  COL_TRI(124, 20, 19);
	  COL_TRI(124, 151, 20);
	  COL_TRI(125, 23, 26);
	  COL_TRI(125, 152, 23);
	  COL_TRI(126, 153, 127);
	  COL_TRI(126, 127, 154);
	  COL_TRI(30, 159, 157);
	  COL_TRI(126, 23, 153);
	  COL_TRI(127, 125, 154);
	  COL_TRI(127, 152, 125);
	  COL_TRI(128, 155, 156);
	  COL_TRI(128, 156, 31);
	  COL_TRI(30, 157, 158);
	  COL_TRI(131, 65, 30);
	  COL_TRI(129, 160, 161);
	  COL_TRI(129, 162, 160);
	  COL_TRI(130, 163, 164);
	  COL_TRI(130, 164, 165);
	  COL_TRI(129, 165, 164);
	  COL_TRI(129, 164, 162);
	  COL_TRI(133, 169, 132);
	  COL_TRI(131, 166, 65);
	  COL_TRI(33, 68, 167);
	  COL_TRI(33, 167, 168);
	  COL_TRI(132, 169, 170);
	  COL_TRI(132, 170, 134);
	  COL_TRI(133, 150, 169);
	  COL_TRI(137, 175, 174);
	  COL_TRI(134, 151, 124);
	  COL_TRI(134, 170, 151);
	  COL_TRI(135, 171, 172);
	  COL_TRI(135, 172, 173);
	  COL_TRI(136, 174, 171);
	  COL_TRI(136, 171, 135);
	  COL_TRI(140, 182, 181);
	  COL_TRI(137, 174, 136);
	  COL_TRI(138, 176, 177);
	  COL_TRI(138, 177, 178);
	  COL_TRI(139, 179, 180);
	  COL_TRI(139, 180, 141);
	  COL_TRI(140, 181, 142);
	  COL_TRI(50, 91, 144);
	  COL_TRI(141, 180, 182);
	  COL_TRI(141, 182, 140);
	  COL_TRI(142, 181, 176);
	  COL_TRI(142, 176, 138);
	  COL_TRI(139, 178, 177);
	  COL_TRI(139, 177, 179);
	  COL_TRI(29, 90, 51);
	  COL_TRI(50, 144, 183);
	  COL_TRI(143, 184, 185);
	  COL_TRI(143, 186, 184);
	  COL_TRI(144, 186, 143);
	  COL_TRI(144, 143, 183);
	  COL_TRI(29, 64, 90);
	  COL_TRI(145, 64, 29);
	  COL_TRI(145, 187, 64);
	  COL_TRI(146, 188, 187);
	  COL_TRI(146, 187, 145);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(1);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start, /*pos*/ 0, 0, 2867, /*yaw*/ 128); // unused, probably an early way to set initial position
	  COL_END();
	}

	function sl_seg7_collision_sliding_snow_mound() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x6);
	  COL_VERTEX(102, 0, -255);
	  COL_VERTEX(0, 102, 256);
	  COL_VERTEX(102, 0, 256);
	  COL_VERTEX(0, 102, -255);
	  COL_VERTEX(-101, 0, 256);
	  COL_VERTEX(-101, 0, -255);
	  COL_TRI_INIT(SURFACE_DEFAULT, 6);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(3, 4, 1);
	  COL_TRI(3, 5, 4);
	  COL_TRI(1, 4, 2);
	  COL_TRI(0, 5, 3);
	  COL_TRI_STOP();
	  COL_END();
	}

	function sl_seg7_collision_pound_explodes() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x5);
	  COL_VERTEX(-101, 0, 102);
	  COL_VERTEX(102, 0, 102);
	  COL_VERTEX(0, 0, 0);
	  COL_VERTEX(-101, 0, -101);
	  COL_VERTEX(102, 0, -101);
	  COL_TRI_INIT(SURFACE_ICE, 3);
	  COL_TRI(4, 3, 1);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI_STOP();
	  COL_END();
	}

	var sl = [
	  sl_seg7_area_1_collision,
	  sl_seg7_area_2_collision,
	  sl_seg7_collision_sliding_snow_mound,
	  sl_seg7_collision_pound_explodes,
	];

	function thi_seg7_area_1_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x1D5);
	  COL_VERTEX(-4607, 614, -2354);
	  COL_VERTEX(-4197, 614, -1945);
	  COL_VERTEX(-4607, 614, -1945);
	  COL_VERTEX(-4197, 205, -1945);
	  COL_VERTEX(-4607, 205, -1945);
	  COL_VERTEX(-4607, -12, -1842);
	  COL_VERTEX(-4607, 717, -1842);
	  COL_VERTEX(-4607, 717, -2457);
	  COL_VERTEX(-4197, 205, -2354);
	  COL_VERTEX(-4607, 205, -2354);
	  COL_VERTEX(-4607, 102, -2149);
	  COL_VERTEX(-4347, 90, -1842);
	  COL_VERTEX(-4347, 717, -1842);
	  COL_VERTEX(-4230, 717, -2457);
	  COL_VERTEX(-4607, 94, -2457);
	  COL_VERTEX(-4230, 341, -2457);
	  COL_VERTEX(-4197, 614, -2354);
	  COL_VERTEX(-4607, 64, -3583);
	  COL_VERTEX(-3583, 819, -3071);
	  COL_VERTEX(-3583, 512, -3071);
	  COL_VERTEX(-4347, -511, -511);
	  COL_VERTEX(-2303, 2202, -765);
	  COL_VERTEX(-2303, 1690, -765);
	  COL_VERTEX(-2303, 1096, 258);
	  COL_VERTEX(-2303, 2202, 258);
	  COL_VERTEX(-1279, 2202, -1789);
	  COL_VERTEX(-1791, 2099, 565);
	  COL_VERTEX(-1279, 2202, 258);
	  COL_VERTEX(-2559, 819, -253);
	  COL_VERTEX(-2303, 1096, -253);
	  COL_VERTEX(-2559, 819, 1024);
	  COL_VERTEX(-1374, 2099, 258);
	  COL_VERTEX(512, -306, 1024);
	  COL_VERTEX(307, -306, 1024);
	  COL_VERTEX(-2559, 512, 1024);
	  COL_VERTEX(-2559, 512, 1536);
	  COL_VERTEX(-1497, -204, 1331);
	  COL_VERTEX(-1535, -511, 1026);
	  COL_VERTEX(-1497, -511, 1331);
	  COL_VERTEX(-1535, -511, 1024);
	  COL_VERTEX(307, -613, 1024);
	  COL_VERTEX(-4607, -511, 1024);
	  COL_VERTEX(-4607, -511, 4096);
	  COL_VERTEX(-3583, 512, 1024);
	  COL_VERTEX(-2559, -204, 2048);
	  COL_VERTEX(-4607, -1535, 4096);
	  COL_VERTEX(-1023, -511, 5120);
	  COL_VERTEX(-3583, 1229, -511);
	  COL_VERTEX(-1279, -511, 3072);
	  COL_VERTEX(-2559, 819, -3071);
	  COL_VERTEX(-2815, 1229, -511);
	  COL_VERTEX(-5631, -306, -511);
	  COL_VERTEX(-5119, 102, -2149);
	  COL_VERTEX(-5119, -511, -511);
	  COL_VERTEX(-4095, -6655, -4607);
	  COL_VERTEX(-3378, -409, -4607);
	  COL_VERTEX(-5119, 0, -4607);
	  COL_VERTEX(-5128, 285, -5732);
	  COL_VERTEX(-3583, 512, -4607);
	  COL_VERTEX(-3583, 1016, -1842);
	  COL_VERTEX(-2559, 512, -3071);
	  COL_VERTEX(-2815, 1690, -1277);
	  COL_VERTEX(-2815, 512, -253);
	  COL_VERTEX(-2815, 1690, -253);
	  COL_VERTEX(-2293, 1106, -1277);
	  COL_VERTEX(-1791, 1690, -1277);
	  COL_VERTEX(-1279, 2202, -3325);
	  COL_VERTEX(5632, -511, -4607);
	  COL_VERTEX(-1023, 4096, -2555);
	  COL_VERTEX(1792, 2202, -3325);
	  COL_VERTEX(-4607, -1535, 7168);
	  COL_VERTEX(-5119, -921, 4096);
	  COL_VERTEX(5734, -2047, -511);
	  COL_VERTEX(6246, -2047, 102);
	  COL_VERTEX(5632, -2047, -511);
	  COL_VERTEX(5632, -2764, 102);
	  COL_VERTEX(6246, -2047, -1330);
	  COL_VERTEX(5734, -2047, -1330);
	  COL_VERTEX(6042, -2457, -1330);
	  COL_VERTEX(5632, -3481, -818);
	  COL_VERTEX(5632, -2047, -1330);
	  COL_VERTEX(2304, 2099, 565);
	  COL_VERTEX(3072, 819, 1024);
	  COL_VERTEX(1887, 2099, 315);
	  COL_VERTEX(2304, 2099, 258);
	  COL_VERTEX(1887, 2099, 258);
	  COL_VERTEX(2304, 2202, 258);
	  COL_VERTEX(5632, -1637, -4607);
	  COL_VERTEX(5632, -1535, -4607);
	  COL_VERTEX(5632, -1535, -6655);
	  COL_VERTEX(5632, -6655, -4607);
	  COL_VERTEX(2560, -613, 3789);
	  COL_VERTEX(1638, -613, 3789);
	  COL_VERTEX(1638, -511, 3789);
	  COL_VERTEX(1741, -511, 3686);
	  COL_VERTEX(2560, -511, 3686);
	  COL_VERTEX(819, -613, 3277);
	  COL_VERTEX(819, -511, 2355);
	  COL_VERTEX(922, -613, 3174);
	  COL_VERTEX(973, -613, 2304);
	  COL_VERTEX(922, -716, 3174);
	  COL_VERTEX(512, -613, 1024);
	  COL_VERTEX(512, -511, 1024);
	  COL_VERTEX(5632, -1535, -5631);
	  COL_VERTEX(4403, -1842, -5631);
	  COL_VERTEX(4403, -1945, -5221);
	  COL_VERTEX(4403, -1842, -5221);
	  COL_VERTEX(2970, -2047, -5221);
	  COL_VERTEX(307, -511, 1024);
	  COL_VERTEX(973, -511, 2304);
	  COL_VERTEX(819, -716, 3277);
	  COL_VERTEX(512, -511, 819);
	  COL_VERTEX(512, -306, 819);
	  COL_VERTEX(307, -511, 819);
	  COL_VERTEX(-6655, -2047, -6655);
	  COL_VERTEX(-5119, -1945, -7167);
	  COL_VERTEX(-6614, -2047, -6628);
	  COL_VERTEX(-5119, -3583, -7167);
	  COL_VERTEX(-5119, -2047, -7167);
	  COL_VERTEX(6656, -2832, 7680);
	  COL_VERTEX(-6614, -2047, -6143);
	  COL_VERTEX(-6655, -1945, -6143);
	  COL_VERTEX(-6614, -1965, -6628);
	  COL_VERTEX(-8150, -2969, 6144);
	  COL_VERTEX(-7679, -2969, 6144);
	  COL_VERTEX(-8191, -2969, 6144);
	  COL_VERTEX(-8191, -3583, 8192);
	  COL_VERTEX(-7679, -3583, 6144);
	  COL_VERTEX(-4095, -2559, -4607);
	  COL_VERTEX(-4095, -2559, -7167);
	  COL_VERTEX(512, -511, 614);
	  COL_VERTEX(307, -306, 819);
	  COL_VERTEX(-5119, -2764, 6349);
	  COL_VERTEX(-5119, -2713, 6400);
	  COL_VERTEX(-5119, -511, 4096);
	  COL_VERTEX(-7167, -2969, 5120);
	  COL_VERTEX(-4607, -2764, 6349);
	  COL_VERTEX(-4607, -2713, 6400);
	  COL_VERTEX(-4607, -2713, 6502);
	  COL_VERTEX(-4607, -2764, 6554);
	  COL_VERTEX(-5119, -511, 8192);
	  COL_VERTEX(-4607, -2969, 6554);
	  COL_VERTEX(-5119, -3583, 5120);
	  COL_VERTEX(-5117, -2969, 5120);
	  COL_VERTEX(-5119, -2969, 8192);
	  COL_VERTEX(-4607, -3071, 8192);
	  COL_VERTEX(-4607, -3583, 8192);
	  COL_VERTEX(-5128, -3583, -5221);
	  COL_VERTEX(6656, -1535, -4607);
	  COL_VERTEX(7680, -1535, -6655);
	  COL_VERTEX(7680, -6655, -4607);
	  COL_VERTEX(6656, -2559, 717);
	  COL_VERTEX(7066, -2559, 307);
	  COL_VERTEX(7475, -6655, 307);
	  COL_VERTEX(7066, -6655, 102);
	  COL_VERTEX(6656, -6655, 717);
	  COL_VERTEX(-3378, -409, -5324);
	  COL_VERTEX(-3378, -101, -5631);
	  COL_VERTEX(-5617, 799, -5703);
	  COL_VERTEX(-5128, -613, -6244);
	  COL_VERTEX(-5128, 797, -6244);
	  COL_VERTEX(-5631, -204, -5631);
	  COL_VERTEX(-5631, 205, -4607);
	  COL_VERTEX(-3378, -613, -5631);
	  COL_VERTEX(6656, -1535, -2764);
	  COL_VERTEX(6656, -6655, -4607);
	  COL_VERTEX(6656, -1535, -2559);
	  COL_VERTEX(7680, -1535, -2559);
	  COL_VERTEX(-921, -1433, -5426);
	  COL_VERTEX(-3378, -818, -5017);
	  COL_VERTEX(-3378, -1330, -5017);
	  COL_VERTEX(-921, -6655, -5426);
	  COL_VERTEX(-3378, -6655, -5017);
	  COL_VERTEX(-3402, -6655, -5019);
	  COL_VERTEX(7168, -6655, 3584);
	  COL_VERTEX(7168, -2559, 5632);
	  COL_VERTEX(6349, -2832, 6656);
	  COL_VERTEX(6758, -2832, 6861);
	  COL_VERTEX(6554, -2832, 6861);
	  COL_VERTEX(7168, -2832, 6656);
	  COL_VERTEX(6349, -2832, 7168);
	  COL_VERTEX(6861, -2832, 7168);
	  COL_VERTEX(7168, -1945, 8192);
	  COL_VERTEX(7168, -6655, 8192);
	  COL_VERTEX(7168, -2762, 6777);
	  COL_VERTEX(1946, -2047, -5631);
	  COL_VERTEX(922, -2457, -5221);
	  COL_VERTEX(2970, -2457, -5631);
	  COL_VERTEX(922, -1637, -4607);
	  COL_VERTEX(922, -2047, -5221);
	  COL_VERTEX(-921, -1637, -5221);
	  COL_VERTEX(-921, -2457, -5221);
	  COL_VERTEX(2816, 3226, -1789);
	  COL_VERTEX(1792, 2202, 258);
	  COL_VERTEX(2304, 3226, -2909);
	  COL_VERTEX(2816, 2202, 258);
	  COL_VERTEX(5632, -511, 258);
	  COL_VERTEX(2560, -1535, 4096);
	  COL_VERTEX(2560, -511, 4096);
	  COL_VERTEX(5632, -1535, 2049);
	  COL_VERTEX(5632, -1433, -4607);
	  COL_VERTEX(2560, -3583, 6144);
	  COL_VERTEX(4096, -2559, 4864);
	  COL_VERTEX(5632, -2559, 4864);
	  COL_VERTEX(5632, -1535, 4096);
	  COL_VERTEX(5632, -2559, 5632);
	  COL_VERTEX(5632, -3583, 5632);
	  COL_VERTEX(5632, -2559, 4096);
	  COL_VERTEX(6656, -6655, 3584);
	  COL_VERTEX(7168, -2559, 3584);
	  COL_VERTEX(6656, -2559, 2560);
	  COL_VERTEX(6656, -6655, 2560);
	  COL_VERTEX(7168, -6655, 2560);
	  COL_VERTEX(853, -511, 1024);
	  COL_VERTEX(-1535, -1535, 1024);
	  COL_VERTEX(-5119, -613, -4607);
	  COL_VERTEX(-4607, -2969, 7168);
	  COL_VERTEX(-4607, -2969, 8192);
	  COL_VERTEX(-1708, -1535, 1631);
	  COL_VERTEX(-1459, -1804, 1629);
	  COL_VERTEX(-2578, -3583, 5700);
	  COL_VERTEX(-2578, -1535, 4676);
	  COL_VERTEX(-2562, -1535, 1638);
	  COL_VERTEX(-5128, -1352, -5220);
	  COL_VERTEX(-5128, -6655, -5221);
	  COL_VERTEX(-296, -3583, 7028);
	  COL_VERTEX(-726, -3583, 7028);
	  COL_VERTEX(-726, -2559, 6284);
	  COL_VERTEX(-941, -2559, 6656);
	  COL_VERTEX(-726, -3583, 6284);
	  COL_VERTEX(-81, -2559, 6656);
	  COL_VERTEX(-296, -3583, 6284);
	  COL_VERTEX(7250, -2559, 2264);
	  COL_VERTEX(7680, -2559, 717);
	  COL_VERTEX(-6143, -3583, 2048);
	  COL_VERTEX(-5119, -2559, 2048);
	  COL_VERTEX(-6655, -2559, 0);
	  COL_VERTEX(-7167, -2559, 1024);
	  COL_VERTEX(-6655, -3583, 0);
	  COL_VERTEX(-4607, -1535, -7167);
	  COL_VERTEX(-5119, -3583, -8191);
	  COL_VERTEX(-4607, -1023, -8191);
	  COL_VERTEX(-7167, -2047, -3071);
	  COL_VERTEX(-7167, -2047, -4607);
	  COL_VERTEX(-6655, -2047, -5119);
	  COL_VERTEX(-716, 3891, -815);
	  COL_VERTEX(717, 3891, -815);
	  COL_VERTEX(-101, 3891, -1634);
	  COL_VERTEX(-716, 3891, -2248);
	  COL_VERTEX(5803, -2832, 7168);
	  COL_VERTEX(6656, -2832, 8192);
	  COL_VERTEX(6042, -2457, 102);
	  COL_VERTEX(5632, -2764, -1330);
	  COL_VERTEX(-2303, 1690, -253);
	  COL_VERTEX(-1791, 2099, 258);
	  COL_VERTEX(-1791, 2202, 258);
	  COL_VERTEX(-1791, 2202, 565);
	  COL_VERTEX(-1374, 2099, 315);
	  COL_VERTEX(-2559, -511, 1024);
	  COL_VERTEX(-2559, 512, -511);
	  COL_VERTEX(-3583, 512, -511);
	  COL_VERTEX(-2559, 512, -253);
	  COL_VERTEX(-2559, -204, 1331);
	  COL_VERTEX(-1459, -1459, 1629);
	  COL_VERTEX(3072, 819, 258);
	  COL_VERTEX(-1535, 0, 1024);
	  COL_VERTEX(-2559, -511, 1331);
	  COL_VERTEX(0, -1535, 1024);
	  COL_VERTEX(-1023, -1023, 5120);
	  COL_VERTEX(-4607, -204, 1024);
	  COL_VERTEX(-2559, -511, 2048);
	  COL_VERTEX(-5631, -306, 4096);
	  COL_VERTEX(-2562, -1804, 1638);
	  COL_VERTEX(-4607, -2969, 5120);
	  COL_VERTEX(-2815, 1106, -1277);
	  COL_VERTEX(-2815, 512, -511);
	  COL_VERTEX(-4607, 0, -4607);
	  COL_VERTEX(-5631, -204, -4607);
	  COL_VERTEX(-2559, 512, -4607);
	  COL_VERTEX(-2559, 819, -4607);
	  COL_VERTEX(-1792, 1648, -1277);
	  COL_VERTEX(-1791, 1649, -1277);
	  COL_VERTEX(-4650, -2764, 8192);
	  COL_VERTEX(1024, 4096, -2555);
	  COL_VERTEX(5632, -2047, 102);
	  COL_VERTEX(6554, -2047, -818);
	  COL_VERTEX(5734, -1535, -4607);
	  COL_VERTEX(5734, -1637, -4607);
	  COL_VERTEX(2304, 2202, 565);
	  COL_VERTEX(7680, -1535, -5631);
	  COL_VERTEX(7680, -6655, -6655);
	  COL_VERTEX(5632, -6655, -6655);
	  COL_VERTEX(5632, -2457, 4096);
	  COL_VERTEX(2560, -613, 3686);
	  COL_VERTEX(1741, -613, 3686);
	  COL_VERTEX(2560, -511, 3789);
	  COL_VERTEX(819, -613, 2355);
	  COL_VERTEX(4403, -1945, -5631);
	  COL_VERTEX(5632, -1637, -5631);
	  COL_VERTEX(2970, -2149, -5631);
	  COL_VERTEX(2970, -2047, -5631);
	  COL_VERTEX(2970, -2149, -5221);
	  COL_VERTEX(5632, -1637, -5221);
	  COL_VERTEX(5632, -1535, -5221);
	  COL_VERTEX(307, -511, 614);
	  COL_VERTEX(307, -306, 614);
	  COL_VERTEX(-6655, -1945, -6655);
	  COL_VERTEX(-5119, -2047, -7126);
	  COL_VERTEX(-5119, -1965, -7126);
	  COL_VERTEX(-6655, -3583, -6655);
	  COL_VERTEX(-5119, -2047, -6143);
	  COL_VERTEX(512, -306, 614);
	  COL_VERTEX(-5119, -1535, -8191);
	  COL_VERTEX(6656, -2730, 7680);
	  COL_VERTEX(5803, -2730, 7168);
	  COL_VERTEX(-6655, -3583, -5119);
	  COL_VERTEX(-6655, -2047, -6143);
	  COL_VERTEX(-6614, -1965, -6143);
	  COL_VERTEX(-7167, -3583, -4607);
	  COL_VERTEX(-8191, -2436, 6144);
	  COL_VERTEX(-8150, -2764, 6144);
	  COL_VERTEX(-8191, -2969, 8192);
	  COL_VERTEX(-8191, -3583, 6144);
	  COL_VERTEX(-4095, -6655, -7167);
	  COL_VERTEX(-4607, -6655, -7167);
	  COL_VERTEX(-4607, -2559, -7167);
	  COL_VERTEX(-5119, -2969, 6349);
	  COL_VERTEX(-4607, -2969, 6349);
	  COL_VERTEX(-5119, -2969, 6554);
	  COL_VERTEX(-5119, -2713, 6502);
	  COL_VERTEX(-7167, -3583, 5120);
	  COL_VERTEX(-5119, -921, -511);
	  COL_VERTEX(-5119, -2764, 6554);
	  COL_VERTEX(-5119, -2969, 5120);
	  COL_VERTEX(6656, -6655, -2559);
	  COL_VERTEX(-4607, -3583, 7987);
	  COL_VERTEX(7680, -1535, -2764);
	  COL_VERTEX(7066, -2559, 102);
	  COL_VERTEX(7475, -2559, 307);
	  COL_VERTEX(-3378, -818, -4607);
	  COL_VERTEX(-921, -1433, -4607);
	  COL_VERTEX(7680, -6655, -2559);
	  COL_VERTEX(-921, -6655, -4607);
	  COL_VERTEX(6656, -2559, 3584);
	  COL_VERTEX(6554, -2832, 7066);
	  COL_VERTEX(6758, -2832, 7066);
	  COL_VERTEX(6656, -3583, 8192);
	  COL_VERTEX(922, -2047, -4607);
	  COL_VERTEX(2970, -2047, -4607);
	  COL_VERTEX(1946, -2457, -5631);
	  COL_VERTEX(6656, -3583, 7680);
	  COL_VERTEX(2970, -2457, -4607);
	  COL_VERTEX(922, -1637, -5221);
	  COL_VERTEX(-921, -1637, -4607);
	  COL_VERTEX(2816, 3226, -2909);
	  COL_VERTEX(2304, 3226, -1789);
	  COL_VERTEX(2560, -511, 3072);
	  COL_VERTEX(5632, -511, 1024);
	  COL_VERTEX(5632, -511, 2049);
	  COL_VERTEX(6400, -2559, 4096);
	  COL_VERTEX(6400, -6655, 4096);
	  COL_VERTEX(5632, -6655, 4096);
	  COL_VERTEX(7168, -2559, 2560);
	  COL_VERTEX(6656, -2559, 2253);
	  COL_VERTEX(768, -613, 1024);
	  COL_VERTEX(-726, -2559, 7028);
	  COL_VERTEX(-941, -3583, 6656);
	  COL_VERTEX(-296, -2559, 7028);
	  COL_VERTEX(-296, -2559, 6284);
	  COL_VERTEX(-81, -3583, 6656);
	  COL_VERTEX(7680, -6655, 717);
	  COL_VERTEX(-6143, -2559, 2048);
	  COL_VERTEX(-5119, -3583, 2048);
	  COL_VERTEX(-7167, -3583, 1024);
	  COL_VERTEX(-5119, -2559, 0);
	  COL_VERTEX(-5119, -3583, 0);
	  COL_VERTEX(5632, -3583, 4864);
	  COL_VERTEX(-4607, -3583, -8191);
	  COL_VERTEX(1024, 4096, -507);
	  COL_VERTEX(-1023, 4096, -507);
	  COL_VERTEX(-7167, -3583, -3071);
	  COL_VERTEX(-5119, -3583, -3071);
	  COL_VERTEX(-5119, -2047, -3071);
	  COL_VERTEX(102, 3891, -1429);
	  COL_VERTEX(102, 3891, -1634);
	  COL_VERTEX(717, 3891, -2248);
	  COL_VERTEX(-101, 3891, -1429);
	  COL_VERTEX(4267, -3583, 7168);
	  COL_VERTEX(-5119, -2559, -4607);
	  COL_VERTEX(-5119, -2559, -6143);
	  COL_VERTEX(-3583, -3583, 7680);
	  COL_VERTEX(-4405, -429, 1434);
	  COL_VERTEX(-4430, -409, 1439);
	  COL_VERTEX(-2887, -429, 2849);
	  COL_VERTEX(-2894, -409, 2871);
	  COL_VERTEX(-4455, -429, 1444);
	  COL_VERTEX(-4281, -429, 1187);
	  COL_VERTEX(-4299, -409, 1178);
	  COL_VERTEX(-4318, -429, 1169);
	  COL_VERTEX(-2900, -429, 2893);
	  COL_VERTEX(-2613, -409, 2820);
	  COL_VERTEX(-2586, -429, 2836);
	  COL_VERTEX(-2640, -429, 2804);
	  COL_VERTEX(-2815, -429, 2149);
	  COL_VERTEX(-2838, -409, 2147);
	  COL_VERTEX(-2860, -429, 2146);
	  COL_VERTEX(-2724, -429, 1966);
	  COL_VERTEX(-2742, -409, 1956);
	  COL_VERTEX(2304, -613, 2867);
	  COL_VERTEX(-2760, -429, 1947);
	  COL_VERTEX(6677, -2750, 7645);
	  COL_VERTEX(5882, -2750, 7168);
	  COL_VERTEX(-8191, -2436, 8192);
	  COL_VERTEX(-8150, -2764, 8151);
	  COL_VERTEX(-5119, -2436, 8192);
	  COL_VERTEX(-5119, -2764, 8151);
	  COL_VERTEX(-8191, -7167, -8191);
	  COL_VERTEX(-8191, -7167, 8192);
	  COL_VERTEX(8192, -7167, 8192);
	  COL_VERTEX(8192, -7167, -8191);
	  COL_VERTEX(7782, -7065, 205);
	  COL_VERTEX(5632, -7065, -2866);
	  COL_VERTEX(5632, -7065, 205);
	  COL_VERTEX(7782, -7065, -2866);
	  COL_VERTEX(6656, -3071, 8192);
	  COL_VERTEX(-5119, -3071, -8191);
	  COL_VERTEX(-8191, -3071, -8191);
	  COL_VERTEX(-8191, -3583, -8191);
	  COL_VERTEX(-8191, -3071, 6144);
	  COL_VERTEX(5632, -1433, -6655);
	  COL_VERTEX(6400, -2457, 4096);
	  COL_VERTEX(7168, -2457, 5632);
	  COL_VERTEX(-2640, -511, 2804);
	  COL_VERTEX(-2760, -511, 1947);
	  COL_VERTEX(-4318, -511, 1169);
	  COL_VERTEX(-2900, -511, 2893);
	  COL_VERTEX(-2586, -511, 2836);
	  COL_VERTEX(5882, -2832, 7168);
	  COL_VERTEX(-101, 3379, -1634);
	  COL_VERTEX(-101, 3379, -1429);
	  COL_VERTEX(-101, 3174, -1634);
	  COL_VERTEX(102, 3379, -1634);
	  COL_VERTEX(102, 3379, -1429);
	  COL_VERTEX(6758, -3344, 6861);
	  COL_VERTEX(6758, -3344, 7066);
	  COL_VERTEX(6554, -3344, 6861);
	  COL_VERTEX(6554, -3344, 7066);
	  COL_VERTEX(-5119, -2047, -4607);
	  COL_VERTEX(-4607, -6655, -8191);
	  COL_VERTEX(6656, -1535, -6655);
	  COL_VERTEX(6656, -1433, -6655);
	  COL_VERTEX(5632, -1433, -5221);
	  COL_VERTEX(5632, -1433, -5631);
	  COL_VERTEX(6656, -2457, 3584);
	  COL_VERTEX(7168, -2457, 3584);
	  COL_VERTEX(-2887, -511, 2849);
	  COL_VERTEX(-2860, -511, 2146);
	  COL_VERTEX(-4405, -511, 1434);
	  COL_VERTEX(-4281, -511, 1187);
	  COL_VERTEX(-2815, -511, 2149);
	  COL_VERTEX(-2724, -511, 1966);
	  COL_VERTEX(-4455, -511, 1444);
	  COL_VERTEX(6677, -2832, 7645);
	  COL_VERTEX(102, 3174, -1634);
	  COL_VERTEX(-101, 3174, -1429);
	  COL_VERTEX(102, 3174, -1429);
	  COL_VERTEX(-5116, -3583, 8192);
	  COL_VERTEX(-8150, -2969, 8151);
	  COL_VERTEX(-5119, -2969, 8151);
	  COL_TRI_INIT(SURFACE_DEFAULT, 572);
	  COL_TRI(6, 12, 13);
	  COL_TRI(0, 1, 2);
	  COL_TRI(2, 1, 3);
	  COL_TRI(2, 3, 4);
	  COL_TRI(2, 4, 5);
	  COL_TRI(2, 5, 6);
	  COL_TRI(7, 0, 2);
	  COL_TRI(7, 2, 6);
	  COL_TRI(4, 8, 9);
	  COL_TRI(4, 3, 8);
	  COL_TRI(4, 9, 10);
	  COL_TRI(5, 4, 10);
	  COL_TRI(5, 11, 6);
	  COL_TRI(11, 12, 6);
	  COL_TRI(6, 13, 7);
	  COL_TRI(14, 0, 7);
	  COL_TRI(7, 13, 15);
	  COL_TRI(7, 15, 14);
	  COL_TRI(0, 16, 1);
	  COL_TRI(9, 16, 0);
	  COL_TRI(14, 9, 0);
	  COL_TRI(9, 14, 10);
	  COL_TRI(9, 8, 16);
	  COL_TRI(17, 14, 15);
	  COL_TRI(15, 13, 18);
	  COL_TRI(18, 19, 15);
	  COL_TRI(19, 17, 15);
	  COL_TRI(5, 20, 11);
	  COL_TRI(20, 12, 11);
	  COL_TRI(3, 16, 8);
	  COL_TRI(3, 1, 16);
	  COL_TRI(21, 22, 24);
	  COL_TRI(22, 253, 24);
	  COL_TRI(23, 24, 253);
	  COL_TRI(26, 254, 31);
	  COL_TRI(24, 23, 254);
	  COL_TRI(24, 254, 255);
	  COL_TRI(23, 31, 254);
	  COL_TRI(26, 256, 255);
	  COL_TRI(26, 255, 254);
	  COL_TRI(25, 24, 255);
	  COL_TRI(27, 25, 255);
	  COL_TRI(28, 30, 23);
	  COL_TRI(29, 28, 23);
	  COL_TRI(30, 31, 23);
	  COL_TRI(31, 257, 26);
	  COL_TRI(30, 257, 31);
	  COL_TRI(30, 82, 83);
	  COL_TRI(30, 83, 257);
	  COL_TRI(32, 82, 30);
	  COL_TRI(30, 258, 39);
	  COL_TRI(33, 32, 30);
	  COL_TRI(30, 39, 33);
	  COL_TRI(34, 30, 28);
	  COL_TRI(26, 257, 83);
	  COL_TRI(38, 36, 262);
	  COL_TRI(34, 259, 260);
	  COL_TRI(34, 260, 43);
	  COL_TRI(35, 34, 43);
	  COL_TRI(34, 28, 261);
	  COL_TRI(34, 36, 265);
	  COL_TRI(34, 262, 36);
	  COL_TRI(36, 38, 39);
	  COL_TRI(37, 265, 36);
	  COL_TRI(39, 214, 267);
	  COL_TRI(38, 262, 266);
	  COL_TRI(39, 38, 263);
	  COL_TRI(39, 263, 214);
	  COL_TRI(39, 40, 108);
	  COL_TRI(39, 108, 33);
	  COL_TRI(40, 39, 267);
	  COL_TRI(41, 20, 53);
	  COL_TRI(20, 41, 269);
	  COL_TRI(41, 53, 134);
	  COL_TRI(42, 41, 134);
	  COL_TRI(41, 44, 269);
	  COL_TRI(41, 42, 270);
	  COL_TRI(41, 270, 44);
	  COL_TRI(43, 20, 269);
	  COL_TRI(44, 43, 269);
	  COL_TRI(42, 45, 221);
	  COL_TRI(42, 221, 268);
	  COL_TRI(42, 268, 46);
	  COL_TRI(45, 42, 134);
	  COL_TRI(44, 35, 43);
	  COL_TRI(43, 260, 20);
	  COL_TRI(47, 20, 260);
	  COL_TRI(20, 5, 53);
	  COL_TRI(20, 47, 12);
	  COL_TRI(48, 46, 268);
	  COL_TRI(46, 48, 270);
	  COL_TRI(46, 270, 42);
	  COL_TRI(38, 48, 268);
	  COL_TRI(47, 59, 12);
	  COL_TRI(49, 47, 274);
	  COL_TRI(49, 18, 47);
	  COL_TRI(47, 50, 274);
	  COL_TRI(50, 47, 260);
	  COL_TRI(5, 52, 53);
	  COL_TRI(5, 10, 52);
	  COL_TRI(57, 162, 56);
	  COL_TRI(51, 53, 52);
	  COL_TRI(51, 52, 162);
	  COL_TRI(52, 56, 162);
	  COL_TRI(10, 14, 52);
	  COL_TRI(14, 17, 52);
	  COL_TRI(17, 56, 52);
	  COL_TRI(53, 271, 134);
	  COL_TRI(53, 51, 271);
	  COL_TRI(17, 276, 56);
	  COL_TRI(54, 56, 276);
	  COL_TRI(55, 156, 56);
	  COL_TRI(56, 156, 57);
	  COL_TRI(58, 276, 17);
	  COL_TRI(19, 58, 17);
	  COL_TRI(59, 18, 13);
	  COL_TRI(18, 60, 19);
	  COL_TRI(18, 49, 60);
	  COL_TRI(59, 13, 12);
	  COL_TRI(60, 58, 19);
	  COL_TRI(60, 278, 58);
	  COL_TRI(49, 274, 64);
	  COL_TRI(61, 274, 50);
	  COL_TRI(49, 278, 60);
	  COL_TRI(49, 279, 278);
	  COL_TRI(50, 260, 275);
	  COL_TRI(62, 50, 275);
	  COL_TRI(28, 62, 261);
	  COL_TRI(63, 62, 28);
	  COL_TRI(50, 62, 63);
	  COL_TRI(61, 50, 63);
	  COL_TRI(22, 63, 253);
	  COL_TRI(22, 61, 63);
	  COL_TRI(63, 28, 29);
	  COL_TRI(63, 29, 253);
	  COL_TRI(64, 274, 61);
	  COL_TRI(64, 61, 280);
	  COL_TRI(61, 65, 280);
	  COL_TRI(65, 61, 22);
	  COL_TRI(49, 64, 281);
	  COL_TRI(66, 279, 49);
	  COL_TRI(66, 49, 281);
	  COL_TRI(66, 281, 25);
	  COL_TRI(65, 25, 280);
	  COL_TRI(25, 65, 22);
	  COL_TRI(25, 22, 21);
	  COL_TRI(25, 21, 24);
	  COL_TRI(23, 253, 29);
	  COL_TRI(67, 279, 66);
	  COL_TRI(68, 66, 25);
	  COL_TRI(69, 67, 66);
	  COL_TRI(68, 69, 66);
	  COL_TRI(70, 45, 134);
	  COL_TRI(70, 134, 140);
	  COL_TRI(71, 134, 271);
	  COL_TRI(72, 286, 88);
	  COL_TRI(72, 88, 74);
	  COL_TRI(73, 72, 74);
	  COL_TRI(74, 284, 73);
	  COL_TRI(75, 73, 284);
	  COL_TRI(73, 251, 285);
	  COL_TRI(75, 251, 73);
	  COL_TRI(73, 285, 72);
	  COL_TRI(76, 77, 72);
	  COL_TRI(72, 285, 76);
	  COL_TRI(77, 286, 72);
	  COL_TRI(78, 76, 285);
	  COL_TRI(79, 78, 285);
	  COL_TRI(85, 84, 81);
	  COL_TRI(80, 76, 78);
	  COL_TRI(77, 287, 286);
	  COL_TRI(81, 256, 26);
	  COL_TRI(26, 83, 81);
	  COL_TRI(82, 85, 83);
	  COL_TRI(83, 85, 81);
	  COL_TRI(84, 288, 81);
	  COL_TRI(81, 288, 256);
	  COL_TRI(82, 264, 85);
	  COL_TRI(84, 85, 264);
	  COL_TRI(86, 84, 195);
	  COL_TRI(84, 86, 288);
	  COL_TRI(87, 287, 77);
	  COL_TRI(88, 149, 89);
	  COL_TRI(88, 148, 149);
	  COL_TRI(89, 90, 88);
	  COL_TRI(94, 293, 294);
	  COL_TRI(87, 77, 80);
	  COL_TRI(91, 92, 293);
	  COL_TRI(92, 294, 293);
	  COL_TRI(92, 100, 294);
	  COL_TRI(92, 110, 100);
	  COL_TRI(93, 110, 92);
	  COL_TRI(91, 93, 92);
	  COL_TRI(94, 95, 293);
	  COL_TRI(98, 94, 294);
	  COL_TRI(91, 295, 93);
	  COL_TRI(95, 93, 295);
	  COL_TRI(93, 96, 110);
	  COL_TRI(95, 94, 93);
	  COL_TRI(94, 96, 93);
	  COL_TRI(94, 98, 96);
	  COL_TRI(96, 98, 109);
	  COL_TRI(97, 96, 109);
	  COL_TRI(98, 294, 100);
	  COL_TRI(99, 100, 296);
	  COL_TRI(100, 110, 296);
	  COL_TRI(101, 296, 40);
	  COL_TRI(101, 99, 296);
	  COL_TRI(102, 101, 213);
	  COL_TRI(103, 297, 104);
	  COL_TRI(103, 298, 297);
	  COL_TRI(104, 297, 299);
	  COL_TRI(104, 299, 300);
	  COL_TRI(105, 301, 299);
	  COL_TRI(105, 299, 297);
	  COL_TRI(106, 105, 302);
	  COL_TRI(106, 302, 303);
	  COL_TRI(107, 105, 106);
	  COL_TRI(107, 301, 105);
	  COL_TRI(105, 298, 302);
	  COL_TRI(105, 297, 298);
	  COL_TRI(108, 109, 102);
	  COL_TRI(108, 97, 109);
	  COL_TRI(101, 109, 99);
	  COL_TRI(101, 102, 109);
	  COL_TRI(109, 100, 99);
	  COL_TRI(109, 98, 100);
	  COL_TRI(97, 108, 40);
	  COL_TRI(97, 40, 296);
	  COL_TRI(110, 96, 97);
	  COL_TRI(110, 97, 296);
	  COL_TRI(32, 111, 102);
	  COL_TRI(32, 102, 213);
	  COL_TRI(102, 111, 113);
	  COL_TRI(102, 113, 108);
	  COL_TRI(32, 112, 111);
	  COL_TRI(111, 304, 113);
	  COL_TRI(111, 130, 304);
	  COL_TRI(112, 130, 111);
	  COL_TRI(108, 113, 131);
	  COL_TRI(113, 304, 305);
	  COL_TRI(113, 305, 131);
	  COL_TRI(108, 131, 33);
	  COL_TRI(114, 115, 118);
	  COL_TRI(130, 305, 304);
	  COL_TRI(33, 131, 112);
	  COL_TRI(33, 112, 32);
	  COL_TRI(115, 307, 118);
	  COL_TRI(116, 308, 122);
	  COL_TRI(116, 307, 308);
	  COL_TRI(115, 308, 307);
	  COL_TRI(117, 118, 312);
	  COL_TRI(118, 117, 309);
	  COL_TRI(118, 309, 114);
	  COL_TRI(118, 310, 239);
	  COL_TRI(118, 239, 312);
	  COL_TRI(119, 313, 314);
	  COL_TRI(122, 317, 120);
	  COL_TRI(119, 314, 249);
	  COL_TRI(120, 121, 316);
	  COL_TRI(120, 317, 121);
	  COL_TRI(121, 114, 316);
	  COL_TRI(121, 306, 114);
	  COL_TRI(114, 309, 315);
	  COL_TRI(114, 315, 244);
	  COL_TRI(122, 120, 116);
	  COL_TRI(114, 306, 115);
	  COL_TRI(123, 319, 320);
	  COL_TRI(123, 125, 319);
	  COL_TRI(124, 125, 144);
	  COL_TRI(125, 321, 144);
	  COL_TRI(126, 125, 322);
	  COL_TRI(126, 321, 125);
	  COL_TRI(127, 125, 124);
	  COL_TRI(127, 322, 125);
	  COL_TRI(144, 321, 126);
	  COL_TRI(32, 213, 82);
	  COL_TRI(128, 323, 129);
	  COL_TRI(129, 324, 325);
	  COL_TRI(129, 323, 324);
	  COL_TRI(128, 54, 323);
	  COL_TRI(130, 311, 305);
	  COL_TRI(131, 305, 311);
	  COL_TRI(131, 311, 112);
	  COL_TRI(112, 311, 130);
	  COL_TRI(134, 133, 329);
	  COL_TRI(132, 326, 327);
	  COL_TRI(132, 327, 136);
	  COL_TRI(133, 132, 136);
	  COL_TRI(134, 326, 132);
	  COL_TRI(134, 132, 133);
	  COL_TRI(135, 328, 326);
	  COL_TRI(134, 143, 326);
	  COL_TRI(136, 327, 273);
	  COL_TRI(133, 136, 137);
	  COL_TRI(136, 273, 45);
	  COL_TRI(137, 136, 45);
	  COL_TRI(137, 329, 133);
	  COL_TRI(137, 138, 329);
	  COL_TRI(70, 137, 45);
	  COL_TRI(70, 138, 137);
	  COL_TRI(138, 139, 332);
	  COL_TRI(138, 332, 329);
	  COL_TRI(139, 138, 70);
	  COL_TRI(140, 329, 332);
	  COL_TRI(134, 329, 140);
	  COL_TRI(139, 328, 332);
	  COL_TRI(139, 141, 328);
	  COL_TRI(139, 70, 216);
	  COL_TRI(141, 139, 216);
	  COL_TRI(140, 328, 144);
	  COL_TRI(140, 332, 328);
	  COL_TRI(135, 144, 328);
	  COL_TRI(142, 135, 333);
	  COL_TRI(143, 135, 326);
	  COL_TRI(142, 330, 135);
	  COL_TRI(135, 124, 144);
	  COL_TRI(135, 330, 127);
	  COL_TRI(135, 127, 124);
	  COL_TRI(140, 144, 217);
	  COL_TRI(126, 146, 144);
	  COL_TRI(145, 217, 144);
	  COL_TRI(146, 145, 144);
	  COL_TRI(147, 142, 143);
	  COL_TRI(148, 289, 149);
	  COL_TRI(88, 165, 148);
	  COL_TRI(148, 165, 164);
	  COL_TRI(149, 290, 291);
	  COL_TRI(149, 291, 89);
	  COL_TRI(150, 149, 336);
	  COL_TRI(150, 290, 149);
	  COL_TRI(151, 152, 337);
	  COL_TRI(152, 338, 337);
	  COL_TRI(153, 337, 338);
	  COL_TRI(153, 154, 337);
	  COL_TRI(154, 155, 337);
	  COL_TRI(155, 151, 337);
	  COL_TRI(156, 55, 169);
	  COL_TRI(156, 157, 57);
	  COL_TRI(57, 158, 162);
	  COL_TRI(57, 160, 158);
	  COL_TRI(157, 160, 57);
	  COL_TRI(158, 161, 162);
	  COL_TRI(159, 161, 158);
	  COL_TRI(160, 159, 158);
	  COL_TRI(157, 159, 160);
	  COL_TRI(161, 277, 162);
	  COL_TRI(162, 277, 331);
	  COL_TRI(163, 157, 156);
	  COL_TRI(163, 156, 169);
	  COL_TRI(164, 166, 167);
	  COL_TRI(164, 167, 336);
	  COL_TRI(165, 166, 164);
	  COL_TRI(166, 334, 341);
	  COL_TRI(166, 341, 167);
	  COL_TRI(165, 334, 166);
	  COL_TRI(167, 150, 336);
	  COL_TRI(167, 341, 150);
	  COL_TRI(168, 170, 169);
	  COL_TRI(170, 163, 169);
	  COL_TRI(169, 55, 339);
	  COL_TRI(169, 339, 340);
	  COL_TRI(169, 340, 168);
	  COL_TRI(171, 168, 340);
	  COL_TRI(171, 340, 342);
	  COL_TRI(172, 170, 168);
	  COL_TRI(173, 168, 171);
	  COL_TRI(174, 209, 175);
	  COL_TRI(175, 176, 179);
	  COL_TRI(175, 179, 174);
	  COL_TRI(180, 345, 344);
	  COL_TRI(177, 181, 179);
	  COL_TRI(178, 177, 179);
	  COL_TRI(178, 179, 176);
	  COL_TRI(179, 181, 184);
	  COL_TRI(179, 184, 183);
	  COL_TRI(179, 183, 174);
	  COL_TRI(176, 344, 178);
	  COL_TRI(177, 345, 181);
	  COL_TRI(176, 180, 344);
	  COL_TRI(176, 175, 205);
	  COL_TRI(180, 181, 345);
	  COL_TRI(181, 180, 119);
	  COL_TRI(181, 182, 184);
	  COL_TRI(182, 181, 119);
	  COL_TRI(180, 249, 119);
	  COL_TRI(182, 119, 250);
	  COL_TRI(182, 250, 346);
	  COL_TRI(183, 182, 346);
	  COL_TRI(184, 182, 183);
	  COL_TRI(185, 189, 347);
	  COL_TRI(185, 347, 348);
	  COL_TRI(189, 352, 188);
	  COL_TRI(185, 348, 300);
	  COL_TRI(185, 300, 187);
	  COL_TRI(186, 189, 185);
	  COL_TRI(187, 300, 348);
	  COL_TRI(187, 348, 351);
	  COL_TRI(188, 352, 190);
	  COL_TRI(188, 190, 353);
	  COL_TRI(189, 188, 347);
	  COL_TRI(190, 352, 189);
	  COL_TRI(191, 190, 189);
	  COL_TRI(192, 354, 194);
	  COL_TRI(192, 194, 355);
	  COL_TRI(86, 195, 192);
	  COL_TRI(193, 86, 192);
	  COL_TRI(193, 192, 355);
	  COL_TRI(67, 354, 192);
	  COL_TRI(192, 196, 67);
	  COL_TRI(192, 195, 196);
	  COL_TRI(199, 198, 197);
	  COL_TRI(69, 194, 354);
	  COL_TRI(194, 69, 283);
	  COL_TRI(195, 84, 264);
	  COL_TRI(196, 195, 264);
	  COL_TRI(197, 198, 356);
	  COL_TRI(198, 357, 356);
	  COL_TRI(198, 358, 357);
	  COL_TRI(199, 358, 198);
	  COL_TRI(88, 200, 199);
	  COL_TRI(90, 88, 204);
	  COL_TRI(200, 358, 199);
	  COL_TRI(200, 67, 358);
	  COL_TRI(197, 204, 199);
	  COL_TRI(201, 197, 267);
	  COL_TRI(202, 197, 201);
	  COL_TRI(203, 197, 202);
	  COL_TRI(203, 204, 197);
	  COL_TRI(204, 203, 292);
	  COL_TRI(90, 204, 292);
	  COL_TRI(90, 292, 207);
	  COL_TRI(89, 291, 90);
	  COL_TRI(175, 203, 205);
	  COL_TRI(176, 205, 206);
	  COL_TRI(205, 203, 206);
	  COL_TRI(203, 175, 359);
	  COL_TRI(203, 359, 207);
	  COL_TRI(206, 203, 202);
	  COL_TRI(203, 207, 292);
	  COL_TRI(175, 209, 359);
	  COL_TRI(207, 359, 360);
	  COL_TRI(208, 360, 359);
	  COL_TRI(208, 359, 343);
	  COL_TRI(209, 343, 359);
	  COL_TRI(207, 360, 361);
	  COL_TRI(207, 361, 90);
	  COL_TRI(208, 209, 174);
	  COL_TRI(208, 343, 209);
	  COL_TRI(210, 362, 232);
	  COL_TRI(210, 232, 363);
	  COL_TRI(210, 212, 362);
	  COL_TRI(212, 232, 362);
	  COL_TRI(213, 101, 364);
	  COL_TRI(101, 267, 364);
	  COL_TRI(101, 40, 267);
	  COL_TRI(214, 219, 267);
	  COL_TRI(201, 267, 219);
	  COL_TRI(215, 223, 147);
	  COL_TRI(216, 217, 145);
	  COL_TRI(146, 216, 145);
	  COL_TRI(146, 335, 216);
	  COL_TRI(217, 70, 282);
	  COL_TRI(70, 217, 216);
	  COL_TRI(70, 140, 282);
	  COL_TRI(214, 263, 219);
	  COL_TRI(218, 272, 219);
	  COL_TRI(220, 221, 273);
	  COL_TRI(219, 263, 218);
	  COL_TRI(221, 263, 268);
	  COL_TRI(38, 268, 263);
	  COL_TRI(221, 218, 263);
	  COL_TRI(221, 222, 218);
	  COL_TRI(221, 272, 222);
	  COL_TRI(221, 220, 272);
	  COL_TRI(221, 45, 273);
	  COL_TRI(147, 223, 170);
	  COL_TRI(222, 272, 218);
	  COL_TRI(223, 277, 161);
	  COL_TRI(159, 223, 161);
	  COL_TRI(223, 215, 277);
	  COL_TRI(157, 163, 159);
	  COL_TRI(223, 159, 163);
	  COL_TRI(170, 223, 163);
	  COL_TRI(170, 172, 224);
	  COL_TRI(224, 147, 170);
	  COL_TRI(215, 147, 143);
	  COL_TRI(225, 365, 226);
	  COL_TRI(226, 365, 228);
	  COL_TRI(226, 228, 366);
	  COL_TRI(225, 367, 365);
	  COL_TRI(227, 228, 365);
	  COL_TRI(227, 365, 367);
	  COL_TRI(228, 227, 229);
	  COL_TRI(228, 229, 366);
	  COL_TRI(229, 227, 368);
	  COL_TRI(227, 367, 230);
	  COL_TRI(227, 230, 368);
	  COL_TRI(229, 368, 231);
	  COL_TRI(230, 367, 225);
	  COL_TRI(230, 225, 369);
	  COL_TRI(231, 368, 230);
	  COL_TRI(231, 230, 369);
	  COL_TRI(210, 211, 212);
	  COL_TRI(220, 219, 272);
	  COL_TRI(143, 134, 331);
	  COL_TRI(143, 331, 215);
	  COL_TRI(219, 220, 201);
	  COL_TRI(206, 202, 201);
	  COL_TRI(232, 212, 370);
	  COL_TRI(235, 234, 372);
	  COL_TRI(232, 370, 233);
	  COL_TRI(233, 370, 153);
	  COL_TRI(233, 153, 338);
	  COL_TRI(151, 155, 211);
	  COL_TRI(151, 211, 363);
	  COL_TRI(211, 210, 363);
	  COL_TRI(234, 371, 237);
	  COL_TRI(235, 371, 234);
	  COL_TRI(236, 237, 371);
	  COL_TRI(236, 371, 235);
	  COL_TRI(234, 237, 373);
	  COL_TRI(237, 236, 238);
	  COL_TRI(237, 238, 373);
	  COL_TRI(238, 236, 374);
	  COL_TRI(236, 235, 374);
	  COL_TRI(238, 374, 375);
	  COL_TRI(203, 376, 206);
	  COL_TRI(88, 90, 165);
	  COL_TRI(186, 185, 349);
	  COL_TRI(239, 241, 312);
	  COL_TRI(240, 312, 241);
	  COL_TRI(117, 312, 240);
	  COL_TRI(241, 377, 240);
	  COL_TRI(191, 189, 186);
	  COL_TRI(185, 187, 349);
	  COL_TRI(27, 379, 68);
	  COL_TRI(67, 69, 354);
	  COL_TRI(68, 283, 69);
	  COL_TRI(193, 378, 379);
	  COL_TRI(193, 379, 27);
	  COL_TRI(193, 355, 378);
	  COL_TRI(242, 380, 381);
	  COL_TRI(242, 381, 382);
	  COL_TRI(243, 380, 242);
	  COL_TRI(248, 386, 247);
	  COL_TRI(243, 318, 380);
	  COL_TRI(244, 318, 243);
	  COL_TRI(244, 315, 318);
	  COL_TRI(245, 246, 383);
	  COL_TRI(246, 384, 383);
	  COL_TRI(246, 385, 384);
	  COL_TRI(247, 385, 248);
	  COL_TRI(247, 384, 385);
	  COL_TRI(245, 383, 386);
	  COL_TRI(248, 245, 386);
	  COL_TRI(79, 251, 75);
	  COL_TRI(27, 68, 25);
	  COL_TRI(119, 249, 350);
	  COL_TRI(249, 387, 350);
	  COL_TRI(250, 119, 350);
	  COL_TRI(250, 350, 346);
	  COL_TRI(251, 79, 285);
	  COL_TRI(80, 78, 252);
	  COL_TRI(252, 78, 79);
	  COL_TRI(276, 58, 54);
	  COL_TRI(278, 200, 88);
	  COL_TRI(58, 278, 54);
	  COL_TRI(278, 67, 200);
	  COL_TRI(278, 279, 67);
	  COL_TRI(54, 278, 88);
	  COL_TRI(54, 88, 90);
	  COL_TRI_INIT(SURFACE_DEATH_PLANE, 2);
	  COL_TRI(416, 417, 418);
	  COL_TRI(416, 418, 419);
	  COL_TRI_INIT(SURFACE_SHALLOW_QUICKSAND, 5);
	  COL_TRI(244, 243, 242);
	  COL_TRI(118, 114, 244);
	  COL_TRI(118, 244, 447);
	  COL_TRI(244, 382, 447);
	  COL_TRI(244, 242, 382);
	  COL_TRI_INIT(SURFACE_WALL_MISC, 85);
	  COL_TRI(270, 266, 262);
	  COL_TRI(146, 424, 346);
	  COL_TRI(146, 145, 424);
	  COL_TRI(240, 425, 426);
	  COL_TRI(240, 426, 427);
	  COL_TRI(427, 426, 428);
	  COL_TRI(427, 428, 322);
	  COL_TRI(303, 200, 88);
	  COL_TRI(270, 262, 44);
	  COL_TRI(262, 34, 35);
	  COL_TRI(262, 35, 44);
	  COL_TRI(429, 449, 450);
	  COL_TRI(429, 89, 449);
	  COL_TRI(303, 451, 200);
	  COL_TRI(89, 452, 103);
	  COL_TRI(89, 429, 452);
	  COL_TRI(430, 292, 207);
	  COL_TRI(430, 207, 359);
	  COL_TRI(343, 453, 430);
	  COL_TRI(343, 430, 359);
	  COL_TRI(184, 175, 179);
	  COL_TRI(184, 431, 175);
	  COL_TRI(391, 393, 455);
	  COL_TRI(431, 454, 209);
	  COL_TRI(431, 209, 175);
	  COL_TRI(432, 393, 402);
	  COL_TRI(432, 455, 393);
	  COL_TRI(402, 405, 456);
	  COL_TRI(402, 456, 432);
	  COL_TRI(406, 403, 459);
	  COL_TRI(391, 455, 457);
	  COL_TRI(396, 391, 457);
	  COL_TRI(396, 457, 458);
	  COL_TRI(433, 405, 409);
	  COL_TRI(433, 456, 405);
	  COL_TRI(406, 459, 460);
	  COL_TRI(434, 461, 395);
	  COL_TRI(434, 395, 398);
	  COL_TRI(435, 395, 461);
	  COL_TRI(435, 399, 395);
	  COL_TRI(399, 436, 401);
	  COL_TRI(399, 435, 436);
	  COL_TRI(436, 403, 401);
	  COL_TRI(436, 459, 403);
	  COL_TRI(437, 314, 411);
	  COL_TRI(437, 249, 314);
	  COL_TRI(437, 411, 410);
	  COL_TRI(437, 410, 462);
	  COL_TRI(119, 410, 313);
	  COL_TRI(119, 462, 410);
	  COL_TRI(438, 463, 441);
	  COL_TRI(438, 440, 463);
	  COL_TRI(247, 438, 441);
	  COL_TRI(439, 440, 438);
	  COL_TRI(386, 439, 438);
	  COL_TRI(386, 438, 247);
	  COL_TRI(440, 464, 465);
	  COL_TRI(440, 465, 463);
	  COL_TRI(439, 464, 440);
	  COL_TRI(441, 463, 465);
	  COL_TRI(441, 465, 442);
	  COL_TRI(247, 441, 384);
	  COL_TRI(384, 441, 442);
	  COL_TRI(442, 465, 464);
	  COL_TRI(442, 464, 439);
	  COL_TRI(384, 442, 383);
	  COL_TRI(383, 442, 439);
	  COL_TRI(383, 439, 386);
	  COL_TRI(443, 177, 178);
	  COL_TRI(444, 177, 443);
	  COL_TRI(444, 345, 177);
	  COL_TRI(443, 178, 445);
	  COL_TRI(445, 178, 344);
	  COL_TRI(445, 446, 444);
	  COL_TRI(445, 444, 443);
	  COL_TRI(445, 344, 446);
	  COL_TRI(446, 344, 345);
	  COL_TRI(446, 345, 444);
	  COL_TRI(447, 389, 310);
	  COL_TRI(447, 388, 389);
	  COL_TRI(387, 249, 180);
	  COL_TRI(239, 389, 325);
	  COL_TRI(239, 310, 389);
	  COL_TRI(239, 324, 241);
	  COL_TRI(448, 241, 324);
	  COL_TRI_INIT(SURFACE_HORIZONTAL_WIND, 10);
	  COL_TRI_SPECIAL(303, 103, 104, 0xE1);
	  COL_TRI_SPECIAL(303, 104, 106, 0xE1);
	  COL_TRI_SPECIAL(104, 107, 106, 0xE1);
	  COL_TRI_SPECIAL(104, 300, 107, 0xE1);
	  COL_TRI_SPECIAL(289, 164, 336, 0x0);
	  COL_TRI_SPECIAL(289, 148, 164, 0x0);
	  COL_TRI_SPECIAL(152, 232, 233, 0x80);
	  COL_TRI_SPECIAL(152, 233, 338, 0x80);
	  COL_TRI_SPECIAL(152, 151, 363, 0x80);
	  COL_TRI_SPECIAL(152, 363, 232, 0x80);
	  COL_TRI_INIT(SURFACE_ICE, 18);
	  COL_TRI(390, 146, 226);
	  COL_TRI(390, 335, 146);
	  COL_TRI(146, 346, 225);
	  COL_TRI(146, 225, 226);
	  COL_TRI(346, 350, 387);
	  COL_TRI(346, 387, 225);
	  COL_TRI(369, 225, 387);
	  COL_TRI(220, 390, 226);
	  COL_TRI(226, 366, 220);
	  COL_TRI(220, 231, 201);
	  COL_TRI(220, 229, 231);
	  COL_TRI(220, 366, 229);
	  COL_TRI(231, 387, 201);
	  COL_TRI(231, 369, 387);
	  COL_TRI(201, 387, 206);
	  COL_TRI(240, 427, 126);
	  COL_TRI(126, 466, 147);
	  COL_TRI(126, 147, 240);
	  COL_TRI_INIT(SURFACE_HARD_VERY_SLIPPERY, 35);
	  COL_TRI(402, 400, 404);
	  COL_TRI(391, 392, 393);
	  COL_TRI(392, 394, 393);
	  COL_TRI(392, 395, 394);
	  COL_TRI(392, 391, 396);
	  COL_TRI(392, 396, 397);
	  COL_TRI(395, 392, 397);
	  COL_TRI(395, 397, 398);
	  COL_TRI(395, 399, 394);
	  COL_TRI(399, 400, 394);
	  COL_TRI(399, 401, 400);
	  COL_TRI(400, 393, 394);
	  COL_TRI(400, 402, 393);
	  COL_TRI(400, 403, 404);
	  COL_TRI(400, 401, 403);
	  COL_TRI(306, 122, 308);
	  COL_TRI(402, 404, 405);
	  COL_TRI(403, 406, 404);
	  COL_TRI(407, 405, 404);
	  COL_TRI(406, 407, 404);
	  COL_TRI(407, 409, 405);
	  COL_TRI(313, 410, 411);
	  COL_TRI(313, 411, 314);
	  COL_TRI(306, 308, 115);
	  COL_TRI(267, 197, 408);
	  COL_TRI(122, 306, 121);
	  COL_TRI(122, 121, 317);
	  COL_TRI(267, 408, 364);
	  COL_TRI(408, 356, 364);
	  COL_TRI(356, 82, 213);
	  COL_TRI(197, 356, 408);
	  COL_TRI(356, 213, 364);
	  COL_TRI(82, 356, 357);
	  COL_TRI(357, 196, 264);
	  COL_TRI(357, 264, 82);
	  COL_TRI_INIT(SURFACE_HARD_NOT_SLIPPERY, 20);
	  COL_TRI(355, 194, 283);
	  COL_TRI(325, 388, 128);
	  COL_TRI(325, 128, 129);
	  COL_TRI(325, 389, 388);
	  COL_TRI(390, 220, 216);
	  COL_TRI(220, 141, 216);
	  COL_TRI(220, 327, 141);
	  COL_TRI(220, 273, 327);
	  COL_TRI(216, 335, 390);
	  COL_TRI(206, 387, 176);
	  COL_TRI(378, 283, 385);
	  COL_TRI(248, 385, 283);
	  COL_TRI(248, 283, 68);
	  COL_TRI(355, 283, 378);
	  COL_TRI(378, 245, 379);
	  COL_TRI(378, 385, 246);
	  COL_TRI(378, 246, 245);
	  COL_TRI(379, 245, 248);
	  COL_TRI(379, 248, 68);
	  COL_TRI(387, 180, 176);
	  COL_TRI_INIT(SURFACE_VERTICAL_WIND, 2);
	  COL_TRI(420, 421, 422);
	  COL_TRI(420, 423, 421);
	  COL_TRI_INIT(SURFACE_CAMERA_FREE_ROAM, 2);
	  COL_TRI(326, 328, 141);
	  COL_TRI(326, 141, 327);
	  COL_TRI_INIT(SURFACE_CAMERA_8_DIR, 4);
	  COL_TRI(288, 86, 193);
	  COL_TRI(256, 288, 193);
	  COL_TRI(256, 193, 27);
	  COL_TRI(255, 256, 27);
	  COL_TRI_INIT(SURFACE_CAMERA_ROTATE_RIGHT, 2);
	  COL_TRI(48, 38, 270);
	  COL_TRI(270, 38, 266);
	  COL_TRI_INIT(SURFACE_NO_CAM_COLLISION, 8);
	  COL_TRI(51, 331, 71);
	  COL_TRI(467, 413, 415);
	  COL_TRI(467, 415, 468);
	  COL_TRI(467, 320, 413);
	  COL_TRI(467, 123, 320);
	  COL_TRI(162, 331, 51);
	  COL_TRI(331, 277, 215);
	  COL_TRI(51, 71, 271);
	  COL_TRI_INIT(SURFACE_NO_CAM_COL_VERY_SLIPPERY, 4);
	  COL_TRI(412, 413, 320);
	  COL_TRI(413, 412, 414);
	  COL_TRI(413, 414, 415);
	  COL_TRI(412, 320, 319);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(2);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start,  /*pos*/ -7372, -2969,  7373, /*yaw*/ 106); // unused, probably an early way to set initial position
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree, /*pos*/  4813,  -511,  2254);
	  COL_WATER_BOX_INIT(3);
	  COL_WATER_BOX(0, -8191, -8191, -5119, 6246, -3071);
	  COL_WATER_BOX(1, -4607, 4506, 6963, 8192, -3071);
	  COL_WATER_BOX(2, -1023, -2555, 1024, -507, 4014);
	  COL_END();
	}

	function thi_seg7_collision_top_trap() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x4);
	  COL_VERTEX(-101, 0, -101);
	  COL_VERTEX(-101, 0, 102);
	  COL_VERTEX(102, 0, -101);
	  COL_VERTEX(102, 0, 102);
	  COL_TRI_INIT(SURFACE_DEFAULT, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(1, 3, 2);
	  COL_TRI_STOP();
	  COL_END();
	}

	function thi_seg7_area_2_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x16E);
	  COL_VERTEX(-450, -869, -4085);
	  COL_VERTEX(-450, -869, -4904);
	  COL_VERTEX(-40, -1381, -4494);
	  COL_VERTEX(369, -869, -4904);
	  COL_VERTEX(369, -869, -4085);
	  COL_VERTEX(-450, -767, -4085);
	  COL_VERTEX(-450, -767, -4904);
	  COL_VERTEX(369, -767, -4904);
	  COL_VERTEX(369, -767, -4085);
	  COL_VERTEX(188, -183, 404);
	  COL_VERTEX(154, -183, 307);
	  COL_VERTEX(154, -153, 307);
	  COL_VERTEX(292, -153, 691);
	  COL_VERTEX(92, -153, 307);
	  COL_VERTEX(246, -153, 707);
	  COL_VERTEX(246, -183, 983);
	  COL_VERTEX(-537, 630, 169);
	  COL_VERTEX(-411, 630, 77);
	  COL_VERTEX(691, 630, 169);
	  COL_VERTEX(-767, 246, 307);
	  COL_VERTEX(-411, 630, 94);
	  COL_VERTEX(922, 246, 307);
	  COL_VERTEX(566, 630, 94);
	  COL_VERTEX(566, 630, 77);
	  COL_VERTEX(691, 630, 77);
	  COL_VERTEX(691, 660, 77);
	  COL_VERTEX(-690, 329, 77);
	  COL_VERTEX(1720, -613, -398);
	  COL_VERTEX(1874, -613, -398);
	  COL_VERTEX(1690, -491, -1381);
	  COL_VERTEX(1720, -613, -153);
	  COL_VERTEX(1874, -613, 31);
	  COL_VERTEX(1690, -1996, -1381);
	  COL_VERTEX(1690, -460, -1381);
	  COL_VERTEX(1690, -460, -1996);
	  COL_VERTEX(1690, -613, -153);
	  COL_VERTEX(492, -183, 1137);
	  COL_VERTEX(768, -183, 1137);
	  COL_VERTEX(492, -153, 1137);
	  COL_VERTEX(522, -153, 1106);
	  COL_VERTEX(768, -153, 1106);
	  COL_VERTEX(276, -183, 952);
	  COL_VERTEX(292, -183, 691);
	  COL_VERTEX(276, -214, 952);
	  COL_VERTEX(-690, 660, 77);
	  COL_VERTEX(-383, 660, -536);
	  COL_VERTEX(-383, 660, 77);
	  COL_VERTEX(1690, -460, -1689);
	  COL_VERTEX(1321, -552, -1689);
	  COL_VERTEX(1321, -583, -1566);
	  COL_VERTEX(1690, -460, -1566);
	  COL_VERTEX(891, -613, -1566);
	  COL_VERTEX(1321, -552, -1566);
	  COL_VERTEX(246, -214, 983);
	  COL_VERTEX(-537, 507, -382);
	  COL_VERTEX(-690, 660, -229);
	  COL_VERTEX(-690, 507, -229);
	  COL_VERTEX(-767, 246, -75);
	  COL_VERTEX(-690, 329, -75);
	  COL_VERTEX(256, -153, 307);
	  COL_VERTEX(-767, 154, 307);
	  COL_VERTEX(-1074, 154, 307);
	  COL_VERTEX(-1303, -153, -153);
	  COL_VERTEX(-1381, -153, 307);
	  COL_VERTEX(-1381, -3, -552);
	  COL_VERTEX(-1074, 369, -153);
	  COL_VERTEX(-1381, -153, 1229);
	  COL_VERTEX(-767, -60, 614);
	  COL_VERTEX(-767, 154, 461);
	  COL_VERTEX(-844, 154, -75);
	  COL_VERTEX(-767, -153, 614);
	  COL_VERTEX(-767, -60, 399);
	  COL_VERTEX(-767, 154, -75);
	  COL_VERTEX(-448, -153, 399);
	  COL_VERTEX(-460, -153, 308);
	  COL_VERTEX(-448, -60, 399);
	  COL_VERTEX(-460, -153, 307);
	  COL_VERTEX(-767, 246, -921);
	  COL_VERTEX(-844, 369, -153);
	  COL_VERTEX(-1535, 31, -644);
	  COL_VERTEX(-1689, -91, -153);
	  COL_VERTEX(-1381, 19, -1074);
	  COL_VERTEX(-1381, 28, -736);
	  COL_VERTEX(-1381, 31, -644);
	  COL_VERTEX(-1535, -153, -153);
	  COL_VERTEX(-1228, -1996, -1381);
	  COL_VERTEX(-1538, 86, -1719);
	  COL_VERTEX(-1535, 0, -1381);
	  COL_VERTEX(-1013, -122, -1381);
	  COL_VERTEX(-1381, 0, -1381);
	  COL_VERTEX(-1074, 154, -1381);
	  COL_VERTEX(-1074, 154, -921);
	  COL_VERTEX(-1268, 102, -736);
	  COL_VERTEX(-1381, 215, -736);
	  COL_VERTEX(-1074, 246, -921);
	  COL_VERTEX(-1074, 305, -552);
	  COL_VERTEX(-767, 154, -921);
	  COL_VERTEX(-844, 507, -75);
	  COL_VERTEX(-844, 154, -153);
	  COL_VERTEX(-844, 507, -382);
	  COL_VERTEX(-687, 332, -382);
	  COL_VERTEX(-383, 660, -997);
	  COL_VERTEX(1690, -153, -1382);
	  COL_VERTEX(-306, 1229, -766);
	  COL_VERTEX(538, 660, -997);
	  COL_VERTEX(-1381, -460, 1229);
	  COL_VERTEX(-306, -153, 1536);
	  COL_VERTEX(-1535, -275, 1229);
	  COL_VERTEX(-1381, -460, 2150);
	  COL_VERTEX(1690, -828, 31);
	  COL_VERTEX(1812, -736, -398);
	  COL_VERTEX(1690, -1043, -245);
	  COL_VERTEX(1690, -613, -398);
	  COL_VERTEX(-214, 1167, -244);
	  COL_VERTEX(1905, -849, 1997);
	  COL_VERTEX(1280, -1074, 2150);
	  COL_VERTEX(1905, -849, 2150);
	  COL_VERTEX(2150, -583, 2458);
	  COL_VERTEX(2150, -849, 1997);
	  COL_VERTEX(2058, -849, 2150);
	  COL_VERTEX(-1381, -890, 2458);
	  COL_VERTEX(-1381, -921, 2458);
	  COL_VERTEX(-1381, -890, 2150);
	  COL_VERTEX(-1535, -890, 2458);
	  COL_VERTEX(-1381, -890, 1536);
	  COL_VERTEX(-1535, -890, 1536);
	  COL_VERTEX(-1535, -153, 1229);
	  COL_VERTEX(-1535, -183, -1381);
	  COL_VERTEX(-1538, -1074, -1565);
	  COL_VERTEX(-1381, 215, -552);
	  COL_VERTEX(-1228, -767, -2149);
	  COL_VERTEX(-1228, -767, -1381);
	  COL_VERTEX(-2303, -1074, 1843);
	  COL_VERTEX(-2457, -1074, 2458);
	  COL_VERTEX(-2303, -890, 1843);
	  COL_VERTEX(-2457, -890, 1843);
	  COL_VERTEX(-2149, -890, 1536);
	  COL_VERTEX(-1535, -1074, 1536);
	  COL_VERTEX(1997, -460, -1381);
	  COL_VERTEX(1997, -1996, -1381);
	  COL_VERTEX(1997, -460, -859);
	  COL_VERTEX(2304, -460, -1996);
	  COL_VERTEX(1997, -460, -767);
	  COL_VERTEX(2304, -460, -767);
	  COL_VERTEX(2304, -1996, -1381);
	  COL_VERTEX(2150, -1996, 1075);
	  COL_VERTEX(2150, -767, 1690);
	  COL_VERTEX(2150, -1996, 2458);
	  COL_VERTEX(538, 660, 77);
	  COL_VERTEX(845, 968, -536);
	  COL_VERTEX(691, 968, -872);
	  COL_VERTEX(768, -153, 922);
	  COL_VERTEX(1690, -460, 615);
	  COL_VERTEX(768, -153, 1229);
	  COL_VERTEX(1690, -767, 1459);
	  COL_VERTEX(1690, -460, 1229);
	  COL_VERTEX(768, -1074, 1843);
	  COL_VERTEX(1229, -767, 1459);
	  COL_VERTEX(768, -460, 1229);
	  COL_VERTEX(1690, -767, 1690);
	  COL_VERTEX(1690, -1074, 1690);
	  COL_VERTEX(1997, -1996, 1075);
	  COL_VERTEX(1690, -767, 1229);
	  COL_VERTEX(2150, -767, 1075);
	  COL_VERTEX(1997, -1996, 215);
	  COL_VERTEX(2120, -1996, 31);
	  COL_VERTEX(2243, -1996, 92);
	  COL_VERTEX(2120, -767, 31);
	  COL_VERTEX(1997, -767, 768);
	  COL_VERTEX(2150, -1996, 768);
	  COL_VERTEX(1997, -767, 215);
	  COL_VERTEX(2304, -767, 215);
	  COL_VERTEX(2176, -767, 676);
	  COL_VERTEX(1997, -1996, 768);
	  COL_VERTEX(-1013, -245, -1504);
	  COL_VERTEX(-275, -429, -1627);
	  COL_VERTEX(-1013, -398, -1504);
	  COL_VERTEX(-1013, -122, -1596);
	  COL_VERTEX(-1013, -183, -1689);
	  COL_VERTEX(-275, -1996, -1627);
	  COL_VERTEX(-1013, -1996, -1504);
	  COL_VERTEX(-1020, -1996, -1505);
	  COL_VERTEX(-1013, -30, -1689);
	  COL_VERTEX(-1689, -60, -1689);
	  COL_VERTEX(-1684, 240, -1710);
	  COL_VERTEX(-1689, 61, -1381);
	  COL_VERTEX(-1538, 239, -1873);
	  COL_VERTEX(-1538, -183, -1873);
	  COL_VERTEX(845, 660, 77);
	  COL_VERTEX(1690, -153, 77);
	  COL_VERTEX(-460, -460, 307);
	  COL_VERTEX(0, -460, 307);
	  COL_VERTEX(-1381, -1074, 2458);
	  COL_VERTEX(-1535, -685, 2458);
	  COL_VERTEX(-1535, -153, 2458);
	  COL_VERTEX(584, -613, -1689);
	  COL_VERTEX(891, -736, -1689);
	  COL_VERTEX(276, -736, -1566);
	  COL_VERTEX(276, -613, -1566);
	  COL_VERTEX(-275, -491, -1566);
	  COL_VERTEX(276, -491, -1381);
	  COL_VERTEX(-275, -736, -1566);
	  COL_VERTEX(-282, -767, 1997);
	  COL_VERTEX(-217, -1074, 1885);
	  COL_VERTEX(-217, -767, 1885);
	  COL_VERTEX(-217, -1074, 2109);
	  COL_VERTEX(-88, -1074, 2109);
	  COL_VERTEX(-24, -767, 1997);
	  COL_VERTEX(-88, -1074, 1885);
	  COL_VERTEX(-437, -437, 489);
	  COL_VERTEX(-773, -460, 1403);
	  COL_VERTEX(-512, -460, 489);
	  COL_VERTEX(-773, -1074, 1710);
	  COL_VERTEX(-437, -541, 489);
	  COL_VERTEX(-768, -460, 492);
	  COL_VERTEX(-1535, -275, -153);
	  COL_VERTEX(-1842, -1074, 614);
	  COL_VERTEX(-1535, -767, 614);
	  COL_VERTEX(-1996, -767, 0);
	  COL_VERTEX(-2149, -767, 307);
	  COL_VERTEX(-1996, -1074, 0);
	  COL_VERTEX(1741, -849, 2150);
	  COL_VERTEX(1997, -849, 2304);
	  COL_VERTEX(1997, -849, 2458);
	  COL_VERTEX(1812, -736, 31);
	  COL_VERTEX(1690, -828, -398);
	  COL_VERTEX(-1535, -613, -2149);
	  COL_VERTEX(-1535, -1074, -2149);
	  COL_VERTEX(-1996, -613, -1996);
	  COL_VERTEX(-1996, -613, -1535);
	  COL_VERTEX(-2149, -613, -1381);
	  COL_VERTEX(-2149, -613, -921);
	  COL_VERTEX(-1538, -405, -1565);
	  COL_VERTEX(-1538, -1996, -1566);
	  COL_VERTEX(-1381, -460, -2149);
	  COL_VERTEX(-1535, -1074, -2457);
	  COL_VERTEX(-1381, -306, -2457);
	  COL_VERTEX(230, -183, 307);
	  COL_VERTEX(294, -183, 383);
	  COL_VERTEX(92, -183, 307);
	  COL_VERTEX(246, -183, 707);
	  COL_VERTEX(-537, 630, 77);
	  COL_VERTEX(-537, 660, 169);
	  COL_VERTEX(-537, 660, 77);
	  COL_VERTEX(691, 660, 169);
	  COL_VERTEX(922, 246, 77);
	  COL_VERTEX(-767, -153, 307);
	  COL_VERTEX(1720, -491, -1381);
	  COL_VERTEX(1720, -460, -1381);
	  COL_VERTEX(1966, -613, -245);
	  COL_VERTEX(1690, -153, 615);
	  COL_VERTEX(1690, -153, -1381);
	  COL_VERTEX(1690, -613, 31);
	  COL_VERTEX(1997, -1996, -767);
	  COL_VERTEX(522, -183, 1106);
	  COL_VERTEX(768, -183, 1106);
	  COL_VERTEX(768, -153, 1137);
	  COL_VERTEX(1321, -583, -1689);
	  COL_VERTEX(1690, -491, -1689);
	  COL_VERTEX(891, -644, -1689);
	  COL_VERTEX(891, -613, -1689);
	  COL_VERTEX(891, -644, -1566);
	  COL_VERTEX(1690, -491, -1566);
	  COL_VERTEX(-537, 494, -382);
	  COL_VERTEX(-690, 507, -75);
	  COL_VERTEX(-1381, -60, 307);
	  COL_VERTEX(-1303, 215, -552);
	  COL_VERTEX(-1303, 27, -552);
	  COL_VERTEX(-1074, 154, -153);
	  COL_VERTEX(-767, -153, 399);
	  COL_VERTEX(-1689, -91, 1229);
	  COL_VERTEX(-306, -306, 1536);
	  COL_VERTEX(-460, 0, 307);
	  COL_VERTEX(-844, 332, -382);
	  COL_VERTEX(-1268, 215, -736);
	  COL_VERTEX(-1689, -60, -1381);
	  COL_VERTEX(-767, 154, -1381);
	  COL_VERTEX(-767, 246, -1381);
	  COL_VERTEX(-537, 495, -382);
	  COL_VERTEX(307, 1229, -766);
	  COL_VERTEX(-768, -541, 492);
	  COL_VERTEX(215, 1167, -674);
	  COL_VERTEX(-214, 1167, -674);
	  COL_VERTEX(215, 1167, -244);
	  COL_VERTEX(-1424, -685, 2458);
	  COL_VERTEX(-2457, -890, 2458);
	  COL_VERTEX(-2149, -1074, 1536);
	  COL_VERTEX(-1228, -1996, -2149);
	  COL_VERTEX(-1381, -1996, -2149);
	  COL_VERTEX(-1381, -767, -2149);
	  COL_VERTEX(-2457, -1074, 1843);
	  COL_VERTEX(2304, -460, -859);
	  COL_VERTEX(2304, -1996, -767);
	  COL_VERTEX(2304, -1996, -1996);
	  COL_VERTEX(1690, -1996, -1996);
	  COL_VERTEX(1920, -767, 1229);
	  COL_VERTEX(1997, -767, 1075);
	  COL_VERTEX(1997, -1074, 2458);
	  COL_VERTEX(691, 968, -536);
	  COL_VERTEX(845, 968, -872);
	  COL_VERTEX(1997, -1074, 2304);
	  COL_VERTEX(1690, -153, 307);
	  COL_VERTEX(1920, -1996, 1229);
	  COL_VERTEX(1690, -1996, 1229);
	  COL_VERTEX(2243, -767, 92);
	  COL_VERTEX(1997, -767, 676);
	  COL_VERTEX(2150, -767, 768);
	  COL_VERTEX(2304, -1996, 215);
	  COL_VERTEX(-1013, -245, -1381);
	  COL_VERTEX(-275, -429, -1381);
	  COL_VERTEX(-275, -1996, -1381);
	  COL_VERTEX(-306, 1229, -152);
	  COL_VERTEX(307, 1229, -152);
	  COL_VERTEX(-1381, -1074, 2396);
	  COL_VERTEX(584, -736, -1689);
	  COL_VERTEX(891, -613, -1381);
	  COL_VERTEX(891, -736, -1381);
	  COL_VERTEX(276, -613, -1381);
	  COL_VERTEX(276, -491, -1566);
	  COL_VERTEX(-275, -491, -1381);
	  COL_VERTEX(-88, -767, 1885);
	  COL_VERTEX(-88, -767, 2109);
	  COL_VERTEX(-217, -767, 2109);
	  COL_VERTEX(-282, -1074, 1997);
	  COL_VERTEX(-24, -1074, 1997);
	  COL_VERTEX(-1842, -767, 614);
	  COL_VERTEX(-2149, -1074, 307);
	  COL_VERTEX(-1535, -1074, 614);
	  COL_VERTEX(-1535, -767, 0);
	  COL_VERTEX(-1535, -1074, 0);
	  COL_VERTEX(1690, -1074, 1459);
	  COL_VERTEX(-1535, -613, -1381);
	  COL_VERTEX(-1535, -460, -2457);
	  COL_VERTEX(-1996, -1074, -1996);
	  COL_VERTEX(-1535, -613, -1842);
	  COL_VERTEX(-1996, -1074, -1535);
	  COL_VERTEX(-1535, -613, -921);
	  COL_VERTEX(-2149, -1074, -1381);
	  COL_VERTEX(-2149, -1074, -921);
	  COL_VERTEX(-1535, -1074, -921);
	  COL_VERTEX(-1538, -1074, -1566);
	  COL_VERTEX(-1381, -1074, -2457);
	  COL_VERTEX(-1535, -767, -1381);
	  COL_VERTEX(-1535, -767, -1842);
	  COL_VERTEX(-1074, -1074, 2304);
	  COL_VERTEX(691, -183, 860);
	  COL_VERTEX(-1535, -3788, -2457);
	  COL_VERTEX(2458, -3788, -2457);
	  COL_VERTEX(2458, -3788, -8191);
	  COL_VERTEX(-1535, -3788, -8191);
	  COL_VERTEX(-2457, -3788, -2457);
	  COL_VERTEX(2458, -3788, 2458);
	  COL_VERTEX(-2457, -3788, 2458);
	  COL_VERTEX(2335, -3788, 61);
	  COL_VERTEX(2335, -3788, -859);
	  COL_VERTEX(1690, -3788, -859);
	  COL_VERTEX(1690, -3788, 61);
	  COL_VERTEX(1997, -921, 2458);
	  COL_VERTEX(-1535, -921, -2457);
	  COL_VERTEX(-2457, -921, -2457);
	  COL_VERTEX(-2457, -1074, -2457);
	  COL_VERTEX(-2457, -921, 1843);
	  COL_VERTEX(-2457, -685, 2458);
	  COL_VERTEX(-2457, -685, 1843);
	  COL_VERTEX(-1381, -1996, -2457);
	  COL_VERTEX(-1534, -1074, 2458);
	  COL_TRI_INIT(SURFACE_DEFAULT, 516);
	  COL_TRI(0, 1, 2);
	  COL_TRI(1, 3, 2);
	  COL_TRI(3, 4, 2);
	  COL_TRI(4, 0, 2);
	  COL_TRI(4, 5, 0);
	  COL_TRI(0, 5, 6);
	  COL_TRI(0, 6, 1);
	  COL_TRI(1, 6, 7);
	  COL_TRI(1, 7, 3);
	  COL_TRI(4, 8, 5);
	  COL_TRI(3, 8, 4);
	  COL_TRI(3, 7, 8);
	  COL_TRI(13, 14, 12);
	  COL_TRI(9, 237, 238);
	  COL_TRI(9, 10, 237);
	  COL_TRI(10, 9, 239);
	  COL_TRI(11, 42, 9);
	  COL_TRI(11, 12, 42);
	  COL_TRI(12, 43, 42);
	  COL_TRI(12, 41, 43);
	  COL_TRI(13, 12, 11);
	  COL_TRI(24, 244, 18);
	  COL_TRI(16, 241, 17);
	  COL_TRI(17, 20, 16);
	  COL_TRI(16, 22, 18);
	  COL_TRI(16, 20, 22);
	  COL_TRI(16, 242, 243);
	  COL_TRI(18, 242, 16);
	  COL_TRI(16, 243, 241);
	  COL_TRI(19, 20, 26);
	  COL_TRI(20, 17, 26);
	  COL_TRI(19, 21, 22);
	  COL_TRI(21, 23, 22);
	  COL_TRI(22, 23, 18);
	  COL_TRI(23, 24, 18);
	  COL_TRI(18, 244, 242);
	  COL_TRI(21, 245, 23);
	  COL_TRI(24, 23, 245);
	  COL_TRI(25, 24, 188);
	  COL_TRI(24, 25, 244);
	  COL_TRI(26, 17, 241);
	  COL_TRI(27, 247, 248);
	  COL_TRI(27, 248, 30);
	  COL_TRI(28, 27, 30);
	  COL_TRI(33, 32, 139);
	  COL_TRI(29, 247, 27);
	  COL_TRI(30, 248, 33);
	  COL_TRI(31, 30, 35);
	  COL_TRI(30, 249, 28);
	  COL_TRI(31, 249, 30);
	  COL_TRI(30, 33, 35);
	  COL_TRI(32, 33, 155);
	  COL_TRI(33, 139, 138);
	  COL_TRI(38, 53, 36);
	  COL_TRI(35, 252, 31);
	  COL_TRI(29, 27, 112);
	  COL_TRI(36, 43, 254);
	  COL_TRI(36, 53, 43);
	  COL_TRI(37, 36, 254);
	  COL_TRI(37, 38, 36);
	  COL_TRI(37, 254, 255);
	  COL_TRI(37, 256, 38);
	  COL_TRI(39, 255, 254);
	  COL_TRI(39, 40, 255);
	  COL_TRI(38, 15, 53);
	  COL_TRI(40, 38, 256);
	  COL_TRI(40, 39, 38);
	  COL_TRI(39, 15, 38);
	  COL_TRI(14, 15, 12);
	  COL_TRI(15, 41, 12);
	  COL_TRI(39, 41, 15);
	  COL_TRI(41, 39, 254);
	  COL_TRI(41, 254, 43);
	  COL_TRI(42, 43, 240);
	  COL_TRI(43, 53, 240);
	  COL_TRI(9, 240, 239);
	  COL_TRI(9, 42, 240);
	  COL_TRI(44, 241, 243);
	  COL_TRI(45, 44, 243);
	  COL_TRI(46, 45, 243);
	  COL_TRI(47, 257, 48);
	  COL_TRI(47, 258, 257);
	  COL_TRI(48, 257, 259);
	  COL_TRI(48, 259, 260);
	  COL_TRI(49, 261, 259);
	  COL_TRI(49, 259, 257);
	  COL_TRI(48, 260, 51);
	  COL_TRI(48, 51, 52);
	  COL_TRI(50, 48, 52);
	  COL_TRI(51, 49, 52);
	  COL_TRI(52, 262, 50);
	  COL_TRI(52, 49, 262);
	  COL_TRI(49, 258, 262);
	  COL_TRI(49, 257, 258);
	  COL_TRI(51, 261, 49);
	  COL_TRI(50, 47, 48);
	  COL_TRI(53, 14, 240);
	  COL_TRI(53, 15, 14);
	  COL_TRI(14, 239, 240);
	  COL_TRI(14, 13, 239);
	  COL_TRI(45, 55, 44);
	  COL_TRI(54, 45, 263);
	  COL_TRI(45, 54, 56);
	  COL_TRI(45, 56, 55);
	  COL_TRI(55, 56, 44);
	  COL_TRI(44, 26, 241);
	  COL_TRI(56, 264, 44);
	  COL_TRI(26, 44, 264);
	  COL_TRI(57, 19, 26);
	  COL_TRI(58, 57, 26);
	  COL_TRI(60, 19, 57);
	  COL_TRI(19, 22, 20);
	  COL_TRI(19, 246, 76);
	  COL_TRI(59, 21, 19);
	  COL_TRI(19, 13, 11);
	  COL_TRI(19, 11, 59);
	  COL_TRI(19, 76, 13);
	  COL_TRI(61, 62, 265);
	  COL_TRI(62, 63, 265);
	  COL_TRI(63, 62, 84);
	  COL_TRI(62, 266, 267);
	  COL_TRI(62, 65, 266);
	  COL_TRI(64, 62, 267);
	  COL_TRI(62, 64, 84);
	  COL_TRI(65, 62, 268);
	  COL_TRI(61, 268, 62);
	  COL_TRI(63, 70, 67);
	  COL_TRI(63, 67, 265);
	  COL_TRI(57, 69, 72);
	  COL_TRI(67, 61, 265);
	  COL_TRI(68, 60, 61);
	  COL_TRI(67, 68, 61);
	  COL_TRI(69, 61, 60);
	  COL_TRI(69, 268, 61);
	  COL_TRI(70, 71, 67);
	  COL_TRI(71, 68, 67);
	  COL_TRI(71, 60, 68);
	  COL_TRI(60, 71, 75);
	  COL_TRI(60, 75, 272);
	  COL_TRI(60, 57, 72);
	  COL_TRI(72, 69, 60);
	  COL_TRI(76, 190, 191);
	  COL_TRI(70, 269, 71);
	  COL_TRI(73, 71, 269);
	  COL_TRI(73, 75, 71);
	  COL_TRI(74, 272, 75);
	  COL_TRI(75, 73, 76);
	  COL_TRI(76, 209, 190);
	  COL_TRI(76, 73, 209);
	  COL_TRI(13, 76, 239);
	  COL_TRI(65, 95, 266);
	  COL_TRI(77, 94, 65);
	  COL_TRI(78, 65, 268);
	  COL_TRI(77, 65, 273);
	  COL_TRI(65, 78, 273);
	  COL_TRI(64, 267, 129);
	  COL_TRI(64, 83, 79);
	  COL_TRI(64, 79, 84);
	  COL_TRI(87, 177, 86);
	  COL_TRI(79, 87, 185);
	  COL_TRI(80, 84, 79);
	  COL_TRI(80, 79, 185);
	  COL_TRI(81, 87, 79);
	  COL_TRI(82, 81, 79);
	  COL_TRI(83, 82, 79);
	  COL_TRI(84, 270, 126);
	  COL_TRI(84, 80, 270);
	  COL_TRI(63, 84, 126);
	  COL_TRI(81, 89, 87);
	  COL_TRI(85, 87, 89);
	  COL_TRI(86, 185, 87);
	  COL_TRI(91, 90, 81);
	  COL_TRI(89, 90, 85);
	  COL_TRI(90, 89, 81);
	  COL_TRI(81, 82, 92);
	  COL_TRI(91, 81, 92);
	  COL_TRI(92, 274, 94);
	  COL_TRI(93, 92, 82);
	  COL_TRI(93, 274, 92);
	  COL_TRI(94, 91, 92);
	  COL_TRI(96, 90, 91);
	  COL_TRI(95, 94, 274);
	  COL_TRI(94, 96, 91);
	  COL_TRI(94, 77, 96);
	  COL_TRI(95, 274, 266);
	  COL_TRI(90, 276, 85);
	  COL_TRI(96, 276, 90);
	  COL_TRI(99, 78, 97);
	  COL_TRI(97, 69, 57);
	  COL_TRI(98, 268, 69);
	  COL_TRI(78, 69, 97);
	  COL_TRI(78, 268, 98);
	  COL_TRI(69, 78, 98);
	  COL_TRI(77, 273, 100);
	  COL_TRI(99, 273, 78);
	  COL_TRI(77, 276, 96);
	  COL_TRI(54, 99, 56);
	  COL_TRI(77, 277, 276);
	  COL_TRI(56, 99, 97);
	  COL_TRI(56, 97, 264);
	  COL_TRI(97, 57, 58);
	  COL_TRI(97, 58, 264);
	  COL_TRI(100, 99, 263);
	  COL_TRI(100, 273, 99);
	  COL_TRI(99, 54, 263);
	  COL_TRI(103, 104, 101);
	  COL_TRI(77, 100, 278);
	  COL_TRI(101, 277, 77);
	  COL_TRI(101, 77, 278);
	  COL_TRI(101, 278, 45);
	  COL_TRI(26, 264, 58);
	  COL_TRI(102, 277, 101);
	  COL_TRI(103, 101, 45);
	  COL_TRI(104, 102, 101);
	  COL_TRI(66, 63, 126);
	  COL_TRI(66, 271, 106);
	  COL_TRI(66, 210, 271);
	  COL_TRI(66, 105, 210);
	  COL_TRI(105, 66, 126);
	  COL_TRI(66, 70, 63);
	  COL_TRI(106, 70, 66);
	  COL_TRI(70, 73, 269);
	  COL_TRI(106, 73, 70);
	  COL_TRI(73, 106, 271);
	  COL_TRI(107, 126, 270);
	  COL_TRI(108, 105, 126);
	  COL_TRI(109, 31, 252);
	  COL_TRI(109, 224, 31);
	  COL_TRI(31, 224, 249);
	  COL_TRI(110, 28, 249);
	  COL_TRI(111, 110, 249);
	  COL_TRI(112, 28, 110);
	  COL_TRI(113, 281, 282);
	  COL_TRI(113, 283, 281);
	  COL_TRI(116, 221, 222);
	  COL_TRI(114, 116, 118);
	  COL_TRI(114, 146, 159);
	  COL_TRI(115, 221, 116);
	  COL_TRI(116, 119, 118);
	  COL_TRI(117, 119, 222);
	  COL_TRI(118, 119, 117);
	  COL_TRI(119, 116, 222);
	  COL_TRI(126, 125, 123);
	  COL_TRI(108, 126, 194);
	  COL_TRI(120, 108, 284);
	  COL_TRI(108, 194, 284);
	  COL_TRI(105, 108, 122);
	  COL_TRI(108, 120, 122);
	  COL_TRI(121, 120, 123);
	  COL_TRI(122, 120, 121);
	  COL_TRI(123, 120, 284);
	  COL_TRI(124, 105, 122);
	  COL_TRI(125, 126, 215);
	  COL_TRI(129, 93, 83);
	  COL_TRI(126, 123, 193);
	  COL_TRI(126, 193, 194);
	  COL_TRI(127, 128, 125);
	  COL_TRI(125, 215, 127);
	  COL_TRI(128, 137, 125);
	  COL_TRI(93, 82, 83);
	  COL_TRI(131, 85, 287);
	  COL_TRI(64, 129, 83);
	  COL_TRI(129, 274, 93);
	  COL_TRI(129, 266, 274);
	  COL_TRI(130, 287, 288);
	  COL_TRI(130, 288, 289);
	  COL_TRI(131, 287, 130);
	  COL_TRI(132, 135, 134);
	  COL_TRI(132, 290, 135);
	  COL_TRI(133, 135, 290);
	  COL_TRI(133, 285, 135);
	  COL_TRI(134, 135, 123);
	  COL_TRI(135, 285, 123);
	  COL_TRI(123, 285, 133);
	  COL_TRI(136, 132, 134);
	  COL_TRI(136, 134, 123);
	  COL_TRI(137, 136, 125);
	  COL_TRI(137, 286, 136);
	  COL_TRI(136, 286, 132);
	  COL_TRI(144, 141, 291);
	  COL_TRI(125, 136, 123);
	  COL_TRI(138, 139, 140);
	  COL_TRI(139, 142, 140);
	  COL_TRI(140, 142, 143);
	  COL_TRI(141, 138, 140);
	  COL_TRI(141, 140, 291);
	  COL_TRI(140, 143, 291);
	  COL_TRI(139, 253, 142);
	  COL_TRI(142, 253, 292);
	  COL_TRI(142, 292, 143);
	  COL_TRI(143, 144, 291);
	  COL_TRI(143, 292, 144);
	  COL_TRI(144, 293, 141);
	  COL_TRI(141, 294, 34);
	  COL_TRI(141, 293, 294);
	  COL_TRI(33, 141, 34);
	  COL_TRI(33, 138, 141);
	  COL_TRI(145, 163, 146);
	  COL_TRI(146, 118, 145);
	  COL_TRI(146, 154, 159);
	  COL_TRI(146, 114, 118);
	  COL_TRI(102, 299, 149);
	  COL_TRI(118, 147, 145);
	  COL_TRI(118, 117, 147);
	  COL_TRI(147, 117, 297);
	  COL_TRI(117, 223, 297);
	  COL_TRI(117, 222, 223);
	  COL_TRI(25, 188, 149);
	  COL_TRI(148, 149, 298);
	  COL_TRI(148, 25, 149);
	  COL_TRI(153, 301, 151);
	  COL_TRI(149, 299, 150);
	  COL_TRI(150, 104, 279);
	  COL_TRI(104, 150, 299);
	  COL_TRI(149, 150, 298);
	  COL_TRI(151, 158, 153);
	  COL_TRI(152, 153, 158);
	  COL_TRI(152, 250, 153);
	  COL_TRI(153, 250, 301);
	  COL_TRI(33, 250, 152);
	  COL_TRI(33, 251, 250);
	  COL_TRI(154, 155, 158);
	  COL_TRI(154, 158, 157);
	  COL_TRI(156, 158, 191);
	  COL_TRI(157, 158, 156);
	  COL_TRI(158, 155, 152);
	  COL_TRI(155, 162, 32);
	  COL_TRI(155, 154, 162);
	  COL_TRI(34, 32, 33);
	  COL_TRI(34, 294, 32);
	  COL_TRI(159, 154, 160);
	  COL_TRI(114, 159, 160);
	  COL_TRI(154, 295, 162);
	  COL_TRI(160, 154, 157);
	  COL_TRI(154, 146, 295);
	  COL_TRI(146, 163, 295);
	  COL_TRI(161, 295, 296);
	  COL_TRI(161, 302, 295);
	  COL_TRI(162, 295, 302);
	  COL_TRI(163, 296, 295);
	  COL_TRI(162, 302, 303);
	  COL_TRI(162, 303, 32);
	  COL_TRI(161, 296, 163);
	  COL_TRI(161, 163, 145);
	  COL_TRI(164, 170, 167);
	  COL_TRI(165, 164, 167);
	  COL_TRI(166, 165, 167);
	  COL_TRI(166, 167, 304);
	  COL_TRI(167, 170, 305);
	  COL_TRI(167, 305, 172);
	  COL_TRI(168, 172, 305);
	  COL_TRI(169, 172, 306);
	  COL_TRI(167, 172, 171);
	  COL_TRI(168, 306, 172);
	  COL_TRI(170, 173, 305);
	  COL_TRI(170, 164, 173);
	  COL_TRI(171, 307, 166);
	  COL_TRI(171, 166, 304);
	  COL_TRI(172, 307, 171);
	  COL_TRI(167, 171, 304);
	  COL_TRI(168, 173, 169);
	  COL_TRI(168, 169, 306);
	  COL_TRI(173, 168, 305);
	  COL_TRI(172, 169, 307);
	  COL_TRI(181, 175, 179);
	  COL_TRI(174, 308, 309);
	  COL_TRI(174, 309, 175);
	  COL_TRI(175, 176, 174);
	  COL_TRI(176, 178, 174);
	  COL_TRI(174, 88, 308);
	  COL_TRI(177, 88, 174);
	  COL_TRI(178, 177, 174);
	  COL_TRI(179, 175, 309);
	  COL_TRI(179, 309, 310);
	  COL_TRI(180, 176, 175);
	  COL_TRI(185, 275, 215);
	  COL_TRI(88, 177, 87);
	  COL_TRI(86, 184, 185);
	  COL_TRI(177, 182, 86);
	  COL_TRI(182, 186, 86);
	  COL_TRI(86, 186, 184);
	  COL_TRI(183, 275, 185);
	  COL_TRI(184, 183, 185);
	  COL_TRI(185, 215, 80);
	  COL_TRI(182, 178, 187);
	  COL_TRI(182, 187, 186);
	  COL_TRI(186, 187, 184);
	  COL_TRI(178, 182, 177);
	  COL_TRI(187, 183, 184);
	  COL_TRI(80, 215, 107);
	  COL_TRI(80, 107, 270);
	  COL_TRI(46, 103, 45);
	  COL_TRI(46, 311, 103);
	  COL_TRI(148, 312, 311);
	  COL_TRI(148, 311, 46);
	  COL_TRI(103, 279, 104);
	  COL_TRI(188, 24, 245);
	  COL_TRI(189, 188, 245);
	  COL_TRI(149, 188, 189);
	  COL_TRI(190, 213, 191);
	  COL_TRI(156, 191, 213);
	  COL_TRI(191, 237, 10);
	  COL_TRI(191, 10, 239);
	  COL_TRI(76, 191, 239);
	  COL_TRI(133, 192, 123);
	  COL_TRI(192, 121, 123);
	  COL_TRI(193, 123, 284);
	  COL_TRI(192, 122, 121);
	  COL_TRI(192, 313, 122);
	  COL_TRI(194, 193, 284);
	  COL_TRI(195, 260, 196);
	  COL_TRI(195, 196, 314);
	  COL_TRI(196, 315, 316);
	  COL_TRI(196, 260, 315);
	  COL_TRI(195, 315, 260);
	  COL_TRI(200, 199, 319);
	  COL_TRI(195, 317, 315);
	  COL_TRI(197, 195, 314);
	  COL_TRI(197, 198, 195);
	  COL_TRI(195, 198, 317);
	  COL_TRI(198, 200, 317);
	  COL_TRI(198, 318, 200);
	  COL_TRI(199, 318, 198);
	  COL_TRI(200, 318, 199);
	  COL_TRI(205, 202, 323);
	  COL_TRI(201, 199, 198);
	  COL_TRI(201, 198, 197);
	  COL_TRI(202, 204, 203);
	  COL_TRI(203, 204, 320);
	  COL_TRI(204, 207, 320);
	  COL_TRI(204, 321, 207);
	  COL_TRI(204, 322, 321);
	  COL_TRI(204, 202, 322);
	  COL_TRI(202, 203, 323);
	  COL_TRI(205, 322, 202);
	  COL_TRI(209, 211, 213);
	  COL_TRI(206, 322, 205);
	  COL_TRI(206, 321, 322);
	  COL_TRI(207, 321, 206);
	  COL_TRI(208, 207, 324);
	  COL_TRI(207, 206, 324);
	  COL_TRI(208, 320, 207);
	  COL_TRI(203, 320, 208);
	  COL_TRI(73, 271, 209);
	  COL_TRI(210, 211, 209);
	  COL_TRI(190, 209, 213);
	  COL_TRI(211, 280, 213);
	  COL_TRI(212, 213, 280);
	  COL_TRI(213, 212, 156);
	  COL_TRI(210, 209, 271);
	  COL_TRI(210, 280, 214);
	  COL_TRI(210, 212, 280);
	  COL_TRI(160, 157, 156);
	  COL_TRI(210, 214, 211);
	  COL_TRI(212, 210, 124);
	  COL_TRI(214, 280, 211);
	  COL_TRI(215, 275, 127);
	  COL_TRI(216, 325, 219);
	  COL_TRI(216, 219, 326);
	  COL_TRI(217, 216, 327);
	  COL_TRI(217, 325, 216);
	  COL_TRI(218, 219, 325);
	  COL_TRI(218, 325, 217);
	  COL_TRI(219, 218, 220);
	  COL_TRI(219, 220, 326);
	  COL_TRI(220, 218, 328);
	  COL_TRI(218, 217, 328);
	  COL_TRI(220, 328, 329);
	  COL_TRI(154, 330, 160);
	  COL_TRI(223, 300, 297);
	  COL_TRI(149, 189, 102);
	  COL_TRI(102, 104, 299);
	  COL_TRI(148, 298, 312);
	  COL_TRI(221, 115, 300);
	  COL_TRI(222, 221, 300);
	  COL_TRI(223, 222, 300);
	  COL_TRI(226, 228, 229);
	  COL_TRI(210, 105, 124);
	  COL_TRI(224, 111, 249);
	  COL_TRI(111, 224, 109);
	  COL_TRI(112, 110, 225);
	  COL_TRI(225, 110, 111);
	  COL_TRI(226, 229, 331);
	  COL_TRI(187, 232, 183);
	  COL_TRI(226, 333, 228);
	  COL_TRI(228, 335, 229);
	  COL_TRI(228, 333, 335);
	  COL_TRI(229, 336, 331);
	  COL_TRI(229, 231, 336);
	  COL_TRI(229, 230, 231);
	  COL_TRI(229, 335, 337);
	  COL_TRI(229, 337, 230);
	  COL_TRI(230, 338, 231);
	  COL_TRI(230, 337, 338);
	  COL_TRI(231, 339, 336);
	  COL_TRI(231, 338, 339);
	  COL_TRI(226, 334, 234);
	  COL_TRI(232, 275, 183);
	  COL_TRI(232, 127, 275);
	  COL_TRI(127, 232, 128);
	  COL_TRI(128, 232, 176);
	  COL_TRI(176, 232, 178);
	  COL_TRI(232, 187, 178);
	  COL_TRI(176, 180, 233);
	  COL_TRI(233, 340, 176);
	  COL_TRI(236, 341, 235);
	  COL_TRI(227, 226, 332);
	  COL_TRI(226, 227, 333);
	  COL_TRI(234, 236, 332);
	  COL_TRI(226, 234, 332);
	  COL_TRI(227, 332, 235);
	  COL_TRI(235, 332, 236);
	  COL_TRI(85, 276, 33);
	  COL_TRI(276, 102, 33);
	  COL_TRI(276, 277, 102);
	  COL_TRI(85, 33, 32);
	  COL_TRI_INIT(SURFACE_DEATH_PLANE, 4);
	  COL_TRI(346, 347, 348);
	  COL_TRI(346, 348, 349);
	  COL_TRI(350, 351, 347);
	  COL_TRI(350, 352, 351);
	  COL_TRI_INIT(SURFACE_WALL_MISC, 16);
	  COL_TRI(192, 121, 357);
	  COL_TRI(192, 357, 297);
	  COL_TRI(235, 358, 359);
	  COL_TRI(235, 359, 360);
	  COL_TRI(360, 359, 361);
	  COL_TRI(360, 361, 290);
	  COL_TRI(135, 362, 285);
	  COL_TRI(135, 363, 362);
	  COL_TRI(362, 123, 285);
	  COL_TRI(362, 193, 123);
	  COL_TRI(331, 342, 343);
	  COL_TRI(331, 343, 334);
	  COL_TRI(234, 343, 289);
	  COL_TRI(234, 334, 343);
	  COL_TRI(234, 288, 236);
	  COL_TRI(364, 236, 288);
	  COL_TRI_INIT(SURFACE_ICE, 18);
	  COL_TRI(344, 313, 192);
	  COL_TRI(192, 297, 206);
	  COL_TRI(192, 206, 205);
	  COL_TRI(344, 192, 205);
	  COL_TRI(297, 300, 115);
	  COL_TRI(297, 115, 206);
	  COL_TRI(324, 206, 115);
	  COL_TRI(205, 323, 212);
	  COL_TRI(212, 344, 205);
	  COL_TRI(212, 323, 203);
	  COL_TRI(212, 208, 156);
	  COL_TRI(212, 203, 208);
	  COL_TRI(208, 115, 156);
	  COL_TRI(208, 324, 115);
	  COL_TRI(156, 115, 160);
	  COL_TRI(235, 360, 133);
	  COL_TRI(133, 365, 128);
	  COL_TRI(133, 128, 235);
	  COL_TRI_INIT(SURFACE_HARD_VERY_SLIPPERY, 12);
	  COL_TRI(191, 158, 345);
	  COL_TRI(9, 238, 59);
	  COL_TRI(11, 9, 59);
	  COL_TRI(151, 21, 59);
	  COL_TRI(345, 151, 238);
	  COL_TRI(191, 345, 238);
	  COL_TRI(158, 151, 345);
	  COL_TRI(151, 59, 238);
	  COL_TRI(21, 151, 301);
	  COL_TRI(301, 245, 21);
	  COL_TRI(191, 238, 237);
	  COL_TRI(301, 189, 245);
	  COL_TRI_INIT(SURFACE_HARD_NOT_SLIPPERY, 20);
	  COL_TRI(212, 124, 122);
	  COL_TRI(6, 8, 7);
	  COL_TRI(6, 5, 8);
	  COL_TRI(289, 131, 130);
	  COL_TRI(289, 342, 131);
	  COL_TRI(289, 343, 342);
	  COL_TRI(344, 212, 122);
	  COL_TRI(311, 282, 103);
	  COL_TRI(122, 313, 344);
	  COL_TRI(298, 279, 312);
	  COL_TRI(298, 150, 279);
	  COL_TRI(282, 281, 279);
	  COL_TRI(312, 279, 281);
	  COL_TRI(282, 279, 103);
	  COL_TRI(312, 283, 113);
	  COL_TRI(312, 113, 311);
	  COL_TRI(312, 281, 283);
	  COL_TRI(311, 113, 282);
	  COL_TRI(160, 115, 114);
	  COL_TRI(115, 116, 114);
	  COL_TRI_INIT(SURFACE_VERTICAL_WIND, 2);
	  COL_TRI(353, 354, 355);
	  COL_TRI(353, 355, 356);
	  COL_TRI_INIT(SURFACE_CAMERA_8_DIR, 4);
	  COL_TRI(243, 242, 46);
	  COL_TRI(242, 148, 46);
	  COL_TRI(242, 244, 148);
	  COL_TRI(244, 25, 148);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(3);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start,   /*pos*/ -2211,  -890,  2212, /*yaw*/ 106); // unused, probably an early way to set initial position
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03, /*pos*/   -40,  -767, -4494, /*yaw*/   0);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,  /*pos*/  1444,  -153,   676);
	  COL_WATER_BOX_INIT(3);
	  COL_WATER_BOX(0, -2457, -2457, -1535, 1874, -921);
	  COL_WATER_BOX(1, -1381, 1352, 2089, 2458, -921);
	  COL_WATER_BOX(2, -306, -766, 307, -152, 1204);
	  COL_END();
	}

	function thi_seg7_area_3_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0xA0);
	  COL_VERTEX(-716, 1843, -716);
	  COL_VERTEX(-101, 1843, 0);
	  COL_VERTEX(0, 1843, -101);
	  COL_VERTEX(-716, 1843, 717);
	  COL_VERTEX(-2047, 2150, -2047);
	  COL_VERTEX(717, 1843, -716);
	  COL_VERTEX(0, 1843, 102);
	  COL_VERTEX(102, 1843, 0);
	  COL_VERTEX(717, 1843, 717);
	  COL_VERTEX(2048, 2150, -2047);
	  COL_VERTEX(2048, 2150, 2048);
	  COL_VERTEX(-2047, 2150, 2048);
	  COL_VERTEX(102, 3072, 102);
	  COL_VERTEX(102, 3277, 102);
	  COL_VERTEX(102, 3277, -101);
	  COL_VERTEX(102, 3482, -101);
	  COL_VERTEX(-101, 3277, 102);
	  COL_VERTEX(102, 3482, 102);
	  COL_VERTEX(-101, 3072, 102);
	  COL_VERTEX(-101, 3482, 102);
	  COL_VERTEX(102, 3072, -101);
	  COL_VERTEX(-101, 3482, -101);
	  COL_VERTEX(-101, 3277, -101);
	  COL_VERTEX(-101, 3072, -101);
	  COL_VERTEX(614, 1024, 2253);
	  COL_VERTEX(614, 1024, 2458);
	  COL_VERTEX(410, 1024, 2253);
	  COL_VERTEX(410, 1229, 2253);
	  COL_VERTEX(614, 1229, 2253);
	  COL_VERTEX(614, 1229, 2048);
	  COL_VERTEX(1229, -3071, 1024);
	  COL_VERTEX(819, -3071, 1434);
	  COL_VERTEX(614, -3071, 1434);
	  COL_VERTEX(410, -3071, 2048);
	  COL_VERTEX(410, -3071, 1024);
	  COL_VERTEX(1024, -3071, 819);
	  COL_VERTEX(1229, -3071, 614);
	  COL_VERTEX(1843, -3071, 410);
	  COL_VERTEX(1434, -3071, 0);
	  COL_VERTEX(1843, -3071, 0);
	  COL_VERTEX(1434, -3071, -818);
	  COL_VERTEX(1024, -3071, -1228);
	  COL_VERTEX(1434, -3071, -409);
	  COL_VERTEX(1024, -3071, -409);
	  COL_VERTEX(614, -3071, -818);
	  COL_VERTEX(614, -3071, -1023);
	  COL_VERTEX(-818, -3071, -1433);
	  COL_VERTEX(-409, 1024, -1023);
	  COL_VERTEX(-409, -3071, -1023);
	  COL_VERTEX(205, -3071, -1637);
	  COL_VERTEX(205, -3071, -1228);
	  COL_VERTEX(-1433, -3071, -2047);
	  COL_VERTEX(-1023, -3071, -1023);
	  COL_VERTEX(-204, -3071, -204);
	  COL_VERTEX(-818, -3071, -204);
	  COL_VERTEX(-818, -3071, -818);
	  COL_VERTEX(-818, 768, -818);
	  COL_VERTEX(-204, -3071, -613);
	  COL_VERTEX(-2047, -3071, 0);
	  COL_VERTEX(-1023, -3071, 0);
	  COL_VERTEX(-1023, -3071, 614);
	  COL_VERTEX(-204, 1434, 614);
	  COL_VERTEX(-204, -3071, 614);
	  COL_VERTEX(-818, 1434, 1024);
	  COL_VERTEX(-2047, -3071, 1024);
	  COL_VERTEX(0, 1434, 1024);
	  COL_VERTEX(0, -3071, 1024);
	  COL_VERTEX(614, 1229, 2458);
	  COL_VERTEX(410, 1024, 2458);
	  COL_VERTEX(410, 1229, 2458);
	  COL_VERTEX(410, 1229, 2048);
	  COL_VERTEX(819, 1024, 1434);
	  COL_VERTEX(614, 1024, 1434);
	  COL_VERTEX(1229, 1024, 1024);
	  COL_VERTEX(614, 1024, 2048);
	  COL_VERTEX(614, -3071, 2048);
	  COL_VERTEX(410, 1024, 2048);
	  COL_VERTEX(410, 1024, 1024);
	  COL_VERTEX(1024, 1024, 819);
	  COL_VERTEX(1229, 1024, 614);
	  COL_VERTEX(1434, 1024, 0);
	  COL_VERTEX(1843, 1024, 410);
	  COL_VERTEX(1843, 1024, 0);
	  COL_VERTEX(1434, 1024, -818);
	  COL_VERTEX(1434, 1024, -409);
	  COL_VERTEX(1024, 1024, -1228);
	  COL_VERTEX(1024, 1024, -409);
	  COL_VERTEX(614, 1024, -818);
	  COL_VERTEX(614, 1024, -1023);
	  COL_VERTEX(205, 1024, -1637);
	  COL_VERTEX(-818, 1024, -1433);
	  COL_VERTEX(205, 1024, -1228);
	  COL_VERTEX(-1433, 512, -2047);
	  COL_VERTEX(-1023, 512, -1023);
	  COL_VERTEX(-2047, 512, -818);
	  COL_VERTEX(-2047, -3071, -818);
	  COL_VERTEX(-818, 768, -204);
	  COL_VERTEX(-204, 768, -204);
	  COL_VERTEX(-204, 768, -613);
	  COL_VERTEX(-2047, 1024, 0);
	  COL_VERTEX(-1023, 1024, 0);
	  COL_VERTEX(-1023, 1024, 614);
	  COL_VERTEX(-2047, 1024, 614);
	  COL_VERTEX(-2047, -3071, 614);
	  COL_VERTEX(-818, -3071, 1024);
	  COL_VERTEX(-2047, 1434, 1024);
	  COL_VERTEX(-1023, 1434, 2048);
	  COL_VERTEX(-1023, -3071, 2048);
	  COL_VERTEX(0, 1741, 0);
	  COL_VERTEX(-71, 1812, 0);
	  COL_VERTEX(0, 1812, -71);
	  COL_VERTEX(0, 1812, 72);
	  COL_VERTEX(72, 1812, 0);
	  COL_VERTEX(-2047, 1536, -818);
	  COL_VERTEX(-1637, 512, -1228);
	  COL_VERTEX(-1637, 1536, -1228);
	  COL_VERTEX(-2047, 1536, -1228);
	  COL_VERTEX(-2047, 1434, 2048);
	  COL_VERTEX(-306, 2458, -306);
	  COL_VERTEX(-306, 2458, 307);
	  COL_VERTEX(-306, 2560, -306);
	  COL_VERTEX(307, 2458, -306);
	  COL_VERTEX(307, 2458, 307);
	  COL_VERTEX(-2047, 1331, -1740);
	  COL_VERTEX(-1740, 1331, -1740);
	  COL_VERTEX(512, 3072, -511);
	  COL_VERTEX(307, 2560, -306);
	  COL_VERTEX(-306, 2560, 307);
	  COL_VERTEX(307, 2560, 307);
	  COL_VERTEX(0, 2253, 0);
	  COL_VERTEX(-1842, 1331, -2047);
	  COL_VERTEX(-1842, 512, -2047);
	  COL_VERTEX(-1740, 512, -1740);
	  COL_VERTEX(-2047, 1331, -2047);
	  COL_VERTEX(512, 3072, 512);
	  COL_VERTEX(-511, 3072, 512);
	  COL_VERTEX(-511, 3072, -511);
	  COL_VERTEX(2048, -3071, 2048);
	  COL_VERTEX(2048, -3071, -2047);
	  COL_VERTEX(-2047, -3071, -2047);
	  COL_VERTEX(-2047, -3071, 2048);
	  COL_VERTEX(-2047, 512, -2047);
	  COL_VERTEX(-2047, 512, -1228);
	  COL_VERTEX(-2047, 512, -1740);
	  COL_VERTEX(717, 1812, -716);
	  COL_VERTEX(-716, 1812, -716);
	  COL_VERTEX(-716, 1812, 717);
	  COL_VERTEX(2048, 2120, -2047);
	  COL_VERTEX(-2047, 2120, -2047);
	  COL_VERTEX(-2047, 2120, 2048);
	  COL_VERTEX(717, 1812, 717);
	  COL_VERTEX(2048, 2120, 2048);
	  COL_VERTEX(2048, 2355, 2048);
	  COL_VERTEX(-2047, 2355, 2048);
	  COL_VERTEX(1024, 2867, 1024);
	  COL_VERTEX(2048, 2355, -2047);
	  COL_VERTEX(1024, 2867, -1023);
	  COL_VERTEX(-1023, 2867, 1024);
	  COL_VERTEX(-1023, 2867, -1023);
	  COL_VERTEX(-2047, 2355, -2047);
	  COL_TRI_INIT(SURFACE_DEFAULT, 116);
	  COL_TRI(12, 13, 14);
	  COL_TRI(0, 1, 2);
	  COL_TRI(3, 1, 0);
	  COL_TRI(4, 0, 5);
	  COL_TRI(4, 3, 0);
	  COL_TRI(5, 0, 2);
	  COL_TRI(3, 6, 1);
	  COL_TRI(2, 7, 5);
	  COL_TRI(8, 7, 6);
	  COL_TRI(8, 5, 7);
	  COL_TRI(4, 5, 9);
	  COL_TRI(5, 10, 9);
	  COL_TRI(5, 8, 10);
	  COL_TRI(3, 8, 6);
	  COL_TRI(10, 8, 3);
	  COL_TRI(4, 11, 3);
	  COL_TRI(10, 3, 11);
	  COL_TRI(13, 15, 14);
	  COL_TRI(16, 17, 13);
	  COL_TRI(18, 16, 13);
	  COL_TRI(18, 13, 12);
	  COL_TRI(16, 19, 17);
	  COL_TRI(19, 15, 17);
	  COL_TRI(13, 17, 15);
	  COL_TRI(19, 21, 15);
	  COL_TRI(14, 15, 21);
	  COL_TRI(12, 14, 20);
	  COL_TRI(14, 21, 22);
	  COL_TRI(20, 14, 22);
	  COL_TRI(20, 22, 23);
	  COL_TRI(22, 21, 19);
	  COL_TRI(23, 22, 16);
	  COL_TRI(22, 19, 16);
	  COL_TRI(23, 16, 18);
	  COL_TRI(24, 25, 67);
	  COL_TRI(25, 68, 69);
	  COL_TRI(25, 69, 67);
	  COL_TRI(26, 68, 25);
	  COL_TRI(27, 68, 26);
	  COL_TRI(27, 69, 68);
	  COL_TRI(28, 67, 69);
	  COL_TRI(28, 69, 27);
	  COL_TRI(24, 67, 28);
	  COL_TRI(29, 28, 27);
	  COL_TRI(29, 27, 70);
	  COL_TRI(26, 25, 24);
	  COL_TRI(30, 71, 31);
	  COL_TRI(31, 72, 32);
	  COL_TRI(31, 71, 72);
	  COL_TRI(35, 73, 30);
	  COL_TRI(30, 73, 71);
	  COL_TRI(32, 72, 74);
	  COL_TRI(32, 74, 75);
	  COL_TRI(33, 76, 77);
	  COL_TRI(33, 77, 34);
	  COL_TRI(34, 77, 78);
	  COL_TRI(34, 78, 35);
	  COL_TRI(35, 78, 73);
	  COL_TRI(41, 83, 40);
	  COL_TRI(36, 79, 80);
	  COL_TRI(36, 80, 38);
	  COL_TRI(37, 79, 36);
	  COL_TRI(37, 81, 79);
	  COL_TRI(38, 80, 82);
	  COL_TRI(38, 82, 39);
	  COL_TRI(39, 82, 81);
	  COL_TRI(39, 81, 37);
	  COL_TRI(40, 83, 84);
	  COL_TRI(40, 84, 42);
	  COL_TRI(41, 85, 83);
	  COL_TRI(42, 84, 86);
	  COL_TRI(42, 86, 43);
	  COL_TRI(43, 86, 87);
	  COL_TRI(43, 87, 44);
	  COL_TRI(44, 87, 88);
	  COL_TRI(44, 88, 45);
	  COL_TRI(45, 88, 85);
	  COL_TRI(45, 85, 41);
	  COL_TRI(46, 89, 49);
	  COL_TRI(47, 90, 46);
	  COL_TRI(46, 90, 89);
	  COL_TRI(49, 89, 91);
	  COL_TRI(49, 91, 50);
	  COL_TRI(50, 91, 47);
	  COL_TRI(50, 47, 48);
	  COL_TRI(48, 47, 46);
	  COL_TRI(51, 92, 93);
	  COL_TRI(51, 93, 52);
	  COL_TRI(52, 93, 94);
	  COL_TRI(58, 100, 59);
	  COL_TRI(52, 94, 95);
	  COL_TRI(53, 96, 54);
	  COL_TRI(54, 96, 56);
	  COL_TRI(54, 56, 55);
	  COL_TRI(53, 97, 96);
	  COL_TRI(55, 56, 57);
	  COL_TRI(56, 98, 57);
	  COL_TRI(57, 98, 97);
	  COL_TRI(57, 97, 53);
	  COL_TRI(58, 99, 100);
	  COL_TRI(64, 63, 104);
	  COL_TRI(59, 100, 101);
	  COL_TRI(59, 101, 60);
	  COL_TRI(60, 101, 102);
	  COL_TRI(60, 102, 103);
	  COL_TRI(61, 65, 66);
	  COL_TRI(62, 61, 66);
	  COL_TRI(63, 61, 104);
	  COL_TRI(61, 62, 104);
	  COL_TRI(66, 65, 107);
	  COL_TRI(64, 105, 63);
	  COL_TRI(65, 106, 107);
	  COL_TRI(108, 109, 110);
	  COL_TRI(108, 111, 109);
	  COL_TRI(108, 112, 111);
	  COL_TRI(108, 110, 112);
	  COL_TRI_INIT(SURFACE_HANGABLE, 16);
	  COL_TRI(144, 112, 110);
	  COL_TRI(110, 145, 144);
	  COL_TRI(110, 109, 145);
	  COL_TRI(146, 109, 111);
	  COL_TRI(146, 145, 109);
	  COL_TRI(147, 145, 148);
	  COL_TRI(145, 149, 148);
	  COL_TRI(147, 144, 145);
	  COL_TRI(145, 146, 149);
	  COL_TRI(149, 146, 150);
	  COL_TRI(111, 150, 146);
	  COL_TRI(111, 112, 150);
	  COL_TRI(112, 144, 150);
	  COL_TRI(149, 150, 151);
	  COL_TRI(147, 151, 150);
	  COL_TRI(147, 150, 144);
	  COL_TRI_INIT(SURFACE_DEATH_PLANE, 2);
	  COL_TRI(137, 138, 139);
	  COL_TRI(137, 139, 140);
	  COL_TRI_INIT(SURFACE_WALL_MISC, 10);
	  COL_TRI(76, 26, 24);
	  COL_TRI(114, 142, 116);
	  COL_TRI(114, 116, 115);
	  COL_TRI(143, 132, 124);
	  COL_TRI(143, 124, 123);
	  COL_TRI(70, 27, 26);
	  COL_TRI(70, 26, 76);
	  COL_TRI(74, 28, 29);
	  COL_TRI(76, 24, 74);
	  COL_TRI(74, 24, 28);
	  COL_TRI_INIT(SURFACE_HARD_NOT_SLIPPERY, 52);
	  COL_TRI(102, 101, 100);
	  COL_TRI(113, 114, 115);
	  COL_TRI(113, 115, 116);
	  COL_TRI(113, 94, 114);
	  COL_TRI(63, 65, 61);
	  COL_TRI(63, 106, 65);
	  COL_TRI(63, 117, 106);
	  COL_TRI(63, 105, 117);
	  COL_TRI(102, 100, 99);
	  COL_TRI(96, 97, 98);
	  COL_TRI(96, 98, 56);
	  COL_TRI(85, 84, 83);
	  COL_TRI(85, 86, 84);
	  COL_TRI(85, 87, 86);
	  COL_TRI(85, 88, 87);
	  COL_TRI(79, 82, 80);
	  COL_TRI(79, 81, 82);
	  COL_TRI(90, 91, 89);
	  COL_TRI(78, 71, 73);
	  COL_TRI(78, 72, 71);
	  COL_TRI(78, 77, 72);
	  COL_TRI(74, 77, 76);
	  COL_TRI(74, 72, 77);
	  COL_TRI(90, 47, 91);
	  COL_TRI(118, 126, 121);
	  COL_TRI(118, 120, 126);
	  COL_TRI(119, 120, 118);
	  COL_TRI(119, 127, 120);
	  COL_TRI(120, 127, 128);
	  COL_TRI(120, 128, 126);
	  COL_TRI(121, 126, 128);
	  COL_TRI(121, 128, 122);
	  COL_TRI(122, 128, 127);
	  COL_TRI(122, 127, 119);
	  COL_TRI(121, 122, 129);
	  COL_TRI(118, 121, 129);
	  COL_TRI(122, 119, 129);
	  COL_TRI(119, 118, 129);
	  COL_TRI(123, 124, 130);
	  COL_TRI(124, 131, 130);
	  COL_TRI(124, 132, 131);
	  COL_TRI(123, 130, 133);
	  COL_TRI(125, 12, 20);
	  COL_TRI(12, 134, 135);
	  COL_TRI(12, 135, 18);
	  COL_TRI(125, 134, 12);
	  COL_TRI(23, 18, 135);
	  COL_TRI(23, 135, 136);
	  COL_TRI(20, 23, 136);
	  COL_TRI(20, 136, 125);
	  COL_TRI(2, 6, 7);
	  COL_TRI(2, 1, 6);
	  COL_TRI_INIT(SURFACE_CAMERA_FREE_ROAM, 22);
	  COL_TRI(155, 158, 159);
	  COL_TRI(137, 74, 29);
	  COL_TRI(152, 137, 29);
	  COL_TRI(29, 70, 152);
	  COL_TRI(70, 153, 152);
	  COL_TRI(140, 153, 70);
	  COL_TRI(140, 70, 76);
	  COL_TRI(154, 152, 153);
	  COL_TRI(137, 152, 155);
	  COL_TRI(152, 156, 155);
	  COL_TRI(152, 154, 156);
	  COL_TRI(154, 153, 157);
	  COL_TRI(158, 153, 159);
	  COL_TRI(139, 153, 140);
	  COL_TRI(139, 159, 153);
	  COL_TRI(158, 157, 153);
	  COL_TRI(155, 156, 158);
	  COL_TRI(138, 159, 139);
	  COL_TRI(76, 33, 140);
	  COL_TRI(137, 155, 138);
	  COL_TRI(137, 75, 74);
	  COL_TRI(138, 155, 159);
	  COL_TRI_INIT(SURFACE_THI3_WALLKICK, 2);
	  COL_TRI(94, 92, 141);
	  COL_TRI(94, 93, 92);
	  COL_TRI_STOP();
	  COL_END();
	}

	var thi = [
	  thi_seg7_area_1_collision,
	  thi_seg7_collision_top_trap,
	  thi_seg7_area_2_collision,
	  thi_seg7_area_3_collision
	];

	function ttc_seg7_collision_level() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x2DA);
	  COL_VERTEX(2253, -8191, -2252);
	  COL_VERTEX(-2252, -8191, 2253);
	  COL_VERTEX(2253, -8191, 2253);
	  COL_VERTEX(-2252, -8191, -2252);
	  COL_VERTEX(1024, 5089, 424);
	  COL_VERTEX(1536, 5089, 424);
	  COL_VERTEX(1536, 5396, -423);
	  COL_VERTEX(1024, 5396, -423);
	  COL_VERTEX(1386, 5089, 786);
	  COL_VERTEX(1386, 5396, -785);
	  COL_VERTEX(424, 4782, 1024);
	  COL_VERTEX(786, 4782, 1386);
	  COL_VERTEX(424, 4782, 1536);
	  COL_VERTEX(786, 6011, -1385);
	  COL_VERTEX(424, 6011, -1023);
	  COL_VERTEX(364, 3860, -175);
	  COL_VERTEX(876, 3860, -175);
	  COL_VERTEX(364, 3707, -1023);
	  COL_VERTEX(876, 3860, -1023);
	  COL_VERTEX(-423, 4475, 1024);
	  COL_VERTEX(-785, 4475, 1386);
	  COL_VERTEX(726, 3860, -1385);
	  COL_VERTEX(364, 3860, -1023);
	  COL_VERTEX(-423, 6011, -1535);
	  COL_VERTEX(-423, 6011, -1023);
	  COL_VERTEX(-423, 3860, -1535);
	  COL_VERTEX(-423, 3860, -1023);
	  COL_VERTEX(-1385, 4014, 786);
	  COL_VERTEX(-1535, 4168, 424);
	  COL_VERTEX(-1023, 3860, -423);
	  COL_VERTEX(-1385, 3860, -785);
	  COL_VERTEX(1386, 5243, -785);
	  COL_VERTEX(424, 6011, -1535);
	  COL_VERTEX(726, 3707, -1385);
	  COL_VERTEX(-423, 4475, 1536);
	  COL_VERTEX(-423, 3707, -1023);
	  COL_VERTEX(-1023, 6011, -423);
	  COL_VERTEX(364, 3860, -1535);
	  COL_VERTEX(-785, 6011, -1385);
	  COL_VERTEX(-1385, 5857, -785);
	  COL_VERTEX(-1023, 4168, 424);
	  COL_VERTEX(-785, 3860, -1385);
	  COL_VERTEX(-1535, 3860, -423);
	  COL_VERTEX(1024, 5243, -423);
	  COL_VERTEX(1024, 4936, 424);
	  COL_VERTEX(424, 4628, 1024);
	  COL_VERTEX(424, 5857, -1023);
	  COL_VERTEX(-423, 5857, -1023);
	  COL_VERTEX(-423, 4321, 1024);
	  COL_VERTEX(-1023, 5857, -423);
	  COL_VERTEX(-1023, 3707, -423);
	  COL_VERTEX(-1023, 4014, 424);
	  COL_VERTEX(1536, 3072, 1407);
	  COL_VERTEX(1024, 3072, 1407);
	  COL_VERTEX(862, 2919, 2081);
	  COL_VERTEX(760, 2919, 1672);
	  COL_VERTEX(760, 3072, 1672);
	  COL_VERTEX(-547, 3072, 1672);
	  COL_VERTEX(-1568, 3072, 650);
	  COL_VERTEX(-861, 2919, 2081);
	  COL_VERTEX(-2080, 2919, 862);
	  COL_VERTEX(-1568, 3072, 548);
	  COL_VERTEX(-1660, 2678, -247);
	  COL_VERTEX(-1660, 2678, 162);
	  COL_VERTEX(-2070, 2678, 162);
	  COL_VERTEX(-2070, 2678, -247);
	  COL_VERTEX(-1660, 2524, 162);
	  COL_VERTEX(1074, -19, 145);
	  COL_VERTEX(-349, -19, 1569);
	  COL_VERTEX(1936, -173, 1007);
	  COL_VERTEX(-649, -19, 1569);
	  COL_VERTEX(-349, -173, 1569);
	  COL_VERTEX(862, -173, 2081);
	  COL_VERTEX(-861, -173, 2081);
	  COL_VERTEX(1074, -19, -144);
	  COL_VERTEX(1936, -19, -1006);
	  COL_VERTEX(-861, -19, -2080);
	  COL_VERTEX(145, -19, -1073);
	  COL_VERTEX(-144, -19, -1073);
	  COL_VERTEX(-289, -19, -1218);
	  COL_VERTEX(-1196, -19, -21);
	  COL_VERTEX(-1341, -19, -166);
	  COL_VERTEX(-1006, -19, -1935);
	  COL_VERTEX(-144, -173, -1073);
	  COL_VERTEX(-955, -71, -1030);
	  COL_VERTEX(-955, -71, -1320);
	  COL_VERTEX(-1244, -71, -740);
	  COL_VERTEX(-810, -71, -885);
	  COL_VERTEX(-665, -71, -1030);
	  COL_VERTEX(-955, -224, -1320);
	  COL_VERTEX(-1244, -224, -740);
	  COL_VERTEX(-1244, -71, -1030);
	  COL_VERTEX(-1484, -71, -980);
	  COL_VERTEX(-1339, -71, -1125);
	  COL_VERTEX(-1433, -19, -1219);
	  COL_VERTEX(-1914, -19, -738);
	  COL_VERTEX(-1578, -19, -1363);
	  COL_VERTEX(-1433, -173, -1219);
	  COL_VERTEX(-1671, 1567, 162);
	  COL_VERTEX(-1671, 1567, -247);
	  COL_VERTEX(-2080, 1567, 162);
	  COL_VERTEX(-2080, 1567, -247);
	  COL_VERTEX(-1671, 1413, 162);
	  COL_VERTEX(1621, -2088, -58);
	  COL_VERTEX(2081, -2088, -427);
	  COL_VERTEX(1821, -2088, -687);
	  COL_VERTEX(1495, -2088, -361);
	  COL_VERTEX(2081, -2242, -427);
	  COL_VERTEX(1621, -2242, -236);
	  COL_VERTEX(1621, -2088, -236);
	  COL_VERTEX(705, -1453, -1513);
	  COL_VERTEX(850, -1453, -1658);
	  COL_VERTEX(428, -1453, -2080);
	  COL_VERTEX(343, -1453, -1876);
	  COL_VERTEX(-539, -1453, -1876);
	  COL_VERTEX(705, -1607, -1513);
	  COL_VERTEX(-539, -1607, -2080);
	  COL_VERTEX(-861, -1453, -2080);
	  COL_VERTEX(-539, -1453, -1758);
	  COL_VERTEX(-581, 1054, -911);
	  COL_VERTEX(-689, 1054, -1019);
	  COL_VERTEX(-798, 1054, -911);
	  COL_VERTEX(-689, 1054, -802);
	  COL_VERTEX(-581, 901, -911);
	  COL_VERTEX(-1349, 901, -1317);
	  COL_VERTEX(-1240, 901, -1208);
	  COL_VERTEX(-1349, 901, -1099);
	  COL_VERTEX(-1457, 901, -1208);
	  COL_VERTEX(-1349, 747, -1099);
	  COL_VERTEX(-1240, 747, -1208);
	  COL_VERTEX(938, -3714, -1150);
	  COL_VERTEX(1046, -3714, -1041);
	  COL_VERTEX(938, -3714, -932);
	  COL_VERTEX(829, -3714, -1041);
	  COL_VERTEX(1046, -3867, -1041);
	  COL_VERTEX(-790, -839, 1573);
	  COL_VERTEX(-1080, -839, 1863);
	  COL_VERTEX(-1188, -941, 1175);
	  COL_VERTEX(-1080, -992, 1283);
	  COL_VERTEX(-1478, -941, 1464);
	  COL_VERTEX(-1333, -1095, 1030);
	  COL_VERTEX(-1188, -1095, 1175);
	  COL_VERTEX(-1333, -941, 1030);
	  COL_VERTEX(-1623, -1095, 1320);
	  COL_VERTEX(-1671, -1146, -691);
	  COL_VERTEX(-1671, -992, -656);
	  COL_VERTEX(-1671, -992, -691);
	  COL_VERTEX(-2080, -992, -861);
	  COL_VERTEX(-1646, -992, -716);
	  COL_VERTEX(-1671, -1607, 692);
	  COL_VERTEX(-1671, -1453, 657);
	  COL_VERTEX(-1671, -1453, 692);
	  COL_VERTEX(-2080, -1453, 862);
	  COL_VERTEX(-1935, -1146, -1006);
	  COL_VERTEX(-1646, -1146, -716);
	  COL_VERTEX(-2080, -1146, -861);
	  COL_VERTEX(-2080, -1146, -656);
	  COL_VERTEX(-1646, -1453, 717);
	  COL_VERTEX(-2080, -1607, 657);
	  COL_VERTEX(-1671, -1607, 657);
	  COL_VERTEX(-1935, -1453, 1007);
	  COL_VERTEX(-1935, -1607, 1007);
	  COL_VERTEX(-2080, -1607, 862);
	  COL_VERTEX(-162, -2692, 2081);
	  COL_VERTEX(-162, -2692, 1682);
	  COL_VERTEX(-162, -2846, 2081);
	  COL_VERTEX(-696, -2692, 1682);
	  COL_VERTEX(-861, -2692, 2081);
	  COL_VERTEX(-1211, -2692, 1732);
	  COL_VERTEX(-928, -2692, 1449);
	  COL_VERTEX(-928, -2846, 1449);
	  COL_VERTEX(-1593, -3491, 1349);
	  COL_VERTEX(-1833, -3491, 615);
	  COL_VERTEX(-1346, -3670, 1102);
	  COL_VERTEX(-1346, -3491, 1102);
	  COL_VERTEX(-1833, -3670, 615);
	  COL_VERTEX(-2080, -3516, 862);
	  COL_VERTEX(-1876, -3670, 657);
	  COL_VERTEX(-1876, -3516, 657);
	  COL_VERTEX(-2080, -3516, 572);
	  COL_VERTEX(-1876, -3516, 572);
	  COL_VERTEX(-2080, -4003, -571);
	  COL_VERTEX(-1876, -3670, 572);
	  COL_VERTEX(-1876, -4156, -571);
	  COL_VERTEX(-1876, -4003, -571);
	  COL_VERTEX(-2080, -4003, -861);
	  COL_VERTEX(-1876, -4156, -656);
	  COL_VERTEX(-898, -4003, -1634);
	  COL_VERTEX(-1103, -4003, -1839);
	  COL_VERTEX(-1363, 1075, 145);
	  COL_VERTEX(-1363, 1228, 145);
	  COL_VERTEX(-1478, 1228, 378);
	  COL_VERTEX(-1647, 1075, -72);
	  COL_VERTEX(-1824, 1075, 285);
	  COL_VERTEX(-1495, 1075, 637);
	  COL_VERTEX(-1411, 1228, 883);
	  COL_VERTEX(-1722, 1228, 1062);
	  COL_VERTEX(-1850, 1075, 684);
	  COL_VERTEX(-1722, 1075, 1062);
	  COL_VERTEX(-1478, 1075, 378);
	  COL_VERTEX(-1495, 1228, 637);
	  COL_VERTEX(395, -4407, -611);
	  COL_VERTEX(876, 3707, -175);
	  COL_VERTEX(364, 3707, -175);
	  COL_VERTEX(876, 3707, -1023);
	  COL_VERTEX(-1385, 6011, -785);
	  COL_VERTEX(-785, 4321, 1386);
	  COL_VERTEX(-1385, 4168, 786);
	  COL_VERTEX(1536, 4936, 424);
	  COL_VERTEX(1536, 5243, -423);
	  COL_VERTEX(1386, 4936, 786);
	  COL_VERTEX(786, 4628, 1386);
	  COL_VERTEX(786, 5857, -1385);
	  COL_VERTEX(424, 5857, -1535);
	  COL_VERTEX(424, 4628, 1536);
	  COL_VERTEX(-423, 5857, -1535);
	  COL_VERTEX(364, 3707, -1535);
	  COL_VERTEX(-423, 4321, 1536);
	  COL_VERTEX(-785, 5857, -1385);
	  COL_VERTEX(-423, 3707, -1535);
	  COL_VERTEX(-785, 3707, -1385);
	  COL_VERTEX(-1535, 4014, 424);
	  COL_VERTEX(-1385, 3707, -785);
	  COL_VERTEX(-1535, 3707, -423);
	  COL_VERTEX(1024, 2919, 1407);
	  COL_VERTEX(1536, 2919, 1407);
	  COL_VERTEX(862, 3072, 2081);
	  COL_VERTEX(-547, 2919, 1672);
	  COL_VERTEX(-861, 3072, 2081);
	  COL_VERTEX(-2080, 3072, 862);
	  COL_VERTEX(-1568, 2919, 650);
	  COL_VERTEX(-1568, 2919, 548);
	  COL_VERTEX(-2080, 3072, 548);
	  COL_VERTEX(-2080, 2919, 548);
	  COL_VERTEX(-1660, 2524, -247);
	  COL_VERTEX(-2070, 2524, -247);
	  COL_VERTEX(-2070, 2524, 162);
	  COL_VERTEX(1074, -173, 145);
	  COL_VERTEX(1936, -19, 1007);
	  COL_VERTEX(862, -19, 2081);
	  COL_VERTEX(-861, -19, 2081);
	  COL_VERTEX(-649, -173, 1569);
	  COL_VERTEX(-1011, -19, 1931);
	  COL_VERTEX(-1011, -173, 1931);
	  COL_VERTEX(2081, -19, 862);
	  COL_VERTEX(2081, -19, -861);
	  COL_VERTEX(1074, -173, -144);
	  COL_VERTEX(2081, -173, -861);
	  COL_VERTEX(2081, -173, 862);
	  COL_VERTEX(1936, -173, -1006);
	  COL_VERTEX(1007, -19, -1935);
	  COL_VERTEX(1007, -173, -1935);
	  COL_VERTEX(145, -173, -1073);
	  COL_VERTEX(862, -19, -2080);
	  COL_VERTEX(-1341, -173, -166);
	  COL_VERTEX(-1196, -173, -21);
	  COL_VERTEX(-289, -173, -1218);
	  COL_VERTEX(-1006, -173, -1935);
	  COL_VERTEX(862, -173, -2080);
	  COL_VERTEX(-861, -173, -2080);
	  COL_VERTEX(-955, -224, -1030);
	  COL_VERTEX(-810, -224, -885);
	  COL_VERTEX(-665, -224, -1030);
	  COL_VERTEX(-1244, -224, -1030);
	  COL_VERTEX(-1339, -224, -1125);
	  COL_VERTEX(-1484, -224, -980);
	  COL_VERTEX(-1578, -173, -1363);
	  COL_VERTEX(-2059, -173, -883);
	  COL_VERTEX(-2059, -19, -883);
	  COL_VERTEX(-1914, -173, -738);
	  COL_VERTEX(-1671, 1413, -247);
	  COL_VERTEX(-2080, 1413, -247);
	  COL_VERTEX(-2080, 1413, 162);
	  COL_VERTEX(2081, -2088, -58);
	  COL_VERTEX(2081, -2242, -58);
	  COL_VERTEX(1621, -2242, -58);
	  COL_VERTEX(1495, -2242, -361);
	  COL_VERTEX(1821, -2242, -687);
	  COL_VERTEX(850, -1607, -1658);
	  COL_VERTEX(428, -1607, -2080);
	  COL_VERTEX(-539, -1453, -2080);
	  COL_VERTEX(343, -1607, -1876);
	  COL_VERTEX(-539, -1607, -1876);
	  COL_VERTEX(-539, -1607, -1758);
	  COL_VERTEX(-861, -1607, -2080);
	  COL_VERTEX(-689, 901, -1019);
	  COL_VERTEX(-798, 901, -911);
	  COL_VERTEX(-689, 901, -802);
	  COL_VERTEX(-1349, 747, -1317);
	  COL_VERTEX(-1457, 747, -1208);
	  COL_VERTEX(938, -3867, -1150);
	  COL_VERTEX(829, -3867, -1041);
	  COL_VERTEX(938, -3867, -932);
	  COL_VERTEX(-1080, -839, 1283);
	  COL_VERTEX(-790, -992, 1573);
	  COL_VERTEX(-1080, -992, 1863);
	  COL_VERTEX(-1369, -839, 1573);
	  COL_VERTEX(-1369, -992, 1573);
	  COL_VERTEX(-1478, -1095, 1464);
	  COL_VERTEX(-1623, -941, 1320);
	  COL_VERTEX(-1671, -1146, -656);
	  COL_VERTEX(-1936, -992, -1006);
	  COL_VERTEX(-2080, -992, -656);
	  COL_VERTEX(-1935, -992, -1006);
	  COL_VERTEX(-2080, -1453, 657);
	  COL_VERTEX(-1646, -1607, 717);
	  COL_VERTEX(-162, -2846, 1682);
	  COL_VERTEX(-696, -2846, 1682);
	  COL_VERTEX(-861, -2846, 2081);
	  COL_VERTEX(-1211, -2846, 1732);
	  COL_VERTEX(-1593, -3670, 1349);
	  COL_VERTEX(-2080, -3491, 862);
	  COL_VERTEX(-2080, -3670, 862);
	  COL_VERTEX(-2080, -3670, 572);
	  COL_VERTEX(-2080, -4156, -571);
	  COL_VERTEX(-1876, -4003, -656);
	  COL_VERTEX(-2080, -4156, -861);
	  COL_VERTEX(-1647, 1228, -72);
	  COL_VERTEX(-1824, 1228, 285);
	  COL_VERTEX(-1411, 1075, 883);
	  COL_VERTEX(-1850, 1228, 684);
	  COL_VERTEX(171, -4407, -1053);
	  COL_VERTEX(62, -4407, -944);
	  COL_VERTEX(504, -4407, -720);
	  COL_VERTEX(-204, 4475, -511);
	  COL_VERTEX(512, 4475, 205);
	  COL_VERTEX(512, 4475, -204);
	  COL_VERTEX(205, 4475, 512);
	  COL_VERTEX(205, 4475, -511);
	  COL_VERTEX(-511, 4475, 205);
	  COL_VERTEX(-204, 4475, 512);
	  COL_VERTEX(-511, 4475, -204);
	  COL_VERTEX(0, 6093, 123);
	  COL_VERTEX(106, 5970, 61);
	  COL_VERTEX(106, 6093, 61);
	  COL_VERTEX(106, 5970, -60);
	  COL_VERTEX(106, 6093, -60);
	  COL_VERTEX(0, 5970, -122);
	  COL_VERTEX(0, 6093, -122);
	  COL_VERTEX(0, 5970, 123);
	  COL_VERTEX(0, 6216, 0);
	  COL_VERTEX(-105, 6093, 61);
	  COL_VERTEX(-105, 6093, -60);
	  COL_VERTEX(-105, 5970, -60);
	  COL_VERTEX(0, 5847, 0);
	  COL_VERTEX(0, -2283, 0);
	  COL_VERTEX(-105, -2405, 61);
	  COL_VERTEX(-105, -2405, -60);
	  COL_VERTEX(0, -2405, 123);
	  COL_VERTEX(106, -2405, 61);
	  COL_VERTEX(106, -2405, -60);
	  COL_VERTEX(0, -2405, -122);
	  COL_VERTEX(0, -2528, -122);
	  COL_VERTEX(0, -2651, 0);
	  COL_VERTEX(-105, 5970, 61);
	  COL_VERTEX(106, -2528, 61);
	  COL_VERTEX(106, -2528, -60);
	  COL_VERTEX(0, -2528, 123);
	  COL_VERTEX(-105, -2528, 61);
	  COL_VERTEX(-105, -2528, -60);
	  COL_VERTEX(2498, 7051, 2208);
	  COL_VERTEX(2208, 6897, 1919);
	  COL_VERTEX(2208, 7051, 1919);
	  COL_VERTEX(1919, 7051, 2208);
	  COL_VERTEX(2498, 6897, 2208);
	  COL_VERTEX(2208, 7051, 2498);
	  COL_VERTEX(2208, 6897, 2498);
	  COL_VERTEX(1919, 6897, 2208);
	  COL_VERTEX(1671, 3860, 749);
	  COL_VERTEX(2081, 3707, 749);
	  COL_VERTEX(2081, 3860, 749);
	  COL_VERTEX(2081, 3707, 339);
	  COL_VERTEX(2081, 3860, 339);
	  COL_VERTEX(1671, 3707, 339);
	  COL_VERTEX(1671, 3860, 339);
	  COL_VERTEX(1671, 3707, 749);
	  COL_VERTEX(1270, 2939, 798);
	  COL_VERTEX(1270, 3159, 798);
	  COL_VERTEX(1270, 3159, 839);
	  COL_VERTEX(926, 3518, 337);
	  COL_VERTEX(926, 3298, 337);
	  COL_VERTEX(926, 3518, 378);
	  COL_VERTEX(999, 2939, 798);
	  COL_VERTEX(655, 3298, 337);
	  COL_VERTEX(512, 4321, -204);
	  COL_VERTEX(512, 4321, 205);
	  COL_VERTEX(205, 4321, -511);
	  COL_VERTEX(205, 4321, 512);
	  COL_VERTEX(-511, 4321, 205);
	  COL_VERTEX(-204, 4321, -511);
	  COL_VERTEX(-204, 4321, 512);
	  COL_VERTEX(-511, 4321, -204);
	  COL_VERTEX(611, 3318, 2081);
	  COL_VERTEX(611, 3277, 2081);
	  COL_VERTEX(611, 3277, 1672);
	  COL_VERTEX(611, 3318, 1713);
	  COL_VERTEX(611, 3943, 1672);
	  COL_VERTEX(-617, 3943, 2081);
	  COL_VERTEX(-617, 3943, 1672);
	  COL_VERTEX(-576, 3318, 1713);
	  COL_VERTEX(-576, 3318, 2081);
	  COL_VERTEX(-576, 3902, 1713);
	  COL_VERTEX(862, 1351, 1672);
	  COL_VERTEX(862, 1351, 2081);
	  COL_VERTEX(453, 1351, 1672);
	  COL_VERTEX(862, 1197, 2081);
	  COL_VERTEX(-711, 2626, -782);
	  COL_VERTEX(-1435, 2063, -1506);
	  COL_VERTEX(-1435, 2114, -1506);
	  COL_VERTEX(-711, 2063, -782);
	  COL_VERTEX(-1435, 2626, -1506);
	  COL_VERTEX(-1073, 2063, -420);
	  COL_VERTEX(-1435, 2370, -1506);
	  COL_VERTEX(-769, 2585, -782);
	  COL_VERTEX(-892, 2370, -1325);
	  COL_VERTEX(-892, 2319, -1325);
	  COL_VERTEX(-1073, 2114, -1144);
	  COL_VERTEX(-1073, 2585, -478);
	  COL_VERTEX(-1102, 2319, -1115);
	  COL_VERTEX(-1464, 2319, -1477);
	  COL_VERTEX(-1102, 2114, -1115);
	  COL_VERTEX(-1768, 2114, -1173);
	  COL_VERTEX(-1073, 2114, -478);
	  COL_VERTEX(1663, -962, -1279);
	  COL_VERTEX(1376, -2088, -895);
	  COL_VERTEX(1412, -962, -859);
	  COL_VERTEX(1663, -2088, -1279);
	  COL_VERTEX(-1444, 287, 1498);
	  COL_VERTEX(-1227, 287, 702);
	  COL_VERTEX(-937, 287, 991);
	  COL_VERTEX(-937, 133, 991);
	  COL_VERTEX(1689, -2487, 820);
	  COL_VERTEX(820, -2487, 1689);
	  COL_VERTEX(662, -2487, 274);
	  COL_VERTEX(969, -2487, 307);
	  COL_VERTEX(2081, -2641, 862);
	  COL_VERTEX(1689, -2641, 820);
	  COL_VERTEX(662, -2487, 0);
	  COL_VERTEX(969, -2487, 0);
	  COL_VERTEX(2081, -2641, 307);
	  COL_VERTEX(969, -2641, 0);
	  COL_VERTEX(862, -2487, 2081);
	  COL_VERTEX(1037, -2487, 1906);
	  COL_VERTEX(274, -2487, 662);
	  COL_VERTEX(820, -2641, 1689);
	  COL_VERTEX(862, -2641, 2081);
	  COL_VERTEX(0, -2641, 2081);
	  COL_VERTEX(-708, -1043, -1589);
	  COL_VERTEX(-1070, -1043, -1227);
	  COL_VERTEX(-744, -992, -901);
	  COL_VERTEX(-744, -1453, -901);
	  COL_VERTEX(-1287, -1453, -358);
	  COL_VERTEX(-781, -1453, -937);
	  COL_VERTEX(-1287, -1043, -430);
	  COL_VERTEX(-1030, -1453, -1911);
	  COL_VERTEX(-1899, -1043, -1042);
	  COL_VERTEX(-1106, -1043, -1263);
	  COL_VERTEX(-1577, -1453, -720);
	  COL_VERTEX(-1070, -1453, -1227);
	  COL_VERTEX(-1067, -1043, -1875);
	  COL_VERTEX(-1899, -1453, -1042);
	  COL_VERTEX(-781, -1453, -1589);
	  COL_VERTEX(-1287, -1453, -430);
	  COL_VERTEX(859, -5365, 801);
	  COL_VERTEX(830, -5211, 830);
	  COL_VERTEX(486, -5365, 1173);
	  COL_VERTEX(830, -4976, 830);
	  COL_VERTEX(1501, -4976, 1443);
	  COL_VERTEX(1501, -5365, 1443);
	  COL_VERTEX(1472, -4822, 1472);
	  COL_VERTEX(-62, -5365, 1173);
	  COL_VERTEX(662, -4822, 274);
	  COL_VERTEX(486, -5211, 1173);
	  COL_VERTEX(-62, -5211, 2081);
	  COL_VERTEX(-62, -5211, 1173);
	  COL_VERTEX(662, -4822, -273);
	  COL_VERTEX(1349, -4822, -960);
	  COL_VERTEX(2081, -4976, -861);
	  COL_VERTEX(1666, -4976, -1277);
	  COL_VERTEX(662, -4976, 274);
	  COL_VERTEX(1024, -4822, -635);
	  COL_VERTEX(830, -4822, -829);
	  COL_VERTEX(830, -4976, -829);
	  COL_VERTEX(-861, -4156, -803);
	  COL_VERTEX(-1150, -4156, -513);
	  COL_VERTEX(-1150, -4003, -513);
	  COL_VERTEX(-1476, -4003, -839);
	  COL_VERTEX(-861, -4003, -803);
	  COL_VERTEX(-1442, -173, 1501);
	  COL_VERTEX(-935, -173, 1573);
	  COL_VERTEX(-1080, -19, 1139);
	  COL_VERTEX(-1225, -19, 1573);
	  COL_VERTEX(-1080, -19, 1718);
	  COL_VERTEX(-935, -19, 1573);
	  COL_VERTEX(-1080, -19, 1428);
	  COL_VERTEX(1867, 5284, 1970);
	  COL_VERTEX(1867, 5284, 1867);
	  COL_VERTEX(1970, 5284, 1867);
	  COL_VERTEX(1970, 5284, 1970);
	  COL_VERTEX(-1153, 911, -1802);
	  COL_VERTEX(-1211, 911, -64);
	  COL_VERTEX(-284, 911, -933);
	  COL_VERTEX(-313, 1372, -904);
	  COL_VERTEX(12, 1218, -1230);
	  COL_VERTEX(-1182, 911, -35);
	  COL_VERTEX(-856, 1372, -2099);
	  COL_VERTEX(12, 1372, -1230);
	  COL_VERTEX(-313, 1065, -904);
	  COL_VERTEX(-1182, 1065, -1773);
	  COL_VERTEX(-1218, -173, 0);
	  COL_VERTEX(-1218, 1065, 0);
	  COL_VERTEX(-2087, -173, -868);
	  COL_VERTEX(-1218, -173, -57);
	  COL_VERTEX(-1211, -173, -64);
	  COL_VERTEX(105, -4684, -901);
	  COL_VERTEX(62, -4684, -944);
	  COL_VERTEX(105, -4976, -901);
	  COL_VERTEX(171, -4546, -1053);
	  COL_VERTEX(431, -4684, -1227);
	  COL_VERTEX(431, -4822, -1227);
	  COL_VERTEX(504, -4546, -720);
	  COL_VERTEX(757, -4976, -1553);
	  COL_VERTEX(395, -4976, -611);
	  COL_VERTEX(279, -4684, -1162);
	  COL_VERTEX(279, -4546, -1162);
	  COL_VERTEX(612, -4684, -829);
	  COL_VERTEX(721, -4822, -937);
	  COL_VERTEX(999, 3159, 798);
	  COL_VERTEX(1270, 2939, 839);
	  COL_VERTEX(999, 2939, 839);
	  COL_VERTEX(926, 3298, 378);
	  COL_VERTEX(655, 3518, 337);
	  COL_VERTEX(655, 3298, 378);
	  COL_VERTEX(999, 3159, 839);
	  COL_VERTEX(655, 3518, 378);
	  COL_VERTEX(-617, 3277, 2081);
	  COL_VERTEX(-617, 3277, 1672);
	  COL_VERTEX(611, 3902, 1713);
	  COL_VERTEX(-576, 3902, 2081);
	  COL_VERTEX(453, 1351, 2081);
	  COL_VERTEX(862, 1197, 1672);
	  COL_VERTEX(453, 1197, 1672);
	  COL_VERTEX(453, 1197, 2081);
	  COL_VERTEX(-1073, 2626, -420);
	  COL_VERTEX(-1797, 2063, -1144);
	  COL_VERTEX(-1797, 2626, -1144);
	  COL_VERTEX(-1073, 2370, -1144);
	  COL_VERTEX(-769, 2114, -782);
	  COL_VERTEX(-1254, 2319, -1687);
	  COL_VERTEX(-1073, 2319, -1144);
	  COL_VERTEX(-1254, 2370, -1687);
	  COL_VERTEX(-1768, 2585, -1173);
	  COL_VERTEX(-1464, 2585, -1477);
	  COL_VERTEX(1699, -962, -1243);
	  COL_VERTEX(1376, -962, -895);
	  COL_VERTEX(1412, -2088, -859);
	  COL_VERTEX(1699, -2088, -1243);
	  COL_VERTEX(-1227, 133, 702);
	  COL_VERTEX(-1734, 133, 1208);
	  COL_VERTEX(-1734, 287, 1208);
	  COL_VERTEX(-1444, 133, 1498);
	  COL_VERTEX(1906, -2487, 1037);
	  COL_VERTEX(2081, -2487, 862);
	  COL_VERTEX(1906, -2641, 1037);
	  COL_VERTEX(274, -2641, 662);
	  COL_VERTEX(662, -2641, 274);
	  COL_VERTEX(2081, -2487, 307);
	  COL_VERTEX(969, -2641, 307);
	  COL_VERTEX(1037, -2641, 1906);
	  COL_VERTEX(662, -2641, 0);
	  COL_VERTEX(0, -2641, 662);
	  COL_VERTEX(0, -2487, 662);
	  COL_VERTEX(0, -2487, 2081);
	  COL_VERTEX(-1106, -992, -1263);
	  COL_VERTEX(-781, -1043, -937);
	  COL_VERTEX(-1287, -992, -358);
	  COL_VERTEX(-744, -992, -1625);
	  COL_VERTEX(-1030, -992, -1911);
	  COL_VERTEX(-708, -1453, -1589);
	  COL_VERTEX(-1106, -1453, -1263);
	  COL_VERTEX(-781, -1043, -1589);
	  COL_VERTEX(-1613, -1453, -684);
	  COL_VERTEX(-1067, -1453, -1875);
	  COL_VERTEX(-1935, -1453, -1006);
	  COL_VERTEX(862, -5365, 2081);
	  COL_VERTEX(859, -4976, 801);
	  COL_VERTEX(1472, -5211, 1472);
	  COL_VERTEX(468, -4976, 468);
	  COL_VERTEX(-62, -5365, 2081);
	  COL_VERTEX(468, -4822, 468);
	  COL_VERTEX(862, -5211, 2081);
	  COL_VERTEX(2081, -4822, 862);
	  COL_VERTEX(2081, -4822, -861);
	  COL_VERTEX(1666, -4822, -1277);
	  COL_VERTEX(1349, -4976, -960);
	  COL_VERTEX(2081, -4976, 862);
	  COL_VERTEX(662, -4976, -273);
	  COL_VERTEX(1155, -4822, -1154);
	  COL_VERTEX(1155, -4976, -1154);
	  COL_VERTEX(1024, -4976, -635);
	  COL_VERTEX(-1476, -4156, -839);
	  COL_VERTEX(-1187, -4003, -1129);
	  COL_VERTEX(-1187, -4156, -1129);
	  COL_VERTEX(-1080, -173, 1139);
	  COL_VERTEX(-1080, -173, 1428);
	  COL_VERTEX(-1442, -19, 1501);
	  COL_VERTEX(-1080, -173, 1718);
	  COL_VERTEX(-1225, -173, 1573);
	  COL_VERTEX(1867, 6037, 1867);
	  COL_VERTEX(1970, 6037, 1867);
	  COL_VERTEX(1970, 6037, 1970);
	  COL_VERTEX(1867, 6037, 1970);
	  COL_VERTEX(-1153, 1218, -1802);
	  COL_VERTEX(-284, 1218, -933);
	  COL_VERTEX(-2058, 911, -897);
	  COL_VERTEX(-856, 1218, -2099);
	  COL_VERTEX(-1218, 911, -57);
	  COL_VERTEX(-1182, 1372, -1773);
	  COL_VERTEX(-1182, -173, -35);
	  COL_VERTEX(-2087, 1065, -868);
	  COL_VERTEX(-2058, -173, -897);
	  COL_VERTEX(323, -4684, -1118);
	  COL_VERTEX(1047, -4976, -1263);
	  COL_VERTEX(612, -4546, -829);
	  COL_VERTEX(757, -4822, -1553);
	  COL_VERTEX(1047, -4822, -1263);
	  COL_VERTEX(721, -4684, -937);
	  COL_VERTEX(2081, 5284, 862);
	  COL_VERTEX(2081, 7475, 862);
	  COL_VERTEX(2081, 7475, -861);
	  COL_VERTEX(1457, 8192, -602);
	  COL_VERTEX(1457, 8192, 603);
	  COL_VERTEX(-1456, 8192, 603);
	  COL_VERTEX(603, 8192, -1456);
	  COL_VERTEX(2081, 5284, -861);
	  COL_VERTEX(603, 8192, 1457);
	  COL_VERTEX(862, 7475, 2081);
	  COL_VERTEX(-602, 8192, 1457);
	  COL_VERTEX(-861, 5284, 2081);
	  COL_VERTEX(-861, 7475, 2081);
	  COL_VERTEX(-602, 8192, -1456);
	  COL_VERTEX(-1456, 8192, -602);
	  COL_VERTEX(-2080, 7475, 862);
	  COL_VERTEX(862, 7475, -2080);
	  COL_VERTEX(862, 5284, -2080);
	  COL_VERTEX(-2080, 5284, 862);
	  COL_VERTEX(-861, 7475, -2080);
	  COL_VERTEX(-861, 5284, -2080);
	  COL_VERTEX(-2080, 7475, -861);
	  COL_VERTEX(-2080, 5284, -861);
	  COL_VERTEX(1919, 6191, 2208);
	  COL_VERTEX(2208, 6191, 1919);
	  COL_VERTEX(1629, 6037, 1919);
	  COL_VERTEX(1629, 6191, 1919);
	  COL_VERTEX(1919, 6037, 2208);
	  COL_VERTEX(2208, 6037, 1919);
	  COL_VERTEX(1919, 6037, 1629);
	  COL_VERTEX(1919, 6191, 1629);
	  COL_VERTEX(862, 5284, 2081);
	  COL_VERTEX(2081, 5919, 862);
	  COL_VERTEX(1079, 5284, 1864);
	  COL_VERTEX(2866, 5284, 2081);
	  COL_VERTEX(2081, 5284, 2866);
	  COL_VERTEX(1864, 5284, 1079);
	  COL_VERTEX(2081, 5919, 3301);
	  COL_VERTEX(1430, 5284, 1152);
	  COL_VERTEX(862, 5919, 2081);
	  COL_VERTEX(3301, 5919, 2081);
	  COL_VERTEX(3301, 7475, 2081);
	  COL_VERTEX(862, 5239, 2081);
	  COL_VERTEX(1079, 5239, 1864);
	  COL_VERTEX(1152, 5284, 1430);
	  COL_VERTEX(862, 1915, 2081);
	  COL_VERTEX(2081, 1915, 862);
	  COL_VERTEX(2081, 1915, -861);
	  COL_VERTEX(-861, 1915, 2081);
	  COL_VERTEX(862, 1915, -2080);
	  COL_VERTEX(-2080, 1915, 862);
	  COL_VERTEX(-861, 1915, -2080);
	  COL_VERTEX(-2080, 1915, -861);
	  COL_VERTEX(2081, -1453, 862);
	  COL_VERTEX(862, -1453, 2081);
	  COL_VERTEX(2081, -1453, -861);
	  COL_VERTEX(-861, -1453, 2081);
	  COL_VERTEX(862, -1453, -2080);
	  COL_VERTEX(-2080, -1453, -861);
	  COL_VERTEX(-1758, -1453, -539);
	  COL_VERTEX(-1758, -1607, -539);
	  COL_VERTEX(862, -4822, 2081);
	  COL_VERTEX(-861, -4822, 2081);
	  COL_VERTEX(862, -4822, -2080);
	  COL_VERTEX(-2080, -4822, 862);
	  COL_VERTEX(-2080, -4822, -861);
	  COL_VERTEX(-781, -3104, -1516);
	  COL_VERTEX(-539, -1760, -1758);
	  COL_VERTEX(-944, -1607, -1353);
	  COL_VERTEX(-1758, -1760, -539);
	  COL_VERTEX(-944, -1760, -1353);
	  COL_VERTEX(-1758, -3104, -539);
	  COL_VERTEX(-944, -2037, -1353);
	  COL_VERTEX(-944, -2446, -1353);
	  COL_VERTEX(-1351, -2037, -946);
	  COL_VERTEX(-1103, -3104, -1839);
	  COL_VERTEX(-539, -4822, -1758);
	  COL_VERTEX(-861, -4822, -2080);
	  COL_VERTEX(-1568, -2446, -1163);
	  COL_VERTEX(-1351, -2446, -946);
	  COL_VERTEX(-1161, -2139, -1571);
	  COL_VERTEX(-1876, -4822, -656);
	  COL_VERTEX(-2080, -3104, -861);
	  COL_VERTEX(-1876, -4022, -656);
	  COL_VERTEX(2081, -8191, 862);
	  COL_VERTEX(862, -8191, 2081);
	  COL_VERTEX(2081, -8191, -861);
	  COL_VERTEX(-861, -8191, 2081);
	  COL_VERTEX(862, -8191, -2080);
	  COL_VERTEX(-2080, -8191, 862);
	  COL_VERTEX(-861, -8191, -2080);
	  COL_VERTEX(-2080, -8191, -861);
	  COL_VERTEX(2081, 7475, 3301);
	  COL_VERTEX(2081, 5239, 862);
	  COL_VERTEX(1864, 5239, 1079);
	  COL_VERTEX(1430, 5239, 1152);
	  COL_VERTEX(1152, 5239, 1430);
	  COL_VERTEX(-2080, -1607, -861);
	  COL_VERTEX(-781, -4822, -1516);
	  COL_VERTEX(-1568, -2139, -1163);
	  COL_VERTEX(-1161, -2446, -1571);
	  COL_VERTEX(-898, -4822, -1634);
	  COL_VERTEX(-898, -4022, -1634);
	  COL_TRI_INIT(SURFACE_DEFAULT, 208);
	  COL_TRI(627, 628, 629);
	  COL_TRI(628, 630, 629);
	  COL_TRI(628, 631, 630);
	  COL_TRI(632, 630, 631);
	  COL_TRI(632, 633, 630);
	  COL_TRI(627, 629, 634);
	  COL_TRI(632, 631, 635);
	  COL_TRI(636, 635, 628);
	  COL_TRI(632, 635, 637);
	  COL_TRI(635, 631, 628);
	  COL_TRI(632, 640, 633);
	  COL_TRI(634, 629, 643);
	  COL_TRI(629, 630, 633);
	  COL_TRI(629, 633, 643);
	  COL_TRI(634, 643, 644);
	  COL_TRI(638, 639, 636);
	  COL_TRI(639, 637, 635);
	  COL_TRI(639, 635, 636);
	  COL_TRI(638, 636, 658);
	  COL_TRI(632, 641, 640);
	  COL_TRI(642, 637, 639);
	  COL_TRI(642, 632, 637);
	  COL_TRI(643, 633, 640);
	  COL_TRI(643, 640, 646);
	  COL_TRI(640, 641, 648);
	  COL_TRI(644, 643, 646);
	  COL_TRI(644, 646, 647);
	  COL_TRI(645, 642, 639);
	  COL_TRI(645, 639, 638);
	  COL_TRI(646, 640, 648);
	  COL_TRI(647, 646, 648);
	  COL_TRI(647, 648, 649);
	  COL_TRI(648, 632, 642);
	  COL_TRI(648, 641, 632);
	  COL_TRI(649, 648, 642);
	  COL_TRI(649, 642, 645);
	  COL_TRI(650, 655, 651);
	  COL_TRI(651, 657, 653);
	  COL_TRI(651, 653, 650);
	  COL_TRI(652, 653, 657);
	  COL_TRI(652, 657, 656);
	  COL_TRI(653, 654, 650);
	  COL_TRI(650, 654, 655);
	  COL_TRI(654, 610, 655);
	  COL_TRI(610, 609, 655);
	  COL_TRI(655, 609, 656);
	  COL_TRI(656, 657, 655);
	  COL_TRI(657, 651, 655);
	  COL_TRI(653, 652, 654);
	  COL_TRI(654, 652, 611);
	  COL_TRI(610, 654, 611);
	  COL_TRI(608, 611, 652);
	  COL_TRI(656, 608, 652);
	  COL_TRI(609, 608, 656);
	  COL_TRI(658, 666, 660);
	  COL_TRI(661, 497, 498);
	  COL_TRI(659, 627, 663);
	  COL_TRI(660, 664, 662);
	  COL_TRI(661, 498, 662);
	  COL_TRI(498, 495, 662);
	  COL_TRI(662, 495, 660);
	  COL_TRI(660, 495, 496);
	  COL_TRI(660, 666, 664);
	  COL_TRI(660, 496, 671);
	  COL_TRI(663, 627, 720);
	  COL_TRI(663, 497, 661);
	  COL_TRI(662, 664, 661);
	  COL_TRI(664, 667, 661);
	  COL_TRI(663, 496, 497);
	  COL_TRI(496, 663, 665);
	  COL_TRI(661, 659, 663);
	  COL_TRI(663, 720, 721);
	  COL_TRI(665, 663, 721);
	  COL_TRI(496, 665, 671);
	  COL_TRI(666, 719, 664);
	  COL_TRI(666, 636, 719);
	  COL_TRI(664, 719, 668);
	  COL_TRI(664, 668, 667);
	  COL_TRI(661, 667, 659);
	  COL_TRI(667, 628, 659);
	  COL_TRI(667, 668, 628);
	  COL_TRI(668, 636, 628);
	  COL_TRI(668, 719, 636);
	  COL_TRI(660, 723, 670);
	  COL_TRI(669, 660, 670);
	  COL_TRI(670, 723, 722);
	  COL_TRI(670, 722, 721);
	  COL_TRI(673, 627, 634);
	  COL_TRI(671, 722, 723);
	  COL_TRI(671, 665, 722);
	  COL_TRI(665, 721, 722);
	  COL_TRI(660, 671, 723);
	  COL_TRI(669, 658, 660);
	  COL_TRI(672, 669, 720);
	  COL_TRI(672, 720, 673);
	  COL_TRI(673, 634, 674);
	  COL_TRI(677, 638, 675);
	  COL_TRI(674, 634, 644);
	  COL_TRI(674, 644, 676);
	  COL_TRI(675, 638, 658);
	  COL_TRI(675, 658, 672);
	  COL_TRI(676, 647, 678);
	  COL_TRI(676, 644, 647);
	  COL_TRI(680, 674, 682);
	  COL_TRI(677, 645, 638);
	  COL_TRI(678, 649, 679);
	  COL_TRI(678, 647, 649);
	  COL_TRI(679, 649, 645);
	  COL_TRI(679, 645, 677);
	  COL_TRI(680, 673, 674);
	  COL_TRI(684, 676, 678);
	  COL_TRI(681, 673, 680);
	  COL_TRI(681, 672, 673);
	  COL_TRI(682, 676, 684);
	  COL_TRI(682, 674, 676);
	  COL_TRI(683, 675, 672);
	  COL_TRI(683, 672, 681);
	  COL_TRI(117, 678, 679);
	  COL_TRI(684, 678, 117);
	  COL_TRI(685, 686, 117);
	  COL_TRI(686, 118, 117);
	  COL_TRI(152, 677, 675);
	  COL_TRI(152, 675, 683);
	  COL_TRI(117, 679, 685);
	  COL_TRI(688, 680, 591);
	  COL_TRI(687, 686, 685);
	  COL_TRI(687, 685, 724);
	  COL_TRI(685, 677, 152);
	  COL_TRI(685, 679, 677);
	  COL_TRI(591, 680, 682);
	  COL_TRI(591, 682, 592);
	  COL_TRI(690, 117, 704);
	  COL_TRI(688, 681, 680);
	  COL_TRI(592, 684, 690);
	  COL_TRI(592, 682, 684);
	  COL_TRI(689, 681, 688);
	  COL_TRI(689, 683, 681);
	  COL_TRI(690, 684, 117);
	  COL_TRI(694, 283, 695);
	  COL_TRI(691, 152, 683);
	  COL_TRI(691, 683, 689);
	  COL_TRI(692, 685, 152);
	  COL_TRI(692, 152, 691);
	  COL_TRI(693, 703, 694);
	  COL_TRI(694, 695, 697);
	  COL_TRI(686, 687, 695);
	  COL_TRI(695, 696, 697);
	  COL_TRI(695, 687, 696);
	  COL_TRI(283, 118, 686);
	  COL_TRI(283, 686, 695);
	  COL_TRI(696, 698, 706);
	  COL_TRI(696, 706, 701);
	  COL_TRI(696, 701, 699);
	  COL_TRI(697, 696, 699);
	  COL_TRI(187, 693, 702);
	  COL_TRI(698, 687, 724);
	  COL_TRI(699, 700, 693);
	  COL_TRI(700, 699, 707);
	  COL_TRI(701, 707, 699);
	  COL_TRI(694, 697, 699);
	  COL_TRI(694, 699, 693);
	  COL_TRI(693, 700, 698);
	  COL_TRI(693, 725, 703);
	  COL_TRI(702, 693, 698);
	  COL_TRI(187, 725, 693);
	  COL_TRI(703, 704, 284);
	  COL_TRI(703, 284, 283);
	  COL_TRI(704, 703, 725);
	  COL_TRI(700, 705, 706);
	  COL_TRI(700, 727, 705);
	  COL_TRI(700, 706, 698);
	  COL_TRI(700, 707, 727);
	  COL_TRI(705, 726, 701);
	  COL_TRI(706, 705, 701);
	  COL_TRI(701, 726, 707);
	  COL_TRI(707, 726, 705);
	  COL_TRI(707, 705, 727);
	  COL_TRI(709, 185, 188);
	  COL_TRI(702, 698, 709);
	  COL_TRI(698, 724, 709);
	  COL_TRI(708, 692, 704);
	  COL_TRI(704, 725, 728);
	  COL_TRI(704, 728, 708);
	  COL_TRI(709, 188, 702);
	  COL_TRI(702, 188, 187);
	  COL_TRI(187, 728, 725);
	  COL_TRI(710, 728, 729);
	  COL_TRI(710, 708, 728);
	  COL_TRI(315, 710, 729);
	  COL_TRI(315, 729, 187);
	  COL_TRI(692, 708, 186);
	  COL_TRI(316, 692, 186);
	  COL_TRI(711, 591, 592);
	  COL_TRI(711, 592, 713);
	  COL_TRI(715, 704, 717);
	  COL_TRI(712, 688, 591);
	  COL_TRI(712, 591, 711);
	  COL_TRI(713, 690, 715);
	  COL_TRI(713, 592, 690);
	  COL_TRI(714, 689, 688);
	  COL_TRI(714, 688, 712);
	  COL_TRI(718, 691, 716);
	  COL_TRI(715, 690, 704);
	  COL_TRI(716, 691, 689);
	  COL_TRI(716, 689, 714);
	  COL_TRI(717, 704, 692);
	  COL_TRI(717, 692, 718);
	  COL_TRI(718, 692, 691);
	  COL_TRI_INIT(SURFACE_DEATH_PLANE, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI_INIT(SURFACE_VERY_SLIPPERY, 48);
	  COL_TRI(332, 333, 334);
	  COL_TRI(334, 335, 336);
	  COL_TRI(334, 333, 335);
	  COL_TRI(336, 335, 337);
	  COL_TRI(336, 337, 338);
	  COL_TRI(332, 339, 333);
	  COL_TRI(340, 336, 338);
	  COL_TRI(340, 332, 334);
	  COL_TRI(340, 334, 336);
	  COL_TRI(341, 332, 340);
	  COL_TRI(342, 341, 340);
	  COL_TRI(342, 340, 338);
	  COL_TRI(341, 339, 332);
	  COL_TRI(341, 354, 339);
	  COL_TRI(338, 337, 343);
	  COL_TRI(338, 343, 342);
	  COL_TRI(342, 354, 341);
	  COL_TRI(342, 343, 354);
	  COL_TRI(337, 344, 343);
	  COL_TRI(344, 339, 354);
	  COL_TRI(344, 337, 335);
	  COL_TRI(344, 333, 339);
	  COL_TRI(344, 354, 343);
	  COL_TRI(344, 335, 333);
	  COL_TRI(345, 348, 349);
	  COL_TRI(345, 349, 350);
	  COL_TRI(345, 350, 351);
	  COL_TRI(346, 348, 345);
	  COL_TRI(347, 346, 345);
	  COL_TRI(347, 345, 351);
	  COL_TRI(348, 355, 349);
	  COL_TRI(349, 355, 356);
	  COL_TRI(349, 356, 350);
	  COL_TRI(350, 356, 352);
	  COL_TRI(353, 357, 358);
	  COL_TRI(350, 352, 351);
	  COL_TRI(348, 357, 355);
	  COL_TRI(346, 357, 348);
	  COL_TRI(346, 358, 357);
	  COL_TRI(351, 352, 359);
	  COL_TRI(351, 359, 347);
	  COL_TRI(347, 358, 346);
	  COL_TRI(347, 359, 358);
	  COL_TRI(352, 353, 359);
	  COL_TRI(353, 358, 359);
	  COL_TRI(353, 352, 356);
	  COL_TRI(353, 356, 355);
	  COL_TRI(353, 355, 357);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 472);
	  COL_TRI(4, 5, 6);
	  COL_TRI(4, 6, 7);
	  COL_TRI(8, 5, 4);
	  COL_TRI(6, 9, 7);
	  COL_TRI(10, 8, 4);
	  COL_TRI(10, 11, 8);
	  COL_TRI(12, 11, 10);
	  COL_TRI(13, 32, 14);
	  COL_TRI(14, 32, 23);
	  COL_TRI(14, 23, 24);
	  COL_TRI(15, 202, 16);
	  COL_TRI(15, 203, 202);
	  COL_TRI(16, 202, 204);
	  COL_TRI(17, 204, 202);
	  COL_TRI(17, 202, 203);
	  COL_TRI(16, 204, 18);
	  COL_TRI(15, 16, 18);
	  COL_TRI(15, 18, 22);
	  COL_TRI(18, 21, 22);
	  COL_TRI(19, 12, 10);
	  COL_TRI(23, 38, 24);
	  COL_TRI(19, 34, 12);
	  COL_TRI(20, 34, 19);
	  COL_TRI(21, 37, 22);
	  COL_TRI(22, 37, 25);
	  COL_TRI(22, 25, 26);
	  COL_TRI(24, 205, 36);
	  COL_TRI(24, 38, 205);
	  COL_TRI(19, 206, 20);
	  COL_TRI(19, 48, 206);
	  COL_TRI(22, 203, 15);
	  COL_TRI(22, 17, 203);
	  COL_TRI(25, 41, 26);
	  COL_TRI(26, 41, 30);
	  COL_TRI(27, 51, 40);
	  COL_TRI(27, 40, 207);
	  COL_TRI(26, 30, 29);
	  COL_TRI(28, 207, 40);
	  COL_TRI(8, 210, 208);
	  COL_TRI(29, 28, 40);
	  COL_TRI(29, 42, 28);
	  COL_TRI(30, 42, 29);
	  COL_TRI(5, 208, 209);
	  COL_TRI(5, 209, 6);
	  COL_TRI(8, 208, 5);
	  COL_TRI(11, 211, 210);
	  COL_TRI(6, 31, 9);
	  COL_TRI(6, 209, 31);
	  COL_TRI(31, 7, 9);
	  COL_TRI(31, 43, 7);
	  COL_TRI(7, 43, 44);
	  COL_TRI(7, 44, 4);
	  COL_TRI(13, 213, 32);
	  COL_TRI(11, 210, 8);
	  COL_TRI(4, 44, 45);
	  COL_TRI(4, 45, 10);
	  COL_TRI(13, 14, 46);
	  COL_TRI(13, 46, 212);
	  COL_TRI(13, 212, 213);
	  COL_TRI(32, 213, 215);
	  COL_TRI(12, 214, 211);
	  COL_TRI(12, 211, 11);
	  COL_TRI(24, 46, 14);
	  COL_TRI(24, 47, 46);
	  COL_TRI(18, 204, 33);
	  COL_TRI(18, 33, 21);
	  COL_TRI(34, 214, 12);
	  COL_TRI(32, 215, 23);
	  COL_TRI(10, 45, 48);
	  COL_TRI(10, 48, 19);
	  COL_TRI(33, 37, 21);
	  COL_TRI(33, 216, 37);
	  COL_TRI(34, 217, 214);
	  COL_TRI(26, 17, 22);
	  COL_TRI(35, 216, 17);
	  COL_TRI(36, 47, 24);
	  COL_TRI(36, 49, 47);
	  COL_TRI(23, 218, 38);
	  COL_TRI(23, 215, 218);
	  COL_TRI(26, 35, 17);
	  COL_TRI(20, 217, 34);
	  COL_TRI(20, 206, 217);
	  COL_TRI(37, 219, 25);
	  COL_TRI(37, 216, 219);
	  COL_TRI(25, 219, 220);
	  COL_TRI(25, 220, 41);
	  COL_TRI(38, 39, 205);
	  COL_TRI(38, 218, 39);
	  COL_TRI(28, 27, 207);
	  COL_TRI(39, 36, 205);
	  COL_TRI(39, 49, 36);
	  COL_TRI(29, 50, 35);
	  COL_TRI(29, 35, 26);
	  COL_TRI(40, 51, 50);
	  COL_TRI(40, 50, 29);
	  COL_TRI(30, 223, 42);
	  COL_TRI(28, 221, 27);
	  COL_TRI(41, 220, 222);
	  COL_TRI(41, 222, 30);
	  COL_TRI(42, 223, 221);
	  COL_TRI(42, 221, 28);
	  COL_TRI(30, 222, 223);
	  COL_TRI(43, 208, 44);
	  COL_TRI(43, 209, 208);
	  COL_TRI(44, 208, 210);
	  COL_TRI(43, 31, 209);
	  COL_TRI(44, 210, 211);
	  COL_TRI(44, 211, 45);
	  COL_TRI(45, 211, 214);
	  COL_TRI(46, 213, 212);
	  COL_TRI(47, 213, 46);
	  COL_TRI(47, 215, 213);
	  COL_TRI(45, 217, 48);
	  COL_TRI(45, 214, 217);
	  COL_TRI(48, 217, 206);
	  COL_TRI(17, 33, 204);
	  COL_TRI(17, 216, 33);
	  COL_TRI(35, 219, 216);
	  COL_TRI(47, 218, 215);
	  COL_TRI(49, 218, 47);
	  COL_TRI(49, 39, 218);
	  COL_TRI(35, 220, 219);
	  COL_TRI(50, 222, 220);
	  COL_TRI(50, 220, 35);
	  COL_TRI(51, 27, 221);
	  COL_TRI(51, 223, 50);
	  COL_TRI(51, 221, 223);
	  COL_TRI(50, 223, 222);
	  COL_TRI(52, 224, 53);
	  COL_TRI(52, 225, 224);
	  COL_TRI(52, 56, 226);
	  COL_TRI(52, 53, 56);
	  COL_TRI(55, 57, 56);
	  COL_TRI(53, 224, 55);
	  COL_TRI(53, 55, 56);
	  COL_TRI(54, 55, 225);
	  COL_TRI(55, 224, 225);
	  COL_TRI(56, 57, 226);
	  COL_TRI(55, 227, 57);
	  COL_TRI(54, 227, 55);
	  COL_TRI(57, 228, 226);
	  COL_TRI(54, 59, 227);
	  COL_TRI(57, 58, 228);
	  COL_TRI(58, 61, 229);
	  COL_TRI(58, 229, 228);
	  COL_TRI(61, 233, 232);
	  COL_TRI(58, 230, 231);
	  COL_TRI(58, 231, 61);
	  COL_TRI(57, 230, 58);
	  COL_TRI(57, 227, 230);
	  COL_TRI(59, 60, 230);
	  COL_TRI(59, 230, 227);
	  COL_TRI(60, 231, 230);
	  COL_TRI(61, 232, 229);
	  COL_TRI(60, 233, 231);
	  COL_TRI(61, 231, 233);
	  COL_TRI(67, 68, 238);
	  COL_TRI(62, 64, 63);
	  COL_TRI(63, 66, 234);
	  COL_TRI(63, 234, 62);
	  COL_TRI(64, 66, 63);
	  COL_TRI(62, 234, 235);
	  COL_TRI(62, 65, 64);
	  COL_TRI(62, 235, 65);
	  COL_TRI(64, 236, 66);
	  COL_TRI(65, 236, 64);
	  COL_TRI(65, 235, 236);
	  COL_TRI(66, 236, 235);
	  COL_TRI(66, 235, 234);
	  COL_TRI(67, 237, 71);
	  COL_TRI(67, 71, 68);
	  COL_TRI(71, 241, 70);
	  COL_TRI(68, 239, 238);
	  COL_TRI(69, 72, 71);
	  COL_TRI(69, 71, 237);
	  COL_TRI(68, 70, 239);
	  COL_TRI(70, 240, 239);
	  COL_TRI(71, 70, 68);
	  COL_TRI(70, 242, 240);
	  COL_TRI(72, 241, 71);
	  COL_TRI(72, 73, 241);
	  COL_TRI(73, 243, 241);
	  COL_TRI(74, 244, 245);
	  COL_TRI(74, 245, 75);
	  COL_TRI(74, 238, 244);
	  COL_TRI(74, 67, 238);
	  COL_TRI(75, 249, 246);
	  COL_TRI(74, 237, 67);
	  COL_TRI(69, 237, 246);
	  COL_TRI(69, 247, 248);
	  COL_TRI(69, 249, 247);
	  COL_TRI(69, 246, 249);
	  COL_TRI(75, 246, 74);
	  COL_TRI(79, 81, 78);
	  COL_TRI(74, 246, 237);
	  COL_TRI(76, 78, 77);
	  COL_TRI(76, 77, 250);
	  COL_TRI(77, 251, 250);
	  COL_TRI(77, 252, 251);
	  COL_TRI(78, 252, 77);
	  COL_TRI(76, 250, 253);
	  COL_TRI(78, 83, 252);
	  COL_TRI(79, 256, 254);
	  COL_TRI(76, 82, 78);
	  COL_TRI(82, 257, 256);
	  COL_TRI(82, 256, 79);
	  COL_TRI(83, 251, 252);
	  COL_TRI(83, 258, 251);
	  COL_TRI(83, 259, 258);
	  COL_TRI(83, 257, 259);
	  COL_TRI(79, 254, 81);
	  COL_TRI(80, 83, 78);
	  COL_TRI(81, 80, 78);
	  COL_TRI(80, 255, 83);
	  COL_TRI(83, 254, 256);
	  COL_TRI(83, 255, 254);
	  COL_TRI(84, 87, 88);
	  COL_TRI(85, 84, 88);
	  COL_TRI(85, 86, 84);
	  COL_TRI(92, 90, 86);
	  COL_TRI(86, 260, 84);
	  COL_TRI(87, 261, 262);
	  COL_TRI(87, 262, 88);
	  COL_TRI(84, 261, 87);
	  COL_TRI(88, 89, 85);
	  COL_TRI(88, 262, 89);
	  COL_TRI(89, 262, 261);
	  COL_TRI(89, 261, 260);
	  COL_TRI(84, 260, 261);
	  COL_TRI(85, 89, 263);
	  COL_TRI(85, 263, 91);
	  COL_TRI(85, 91, 86);
	  COL_TRI(89, 260, 90);
	  COL_TRI(90, 263, 89);
	  COL_TRI(86, 90, 260);
	  COL_TRI(91, 92, 86);
	  COL_TRI(97, 267, 266);
	  COL_TRI(91, 93, 92);
	  COL_TRI(91, 264, 93);
	  COL_TRI(91, 263, 264);
	  COL_TRI(90, 264, 263);
	  COL_TRI(90, 265, 264);
	  COL_TRI(92, 265, 90);
	  COL_TRI(93, 264, 265);
	  COL_TRI(93, 265, 92);
	  COL_TRI(94, 266, 96);
	  COL_TRI(94, 97, 266);
	  COL_TRI(95, 97, 94);
	  COL_TRI(96, 95, 94);
	  COL_TRI(96, 268, 95);
	  COL_TRI(95, 269, 97);
	  COL_TRI(97, 269, 267);
	  COL_TRI(98, 270, 99);
	  COL_TRI(98, 102, 270);
	  COL_TRI(99, 100, 98);
	  COL_TRI(100, 102, 98);
	  COL_TRI(99, 270, 271);
	  COL_TRI(99, 101, 100);
	  COL_TRI(99, 271, 101);
	  COL_TRI(103, 275, 274);
	  COL_TRI(100, 272, 102);
	  COL_TRI(101, 272, 100);
	  COL_TRI(101, 271, 272);
	  COL_TRI(102, 272, 271);
	  COL_TRI(102, 271, 270);
	  COL_TRI(103, 273, 104);
	  COL_TRI(103, 104, 109);
	  COL_TRI(103, 274, 273);
	  COL_TRI(108, 276, 277);
	  COL_TRI(104, 105, 109);
	  COL_TRI(105, 276, 106);
	  COL_TRI(105, 277, 276);
	  COL_TRI(105, 106, 109);
	  COL_TRI(106, 108, 109);
	  COL_TRI(107, 274, 275);
	  COL_TRI(108, 107, 275);
	  COL_TRI(104, 107, 277);
	  COL_TRI(104, 277, 105);
	  COL_TRI(106, 276, 108);
	  COL_TRI(109, 275, 103);
	  COL_TRI(109, 108, 275);
	  COL_TRI(108, 277, 107);
	  COL_TRI(110, 115, 278);
	  COL_TRI(110, 278, 111);
	  COL_TRI(111, 112, 110);
	  COL_TRI(114, 282, 281);
	  COL_TRI(111, 279, 112);
	  COL_TRI(112, 113, 110);
	  COL_TRI(113, 112, 280);
	  COL_TRI(113, 115, 110);
	  COL_TRI(113, 281, 115);
	  COL_TRI(114, 113, 280);
	  COL_TRI(114, 281, 113);
	  COL_TRI(111, 278, 279);
	  COL_TRI(115, 279, 278);
	  COL_TRI(115, 281, 279);
	  COL_TRI(116, 279, 281);
	  COL_TRI(116, 281, 282);
	  COL_TRI(120, 285, 286);
	  COL_TRI(117, 118, 280);
	  COL_TRI(118, 282, 114);
	  COL_TRI(118, 283, 282);
	  COL_TRI(116, 283, 284);
	  COL_TRI(119, 285, 120);
	  COL_TRI(120, 122, 119);
	  COL_TRI(120, 121, 122);
	  COL_TRI(120, 286, 121);
	  COL_TRI(121, 287, 122);
	  COL_TRI(122, 287, 123);
	  COL_TRI(122, 123, 119);
	  COL_TRI(119, 123, 285);
	  COL_TRI(121, 286, 287);
	  COL_TRI(123, 286, 285);
	  COL_TRI(123, 287, 286);
	  COL_TRI(124, 127, 126);
	  COL_TRI(124, 126, 125);
	  COL_TRI(125, 288, 124);
	  COL_TRI(124, 289, 127);
	  COL_TRI(124, 288, 289);
	  COL_TRI(126, 128, 125);
	  COL_TRI(127, 128, 126);
	  COL_TRI(128, 129, 125);
	  COL_TRI(125, 129, 288);
	  COL_TRI(127, 289, 128);
	  COL_TRI(129, 128, 289);
	  COL_TRI(129, 289, 288);
	  COL_TRI(130, 290, 291);
	  COL_TRI(130, 291, 133);
	  COL_TRI(131, 290, 130);
	  COL_TRI(130, 132, 131);
	  COL_TRI(130, 133, 132);
	  COL_TRI(136, 135, 293);
	  COL_TRI(132, 134, 131);
	  COL_TRI(132, 292, 134);
	  COL_TRI(133, 292, 132);
	  COL_TRI(131, 134, 290);
	  COL_TRI(133, 291, 292);
	  COL_TRI(134, 291, 290);
	  COL_TRI(134, 292, 291);
	  COL_TRI(135, 138, 293);
	  COL_TRI(135, 294, 138);
	  COL_TRI(136, 294, 135);
	  COL_TRI(137, 138, 141);
	  COL_TRI(137, 293, 138);
	  COL_TRI(138, 294, 295);
	  COL_TRI(136, 295, 294);
	  COL_TRI(136, 293, 296);
	  COL_TRI(138, 295, 297);
	  COL_TRI(139, 293, 137);
	  COL_TRI(139, 296, 293);
	  COL_TRI(140, 137, 141);
	  COL_TRI(140, 142, 137);
	  COL_TRI(141, 138, 297);
	  COL_TRI(141, 297, 298);
	  COL_TRI(142, 299, 139);
	  COL_TRI(142, 139, 137);
	  COL_TRI(142, 143, 299);
	  COL_TRI(142, 140, 143);
	  COL_TRI(143, 141, 298);
	  COL_TRI(143, 140, 141);
	  COL_TRI(147, 146, 301);
	  COL_TRI(144, 154, 148);
	  COL_TRI(144, 148, 146);
	  COL_TRI(145, 144, 146);
	  COL_TRI(145, 300, 144);
	  COL_TRI(146, 148, 301);
	  COL_TRI(145, 146, 147);
	  COL_TRI(150, 159, 300);
	  COL_TRI(145, 147, 302);
	  COL_TRI(148, 153, 303);
	  COL_TRI(148, 154, 153);
	  COL_TRI(149, 150, 151);
	  COL_TRI(149, 159, 150);
	  COL_TRI(150, 300, 145);
	  COL_TRI(157, 149, 151);
	  COL_TRI(151, 150, 304);
	  COL_TRI(150, 145, 304);
	  COL_TRI(145, 302, 304);
	  COL_TRI(152, 151, 304);
	  COL_TRI(153, 154, 155);
	  COL_TRI(154, 144, 155);
	  COL_TRI(155, 144, 300);
	  COL_TRI(156, 155, 300);
	  COL_TRI(157, 152, 160);
	  COL_TRI(157, 305, 149);
	  COL_TRI(158, 159, 162);
	  COL_TRI(158, 156, 159);
	  COL_TRI(156, 300, 159);
	  COL_TRI(159, 149, 162);
	  COL_TRI(157, 151, 152);
	  COL_TRI(164, 167, 163);
	  COL_TRI(160, 305, 157);
	  COL_TRI(160, 161, 305);
	  COL_TRI(161, 162, 305);
	  COL_TRI(162, 149, 305);
	  COL_TRI(163, 306, 164);
	  COL_TRI(163, 165, 306);
	  COL_TRI(169, 170, 309);
	  COL_TRI(164, 306, 307);
	  COL_TRI(165, 307, 306);
	  COL_TRI(164, 166, 167);
	  COL_TRI(164, 307, 166);
	  COL_TRI(165, 308, 307);
	  COL_TRI(166, 170, 169);
	  COL_TRI(166, 307, 170);
	  COL_TRI(167, 166, 169);
	  COL_TRI(168, 167, 169);
	  COL_TRI(169, 309, 168);
	  COL_TRI(172, 175, 178);
	  COL_TRI(170, 308, 309);
	  COL_TRI(170, 307, 308);
	  COL_TRI(171, 173, 174);
	  COL_TRI(171, 310, 173);
	  COL_TRI(172, 171, 174);
	  COL_TRI(172, 311, 171);
	  COL_TRI(173, 312, 175);
	  COL_TRI(173, 310, 312);
	  COL_TRI(174, 175, 172);
	  COL_TRI(172, 178, 311);
	  COL_TRI(174, 173, 175);
	  COL_TRI(175, 177, 178);
	  COL_TRI(176, 178, 180);
	  COL_TRI(177, 180, 178);
	  COL_TRI(178, 176, 311);
	  COL_TRI(179, 176, 180);
	  COL_TRI(177, 182, 180);
	  COL_TRI(179, 180, 184);
	  COL_TRI(180, 183, 184);
	  COL_TRI(180, 182, 183);
	  COL_TRI(181, 179, 184);
	  COL_TRI(182, 177, 312);
	  COL_TRI(182, 312, 313);
	  COL_TRI(183, 182, 313);
	  COL_TRI(183, 313, 314);
	  COL_TRI(184, 183, 186);
	  COL_TRI(185, 184, 315);
	  COL_TRI(185, 181, 184);
	  COL_TRI(184, 186, 315);
	  COL_TRI(186, 183, 314);
	  COL_TRI(187, 188, 315);
	  COL_TRI(188, 185, 315);
	  COL_TRI(186, 314, 316);
	  COL_TRI(189, 199, 192);
	  COL_TRI(189, 190, 191);
	  COL_TRI(189, 191, 199);
	  COL_TRI(193, 317, 192);
	  COL_TRI(190, 189, 317);
	  COL_TRI(191, 190, 317);
	  COL_TRI(189, 192, 317);
	  COL_TRI(191, 317, 318);
	  COL_TRI(192, 199, 193);
	  COL_TRI(193, 318, 317);
	  COL_TRI(196, 198, 319);
	  COL_TRI(194, 195, 319);
	  COL_TRI(194, 200, 195);
	  COL_TRI(194, 319, 197);
	  COL_TRI(195, 200, 320);
	  COL_TRI(195, 320, 196);
	  COL_TRI(196, 319, 195);
	  COL_TRI(197, 319, 198);
	  COL_TRI(198, 320, 197);
	  COL_TRI(198, 196, 320);
	  COL_TRI(199, 194, 193);
	  COL_TRI(199, 200, 194);
	  COL_TRI(199, 191, 200);
	  COL_TRI(201, 323, 321);
	  COL_TRI(200, 191, 318);
	  COL_TRI(200, 318, 320);
	  COL_TRI(193, 194, 197);
	  COL_TRI(197, 318, 193);
	  COL_TRI(197, 320, 318);
	  COL_TRI(201, 321, 322);
	  COL_TRI_INIT(SURFACE_CAMERA_FREE_ROAM, 6);
	  COL_TRI(324, 325, 326);
	  COL_TRI(324, 327, 325);
	  COL_TRI(324, 326, 328);
	  COL_TRI(324, 329, 330);
	  COL_TRI(324, 331, 329);
	  COL_TRI(324, 330, 327);
	  COL_TRI_INIT(SURFACE_NO_CAM_COLLISION, 414);
	  COL_TRI(360, 361, 362);
	  COL_TRI(360, 362, 363);
	  COL_TRI(360, 364, 361);
	  COL_TRI(365, 364, 360);
	  COL_TRI(360, 363, 365);
	  COL_TRI(366, 361, 364);
	  COL_TRI(366, 367, 361);
	  COL_TRI(362, 361, 367);
	  COL_TRI(362, 367, 363);
	  COL_TRI(365, 366, 364);
	  COL_TRI(363, 366, 365);
	  COL_TRI(363, 367, 366);
	  COL_TRI(368, 369, 370);
	  COL_TRI(370, 371, 372);
	  COL_TRI(370, 369, 371);
	  COL_TRI(372, 368, 370);
	  COL_TRI(377, 378, 528);
	  COL_TRI(372, 371, 373);
	  COL_TRI(372, 373, 374);
	  COL_TRI(372, 374, 368);
	  COL_TRI(368, 375, 369);
	  COL_TRI(374, 375, 368);
	  COL_TRI(374, 373, 375);
	  COL_TRI(369, 375, 373);
	  COL_TRI(369, 373, 371);
	  COL_TRI(376, 527, 377);
	  COL_TRI(377, 528, 376);
	  COL_TRI(380, 530, 532);
	  COL_TRI(378, 529, 528);
	  COL_TRI(376, 528, 529);
	  COL_TRI(376, 382, 527);
	  COL_TRI(376, 529, 382);
	  COL_TRI(379, 381, 530);
	  COL_TRI(379, 530, 380);
	  COL_TRI(380, 531, 379);
	  COL_TRI(381, 532, 530);
	  COL_TRI(380, 532, 383);
	  COL_TRI(380, 383, 531);
	  COL_TRI(382, 533, 527);
	  COL_TRI(382, 529, 533);
	  COL_TRI(378, 533, 529);
	  COL_TRI(381, 534, 532);
	  COL_TRI(383, 532, 534);
	  COL_TRI(383, 534, 531);
	  COL_TRI(384, 325, 385);
	  COL_TRI(384, 326, 325);
	  COL_TRI(388, 391, 389);
	  COL_TRI(385, 325, 327);
	  COL_TRI(385, 327, 387);
	  COL_TRI(386, 326, 384);
	  COL_TRI(386, 328, 326);
	  COL_TRI(387, 330, 390);
	  COL_TRI(387, 327, 330);
	  COL_TRI(390, 330, 329);
	  COL_TRI(388, 387, 390);
	  COL_TRI(388, 385, 387);
	  COL_TRI(388, 384, 385);
	  COL_TRI(388, 386, 384);
	  COL_TRI(388, 389, 386);
	  COL_TRI(389, 328, 386);
	  COL_TRI(389, 324, 328);
	  COL_TRI(390, 329, 388);
	  COL_TRI(393, 536, 394);
	  COL_TRI(391, 331, 324);
	  COL_TRI(391, 324, 389);
	  COL_TRI(388, 331, 391);
	  COL_TRI(388, 329, 331);
	  COL_TRI(392, 393, 394);
	  COL_TRI(393, 535, 536);
	  COL_TRI(394, 536, 398);
	  COL_TRI(395, 394, 396);
	  COL_TRI(392, 394, 395);
	  COL_TRI(396, 394, 398);
	  COL_TRI(397, 536, 535);
	  COL_TRI(395, 396, 537);
	  COL_TRI(398, 537, 396);
	  COL_TRI(398, 401, 537);
	  COL_TRI(399, 537, 401);
	  COL_TRI(399, 395, 537);
	  COL_TRI(397, 398, 536);
	  COL_TRI(401, 398, 397);
	  COL_TRI(400, 392, 395);
	  COL_TRI(400, 399, 401);
	  COL_TRI(401, 397, 538);
	  COL_TRI(400, 401, 538);
	  COL_TRI(400, 395, 399);
	  COL_TRI(402, 539, 403);
	  COL_TRI(403, 540, 402);
	  COL_TRI(403, 405, 540);
	  COL_TRI(402, 540, 541);
	  COL_TRI(402, 404, 539);
	  COL_TRI(402, 541, 404);
	  COL_TRI(404, 542, 539);
	  COL_TRI(404, 541, 542);
	  COL_TRI(405, 541, 540);
	  COL_TRI(405, 542, 541);
	  COL_TRI(406, 409, 416);
	  COL_TRI(407, 408, 409);
	  COL_TRI(408, 416, 409);
	  COL_TRI(409, 543, 411);
	  COL_TRI(409, 406, 543);
	  COL_TRI(410, 543, 406);
	  COL_TRI(410, 545, 543);
	  COL_TRI(411, 543, 545);
	  COL_TRI(409, 411, 544);
	  COL_TRI(411, 545, 544);
	  COL_TRI(412, 410, 406);
	  COL_TRI(406, 546, 412);
	  COL_TRI(406, 416, 546);
	  COL_TRI(413, 547, 422);
	  COL_TRI(413, 422, 417);
	  COL_TRI(417, 552, 413);
	  COL_TRI(414, 415, 548);
	  COL_TRI(415, 546, 549);
	  COL_TRI(415, 414, 546);
	  COL_TRI(414, 412, 546);
	  COL_TRI(416, 418, 549);
	  COL_TRI(414, 550, 412);
	  COL_TRI(414, 548, 550);
	  COL_TRI(417, 551, 552);
	  COL_TRI(416, 420, 418);
	  COL_TRI(413, 420, 547);
	  COL_TRI(413, 418, 420);
	  COL_TRI(413, 419, 418);
	  COL_TRI(413, 552, 419);
	  COL_TRI(418, 419, 415);
	  COL_TRI(419, 548, 415);
	  COL_TRI(409, 544, 407);
	  COL_TRI(408, 421, 422);
	  COL_TRI(420, 416, 408);
	  COL_TRI(420, 408, 422);
	  COL_TRI(421, 417, 422);
	  COL_TRI(421, 551, 417);
	  COL_TRI(422, 547, 420);
	  COL_TRI(423, 425, 553);
	  COL_TRI(423, 554, 425);
	  COL_TRI(423, 424, 554);
	  COL_TRI(424, 425, 554);
	  COL_TRI(428, 557, 558);
	  COL_TRI(424, 555, 425);
	  COL_TRI(425, 556, 553);
	  COL_TRI(426, 556, 555);
	  COL_TRI(425, 555, 556);
	  COL_TRI(426, 555, 424);
	  COL_TRI(423, 426, 424);
	  COL_TRI(427, 430, 429);
	  COL_TRI(428, 427, 429);
	  COL_TRI(429, 430, 557);
	  COL_TRI(429, 557, 428);
	  COL_TRI(433, 432, 431);
	  COL_TRI(428, 558, 559);
	  COL_TRI(428, 559, 427);
	  COL_TRI(427, 560, 430);
	  COL_TRI(430, 560, 558);
	  COL_TRI(430, 558, 557);
	  COL_TRI(431, 561, 562);
	  COL_TRI(431, 563, 561);
	  COL_TRI(432, 436, 431);
	  COL_TRI(433, 431, 562);
	  COL_TRI(431, 436, 563);
	  COL_TRI(434, 562, 566);
	  COL_TRI(434, 433, 562);
	  COL_TRI(435, 563, 436);
	  COL_TRI(432, 444, 436);
	  COL_TRI(435, 436, 565);
	  COL_TRI(436, 564, 565);
	  COL_TRI(436, 444, 564);
	  COL_TRI(434, 439, 567);
	  COL_TRI(434, 566, 439);
	  COL_TRI(437, 433, 434);
	  COL_TRI(439, 435, 567);
	  COL_TRI(435, 565, 567);
	  COL_TRI(433, 564, 443);
	  COL_TRI(433, 565, 564);
	  COL_TRI(433, 443, 432);
	  COL_TRI(437, 565, 433);
	  COL_TRI(440, 567, 565);
	  COL_TRI(441, 442, 432);
	  COL_TRI(442, 444, 432);
	  COL_TRI(443, 441, 432);
	  COL_TRI(444, 445, 564);
	  COL_TRI(444, 568, 445);
	  COL_TRI(442, 568, 444);
	  COL_TRI(440, 565, 569);
	  COL_TRI(443, 570, 571);
	  COL_TRI(443, 564, 570);
	  COL_TRI(443, 572, 441);
	  COL_TRI(443, 571, 572);
	  COL_TRI(437, 434, 438);
	  COL_TRI(437, 569, 565);
	  COL_TRI(437, 440, 569);
	  COL_TRI(437, 438, 440);
	  COL_TRI(438, 434, 440);
	  COL_TRI(434, 567, 440);
	  COL_TRI(445, 570, 564);
	  COL_TRI(445, 446, 570);
	  COL_TRI(449, 451, 450);
	  COL_TRI(446, 571, 570);
	  COL_TRI(446, 572, 571);
	  COL_TRI(447, 573, 448);
	  COL_TRI(448, 449, 574);
	  COL_TRI(448, 573, 449);
	  COL_TRI(449, 573, 301);
	  COL_TRI(449, 301, 575);
	  COL_TRI(447, 576, 573);
	  COL_TRI(449, 575, 451);
	  COL_TRI(450, 452, 449);
	  COL_TRI(452, 574, 449);
	  COL_TRI(451, 462, 452);
	  COL_TRI(453, 452, 462);
	  COL_TRI(453, 574, 452);
	  COL_TRI(451, 452, 450);
	  COL_TRI(454, 576, 447);
	  COL_TRI(454, 577, 576);
	  COL_TRI(455, 456, 453);
	  COL_TRI(456, 574, 453);
	  COL_TRI(457, 462, 451);
	  COL_TRI(458, 578, 447);
	  COL_TRI(458, 447, 448);
	  COL_TRI(448, 579, 458);
	  COL_TRI(454, 447, 578);
	  COL_TRI(448, 456, 579);
	  COL_TRI(459, 456, 455);
	  COL_TRI(460, 455, 453);
	  COL_TRI(459, 580, 456);
	  COL_TRI(456, 580, 461);
	  COL_TRI(456, 461, 579);
	  COL_TRI(301, 576, 577);
	  COL_TRI(461, 459, 582);
	  COL_TRI(461, 580, 459);
	  COL_TRI(301, 573, 576);
	  COL_TRI(154, 581, 451);
	  COL_TRI(154, 451, 575);
	  COL_TRI(457, 451, 581);
	  COL_TRI(154, 583, 581);
	  COL_TRI(154, 153, 583);
	  COL_TRI(154, 575, 148);
	  COL_TRI(462, 460, 453);
	  COL_TRI(463, 468, 584);
	  COL_TRI(463, 584, 465);
	  COL_TRI(463, 464, 585);
	  COL_TRI(464, 586, 469);
	  COL_TRI(465, 472, 464);
	  COL_TRI(465, 464, 463);
	  COL_TRI(466, 464, 469);
	  COL_TRI(464, 466, 585);
	  COL_TRI(467, 468, 585);
	  COL_TRI(468, 463, 585);
	  COL_TRI(469, 587, 466);
	  COL_TRI(470, 584, 588);
	  COL_TRI(470, 465, 584);
	  COL_TRI(469, 589, 587);
	  COL_TRI(471, 479, 587);
	  COL_TRI(471, 587, 589);
	  COL_TRI(474, 470, 588);
	  COL_TRI(471, 589, 469);
	  COL_TRI(472, 590, 586);
	  COL_TRI(472, 586, 464);
	  COL_TRI(473, 590, 472);
	  COL_TRI(473, 472, 474);
	  COL_TRI(474, 588, 473);
	  COL_TRI(472, 465, 470);
	  COL_TRI(472, 470, 474);
	  COL_TRI(475, 592, 593);
	  COL_TRI(475, 471, 591);
	  COL_TRI(475, 591, 592);
	  COL_TRI(471, 469, 591);
	  COL_TRI(476, 478, 594);
	  COL_TRI(476, 593, 478);
	  COL_TRI(480, 597, 481);
	  COL_TRI(477, 595, 479);
	  COL_TRI(477, 479, 596);
	  COL_TRI(478, 477, 596);
	  COL_TRI(479, 585, 466);
	  COL_TRI(479, 467, 585);
	  COL_TRI(466, 587, 479);
	  COL_TRI(479, 595, 467);
	  COL_TRI(480, 476, 597);
	  COL_TRI(481, 597, 598);
	  COL_TRI(476, 594, 598);
	  COL_TRI(476, 598, 597);
	  COL_TRI(481, 482, 599);
	  COL_TRI(481, 599, 480);
	  COL_TRI(475, 480, 599);
	  COL_TRI(475, 599, 596);
	  COL_TRI(483, 485, 484);
	  COL_TRI(481, 598, 482);
	  COL_TRI(482, 598, 594);
	  COL_TRI(482, 594, 599);
	  COL_TRI(475, 479, 471);
	  COL_TRI(475, 596, 479);
	  COL_TRI(483, 487, 485);
	  COL_TRI(483, 484, 600);
	  COL_TRI(484, 485, 600);
	  COL_TRI(485, 487, 601);
	  COL_TRI(485, 601, 486);
	  COL_TRI(485, 486, 600);
	  COL_TRI(486, 601, 602);
	  COL_TRI(487, 602, 601);
	  COL_TRI(487, 483, 602);
	  COL_TRI(483, 600, 602);
	  COL_TRI(486, 602, 600);
	  COL_TRI(70, 603, 490);
	  COL_TRI(70, 241, 603);
	  COL_TRI(488, 603, 604);
	  COL_TRI(489, 604, 603);
	  COL_TRI(489, 603, 241);
	  COL_TRI(490, 603, 488);
	  COL_TRI(491, 494, 490);
	  COL_TRI(491, 490, 605);
	  COL_TRI(70, 490, 494);
	  COL_TRI(490, 488, 605);
	  COL_TRI(70, 493, 492);
	  COL_TRI(492, 491, 242);
	  COL_TRI(492, 242, 70);
	  COL_TRI(493, 606, 492);
	  COL_TRI(492, 606, 607);
	  COL_TRI(492, 607, 491);
	  COL_TRI(491, 605, 242);
	  COL_TRI(70, 494, 493);
	  COL_TRI(491, 607, 604);
	  COL_TRI(491, 604, 494);
	  COL_TRI(493, 489, 606);
	  COL_TRI(494, 489, 493);
	  COL_TRI(494, 604, 489);
	  COL_TRI(488, 604, 607);
	  COL_TRI(497, 610, 498);
	  COL_TRI(243, 606, 489);
	  COL_TRI(489, 241, 243);
	  COL_TRI(243, 607, 606);
	  COL_TRI(243, 488, 607);
	  COL_TRI(495, 608, 496);
	  COL_TRI(496, 608, 609);
	  COL_TRI(496, 609, 497);
	  COL_TRI(497, 609, 610);
	  COL_TRI(495, 611, 608);
	  COL_TRI(498, 611, 495);
	  COL_TRI(498, 610, 611);
	  COL_TRI(499, 612, 613);
	  COL_TRI(499, 613, 501);
	  COL_TRI(500, 614, 499);
	  COL_TRI(500, 499, 501);
	  COL_TRI(501, 613, 502);
	  COL_TRI(502, 613, 503);
	  COL_TRI(503, 613, 612);
	  COL_TRI(508, 507, 617);
	  COL_TRI(501, 502, 507);
	  COL_TRI(504, 501, 507);
	  COL_TRI(504, 500, 501);
	  COL_TRI(503, 612, 615);
	  COL_TRI(502, 503, 506);
	  COL_TRI(505, 502, 506);
	  COL_TRI(506, 503, 615);
	  COL_TRI(506, 615, 505);
	  COL_TRI(505, 617, 502);
	  COL_TRI(507, 502, 617);
	  COL_TRI(512, 618, 509);
	  COL_TRI(504, 513, 500);
	  COL_TRI(504, 618, 513);
	  COL_TRI(509, 618, 504);
	  COL_TRI(510, 504, 507);
	  COL_TRI(509, 504, 510);
	  COL_TRI(507, 508, 619);
	  COL_TRI(507, 619, 510);
	  COL_TRI(511, 509, 510);
	  COL_TRI(511, 510, 619);
	  COL_TRI(511, 512, 509);
	  COL_TRI(511, 620, 512);
	  COL_TRI(512, 513, 618);
	  COL_TRI(512, 620, 614);
	  COL_TRI(512, 614, 616);
	  COL_TRI(513, 512, 616);
	  COL_TRI(513, 616, 500);
	  COL_TRI(500, 616, 614);
	  COL_TRI(514, 515, 621);
	  COL_TRI(515, 514, 322);
	  COL_TRI(516, 514, 621);
	  COL_TRI(520, 524, 517);
	  COL_TRI(515, 523, 621);
	  COL_TRI(517, 523, 515);
	  COL_TRI(322, 517, 515);
	  COL_TRI(518, 519, 621);
	  COL_TRI(519, 516, 621);
	  COL_TRI(517, 524, 523);
	  COL_TRI(322, 321, 517);
	  COL_TRI(201, 322, 514);
	  COL_TRI(517, 323, 520);
	  COL_TRI(517, 321, 323);
	  COL_TRI(520, 623, 524);
	  COL_TRI(519, 521, 516);
	  COL_TRI(516, 522, 514);
	  COL_TRI(516, 521, 622);
	  COL_TRI(516, 622, 522);
	  COL_TRI(519, 624, 521);
	  COL_TRI(521, 624, 625);
	  COL_TRI(521, 625, 622);
	  COL_TRI(522, 520, 323);
	  COL_TRI(522, 323, 201);
	  COL_TRI(522, 623, 520);
	  COL_TRI(522, 201, 514);
	  COL_TRI(522, 525, 623);
	  COL_TRI(522, 626, 525);
	  COL_TRI(522, 526, 626);
	  COL_TRI(522, 622, 625);
	  COL_TRI(522, 625, 526);
	  COL_TRI(523, 524, 621);
	  COL_TRI(524, 623, 525);
	  COL_TRI(524, 525, 621);
	  COL_TRI(525, 518, 621);
	  COL_TRI(525, 626, 518);
	  COL_TRI(526, 624, 519);
	  COL_TRI(519, 518, 626);
	  COL_TRI(519, 626, 526);
	  COL_TRI(526, 625, 624);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(1);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start, /*pos*/ 1046, -4822, -266, /*yaw*/ 192); // unused, probably an early way to set initial position
	  COL_END();
	}

	function ttc_seg7_collision_clock_main_rotation() {
	  COL_INIT();
	  COL_VERTEX_INIT(0xE);
	  COL_VERTEX(86, 0, -81);
	  COL_VERTEX(-85, 41, -81);
	  COL_VERTEX(86, 41, -81);
	  COL_VERTEX(-85, 41, 1336);
	  COL_VERTEX(86, 41, 1336);
	  COL_VERTEX(-85, 0, -81);
	  COL_VERTEX(-85, 0, 1336);
	  COL_VERTEX(-180, 41, 1295);
	  COL_VERTEX(0, 41, 1577);
	  COL_VERTEX(86, 0, 1336);
	  COL_VERTEX(181, 41, 1295);
	  COL_VERTEX(0, 0, 1577);
	  COL_VERTEX(-180, 0, 1295);
	  COL_VERTEX(181, 0, 1295);
	  COL_TRI_INIT(SURFACE_DEFAULT, 24);
	  COL_TRI(0, 1, 2);
	  COL_TRI(2, 3, 4);
	  COL_TRI(2, 1, 3);
	  COL_TRI(0, 5, 1);
	  COL_TRI(6, 3, 1);
	  COL_TRI(3, 7, 8);
	  COL_TRI(8, 4, 3);
	  COL_TRI(0, 2, 4);
	  COL_TRI(0, 4, 9);
	  COL_TRI(8, 10, 4);
	  COL_TRI(3, 12, 7);
	  COL_TRI(3, 6, 12);
	  COL_TRI(9, 6, 5);
	  COL_TRI(11, 6, 9);
	  COL_TRI(11, 12, 6);
	  COL_TRI(7, 12, 11);
	  COL_TRI(7, 11, 8);
	  COL_TRI(11, 9, 13);
	  COL_TRI(8, 11, 13);
	  COL_TRI(8, 13, 10);
	  COL_TRI(10, 13, 9);
	  COL_TRI(10, 9, 4);
	  COL_TRI(9, 5, 0);
	  COL_TRI(6, 1, 5);
	  COL_TRI_STOP();
	  COL_END();
	}

	function ttc_seg7_collision_clock_platform() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(256, -153, -127);
	  COL_VERTEX(256, 0, -127);
	  COL_VERTEX(256, 0, 128);
	  COL_VERTEX(-255, 0, -127);
	  COL_VERTEX(-255, 0, 128);
	  COL_VERTEX(-255, -153, 128);
	  COL_VERTEX(256, -153, 128);
	  COL_VERTEX(-255, -153, -127);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(1, 4, 2);
	  COL_TRI(1, 3, 4);
	  COL_TRI(5, 4, 3);
	  COL_TRI(2, 4, 5);
	  COL_TRI(0, 2, 6);
	  COL_TRI(2, 5, 6);
	  COL_TRI(0, 7, 3);
	  COL_TRI(5, 3, 7);
	  COL_TRI(6, 7, 0);
	  COL_TRI(6, 5, 7);
	  COL_TRI_STOP();
	  COL_END();
	}

	function ttc_seg7_collision_070152B4() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x14);
	  COL_VERTEX(-229, -137, -547);
	  COL_VERTEX(230, -86, -547);
	  COL_VERTEX(230, -137, -547);
	  COL_VERTEX(-229, -86, -547);
	  COL_VERTEX(-229, 0, -511);
	  COL_VERTEX(-229, -137, -511);
	  COL_VERTEX(-229, -35, -547);
	  COL_VERTEX(-229, 0, 512);
	  COL_VERTEX(-229, -137, 512);
	  COL_VERTEX(-229, -137, 549);
	  COL_VERTEX(-229, -35, 549);
	  COL_VERTEX(230, -137, -511);
	  COL_VERTEX(230, 0, -511);
	  COL_VERTEX(230, 0, 512);
	  COL_VERTEX(230, -137, 549);
	  COL_VERTEX(230, -35, -547);
	  COL_VERTEX(230, -35, 549);
	  COL_VERTEX(230, -137, 512);
	  COL_VERTEX(-229, -86, 549);
	  COL_VERTEX(230, -86, 549);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 28);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(4, 0, 5);
	  COL_TRI(4, 6, 0);
	  COL_TRI(5, 7, 4);
	  COL_TRI(5, 8, 7);
	  COL_TRI(8, 9, 10);
	  COL_TRI(8, 10, 7);
	  COL_TRI(2, 14, 9);
	  COL_TRI(11, 15, 12);
	  COL_TRI(11, 2, 15);
	  COL_TRI(12, 17, 11);
	  COL_TRI(12, 13, 17);
	  COL_TRI(13, 14, 17);
	  COL_TRI(13, 16, 14);
	  COL_TRI(14, 18, 9);
	  COL_TRI(14, 19, 18);
	  COL_TRI(16, 10, 18);
	  COL_TRI(2, 9, 0);
	  COL_TRI(15, 4, 12);
	  COL_TRI(15, 6, 4);
	  COL_TRI(1, 3, 6);
	  COL_TRI(1, 6, 15);
	  COL_TRI(16, 18, 19);
	  COL_TRI(13, 10, 16);
	  COL_TRI(13, 7, 10);
	  COL_TRI(12, 7, 13);
	  COL_TRI(12, 4, 7);
	  COL_TRI_STOP();
	  COL_END();
	}

	function ttc_seg7_collision_clock_pendulum() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x24);
	  COL_VERTEX(-144, -771, 67);
	  COL_VERTEX(145, -771, 67);
	  COL_VERTEX(106, -704, 67);
	  COL_VERTEX(39, -665, 67);
	  COL_VERTEX(106, -704, -66);
	  COL_VERTEX(39, -665, -66);
	  COL_VERTEX(-105, -916, -66);
	  COL_VERTEX(145, -771, -66);
	  COL_VERTEX(-38, -665, -66);
	  COL_VERTEX(-38, -665, 67);
	  COL_VERTEX(145, -848, 67);
	  COL_VERTEX(145, -848, -66);
	  COL_VERTEX(106, -916, 67);
	  COL_VERTEX(106, -916, -66);
	  COL_VERTEX(39, -954, 67);
	  COL_VERTEX(-38, -954, 67);
	  COL_VERTEX(39, -954, -66);
	  COL_VERTEX(-105, -916, 67);
	  COL_VERTEX(-38, -954, -66);
	  COL_VERTEX(-144, -848, 67);
	  COL_VERTEX(-144, -771, -66);
	  COL_VERTEX(-105, -704, -66);
	  COL_VERTEX(-144, -848, -66);
	  COL_VERTEX(-105, -704, 67);
	  COL_VERTEX(20, -665, 20);
	  COL_VERTEX(-19, -665, 20);
	  COL_VERTEX(-19, -665, -19);
	  COL_VERTEX(20, -665, -19);
	  COL_VERTEX(-14, 0, 15);
	  COL_VERTEX(-19, 0, 20);
	  COL_VERTEX(-19, 0, -19);
	  COL_VERTEX(20, 0, 20);
	  COL_VERTEX(20, 0, -19);
	  COL_VERTEX(15, 0, 15);
	  COL_VERTEX(15, 0, -14);
	  COL_VERTEX(-14, 0, -14);
	  COL_TRI_INIT(SURFACE_NO_CAM_COLLISION, 54);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(2, 4, 5);
	  COL_TRI(2, 5, 3);
	  COL_TRI(1, 4, 2);
	  COL_TRI(6, 5, 4);
	  COL_TRI(6, 4, 7);
	  COL_TRI(1, 7, 4);
	  COL_TRI(6, 8, 5);
	  COL_TRI(8, 3, 5);
	  COL_TRI(0, 3, 9);
	  COL_TRI(8, 9, 3);
	  COL_TRI(0, 10, 1);
	  COL_TRI(7, 1, 10);
	  COL_TRI(6, 7, 11);
	  COL_TRI(7, 10, 11);
	  COL_TRI(0, 12, 10);
	  COL_TRI(12, 11, 10);
	  COL_TRI(22, 0, 20);
	  COL_TRI(6, 11, 13);
	  COL_TRI(12, 13, 11);
	  COL_TRI(0, 14, 12);
	  COL_TRI(13, 12, 14);
	  COL_TRI(6, 13, 16);
	  COL_TRI(13, 14, 16);
	  COL_TRI(0, 15, 14);
	  COL_TRI(16, 14, 15);
	  COL_TRI(6, 16, 18);
	  COL_TRI(16, 15, 18);
	  COL_TRI(0, 17, 15);
	  COL_TRI(18, 15, 17);
	  COL_TRI(18, 17, 6);
	  COL_TRI(0, 19, 17);
	  COL_TRI(6, 17, 19);
	  COL_TRI(6, 20, 21);
	  COL_TRI(6, 21, 8);
	  COL_TRI(6, 22, 20);
	  COL_TRI(6, 19, 22);
	  COL_TRI(22, 19, 0);
	  COL_TRI(0, 9, 23);
	  COL_TRI(20, 0, 23);
	  COL_TRI(20, 23, 21);
	  COL_TRI(21, 23, 9);
	  COL_TRI(21, 9, 8);
	  COL_TRI(24, 29, 25);
	  COL_TRI(25, 29, 30);
	  COL_TRI(25, 30, 26);
	  COL_TRI(24, 31, 29);
	  COL_TRI(26, 30, 32);
	  COL_TRI(28, 34, 35);
	  COL_TRI(26, 32, 27);
	  COL_TRI(27, 32, 31);
	  COL_TRI(27, 31, 24);
	  COL_TRI(28, 33, 34);
	  COL_TRI_STOP();
	  COL_END();
	}

	function ttc_seg7_collision_07015754() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(-101, 205, -101);
	  COL_VERTEX(-101, 0, 102);
	  COL_VERTEX(-101, 205, 102);
	  COL_VERTEX(-101, 0, -101);
	  COL_VERTEX(102, 205, 102);
	  COL_VERTEX(102, 0, 102);
	  COL_VERTEX(102, 0, -101);
	  COL_VERTEX(102, 205, -101);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(4, 1, 5);
	  COL_TRI(4, 2, 1);
	  COL_TRI(1, 3, 6);
	  COL_TRI(5, 1, 6);
	  COL_TRI(0, 6, 3);
	  COL_TRI(0, 7, 6);
	  COL_TRI(4, 6, 7);
	  COL_TRI(4, 5, 6);
	  COL_TRI(7, 2, 4);
	  COL_TRI(7, 0, 2);
	  COL_TRI_STOP();
	  COL_END();
	}

	function ttc_seg7_collision_070157D8() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(102, 205, 102);
	  COL_VERTEX(-101, 0, 102);
	  COL_VERTEX(102, 0, 102);
	  COL_VERTEX(102, 0, -101);
	  COL_VERTEX(-101, 205, -101);
	  COL_VERTEX(-101, 205, 102);
	  COL_VERTEX(-101, 0, -101);
	  COL_VERTEX(102, 205, -101);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(2, 1, 3);
	  COL_TRI(0, 2, 3);
	  COL_TRI(4, 1, 5);
	  COL_TRI(4, 6, 1);
	  COL_TRI(0, 5, 1);
	  COL_TRI(1, 6, 3);
	  COL_TRI(4, 7, 3);
	  COL_TRI(4, 3, 6);
	  COL_TRI(0, 3, 7);
	  COL_TRI(7, 5, 0);
	  COL_TRI(7, 4, 5);
	  COL_TRI_STOP();
	  COL_END();
	}

	function ttc_seg7_collision_sliding_surface() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(102, 102, -450);
	  COL_VERTEX(-101, 102, 10);
	  COL_VERTEX(102, 102, 10);
	  COL_VERTEX(-101, -101, 10);
	  COL_VERTEX(102, -101, 10);
	  COL_VERTEX(102, -101, -450);
	  COL_VERTEX(-101, -101, -450);
	  COL_VERTEX(-101, 102, -450);
	  COL_TRI_INIT(SURFACE_NO_CAM_COLLISION, 10);
	  COL_TRI(0, 1, 2);
	  COL_TRI(2, 1, 3);
	  COL_TRI(2, 3, 4);
	  COL_TRI(2, 4, 5);
	  COL_TRI(2, 5, 0);
	  COL_TRI(4, 6, 5);
	  COL_TRI(4, 3, 6);
	  COL_TRI(0, 7, 1);
	  COL_TRI(7, 6, 3);
	  COL_TRI(7, 3, 1);
	  COL_TRI_STOP();
	  COL_END();
	}

	function ttc_seg7_collision_07014F70() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x9);
	  COL_VERTEX(200, -199, 200);
	  COL_VERTEX(0, 0, 200);
	  COL_VERTEX(-199, -199, 200);
	  COL_VERTEX(200, 200, 200);
	  COL_VERTEX(-199, 200, 200);
	  COL_VERTEX(-199, 200, -199);
	  COL_VERTEX(-199, -199, -199);
	  COL_VERTEX(200, 200, -199);
	  COL_VERTEX(200, -199, -199);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 14);
	  COL_TRI(5, 4, 3);
	  COL_TRI(0, 1, 2);
	  COL_TRI(3, 1, 0);
	  COL_TRI(2, 1, 4);
	  COL_TRI(4, 5, 6);
	  COL_TRI(4, 6, 2);
	  COL_TRI(4, 1, 3);
	  COL_TRI(8, 2, 6);
	  COL_TRI(7, 3, 0);
	  COL_TRI(5, 3, 7);
	  COL_TRI(7, 0, 8);
	  COL_TRI(7, 8, 6);
	  COL_TRI(7, 6, 5);
	  COL_TRI(8, 0, 2);
	  COL_TRI_STOP();
	  COL_END();
	}

	function ttc_seg7_collision_07015584() {
	  COL_INIT();
	  COL_VERTEX_INIT(0xC);
	  COL_VERTEX(-153, 0, -265);
	  COL_VERTEX(-306, 0, 0);
	  COL_VERTEX(-153, 0, 266);
	  COL_VERTEX(154, 0, 266);
	  COL_VERTEX(307, 0, 0);
	  COL_VERTEX(154, 0, -265);
	  COL_VERTEX(307, -153, 0);
	  COL_VERTEX(154, -153, -265);
	  COL_VERTEX(154, -153, 266);
	  COL_VERTEX(-153, -153, 266);
	  COL_VERTEX(-306, -153, 0);
	  COL_VERTEX(-153, -153, -265);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 20);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(0, 3, 4);
	  COL_TRI(0, 4, 5);
	  COL_TRI(3, 6, 4);
	  COL_TRI(4, 6, 7);
	  COL_TRI(4, 7, 5);
	  COL_TRI(3, 8, 6);
	  COL_TRI(2, 8, 3);
	  COL_TRI(2, 9, 8);
	  COL_TRI(9, 6, 8);
	  COL_TRI(9, 10, 11);
	  COL_TRI(9, 11, 7);
	  COL_TRI(9, 7, 6);
	  COL_TRI(5, 7, 11);
	  COL_TRI(5, 11, 0);
	  COL_TRI(0, 10, 1);
	  COL_TRI(0, 11, 10);
	  COL_TRI(1, 10, 9);
	  COL_TRI(1, 9, 2);
	  COL_TRI_STOP();
	  COL_END();
	}

	function ttc_seg7_collision_07015008() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(-199, 116, -199);
	  COL_VERTEX(0, 1, -199);
	  COL_VERTEX(0, -229, -199);
	  COL_VERTEX(200, 116, -199);
	  COL_VERTEX(200, 116, 200);
	  COL_VERTEX(0, 1, 200);
	  COL_VERTEX(0, -229, 200);
	  COL_VERTEX(-199, 116, 200);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 12);
	  COL_TRI(6, 5, 7);
	  COL_TRI(0, 1, 2);
	  COL_TRI(2, 1, 3);
	  COL_TRI(3, 1, 0);
	  COL_TRI(4, 5, 6);
	  COL_TRI(6, 2, 3);
	  COL_TRI(4, 0, 7);
	  COL_TRI(7, 5, 4);
	  COL_TRI(4, 3, 0);
	  COL_TRI(7, 2, 6);
	  COL_TRI(7, 0, 2);
	  COL_TRI(6, 3, 4);
	  COL_TRI_STOP();
	  COL_END();
	}

	function ttc_seg7_collision_07015650() {
	  COL_INIT();
	  COL_VERTEX_INIT(0xF);
	  COL_VERTEX(300, 0, 300);
	  COL_VERTEX(300, -153, 300);
	  COL_VERTEX(75, -153, 0);
	  COL_VERTEX(-299, -153, 300);
	  COL_VERTEX(0, 0, 300);
	  COL_VERTEX(75, 0, 0);
	  COL_VERTEX(-299, 0, 300);
	  COL_VERTEX(-74, -153, 0);
	  COL_VERTEX(0, -153, 75);
	  COL_VERTEX(-74, 0, 0);
	  COL_VERTEX(0, 0, 75);
	  COL_VERTEX(0, -229, 0);
	  COL_VERTEX(0, 77, 0);
	  COL_VERTEX(0, 0, -74);
	  COL_VERTEX(0, -153, -74);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 26);
	  COL_TRI(7, 6, 9);
	  COL_TRI(0, 1, 2);
	  COL_TRI(3, 1, 4);
	  COL_TRI(1, 0, 4);
	  COL_TRI(0, 2, 5);
	  COL_TRI(3, 4, 6);
	  COL_TRI(7, 3, 6);
	  COL_TRI(1, 3, 8);
	  COL_TRI(3, 7, 8);
	  COL_TRI(9, 6, 10);
	  COL_TRI(6, 4, 10);
	  COL_TRI(13, 14, 7);
	  COL_TRI(8, 7, 11);
	  COL_TRI(11, 2, 8);
	  COL_TRI(7, 14, 11);
	  COL_TRI(2, 11, 14);
	  COL_TRI(12, 13, 9);
	  COL_TRI(13, 12, 5);
	  COL_TRI(12, 9, 10);
	  COL_TRI(10, 5, 12);
	  COL_TRI(2, 14, 13);
	  COL_TRI(2, 13, 5);
	  COL_TRI(13, 7, 9);
	  COL_TRI(0, 5, 10);
	  COL_TRI(4, 0, 10);
	  COL_TRI(1, 8, 2);
	  COL_TRI_STOP();
	  COL_END();
	}

	function ttc_seg7_collision_070153E0() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x14);
	  COL_VERTEX(-229, 0, -306);
	  COL_VERTEX(-229, -137, 308);
	  COL_VERTEX(-229, 0, 308);
	  COL_VERTEX(-229, -137, -306);
	  COL_VERTEX(230, 0, 308);
	  COL_VERTEX(230, -137, -306);
	  COL_VERTEX(230, 0, -306);
	  COL_VERTEX(230, -137, 308);
	  COL_VERTEX(230, -137, 344);
	  COL_VERTEX(230, -35, 344);
	  COL_VERTEX(230, -137, -342);
	  COL_VERTEX(230, -35, -342);
	  COL_VERTEX(-229, -137, -342);
	  COL_VERTEX(-229, -35, -342);
	  COL_VERTEX(-229, -86, 344);
	  COL_VERTEX(-229, -35, 344);
	  COL_VERTEX(-229, -137, 344);
	  COL_VERTEX(230, -86, 344);
	  COL_VERTEX(230, -86, -342);
	  COL_VERTEX(-229, -86, -342);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 28);
	  COL_TRI(5, 10, 11);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(4, 5, 6);
	  COL_TRI(4, 7, 5);
	  COL_TRI(4, 8, 7);
	  COL_TRI(4, 9, 8);
	  COL_TRI(0, 13, 12);
	  COL_TRI(5, 11, 6);
	  COL_TRI(8, 14, 16);
	  COL_TRI(8, 17, 14);
	  COL_TRI(1, 15, 2);
	  COL_TRI(1, 16, 15);
	  COL_TRI(0, 12, 3);
	  COL_TRI(13, 11, 18);
	  COL_TRI(12, 18, 10);
	  COL_TRI(12, 19, 18);
	  COL_TRI(10, 16, 12);
	  COL_TRI(10, 8, 16);
	  COL_TRI(0, 11, 13);
	  COL_TRI(0, 6, 11);
	  COL_TRI(2, 4, 6);
	  COL_TRI(13, 18, 19);
	  COL_TRI(14, 9, 15);
	  COL_TRI(14, 17, 9);
	  COL_TRI(15, 4, 2);
	  COL_TRI(15, 9, 4);
	  COL_TRI(2, 6, 0);
	  COL_TRI_STOP();
	  COL_END();
	}

	function ttc_seg7_collision_rotating_clock_platform2() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x14);
	  COL_VERTEX(154, 26, 26);
	  COL_VERTEX(-153, 51, 0);
	  COL_VERTEX(-153, 26, 26);
	  COL_VERTEX(154, 51, 0);
	  COL_VERTEX(-153, 26, -25);
	  COL_VERTEX(154, 26, -25);
	  COL_VERTEX(-153, -25, 26);
	  COL_VERTEX(-153, -50, 0);
	  COL_VERTEX(154, -50, 0);
	  COL_VERTEX(154, -25, 26);
	  COL_VERTEX(154, -25, -25);
	  COL_VERTEX(-153, -25, -25);
	  COL_VERTEX(-153, 26, 307);
	  COL_VERTEX(-153, -25, 307);
	  COL_VERTEX(154, -25, 307);
	  COL_VERTEX(154, 26, 307);
	  COL_VERTEX(-153, 26, -306);
	  COL_VERTEX(154, 26, -306);
	  COL_VERTEX(-153, -25, -306);
	  COL_VERTEX(154, -25, -306);
	  COL_TRI_INIT(SURFACE_DEFAULT, 26);
	  COL_TRI(9, 14, 13);
	  COL_TRI(11, 12, 2);
	  COL_TRI(11, 13, 12);
	  COL_TRI(12, 13, 14);
	  COL_TRI(12, 14, 15);
	  COL_TRI(12, 0, 2);
	  COL_TRI(12, 15, 0);
	  COL_TRI(9, 15, 14);
	  COL_TRI(9, 0, 15);
	  COL_TRI(9, 3, 0);
	  COL_TRI(11, 2, 1);
	  COL_TRI(5, 16, 4);
	  COL_TRI(5, 17, 16);
	  COL_TRI(9, 5, 3);
	  COL_TRI(9, 17, 5);
	  COL_TRI(11, 4, 16);
	  COL_TRI(11, 1, 4);
	  COL_TRI(9, 8, 10);
	  COL_TRI(17, 18, 16);
	  COL_TRI(17, 19, 18);
	  COL_TRI(9, 19, 17);
	  COL_TRI(11, 16, 18);
	  COL_TRI(9, 13, 6);
	  COL_TRI(11, 7, 6);
	  COL_TRI(18, 10, 11);
	  COL_TRI(18, 19, 10);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 8);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(3, 4, 1);
	  COL_TRI(3, 5, 4);
	  COL_TRI(6, 7, 8);
	  COL_TRI(6, 8, 9);
	  COL_TRI(10, 7, 11);
	  COL_TRI(10, 8, 7);
	  COL_TRI_STOP();
	  COL_END();
	}

	var ttc = [
	  ttc_seg7_collision_level,
	  ttc_seg7_collision_clock_main_rotation,
	  ttc_seg7_collision_clock_platform,
	  ttc_seg7_collision_070152B4,
	  ttc_seg7_collision_clock_pendulum,
	  ttc_seg7_collision_07015754,
	  ttc_seg7_collision_070157D8,
	  ttc_seg7_collision_sliding_surface,
	  ttc_seg7_collision_07014F70,
	  ttc_seg7_collision_07015584,
	  ttc_seg7_collision_07015008,
	  ttc_seg7_collision_07015650,
	  ttc_seg7_collision_070153E0,
	  ttc_seg7_collision_rotating_clock_platform2
	];

	function ttm_seg7_area_1_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x36F);
	  COL_VERTEX(-1471, -665, -3480);
	  COL_VERTEX(-1471, -716, -3480);
	  COL_VERTEX(-1936, -716, -3551);
	  COL_VERTEX(-2472, -2866, 4321);
	  COL_VERTEX(-3283, -2969, 3696);
	  COL_VERTEX(-3283, -2866, 3696);
	  COL_VERTEX(-2472, -2969, 4321);
	  COL_VERTEX(238, 2406, 232);
	  COL_VERTEX(1024, 2406, 1280);
	  COL_VERTEX(256, 2304, 256);
	  COL_VERTEX(1024, 2304, 1280);
	  COL_VERTEX(1397, 2416, 924);
	  COL_VERTEX(1397, 2314, 924);
	  COL_VERTEX(2048, 2304, 512);
	  COL_VERTEX(2048, 2406, 512);
	  COL_VERTEX(1479, 1593, 1564);
	  COL_VERTEX(1397, 2221, 924);
	  COL_VERTEX(5018, -4095, 4915);
	  COL_VERTEX(4915, -4095, 4915);
	  COL_VERTEX(4915, -4095, 5069);
	  COL_VERTEX(5018, -4095, 5069);
	  COL_VERTEX(7373, -3583, 1229);
	  COL_VERTEX(7270, -3583, 1229);
	  COL_VERTEX(7270, -3583, 1382);
	  COL_VERTEX(7373, -3583, 1382);
	  COL_VERTEX(-3299, -2950, -3886);
	  COL_VERTEX(-3196, -2950, -3886);
	  COL_VERTEX(-3299, -2950, -3732);
	  COL_VERTEX(-3196, -2950, -3732);
	  COL_VERTEX(4155, -6143, -2771);
	  COL_VERTEX(4140, -6143, -2857);
	  COL_VERTEX(4224, -6143, -2826);
	  COL_VERTEX(3306, -6143, -3014);
	  COL_VERTEX(3291, -6143, -3100);
	  COL_VERTEX(3375, -6143, -3069);
	  COL_VERTEX(1829, -6143, -3555);
	  COL_VERTEX(1814, -6143, -3641);
	  COL_VERTEX(1899, -6143, -3610);
	  COL_VERTEX(3233, -6143, -4000);
	  COL_VERTEX(3218, -6143, -4086);
	  COL_VERTEX(3303, -6143, -4055);
	  COL_VERTEX(1427, -2985, -4203);
	  COL_VERTEX(1412, -6143, -4289);
	  COL_VERTEX(1412, -2985, -4289);
	  COL_VERTEX(1496, -6143, -4258);
	  COL_VERTEX(1496, -2985, -4258);
	  COL_VERTEX(1427, -6143, -4203);
	  COL_VERTEX(3905, -6143, -3560);
	  COL_VERTEX(3920, -6143, -3474);
	  COL_VERTEX(3990, -6143, -3529);
	  COL_VERTEX(2523, -6143, -3407);
	  COL_VERTEX(2538, -6143, -3321);
	  COL_VERTEX(2607, -6143, -3376);
	  COL_VERTEX(563, -6143, -4119);
	  COL_VERTEX(548, -6143, -4205);
	  COL_VERTEX(633, -6143, -4174);
	  COL_VERTEX(2329, -6222, -4444);
	  COL_VERTEX(2344, -6222, -4358);
	  COL_VERTEX(2413, -6222, -4413);
	  COL_VERTEX(2304, -6263, -3809);
	  COL_VERTEX(2289, -6263, -3895);
	  COL_VERTEX(2373, -3054, -3864);
	  COL_VERTEX(2373, -6263, -3864);
	  COL_VERTEX(2048, -1548, 4096);
	  COL_VERTEX(3779, -1548, 4960);
	  COL_VERTEX(3779, -1855, 4960);
	  COL_VERTEX(3645, -2162, 5112);
	  COL_VERTEX(3703, -1957, 4892);
	  COL_VERTEX(2667, -1957, 3974);
	  COL_VERTEX(2048, -2162, 4096);
	  COL_VERTEX(2667, -1548, 3975);
	  COL_VERTEX(2803, -1548, 3821);
	  COL_VERTEX(3915, -2162, 4807);
	  COL_VERTEX(2434, -2162, 3497);
	  COL_VERTEX(4403, -2162, 2558);
	  COL_VERTEX(4096, -2162, 2287);
	  COL_VERTEX(5169, -1957, 3238);
	  COL_VERTEX(5245, -2162, 3306);
	  COL_VERTEX(5109, -2162, 3459);
	  COL_VERTEX(4580, -1548, 1894);
	  COL_VERTEX(4580, -2162, 1894);
	  COL_VERTEX(4096, -1548, 1465);
	  COL_VERTEX(4403, -1548, 2558);
	  COL_VERTEX(4096, -1548, 2287);
	  COL_VERTEX(3960, -2162, 2440);
	  COL_VERTEX(46, -2047, 3765);
	  COL_VERTEX(80, -2047, 3563);
	  COL_VERTEX(2992, 1230, 1579);
	  COL_VERTEX(3328, 1536, 1229);
	  COL_VERTEX(3072, 1024, 1024);
	  COL_VERTEX(2969, 1435, 1532);
	  COL_VERTEX(2560, 1536, 1024);
	  COL_VERTEX(3072, 1536, 1024);
	  COL_VERTEX(3072, 313, 1024);
	  COL_VERTEX(2970, 563, 717);
	  COL_VERTEX(2970, 973, 717);
	  COL_VERTEX(3635, 1536, 717);
	  COL_VERTEX(3072, 1536, 512);
	  COL_VERTEX(3036, 1436, 1670);
	  COL_VERTEX(3371, 1128, 1615);
	  COL_VERTEX(1660, 1584, 2044);
	  COL_VERTEX(1817, 1490, 2475);
	  COL_VERTEX(1840, 1490, 2271);
	  COL_VERTEX(1828, 1286, 2374);
	  COL_VERTEX(1230, 1584, 2202);
	  COL_VERTEX(1433, 1337, 2225);
	  COL_VERTEX(1072, 1584, 1774);
	  COL_VERTEX(1479, 1337, 1820);
	  COL_VERTEX(1410, 1584, 2428);
	  COL_VERTEX(1479, 620, 1820);
	  COL_VERTEX(1072, 560, 1774);
	  COL_VERTEX(3174, 1536, -818);
	  COL_VERTEX(3174, 1536, -511);
	  COL_VERTEX(3287, 1280, -605);
	  COL_VERTEX(1382, 1894, -1023);
	  COL_VERTEX(3174, 1536, -1535);
	  COL_VERTEX(2377, 1024, -2009);
	  COL_VERTEX(2560, 313, 1024);
	  COL_VERTEX(1852, 1510, 1209);
	  COL_VERTEX(330, 1219, -1533);
	  COL_VERTEX(2377, 1536, -2009);
	  COL_VERTEX(342, 1115, -1518);
	  COL_VERTEX(-285, 1280, -2317);
	  COL_VERTEX(3226, 1280, -1);
	  COL_VERTEX(2970, 973, 256);
	  COL_VERTEX(2970, 563, 256);
	  COL_VERTEX(2970, 413, 717);
	  COL_VERTEX(3287, 717, -605);
	  COL_VERTEX(3287, 922, -605);
	  COL_VERTEX(3237, 711, -818);
	  COL_VERTEX(3072, 1382, -818);
	  COL_VERTEX(2560, 1382, -818);
	  COL_VERTEX(2560, 1382, -1279);
	  COL_VERTEX(3072, 1382, -1279);
	  COL_VERTEX(3072, 922, -1279);
	  COL_VERTEX(3072, 768, -1279);
	  COL_VERTEX(3174, 768, -1535);
	  COL_VERTEX(3072, 768, -818);
	  COL_VERTEX(3072, 768, -972);
	  COL_VERTEX(1525, 1081, 969);
	  COL_VERTEX(1525, 1286, 969);
	  COL_VERTEX(1712, 1081, 1343);
	  COL_VERTEX(1891, 1081, 786);
	  COL_VERTEX(1479, -1842, 1564);
	  COL_VERTEX(1852, 1081, 1209);
	  COL_VERTEX(2074, 1081, 1151);
	  COL_VERTEX(1800, 1388, 832);
	  COL_VERTEX(2074, 1286, 1151);
	  COL_VERTEX(3439, 313, 1545);
	  COL_VERTEX(2560, -1500, 1024);
	  COL_VERTEX(2828, -1499, 1504);
	  COL_VERTEX(3247, 313, 2252);
	  COL_VERTEX(1852, -1896, 1209);
	  COL_VERTEX(2165, -1512, 1127);
	  COL_VERTEX(-1535, -818, 2048);
	  COL_VERTEX(1712, 1286, 1343);
	  COL_VERTEX(2377, -511, -2521);
	  COL_VERTEX(-285, 205, -2317);
	  COL_VERTEX(3439, -1330, 1545);
	  COL_VERTEX(-1535, 512, -1535);
	  COL_VERTEX(-1535, 1280, -1535);
	  COL_VERTEX(-1535, 0, 512);
	  COL_VERTEX(-1342, 1178, -1465);
	  COL_VERTEX(-1535, 1536, 512);
	  COL_VERTEX(-1023, 1536, 0);
	  COL_VERTEX(2560, 768, -818);
	  COL_VERTEX(2165, -1872, 1127);
	  COL_VERTEX(2418, -1898, 1689);
	  COL_VERTEX(3028, -1860, 1861);
	  COL_VERTEX(3300, -1870, 2346);
	  COL_VERTEX(3587, -1330, 2859);
	  COL_VERTEX(3587, -2405, 2859);
	  COL_VERTEX(4096, -1330, 2287);
	  COL_VERTEX(-1535, 0, 2048);
	  COL_VERTEX(1910, 466, 2055);
	  COL_VERTEX(-1535, -2047, 2048);
	  COL_VERTEX(-1674, -4682, 2883);
	  COL_VERTEX(435, -2668, 2747);
	  COL_VERTEX(-1992, -4607, 4788);
	  COL_VERTEX(-3071, -2047, 1024);
	  COL_VERTEX(-3621, -2252, 2123);
	  COL_VERTEX(4096, -1023, -2047);
	  COL_VERTEX(4096, -3374, 614);
	  COL_VERTEX(4096, -3111, -1473);
	  COL_VERTEX(3072, -2047, -4095);
	  COL_VERTEX(4096, -3169, -800);
	  COL_VERTEX(3874, -1023, -1825);
	  COL_VERTEX(2835, -1535, -3621);
	  COL_VERTEX(2835, -511, -3621);
	  COL_VERTEX(-1023, -1023, -4095);
	  COL_VERTEX(3072, -1535, -4095);
	  COL_VERTEX(-2312, 0, 771);
	  COL_VERTEX(-3071, -511, -2047);
	  COL_VERTEX(-1947, 512, -1672);
	  COL_VERTEX(-1947, -511, -1672);
	  COL_VERTEX(2748, -1548, 3010);
	  COL_VERTEX(2434, -1548, 3497);
	  COL_VERTEX(2748, -2400, 3010);
	  COL_VERTEX(2545, -1881, 2779);
	  COL_VERTEX(1606, -1945, 1382);
	  COL_VERTEX(1465, -1548, 2618);
	  COL_VERTEX(1150, -1891, 2562);
	  COL_VERTEX(3083, -6143, -5295);
	  COL_VERTEX(3179, -6143, -5260);
	  COL_VERTEX(3083, -3993, -5295);
	  COL_VERTEX(-1202, -3448, -4595);
	  COL_VERTEX(-1202, -6143, -6131);
	  COL_VERTEX(3072, -3993, -5119);
	  COL_VERTEX(3261, -2989, -5308);
	  COL_VERTEX(5590, -3071, -3645);
	  COL_VERTEX(3159, -2989, -4796);
	  COL_VERTEX(4771, -3071, -3235);
	  COL_VERTEX(4623, -3071, -2363);
	  COL_VERTEX(3072, -3276, -5119);
	  COL_VERTEX(-1168, -2559, -4240);
	  COL_VERTEX(-1714, -2598, -5014);
	  COL_VERTEX(4813, -3111, -1473);
	  COL_VERTEX(5035, -3993, -3156);
	  COL_VERTEX(3144, -6143, -5164);
	  COL_VERTEX(4782, -3993, -3482);
	  COL_VERTEX(3144, -3993, -5164);
	  COL_VERTEX(5035, -3276, -3156);
	  COL_VERTEX(5325, -3993, -3445);
	  COL_VERTEX(5035, -3993, -3301);
	  COL_VERTEX(5325, -6143, -3445);
	  COL_VERTEX(4813, -6143, -1473);
	  COL_VERTEX(4890, -3993, -3445);
	  COL_VERTEX(5035, -3993, -3590);
	  COL_VERTEX(-457, -3243, -4490);
	  COL_VERTEX(5035, -6143, -3735);
	  COL_VERTEX(3048, -3993, -5199);
	  COL_VERTEX(-457, -3448, -4799);
	  COL_VERTEX(-2, -2719, -4095);
	  COL_VERTEX(-2, -2719, -4505);
	  COL_VERTEX(4096, -6143, -1473);
	  COL_VERTEX(-457, -3448, -4083);
	  COL_VERTEX(-1202, -6143, -4083);
	  COL_VERTEX(-4095, -4095, 3072);
	  COL_VERTEX(-4095, -2047, 3072);
	  COL_VERTEX(-3849, -6143, -2207);
	  COL_VERTEX(-3849, -2559, -2207);
	  COL_VERTEX(-2472, -4255, 4321);
	  COL_VERTEX(-3283, -2354, 3696);
	  COL_VERTEX(-2472, -2354, 4321);
	  COL_VERTEX(-2047, -2047, 5120);
	  COL_VERTEX(2886, -1937, 2618);
	  COL_VERTEX(2733, -1893, 1872);
	  COL_VERTEX(1109, -2668, 3215);
	  COL_VERTEX(614, -3685, 3686);
	  COL_VERTEX(1811, -1891, 4028);
	  COL_VERTEX(1606, -1529, 1382);
	  COL_VERTEX(-613, -4664, 3486);
	  COL_VERTEX(395, -2661, 3896);
	  COL_VERTEX(289, -2047, 3390);
	  COL_VERTEX(554, -2668, 3221);
	  COL_VERTEX(4096, -2162, 1465);
	  COL_VERTEX(4096, -3521, 2287);
	  COL_VERTEX(4096, -3374, 1496);
	  COL_VERTEX(5325, -4607, 614);
	  COL_VERTEX(4915, -3169, -800);
	  COL_VERTEX(4915, -3374, 614);
	  COL_VERTEX(4813, -3374, 1701);
	  COL_VERTEX(3587, -3798, 2859);
	  COL_VERTEX(4813, -3374, 1496);
	  COL_VERTEX(4096, -4607, 1496);
	  COL_VERTEX(4813, -4607, 1496);
	  COL_VERTEX(5325, -6143, -800);
	  COL_VERTEX(5325, -4607, 3072);
	  COL_VERTEX(3506, -4082, 5556);
	  COL_VERTEX(4813, -3583, 3072);
	  COL_VERTEX(3144, -4082, 5194);
	  COL_VERTEX(819, -4300, 5120);
	  COL_VERTEX(819, -4505, 6656);
	  COL_VERTEX(-3071, -2559, -2047);
	  COL_VERTEX(-1202, -3243, -4083);
	  COL_VERTEX(-2047, -4505, 6043);
	  COL_VERTEX(819, -6143, 6656);
	  COL_VERTEX(-2, -2207, -4095);
	  COL_VERTEX(4096, -2559, -2047);
	  COL_VERTEX(-457, -3243, -4083);
	  COL_VERTEX(-1023, -2559, -4095);
	  COL_VERTEX(4096, -6143, -800);
	  COL_VERTEX(2048, -4351, 4096);
	  COL_VERTEX(587, -2047, 4063);
	  COL_VERTEX(817, -2668, 3493);
	  COL_VERTEX(736, -2047, 3410);
	  COL_VERTEX(-1947, -2559, -1672);
	  COL_VERTEX(3075, -4105, 2859);
	  COL_VERTEX(2515, -4105, 3371);
	  COL_VERTEX(-1838, -2559, -3056);
	  COL_VERTEX(-1784, -2252, -2546);
	  COL_VERTEX(-1469, -2559, -3074);
	  COL_VERTEX(-1679, -2047, -2722);
	  COL_VERTEX(-1205, -2047, -2917);
	  COL_VERTEX(-1205, -2559, -2917);
	  COL_VERTEX(-1101, -2559, -3093);
	  COL_VERTEX(-1784, -2559, -2546);
	  COL_VERTEX(-1520, -2252, -2389);
	  COL_VERTEX(-1784, -1740, -2546);
	  COL_VERTEX(-2065, -2559, -2475);
	  COL_VERTEX(-1782, -2559, -1949);
	  COL_VERTEX(-1415, -1740, -2565);
	  COL_VERTEX(-1520, -1740, -2389);
	  COL_VERTEX(-1467, -1945, -2477);
	  COL_VERTEX(-1731, -1945, -2634);
	  COL_VERTEX(-1100, -1535, -3093);
	  COL_VERTEX(-1415, -1433, -2565);
	  COL_VERTEX(-1993, -1535, -2195);
	  COL_VERTEX(-1301, -1433, -3123);
	  COL_VERTEX(-1770, -1228, -2947);
	  COL_VERTEX(-1927, -1023, -2683);
	  COL_VERTEX(-1503, -1228, -2418);
	  COL_VERTEX(-2433, -1023, -2759);
	  COL_VERTEX(-1364, -511, -2650);
	  COL_VERTEX(-1947, -613, -1672);
	  COL_VERTEX(-1873, -511, -2596);
	  COL_VERTEX(-2011, -1177, -3467);
	  COL_VERTEX(-971, -1433, -3310);
	  COL_VERTEX(-1048, -409, -3181);
	  COL_VERTEX(-1067, -204, -3549);
	  COL_VERTEX(-786, -204, -3621);
	  COL_VERTEX(-1310, -409, -2741);
	  COL_VERTEX(-1417, -204, -3162);
	  COL_VERTEX(-1346, -921, -2881);
	  COL_VERTEX(-1100, -613, -3093);
	  COL_VERTEX(-1329, -613, -3110);
	  COL_VERTEX(-1258, -613, -2829);
	  COL_VERTEX(-1258, -921, -2829);
	  COL_VERTEX(-1048, -716, -3181);
	  COL_VERTEX(-1005, -818, -3453);
	  COL_VERTEX(-891, -818, -3445);
	  COL_VERTEX(-838, -716, -3533);
	  COL_VERTEX(-1100, -1228, -3093);
	  COL_VERTEX(-1635, -921, -2696);
	  COL_VERTEX(-1310, -1023, -2741);
	  COL_VERTEX(-1415, -101, -2565);
	  COL_VERTEX(-1572, 0, -2301);
	  COL_VERTEX(-1310, 0, -2741);
	  COL_VERTEX(-1696, 0, -2494);
	  COL_VERTEX(-1748, 0, -2406);
	  COL_VERTEX(-1467, 205, -2477);
	  COL_VERTEX(-1467, 0, -2477);
	  COL_VERTEX(-2294, -1945, -1788);
	  COL_VERTEX(-1730, -2047, -2037);
	  COL_VERTEX(-1730, -1535, -2037);
	  COL_VERTEX(-1153, -1689, -3005);
	  COL_VERTEX(-1048, -1842, -3181);
	  COL_VERTEX(-1312, -1842, -3338);
	  COL_VERTEX(-943, -1689, -3357);
	  COL_VERTEX(-786, -2252, -3621);
	  COL_VERTEX(-923, -2252, -3895);
	  COL_VERTEX(-1048, -2252, -3181);
	  COL_VERTEX(-923, -2559, -3896);
	  COL_VERTEX(-1457, -2559, -3371);
	  COL_VERTEX(-2428, -2354, 4096);
	  COL_VERTEX(-2590, -2559, 3971);
	  COL_VERTEX(-2590, -2354, 3971);
	  COL_VERTEX(-2484, -2559, 3665);
	  COL_VERTEX(-2303, -2354, 3934);
	  COL_VERTEX(-2409, -2559, 4240);
	  COL_VERTEX(-2484, -2354, 3665);
	  COL_VERTEX(-2465, -2354, 3809);
	  COL_VERTEX(-2734, -2354, 3990);
	  COL_VERTEX(-2971, -2354, 3291);
	  COL_VERTEX(3041, 768, -972);
	  COL_VERTEX(3041, 768, -1125);
	  COL_VERTEX(2418, -1516, 1689);
	  COL_VERTEX(4915, -7288, 4915);
	  COL_VERTEX(4915, -7288, 5069);
	  COL_VERTEX(5018, -7288, 5069);
	  COL_VERTEX(5018, -7288, 4915);
	  COL_VERTEX(1024, 2304, -767);
	  COL_VERTEX(7270, -6776, 1229);
	  COL_VERTEX(7270, -6776, 1382);
	  COL_VERTEX(7373, -6776, 1382);
	  COL_VERTEX(7373, -6776, 1229);
	  COL_VERTEX(-3299, -6143, -3732);
	  COL_VERTEX(-3299, -6143, -3886);
	  COL_VERTEX(-3196, -6143, -3732);
	  COL_VERTEX(-3196, -6143, -3886);
	  COL_VERTEX(4140, -2985, -2857);
	  COL_VERTEX(4224, -2985, -2826);
	  COL_VERTEX(4155, -2985, -2771);
	  COL_VERTEX(3291, -2934, -3100);
	  COL_VERTEX(3375, -2934, -3069);
	  COL_VERTEX(3306, -2934, -3014);
	  COL_VERTEX(1814, -2935, -3641);
	  COL_VERTEX(1899, -2935, -3610);
	  COL_VERTEX(1829, -2935, -3555);
	  COL_VERTEX(3218, -2985, -4086);
	  COL_VERTEX(3303, -2985, -4055);
	  COL_VERTEX(3233, -2985, -4000);
	  COL_VERTEX(3990, -2934, -3529);
	  COL_VERTEX(3905, -2934, -3560);
	  COL_VERTEX(3920, -2934, -3474);
	  COL_VERTEX(2523, -2933, -3407);
	  COL_VERTEX(2607, -2933, -3376);
	  COL_VERTEX(2538, -2933, -3321);
	  COL_VERTEX(548, -2934, -4205);
	  COL_VERTEX(633, -2934, -4174);
	  COL_VERTEX(563, -2934, -4119);
	  COL_VERTEX(2329, -3014, -4444);
	  COL_VERTEX(2413, -3014, -4413);
	  COL_VERTEX(2344, -3014, -4358);
	  COL_VERTEX(2289, -3054, -3895);
	  COL_VERTEX(2304, -3054, -3809);
	  COL_VERTEX(3645, -1548, 5112);
	  COL_VERTEX(2667, -1548, 3974);
	  COL_VERTEX(2801, -2162, 3823);
	  COL_VERTEX(2667, -1957, 3975);
	  COL_VERTEX(4096, -1957, 2287);
	  COL_VERTEX(5245, -1855, 3306);
	  COL_VERTEX(4096, -1957, 2286);
	  COL_VERTEX(4403, -1957, 2558);
	  COL_VERTEX(63, -2201, 3664);
	  COL_VERTEX(80, -2149, 3563);
	  COL_VERTEX(46, -2149, 3765);
	  COL_VERTEX(-1737, -2047, 3260);
	  COL_VERTEX(-1771, -2047, 3462);
	  COL_VERTEX(3371, 1435, 1615);
	  COL_VERTEX(2816, 1536, -767);
	  COL_VERTEX(3226, 614, -1);
	  COL_VERTEX(3174, 1485, -1535);
	  COL_VERTEX(3174, 1485, -818);
	  COL_VERTEX(1959, 1925, -541);
	  COL_VERTEX(1891, 1286, 786);
	  COL_VERTEX(-162, 1165, -2161);
	  COL_VERTEX(2377, 1024, -2521);
	  COL_VERTEX(3072, 922, -818);
	  COL_VERTEX(3584, 768, -1535);
	  COL_VERTEX(2560, 768, -1279);
	  COL_VERTEX(3041, 768, -818);
	  COL_VERTEX(1479, 620, 1564);
	  COL_VERTEX(1479, 6, 1564);
	  COL_VERTEX(1616, 1388, 923);
	  COL_VERTEX(3584, -1023, -1535);
	  COL_VERTEX(-1457, 1434, 434);
	  COL_VERTEX(-1023, 1434, 0);
	  COL_VERTEX(3494, -1887, 2692);
	  COL_VERTEX(1479, 620, 2128);
	  COL_VERTEX(1910, 620, 2055);
	  COL_VERTEX(-3071, 0, 1024);
	  COL_VERTEX(-2047, -4300, 5121);
	  COL_VERTEX(4096, -3374, 1701);
	  COL_VERTEX(4096, -4607, 614);
	  COL_VERTEX(4096, -3071, -2047);
	  COL_VERTEX(-786, -1023, -3621);
	  COL_VERTEX(-786, 205, -3621);
	  COL_VERTEX(-971, -1023, -3310);
	  COL_VERTEX(1910, -1529, 2055);
	  COL_VERTEX(1910, -1939, 2055);
	  COL_VERTEX(-1202, -3448, -4083);
	  COL_VERTEX(-457, -3448, -4492);
	  COL_VERTEX(3179, -3993, -5260);
	  COL_VERTEX(4746, -3993, -3445);
	  COL_VERTEX(5035, -3993, -3735);
	  COL_VERTEX(5180, -3993, -3445);
	  COL_VERTEX(4782, -6143, -3482);
	  COL_VERTEX(-3216, -2559, -2192);
	  COL_VERTEX(-2047, -6143, 6043);
	  COL_VERTEX(-4095, -6143, 3072);
	  COL_VERTEX(-2971, -2969, 3291);
	  COL_VERTEX(-2160, -2354, 3915);
	  COL_VERTEX(-2160, -2969, 3915);
	  COL_VERTEX(1209, -1891, 3512);
	  COL_VERTEX(1402, -1891, 3772);
	  COL_VERTEX(375, -2998, 3594);
	  COL_VERTEX(121, -2047, 4400);
	  COL_VERTEX(5325, -6143, 3072);
	  COL_VERTEX(4813, -4607, 3072);
	  COL_VERTEX(3587, -3798, 3371);
	  COL_VERTEX(2045, -4082, 4479);
	  COL_VERTEX(3506, -6138, 5556);
	  COL_VERTEX(4096, -4607, 3072);
	  COL_VERTEX(-1713, -2252, -2266);
	  COL_VERTEX(0, -4607, 4915);
	  COL_VERTEX(3075, -2402, 2859);
	  COL_VERTEX(3587, -4105, 2859);
	  COL_VERTEX(2748, -4105, 3010);
	  COL_VERTEX(-1469, -2047, -3074);
	  COL_VERTEX(-1415, -2047, -2565);
	  COL_VERTEX(-1625, -2252, -2213);
	  COL_VERTEX(-1591, -1740, -2670);
	  COL_VERTEX(-1301, -1228, -3123);
	  COL_VERTEX(-1927, -1228, -2683);
	  COL_VERTEX(-1364, -613, -2650);
	  COL_VERTEX(-1873, -613, -2596);
	  COL_VERTEX(-2239, -613, -1770);
	  COL_VERTEX(-2239, -511, -1770);
	  COL_VERTEX(-2919, -1023, -1996);
	  COL_VERTEX(-1503, -1023, -2418);
	  COL_VERTEX(-786, -2559, -3621);
	  COL_VERTEX(-786, -1689, -3621);
	  COL_VERTEX(-1205, -204, -2917);
	  COL_VERTEX(-1346, -613, -2881);
	  COL_VERTEX(-1171, -716, -3374);
	  COL_VERTEX(-979, -716, -3497);
	  COL_VERTEX(-1434, -921, -2934);
	  COL_VERTEX(-1415, -921, -2565);
	  COL_VERTEX(-2012, 0, -2563);
	  COL_VERTEX(-1926, 0, -3108);
	  COL_VERTEX(-1696, 205, -2494);
	  COL_VERTEX(-1748, 205, -2406);
	  COL_VERTEX(-1572, 205, -2301);
	  COL_VERTEX(-1993, -1945, -2195);
	  COL_VERTEX(-1947, -2252, -1672);
	  COL_VERTEX(-1207, -1689, -3514);
	  COL_VERTEX(-1417, -1689, -3162);
	  COL_VERTEX(-1191, -2252, -3333);
	  COL_VERTEX(-2734, -2559, 3990);
	  COL_VERTEX(-2465, -2559, 3809);
	  COL_VERTEX(-2428, -2559, 4096);
	  COL_VERTEX(-2303, -2559, 3934);
	  COL_VERTEX(-2160, -2559, 3915);
	  COL_VERTEX(-2409, -2354, 4240);
	  COL_VERTEX(3072, 768, -1125);
	  COL_VERTEX(3041, 768, -1279);
	  COL_VERTEX(4966, -4095, 5069);
	  COL_VERTEX(4604, -4216, 5575);
	  COL_VERTEX(4363, -4216, 5172);
	  COL_VERTEX(4882, -4216, 4475);
	  COL_VERTEX(5338, -4216, 4590);
	  COL_VERTEX(4478, -4216, 4716);
	  COL_VERTEX(5579, -4216, 4993);
	  COL_VERTEX(5464, -4216, 5449);
	  COL_VERTEX(5060, -4216, 5690);
	  COL_VERTEX(5380, -3848, 5036);
	  COL_VERTEX(5464, -3967, 5449);
	  COL_VERTEX(5579, -3972, 4993);
	  COL_VERTEX(5013, -3848, 5529);
	  COL_VERTEX(4887, -3848, 4670);
	  COL_VERTEX(5338, -3970, 4589);
	  COL_VERTEX(5061, -3967, 5690);
	  COL_VERTEX(4605, -3965, 5575);
	  COL_VERTEX(4520, -3848, 5163);
	  COL_VERTEX(4479, -3970, 4716);
	  COL_VERTEX(4363, -3965, 5172);
	  COL_VERTEX(4882, -3970, 4474);
	  COL_VERTEX(7322, -3583, 1382);
	  COL_VERTEX(7237, -3704, 788);
	  COL_VERTEX(7368, -3336, 1843);
	  COL_VERTEX(7735, -3336, 1350);
	  COL_VERTEX(7242, -3336, 983);
	  COL_VERTEX(7935, -3460, 1307);
	  COL_VERTEX(7819, -3704, 1763);
	  COL_VERTEX(7693, -3704, 903);
	  COL_VERTEX(6875, -3336, 1476);
	  COL_VERTEX(7415, -3704, 2004);
	  COL_VERTEX(6959, -3704, 1889);
	  COL_VERTEX(6718, -3453, 1485);
	  COL_VERTEX(6833, -3704, 1029);
	  COL_VERTEX(7237, -3458, 788);
	  COL_VERTEX(-3247, -2950, -3732);
	  COL_VERTEX(-3332, -3071, -4326);
	  COL_VERTEX(-2834, -2703, -3764);
	  COL_VERTEX(-3201, -2703, -3272);
	  COL_VERTEX(-3327, -2703, -4131);
	  COL_VERTEX(-2634, -2827, -3808);
	  COL_VERTEX(-2750, -3071, -3352);
	  COL_VERTEX(-2876, -3071, -4211);
	  COL_VERTEX(-3693, -2703, -3638);
	  COL_VERTEX(-3154, -3071, -3110);
	  COL_VERTEX(-3610, -3071, -3225);
	  COL_VERTEX(-3851, -2820, -3629);
	  COL_VERTEX(-3736, -3071, -4085);
	  COL_VERTEX(-3331, -2825, -4326);
	  COL_VERTEX(4412, -2873, -2846);
	  COL_VERTEX(4198, -2873, -2558);
	  COL_VERTEX(4125, -2873, -3060);
	  COL_VERTEX(4529, -2945, -2871);
	  COL_VERTEX(4461, -3087, -2605);
	  COL_VERTEX(4388, -3087, -3106);
	  COL_VERTEX(3911, -2873, -2772);
	  COL_VERTEX(4226, -3087, -2464);
	  COL_VERTEX(3960, -3087, -2531);
	  COL_VERTEX(3819, -2941, -2767);
	  COL_VERTEX(3886, -3087, -3033);
	  COL_VERTEX(4122, -2944, -3173);
	  COL_VERTEX(3466, -2986, -3260);
	  COL_VERTEX(3280, -2886, -3307);
	  COL_VERTEX(3282, -2836, -3227);
	  COL_VERTEX(3483, -2836, -3077);
	  COL_VERTEX(3565, -2886, -3095);
	  COL_VERTEX(3115, -2986, -3208);
	  COL_VERTEX(3068, -2884, -3022);
	  COL_VERTEX(3132, -2836, -3026);
	  COL_VERTEX(3167, -2986, -2857);
	  COL_VERTEX(3353, -2986, -2810);
	  COL_VERTEX(3334, -2836, -2876);
	  COL_VERTEX(3518, -2986, -2909);
	  COL_VERTEX(1955, -2886, -3616);
	  COL_VERTEX(1820, -2886, -3717);
	  COL_VERTEX(1854, -2886, -3481);
	  COL_VERTEX(2010, -2920, -3628);
	  COL_VERTEX(1978, -2987, -3503);
	  COL_VERTEX(1943, -2987, -3739);
	  COL_VERTEX(1818, -2920, -3770);
	  COL_VERTEX(1708, -2987, -3704);
	  COL_VERTEX(1676, -2918, -3579);
	  COL_VERTEX(1719, -2886, -3581);
	  COL_VERTEX(1742, -2987, -3468);
	  COL_VERTEX(1867, -2987, -3437);
	  COL_VERTEX(3203, -2873, -4288);
	  COL_VERTEX(3491, -2873, -4074);
	  COL_VERTEX(3277, -2873, -3787);
	  COL_VERTEX(3607, -2945, -4100);
	  COL_VERTEX(3540, -3087, -3834);
	  COL_VERTEX(3466, -3087, -4335);
	  COL_VERTEX(2989, -2873, -4001);
	  COL_VERTEX(3304, -3087, -3693);
	  COL_VERTEX(3038, -3087, -3760);
	  COL_VERTEX(2897, -2941, -3995);
	  COL_VERTEX(2965, -3087, -4261);
	  COL_VERTEX(3200, -2944, -4402);
	  COL_VERTEX(1684, -2872, -4278);
	  COL_VERTEX(1397, -2872, -4492);
	  COL_VERTEX(1470, -2872, -3990);
	  COL_VERTEX(1801, -2944, -4303);
	  COL_VERTEX(1733, -3087, -4037);
	  COL_VERTEX(1734, -2942, -4037);
	  COL_VERTEX(1660, -3087, -4538);
	  COL_VERTEX(1183, -2872, -4204);
	  COL_VERTEX(1498, -3087, -3896);
	  COL_VERTEX(1232, -3087, -3963);
	  COL_VERTEX(1091, -2941, -4199);
	  COL_VERTEX(1158, -3087, -4465);
	  COL_VERTEX(1394, -2944, -4605);
	  COL_VERTEX(4080, -2986, -3721);
	  COL_VERTEX(3894, -2886, -3768);
	  COL_VERTEX(4098, -2836, -3538);
	  COL_VERTEX(3896, -2836, -3688);
	  COL_VERTEX(4179, -2886, -3556);
	  COL_VERTEX(3729, -2986, -3669);
	  COL_VERTEX(3682, -2884, -3483);
	  COL_VERTEX(3747, -2836, -3487);
	  COL_VERTEX(3781, -2986, -3318);
	  COL_VERTEX(3967, -2986, -3271);
	  COL_VERTEX(3948, -2836, -3337);
	  COL_VERTEX(4132, -2986, -3370);
	  COL_VERTEX(2698, -2986, -3567);
	  COL_VERTEX(2512, -2885, -3614);
	  COL_VERTEX(2715, -2835, -3385);
	  COL_VERTEX(2514, -2835, -3534);
	  COL_VERTEX(2797, -2886, -3402);
	  COL_VERTEX(2347, -2986, -3516);
	  COL_VERTEX(2300, -2883, -3329);
	  COL_VERTEX(2364, -2835, -3333);
	  COL_VERTEX(2399, -2986, -3164);
	  COL_VERTEX(2585, -2986, -3118);
	  COL_VERTEX(2566, -2835, -3183);
	  COL_VERTEX(2750, -2986, -3216);
	  COL_VERTEX(723, -2986, -4365);
	  COL_VERTEX(537, -2886, -4412);
	  COL_VERTEX(741, -2836, -4182);
	  COL_VERTEX(539, -2836, -4332);
	  COL_VERTEX(822, -2887, -4200);
	  COL_VERTEX(372, -2986, -4313);
	  COL_VERTEX(325, -2884, -4127);
	  COL_VERTEX(390, -2836, -4131);
	  COL_VERTEX(424, -2986, -3962);
	  COL_VERTEX(610, -2986, -3915);
	  COL_VERTEX(591, -2836, -3981);
	  COL_VERTEX(775, -2986, -4014);
	  COL_VERTEX(2469, -2965, -4419);
	  COL_VERTEX(2334, -2965, -4520);
	  COL_VERTEX(2369, -2965, -4284);
	  COL_VERTEX(2524, -2999, -4431);
	  COL_VERTEX(2492, -3066, -4306);
	  COL_VERTEX(2458, -3066, -4542);
	  COL_VERTEX(2333, -2999, -4573);
	  COL_VERTEX(2222, -3066, -4507);
	  COL_VERTEX(2190, -2997, -4382);
	  COL_VERTEX(2234, -2965, -4385);
	  COL_VERTEX(2257, -3066, -4271);
	  COL_VERTEX(2382, -3066, -4240);
	  COL_VERTEX(2329, -3006, -3736);
	  COL_VERTEX(2429, -3006, -3871);
	  COL_VERTEX(2294, -3006, -3971);
	  COL_VERTEX(2484, -3040, -3883);
	  COL_VERTEX(2452, -3107, -3757);
	  COL_VERTEX(2418, -3107, -3993);
	  COL_VERTEX(2293, -3039, -4025);
	  COL_VERTEX(2182, -3107, -3959);
	  COL_VERTEX(2150, -3038, -3834);
	  COL_VERTEX(2193, -3006, -3836);
	  COL_VERTEX(2216, -3107, -3723);
	  COL_VERTEX(2342, -3107, -3691);
	  COL_VERTEX(3441, 711, -818);
	  COL_VERTEX(2401, -649, -2639);
	  COL_VERTEX(2477, -681, -3090);
	  COL_VERTEX(3343, -1048, -2126);
	  COL_VERTEX(-166, -60, -2804);
	  COL_VERTEX(-574, -10, -3212);
	  COL_VERTEX(102, -4505, 6503);
	  COL_VERTEX(410, -4332, 5325);
	  COL_VERTEX(-266, -4394, 6104);
	  COL_VERTEX(458, -4380, 6090);
	  COL_VERTEX(-204, -4332, 6042);
	  COL_VERTEX(-204, -4332, 5325);
	  COL_VERTEX(589, -4607, 4520);
	  COL_VERTEX(6718, -3704, 1485);
	  COL_VERTEX(7934, -3704, 1307);
	  COL_VERTEX(7820, -3455, 1763);
	  COL_VERTEX(7693, -3458, 903);
	  COL_VERTEX(7416, -3455, 2004);
	  COL_VERTEX(6960, -3453, 1889);
	  COL_VERTEX(6834, -3458, 1029);
	  COL_VERTEX(-3851, -3071, -3629);
	  COL_VERTEX(-3154, -3071, -3111);
	  COL_VERTEX(-2635, -3071, -3808);
	  COL_VERTEX(-2876, -2825, -4211);
	  COL_VERTEX(-2749, -2822, -3352);
	  COL_VERTEX(-3153, -2822, -3111);
	  COL_VERTEX(-3609, -2820, -3226);
	  COL_VERTEX(-3735, -2825, -4085);
	  COL_VERTEX(4462, -2942, -2605);
	  COL_VERTEX(4388, -2944, -3106);
	  COL_VERTEX(4226, -2942, -2464);
	  COL_VERTEX(4528, -3087, -2871);
	  COL_VERTEX(3960, -2941, -2531);
	  COL_VERTEX(3886, -2944, -3033);
	  COL_VERTEX(3819, -3087, -2767);
	  COL_VERTEX(4122, -3087, -3173);
	  COL_VERTEX(3466, -2886, -3260);
	  COL_VERTEX(3564, -2986, -3095);
	  COL_VERTEX(3280, -2986, -3307);
	  COL_VERTEX(3518, -2884, -2909);
	  COL_VERTEX(3115, -2886, -3208);
	  COL_VERTEX(3068, -2986, -3022);
	  COL_VERTEX(3353, -2884, -2810);
	  COL_VERTEX(3167, -2884, -2857);
	  COL_VERTEX(1978, -2919, -3503);
	  COL_VERTEX(1944, -2920, -3739);
	  COL_VERTEX(1867, -2919, -3437);
	  COL_VERTEX(1708, -2920, -3704);
	  COL_VERTEX(1742, -2918, -3468);
	  COL_VERTEX(2010, -2987, -3628);
	  COL_VERTEX(1818, -2987, -3770);
	  COL_VERTEX(1676, -2987, -3579);
	  COL_VERTEX(3466, -2944, -4335);
	  COL_VERTEX(3540, -2942, -3834);
	  COL_VERTEX(3304, -2942, -3693);
	  COL_VERTEX(3607, -3087, -4100);
	  COL_VERTEX(3038, -2941, -3760);
	  COL_VERTEX(2965, -2944, -4261);
	  COL_VERTEX(2897, -3087, -3995);
	  COL_VERTEX(3200, -3087, -4402);
	  COL_VERTEX(1660, -2944, -4538);
	  COL_VERTEX(1498, -2942, -3896);
	  COL_VERTEX(1232, -2941, -3963);
	  COL_VERTEX(1159, -2944, -4465);
	  COL_VERTEX(1800, -3087, -4303);
	  COL_VERTEX(1091, -3087, -4199);
	  COL_VERTEX(1394, -3087, -4605);
	  COL_VERTEX(4081, -2886, -3721);
	  COL_VERTEX(4179, -2986, -3556);
	  COL_VERTEX(3894, -2986, -3768);
	  COL_VERTEX(4132, -2884, -3370);
	  COL_VERTEX(3730, -2886, -3669);
	  COL_VERTEX(3682, -2986, -3483);
	  COL_VERTEX(3781, -2884, -3318);
	  COL_VERTEX(3967, -2884, -3271);
	  COL_VERTEX(2698, -2885, -3567);
	  COL_VERTEX(2796, -2986, -3402);
	  COL_VERTEX(2512, -2986, -3614);
	  COL_VERTEX(2750, -2884, -3216);
	  COL_VERTEX(2347, -2885, -3516);
	  COL_VERTEX(2585, -2884, -3118);
	  COL_VERTEX(2300, -2986, -3329);
	  COL_VERTEX(2399, -2883, -3165);
	  COL_VERTEX(724, -2886, -4365);
	  COL_VERTEX(822, -2986, -4200);
	  COL_VERTEX(537, -2986, -4412);
	  COL_VERTEX(775, -2885, -4014);
	  COL_VERTEX(373, -2886, -4313);
	  COL_VERTEX(325, -2986, -4127);
	  COL_VERTEX(610, -2885, -3915);
	  COL_VERTEX(424, -2884, -3962);
	  COL_VERTEX(2493, -2998, -4306);
	  COL_VERTEX(2458, -2999, -4542);
	  COL_VERTEX(2382, -2998, -4240);
	  COL_VERTEX(2222, -2999, -4507);
	  COL_VERTEX(2257, -2997, -4271);
	  COL_VERTEX(2524, -3066, -4431);
	  COL_VERTEX(2333, -3066, -4573);
	  COL_VERTEX(2190, -3066, -4382);
	  COL_VERTEX(2452, -3039, -3758);
	  COL_VERTEX(2418, -3039, -3993);
	  COL_VERTEX(2342, -3039, -3691);
	  COL_VERTEX(2484, -3107, -3883);
	  COL_VERTEX(2293, -3107, -4025);
	  COL_VERTEX(2182, -3039, -3959);
	  COL_VERTEX(2217, -3038, -3723);
	  COL_VERTEX(2150, -3107, -3834);
	  COL_VERTEX(3237, 768, -1361);
	  COL_VERTEX(3237, 768, -1279);
	  COL_VERTEX(3237, 768, -1049);
	  COL_VERTEX(3230, -1000, -1962);
	  COL_VERTEX(410, -4332, 6042);
	  COL_VERTEX(0, 3584, 0);
	  COL_VERTEX(1947, -4607, 4110);
	  COL_VERTEX(-8191, -8191, 8325);
	  COL_VERTEX(8192, -8191, -8058);
	  COL_VERTEX(-8191, -8191, -8058);
	  COL_VERTEX(8192, -8191, 8325);
	  COL_VERTEX(-2433, -706, -2759);
	  COL_VERTEX(-1969, -787, -3075);
	  COL_VERTEX(-1927, -706, -2683);
	  COL_VERTEX(-1936, -706, -3551);
	  COL_VERTEX(-1471, -706, -3480);
	  COL_VERTEX(3587, -4105, 3371);
	  COL_VERTEX(2357, -4351, 3616);
	  COL_VERTEX(3344, -4351, 3546);
	  COL_VERTEX(2045, -4351, 4479);
	  COL_VERTEX(1943, -4607, 4482);
	  COL_VERTEX(614, -4607, 4301);
	  COL_VERTEX(3237, 768, -1125);
	  COL_VERTEX(3182, 768, -972);
	  COL_VERTEX(3237, 749, -972);
	  COL_VERTEX(2560, 768, -1125);
	  COL_VERTEX(2560, 768, -972);
	  COL_VERTEX(5035, -4505, -3301);
	  COL_VERTEX(5035, -4505, -3590);
	  COL_VERTEX(4890, -4505, -3445);
	  COL_VERTEX(5180, -4505, -3445);
	  COL_VERTEX(-2, -6143, -4095);
	  COL_VERTEX(4771, -6143, -3235);
	  COL_VERTEX(3159, -6143, -4796);
	  COL_VERTEX(-2, -6143, -4505);
	  COL_VERTEX(4623, -6143, -2363);
	  COL_VERTEX(4096, -6143, -2047);
	  COL_VERTEX(-2399, -1023, -2712);
	  COL_VERTEX(-2439, -716, -2719);
	  COL_VERTEX(-2439, -1023, -2719);
	  COL_VERTEX(-2433, -716, -2759);
	  COL_VERTEX(-2399, -716, -2712);
	  COL_VERTEX(-2393, -716, -2753);
	  COL_VERTEX(-2393, -1023, -2753);
	  COL_VERTEX(-1967, -1023, -2689);
	  COL_VERTEX(-1967, -716, -2689);
	  COL_VERTEX(-1927, -716, -2683);
	  COL_VERTEX(-1974, -1023, -2649);
	  COL_VERTEX(-1974, -716, -2649);
	  COL_VERTEX(-1933, -716, -2642);
	  COL_VERTEX(-1933, -1023, -2642);
	  COL_VERTEX(-1430, -1090, -3474);
	  COL_VERTEX(-1430, -716, -3474);
	  COL_VERTEX(-1453, -1094, -3457);
	  COL_VERTEX(-1447, -716, -3498);
	  COL_VERTEX(-1960, -1168, -3534);
	  COL_VERTEX(-1936, -1165, -3551);
	  COL_VERTEX(-1977, -1171, -3557);
	  COL_VERTEX(-1954, -1167, -3574);
	  COL_VERTEX(-1453, -716, -3457);
	  COL_VERTEX(-1447, -1092, -3498);
	  COL_VERTEX(-1471, -1096, -3480);
	  COL_VERTEX(-1960, -716, -3534);
	  COL_VERTEX(-1977, -716, -3557);
	  COL_VERTEX(-1954, -716, -3574);
	  COL_VERTEX(-1981, -1170, -3670);
	  COL_VERTEX(-3071, -8089, 3107);
	  COL_VERTEX(-5119, -8089, -2626);
	  COL_VERTEX(-5119, -8089, 3107);
	  COL_VERTEX(-3890, -8089, -4060);
	  COL_VERTEX(-1637, -8089, -7132);
	  COL_VERTEX(-3071, -8089, -2421);
	  COL_VERTEX(-1228, -8089, -5903);
	  COL_VERTEX(4301, -8089, -6517);
	  COL_VERTEX(-5324, -8089, -4469);
	  COL_VERTEX(3072, -8089, -5289);
	  COL_VERTEX(5325, -8089, -3036);
	  COL_VERTEX(6758, -8089, -4469);
	  COL_VERTEX(4710, -8089, -3650);
	  COL_VERTEX(4506, -8089, -3650);
	  COL_VERTEX(-1936, -665, -3551);
	  COL_VERTEX(-1737, -2149, 3260);
	  COL_VERTEX(-1754, -2201, 3361);
	  COL_VERTEX(-1771, -2149, 3462);
	  COL_VERTEX(-1947, -1023, -1672);
	  COL_TRI_INIT(SURFACE_DEFAULT, 757);
	  COL_TRI(11, 13, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(3, 4, 5);
	  COL_TRI(3, 6, 4);
	  COL_TRI(7, 8, 9);
	  COL_TRI(8, 10, 9);
	  COL_TRI(11, 12, 10);
	  COL_TRI(9, 10, 12);
	  COL_TRI(15, 16, 10);
	  COL_TRI(16, 12, 10);
	  COL_TRI(11, 10, 8);
	  COL_TRI(11, 14, 13);
	  COL_TRI(17, 367, 18);
	  COL_TRI(18, 367, 368);
	  COL_TRI(18, 368, 19);
	  COL_TRI(23, 373, 374);
	  COL_TRI(19, 368, 369);
	  COL_TRI(19, 369, 20);
	  COL_TRI(17, 370, 367);
	  COL_TRI(20, 370, 17);
	  COL_TRI(20, 369, 370);
	  COL_TRI(21, 372, 22);
	  COL_TRI(22, 372, 373);
	  COL_TRI(22, 373, 23);
	  COL_TRI(27, 378, 28);
	  COL_TRI(23, 374, 24);
	  COL_TRI(21, 375, 372);
	  COL_TRI(24, 375, 21);
	  COL_TRI(24, 374, 375);
	  COL_TRI(25, 376, 27);
	  COL_TRI(25, 377, 376);
	  COL_TRI(26, 377, 25);
	  COL_TRI(27, 376, 378);
	  COL_TRI(33, 383, 384);
	  COL_TRI(26, 379, 377);
	  COL_TRI(28, 379, 26);
	  COL_TRI(28, 378, 379);
	  COL_TRI(29, 380, 30);
	  COL_TRI(30, 381, 31);
	  COL_TRI(30, 380, 381);
	  COL_TRI(29, 382, 380);
	  COL_TRI(31, 381, 382);
	  COL_TRI(31, 382, 29);
	  COL_TRI(32, 383, 33);
	  COL_TRI(38, 389, 39);
	  COL_TRI(32, 385, 383);
	  COL_TRI(33, 384, 34);
	  COL_TRI(34, 384, 385);
	  COL_TRI(34, 385, 32);
	  COL_TRI(35, 386, 36);
	  COL_TRI(36, 387, 37);
	  COL_TRI(36, 386, 387);
	  COL_TRI(35, 388, 386);
	  COL_TRI(37, 387, 388);
	  COL_TRI(37, 388, 35);
	  COL_TRI(39, 390, 40);
	  COL_TRI(38, 391, 389);
	  COL_TRI(39, 389, 390);
	  COL_TRI(40, 390, 391);
	  COL_TRI(40, 391, 38);
	  COL_TRI(41, 43, 42);
	  COL_TRI(42, 43, 44);
	  COL_TRI(43, 45, 44);
	  COL_TRI(44, 45, 46);
	  COL_TRI(45, 41, 46);
	  COL_TRI(46, 41, 42);
	  COL_TRI(47, 392, 49);
	  COL_TRI(47, 393, 392);
	  COL_TRI(48, 393, 47);
	  COL_TRI(48, 394, 393);
	  COL_TRI(49, 392, 394);
	  COL_TRI(49, 394, 48);
	  COL_TRI(50, 395, 396);
	  COL_TRI(50, 396, 52);
	  COL_TRI(51, 395, 50);
	  COL_TRI(51, 397, 395);
	  COL_TRI(52, 396, 397);
	  COL_TRI(52, 397, 51);
	  COL_TRI(53, 398, 54);
	  COL_TRI(54, 399, 55);
	  COL_TRI(53, 400, 398);
	  COL_TRI(54, 398, 399);
	  COL_TRI(55, 399, 400);
	  COL_TRI(55, 400, 53);
	  COL_TRI(56, 401, 402);
	  COL_TRI(57, 401, 56);
	  COL_TRI(56, 402, 58);
	  COL_TRI(57, 403, 401);
	  COL_TRI(58, 402, 403);
	  COL_TRI(58, 403, 57);
	  COL_TRI(59, 404, 60);
	  COL_TRI(60, 61, 62);
	  COL_TRI(59, 405, 404);
	  COL_TRI(60, 404, 61);
	  COL_TRI(61, 405, 59);
	  COL_TRI(62, 61, 59);
	  COL_TRI(63, 406, 64);
	  COL_TRI(64, 65, 67);
	  COL_TRI(64, 406, 66);
	  COL_TRI(65, 66, 72);
	  COL_TRI(66, 65, 64);
	  COL_TRI(64, 70, 63);
	  COL_TRI(65, 72, 67);
	  COL_TRI(67, 68, 407);
	  COL_TRI(64, 67, 407);
	  COL_TRI(68, 67, 72);
	  COL_TRI(69, 66, 406);
	  COL_TRI(69, 406, 63);
	  COL_TRI(70, 71, 196);
	  COL_TRI(63, 70, 196);
	  COL_TRI(70, 408, 71);
	  COL_TRI(70, 409, 408);
	  COL_TRI(71, 408, 73);
	  COL_TRI(71, 73, 196);
	  COL_TRI(72, 66, 69);
	  COL_TRI(73, 72, 69);
	  COL_TRI(68, 72, 408);
	  COL_TRI(74, 75, 80);
	  COL_TRI(74, 84, 75);
	  COL_TRI(75, 255, 80);
	  COL_TRI(74, 410, 76);
	  COL_TRI(76, 77, 74);
	  COL_TRI(74, 78, 84);
	  COL_TRI(74, 77, 78);
	  COL_TRI(77, 411, 78);
	  COL_TRI(76, 411, 77);
	  COL_TRI(78, 412, 84);
	  COL_TRI(76, 78, 411);
	  COL_TRI(78, 76, 412);
	  COL_TRI(79, 82, 74);
	  COL_TRI(80, 79, 74);
	  COL_TRI(81, 79, 255);
	  COL_TRI(79, 80, 255);
	  COL_TRI(82, 79, 81);
	  COL_TRI(85, 414, 415);
	  COL_TRI(83, 82, 81);
	  COL_TRI(82, 410, 413);
	  COL_TRI(82, 83, 410);
	  COL_TRI(84, 410, 83);
	  COL_TRI(84, 83, 172);
	  COL_TRI(84, 172, 171);
	  COL_TRI(85, 415, 86);
	  COL_TRI(85, 416, 414);
	  COL_TRI(86, 417, 418);
	  COL_TRI(86, 418, 85);
	  COL_TRI(87, 92, 89);
	  COL_TRI(87, 90, 92);
	  COL_TRI(88, 99, 87);
	  COL_TRI(89, 88, 87);
	  COL_TRI(90, 98, 419);
	  COL_TRI(90, 419, 88);
	  COL_TRI(90, 88, 92);
	  COL_TRI(90, 87, 102);
	  COL_TRI(91, 92, 97);
	  COL_TRI(92, 96, 97);
	  COL_TRI(92, 88, 96);
	  COL_TRI(89, 92, 91);
	  COL_TRI(93, 89, 91);
	  COL_TRI(89, 93, 94);
	  COL_TRI(89, 96, 88);
	  COL_TRI(96, 89, 123);
	  COL_TRI(97, 112, 420);
	  COL_TRI(91, 97, 420);
	  COL_TRI(98, 87, 99);
	  COL_TRI(99, 419, 98);
	  COL_TRI(99, 88, 419);
	  COL_TRI(87, 103, 102);
	  COL_TRI(105, 104, 106);
	  COL_TRI(102, 98, 90);
	  COL_TRI(103, 98, 101);
	  COL_TRI(102, 101, 98);
	  COL_TRI(103, 87, 98);
	  COL_TRI(104, 100, 15);
	  COL_TRI(105, 108, 104);
	  COL_TRI(104, 108, 100);
	  COL_TRI(106, 104, 15);
	  COL_TRI(100, 102, 103);
	  COL_TRI(101, 102, 100);
	  COL_TRI(105, 103, 108);
	  COL_TRI(107, 15, 100);
	  COL_TRI(103, 105, 100);
	  COL_TRI(100, 105, 107);
	  COL_TRI(108, 101, 100);
	  COL_TRI(105, 106, 107);
	  COL_TRI(111, 423, 422);
	  COL_TRI(109, 107, 106);
	  COL_TRI(110, 109, 106);
	  COL_TRI(108, 103, 101);
	  COL_TRI(111, 115, 420);
	  COL_TRI(112, 111, 420);
	  COL_TRI(111, 422, 115);
	  COL_TRI(114, 115, 120);
	  COL_TRI(115, 114, 424);
	  COL_TRI(116, 115, 422);
	  COL_TRI(116, 120, 115);
	  COL_TRI(91, 117, 93);
	  COL_TRI(16, 118, 91);
	  COL_TRI(16, 91, 13);
	  COL_TRI(117, 91, 145);
	  COL_TRI(91, 147, 145);
	  COL_TRI(118, 147, 91);
	  COL_TRI(9, 12, 371);
	  COL_TRI(12, 13, 371);
	  COL_TRI(12, 16, 13);
	  COL_TRI(119, 121, 371);
	  COL_TRI(120, 116, 119);
	  COL_TRI(15, 118, 16);
	  COL_TRI(121, 119, 122);
	  COL_TRI(116, 122, 119);
	  COL_TRI(94, 95, 89);
	  COL_TRI(122, 426, 121);
	  COL_TRI(123, 421, 128);
	  COL_TRI(123, 128, 113);
	  COL_TRI(123, 125, 421);
	  COL_TRI(123, 124, 125);
	  COL_TRI(124, 123, 95);
	  COL_TRI(95, 123, 89);
	  COL_TRI(125, 124, 95);
	  COL_TRI(126, 125, 94);
	  COL_TRI(125, 95, 94);
	  COL_TRI(130, 422, 423);
	  COL_TRI(127, 128, 421);
	  COL_TRI(128, 127, 129);
	  COL_TRI(129, 137, 128);
	  COL_TRI(113, 128, 428);
	  COL_TRI(113, 130, 423);
	  COL_TRI(113, 423, 111);
	  COL_TRI(113, 428, 130);
	  COL_TRI(130, 133, 422);
	  COL_TRI(135, 428, 137);
	  COL_TRI(130, 132, 133);
	  COL_TRI(132, 134, 133);
	  COL_TRI(133, 136, 422);
	  COL_TRI(133, 134, 136);
	  COL_TRI(134, 135, 136);
	  COL_TRI(135, 134, 428);
	  COL_TRI(136, 429, 427);
	  COL_TRI(136, 427, 116);
	  COL_TRI(128, 137, 428);
	  COL_TRI(131, 428, 137);
	  COL_TRI(137, 165, 131);
	  COL_TRI(138, 431, 137);
	  COL_TRI(139, 141, 144);
	  COL_TRI(140, 139, 142);
	  COL_TRI(141, 139, 140);
	  COL_TRI(142, 139, 144);
	  COL_TRI(143, 144, 141);
	  COL_TRI(143, 141, 433);
	  COL_TRI(141, 15, 432);
	  COL_TRI(141, 432, 433);
	  COL_TRI(141, 155, 15);
	  COL_TRI(141, 140, 155);
	  COL_TRI(144, 152, 117);
	  COL_TRI(144, 143, 152);
	  COL_TRI(117, 145, 144);
	  COL_TRI(145, 142, 144);
	  COL_TRI(118, 146, 147);
	  COL_TRI(146, 425, 147);
	  COL_TRI(147, 425, 142);
	  COL_TRI(147, 142, 145);
	  COL_TRI(148, 93, 117);
	  COL_TRI(149, 150, 117);
	  COL_TRI(150, 151, 117);
	  COL_TRI(151, 148, 117);
	  COL_TRI(152, 153, 117);
	  COL_TRI(153, 149, 117);
	  COL_TRI(140, 142, 425);
	  COL_TRI(15, 155, 118);
	  COL_TRI(154, 143, 433);
	  COL_TRI(154, 433, 174);
	  COL_TRI(155, 140, 434);
	  COL_TRI(155, 434, 118);
	  COL_TRI(140, 425, 146);
	  COL_TRI(140, 146, 434);
	  COL_TRI(118, 434, 146);
	  COL_TRI(156, 427, 429);
	  COL_TRI(157, 427, 156);
	  COL_TRI(157, 122, 427);
	  COL_TRI(116, 427, 122);
	  COL_TRI(158, 435, 429);
	  COL_TRI(148, 158, 429);
	  COL_TRI(156, 429, 435);
	  COL_TRI(159, 122, 157);
	  COL_TRI(159, 160, 122);
	  COL_TRI(160, 426, 122);
	  COL_TRI(161, 163, 160);
	  COL_TRI(161, 160, 159);
	  COL_TRI(160, 162, 426);
	  COL_TRI(162, 160, 163);
	  COL_TRI(163, 436, 162);
	  COL_TRI(164, 436, 163);
	  COL_TRI(163, 161, 106);
	  COL_TRI(136, 116, 422);
	  COL_TRI(130, 131, 132);
	  COL_TRI(165, 430, 132);
	  COL_TRI(165, 132, 131);
	  COL_TRI(132, 430, 135);
	  COL_TRI(132, 135, 134);
	  COL_TRI(131, 130, 428);
	  COL_TRI(93, 126, 94);
	  COL_TRI(161, 110, 106);
	  COL_TRI(166, 152, 167);
	  COL_TRI(152, 166, 153);
	  COL_TRI(167, 153, 166);
	  COL_TRI(153, 150, 149);
	  COL_TRI(150, 168, 170);
	  COL_TRI(151, 150, 170);
	  COL_TRI(154, 174, 439);
	  COL_TRI(168, 169, 170);
	  COL_TRI(169, 168, 246);
	  COL_TRI(170, 172, 151);
	  COL_TRI(170, 171, 172);
	  COL_TRI(169, 438, 170);
	  COL_TRI(171, 170, 438);
	  COL_TRI(172, 148, 151);
	  COL_TRI(173, 154, 439);
	  COL_TRI(174, 432, 440);
	  COL_TRI(174, 433, 432);
	  COL_TRI(154, 175, 143);
	  COL_TRI(175, 441, 179);
	  COL_TRI(175, 173, 441);
	  COL_TRI(176, 177, 175);
	  COL_TRI(177, 250, 175);
	  COL_TRI(175, 244, 442);
	  COL_TRI(186, 181, 190);
	  COL_TRI(172, 158, 148);
	  COL_TRI(158, 172, 181);
	  COL_TRI(81, 181, 172);
	  COL_TRI(172, 83, 81);
	  COL_TRI(181, 435, 158);
	  COL_TRI(182, 181, 255);
	  COL_TRI(81, 255, 181);
	  COL_TRI(183, 278, 181);
	  COL_TRI(182, 185, 181);
	  COL_TRI(184, 181, 278);
	  COL_TRI(184, 190, 181);
	  COL_TRI(185, 183, 181);
	  COL_TRI(187, 188, 186);
	  COL_TRI(188, 187, 446);
	  COL_TRI(187, 190, 446);
	  COL_TRI(188, 446, 447);
	  COL_TRI(189, 448, 446);
	  COL_TRI(190, 189, 446);
	  COL_TRI(191, 441, 173);
	  COL_TRI(192, 441, 191);
	  COL_TRI(143, 449, 195);
	  COL_TRI(179, 180, 175);
	  COL_TRI(193, 194, 191);
	  COL_TRI(194, 192, 191);
	  COL_TRI(121, 437, 164);
	  COL_TRI(164, 437, 436);
	  COL_TRI(195, 449, 200);
	  COL_TRI(196, 195, 200);
	  COL_TRI(199, 449, 450);
	  COL_TRI(199, 250, 449);
	  COL_TRI(200, 449, 250);
	  COL_TRI(201, 200, 250);
	  COL_TRI(200, 201, 63);
	  COL_TRI(63, 196, 200);
	  COL_TRI(198, 143, 195);
	  COL_TRI(231, 205, 451);
	  COL_TRI(174, 440, 439);
	  COL_TRI(202, 206, 231);
	  COL_TRI(203, 202, 204);
	  COL_TRI(204, 202, 231);
	  COL_TRI(205, 206, 451);
	  COL_TRI(206, 205, 231);
	  COL_TRI(207, 231, 452);
	  COL_TRI(207, 230, 231);
	  COL_TRI(208, 210, 209);
	  COL_TRI(208, 215, 233);
	  COL_TRI(208, 213, 215);
	  COL_TRI(209, 213, 208);
	  COL_TRI(210, 208, 233);
	  COL_TRI(210, 211, 209);
	  COL_TRI(211, 212, 209);
	  COL_TRI(212, 216, 209);
	  COL_TRI(209, 221, 213);
	  COL_TRI(209, 216, 221);
	  COL_TRI(207, 213, 221);
	  COL_TRI(213, 228, 215);
	  COL_TRI(214, 215, 228);
	  COL_TRI(215, 214, 233);
	  COL_TRI(216, 212, 445);
	  COL_TRI(217, 221, 216);
	  COL_TRI(207, 220, 230);
	  COL_TRI(218, 220, 219);
	  COL_TRI(219, 220, 454);
	  COL_TRI(221, 454, 207);
	  COL_TRI(220, 207, 454);
	  COL_TRI(221, 217, 454);
	  COL_TRI(222, 223, 217);
	  COL_TRI(223, 454, 217);
	  COL_TRI(216, 225, 217);
	  COL_TRI(224, 222, 217);
	  COL_TRI(225, 224, 217);
	  COL_TRI(218, 453, 220);
	  COL_TRI(218, 203, 453);
	  COL_TRI(219, 457, 218);
	  COL_TRI(213, 207, 452);
	  COL_TRI(213, 452, 228);
	  COL_TRI(223, 226, 454);
	  COL_TRI(226, 227, 454);
	  COL_TRI(227, 455, 454);
	  COL_TRI(228, 235, 279);
	  COL_TRI(228, 452, 235);
	  COL_TRI(228, 279, 214);
	  COL_TRI(229, 455, 222);
	  COL_TRI(222, 455, 227);
	  COL_TRI(222, 224, 229);
	  COL_TRI(222, 227, 456);
	  COL_TRI(222, 456, 223);
	  COL_TRI(231, 451, 235);
	  COL_TRI(219, 455, 229);
	  COL_TRI(229, 457, 219);
	  COL_TRI(220, 453, 204);
	  COL_TRI(220, 204, 230);
	  COL_TRI(203, 204, 453);
	  COL_TRI(230, 204, 231);
	  COL_TRI(232, 233, 280);
	  COL_TRI(233, 214, 280);
	  COL_TRI(234, 225, 216);
	  COL_TRI(234, 216, 183);
	  COL_TRI(235, 451, 279);
	  COL_TRI(206, 236, 451);
	  COL_TRI(241, 6, 4);
	  COL_TRI(236, 239, 451);
	  COL_TRI(237, 241, 4);
	  COL_TRI(237, 4, 242);
	  COL_TRI(238, 237, 242);
	  COL_TRI(237, 459, 275);
	  COL_TRI(237, 460, 459);
	  COL_TRI(239, 460, 237);
	  COL_TRI(240, 237, 238);
	  COL_TRI(240, 239, 237);
	  COL_TRI(6, 241, 442);
	  COL_TRI(4, 363, 242);
	  COL_TRI(4, 461, 363);
	  COL_TRI(6, 461, 4);
	  COL_TRI(242, 363, 462);
	  COL_TRI(242, 462, 243);
	  COL_TRI(238, 242, 244);
	  COL_TRI(242, 243, 244);
	  COL_TRI(240, 238, 180);
	  COL_TRI(180, 238, 244);
	  COL_TRI(243, 6, 442);
	  COL_TRI(6, 463, 461);
	  COL_TRI(243, 463, 6);
	  COL_TRI(244, 243, 442);
	  COL_TRI(243, 462, 463);
	  COL_TRI(363, 461, 463);
	  COL_TRI(363, 463, 462);
	  COL_TRI(180, 244, 175);
	  COL_TRI(245, 167, 152);
	  COL_TRI(245, 246, 167);
	  COL_TRI(246, 245, 169);
	  COL_TRI(245, 438, 169);
	  COL_TRI(245, 152, 143);
	  COL_TRI(247, 464, 201);
	  COL_TRI(247, 465, 464);
	  COL_TRI(251, 248, 466);
	  COL_TRI(247, 249, 465);
	  COL_TRI(248, 249, 247);
	  COL_TRI(249, 464, 465);
	  COL_TRI(249, 201, 464);
	  COL_TRI(250, 177, 201);
	  COL_TRI(201, 249, 63);
	  COL_TRI(247, 201, 177);
	  COL_TRI(171, 262, 75);
	  COL_TRI(248, 284, 252);
	  COL_TRI(252, 466, 248);
	  COL_TRI(253, 254, 466);
	  COL_TRI(254, 251, 466);
	  COL_TRI(253, 466, 252);
	  COL_TRI(75, 84, 171);
	  COL_TRI(255, 256, 443);
	  COL_TRI(256, 255, 75);
	  COL_TRI(257, 182, 255);
	  COL_TRI(255, 443, 257);
	  COL_TRI(257, 264, 182);
	  COL_TRI(258, 260, 182);
	  COL_TRI(182, 264, 444);
	  COL_TRI(182, 444, 258);
	  COL_TRI(259, 185, 182);
	  COL_TRI(260, 259, 182);
	  COL_TRI(261, 443, 256);
	  COL_TRI(262, 269, 256);
	  COL_TRI(266, 281, 259);
	  COL_TRI(261, 263, 443);
	  COL_TRI(263, 257, 443);
	  COL_TRI(264, 257, 263);
	  COL_TRI(265, 263, 261);
	  COL_TRI(264, 263, 265);
	  COL_TRI(261, 469, 265);
	  COL_TRI(266, 259, 258);
	  COL_TRI(258, 468, 266);
	  COL_TRI(256, 269, 261);
	  COL_TRI(260, 258, 259);
	  COL_TRI(267, 468, 258);
	  COL_TRI(267, 258, 444);
	  COL_TRI(268, 468, 267);
	  COL_TRI(268, 472, 468);
	  COL_TRI(269, 469, 261);
	  COL_TRI(267, 469, 270);
	  COL_TRI(270, 469, 269);
	  COL_TRI(269, 262, 470);
	  COL_TRI(269, 471, 270);
	  COL_TRI(269, 470, 471);
	  COL_TRI(267, 444, 473);
	  COL_TRI(270, 268, 267);
	  COL_TRI(271, 272, 270);
	  COL_TRI(270, 471, 271);
	  COL_TRI(272, 268, 270);
	  COL_TRI(240, 180, 273);
	  COL_TRI(273, 458, 240);
	  COL_TRI(239, 240, 458);
	  COL_TRI(214, 274, 239);
	  COL_TRI(274, 451, 239);
	  COL_TRI(214, 239, 458);
	  COL_TRI(275, 459, 276);
	  COL_TRI(275, 276, 272);
	  COL_TRI(276, 472, 268);
	  COL_TRI(272, 276, 268);
	  COL_TRI(277, 184, 278);
	  COL_TRI(278, 232, 277);
	  COL_TRI(183, 445, 278);
	  COL_TRI(278, 445, 232);
	  COL_TRI(216, 445, 183);
	  COL_TRI(279, 274, 214);
	  COL_TRI(280, 273, 289);
	  COL_TRI(280, 289, 353);
	  COL_TRI(280, 458, 273);
	  COL_TRI(280, 214, 458);
	  COL_TRI(281, 185, 259);
	  COL_TRI(185, 234, 183);
	  COL_TRI(185, 281, 234);
	  COL_TRI(186, 190, 187);
	  COL_TRI(86, 85, 467);
	  COL_TRI(75, 262, 256);
	  COL_TRI(282, 63, 249);
	  COL_TRI(283, 252, 284);
	  COL_TRI(247, 284, 248);
	  COL_TRI(284, 285, 283);
	  COL_TRI(252, 85, 86);
	  COL_TRI(252, 467, 85);
	  COL_TRI(252, 283, 467);
	  COL_TRI(86, 283, 285);
	  COL_TRI(86, 467, 283);
	  COL_TRI(86, 285, 253);
	  COL_TRI(196, 73, 197);
	  COL_TRI(279, 451, 274);
	  COL_TRI(254, 247, 177);
	  COL_TRI(254, 284, 247);
	  COL_TRI(285, 254, 253);
	  COL_TRI(285, 284, 254);
	  COL_TRI(252, 86, 253);
	  COL_TRI(273, 299, 289);
	  COL_TRI(286, 299, 273);
	  COL_TRI(282, 73, 69);
	  COL_TRI(282, 249, 248);
	  COL_TRI(176, 251, 177);
	  COL_TRI(287, 476, 197);
	  COL_TRI(176, 178, 251);
	  COL_TRI(251, 178, 475);
	  COL_TRI(178, 175, 442);
	  COL_TRI(178, 176, 175);
	  COL_TRI(197, 198, 195);
	  COL_TRI(197, 195, 196);
	  COL_TRI(287, 171, 476);
	  COL_TRI(287, 477, 171);
	  COL_TRI(287, 197, 478);
	  COL_TRI(288, 478, 197);
	  COL_TRI(177, 251, 254);
	  COL_TRI(197, 282, 288);
	  COL_TRI(293, 479, 292);
	  COL_TRI(197, 73, 282);
	  COL_TRI(289, 292, 479);
	  COL_TRI(290, 292, 289);
	  COL_TRI(290, 289, 296);
	  COL_TRI(291, 289, 479);
	  COL_TRI(292, 290, 304);
	  COL_TRI(299, 474, 290);
	  COL_TRI(294, 353, 291);
	  COL_TRI(295, 353, 294);
	  COL_TRI(293, 294, 479);
	  COL_TRI(294, 291, 479);
	  COL_TRI(296, 299, 290);
	  COL_TRI(297, 290, 481);
	  COL_TRI(290, 474, 481);
	  COL_TRI(298, 304, 290);
	  COL_TRI(300, 474, 299);
	  COL_TRI(300, 299, 286);
	  COL_TRI(299, 296, 289);
	  COL_TRI(301, 298, 302);
	  COL_TRI(298, 290, 297);
	  COL_TRI(302, 298, 297);
	  COL_TRI(301, 482, 298);
	  COL_TRI(293, 292, 480);
	  COL_TRI(300, 481, 474);
	  COL_TRI(303, 304, 301);
	  COL_TRI(304, 482, 301);
	  COL_TRI(305, 306, 308);
	  COL_TRI(305, 483, 332);
	  COL_TRI(305, 308, 483);
	  COL_TRI(312, 310, 307);
	  COL_TRI(306, 344, 307);
	  COL_TRI(307, 484, 306);
	  COL_TRI(308, 306, 309);
	  COL_TRI(306, 484, 309);
	  COL_TRI(309, 483, 308);
	  COL_TRI(309, 484, 311);
	  COL_TRI(310, 484, 307);
	  COL_TRI(311, 484, 310);
	  COL_TRI(313, 485, 486);
	  COL_TRI(313, 486, 315);
	  COL_TRI(314, 486, 485);
	  COL_TRI(315, 486, 487);
	  COL_TRI(314, 487, 486);
	  COL_TRI(315, 487, 488);
	  COL_TRI(312, 342, 489);
	  COL_TRI(311, 310, 490);
	  COL_TRI(318, 319, 320);
	  COL_TRI(286, 193, 447);
	  COL_TRI(286, 447, 491);
	  COL_TRI(316, 492, 317);
	  COL_TRI(317, 448, 316);
	  COL_TRI(313, 488, 194);
	  COL_TRI(313, 315, 488);
	  COL_TRI(319, 322, 493);
	  COL_TRI(319, 318, 322);
	  COL_TRI(321, 322, 318);
	  COL_TRI(322, 321, 493);
	  COL_TRI(323, 325, 324);
	  COL_TRI(324, 325, 494);
	  COL_TRI(325, 323, 494);
	  COL_TRI(326, 323, 327);
	  COL_TRI(326, 494, 323);
	  COL_TRI(327, 323, 324);
	  COL_TRI(324, 494, 326);
	  COL_TRI(328, 329, 330);
	  COL_TRI(334, 497, 327);
	  COL_TRI(328, 495, 329);
	  COL_TRI(329, 496, 331);
	  COL_TRI(331, 496, 495);
	  COL_TRI(331, 495, 328);
	  COL_TRI(329, 495, 496);
	  COL_TRI(332, 309, 311);
	  COL_TRI(332, 483, 309);
	  COL_TRI(333, 497, 334);
	  COL_TRI(327, 497, 498);
	  COL_TRI(330, 329, 331);
	  COL_TRI(320, 319, 493);
	  COL_TRI(335, 499, 500);
	  COL_TRI(336, 499, 335);
	  COL_TRI(337, 500, 499);
	  COL_TRI(337, 499, 336);
	  COL_TRI(335, 500, 337);
	  COL_TRI(342, 504, 505);
	  COL_TRI(334, 498, 333);
	  COL_TRI(333, 498, 497);
	  COL_TRI(338, 501, 340);
	  COL_TRI(338, 340, 341);
	  COL_TRI(339, 501, 338);
	  COL_TRI(339, 502, 501);
	  COL_TRI(340, 501, 502);
	  COL_TRI(341, 340, 503);
	  COL_TRI(340, 502, 503);
	  COL_TRI(341, 503, 336);
	  COL_TRI(336, 502, 339);
	  COL_TRI(336, 503, 502);
	  COL_TRI(346, 506, 348);
	  COL_TRI(343, 505, 504);
	  COL_TRI(344, 504, 307);
	  COL_TRI(307, 504, 342);
	  COL_TRI(344, 343, 504);
	  COL_TRI(345, 347, 346);
	  COL_TRI(346, 347, 506);
	  COL_TRI(347, 507, 506);
	  COL_TRI(345, 507, 347);
	  COL_TRI(348, 506, 507);
	  COL_TRI(348, 507, 345);
	  COL_TRI(349, 350, 508);
	  COL_TRI(349, 508, 351);
	  COL_TRI(350, 352, 508);
	  COL_TRI(351, 508, 353);
	  COL_TRI(352, 353, 508);
	  COL_TRI(351, 353, 295);
	  COL_TRI(353, 289, 291);
	  COL_TRI(352, 280, 353);
	  COL_TRI(307, 342, 312);
	  COL_TRI(354, 355, 356);
	  COL_TRI(355, 359, 509);
	  COL_TRI(356, 355, 510);
	  COL_TRI(354, 511, 355);
	  COL_TRI(357, 355, 509);
	  COL_TRI(355, 511, 359);
	  COL_TRI(357, 510, 355);
	  COL_TRI(358, 511, 354);
	  COL_TRI(358, 512, 511);
	  COL_TRI(359, 511, 512);
	  COL_TRI(357, 512, 510);
	  COL_TRI(362, 359, 514);
	  COL_TRI(360, 357, 509);
	  COL_TRI(357, 513, 512);
	  COL_TRI(359, 512, 513);
	  COL_TRI(361, 510, 512);
	  COL_TRI(361, 512, 358);
	  COL_TRI(356, 510, 361);
	  COL_TRI(362, 509, 359);
	  COL_TRI(360, 509, 362);
	  COL_TRI(364, 515, 365);
	  COL_TRI(365, 135, 516);
	  COL_TRI(365, 515, 135);
	  COL_TRI(364, 138, 515);
	  COL_TRI(138, 364, 431);
	  COL_TRI(167, 366, 153);
	  COL_TRI(366, 167, 246);
	  COL_TRI(153, 366, 150);
	  COL_TRI(840, 842, 843);
	  COL_TRI(2, 874, 0);
	  COL_TRI(846, 1, 853);
	  COL_TRI(846, 848, 1);
	  COL_TRI(834, 835, 836);
	  COL_TRI(834, 832, 835);
	  COL_TRI(840, 839, 842);
	  COL_TRI(857, 2, 858);
	  COL_TRI(857, 856, 2);
	  COL_TRI(86, 875, 417);
	  COL_TRI(86, 415, 875);
	  COL_TRI(415, 876, 875);
	  COL_TRI(415, 414, 876);
	  COL_TRI(414, 416, 877);
	  COL_TRI(414, 877, 876);
	  COL_TRI(189, 854, 845);
	  COL_TRI(418, 877, 416);
	  COL_TRI(418, 416, 85);
	  COL_TRI(448, 845, 847);
	  COL_TRI(849, 316, 448);
	  COL_TRI(448, 847, 850);
	  COL_TRI(448, 850, 849);
	  COL_TRI(448, 189, 845);
	  COL_TRI(859, 854, 189);
	  COL_TRI(852, 855, 854);
	  COL_TRI(854, 859, 852);
	  COL_TRI(852, 850, 855);
	  COL_TRI(847, 855, 850);
	  COL_TRI(849, 851, 316);
	  COL_TRI(851, 859, 316);
	  COL_TRI(859, 851, 852);
	  COL_TRI(489, 878, 490);
	  COL_TRI(490, 844, 489);
	  COL_TRI(490, 310, 844);
	  COL_TRI(841, 838, 837);
	  COL_TRI(844, 841, 489);
	  COL_TRI(841, 831, 489);
	  COL_TRI(831, 312, 489);
	  COL_TRI(841, 837, 831);
	  COL_TRI_INIT(SURFACE_HANGABLE, 4);
	  COL_TRI(805, 806, 807);
	  COL_TRI(808, 806, 805);
	  COL_TRI(809, 806, 808);
	  COL_TRI(809, 807, 806);
	  COL_TRI_INIT(SURFACE_DEATH_PLANE, 2);
	  COL_TRI(801, 802, 803);
	  COL_TRI(801, 804, 802);
	  COL_TRI_INIT(SURFACE_FLOWING_WATER, 15);
	  COL_TRI_SPECIAL(282, 813, 811, 0xD5);
	  COL_TRI_SPECIAL(810, 477, 287, 0xEB);
	  COL_TRI_SPECIAL(810, 478, 288, 0xF5);
	  COL_TRI_SPECIAL(811, 810, 288, 0xF5);
	  COL_TRI_SPECIAL(810, 287, 478, 0xE0);
	  COL_TRI_SPECIAL(811, 812, 810, 0xF5);
	  COL_TRI_SPECIAL(813, 812, 811, 0xE0);
	  COL_TRI_SPECIAL(282, 800, 814, 0xC0);
	  COL_TRI_SPECIAL(282, 814, 813, 0xC0);
	  COL_TRI_SPECIAL(699, 814, 800, 0xC0);
	  COL_TRI_SPECIAL(815, 699, 800, 0xD5);
	  COL_TRI_SPECIAL(475, 699, 815, 0x220);
	  COL_TRI_SPECIAL(248, 815, 800, 0xF5);
	  COL_TRI_SPECIAL(251, 815, 248, 0xF5);
	  COL_TRI_SPECIAL(251, 475, 815, 0x220);
	  COL_TRI_INIT(SURFACE_VERY_SLIPPERY, 24);
	  COL_TRI(15, 10, 164);
	  COL_TRI(9, 164, 10);
	  COL_TRI(420, 13, 91);
	  COL_TRI(164, 9, 799);
	  COL_TRI(9, 371, 799);
	  COL_TRI(121, 164, 799);
	  COL_TRI(799, 371, 121);
	  COL_TRI(119, 371, 114);
	  COL_TRI(159, 193, 191);
	  COL_TRI(120, 119, 114);
	  COL_TRI(112, 113, 111);
	  COL_TRI(123, 113, 112);
	  COL_TRI(123, 112, 97);
	  COL_TRI(97, 96, 123);
	  COL_TRI(159, 191, 161);
	  COL_TRI(476, 198, 197);
	  COL_TRI(304, 298, 482);
	  COL_TRI(304, 303, 480);
	  COL_TRI(292, 304, 480);
	  COL_TRI(248, 800, 282);
	  COL_TRI(476, 245, 198);
	  COL_TRI(143, 198, 245);
	  COL_TRI(438, 245, 476);
	  COL_TRI(171, 438, 476);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 474);
	  COL_TRI(526, 531, 530);
	  COL_TRI(517, 518, 519);
	  COL_TRI(520, 521, 517);
	  COL_TRI(517, 522, 520);
	  COL_TRI(517, 519, 522);
	  COL_TRI(517, 521, 523);
	  COL_TRI(517, 523, 524);
	  COL_TRI(517, 524, 525);
	  COL_TRI(517, 525, 518);
	  COL_TRI(526, 527, 528);
	  COL_TRI(529, 527, 526);
	  COL_TRI(530, 529, 526);
	  COL_TRI(526, 528, 531);
	  COL_TRI(524, 532, 525);
	  COL_TRI(524, 527, 532);
	  COL_TRI(529, 532, 527);
	  COL_TRI(528, 527, 524);
	  COL_TRI(521, 531, 528);
	  COL_TRI(521, 528, 523);
	  COL_TRI(528, 524, 523);
	  COL_TRI(529, 533, 532);
	  COL_TRI(534, 533, 529);
	  COL_TRI(530, 534, 529);
	  COL_TRI(525, 532, 533);
	  COL_TRI(518, 533, 536);
	  COL_TRI(534, 536, 533);
	  COL_TRI(534, 535, 536);
	  COL_TRI(530, 535, 534);
	  COL_TRI(518, 536, 519);
	  COL_TRI(536, 535, 522);
	  COL_TRI(536, 522, 519);
	  COL_TRI(522, 535, 537);
	  COL_TRI(530, 537, 535);
	  COL_TRI(530, 531, 537);
	  COL_TRI(522, 537, 520);
	  COL_TRI(537, 531, 521);
	  COL_TRI(537, 521, 520);
	  COL_TRI(525, 533, 518);
	  COL_TRI(541, 703, 542);
	  COL_TRI(538, 548, 700);
	  COL_TRI(538, 700, 550);
	  COL_TRI(538, 547, 548);
	  COL_TRI(538, 544, 547);
	  COL_TRI(538, 701, 544);
	  COL_TRI(538, 545, 701);
	  COL_TRI(539, 545, 538);
	  COL_TRI(538, 550, 539);
	  COL_TRI(540, 702, 541);
	  COL_TRI(541, 702, 543);
	  COL_TRI(541, 543, 703);
	  COL_TRI(542, 540, 541);
	  COL_TRI(544, 704, 547);
	  COL_TRI(540, 704, 702);
	  COL_TRI(543, 702, 544);
	  COL_TRI(544, 702, 704);
	  COL_TRI(543, 544, 701);
	  COL_TRI(545, 543, 701);
	  COL_TRI(545, 703, 543);
	  COL_TRI(540, 705, 704);
	  COL_TRI(546, 705, 540);
	  COL_TRI(542, 546, 540);
	  COL_TRI(547, 704, 705);
	  COL_TRI(546, 549, 705);
	  COL_TRI(548, 705, 549);
	  COL_TRI(546, 706, 549);
	  COL_TRI(542, 706, 546);
	  COL_TRI(548, 549, 700);
	  COL_TRI(549, 706, 550);
	  COL_TRI(549, 550, 700);
	  COL_TRI(542, 551, 706);
	  COL_TRI(550, 706, 551);
	  COL_TRI(542, 703, 551);
	  COL_TRI(551, 545, 539);
	  COL_TRI(551, 703, 545);
	  COL_TRI(550, 551, 539);
	  COL_TRI(547, 705, 548);
	  COL_TRI(556, 555, 554);
	  COL_TRI(552, 562, 707);
	  COL_TRI(552, 708, 562);
	  COL_TRI(552, 558, 708);
	  COL_TRI(552, 709, 558);
	  COL_TRI(552, 559, 709);
	  COL_TRI(552, 707, 564);
	  COL_TRI(552, 564, 553);
	  COL_TRI(553, 559, 552);
	  COL_TRI(554, 557, 710);
	  COL_TRI(554, 710, 556);
	  COL_TRI(554, 711, 557);
	  COL_TRI(555, 711, 554);
	  COL_TRI(558, 712, 561);
	  COL_TRI(555, 712, 711);
	  COL_TRI(557, 711, 558);
	  COL_TRI(558, 711, 712);
	  COL_TRI(559, 557, 709);
	  COL_TRI(559, 710, 557);
	  COL_TRI(557, 558, 709);
	  COL_TRI(560, 713, 555);
	  COL_TRI(555, 713, 712);
	  COL_TRI(556, 560, 555);
	  COL_TRI(561, 712, 713);
	  COL_TRI(560, 563, 713);
	  COL_TRI(562, 713, 563);
	  COL_TRI(560, 714, 563);
	  COL_TRI(556, 714, 560);
	  COL_TRI(563, 714, 564);
	  COL_TRI(563, 564, 707);
	  COL_TRI(562, 563, 707);
	  COL_TRI(564, 714, 565);
	  COL_TRI(556, 565, 714);
	  COL_TRI(556, 710, 565);
	  COL_TRI(564, 565, 553);
	  COL_TRI(565, 710, 559);
	  COL_TRI(565, 559, 553);
	  COL_TRI(561, 713, 562);
	  COL_TRI(566, 715, 569);
	  COL_TRI(567, 715, 566);
	  COL_TRI(566, 716, 568);
	  COL_TRI(568, 567, 566);
	  COL_TRI(566, 569, 716);
	  COL_TRI(567, 717, 715);
	  COL_TRI(569, 715, 570);
	  COL_TRI(570, 715, 717);
	  COL_TRI(571, 569, 718);
	  COL_TRI(571, 716, 569);
	  COL_TRI(569, 570, 718);
	  COL_TRI(567, 719, 717);
	  COL_TRI(572, 719, 567);
	  COL_TRI(568, 572, 567);
	  COL_TRI(573, 717, 719);
	  COL_TRI(574, 719, 575);
	  COL_TRI(572, 575, 719);
	  COL_TRI(572, 720, 575);
	  COL_TRI(568, 720, 572);
	  COL_TRI(574, 575, 721);
	  COL_TRI(575, 720, 576);
	  COL_TRI(575, 576, 721);
	  COL_TRI(576, 720, 577);
	  COL_TRI(568, 577, 720);
	  COL_TRI(568, 716, 577);
	  COL_TRI(573, 719, 574);
	  COL_TRI(576, 577, 722);
	  COL_TRI(577, 716, 571);
	  COL_TRI(577, 571, 722);
	  COL_TRI(570, 717, 573);
	  COL_TRI(578, 723, 582);
	  COL_TRI(578, 582, 724);
	  COL_TRI(579, 723, 578);
	  COL_TRI(579, 578, 725);
	  COL_TRI(584, 583, 728);
	  COL_TRI(580, 723, 579);
	  COL_TRI(581, 723, 580);
	  COL_TRI(581, 582, 723);
	  COL_TRI(581, 726, 582);
	  COL_TRI(582, 726, 589);
	  COL_TRI(582, 589, 724);
	  COL_TRI(583, 579, 725);
	  COL_TRI(583, 727, 579);
	  COL_TRI(580, 579, 727);
	  COL_TRI(584, 727, 583);
	  COL_TRI(580, 585, 588);
	  COL_TRI(580, 727, 585);
	  COL_TRI(585, 727, 584);
	  COL_TRI(586, 730, 584);
	  COL_TRI(586, 584, 728);
	  COL_TRI(585, 584, 730);
	  COL_TRI(587, 730, 586);
	  COL_TRI(585, 730, 588);
	  COL_TRI(588, 730, 729);
	  COL_TRI(587, 729, 730);
	  COL_TRI(589, 729, 587);
	  COL_TRI(592, 731, 590);
	  COL_TRI(588, 729, 726);
	  COL_TRI(589, 726, 729);
	  COL_TRI(588, 726, 581);
	  COL_TRI(580, 588, 581);
	  COL_TRI(590, 731, 593);
	  COL_TRI(591, 592, 590);
	  COL_TRI(590, 732, 591);
	  COL_TRI(590, 593, 732);
	  COL_TRI(593, 731, 594);
	  COL_TRI(594, 731, 733);
	  COL_TRI(592, 733, 731);
	  COL_TRI(595, 732, 593);
	  COL_TRI(595, 593, 736);
	  COL_TRI(593, 594, 736);
	  COL_TRI(596, 732, 595);
	  COL_TRI(596, 595, 737);
	  COL_TRI(591, 732, 596);
	  COL_TRI(597, 734, 596);
	  COL_TRI(597, 596, 737);
	  COL_TRI(591, 596, 734);
	  COL_TRI(591, 599, 592);
	  COL_TRI(598, 734, 597);
	  COL_TRI(598, 597, 738);
	  COL_TRI(591, 734, 599);
	  COL_TRI(599, 734, 598);
	  COL_TRI(600, 735, 598);
	  COL_TRI(600, 598, 738);
	  COL_TRI(599, 598, 735);
	  COL_TRI(601, 735, 600);
	  COL_TRI(599, 735, 592);
	  COL_TRI(592, 735, 733);
	  COL_TRI(594, 733, 601);
	  COL_TRI(601, 733, 735);
	  COL_TRI(602, 604, 603);
	  COL_TRI(603, 739, 602);
	  COL_TRI(603, 605, 739);
	  COL_TRI(603, 740, 605);
	  COL_TRI(604, 740, 603);
	  COL_TRI(605, 740, 606);
	  COL_TRI(606, 740, 741);
	  COL_TRI(604, 741, 740);
	  COL_TRI(605, 606, 742);
	  COL_TRI(607, 605, 742);
	  COL_TRI(607, 739, 605);
	  COL_TRI(608, 743, 604);
	  COL_TRI(604, 743, 741);
	  COL_TRI(602, 608, 604);
	  COL_TRI(609, 741, 743);
	  COL_TRI(608, 611, 743);
	  COL_TRI(610, 743, 611);
	  COL_TRI(608, 744, 611);
	  COL_TRI(602, 744, 608);
	  COL_TRI(610, 611, 745);
	  COL_TRI(611, 744, 612);
	  COL_TRI(611, 612, 745);
	  COL_TRI(602, 613, 744);
	  COL_TRI(612, 744, 613);
	  COL_TRI(602, 739, 613);
	  COL_TRI(609, 743, 610);
	  COL_TRI(614, 747, 615);
	  COL_TRI(612, 613, 746);
	  COL_TRI(613, 739, 607);
	  COL_TRI(613, 607, 746);
	  COL_TRI(606, 741, 609);
	  COL_TRI(614, 619, 617);
	  COL_TRI(615, 616, 614);
	  COL_TRI(614, 617, 747);
	  COL_TRI(616, 619, 614);
	  COL_TRI(616, 748, 619);
	  COL_TRI(617, 619, 618);
	  COL_TRI(618, 619, 622);
	  COL_TRI(619, 748, 622);
	  COL_TRI(620, 747, 617);
	  COL_TRI(620, 617, 751);
	  COL_TRI(617, 618, 751);
	  COL_TRI(615, 621, 616);
	  COL_TRI(621, 749, 616);
	  COL_TRI(616, 749, 748);
	  COL_TRI(622, 748, 749);
	  COL_TRI(621, 624, 749);
	  COL_TRI(623, 749, 624);
	  COL_TRI(615, 750, 621);
	  COL_TRI(621, 750, 624);
	  COL_TRI(624, 625, 752);
	  COL_TRI(624, 750, 625);
	  COL_TRI(623, 624, 752);
	  COL_TRI(625, 750, 626);
	  COL_TRI(615, 626, 750);
	  COL_TRI(615, 747, 626);
	  COL_TRI(622, 749, 623);
	  COL_TRI(625, 626, 753);
	  COL_TRI(626, 747, 620);
	  COL_TRI(626, 620, 753);
	  COL_TRI(627, 754, 631);
	  COL_TRI(627, 631, 755);
	  COL_TRI(628, 754, 627);
	  COL_TRI(628, 627, 756);
	  COL_TRI(629, 754, 630);
	  COL_TRI(629, 631, 754);
	  COL_TRI(630, 754, 628);
	  COL_TRI(629, 757, 631);
	  COL_TRI(631, 757, 638);
	  COL_TRI(631, 638, 755);
	  COL_TRI(630, 628, 758);
	  COL_TRI(632, 758, 628);
	  COL_TRI(632, 628, 756);
	  COL_TRI(633, 758, 632);
	  COL_TRI(633, 632, 759);
	  COL_TRI(634, 758, 633);
	  COL_TRI(630, 758, 634);
	  COL_TRI(637, 757, 629);
	  COL_TRI(634, 633, 760);
	  COL_TRI(635, 760, 633);
	  COL_TRI(635, 633, 759);
	  COL_TRI(636, 760, 635);
	  COL_TRI(634, 760, 637);
	  COL_TRI(637, 760, 761);
	  COL_TRI(638, 761, 636);
	  COL_TRI(636, 761, 760);
	  COL_TRI(637, 761, 757);
	  COL_TRI(638, 757, 761);
	  COL_TRI(630, 637, 629);
	  COL_TRI(630, 634, 637);
	  COL_TRI(639, 762, 643);
	  COL_TRI(639, 643, 763);
	  COL_TRI(640, 762, 639);
	  COL_TRI(640, 639, 764);
	  COL_TRI(641, 762, 642);
	  COL_TRI(641, 643, 762);
	  COL_TRI(642, 762, 640);
	  COL_TRI(643, 765, 650);
	  COL_TRI(643, 650, 763);
	  COL_TRI(641, 765, 643);
	  COL_TRI(642, 646, 649);
	  COL_TRI(644, 640, 764);
	  COL_TRI(644, 766, 640);
	  COL_TRI(642, 640, 766);
	  COL_TRI(645, 766, 644);
	  COL_TRI(645, 644, 768);
	  COL_TRI(642, 766, 646);
	  COL_TRI(646, 766, 645);
	  COL_TRI(647, 769, 645);
	  COL_TRI(647, 645, 768);
	  COL_TRI(646, 645, 769);
	  COL_TRI(648, 769, 647);
	  COL_TRI(646, 769, 649);
	  COL_TRI(649, 769, 767);
	  COL_TRI(648, 767, 769);
	  COL_TRI(652, 651, 772);
	  COL_TRI(649, 767, 765);
	  COL_TRI(650, 765, 767);
	  COL_TRI(650, 767, 648);
	  COL_TRI(649, 765, 641);
	  COL_TRI(642, 649, 641);
	  COL_TRI(651, 770, 655);
	  COL_TRI(651, 655, 771);
	  COL_TRI(652, 770, 651);
	  COL_TRI(657, 656, 775);
	  COL_TRI(653, 770, 654);
	  COL_TRI(653, 655, 770);
	  COL_TRI(654, 770, 652);
	  COL_TRI(655, 773, 662);
	  COL_TRI(655, 662, 771);
	  COL_TRI(653, 773, 655);
	  COL_TRI(656, 652, 772);
	  COL_TRI(654, 652, 774);
	  COL_TRI(656, 774, 652);
	  COL_TRI(657, 774, 656);
	  COL_TRI(654, 658, 661);
	  COL_TRI(654, 774, 658);
	  COL_TRI(658, 774, 657);
	  COL_TRI(659, 777, 657);
	  COL_TRI(659, 657, 775);
	  COL_TRI(658, 657, 777);
	  COL_TRI(660, 777, 659);
	  COL_TRI(658, 777, 661);
	  COL_TRI(661, 777, 776);
	  COL_TRI(662, 776, 660);
	  COL_TRI(660, 776, 777);
	  COL_TRI(665, 778, 663);
	  COL_TRI(661, 776, 773);
	  COL_TRI(662, 773, 776);
	  COL_TRI(661, 773, 653);
	  COL_TRI(654, 661, 653);
	  COL_TRI(663, 778, 666);
	  COL_TRI(663, 666, 779);
	  COL_TRI(663, 779, 664);
	  COL_TRI(664, 665, 663);
	  COL_TRI(666, 778, 667);
	  COL_TRI(667, 778, 780);
	  COL_TRI(665, 780, 778);
	  COL_TRI(668, 666, 783);
	  COL_TRI(668, 779, 666);
	  COL_TRI(666, 667, 783);
	  COL_TRI(669, 668, 784);
	  COL_TRI(669, 779, 668);
	  COL_TRI(664, 779, 669);
	  COL_TRI(664, 669, 781);
	  COL_TRI(670, 781, 669);
	  COL_TRI(670, 669, 784);
	  COL_TRI(664, 672, 665);
	  COL_TRI(671, 670, 785);
	  COL_TRI(671, 781, 670);
	  COL_TRI(672, 781, 671);
	  COL_TRI(664, 781, 672);
	  COL_TRI(672, 671, 782);
	  COL_TRI(673, 671, 785);
	  COL_TRI(673, 782, 671);
	  COL_TRI(674, 782, 673);
	  COL_TRI(665, 782, 780);
	  COL_TRI(672, 782, 665);
	  COL_TRI(667, 780, 674);
	  COL_TRI(674, 780, 782);
	  COL_TRI(675, 786, 676);
	  COL_TRI(676, 786, 678);
	  COL_TRI(676, 787, 677);
	  COL_TRI(676, 678, 787);
	  COL_TRI(677, 675, 676);
	  COL_TRI(675, 788, 786);
	  COL_TRI(678, 786, 679);
	  COL_TRI(679, 786, 788);
	  COL_TRI(680, 787, 678);
	  COL_TRI(678, 679, 789);
	  COL_TRI(680, 678, 789);
	  COL_TRI(681, 680, 790);
	  COL_TRI(681, 787, 680);
	  COL_TRI(677, 787, 681);
	  COL_TRI(677, 684, 675);
	  COL_TRI(682, 791, 681);
	  COL_TRI(682, 681, 790);
	  COL_TRI(677, 681, 791);
	  COL_TRI(683, 682, 793);
	  COL_TRI(683, 791, 682);
	  COL_TRI(677, 791, 684);
	  COL_TRI(684, 791, 683);
	  COL_TRI(684, 683, 792);
	  COL_TRI(685, 683, 793);
	  COL_TRI(685, 792, 683);
	  COL_TRI(686, 792, 685);
	  COL_TRI(684, 792, 675);
	  COL_TRI(675, 792, 788);
	  COL_TRI(686, 788, 792);
	  COL_TRI(136, 135, 794);
	  COL_TRI(679, 788, 686);
	  COL_TRI(420, 424, 13);
	  COL_TRI(115, 424, 420);
	  COL_TRI(13, 424, 371);
	  COL_TRI(424, 114, 371);
	  COL_TRI(429, 136, 794);
	  COL_TRI(421, 125, 126);
	  COL_TRI(135, 795, 794);
	  COL_TRI(148, 429, 687);
	  COL_TRI(429, 795, 796);
	  COL_TRI(429, 794, 795);
	  COL_TRI(129, 429, 796);
	  COL_TRI(421, 126, 93);
	  COL_TRI(689, 688, 797);
	  COL_TRI(93, 148, 421);
	  COL_TRI(148, 687, 421);
	  COL_TRI(687, 127, 421);
	  COL_TRI(687, 429, 129);
	  COL_TRI(687, 129, 127);
	  COL_TRI(688, 689, 691);
	  COL_TRI(689, 692, 691);
	  COL_TRI(188, 692, 689);
	  COL_TRI(690, 188, 689);
	  COL_TRI(689, 797, 690);
	  COL_TRI(193, 159, 692);
	  COL_TRI(188, 447, 692);
	  COL_TRI(688, 691, 156);
	  COL_TRI(691, 157, 156);
	  COL_TRI(435, 688, 156);
	  COL_TRI(435, 797, 688);
	  COL_TRI(159, 691, 692);
	  COL_TRI(157, 691, 159);
	  COL_TRI(692, 447, 193);
	  COL_TRI(690, 186, 188);
	  COL_TRI(186, 690, 797);
	  COL_TRI(186, 797, 435);
	  COL_TRI(178, 442, 271);
	  COL_TRI(275, 442, 237);
	  COL_TRI(442, 241, 237);
	  COL_TRI(180, 179, 273);
	  COL_TRI(693, 696, 695);
	  COL_TRI(275, 693, 695);
	  COL_TRI(693, 272, 696);
	  COL_TRI(272, 271, 696);
	  COL_TRI(694, 798, 696);
	  COL_TRI(695, 697, 698);
	  COL_TRI(696, 697, 695);
	  COL_TRI(696, 798, 697);
	  COL_TRI(697, 798, 694);
	  COL_TRI(697, 694, 698);
	  COL_TRI(275, 695, 698);
	  COL_TRI(271, 694, 696);
	  COL_TRI(366, 246, 150);
	  COL_TRI(442, 698, 271);
	  COL_TRI(442, 275, 698);
	  COL_TRI(698, 694, 271);
	  COL_TRI(699, 271, 471);
	  COL_TRI(699, 475, 271);
	  COL_TRI(475, 178, 271);
	  COL_TRI(246, 168, 150);
	  COL_TRI_INIT(SURFACE_TTM_VINES, 2);
	  COL_TRI(809, 808, 805);
	  COL_TRI(809, 805, 807);
	  COL_TRI_INIT(SURFACE_SHALLOW_QUICKSAND, 3);
	  COL_TRI(162, 437, 121);
	  COL_TRI(426, 162, 121);
	  COL_TRI(162, 436, 437);
	  COL_TRI_INIT(SURFACE_WALL_MISC, 34);
	  COL_TRI(109, 432, 15);
	  COL_TRI(109, 15, 107);
	  COL_TRI(456, 821, 223);
	  COL_TRI(821, 822, 823);
	  COL_TRI(821, 824, 822);
	  COL_TRI(456, 824, 821);
	  COL_TRI(223, 821, 823);
	  COL_TRI(227, 822, 824);
	  COL_TRI(227, 824, 456);
	  COL_TRI(226, 823, 822);
	  COL_TRI(226, 822, 227);
	  COL_TRI(223, 823, 226);
	  COL_TRI(210, 826, 211);
	  COL_TRI(210, 827, 826);
	  COL_TRI(233, 827, 210);
	  COL_TRI(233, 828, 827);
	  COL_TRI(211, 826, 829);
	  COL_TRI(232, 828, 233);
	  COL_TRI(232, 825, 828);
	  COL_TRI(211, 829, 212);
	  COL_TRI(212, 829, 830);
	  COL_TRI(212, 830, 445);
	  COL_TRI(825, 232, 445);
	  COL_TRI(445, 830, 825);
	  COL_TRI(179, 441, 192);
	  COL_TRI(189, 184, 277);
	  COL_TRI(277, 232, 189);
	  COL_TRI(446, 189, 280);
	  COL_TRI(280, 189, 232);
	  COL_TRI(189, 190, 184);
	  COL_TRI(179, 192, 273);
	  COL_TRI(446, 280, 491);
	  COL_TRI(286, 273, 192);
	  COL_TRI(286, 192, 194);
	  COL_TRI_INIT(SURFACE_VERTICAL_WIND, 12);
	  COL_TRI(860, 861, 862);
	  COL_TRI(863, 864, 861);
	  COL_TRI(861, 865, 863);
	  COL_TRI(863, 866, 864);
	  COL_TRI(867, 864, 866);
	  COL_TRI(864, 868, 861);
	  COL_TRI(861, 860, 865);
	  COL_TRI(867, 866, 869);
	  COL_TRI(867, 870, 871);
	  COL_TRI(867, 872, 870);
	  COL_TRI(867, 873, 872);
	  COL_TRI(867, 869, 873);
	  COL_TRI_INIT(SURFACE_CAMERA_ROTATE_LEFT, 8);
	  COL_TRI(106, 15, 163);
	  COL_TRI(15, 164, 163);
	  COL_TRI(439, 440, 109);
	  COL_TRI(440, 432, 109);
	  COL_TRI(161, 191, 173);
	  COL_TRI(161, 173, 110);
	  COL_TRI(173, 439, 110);
	  COL_TRI(439, 109, 110);
	  COL_TRI_INIT(SURFACE_NO_CAM_COLLISION, 42);
	  COL_TRI(841, 839, 838);
	  COL_TRI(831, 832, 833);
	  COL_TRI(833, 832, 834);
	  COL_TRI(833, 834, 312);
	  COL_TRI(831, 835, 832);
	  COL_TRI(312, 834, 836);
	  COL_TRI(312, 836, 837);
	  COL_TRI(837, 835, 831);
	  COL_TRI(837, 836, 835);
	  COL_TRI(838, 839, 840);
	  COL_TRI(838, 840, 310);
	  COL_TRI(841, 842, 839);
	  COL_TRI(310, 840, 843);
	  COL_TRI(310, 843, 844);
	  COL_TRI(844, 842, 841);
	  COL_TRI(844, 843, 842);
	  COL_TRI(845, 853, 847);
	  COL_TRI(845, 846, 853);
	  COL_TRI(846, 845, 848);
	  COL_TRI(850, 2, 856);
	  COL_TRI(847, 853, 1);
	  COL_TRI(847, 1, 855);
	  COL_TRI(845, 854, 848);
	  COL_TRI(848, 854, 855);
	  COL_TRI(848, 855, 1);
	  COL_TRI(849, 856, 857);
	  COL_TRI(849, 857, 851);
	  COL_TRI(850, 856, 849);
	  COL_TRI(851, 857, 858);
	  COL_TRI(852, 2, 850);
	  COL_TRI(852, 858, 2);
	  COL_TRI(851, 858, 852);
	  COL_TRI(189, 492, 859);
	  COL_TRI(492, 316, 859);
	  COL_TRI(699, 471, 813);
	  COL_TRI(813, 814, 699);
	  COL_TRI(812, 813, 471);
	  COL_TRI(471, 810, 812);
	  COL_TRI(470, 810, 471);
	  COL_TRI(470, 262, 477);
	  COL_TRI(477, 810, 470);
	  COL_TRI(282, 811, 288);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_A6, 3);
	  COL_TRI(138, 137, 817);
	  COL_TRI(817, 137, 129);
	  COL_TRI(818, 817, 129);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_A7, 4);
	  COL_TRI(515, 138, 817);
	  COL_TRI(515, 817, 796);
	  COL_TRI(515, 796, 816);
	  COL_TRI(796, 817, 818);
	  COL_TRI_INIT(SURFACE_PAINTING_WOBBLE_A8, 2);
	  COL_TRI(135, 816, 795);
	  COL_TRI(135, 515, 816);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_D3, 2);
	  COL_TRI(820, 165, 364);
	  COL_TRI(165, 431, 364);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_D4, 2);
	  COL_TRI(819, 820, 365);
	  COL_TRI(820, 364, 365);
	  COL_TRI_INIT(SURFACE_PAINTING_WARP_D5, 2);
	  COL_TRI(516, 819, 365);
	  COL_TRI(516, 430, 819);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(29);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start,   /*pos*/   102, -4332,  5734, /*yaw*/ 32); // unused, probably an early way to set initial position
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03, /*pos*/ -3276, -4423, -3685, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03, /*pos*/  7293, -5056,  1429, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_03, /*pos*/  4938, -5568,  5115, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_04, /*pos*/  4198, -4508, -2866, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_04, /*pos*/  1470, -4507, -4298, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_04, /*pos*/  3277, -4508, -4095, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_05, /*pos*/  3891, -4489, -3532, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_05, /*pos*/  3277, -4489, -3071, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_05, /*pos*/  2509, -4489, -3378, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_05, /*pos*/   534, -4490, -4176, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_06, /*pos*/  2358, -4594, -4386, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_06, /*pos*/  1843, -4515, -3583, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_06, /*pos*/  2317, -4635, -3838, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_07, /*pos*/   102, -4363,  5734, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_08, /*pos*/  4710, -4656,  -101, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_09, /*pos*/  5018, -4249, -3481, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0A, /*pos*/  -306, -3356,  3584, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0B, /*pos*/  1434, -2279,  3277, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0C, /*pos*/  2970, -1854,  4301, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0D, /*pos*/  4608, -1854,  2560, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0F, /*pos*/  2355,  1309,  1229, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_10, /*pos*/  1843,  1295,  1024, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_11, /*pos*/   819,  2349,  -101, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_12, /*pos*/ -1945,  -918, -3071, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_13, /*pos*/ -1842, -1791, -2866, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_14, /*pos*/ -1228,  -613, -3071, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_15, /*pos*/ -1740,  -204, -2354, /*yaw*/  0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_16, /*pos*/ -2764, -2661,  3789, /*yaw*/  0);
	  COL_WATER_BOX_INIT(4);
	  COL_WATER_BOX(0, -2047, 2765, 1946, 5069, -4402);
	  COL_WATER_BOX(2, 2358, 2849, 3792, 3474, -3839);
	  COL_WATER_BOX(1, 1972, 3481, 3641, 4505, -4095);
	  COL_WATER_BOX(3, 1586, 898, 3583, 2751, -1637);
	  COL_END();
	}

	function ttm_seg7_area_2_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x1BC);
	  COL_VERTEX(-4240, -614, -3950);
	  COL_VERTEX(-3827, -419, -3538);
	  COL_VERTEX(-3248, -419, -4117);
	  COL_VERTEX(-3660, -614, -4529);
	  COL_VERTEX(8192, -5017, -8191);
	  COL_VERTEX(-8191, -5017, 8192);
	  COL_VERTEX(8192, -5017, 8192);
	  COL_VERTEX(-8191, -5017, -8191);
	  COL_VERTEX(6179, 4781, 5310);
	  COL_VERTEX(6252, 4781, 6541);
	  COL_VERTEX(6831, 4781, 5962);
	  COL_VERTEX(5600, 4781, 5890);
	  COL_VERTEX(6541, 4781, 7700);
	  COL_VERTEX(7989, 4781, 6252);
	  COL_VERTEX(7265, 4781, 5528);
	  COL_VERTEX(5817, 4781, 6976);
	  COL_VERTEX(6324, 4883, 5310);
	  COL_VERTEX(6252, 4883, 5383);
	  COL_VERTEX(6831, 4883, 5962);
	  COL_VERTEX(6903, 4883, 5890);
	  COL_VERTEX(5672, 4883, 5962);
	  COL_VERTEX(5600, 4883, 6034);
	  COL_VERTEX(6179, 4883, 6614);
	  COL_VERTEX(6252, 4883, 6541);
	  COL_VERTEX(5672, 4781, 5962);
	  COL_VERTEX(6252, 4781, 5383);
	  COL_VERTEX(6107, 5242, 5528);
	  COL_VERTEX(5817, 5242, 5817);
	  COL_VERTEX(6179, 5191, 5455);
	  COL_VERTEX(5817, 5344, 5817);
	  COL_VERTEX(-3422, -228, -3132);
	  COL_VERTEX(-3422, -120, -3132);
	  COL_VERTEX(-68, 1096, -937);
	  COL_VERTEX(-141, 1044, -1010);
	  COL_VERTEX(-96, 1139, -1110);
	  COL_VERTEX(-748, 1139, -458);
	  COL_VERTEX(3, 1198, -865);
	  COL_VERTEX(257, 1915, -611);
	  COL_VERTEX(329, 2017, -539);
	  COL_VERTEX(402, 2068, -466);
	  COL_VERTEX(510, 2120, -358);
	  COL_VERTEX(655, 2171, -213);
	  COL_VERTEX(642, 2272, -226);
	  COL_VERTEX(945, 2222, 76);
	  COL_VERTEX(1089, 2273, 220);
	  COL_VERTEX(1198, 2324, 329);
	  COL_VERTEX(2284, 3092, 1415);
	  COL_VERTEX(2429, 3144, 1560);
	  COL_VERTEX(2719, 3195, 1850);
	  COL_VERTEX(2843, 3344, 1974);
	  COL_VERTEX(2863, 3246, 1994);
	  COL_VERTEX(2972, 3297, 2103);
	  COL_VERTEX(2944, 3392, 2075);
	  COL_VERTEX(3044, 3348, 2175);
	  COL_VERTEX(3225, 3604, 2356);
	  COL_VERTEX(3298, 3656, 2429);
	  COL_VERTEX(3406, 3707, 2537);
	  COL_VERTEX(3551, 3758, 2682);
	  COL_VERTEX(3986, 3809, 3117);
	  COL_VERTEX(4275, 3860, 3406);
	  COL_VERTEX(4420, 3912, 3551);
	  COL_VERTEX(4529, 3963, 3660);
	  COL_VERTEX(4601, 4014, 3732);
	  COL_VERTEX(4710, 4168, 3841);
	  COL_VERTEX(4782, 4219, 3913);
	  COL_VERTEX(4891, 4270, 4022);
	  COL_VERTEX(5036, 4321, 4167);
	  COL_VERTEX(5217, 4372, 4348);
	  COL_VERTEX(6158, 4879, 5290);
	  COL_VERTEX(6179, 4877, 5310);
	  COL_VERTEX(642, 2528, -226);
	  COL_VERTEX(714, 2552, -299);
	  COL_VERTEX(605, 2630, -190);
	  COL_VERTEX(665, 2691, -250);
	  COL_VERTEX(569, 2681, -154);
	  COL_VERTEX(497, 2733, -82);
	  COL_VERTEX(424, 2733, -154);
	  COL_VERTEX(207, 2733, 207);
	  COL_VERTEX(135, 2733, 135);
	  COL_VERTEX(135, 2681, 279);
	  COL_VERTEX(99, 2630, 316);
	  COL_VERTEX(39, 2691, 375);
	  COL_VERTEX(62, 2528, 352);
	  COL_VERTEX(62, 2272, 352);
	  COL_VERTEX(62, 2681, 207);
	  COL_VERTEX(26, 2630, 243);
	  COL_VERTEX(569, 2528, -299);
	  COL_VERTEX(533, 2630, -263);
	  COL_VERTEX(497, 2681, -226);
	  COL_VERTEX(-7548, -1533, -4074);
	  COL_VERTEX(-7961, -2076, -3611);
	  COL_VERTEX(-8053, -1636, -3710);
	  COL_VERTEX(-8019, -1533, -4545);
	  COL_VERTEX(-8191, -1566, -4441);
	  COL_VERTEX(-7222, -919, -5486);
	  COL_VERTEX(-7005, -1124, -5269);
	  COL_VERTEX(-7114, -1072, -5378);
	  COL_VERTEX(-8127, -1380, -4653);
	  COL_VERTEX(-4416, -765, -5285);
	  COL_VERTEX(-4633, -663, -5502);
	  COL_VERTEX(-4416, -560, -5285);
	  COL_VERTEX(-4669, -816, -5466);
	  COL_VERTEX(-5310, -663, -6165);
	  COL_VERTEX(-4452, -919, -5249);
	  COL_VERTEX(-4706, -970, -5430);
	  COL_VERTEX(-5340, -816, -6123);
	  COL_VERTEX(-5613, -816, -6270);
	  COL_VERTEX(-5430, -970, -5999);
	  COL_VERTEX(-5521, -1021, -5875);
	  COL_VERTEX(-4778, -1021, -5357);
	  COL_VERTEX(-5845, -970, -6178);
	  COL_VERTEX(-5672, -970, -6128);
	  COL_VERTEX(-5731, -1021, -5986);
	  COL_VERTEX(-5943, -1533, -5572);
	  COL_VERTEX(-5792, -1533, -5502);
	  COL_VERTEX(-5310, -560, -6165);
	  COL_VERTEX(-4633, -560, -5502);
	  COL_VERTEX(-5594, -560, -6317);
	  COL_VERTEX(-5594, -663, -6317);
	  COL_VERTEX(-5812, -663, -6381);
	  COL_VERTEX(-5820, -816, -6330);
	  COL_VERTEX(-5869, -1021, -6027);
	  COL_VERTEX(-5812, -560, -6381);
	  COL_VERTEX(-6090, -816, -6330);
	  COL_VERTEX(-6041, -1021, -6027);
	  COL_VERTEX(-6065, -970, -6178);
	  COL_VERTEX(-5967, -1533, -5572);
	  COL_VERTEX(-6098, -560, -6381);
	  COL_VERTEX(-6098, -663, -6381);
	  COL_VERTEX(-6179, -1021, -5986);
	  COL_VERTEX(-6238, -970, -6128);
	  COL_VERTEX(-6003, -1533, -5560);
	  COL_VERTEX(-6316, -560, -6317);
	  COL_VERTEX(-6316, -663, -6317);
	  COL_VERTEX(-6297, -816, -6270);
	  COL_VERTEX(-6824, -970, -5667);
	  COL_VERTEX(-6481, -970, -5999);
	  COL_VERTEX(-6391, -1021, -5875);
	  COL_VERTEX(-6121, -1533, -5501);
	  COL_VERTEX(-6600, -560, -6165);
	  COL_VERTEX(-6600, -663, -6165);
	  COL_VERTEX(-6570, -816, -6124);
	  COL_VERTEX(-6969, -663, -5812);
	  COL_VERTEX(-6932, -816, -5776);
	  COL_VERTEX(-6715, -1021, -5559);
	  COL_VERTEX(-6389, -1533, -5233);
	  COL_VERTEX(-6389, -1021, -5233);
	  COL_VERTEX(-6969, -560, -5812);
	  COL_VERTEX(-6679, -1124, -4943);
	  COL_VERTEX(-6679, -1636, -4943);
	  COL_VERTEX(-4524, -970, -5176);
	  COL_VERTEX(-2915, 334, -3639);
	  COL_VERTEX(-2879, 283, -3675);
	  COL_VERTEX(-2842, -279, -3712);
	  COL_VERTEX(-2987, 385, -3567);
	  COL_VERTEX(-3277, 385, -3277);
	  COL_VERTEX(-3349, 334, -3205);
	  COL_VERTEX(-3386, 283, -3168);
	  COL_VERTEX(-3422, 180, -3132);
	  COL_VERTEX(-4240, -665, -3950);
	  COL_VERTEX(-3954, -69, -4099);
	  COL_VERTEX(5962, 4781, 6976);
	  COL_VERTEX(7917, 4781, 6324);
	  COL_VERTEX(6759, 4986, 6179);
	  COL_VERTEX(7265, 5600, 5672);
	  COL_VERTEX(5962, 5600, 6976);
	  COL_VERTEX(5817, 5703, 6976);
	  COL_VERTEX(6396, 4781, 6397);
	  COL_VERTEX(6396, 4986, 6397);
	  COL_VERTEX(6469, 5088, 6324);
	  COL_VERTEX(6686, 5088, 6252);
	  COL_VERTEX(6541, 5088, 6397);
	  COL_VERTEX(6324, 4781, 5310);
	  COL_VERTEX(5528, 4781, 5962);
	  COL_VERTEX(5709, 5139, 5926);
	  COL_VERTEX(5672, 5037, 5962);
	  COL_VERTEX(5528, 5061, 5962);
	  COL_VERTEX(4203, 4219, 4493);
	  COL_VERTEX(4130, 4168, 4420);
	  COL_VERTEX(4022, 4014, 4311);
	  COL_VERTEX(3949, 3963, 4239);
	  COL_VERTEX(3841, 3912, 4130);
	  COL_VERTEX(3696, 3860, 3986);
	  COL_VERTEX(3406, 3809, 3696);
	  COL_VERTEX(2972, 3758, 3262);
	  COL_VERTEX(2827, 3707, 3117);
	  COL_VERTEX(2719, 3656, 3008);
	  COL_VERTEX(2646, 3604, 2936);
	  COL_VERTEX(2465, 3348, 2755);
	  COL_VERTEX(2393, 3297, 2682);
	  COL_VERTEX(2284, 3246, 2574);
	  COL_VERTEX(2139, 3195, 2429);
	  COL_VERTEX(1850, 3144, 2139);
	  COL_VERTEX(1705, 3092, 1994);
	  COL_VERTEX(619, 2324, 908);
	  COL_VERTEX(510, 2273, 800);
	  COL_VERTEX(365, 2222, 655);
	  COL_VERTEX(76, 2171, 365);
	  COL_VERTEX(-68, 2120, 220);
	  COL_VERTEX(-177, 2068, 112);
	  COL_VERTEX(-249, 2017, 39);
	  COL_VERTEX(-322, 1915, -32);
	  COL_VERTEX(-575, 1198, -285);
	  COL_VERTEX(-647, 1096, -358);
	  COL_VERTEX(-720, 1044, -430);
	  COL_VERTEX(-2155, 1409, -4399);
	  COL_VERTEX(-2842, 180, -3712);
	  COL_VERTEX(-5847, -1559, -707);
	  COL_VERTEX(-2155, -1559, -4399);
	  COL_VERTEX(4456, 4321, 4746);
	  COL_VERTEX(4637, 4372, 4927);
	  COL_VERTEX(4620, 4472, 4909);
	  COL_VERTEX(4312, 4270, 4601);
	  COL_VERTEX(4175, 4314, 4465);
	  COL_VERTEX(3683, 3961, 3972);
	  COL_VERTEX(2807, 3805, 3096);
	  COL_VERTEX(2365, 3392, 2655);
	  COL_VERTEX(352, 2323, 642);
	  COL_VERTEX(-88, 2218, 200);
	  COL_VERTEX(-690, 1180, -401);
	  COL_VERTEX(4440, 4421, 4730);
	  COL_VERTEX(4291, 4368, 4581);
	  COL_VERTEX(4088, 4252, 4377);
	  COL_VERTEX(3979, 4098, 4269);
	  COL_VERTEX(3922, 4058, 4211);
	  COL_VERTEX(3821, 4010, 4110);
	  COL_VERTEX(3399, 3911, 3689);
	  COL_VERTEX(2960, 3859, 3250);
	  COL_VERTEX(2691, 3751, 2980);
	  COL_VERTEX(2603, 3689, 2893);
	  COL_VERTEX(2422, 3433, 2712);
	  COL_VERTEX(2264, 3344, 2553);
	  COL_VERTEX(2126, 3296, 2416);
	  COL_VERTEX(1836, 3245, 2126);
	  COL_VERTEX(1680, 3189, 1969);
	  COL_VERTEX(591, 2419, 880);
	  COL_VERTEX(490, 2372, 779);
	  COL_VERTEX(-205, 2163, 84);
	  COL_VERTEX(-292, 2101, -3);
	  COL_VERTEX(-381, 1976, -92);
	  COL_VERTEX(-634, 1259, -345);
	  COL_VERTEX(16, 1259, -997);
	  COL_VERTEX(-39, 1180, -1052);
	  COL_VERTEX(270, 1976, -743);
	  COL_VERTEX(359, 2101, -654);
	  COL_VERTEX(446, 2163, -567);
	  COL_VERTEX(562, 2218, -451);
	  COL_VERTEX(714, 2272, -299);
	  COL_VERTEX(1004, 2323, -9);
	  COL_VERTEX(1142, 2372, 128);
	  COL_VERTEX(1243, 2419, 229);
	  COL_VERTEX(2331, 3189, 1317);
	  COL_VERTEX(2488, 3245, 1474);
	  COL_VERTEX(2778, 3296, 1764);
	  COL_VERTEX(2916, 3344, 1902);
	  COL_VERTEX(3017, 3392, 2003);
	  COL_VERTEX(3074, 3433, 2060);
	  COL_VERTEX(3255, 3689, 2241);
	  COL_VERTEX(3342, 3751, 2329);
	  COL_VERTEX(3459, 3805, 2445);
	  COL_VERTEX(3612, 3859, 2598);
	  COL_VERTEX(4051, 3911, 3037);
	  COL_VERTEX(4334, 3961, 3321);
	  COL_VERTEX(4472, 4010, 3459);
	  COL_VERTEX(4573, 4058, 3560);
	  COL_VERTEX(4631, 4098, 3617);
	  COL_VERTEX(4739, 4252, 3726);
	  COL_VERTEX(4827, 4314, 3813);
	  COL_VERTEX(4943, 4368, 3929);
	  COL_VERTEX(5092, 4421, 4078);
	  COL_VERTEX(5271, 4472, 4258);
	  COL_VERTEX(5600, 4877, 5890);
	  COL_VERTEX(6252, 4877, 5238);
	  COL_VERTEX(3467, 4115, 2598);
	  COL_VERTEX(3539, 4115, 2670);
	  COL_VERTEX(3539, 3859, 2670);
	  COL_VERTEX(3503, 4218, 2707);
	  COL_VERTEX(2924, 4218, 3141);
	  COL_VERTEX(2960, 4269, 3105);
	  COL_VERTEX(3033, 4320, 3032);
	  COL_VERTEX(3322, 4320, 2743);
	  COL_VERTEX(3395, 4320, 2815);
	  COL_VERTEX(3105, 4320, 3105);
	  COL_VERTEX(3431, 4218, 2634);
	  COL_VERTEX(3395, 4269, 2670);
	  COL_VERTEX(3467, 4269, 2743);
	  COL_VERTEX(3088, 4423, 3122);
	  COL_VERTEX(3033, 4269, 3177);
	  COL_VERTEX(2996, 4218, 3213);
	  COL_VERTEX(2960, 4115, 3250);
	  COL_VERTEX(5636, 5139, 5853);
	  COL_VERTEX(5745, 5191, 5890);
	  COL_VERTEX(5577, 5200, 5913);
	  COL_VERTEX(5630, 5275, 5860);
	  COL_VERTEX(6034, 5242, 5455);
	  COL_VERTEX(5745, 5242, 5745);
	  COL_VERTEX(6215, 5139, 5419);
	  COL_VERTEX(6107, 5191, 5383);
	  COL_VERTEX(6150, 5275, 5340);
	  COL_VERTEX(6052, 5344, 5438);
	  COL_VERTEX(6252, 5037, 5383);
	  COL_VERTEX(6324, 5061, 5310);
	  COL_VERTEX(6203, 5200, 5287);
	  COL_VERTEX(6179, 5037, 5310);
	  COL_VERTEX(5672, 5191, 5817);
	  COL_VERTEX(6143, 5139, 5347);
	  COL_VERTEX(5728, 5344, 5762);
	  COL_VERTEX(6124, 5344, 5511);
	  COL_VERTEX(6107, 5344, 5528);
	  COL_VERTEX(6222, 5275, 5412);
	  COL_VERTEX(5800, 5344, 5834);
	  COL_VERTEX(5702, 5275, 5933);
	  COL_VERTEX(-168, 1139, -1037);
	  COL_VERTEX(-2842, -120, -3712);
	  COL_VERTEX(-2842, -228, -3712);
	  COL_VERTEX(-2770, -120, -3784);
	  COL_VERTEX(-111, 1180, -980);
	  COL_VERTEX(-3494, -120, -3060);
	  COL_VERTEX(-820, 1139, -386);
	  COL_VERTEX(-55, 1259, -924);
	  COL_VERTEX(197, 1976, -671);
	  COL_VERTEX(286, 2101, -582);
	  COL_VERTEX(374, 2163, -494);
	  COL_VERTEX(490, 2218, -378);
	  COL_VERTEX(931, 2323, 62);
	  COL_VERTEX(1069, 2372, 200);
	  COL_VERTEX(1170, 2419, 301);
	  COL_VERTEX(2259, 3189, 1390);
	  COL_VERTEX(2416, 3245, 1547);
	  COL_VERTEX(2705, 3296, 1836);
	  COL_VERTEX(3002, 3433, 2133);
	  COL_VERTEX(3183, 3689, 2314);
	  COL_VERTEX(3270, 3751, 2401);
	  COL_VERTEX(3386, 3805, 2517);
	  COL_VERTEX(3978, 3911, 3109);
	  COL_VERTEX(4262, 3961, 3393);
	  COL_VERTEX(4400, 4010, 3531);
	  COL_VERTEX(4501, 4058, 3632);
	  COL_VERTEX(4558, 4098, 3689);
	  COL_VERTEX(4667, 4252, 3798);
	  COL_VERTEX(4754, 4314, 3885);
	  COL_VERTEX(4871, 4368, 4002);
	  COL_VERTEX(5020, 4421, 4151);
	  COL_VERTEX(5199, 4472, 4330);
	  COL_VERTEX(569, 2246, -299);
	  COL_VERTEX(612, 2765, -197);
	  COL_VERTEX(514, 2835, -99);
	  COL_VERTEX(190, 2835, 224);
	  COL_VERTEX(92, 2765, 322);
	  COL_VERTEX(-9, 2552, 424);
	  COL_VERTEX(-9, 2272, 424);
	  COL_VERTEX(-9, 2528, 279);
	  COL_VERTEX(-9, 2246, 279);
	  COL_VERTEX(-8191, -1598, -4166);
	  COL_VERTEX(-8191, -1636, -3848);
	  COL_VERTEX(-7548, -2045, -4074);
	  COL_VERTEX(-7961, -1564, -3611);
	  COL_VERTEX(-8191, -1417, -4590);
	  COL_VERTEX(-7258, -765, -5522);
	  COL_VERTEX(-7258, -663, -5522);
	  COL_VERTEX(-5907, -1021, -5560);
	  COL_VERTEX(-5792, -1021, -5502);
	  COL_VERTEX(-5212, -1021, -4923);
	  COL_VERTEX(-5943, -1021, -5572);
	  COL_VERTEX(-5907, -1533, -5560);
	  COL_VERTEX(-5967, -1021, -5572);
	  COL_VERTEX(-6003, -1021, -5560);
	  COL_VERTEX(-6121, -1021, -5501);
	  COL_VERTEX(-4995, -970, -4706);
	  COL_VERTEX(-3696, -102, -4493);
	  COL_VERTEX(-3660, -204, -4529);
	  COL_VERTEX(-3733, -51, -4457);
	  COL_VERTEX(-3805, 0, -4385);
	  COL_VERTEX(-4095, 0, -4095);
	  COL_VERTEX(-4167, -51, -4023);
	  COL_VERTEX(-3660, -665, -4529);
	  COL_VERTEX(-4203, -102, -3986);
	  COL_VERTEX(-4240, -204, -3950);
	  COL_VERTEX(-3422, -279, -3132);
	  COL_VERTEX(-3809, 32, -4243);
	  COL_VERTEX(-3954, 32, -4099);
	  COL_VERTEX(-3809, -69, -4243);
	  COL_VERTEX(6614, 5600, 7627);
	  COL_VERTEX(6614, 4781, 7627);
	  COL_VERTEX(7917, 5600, 6324);
	  COL_VERTEX(7265, 4781, 5672);
	  COL_VERTEX(6759, 4781, 6179);
	  COL_VERTEX(6469, 4986, 6469);
	  COL_VERTEX(6469, 4781, 6469);
	  COL_VERTEX(7265, 5703, 5528);
	  COL_VERTEX(6614, 5088, 6179);
	  COL_VERTEX(6686, 4986, 6107);
	  COL_VERTEX(6686, 4781, 6107);
	  COL_VERTEX(6252, 5061, 5238);
	  COL_VERTEX(6252, 4781, 5238);
	  COL_VERTEX(5600, 5061, 6034);
	  COL_VERTEX(5600, 4781, 6034);
	  COL_VERTEX(5649, 5200, 5985);
	  COL_VERTEX(5600, 5037, 5890);
	  COL_VERTEX(-5847, 1409, -707);
	  COL_VERTEX(5579, 4879, 5869);
	  COL_VERTEX(5507, 4879, 5941);
	  COL_VERTEX(4547, 4472, 4982);
	  COL_VERTEX(4368, 4421, 4802);
	  COL_VERTEX(4219, 4368, 4653);
	  COL_VERTEX(4103, 4314, 4537);
	  COL_VERTEX(3907, 4098, 4341);
	  COL_VERTEX(4015, 4252, 4450);
	  COL_VERTEX(3849, 4058, 4284);
	  COL_VERTEX(3748, 4010, 4183);
	  COL_VERTEX(3610, 3961, 4045);
	  COL_VERTEX(3327, 3911, 3761);
	  COL_VERTEX(2888, 3859, 3322);
	  COL_VERTEX(2734, 3805, 3169);
	  COL_VERTEX(2618, 3751, 3053);
	  COL_VERTEX(2531, 3689, 2965);
	  COL_VERTEX(2350, 3433, 2784);
	  COL_VERTEX(2293, 3392, 2727);
	  COL_VERTEX(2191, 3344, 2626);
	  COL_VERTEX(2054, 3296, 2488);
	  COL_VERTEX(1764, 3245, 2198);
	  COL_VERTEX(1607, 3189, 2042);
	  COL_VERTEX(519, 2419, 953);
	  COL_VERTEX(417, 2372, 852);
	  COL_VERTEX(280, 2323, 714);
	  COL_VERTEX(-161, 2218, 273);
	  COL_VERTEX(-277, 2163, 156);
	  COL_VERTEX(-364, 2101, 69);
	  COL_VERTEX(-453, 1976, -19);
	  COL_VERTEX(-707, 1259, -273);
	  COL_VERTEX(-763, 1180, -328);
	  COL_VERTEX(6231, 4879, 5217);
	  COL_VERTEX(5528, 4877, 5962);
	  COL_VERTEX(3467, 3834, 2598);
	  COL_VERTEX(3612, 4140, 2598);
	  COL_VERTEX(3563, 4278, 2647);
	  COL_VERTEX(3510, 4353, 2700);
	  COL_VERTEX(2888, 4115, 3177);
	  COL_VERTEX(3412, 4423, 2798);
	  COL_VERTEX(2990, 4353, 3220);
	  COL_VERTEX(2937, 4278, 3273);
	  COL_VERTEX(2888, 4140, 3322);
	  COL_VERTEX(2888, 3834, 3177);
	  COL_VERTEX(6275, 5200, 5359);
	  COL_TRI_INIT(SURFACE_DEFAULT, 658);
	  COL_TRI(25, 10, 18);
	  COL_TRI(16, 17, 18);
	  COL_TRI(16, 18, 19);
	  COL_TRI(20, 21, 22);
	  COL_TRI(20, 22, 23);
	  COL_TRI(20, 23, 24);
	  COL_TRI(23, 9, 24);
	  COL_TRI(25, 18, 17);
	  COL_TRI(26, 307, 308);
	  COL_TRI(27, 26, 308);
	  COL_TRI(28, 307, 26);
	  COL_TRI(28, 309, 307);
	  COL_TRI(27, 308, 29);
	  COL_TRI(29, 310, 27);
	  COL_TRI(27, 310, 311);
	  COL_TRI(30, 31, 204);
	  COL_TRI(31, 35, 204);
	  COL_TRI(32, 312, 33);
	  COL_TRI(33, 312, 313);
	  COL_TRI(33, 313, 314);
	  COL_TRI(34, 313, 312);
	  COL_TRI(34, 315, 313);
	  COL_TRI(32, 316, 312);
	  COL_TRI(39, 321, 38);
	  COL_TRI(35, 317, 318);
	  COL_TRI(35, 31, 317);
	  COL_TRI(36, 316, 32);
	  COL_TRI(36, 319, 316);
	  COL_TRI(37, 319, 36);
	  COL_TRI(37, 320, 319);
	  COL_TRI(38, 320, 37);
	  COL_TRI(38, 321, 320);
	  COL_TRI(45, 326, 325);
	  COL_TRI(39, 322, 321);
	  COL_TRI(40, 322, 39);
	  COL_TRI(40, 323, 322);
	  COL_TRI(41, 42, 40);
	  COL_TRI(42, 323, 40);
	  COL_TRI(43, 42, 41);
	  COL_TRI(43, 324, 42);
	  COL_TRI(44, 324, 43);
	  COL_TRI(44, 325, 324);
	  COL_TRI(45, 325, 44);
	  COL_TRI(53, 52, 51);
	  COL_TRI(46, 326, 45);
	  COL_TRI(46, 327, 326);
	  COL_TRI(47, 327, 46);
	  COL_TRI(47, 328, 327);
	  COL_TRI(48, 328, 47);
	  COL_TRI(48, 329, 328);
	  COL_TRI(49, 329, 48);
	  COL_TRI(50, 49, 48);
	  COL_TRI(51, 52, 50);
	  COL_TRI(52, 49, 50);
	  COL_TRI(58, 334, 275);
	  COL_TRI(53, 330, 52);
	  COL_TRI(54, 330, 53);
	  COL_TRI(54, 331, 330);
	  COL_TRI(55, 331, 54);
	  COL_TRI(55, 332, 331);
	  COL_TRI(56, 332, 55);
	  COL_TRI(56, 333, 332);
	  COL_TRI(57, 333, 56);
	  COL_TRI(57, 275, 333);
	  COL_TRI(58, 275, 57);
	  COL_TRI(64, 339, 63);
	  COL_TRI(59, 334, 58);
	  COL_TRI(59, 335, 334);
	  COL_TRI(60, 335, 59);
	  COL_TRI(60, 336, 335);
	  COL_TRI(61, 336, 60);
	  COL_TRI(61, 337, 336);
	  COL_TRI(62, 337, 61);
	  COL_TRI(62, 338, 337);
	  COL_TRI(63, 338, 62);
	  COL_TRI(63, 339, 338);
	  COL_TRI(64, 340, 339);
	  COL_TRI(65, 340, 64);
	  COL_TRI(65, 341, 340);
	  COL_TRI(66, 341, 65);
	  COL_TRI(66, 342, 341);
	  COL_TRI(67, 342, 66);
	  COL_TRI(67, 343, 342);
	  COL_TRI(8, 68, 67);
	  COL_TRI(68, 343, 67);
	  COL_TRI(69, 68, 8);
	  COL_TRI(70, 344, 42);
	  COL_TRI(42, 247, 71);
	  COL_TRI(42, 71, 70);
	  COL_TRI(70, 71, 72);
	  COL_TRI(71, 73, 72);
	  COL_TRI(72, 73, 74);
	  COL_TRI(73, 345, 74);
	  COL_TRI(74, 345, 346);
	  COL_TRI(74, 346, 75);
	  COL_TRI(75, 346, 347);
	  COL_TRI(76, 75, 77);
	  COL_TRI(75, 347, 77);
	  COL_TRI(77, 347, 348);
	  COL_TRI(76, 77, 78);
	  COL_TRI(78, 77, 79);
	  COL_TRI(77, 348, 79);
	  COL_TRI(79, 348, 81);
	  COL_TRI(79, 81, 80);
	  COL_TRI(80, 81, 82);
	  COL_TRI(81, 349, 82);
	  COL_TRI(82, 349, 350);
	  COL_TRI(82, 350, 83);
	  COL_TRI(70, 86, 344);
	  COL_TRI(83, 351, 82);
	  COL_TRI(83, 352, 351);
	  COL_TRI(84, 80, 85);
	  COL_TRI(85, 82, 351);
	  COL_TRI(85, 80, 82);
	  COL_TRI(84, 79, 80);
	  COL_TRI(78, 79, 84);
	  COL_TRI(86, 72, 87);
	  COL_TRI(86, 70, 72);
	  COL_TRI(87, 72, 74);
	  COL_TRI(87, 74, 88);
	  COL_TRI(88, 75, 76);
	  COL_TRI(88, 74, 75);
	  COL_TRI(89, 92, 353);
	  COL_TRI(89, 353, 354);
	  COL_TRI(89, 354, 91);
	  COL_TRI(90, 355, 89);
	  COL_TRI(90, 89, 356);
	  COL_TRI(91, 356, 89);
	  COL_TRI(89, 355, 148);
	  COL_TRI(92, 93, 353);
	  COL_TRI(93, 92, 97);
	  COL_TRI(94, 97, 92);
	  COL_TRI(100, 99, 98);
	  COL_TRI(93, 97, 357);
	  COL_TRI(97, 358, 359);
	  COL_TRI(94, 358, 97);
	  COL_TRI(98, 101, 104);
	  COL_TRI(98, 104, 103);
	  COL_TRI(3, 100, 98);
	  COL_TRI(98, 103, 3);
	  COL_TRI(99, 101, 98);
	  COL_TRI(105, 106, 107);
	  COL_TRI(101, 105, 107);
	  COL_TRI(102, 105, 101);
	  COL_TRI(99, 102, 101);
	  COL_TRI(101, 107, 104);
	  COL_TRI(103, 104, 109);
	  COL_TRI(104, 107, 108);
	  COL_TRI(104, 108, 109);
	  COL_TRI(3, 103, 150);
	  COL_TRI(103, 109, 150);
	  COL_TRI(102, 106, 105);
	  COL_TRI(106, 111, 107);
	  COL_TRI(107, 111, 112);
	  COL_TRI(107, 112, 108);
	  COL_TRI(108, 112, 360);
	  COL_TRI(108, 360, 361);
	  COL_TRI(109, 108, 361);
	  COL_TRI(110, 121, 112);
	  COL_TRI(111, 110, 112);
	  COL_TRI(112, 363, 360);
	  COL_TRI(112, 121, 363);
	  COL_TRI(113, 364, 360);
	  COL_TRI(113, 360, 363);
	  COL_TRI(114, 361, 360);
	  COL_TRI(109, 361, 362);
	  COL_TRI(115, 117, 118);
	  COL_TRI(115, 118, 102);
	  COL_TRI(115, 102, 99);
	  COL_TRI(116, 115, 99);
	  COL_TRI(117, 122, 119);
	  COL_TRI(117, 119, 118);
	  COL_TRI(118, 119, 106);
	  COL_TRI(102, 118, 106);
	  COL_TRI(106, 120, 111);
	  COL_TRI(119, 120, 106);
	  COL_TRI(120, 110, 111);
	  COL_TRI(121, 365, 363);
	  COL_TRI(121, 124, 365);
	  COL_TRI(110, 124, 121);
	  COL_TRI(122, 127, 128);
	  COL_TRI(122, 128, 119);
	  COL_TRI(127, 133, 128);
	  COL_TRI(119, 128, 123);
	  COL_TRI(119, 123, 120);
	  COL_TRI(120, 123, 110);
	  COL_TRI(123, 125, 110);
	  COL_TRI(110, 125, 124);
	  COL_TRI(124, 366, 365);
	  COL_TRI(124, 129, 366);
	  COL_TRI(125, 129, 124);
	  COL_TRI(126, 363, 365);
	  COL_TRI(127, 132, 133);
	  COL_TRI(132, 140, 133);
	  COL_TRI(128, 134, 123);
	  COL_TRI(128, 133, 134);
	  COL_TRI(123, 134, 130);
	  COL_TRI(123, 130, 125);
	  COL_TRI(125, 130, 129);
	  COL_TRI(129, 367, 366);
	  COL_TRI(129, 137, 367);
	  COL_TRI(130, 137, 129);
	  COL_TRI(131, 365, 366);
	  COL_TRI(132, 139, 140);
	  COL_TRI(133, 140, 141);
	  COL_TRI(133, 141, 134);
	  COL_TRI(134, 141, 136);
	  COL_TRI(134, 136, 130);
	  COL_TRI(130, 136, 137);
	  COL_TRI(135, 144, 137);
	  COL_TRI(136, 135, 137);
	  COL_TRI(137, 146, 367);
	  COL_TRI(137, 144, 146);
	  COL_TRI(138, 366, 367);
	  COL_TRI(146, 148, 145);
	  COL_TRI(139, 147, 142);
	  COL_TRI(139, 142, 140);
	  COL_TRI(140, 142, 141);
	  COL_TRI(141, 143, 136);
	  COL_TRI(142, 143, 141);
	  COL_TRI(143, 135, 136);
	  COL_TRI(144, 148, 146);
	  COL_TRI(144, 95, 148);
	  COL_TRI(135, 95, 144);
	  COL_TRI(145, 367, 146);
	  COL_TRI(96, 94, 92);
	  COL_TRI(89, 95, 92);
	  COL_TRI(147, 359, 358);
	  COL_TRI(147, 358, 142);
	  COL_TRI(142, 358, 94);
	  COL_TRI(142, 94, 143);
	  COL_TRI(143, 94, 96);
	  COL_TRI(143, 96, 135);
	  COL_TRI(135, 96, 95);
	  COL_TRI(89, 148, 95);
	  COL_TRI(95, 96, 92);
	  COL_TRI(148, 149, 145);
	  COL_TRI(149, 148, 355);
	  COL_TRI(152, 369, 370);
	  COL_TRI(3, 150, 368);
	  COL_TRI(3, 368, 0);
	  COL_TRI(100, 116, 99);
	  COL_TRI(150, 109, 362);
	  COL_TRI(150, 362, 368);
	  COL_TRI(151, 369, 152);
	  COL_TRI(151, 371, 369);
	  COL_TRI(152, 370, 206);
	  COL_TRI(153, 206, 370);
	  COL_TRI(154, 371, 151);
	  COL_TRI(154, 372, 371);
	  COL_TRI(155, 372, 154);
	  COL_TRI(155, 373, 372);
	  COL_TRI(156, 373, 155);
	  COL_TRI(156, 374, 373);
	  COL_TRI(157, 374, 156);
	  COL_TRI(157, 376, 374);
	  COL_TRI(158, 376, 157);
	  COL_TRI(158, 377, 376);
	  COL_TRI(159, 377, 158);
	  COL_TRI(159, 158, 378);
	  COL_TRI(153, 370, 375);
	  COL_TRI(126, 113, 363);
	  COL_TRI(131, 126, 365);
	  COL_TRI(138, 131, 366);
	  COL_TRI(145, 138, 367);
	  COL_TRI(114, 360, 364);
	  COL_TRI(160, 379, 380);
	  COL_TRI(162, 383, 382);
	  COL_TRI(160, 381, 379);
	  COL_TRI(161, 382, 383);
	  COL_TRI(161, 165, 382);
	  COL_TRI(162, 382, 384);
	  COL_TRI(162, 384, 164);
	  COL_TRI(162, 164, 385);
	  COL_TRI(163, 385, 164);
	  COL_TRI(164, 170, 163);
	  COL_TRI(164, 165, 170);
	  COL_TRI(165, 171, 170);
	  COL_TRI(163, 386, 385);
	  COL_TRI(165, 387, 171);
	  COL_TRI(165, 388, 387);
	  COL_TRI(165, 161, 388);
	  COL_TRI(14, 392, 391);
	  COL_TRI(166, 389, 14);
	  COL_TRI(167, 15, 166);
	  COL_TRI(166, 169, 168);
	  COL_TRI(166, 390, 169);
	  COL_TRI(166, 14, 390);
	  COL_TRI(168, 167, 166);
	  COL_TRI(169, 387, 168);
	  COL_TRI(168, 388, 167);
	  COL_TRI(168, 387, 388);
	  COL_TRI(14, 391, 390);
	  COL_TRI(164, 384, 382);
	  COL_TRI(170, 390, 391);
	  COL_TRI(170, 391, 163);
	  COL_TRI(163, 391, 392);
	  COL_TRI(163, 392, 386);
	  COL_TRI(171, 390, 170);
	  COL_TRI(171, 169, 390);
	  COL_TRI(169, 171, 387);
	  COL_TRI(164, 382, 165);
	  COL_TRI(176, 397, 292);
	  COL_TRI(172, 393, 301);
	  COL_TRI(172, 394, 393);
	  COL_TRI(173, 395, 176);
	  COL_TRI(173, 396, 395);
	  COL_TRI(174, 395, 175);
	  COL_TRI(174, 397, 395);
	  COL_TRI(175, 395, 396);
	  COL_TRI(176, 395, 397);
	  COL_TRI(8, 25, 300);
	  COL_TRI(8, 300, 303);
	  COL_TRI(24, 398, 175);
	  COL_TRI(24, 11, 398);
	  COL_TRI(67, 66, 209);
	  COL_TRI(67, 209, 210);
	  COL_TRI(67, 11, 8);
	  COL_TRI(67, 210, 11);
	  COL_TRI(181, 180, 61);
	  COL_TRI(66, 212, 209);
	  COL_TRI(66, 65, 212);
	  COL_TRI(177, 212, 65);
	  COL_TRI(177, 65, 64);
	  COL_TRI(178, 177, 64);
	  COL_TRI(178, 64, 63);
	  COL_TRI(179, 178, 63);
	  COL_TRI(179, 63, 62);
	  COL_TRI(180, 179, 62);
	  COL_TRI(180, 62, 61);
	  COL_TRI(186, 56, 55);
	  COL_TRI(181, 61, 60);
	  COL_TRI(182, 181, 60);
	  COL_TRI(182, 60, 59);
	  COL_TRI(183, 182, 59);
	  COL_TRI(183, 59, 58);
	  COL_TRI(184, 183, 58);
	  COL_TRI(184, 58, 57);
	  COL_TRI(185, 184, 57);
	  COL_TRI(185, 57, 56);
	  COL_TRI(186, 185, 56);
	  COL_TRI(192, 191, 48);
	  COL_TRI(187, 186, 55);
	  COL_TRI(187, 55, 54);
	  COL_TRI(188, 187, 54);
	  COL_TRI(188, 54, 53);
	  COL_TRI(189, 188, 53);
	  COL_TRI(189, 53, 51);
	  COL_TRI(190, 189, 51);
	  COL_TRI(190, 51, 50);
	  COL_TRI(191, 190, 50);
	  COL_TRI(191, 50, 48);
	  COL_TRI(196, 44, 43);
	  COL_TRI(192, 48, 47);
	  COL_TRI(193, 192, 47);
	  COL_TRI(194, 193, 46);
	  COL_TRI(193, 47, 46);
	  COL_TRI(194, 46, 45);
	  COL_TRI(195, 194, 45);
	  COL_TRI(195, 45, 44);
	  COL_TRI(196, 195, 44);
	  COL_TRI(202, 201, 37);
	  COL_TRI(197, 196, 43);
	  COL_TRI(197, 43, 41);
	  COL_TRI(198, 197, 41);
	  COL_TRI(198, 41, 40);
	  COL_TRI(199, 198, 40);
	  COL_TRI(199, 40, 39);
	  COL_TRI(200, 199, 39);
	  COL_TRI(200, 39, 38);
	  COL_TRI(201, 38, 37);
	  COL_TRI(201, 200, 38);
	  COL_TRI(202, 37, 36);
	  COL_TRI(203, 202, 36);
	  COL_TRI(203, 36, 32);
	  COL_TRI(204, 203, 32);
	  COL_TRI(204, 32, 33);
	  COL_TRI(30, 204, 33);
	  COL_TRI(30, 33, 314);
	  COL_TRI(205, 207, 156);
	  COL_TRI(206, 208, 205);
	  COL_TRI(205, 156, 155);
	  COL_TRI(205, 152, 206);
	  COL_TRI(205, 151, 152);
	  COL_TRI(206, 153, 208);
	  COL_TRI(205, 154, 151);
	  COL_TRI(205, 155, 154);
	  COL_TRI(207, 157, 156);
	  COL_TRI(207, 158, 157);
	  COL_TRI(207, 378, 158);
	  COL_TRI(205, 399, 207);
	  COL_TRI(208, 153, 378);
	  COL_TRI(208, 378, 207);
	  COL_TRI(209, 211, 210);
	  COL_TRI(210, 211, 11);
	  COL_TRI(209, 220, 211);
	  COL_TRI(211, 400, 11);
	  COL_TRI(211, 401, 400);
	  COL_TRI(212, 220, 209);
	  COL_TRI(212, 221, 220);
	  COL_TRI(213, 221, 212);
	  COL_TRI(177, 213, 212);
	  COL_TRI(178, 213, 177);
	  COL_TRI(178, 222, 213);
	  COL_TRI(179, 222, 178);
	  COL_TRI(179, 223, 222);
	  COL_TRI(180, 223, 179);
	  COL_TRI(180, 224, 223);
	  COL_TRI(181, 224, 180);
	  COL_TRI(181, 225, 224);
	  COL_TRI(182, 214, 181);
	  COL_TRI(214, 225, 181);
	  COL_TRI(188, 229, 187);
	  COL_TRI(183, 214, 182);
	  COL_TRI(183, 226, 214);
	  COL_TRI(184, 226, 183);
	  COL_TRI(184, 227, 226);
	  COL_TRI(215, 227, 184);
	  COL_TRI(185, 215, 184);
	  COL_TRI(186, 215, 185);
	  COL_TRI(186, 228, 215);
	  COL_TRI(187, 228, 186);
	  COL_TRI(187, 229, 228);
	  COL_TRI(193, 234, 233);
	  COL_TRI(188, 230, 229);
	  COL_TRI(189, 216, 188);
	  COL_TRI(216, 230, 188);
	  COL_TRI(190, 216, 189);
	  COL_TRI(190, 231, 216);
	  COL_TRI(191, 231, 190);
	  COL_TRI(191, 232, 231);
	  COL_TRI(192, 232, 191);
	  COL_TRI(192, 233, 232);
	  COL_TRI(193, 233, 192);
	  COL_TRI(199, 218, 198);
	  COL_TRI(194, 234, 193);
	  COL_TRI(194, 235, 234);
	  COL_TRI(195, 235, 194);
	  COL_TRI(195, 236, 235);
	  COL_TRI(196, 217, 195);
	  COL_TRI(217, 236, 195);
	  COL_TRI(197, 217, 196);
	  COL_TRI(197, 83, 217);
	  COL_TRI(198, 218, 197);
	  COL_TRI(218, 83, 197);
	  COL_TRI(204, 35, 219);
	  COL_TRI(199, 237, 218);
	  COL_TRI(200, 237, 199);
	  COL_TRI(200, 238, 237);
	  COL_TRI(201, 238, 200);
	  COL_TRI(201, 239, 238);
	  COL_TRI(202, 239, 201);
	  COL_TRI(202, 240, 239);
	  COL_TRI(219, 240, 202);
	  COL_TRI(203, 219, 202);
	  COL_TRI(204, 219, 203);
	  COL_TRI(211, 402, 401);
	  COL_TRI(211, 403, 402);
	  COL_TRI(211, 220, 403);
	  COL_TRI(220, 404, 403);
	  COL_TRI(220, 221, 404);
	  COL_TRI(221, 213, 404);
	  COL_TRI(213, 222, 405);
	  COL_TRI(213, 405, 404);
	  COL_TRI(225, 214, 410);
	  COL_TRI(222, 223, 406);
	  COL_TRI(222, 406, 407);
	  COL_TRI(222, 407, 405);
	  COL_TRI(223, 408, 406);
	  COL_TRI(223, 224, 408);
	  COL_TRI(224, 409, 408);
	  COL_TRI(224, 225, 409);
	  COL_TRI(225, 410, 409);
	  COL_TRI(229, 416, 415);
	  COL_TRI(214, 411, 410);
	  COL_TRI(214, 226, 411);
	  COL_TRI(226, 412, 411);
	  COL_TRI(226, 227, 412);
	  COL_TRI(227, 413, 412);
	  COL_TRI(227, 215, 413);
	  COL_TRI(215, 414, 413);
	  COL_TRI(215, 228, 414);
	  COL_TRI(228, 415, 414);
	  COL_TRI(228, 229, 415);
	  COL_TRI(233, 234, 421);
	  COL_TRI(229, 230, 416);
	  COL_TRI(230, 417, 416);
	  COL_TRI(230, 216, 417);
	  COL_TRI(216, 418, 417);
	  COL_TRI(216, 231, 418);
	  COL_TRI(231, 419, 418);
	  COL_TRI(231, 232, 419);
	  COL_TRI(232, 420, 419);
	  COL_TRI(232, 233, 420);
	  COL_TRI(233, 421, 420);
	  COL_TRI(218, 426, 425);
	  COL_TRI(234, 422, 421);
	  COL_TRI(234, 235, 422);
	  COL_TRI(235, 423, 422);
	  COL_TRI(235, 236, 423);
	  COL_TRI(236, 424, 423);
	  COL_TRI(236, 217, 424);
	  COL_TRI(217, 350, 424);
	  COL_TRI(217, 83, 350);
	  COL_TRI(83, 425, 350);
	  COL_TRI(83, 218, 425);
	  COL_TRI(219, 35, 318);
	  COL_TRI(218, 237, 426);
	  COL_TRI(237, 427, 426);
	  COL_TRI(237, 238, 427);
	  COL_TRI(238, 428, 427);
	  COL_TRI(238, 239, 428);
	  COL_TRI(239, 429, 428);
	  COL_TRI(239, 240, 429);
	  COL_TRI(240, 430, 429);
	  COL_TRI(240, 219, 430);
	  COL_TRI(219, 318, 430);
	  COL_TRI(246, 245, 322);
	  COL_TRI(241, 242, 316);
	  COL_TRI(242, 34, 312);
	  COL_TRI(242, 312, 316);
	  COL_TRI(241, 316, 319);
	  COL_TRI(243, 241, 319);
	  COL_TRI(243, 319, 320);
	  COL_TRI(244, 243, 320);
	  COL_TRI(244, 320, 321);
	  COL_TRI(245, 244, 321);
	  COL_TRI(245, 321, 322);
	  COL_TRI(251, 326, 327);
	  COL_TRI(246, 322, 323);
	  COL_TRI(247, 246, 323);
	  COL_TRI(247, 323, 42);
	  COL_TRI(248, 247, 42);
	  COL_TRI(248, 42, 324);
	  COL_TRI(249, 248, 324);
	  COL_TRI(249, 324, 325);
	  COL_TRI(250, 249, 325);
	  COL_TRI(250, 325, 326);
	  COL_TRI(251, 250, 326);
	  COL_TRI(257, 256, 330);
	  COL_TRI(252, 251, 327);
	  COL_TRI(252, 327, 328);
	  COL_TRI(253, 252, 328);
	  COL_TRI(253, 328, 329);
	  COL_TRI(254, 253, 329);
	  COL_TRI(254, 329, 49);
	  COL_TRI(255, 254, 49);
	  COL_TRI(255, 49, 52);
	  COL_TRI(256, 255, 52);
	  COL_TRI(256, 52, 330);
	  COL_TRI(262, 334, 335);
	  COL_TRI(257, 330, 331);
	  COL_TRI(258, 257, 331);
	  COL_TRI(258, 331, 332);
	  COL_TRI(259, 258, 332);
	  COL_TRI(259, 332, 333);
	  COL_TRI(260, 259, 333);
	  COL_TRI(260, 333, 275);
	  COL_TRI(261, 260, 275);
	  COL_TRI(261, 275, 334);
	  COL_TRI(262, 261, 334);
	  COL_TRI(263, 262, 335);
	  COL_TRI(263, 335, 336);
	  COL_TRI(264, 263, 336);
	  COL_TRI(264, 336, 337);
	  COL_TRI(265, 264, 337);
	  COL_TRI(265, 337, 338);
	  COL_TRI(266, 265, 338);
	  COL_TRI(266, 339, 340);
	  COL_TRI(267, 266, 340);
	  COL_TRI(266, 338, 339);
	  COL_TRI(268, 267, 341);
	  COL_TRI(267, 340, 341);
	  COL_TRI(269, 268, 341);
	  COL_TRI(269, 341, 342);
	  COL_TRI(270, 269, 342);
	  COL_TRI(270, 342, 343);
	  COL_TRI(270, 68, 431);
	  COL_TRI(270, 343, 68);
	  COL_TRI(273, 276, 283);
	  COL_TRI(11, 400, 271);
	  COL_TRI(271, 400, 401);
	  COL_TRI(271, 401, 432);
	  COL_TRI(272, 68, 69);
	  COL_TRI(272, 431, 68);
	  COL_TRI(273, 274, 276);
	  COL_TRI(274, 433, 275);
	  COL_TRI(275, 434, 274);
	  COL_TRI(275, 260, 434);
	  COL_TRI(274, 434, 435);
	  COL_TRI(274, 435, 276);
	  COL_TRI(276, 435, 436);
	  COL_TRI(276, 436, 285);
	  COL_TRI(274, 273, 433);
	  COL_TRI(277, 289, 437);
	  COL_TRI(277, 288, 289);
	  COL_TRI(278, 288, 277);
	  COL_TRI(278, 287, 288);
	  COL_TRI(279, 287, 278);
	  COL_TRI(279, 282, 287);
	  COL_TRI(280, 282, 279);
	  COL_TRI(281, 286, 282);
	  COL_TRI(282, 286, 287);
	  COL_TRI(280, 281, 282);
	  COL_TRI(283, 285, 284);
	  COL_TRI(283, 276, 285);
	  COL_TRI(284, 285, 281);
	  COL_TRI(284, 281, 280);
	  COL_TRI(281, 438, 286);
	  COL_TRI(285, 438, 281);
	  COL_TRI(285, 436, 438);
	  COL_TRI(286, 439, 287);
	  COL_TRI(287, 440, 288);
	  COL_TRI(287, 439, 440);
	  COL_TRI(290, 174, 175);
	  COL_TRI(288, 440, 441);
	  COL_TRI(288, 441, 289);
	  COL_TRI(289, 441, 412);
	  COL_TRI(289, 412, 227);
	  COL_TRI(227, 437, 289);
	  COL_TRI(227, 442, 437);
	  COL_TRI(175, 396, 24);
	  COL_TRI(290, 175, 398);
	  COL_TRI(291, 397, 174);
	  COL_TRI(291, 311, 397);
	  COL_TRI(292, 397, 311);
	  COL_TRI(27, 311, 291);
	  COL_TRI(293, 311, 310);
	  COL_TRI(292, 311, 293);
	  COL_TRI(294, 26, 27);
	  COL_TRI(294, 27, 295);
	  COL_TRI(295, 27, 291);
	  COL_TRI(296, 309, 28);
	  COL_TRI(297, 26, 294);
	  COL_TRI(297, 28, 26);
	  COL_TRI(298, 309, 443);
	  COL_TRI(299, 309, 298);
	  COL_TRI(299, 307, 309);
	  COL_TRI(296, 443, 309);
	  COL_TRI(300, 301, 296);
	  COL_TRI(301, 443, 296);
	  COL_TRI(298, 443, 302);
	  COL_TRI(302, 443, 301);
	  COL_TRI(303, 296, 305);
	  COL_TRI(303, 300, 296);
	  COL_TRI(25, 301, 300);
	  COL_TRI(25, 172, 301);
	  COL_TRI(304, 174, 290);
	  COL_TRI(304, 291, 174);
	  COL_TRI(295, 291, 304);
	  COL_TRI(305, 28, 297);
	  COL_TRI(305, 296, 28);
	  COL_TRI(302, 301, 393);
	  COL_TRI(306, 307, 299);
	  COL_TRI(306, 310, 307);
	  COL_TRI(293, 310, 306);
	  COL_TRI(30, 314, 2);
	  COL_TRI(30, 2, 1);
	  COL_TRI_INIT(SURFACE_DEATH_PLANE, 2);
	  COL_TRI(4, 5, 6);
	  COL_TRI(4, 7, 5);
	  COL_TRI_INIT(SURFACE_INSTANT_WARP_1D, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI_INIT(SURFACE_NO_CAM_COL_SLIPPERY, 4);
	  COL_TRI(8, 9, 10);
	  COL_TRI(8, 11, 9);
	  COL_TRI(12, 13, 14);
	  COL_TRI(12, 14, 15);
	  COL_TRI_STOP();
	  COL_END();
	}

	function ttm_seg7_area_3_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x1C5);
	  COL_VERTEX(5999, 6554, 6289);
	  COL_VERTEX(6411, 6748, 6701);
	  COL_VERTEX(6990, 6748, 6122);
	  COL_VERTEX(6578, 6554, 5710);
	  COL_VERTEX(5017, -7217, 2562);
	  COL_VERTEX(5017, -7269, 2048);
	  COL_VERTEX(4403, -7217, 2562);
	  COL_VERTEX(4403, -7269, 2048);
	  COL_VERTEX(5120, -7115, 2562);
	  COL_VERTEX(5120, -7167, 2048);
	  COL_VERTEX(4300, -7167, 2048);
	  COL_VERTEX(4300, -7115, 2562);
	  COL_VERTEX(8192, -10239, -7639);
	  COL_VERTEX(-8191, -10239, 8744);
	  COL_VERTEX(8192, -10239, 8744);
	  COL_VERTEX(-8191, -10239, -7639);
	  COL_VERTEX(-994, -5823, 1471);
	  COL_VERTEX(-994, -5823, 1573);
	  COL_VERTEX(-994, -3570, 1573);
	  COL_VERTEX(-994, -3570, 1471);
	  COL_VERTEX(-892, -3468, 1471);
	  COL_VERTEX(-892, -5823, 1471);
	  COL_VERTEX(-892, -5823, 1573);
	  COL_VERTEX(-892, -3468, 1573);
	  COL_VERTEX(-2018, -3468, 1573);
	  COL_VERTEX(-1916, -3570, 1573);
	  COL_VERTEX(120, -959, -5506);
	  COL_VERTEX(-459, -908, -6657);
	  COL_VERTEX(-699, -908, -6325);
	  COL_VERTEX(-699, -1420, -6325);
	  COL_VERTEX(120, -1471, -5506);
	  COL_VERTEX(699, -959, -6085);
	  COL_VERTEX(-279, -805, -6906);
	  COL_VERTEX(-966, -857, -6914);
	  COL_VERTEX(-1869, -5311, 4286);
	  COL_VERTEX(-1869, -4901, 1573);
	  COL_VERTEX(-1768, -5516, 4274);
	  COL_VERTEX(-1767, -5106, 1573);
	  COL_VERTEX(-1859, -4799, 725);
	  COL_VERTEX(-1758, -5004, 742);
	  COL_VERTEX(-1468, -805, -7039);
	  COL_VERTEX(-1518, -601, -6632);
	  COL_VERTEX(-2992, -601, -7040);
	  COL_VERTEX(-2951, -601, -6632);
	  COL_VERTEX(-3975, -908, -6427);
	  COL_VERTEX(-790, -988, -5719);
	  COL_VERTEX(-3975, -396, -6427);
	  COL_VERTEX(-4108, -396, -6815);
	  COL_VERTEX(-4999, -703, -5915);
	  COL_VERTEX(-1562, -5209, 1573);
	  COL_VERTEX(-1050, -5721, 1573);
	  COL_VERTEX(-1257, -5721, 5056);
	  COL_VERTEX(-1564, -5618, 4249);
	  COL_VERTEX(-1050, -5618, 4185);
	  COL_VERTEX(-868, -5721, 4912);
	  COL_VERTEX(-860, -754, -7202);
	  COL_VERTEX(-1108, -652, -6530);
	  COL_VERTEX(-1430, -703, -7343);
	  COL_VERTEX(-1609, -988, -5719);
	  COL_VERTEX(-1917, -3275, -708);
	  COL_VERTEX(-994, -3275, -708);
	  COL_VERTEX(-994, -4287, 1778);
	  COL_VERTEX(-994, -3377, -708);
	  COL_VERTEX(-1917, -4287, 1778);
	  COL_VERTEX(-1609, -1773, -3469);
	  COL_VERTEX(-790, -1773, -3469);
	  COL_VERTEX(-1660, -2285, -2957);
	  COL_VERTEX(-841, -2763, -1220);
	  COL_VERTEX(-841, -2285, -2957);
	  COL_VERTEX(-1660, -2763, -1220);
	  COL_VERTEX(9113, -7576, 3072);
	  COL_VERTEX(4403, -7167, 3072);
	  COL_VERTEX(4300, -7052, 4338);
	  COL_VERTEX(2969, -2968, 3072);
	  COL_VERTEX(9113, -2968, 3072);
	  COL_VERTEX(5017, -6347, 3072);
	  COL_VERTEX(2969, -7576, 3072);
	  COL_VERTEX(5120, -6450, 3072);
	  COL_VERTEX(-1916, -3570, 1471);
	  COL_VERTEX(-2018, -3468, 1471);
	  COL_VERTEX(-1916, -5823, 1471);
	  COL_VERTEX(-2018, -5823, 1471);
	  COL_VERTEX(-2018, -5823, 1573);
	  COL_VERTEX(-1916, -5823, 1573);
	  COL_VERTEX(-3032, -293, -7447);
	  COL_VERTEX(-1418, -498, -7445);
	  COL_VERTEX(-4208, -293, -7105);
	  COL_VERTEX(-4241, -89, -7202);
	  COL_VERTEX(-3022, -498, -7345);
	  COL_VERTEX(-824, -549, -7298);
	  COL_VERTEX(-220, -601, -6989);
	  COL_VERTEX(6817, 6940, 7107);
	  COL_VERTEX(7263, -8191, -101);
	  COL_VERTEX(6181, -7986, -102);
	  COL_VERTEX(6106, -7986, -712);
	  COL_VERTEX(7805, -8191, 1);
	  COL_VERTEX(7228, -8191, -713);
	  COL_VERTEX(6094, -7883, -813);
	  COL_VERTEX(6094, -7269, -813);
	  COL_VERTEX(7785, -8191, -816);
	  COL_VERTEX(8192, -7548, -715);
	  COL_VERTEX(8192, -7651, 1);
	  COL_VERTEX(5628, -7883, -593);
	  COL_VERTEX(5841, -7883, -17);
	  COL_VERTEX(5147, -7781, -348);
	  COL_VERTEX(5506, -7781, 150);
	  COL_VERTEX(5270, -7679, 386);
	  COL_VERTEX(4771, -7679, 27);
	  COL_VERTEX(4526, -7576, 508);
	  COL_VERTEX(5102, -7576, 721);
	  COL_VERTEX(4407, -7474, 986);
	  COL_VERTEX(5017, -7474, 1061);
	  COL_VERTEX(4430, -6859, 473);
	  COL_VERTEX(4688, -6962, -32);
	  COL_VERTEX(4688, -7576, -32);
	  COL_VERTEX(4430, -7474, 473);
	  COL_VERTEX(4306, -7371, 974);
	  COL_VERTEX(4407, -6655, 986);
	  COL_VERTEX(4526, -6757, 508);
	  COL_VERTEX(4300, -6552, 2048);
	  COL_VERTEX(4306, -6757, 974);
	  COL_VERTEX(5102, -6757, 721);
	  COL_VERTEX(5017, -6655, 1061);
	  COL_VERTEX(4771, -6859, 27);
	  COL_VERTEX(4403, -6450, 2048);
	  COL_VERTEX(5198, -6859, 757);
	  COL_VERTEX(5119, -6757, 1074);
	  COL_VERTEX(5270, -6859, 386);
	  COL_VERTEX(5017, -6450, 2048);
	  COL_VERTEX(5198, -7474, 757);
	  COL_VERTEX(5353, -6962, 446);
	  COL_VERTEX(5353, -7576, 446);
	  COL_VERTEX(5120, -6552, 2048);
	  COL_VERTEX(5119, -7371, 1074);
	  COL_VERTEX(5087, -7679, -431);
	  COL_VERTEX(5087, -7064, -431);
	  COL_VERTEX(5147, -6962, -348);
	  COL_VERTEX(5506, -6962, 150);
	  COL_VERTEX(5566, -7679, 233);
	  COL_VERTEX(5566, -7064, 233);
	  COL_VERTEX(5593, -7167, -689);
	  COL_VERTEX(5593, -7781, -689);
	  COL_VERTEX(5628, -7064, -593);
	  COL_VERTEX(5841, -7064, -17);
	  COL_VERTEX(5877, -7167, 78);
	  COL_VERTEX(5877, -7781, 78);
	  COL_VERTEX(6106, -7167, -712);
	  COL_VERTEX(6181, -7167, -102);
	  COL_VERTEX(6194, -7269, 0);
	  COL_VERTEX(6194, -7883, 0);
	  COL_VERTEX(4403, -6347, 3072);
	  COL_VERTEX(4300, -6450, 3072);
	  COL_VERTEX(8192, -7548, -100);
	  COL_VERTEX(1604, 5123, 7106);
	  COL_VERTEX(1315, 5071, 7251);
	  COL_VERTEX(880, 5532, 7396);
	  COL_VERTEX(301, 5481, 7396);
	  COL_VERTEX(1315, 5583, 7251);
	  COL_VERTEX(1966, 5174, 6889);
	  COL_VERTEX(1604, 5635, 7106);
	  COL_VERTEX(2278, 5092, 6628);
	  COL_VERTEX(1902, 5532, 6809);
	  COL_VERTEX(2185, 5532, 6529);
	  COL_VERTEX(6285, 7098, 6140);
	  COL_VERTEX(4300, -7564, 4338);
	  COL_VERTEX(4300, -7461, 5619);
	  COL_VERTEX(5120, -7052, 4338);
	  COL_VERTEX(4300, -6949, 5619);
	  COL_VERTEX(5823, 6607, 4954);
	  COL_VERTEX(5823, 6403, 4954);
	  COL_VERTEX(5605, 6505, 4737);
	  COL_VERTEX(-6638, -89, -2946);
	  COL_VERTEX(-7045, 422, -2986);
	  COL_VERTEX(-6638, 422, -2946);
	  COL_VERTEX(-6638, 1210, -3);
	  COL_VERTEX(-6638, 1293, 2276);
	  COL_VERTEX(-1644, 4559, 6577);
	  COL_VERTEX(-2053, 4969, 6577);
	  COL_VERTEX(-104, 4713, 6577);
	  COL_VERTEX(-3975, 3750, 6577);
	  COL_VERTEX(3559, 5532, 5296);
	  COL_VERTEX(3559, 6044, 5296);
	  COL_VERTEX(3523, 6147, 4680);
	  COL_VERTEX(2690, 5635, 6165);
	  COL_VERTEX(3849, 6147, 5006);
	  COL_VERTEX(4815, -6949, 5682);
	  COL_VERTEX(-6433, 218, -3970);
	  COL_VERTEX(-6820, 218, -4103);
	  COL_VERTEX(-7457, 1805, 2276);
	  COL_VERTEX(-104, 5225, 6577);
	  COL_VERTEX(301, 4764, 6577);
	  COL_VERTEX(-1644, 5071, 7396);
	  COL_VERTEX(3849, 5635, 5006);
	  COL_VERTEX(3848, 6147, 4364);
	  COL_VERTEX(5018, -6847, 5707);
	  COL_VERTEX(4706, -6847, 6115);
	  COL_VERTEX(4221, -7359, 5936);
	  COL_VERTEX(4490, -6745, 6552);
	  COL_VERTEX(4066, -7257, 6246);
	  COL_VERTEX(4159, -6642, 6883);
	  COL_VERTEX(3543, -6540, 6614);
	  COL_VERTEX(3722, -6540, 7099);
	  COL_VERTEX(3226, -6437, 6693);
	  COL_VERTEX(3289, -6437, 7208);
	  COL_VERTEX(1457, -6130, 6693);
	  COL_VERTEX(1394, -6130, 7208);
	  COL_VERTEX(730, -6028, 6512);
	  COL_VERTEX(551, -6028, 6997);
	  COL_VERTEX(11, -5925, 6152);
	  COL_VERTEX(-294, -5925, 6576);
	  COL_VERTEX(-509, -6335, 5632);
	  COL_VERTEX(-933, -5823, 5937);
	  COL_VERTEX(3314, -6335, 7411);
	  COL_VERTEX(3793, -6437, 7291);
	  COL_VERTEX(3327, -6130, 7513);
	  COL_VERTEX(1369, -6028, 7411);
	  COL_VERTEX(480, -5925, 7189);
	  COL_VERTEX(-414, -5823, 6742);
	  COL_VERTEX(-1099, -5721, 6057);
	  COL_VERTEX(-1545, -5618, 5163);
	  COL_VERTEX(4898, -6745, 6187);
	  COL_VERTEX(4656, -6642, 6671);
	  COL_VERTEX(4278, -6540, 7049);
	  COL_VERTEX(-7457, 1210, -3);
	  COL_VERTEX(-7111, 320, -4202);
	  COL_VERTEX(-7208, 525, -4236);
	  COL_VERTEX(-5419, -89, -6497);
	  COL_VERTEX(-5478, 115, -6580);
	  COL_VERTEX(-6586, 320, -5473);
	  COL_VERTEX(-6502, 115, -5413);
	  COL_VERTEX(5999, 6964, 6289);
	  COL_VERTEX(5637, 7680, 6651);
	  COL_VERTEX(5999, 6503, 6289);
	  COL_VERTEX(6940, 7680, 5348);
	  COL_VERTEX(-5921, -498, -4994);
	  COL_VERTEX(-4999, -191, -5915);
	  COL_VERTEX(-5239, -191, -6248);
	  COL_VERTEX(-5921, 13, -4994);
	  COL_VERTEX(-6253, 13, -5233);
	  COL_VERTEX(1450, 4969, 6244);
	  COL_VERTEX(1210, 4918, 6387);
	  COL_VERTEX(1210, 5430, 6387);
	  COL_VERTEX(1000, 5379, 6492);
	  COL_VERTEX(1236, 5379, 7062);
	  COL_VERTEX(1450, 5481, 6244);
	  COL_VERTEX(1506, 5430, 6927);
	  COL_VERTEX(1000, 4867, 6492);
	  COL_VERTEX(747, 5327, 6577);
	  COL_VERTEX(839, 5327, 7143);
	  COL_VERTEX(747, 4815, 6577);
	  COL_VERTEX(-2053, 4969, 7396);
	  COL_VERTEX(-3975, 4262, 7396);
	  COL_VERTEX(-3975, 4262, 6577);
	  COL_VERTEX(-5277, 3853, 6431);
	  COL_VERTEX(-4694, 4058, 6577);
	  COL_VERTEX(-4763, 4058, 7142);
	  COL_VERTEX(-6206, 2829, 5645);
	  COL_VERTEX(-6206, 3341, 5645);
	  COL_VERTEX(-6523, 3341, 5905);
	  COL_VERTEX(-6492, 2522, 5216);
	  COL_VERTEX(-6492, 3034, 5216);
	  COL_VERTEX(-6866, 3034, 5382);
	  COL_VERTEX(-6638, 2214, 4632);
	  COL_VERTEX(-6638, 2726, 4632);
	  COL_VERTEX(-7044, 2726, 4683);
	  COL_VERTEX(-6638, 1702, 3505);
	  COL_VERTEX(-6638, 2214, 3505);
	  COL_VERTEX(-7252, 2214, 3505);
	  COL_VERTEX(4447, 5635, 4737);
	  COL_VERTEX(4718, 6147, 4364);
	  COL_VERTEX(5461, 6147, 4882);
	  COL_VERTEX(4117, 5635, 4738);
	  COL_VERTEX(4059, 6147, 4253);
	  COL_VERTEX(4236, 5635, 4679);
	  COL_VERTEX(4198, 6147, 4212);
	  COL_VERTEX(4272, 5635, 4667);
	  COL_VERTEX(4369, 6147, 4212);
	  COL_VERTEX(4295, 5635, 4667);
	  COL_VERTEX(4508, 6147, 4253);
	  COL_VERTEX(-7508, 2470, 3505);
	  COL_VERTEX(-7406, 2317, 3505);
	  COL_VERTEX(-4795, 4211, 7293);
	  COL_VERTEX(-5567, 3955, 7035);
	  COL_VERTEX(-6096, 3750, 6620);
	  COL_VERTEX(-6226, 4058, 6778);
	  COL_VERTEX(-6681, 3443, 6035);
	  COL_VERTEX(-7248, 2829, 4708);
	  COL_VERTEX(-7451, 3136, 4733);
	  COL_VERTEX(-7241, 3443, 5548);
	  COL_VERTEX(-7054, 3136, 5465);
	  COL_VERTEX(-6839, 3750, 6164);
	  COL_VERTEX(-1234, 5123, 7396);
	  COL_VERTEX(-104, 5225, 7242);
	  COL_VERTEX(1838, 5481, 6729);
	  COL_VERTEX(1677, 5532, 6020);
	  COL_VERTEX(3234, 6044, 4970);
	  COL_VERTEX(3016, 6249, 4753);
	  COL_VERTEX(3125, 6095, 4861);
	  COL_VERTEX(301, 5276, 7191);
	  COL_VERTEX(301, 5327, 7293);
	  COL_VERTEX(860, 5371, 7271);
	  COL_VERTEX(1555, 5481, 7016);
	  COL_VERTEX(1276, 5430, 7156);
	  COL_VERTEX(2111, 5788, 5586);
	  COL_VERTEX(3270, 6607, 4427);
	  COL_VERTEX(3270, 6505, 4427);
	  COL_VERTEX(3306, 6351, 4463);
	  COL_VERTEX(3415, 6198, 4572);
	  COL_VERTEX(7396, 6888, 6527);
	  COL_VERTEX(7360, 7452, 6564);
	  COL_VERTEX(6817, 7349, 7107);
	  COL_VERTEX(6853, 7452, 7071);
	  COL_VERTEX(6889, 7503, 7034);
	  COL_VERTEX(6962, 7554, 6962);
	  COL_VERTEX(7251, 7554, 6672);
	  COL_VERTEX(7324, 7503, 6600);
	  COL_VERTEX(5533, 6198, 4809);
	  COL_VERTEX(5569, 6351, 4773);
	  COL_VERTEX(5786, 6249, 4990);
	  COL_VERTEX(4808, 6198, 4240);
	  COL_VERTEX(5714, 6198, 5063);
	  COL_VERTEX(4898, 6351, 4116);
	  COL_VERTEX(4625, 6351, 3969);
	  COL_VERTEX(4929, 6505, 4074);
	  COL_VERTEX(5605, 6607, 4737);
	  COL_VERTEX(4929, 6607, 4074);
	  COL_VERTEX(3758, 6198, 4240);
	  COL_VERTEX(3668, 6351, 4115);
	  COL_VERTEX(3638, 6607, 4074);
	  COL_VERTEX(3638, 6505, 4074);
	  COL_VERTEX(3942, 6351, 3969);
	  COL_VERTEX(4001, 6198, 4111);
	  COL_VERTEX(3922, 6505, 3922);
	  COL_VERTEX(3922, 6607, 3922);
	  COL_VERTEX(4173, 6198, 4061);
	  COL_VERTEX(4149, 6351, 3909);
	  COL_VERTEX(4140, 6505, 3858);
	  COL_VERTEX(4140, 6607, 3858);
	  COL_VERTEX(4394, 6198, 4061);
	  COL_VERTEX(4418, 6351, 3909);
	  COL_VERTEX(4427, 6505, 3858);
	  COL_VERTEX(4427, 6607, 3858);
	  COL_VERTEX(4566, 6198, 4111);
	  COL_VERTEX(4645, 6505, 3922);
	  COL_VERTEX(4645, 6607, 3922);
	  COL_VERTEX(5120, -7064, 3072);
	  COL_VERTEX(5017, -7167, 3072);
	  COL_VERTEX(1059, -1061, -4566);
	  COL_VERTEX(1638, -1061, -5145);
	  COL_VERTEX(3549, 1005, -5754);
	  COL_VERTEX(1015, 1005, -3220);
	  COL_VERTEX(-1555, -5106, 775);
	  COL_VERTEX(-2951, -1113, -6632);
	  COL_VERTEX(-1608, -1090, -5719);
	  COL_VERTEX(-1608, -1875, -3469);
	  COL_VERTEX(-1050, -5209, 1573);
	  COL_VERTEX(-1050, -5106, 857);
	  COL_VERTEX(-1050, -5618, 857);
	  COL_VERTEX(-1050, -6130, 4185);
	  COL_VERTEX(-868, -6233, 4912);
	  COL_VERTEX(-1609, -1500, -5719);
	  COL_VERTEX(-789, -1875, -3469);
	  COL_VERTEX(-1916, -3377, -708);
	  COL_VERTEX(-994, -4389, 1778);
	  COL_VERTEX(-1916, -4389, 1778);
	  COL_VERTEX(-789, -1090, -5719);
	  COL_VERTEX(-840, -2387, -2957);
	  COL_VERTEX(-1659, -2387, -2957);
	  COL_VERTEX(-840, -2865, -1220);
	  COL_VERTEX(-1659, -2865, -1220);
	  COL_VERTEX(4300, -7064, 3072);
	  COL_VERTEX(4403, -7679, 3072);
	  COL_VERTEX(2969, -2968, 512);
	  COL_VERTEX(2969, -7576, 512);
	  COL_VERTEX(7396, 6940, 6527);
	  COL_VERTEX(7659, -8191, -26);
	  COL_VERTEX(8192, -8191, 1);
	  COL_VERTEX(7228, -8191, -383);
	  COL_VERTEX(7427, -8191, -751);
	  COL_VERTEX(8192, -8191, -817);
	  COL_VERTEX(8192, -7651, -817);
	  COL_VERTEX(880, 5020, 7396);
	  COL_VERTEX(1966, 5686, 6889);
	  COL_VERTEX(2278, 5604, 6628);
	  COL_VERTEX(2690, 5123, 6165);
	  COL_VERTEX(6430, 7201, 5996);
	  COL_VERTEX(6285, 7201, 6140);
	  COL_VERTEX(6430, 7098, 5996);
	  COL_VERTEX(4221, -6847, 5936);
	  COL_VERTEX(2220, 5635, 5694);
	  COL_VERTEX(4066, -6745, 6246);
	  COL_VERTEX(-6433, -293, -3970);
	  COL_VERTEX(-6638, 698, -3);
	  COL_VERTEX(-6638, 1805, 2276);
	  COL_VERTEX(-1644, 5071, 6577);
	  COL_VERTEX(-1234, 5123, 6577);
	  COL_VERTEX(-2053, 4457, 6577);
	  COL_VERTEX(-7351, 525, -3016);
	  COL_VERTEX(-4694, 3546, 6577);
	  COL_VERTEX(301, 5276, 6577);
	  COL_VERTEX(4117, 6147, 4738);
	  COL_VERTEX(5120, -6642, 5720);
	  COL_VERTEX(4236, 6147, 4679);
	  COL_VERTEX(3853, -6642, 6459);
	  COL_VERTEX(3853, -7154, 6459);
	  COL_VERTEX(3543, -7052, 6614);
	  COL_VERTEX(3226, -6949, 6693);
	  COL_VERTEX(1457, -6642, 6693);
	  COL_VERTEX(730, -6540, 6512);
	  COL_VERTEX(11, -6437, 6152);
	  COL_VERTEX(-509, -5823, 5632);
	  COL_VERTEX(3829, -6233, 7387);
	  COL_VERTEX(4338, -6335, 7133);
	  COL_VERTEX(1356, -5823, 7513);
	  COL_VERTEX(444, -5721, 7285);
	  COL_VERTEX(-473, -5618, 6825);
	  COL_VERTEX(-1182, -5516, 6117);
	  COL_VERTEX(-1641, -5413, 5198);
	  COL_VERTEX(4994, -6540, 6222);
	  COL_VERTEX(4739, -6437, 6731);
	  COL_VERTEX(-7453, 730, -3026);
	  COL_VERTEX(6035, 7066, 6253);
	  COL_VERTEX(6071, 7117, 6216);
	  COL_VERTEX(6144, 7168, 6144);
	  COL_VERTEX(5637, 6503, 6651);
	  COL_VERTEX(6433, 7168, 5854);
	  COL_VERTEX(6506, 7117, 5782);
	  COL_VERTEX(6542, 7066, 5746);
	  COL_VERTEX(6578, 6964, 5710);
	  COL_VERTEX(6578, 6503, 5710);
	  COL_VERTEX(6940, 6503, 5348);
	  COL_VERTEX(-5485, 3853, 6899);
	  COL_VERTEX(-5277, 3341, 6431);
	  COL_VERTEX(-5706, 3136, 6145);
	  COL_VERTEX(-5706, 3648, 6145);
	  COL_VERTEX(-5966, 3648, 6461);
	  COL_VERTEX(4447, 6147, 4737);
	  COL_VERTEX(4331, 6147, 4679);
	  COL_VERTEX(4331, 5635, 4679);
	  COL_VERTEX(5026, 6147, 5316);
	  COL_VERTEX(4272, 6147, 4667);
	  COL_VERTEX(4295, 6147, 4667);
	  COL_VERTEX(-5609, 4109, 7129);
	  COL_VERTEX(-121, 5329, 7418);
	  COL_VERTEX(2980, 6403, 4717);
	  COL_VERTEX(2980, 6505, 4717);
	  COL_VERTEX(7396, 7349, 6527);
	  COL_VERTEX(6817, 6888, 7107);
	  COL_VERTEX(5243, 6198, 5533);
	  COL_VERTEX(1059, -1573, -4566);
	  COL_VERTEX(1638, -1573, -5145);
	  COL_VERTEX(3549, -5138, -5754);
	  COL_VERTEX(1015, -5138, -3220);
	  COL_TRI_INIT(SURFACE_DEFAULT, 687);
	  COL_TRI(16, 17, 18);
	  COL_TRI(16, 18, 19);
	  COL_TRI(20, 21, 16);
	  COL_TRI(20, 16, 19);
	  COL_TRI(18, 17, 22);
	  COL_TRI(18, 23, 24);
	  COL_TRI(24, 25, 18);
	  COL_TRI(18, 22, 23);
	  COL_TRI(19, 18, 25);
	  COL_TRI(26, 27, 28);
	  COL_TRI(29, 30, 26);
	  COL_TRI(29, 26, 28);
	  COL_TRI(20, 23, 22);
	  COL_TRI(20, 22, 21);
	  COL_TRI(37, 36, 49);
	  COL_TRI(32, 27, 31);
	  COL_TRI(31, 90, 32);
	  COL_TRI(26, 31, 27);
	  COL_TRI(32, 33, 27);
	  COL_TRI(33, 28, 27);
	  COL_TRI(34, 36, 37);
	  COL_TRI(35, 34, 37);
	  COL_TRI(36, 52, 49);
	  COL_TRI(41, 43, 58);
	  COL_TRI(38, 35, 37);
	  COL_TRI(38, 37, 39);
	  COL_TRI(39, 37, 351);
	  COL_TRI(37, 49, 351);
	  COL_TRI(40, 42, 43);
	  COL_TRI(41, 40, 43);
	  COL_TRI(42, 47, 46);
	  COL_TRI(43, 42, 46);
	  COL_TRI(44, 352, 43);
	  COL_TRI(44, 43, 46);
	  COL_TRI(49, 356, 351);
	  COL_TRI(45, 56, 41);
	  COL_TRI(45, 41, 58);
	  COL_TRI(41, 56, 40);
	  COL_TRI(46, 47, 235);
	  COL_TRI(47, 236, 235);
	  COL_TRI(48, 46, 235);
	  COL_TRI(48, 44, 46);
	  COL_TRI(49, 355, 356);
	  COL_TRI(50, 357, 356);
	  COL_TRI(50, 356, 355);
	  COL_TRI(51, 53, 52);
	  COL_TRI(52, 355, 49);
	  COL_TRI(52, 53, 355);
	  COL_TRI(51, 54, 53);
	  COL_TRI(53, 50, 355);
	  COL_TRI(53, 358, 50);
	  COL_TRI(54, 358, 53);
	  COL_TRI(54, 359, 358);
	  COL_TRI(55, 40, 33);
	  COL_TRI(32, 55, 33);
	  COL_TRI(58, 354, 64);
	  COL_TRI(56, 28, 33);
	  COL_TRI(40, 56, 33);
	  COL_TRI(55, 57, 40);
	  COL_TRI(57, 42, 40);
	  COL_TRI(43, 360, 58);
	  COL_TRI(43, 352, 360);
	  COL_TRI(58, 64, 45);
	  COL_TRI(58, 353, 354);
	  COL_TRI(59, 61, 60);
	  COL_TRI(60, 62, 362);
	  COL_TRI(60, 362, 59);
	  COL_TRI(61, 62, 60);
	  COL_TRI(61, 363, 62);
	  COL_TRI(62, 363, 364);
	  COL_TRI(62, 364, 362);
	  COL_TRI(59, 362, 364);
	  COL_TRI(59, 63, 61);
	  COL_TRI(59, 364, 63);
	  COL_TRI(63, 363, 61);
	  COL_TRI(63, 364, 363);
	  COL_TRI(64, 65, 45);
	  COL_TRI(65, 361, 365);
	  COL_TRI(65, 365, 45);
	  COL_TRI(64, 361, 65);
	  COL_TRI(71, 76, 70);
	  COL_TRI(64, 354, 361);
	  COL_TRI(66, 67, 68);
	  COL_TRI(67, 366, 68);
	  COL_TRI(68, 366, 367);
	  COL_TRI(68, 367, 66);
	  COL_TRI(67, 368, 366);
	  COL_TRI(66, 367, 369);
	  COL_TRI(66, 69, 67);
	  COL_TRI(66, 369, 69);
	  COL_TRI(69, 368, 67);
	  COL_TRI(69, 369, 368);
	  COL_TRI(70, 346, 71);
	  COL_TRI(76, 73, 372);
	  COL_TRI(71, 370, 76);
	  COL_TRI(73, 76, 370);
	  COL_TRI(73, 370, 151);
	  COL_TRI(73, 151, 150);
	  COL_TRI(74, 73, 75);
	  COL_TRI(73, 150, 75);
	  COL_TRI(75, 77, 74);
	  COL_TRI(76, 372, 373);
	  COL_TRI(81, 24, 79);
	  COL_TRI(77, 345, 70);
	  COL_TRI(77, 70, 74);
	  COL_TRI(70, 345, 346);
	  COL_TRI(20, 19, 78);
	  COL_TRI(19, 25, 78);
	  COL_TRI(78, 79, 20);
	  COL_TRI(79, 23, 20);
	  COL_TRI(79, 24, 23);
	  COL_TRI(78, 80, 79);
	  COL_TRI(80, 81, 79);
	  COL_TRI(24, 82, 83);
	  COL_TRI(24, 83, 25);
	  COL_TRI(81, 82, 24);
	  COL_TRI(78, 25, 83);
	  COL_TRI(78, 83, 80);
	  COL_TRI(84, 87, 86);
	  COL_TRI(85, 84, 88);
	  COL_TRI(84, 86, 88);
	  COL_TRI(86, 226, 236);
	  COL_TRI(86, 236, 47);
	  COL_TRI(87, 226, 86);
	  COL_TRI(88, 86, 47);
	  COL_TRI(91, 374, 2);
	  COL_TRI(57, 88, 42);
	  COL_TRI(85, 88, 57);
	  COL_TRI(88, 47, 42);
	  COL_TRI(87, 227, 226);
	  COL_TRI(89, 85, 57);
	  COL_TRI(89, 57, 55);
	  COL_TRI(90, 89, 55);
	  COL_TRI(90, 55, 32);
	  COL_TRI(91, 2, 1);
	  COL_TRI(92, 93, 375);
	  COL_TRI(93, 95, 375);
	  COL_TRI(93, 149, 95);
	  COL_TRI(94, 93, 92);
	  COL_TRI(95, 101, 376);
	  COL_TRI(95, 148, 101);
	  COL_TRI(95, 149, 148);
	  COL_TRI(96, 94, 377);
	  COL_TRI(94, 92, 377);
	  COL_TRI(97, 94, 96);
	  COL_TRI(98, 97, 99);
	  COL_TRI(99, 97, 378);
	  COL_TRI(98, 99, 379);
	  COL_TRI(97, 96, 378);
	  COL_TRI(98, 379, 380);
	  COL_TRI(100, 98, 380);
	  COL_TRI(100, 146, 98);
	  COL_TRI(101, 147, 152);
	  COL_TRI(101, 148, 147);
	  COL_TRI(94, 102, 103);
	  COL_TRI(93, 94, 103);
	  COL_TRI(102, 104, 105);
	  COL_TRI(103, 102, 105);
	  COL_TRI(104, 107, 106);
	  COL_TRI(105, 104, 106);
	  COL_TRI(106, 107, 109);
	  COL_TRI(107, 108, 109);
	  COL_TRI(108, 110, 111);
	  COL_TRI(109, 108, 111);
	  COL_TRI(110, 7, 5);
	  COL_TRI(111, 110, 5);
	  COL_TRI(112, 116, 115);
	  COL_TRI(113, 115, 114);
	  COL_TRI(113, 112, 115);
	  COL_TRI(114, 115, 107);
	  COL_TRI(115, 108, 107);
	  COL_TRI(115, 116, 108);
	  COL_TRI(121, 118, 123);
	  COL_TRI(116, 110, 108);
	  COL_TRI(112, 120, 116);
	  COL_TRI(110, 116, 10);
	  COL_TRI(10, 116, 120);
	  COL_TRI(7, 110, 10);
	  COL_TRI(117, 120, 112);
	  COL_TRI(118, 117, 112);
	  COL_TRI(118, 112, 113);
	  COL_TRI(10, 120, 119);
	  COL_TRI(119, 120, 124);
	  COL_TRI(120, 117, 124);
	  COL_TRI(121, 122, 118);
	  COL_TRI(122, 117, 118);
	  COL_TRI(123, 118, 113);
	  COL_TRI(124, 117, 128);
	  COL_TRI(117, 122, 128);
	  COL_TRI(125, 126, 121);
	  COL_TRI(126, 122, 121);
	  COL_TRI(127, 121, 123);
	  COL_TRI(125, 121, 127);
	  COL_TRI(128, 122, 132);
	  COL_TRI(122, 126, 132);
	  COL_TRI(129, 126, 125);
	  COL_TRI(130, 125, 127);
	  COL_TRI(131, 129, 125);
	  COL_TRI(131, 125, 130);
	  COL_TRI(129, 133, 126);
	  COL_TRI(132, 126, 133);
	  COL_TRI(109, 111, 129);
	  COL_TRI(111, 133, 129);
	  COL_TRI(109, 129, 131);
	  COL_TRI(133, 111, 5);
	  COL_TRI(132, 133, 9);
	  COL_TRI(9, 133, 5);
	  COL_TRI(106, 109, 131);
	  COL_TRI(134, 114, 104);
	  COL_TRI(114, 107, 104);
	  COL_TRI(135, 114, 134);
	  COL_TRI(105, 106, 138);
	  COL_TRI(135, 113, 114);
	  COL_TRI(123, 113, 135);
	  COL_TRI(136, 123, 135);
	  COL_TRI(127, 123, 136);
	  COL_TRI(137, 127, 136);
	  COL_TRI(130, 127, 137);
	  COL_TRI(138, 130, 139);
	  COL_TRI(138, 131, 130);
	  COL_TRI(139, 130, 137);
	  COL_TRI(106, 131, 138);
	  COL_TRI(140, 135, 134);
	  COL_TRI(140, 134, 141);
	  COL_TRI(134, 104, 102);
	  COL_TRI(141, 134, 102);
	  COL_TRI(136, 135, 140);
	  COL_TRI(137, 136, 142);
	  COL_TRI(142, 136, 140);
	  COL_TRI(139, 137, 143);
	  COL_TRI(143, 137, 142);
	  COL_TRI(144, 139, 143);
	  COL_TRI(145, 138, 139);
	  COL_TRI(145, 139, 144);
	  COL_TRI(143, 142, 146);
	  COL_TRI(105, 138, 145);
	  COL_TRI(103, 105, 145);
	  COL_TRI(98, 141, 97);
	  COL_TRI(97, 141, 94);
	  COL_TRI(141, 102, 94);
	  COL_TRI(98, 140, 141);
	  COL_TRI(142, 140, 98);
	  COL_TRI(146, 142, 98);
	  COL_TRI(77, 9, 345);
	  COL_TRI(147, 143, 146);
	  COL_TRI(144, 143, 147);
	  COL_TRI(148, 144, 147);
	  COL_TRI(149, 145, 144);
	  COL_TRI(149, 144, 148);
	  COL_TRI(103, 145, 149);
	  COL_TRI(93, 103, 149);
	  COL_TRI(77, 132, 9);
	  COL_TRI(75, 132, 77);
	  COL_TRI(75, 128, 132);
	  COL_TRI(150, 124, 128);
	  COL_TRI(150, 128, 75);
	  COL_TRI(151, 124, 150);
	  COL_TRI(151, 119, 124);
	  COL_TRI(10, 119, 370);
	  COL_TRI(119, 151, 370);
	  COL_TRI(152, 147, 100);
	  COL_TRI(147, 146, 100);
	  COL_TRI(158, 382, 159);
	  COL_TRI(153, 157, 154);
	  COL_TRI(154, 155, 381);
	  COL_TRI(154, 157, 155);
	  COL_TRI(155, 157, 302);
	  COL_TRI(155, 302, 300);
	  COL_TRI(156, 155, 300);
	  COL_TRI(157, 159, 301);
	  COL_TRI(157, 301, 302);
	  COL_TRI(153, 159, 157);
	  COL_TRI(158, 159, 153);
	  COL_TRI(159, 382, 161);
	  COL_TRI(159, 161, 301);
	  COL_TRI(160, 382, 158);
	  COL_TRI(161, 382, 383);
	  COL_TRI(160, 383, 382);
	  COL_TRI(160, 183, 383);
	  COL_TRI(160, 384, 183);
	  COL_TRI(162, 383, 183);
	  COL_TRI(161, 383, 162);
	  COL_TRI(163, 385, 386);
	  COL_TRI(163, 387, 385);
	  COL_TRI(164, 165, 72);
	  COL_TRI(167, 185, 72);
	  COL_TRI(165, 196, 388);
	  COL_TRI(165, 388, 167);
	  COL_TRI(165, 167, 72);
	  COL_TRI(71, 72, 166);
	  COL_TRI(164, 72, 371);
	  COL_TRI(72, 71, 370);
	  COL_TRI(72, 71, 371);
	  COL_TRI(166, 72, 185);
	  COL_TRI(171, 173, 174);
	  COL_TRI(3, 168, 169);
	  COL_TRI(168, 324, 170);
	  COL_TRI(168, 170, 169);
	  COL_TRI(169, 317, 316);
	  COL_TRI(169, 316, 318);
	  COL_TRI(169, 318, 3);
	  COL_TRI(170, 317, 169);
	  COL_TRI(171, 186, 173);
	  COL_TRI(171, 391, 186);
	  COL_TRI(171, 174, 392);
	  COL_TRI(176, 396, 177);
	  COL_TRI(172, 223, 174);
	  COL_TRI(173, 172, 174);
	  COL_TRI(174, 175, 392);
	  COL_TRI(175, 174, 393);
	  COL_TRI(175, 266, 265);
	  COL_TRI(175, 393, 266);
	  COL_TRI(176, 394, 395);
	  COL_TRI(177, 394, 176);
	  COL_TRI(183, 181, 295);
	  COL_TRI(177, 396, 179);
	  COL_TRI(179, 254, 252);
	  COL_TRI(179, 398, 254);
	  COL_TRI(177, 179, 252);
	  COL_TRI(180, 181, 384);
	  COL_TRI(181, 180, 192);
	  COL_TRI(182, 181, 184);
	  COL_TRI(182, 295, 181);
	  COL_TRI(188, 393, 174);
	  COL_TRI(183, 384, 181);
	  COL_TRI(185, 167, 388);
	  COL_TRI(186, 187, 173);
	  COL_TRI(187, 172, 173);
	  COL_TRI(193, 182, 184);
	  COL_TRI(178, 189, 399);
	  COL_TRI(189, 178, 395);
	  COL_TRI(190, 178, 399);
	  COL_TRI(178, 176, 395);
	  COL_TRI(191, 395, 394);
	  COL_TRI(191, 291, 395);
	  COL_TRI(192, 400, 184);
	  COL_TRI(193, 184, 400);
	  COL_TRI(194, 401, 166);
	  COL_TRI(192, 271, 400);
	  COL_TRI(184, 181, 192);
	  COL_TRI(183, 294, 162);
	  COL_TRI(183, 389, 294);
	  COL_TRI(71, 166, 346);
	  COL_TRI(166, 345, 346);
	  COL_TRI(202, 200, 405);
	  COL_TRI(195, 388, 390);
	  COL_TRI(185, 388, 195);
	  COL_TRI(196, 390, 388);
	  COL_TRI(196, 198, 390);
	  COL_TRI(197, 390, 403);
	  COL_TRI(195, 390, 197);
	  COL_TRI(198, 403, 390);
	  COL_TRI(198, 404, 403);
	  COL_TRI(197, 403, 199);
	  COL_TRI(199, 403, 200);
	  COL_TRI(200, 403, 404);
	  COL_TRI(200, 404, 405);
	  COL_TRI(201, 200, 202);
	  COL_TRI(199, 200, 201);
	  COL_TRI(206, 409, 208);
	  COL_TRI(202, 405, 406);
	  COL_TRI(203, 202, 204);
	  COL_TRI(201, 202, 203);
	  COL_TRI(202, 407, 204);
	  COL_TRI(202, 406, 407);
	  COL_TRI(204, 407, 408);
	  COL_TRI(203, 204, 205);
	  COL_TRI(205, 204, 206);
	  COL_TRI(204, 408, 206);
	  COL_TRI(206, 408, 409);
	  COL_TRI(207, 206, 208);
	  COL_TRI(205, 206, 207);
	  COL_TRI(208, 409, 210);
	  COL_TRI(209, 208, 410);
	  COL_TRI(207, 208, 209);
	  COL_TRI(208, 210, 410);
	  COL_TRI(210, 54, 410);
	  COL_TRI(210, 359, 54);
	  COL_TRI(211, 410, 54);
	  COL_TRI(209, 410, 211);
	  COL_TRI(211, 54, 51);
	  COL_TRI(212, 214, 411);
	  COL_TRI(213, 212, 411);
	  COL_TRI(203, 212, 213);
	  COL_TRI(212, 205, 215);
	  COL_TRI(205, 207, 215);
	  COL_TRI(212, 203, 205);
	  COL_TRI(207, 216, 215);
	  COL_TRI(214, 215, 413);
	  COL_TRI(214, 212, 215);
	  COL_TRI(215, 216, 413);
	  COL_TRI(201, 203, 213);
	  COL_TRI(216, 414, 413);
	  COL_TRI(216, 217, 414);
	  COL_TRI(209, 217, 216);
	  COL_TRI(207, 209, 216);
	  COL_TRI(51, 52, 36);
	  COL_TRI(217, 415, 414);
	  COL_TRI(217, 218, 415);
	  COL_TRI(211, 218, 217);
	  COL_TRI(209, 211, 217);
	  COL_TRI(218, 416, 415);
	  COL_TRI(51, 219, 218);
	  COL_TRI(211, 51, 218);
	  COL_TRI(218, 219, 416);
	  COL_TRI(219, 417, 416);
	  COL_TRI(51, 36, 219);
	  COL_TRI(219, 36, 417);
	  COL_TRI(36, 34, 417);
	  COL_TRI(222, 412, 419);
	  COL_TRI(185, 195, 194);
	  COL_TRI(166, 185, 194);
	  COL_TRI(194, 220, 401);
	  COL_TRI(195, 220, 194);
	  COL_TRI(220, 418, 401);
	  COL_TRI(220, 221, 418);
	  COL_TRI(197, 221, 220);
	  COL_TRI(195, 197, 220);
	  COL_TRI(221, 419, 418);
	  COL_TRI(199, 222, 221);
	  COL_TRI(197, 199, 221);
	  COL_TRI(221, 222, 419);
	  COL_TRI(222, 213, 412);
	  COL_TRI(201, 213, 222);
	  COL_TRI(199, 201, 222);
	  COL_TRI(213, 411, 412);
	  COL_TRI(223, 172, 397);
	  COL_TRI(223, 397, 420);
	  COL_TRI(224, 397, 172);
	  COL_TRI(225, 420, 397);
	  COL_TRI(225, 397, 224);
	  COL_TRI(224, 172, 187);
	  COL_TRI(226, 229, 238);
	  COL_TRI(226, 238, 236);
	  COL_TRI(227, 229, 226);
	  COL_TRI(227, 228, 229);
	  COL_TRI(228, 224, 229);
	  COL_TRI(229, 187, 238);
	  COL_TRI(229, 224, 187);
	  COL_TRI(228, 225, 224);
	  COL_TRI(230, 232, 231);
	  COL_TRI(231, 421, 230);
	  COL_TRI(231, 422, 421);
	  COL_TRI(231, 423, 422);
	  COL_TRI(234, 48, 235);
	  COL_TRI(233, 425, 423);
	  COL_TRI(231, 233, 423);
	  COL_TRI(233, 426, 425);
	  COL_TRI(233, 427, 426);
	  COL_TRI(233, 428, 427);
	  COL_TRI(233, 429, 428);
	  COL_TRI(233, 430, 429);
	  COL_TRI(232, 424, 231);
	  COL_TRI(235, 236, 237);
	  COL_TRI(234, 235, 237);
	  COL_TRI(234, 186, 391);
	  COL_TRI(234, 237, 186);
	  COL_TRI(236, 238, 237);
	  COL_TRI(237, 238, 186);
	  COL_TRI(238, 187, 186);
	  COL_TRI(239, 241, 244);
	  COL_TRI(239, 240, 241);
	  COL_TRI(240, 242, 241);
	  COL_TRI(241, 245, 244);
	  COL_TRI(242, 243, 241);
	  COL_TRI(247, 298, 248);
	  COL_TRI(244, 293, 294);
	  COL_TRI(245, 293, 244);
	  COL_TRI(240, 246, 242);
	  COL_TRI(246, 247, 242);
	  COL_TRI(247, 248, 242);
	  COL_TRI(248, 243, 242);
	  COL_TRI(246, 249, 247);
	  COL_TRI(249, 399, 247);
	  COL_TRI(249, 190, 399);
	  COL_TRI(189, 298, 399);
	  COL_TRI(189, 292, 298);
	  COL_TRI(250, 394, 177);
	  COL_TRI(250, 191, 394);
	  COL_TRI(251, 250, 177);
	  COL_TRI(251, 177, 252);
	  COL_TRI(251, 252, 255);
	  COL_TRI(258, 435, 434);
	  COL_TRI(252, 254, 255);
	  COL_TRI(253, 254, 398);
	  COL_TRI(254, 253, 431);
	  COL_TRI(255, 254, 431);
	  COL_TRI(253, 398, 432);
	  COL_TRI(253, 432, 433);
	  COL_TRI(253, 433, 434);
	  COL_TRI(253, 435, 431);
	  COL_TRI(253, 434, 435);
	  COL_TRI(256, 434, 433);
	  COL_TRI(256, 257, 434);
	  COL_TRI(257, 258, 434);
	  COL_TRI(259, 257, 256);
	  COL_TRI(259, 260, 257);
	  COL_TRI(260, 261, 257);
	  COL_TRI(261, 258, 257);
	  COL_TRI(262, 260, 259);
	  COL_TRI(262, 263, 260);
	  COL_TRI(263, 264, 260);
	  COL_TRI(264, 261, 260);
	  COL_TRI(265, 263, 262);
	  COL_TRI(265, 266, 263);
	  COL_TRI(266, 267, 263);
	  COL_TRI(267, 264, 263);
	  COL_TRI(266, 188, 267);
	  COL_TRI(266, 393, 188);
	  COL_TRI(268, 436, 437);
	  COL_TRI(268, 437, 438);
	  COL_TRI(269, 437, 436);
	  COL_TRI(270, 436, 439);
	  COL_TRI(270, 269, 436);
	  COL_TRI(271, 273, 402);
	  COL_TRI(275, 277, 441);
	  COL_TRI(271, 402, 400);
	  COL_TRI(272, 400, 402);
	  COL_TRI(272, 193, 400);
	  COL_TRI(273, 275, 440);
	  COL_TRI(273, 440, 402);
	  COL_TRI(274, 272, 402);
	  COL_TRI(274, 402, 440);
	  COL_TRI(275, 441, 440);
	  COL_TRI(188, 279, 280);
	  COL_TRI(276, 274, 440);
	  COL_TRI(276, 440, 441);
	  COL_TRI(277, 437, 441);
	  COL_TRI(277, 438, 437);
	  COL_TRI(269, 278, 437);
	  COL_TRI(278, 441, 437);
	  COL_TRI(278, 276, 441);
	  COL_TRI(188, 174, 223);
	  COL_TRI(284, 442, 282);
	  COL_TRI(267, 188, 280);
	  COL_TRI(279, 287, 286);
	  COL_TRI(279, 286, 280);
	  COL_TRI(280, 286, 264);
	  COL_TRI(280, 264, 267);
	  COL_TRI(281, 255, 282);
	  COL_TRI(251, 255, 281);
	  COL_TRI(282, 255, 431);
	  COL_TRI(283, 282, 431);
	  COL_TRI(284, 282, 283);
	  COL_TRI(289, 285, 258);
	  COL_TRI(283, 431, 435);
	  COL_TRI(281, 282, 442);
	  COL_TRI(285, 283, 435);
	  COL_TRI(285, 435, 258);
	  COL_TRI(286, 261, 264);
	  COL_TRI(287, 289, 286);
	  COL_TRI(286, 289, 261);
	  COL_TRI(289, 258, 261);
	  COL_TRI(287, 288, 289);
	  COL_TRI(288, 285, 289);
	  COL_TRI(288, 290, 285);
	  COL_TRI(290, 283, 285);
	  COL_TRI(290, 284, 283);
	  COL_TRI(291, 443, 292);
	  COL_TRI(291, 189, 395);
	  COL_TRI(291, 292, 189);
	  COL_TRI(293, 162, 294);
	  COL_TRI(292, 443, 299);
	  COL_TRI(156, 299, 443);
	  COL_TRI(292, 299, 298);
	  COL_TRI(156, 300, 299);
	  COL_TRI(293, 161, 162);
	  COL_TRI(245, 161, 293);
	  COL_TRI(294, 389, 303);
	  COL_TRI(295, 297, 389);
	  COL_TRI(183, 295, 389);
	  COL_TRI(296, 303, 389);
	  COL_TRI(297, 296, 389);
	  COL_TRI(298, 300, 248);
	  COL_TRI(299, 300, 298);
	  COL_TRI(247, 399, 298);
	  COL_TRI(300, 243, 248);
	  COL_TRI(243, 301, 245);
	  COL_TRI(301, 161, 245);
	  COL_TRI(300, 302, 243);
	  COL_TRI(302, 301, 243);
	  COL_TRI(243, 245, 241);
	  COL_TRI(296, 444, 303);
	  COL_TRI(303, 444, 445);
	  COL_TRI(304, 445, 444);
	  COL_TRI(304, 444, 305);
	  COL_TRI(305, 444, 296);
	  COL_TRI(306, 296, 297);
	  COL_TRI(305, 296, 306);
	  COL_TRI(307, 297, 295);
	  COL_TRI(306, 297, 307);
	  COL_TRI(307, 295, 182);
	  COL_TRI(308, 446, 428);
	  COL_TRI(308, 428, 429);
	  COL_TRI(311, 422, 312);
	  COL_TRI(309, 428, 446);
	  COL_TRI(232, 310, 447);
	  COL_TRI(232, 230, 310);
	  COL_TRI(310, 421, 311);
	  COL_TRI(310, 230, 421);
	  COL_TRI(311, 421, 422);
	  COL_TRI(316, 319, 269);
	  COL_TRI(312, 422, 423);
	  COL_TRI(312, 423, 313);
	  COL_TRI(313, 423, 425);
	  COL_TRI(313, 425, 314);
	  COL_TRI(314, 425, 426);
	  COL_TRI(314, 426, 315);
	  COL_TRI(315, 426, 427);
	  COL_TRI(315, 427, 309);
	  COL_TRI(309, 427, 428);
	  COL_TRI(316, 269, 270);
	  COL_TRI(319, 278, 269);
	  COL_TRI(318, 270, 320);
	  COL_TRI(318, 316, 270);
	  COL_TRI(320, 270, 439);
	  COL_TRI(317, 321, 319);
	  COL_TRI(319, 342, 278);
	  COL_TRI(321, 322, 319);
	  COL_TRI(322, 342, 319);
	  COL_TRI(317, 319, 316);
	  COL_TRI(323, 321, 317);
	  COL_TRI(170, 323, 317);
	  COL_TRI(323, 322, 321);
	  COL_TRI(3, 318, 320);
	  COL_TRI(324, 325, 170);
	  COL_TRI(325, 323, 170);
	  COL_TRI(325, 343, 323);
	  COL_TRI(323, 343, 322);
	  COL_TRI(325, 344, 343);
	  COL_TRI(320, 439, 448);
	  COL_TRI(3, 448, 0);
	  COL_TRI(3, 320, 448);
	  COL_TRI(326, 307, 193);
	  COL_TRI(307, 182, 193);
	  COL_TRI(306, 307, 326);
	  COL_TRI(327, 306, 326);
	  COL_TRI(305, 306, 327);
	  COL_TRI(328, 304, 305);
	  COL_TRI(329, 305, 327);
	  COL_TRI(328, 305, 329);
	  COL_TRI(330, 327, 326);
	  COL_TRI(330, 326, 331);
	  COL_TRI(331, 326, 193);
	  COL_TRI(331, 193, 272);
	  COL_TRI(332, 327, 330);
	  COL_TRI(332, 329, 327);
	  COL_TRI(333, 328, 329);
	  COL_TRI(333, 329, 332);
	  COL_TRI(334, 331, 272);
	  COL_TRI(335, 331, 334);
	  COL_TRI(335, 330, 331);
	  COL_TRI(334, 272, 274);
	  COL_TRI(336, 330, 335);
	  COL_TRI(336, 332, 330);
	  COL_TRI(337, 332, 336);
	  COL_TRI(337, 333, 332);
	  COL_TRI(338, 334, 274);
	  COL_TRI(335, 334, 338);
	  COL_TRI(338, 274, 276);
	  COL_TRI(339, 335, 338);
	  COL_TRI(340, 335, 339);
	  COL_TRI(340, 336, 335);
	  COL_TRI(341, 336, 340);
	  COL_TRI(341, 337, 336);
	  COL_TRI(342, 338, 278);
	  COL_TRI(338, 276, 278);
	  COL_TRI(339, 338, 342);
	  COL_TRI(322, 339, 342);
	  COL_TRI(340, 339, 322);
	  COL_TRI(343, 340, 322);
	  COL_TRI(344, 340, 343);
	  COL_TRI(344, 341, 340);
	  COL_TRI(345, 8, 4);
	  COL_TRI(345, 4, 346);
	  COL_TRI(347, 449, 450);
	  COL_TRI(346, 4, 71);
	  COL_TRI(4, 6, 71);
	  COL_TRI(6, 11, 71);
	  COL_TRI(11, 370, 71);
	  COL_TRI(30, 449, 347);
	  COL_TRI(30, 347, 26);
	  COL_TRI(350, 349, 452);
	  COL_TRI(26, 347, 348);
	  COL_TRI(348, 347, 450);
	  COL_TRI(26, 348, 31);
	  COL_TRI(349, 451, 452);
	  COL_TRI_INIT(SURFACE_DEATH_PLANE, 2);
	  COL_TRI(12, 13, 14);
	  COL_TRI(12, 15, 13);
	  COL_TRI_INIT(SURFACE_INSTANT_WARP_1D, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI_INIT(SURFACE_INSTANT_WARP_1E, 6);
	  COL_TRI(4, 5, 6);
	  COL_TRI(5, 7, 6);
	  COL_TRI(8, 5, 4);
	  COL_TRI(8, 9, 5);
	  COL_TRI(7, 10, 6);
	  COL_TRI(10, 11, 6);
	  COL_TRI_STOP();
	  COL_END();
	}

	function ttm_seg7_area_4_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0xFF);
	  COL_VERTEX(-6860, 6042, 5120);
	  COL_VERTEX(-6963, 6144, 5120);
	  COL_VERTEX(-6860, 6094, 5634);
	  COL_VERTEX(-6963, 6196, 5634);
	  COL_VERTEX(-6246, 6042, 5120);
	  COL_VERTEX(-6246, 6094, 5634);
	  COL_VERTEX(-6143, 6196, 5634);
	  COL_VERTEX(-6143, 6144, 5120);
	  COL_VERTEX(8192, -6143, -8191);
	  COL_VERTEX(-8191, -6143, 8192);
	  COL_VERTEX(8192, -6143, 8192);
	  COL_VERTEX(-8191, -6143, -8191);
	  COL_VERTEX(-7489, -1865, -3787);
	  COL_VERTEX(-5441, -1865, -5835);
	  COL_VERTEX(-7489, -1865, -5835);
	  COL_VERTEX(-5441, -1865, -3787);
	  COL_VERTEX(-3188, -1967, -6756);
	  COL_VERTEX(-3188, -1558, -5220);
	  COL_VERTEX(-3188, -1558, -4401);
	  COL_VERTEX(-3188, -1967, -2353);
	  COL_VERTEX(-3188, 592, -5732);
	  COL_VERTEX(-3188, -841, -4401);
	  COL_VERTEX(-3188, -739, -4504);
	  COL_VERTEX(-3188, 592, -3377);
	  COL_VERTEX(-3188, -841, -5220);
	  COL_VERTEX(-3188, -739, -5118);
	  COL_VERTEX(-3188, 1616, -4708);
	  COL_VERTEX(6539, 1718, -2252);
	  COL_VERTEX(6539, 1411, -1124);
	  COL_VERTEX(6539, 1923, -1124);
	  COL_VERTEX(6539, 1206, -2252);
	  COL_VERTEX(6381, 1616, -2886);
	  COL_VERTEX(6865, 1616, -3066);
	  COL_VERTEX(7053, 1718, -2316);
	  COL_VERTEX(6619, 1564, -3902);
	  COL_VERTEX(6071, 1001, -3506);
	  COL_VERTEX(6495, 1513, -3812);
	  COL_VERTEX(5644, 1411, -3933);
	  COL_VERTEX(6071, 1513, -3506);
	  COL_VERTEX(5644, 899, -3933);
	  COL_VERTEX(5950, 1411, -4357);
	  COL_VERTEX(5204, 1308, -4728);
	  COL_VERTEX(5024, 796, -4243);
	  COL_VERTEX(4390, 1206, -4401);
	  COL_VERTEX(5024, 1308, -4243);
	  COL_VERTEX(4390, 694, -4401);
	  COL_VERTEX(4454, 1206, -4916);
	  COL_VERTEX(3262, 1104, -5220);
	  COL_VERTEX(907, 592, -4401);
	  COL_VERTEX(-3188, -1455, -4401);
	  COL_VERTEX(-628, -1967, -4401);
	  COL_VERTEX(-2217, -1279, -4401);
	  COL_VERTEX(-2217, -1279, -5220);
	  COL_VERTEX(-1218, -799, -4401);
	  COL_VERTEX(-1218, -799, -5220);
	  COL_VERTEX(-1730, -1106, -5220);
	  COL_VERTEX(-1730, -1106, -4401);
	  COL_VERTEX(-5441, -1865, -5220);
	  COL_VERTEX(-5441, -841, -3787);
	  COL_VERTEX(-5441, -1251, -4401);
	  COL_VERTEX(-5441, -841, -5835);
	  COL_VERTEX(-7489, -841, -3787);
	  COL_VERTEX(-5441, -1148, -4504);
	  COL_VERTEX(-5441, -1865, -4401);
	  COL_VERTEX(-6143, 6247, 6144);
	  COL_VERTEX(-6246, 6144, 6144);
	  COL_VERTEX(3058, 5251, 3687);
	  COL_VERTEX(3058, 3100, 3073);
	  COL_VERTEX(5918, 2742, 3022);
	  COL_VERTEX(3058, 2998, 2971);
	  COL_VERTEX(6040, 1462, -4481);
	  COL_VERTEX(7009, 1667, -3119);
	  COL_VERTEX(5293, 1462, -4968);
	  COL_VERTEX(5310, 1564, -5016);
	  COL_VERTEX(5257, 1360, -4872);
	  COL_VERTEX(4485, 1360, -5170);
	  COL_VERTEX(6100, 1564, -4564);
	  COL_VERTEX(6702, 1667, -3962);
	  COL_VERTEX(7051, 1923, -1124);
	  COL_VERTEX(7051, 2281, 1127);
	  COL_VERTEX(7205, 2332, 1127);
	  COL_VERTEX(7053, 2332, 1602);
	  COL_VERTEX(7205, 1974, -1124);
	  COL_VERTEX(7206, 1769, -2334);
	  COL_VERTEX(7307, 2435, 1127);
	  COL_VERTEX(7206, 2384, 1621);
	  COL_VERTEX(7307, 2076, -1124);
	  COL_VERTEX(7307, 1872, -2347);
	  COL_VERTEX(4472, 1257, -5068);
	  COL_VERTEX(6539, 1769, 1127);
	  COL_VERTEX(5906, 2640, 2921);
	  COL_VERTEX(6281, 2588, 2827);
	  COL_VERTEX(5887, 2588, 2768);
	  COL_VERTEX(6228, 2537, 2682);
	  COL_VERTEX(-5157, 5325, 2359);
	  COL_VERTEX(-5082, 5325, 2969);
	  COL_VERTEX(-5422, 5428, 3054);
	  COL_VERTEX(-5635, 5428, 2478);
	  COL_VERTEX(3058, 2179, 615);
	  COL_VERTEX(6317, 2691, 2923);
	  COL_VERTEX(5925, 2896, 3073);
	  COL_VERTEX(6048, 2537, 2198);
	  COL_VERTEX(3058, 2486, 2868);
	  COL_VERTEX(3058, 2998, 2868);
	  COL_VERTEX(6564, 2486, 2517);
	  COL_VERTEX(6259, 1974, 2093);
	  COL_VERTEX(6378, 1923, 1973);
	  COL_VERTEX(6802, 2435, 2279);
	  COL_VERTEX(6483, 1872, 1763);
	  COL_VERTEX(6968, 2384, 1942);
	  COL_VERTEX(6539, 1820, 1539);
	  COL_VERTEX(1829, 3365, 2290);
	  COL_VERTEX(600, 3616, 2725);
	  COL_VERTEX(1829, 3258, 2895);
	  COL_VERTEX(3058, 2998, 2356);
	  COL_VERTEX(-5757, 5530, 3222);
	  COL_VERTEX(-6116, 5530, 2723);
	  COL_VERTEX(-5993, 5632, 3458);
	  COL_VERTEX(-6492, 5632, 3099);
	  COL_VERTEX(-6737, 5735, 3580);
	  COL_VERTEX(-6161, 5735, 3793);
	  COL_VERTEX(-6246, 5837, 4133);
	  COL_VERTEX(-6856, 5837, 4058);
	  COL_VERTEX(3058, 3715, 2254);
	  COL_VERTEX(-6575, 6349, 3039);
	  COL_VERTEX(-6833, 5837, 3545);
	  COL_VERTEX(-6575, 5735, 3039);
	  COL_VERTEX(-6833, 6452, 3545);
	  COL_VERTEX(-6957, 5940, 4046);
	  COL_VERTEX(-6737, 6554, 3580);
	  COL_VERTEX(-6856, 6656, 4058);
	  COL_VERTEX(-6957, 6554, 4046);
	  COL_VERTEX(-6963, 6759, 5120);
	  COL_VERTEX(-6161, 6554, 3793);
	  COL_VERTEX(-6492, 6452, 3099);
	  COL_VERTEX(-6246, 6656, 4133);
	  COL_VERTEX(-6860, 6861, 5120);
	  COL_VERTEX(-6065, 6452, 3829);
	  COL_VERTEX(-5993, 6452, 3458);
	  COL_VERTEX(-6144, 6554, 4146);
	  COL_VERTEX(-6246, 6861, 5120);
	  COL_VERTEX(-5910, 5735, 3518);
	  COL_VERTEX(-5910, 6349, 3518);
	  COL_VERTEX(-6065, 5837, 3829);
	  COL_VERTEX(-6143, 6759, 5120);
	  COL_VERTEX(-6144, 5940, 4146);
	  COL_VERTEX(-6176, 6247, 2640);
	  COL_VERTEX(-6176, 5632, 2640);
	  COL_VERTEX(-6116, 6349, 2723);
	  COL_VERTEX(-5757, 6349, 3222);
	  COL_VERTEX(-5697, 5632, 3305);
	  COL_VERTEX(-5697, 6247, 3305);
	  COL_VERTEX(-5670, 6144, 2382);
	  COL_VERTEX(-5670, 5530, 2382);
	  COL_VERTEX(-5635, 6247, 2478);
	  COL_VERTEX(-5422, 6247, 3054);
	  COL_VERTEX(-5386, 5530, 3150);
	  COL_VERTEX(-5386, 6144, 3150);
	  COL_VERTEX(-5169, 6042, 2258);
	  COL_VERTEX(-5169, 5428, 2258);
	  COL_VERTEX(-5157, 6144, 2359);
	  COL_VERTEX(-5082, 6144, 2969);
	  COL_VERTEX(-5069, 5428, 3071);
	  COL_VERTEX(-5069, 6042, 3071);
	  COL_VERTEX(-6143, 6861, 6144);
	  COL_VERTEX(-6246, 6964, 6144);
	  COL_VERTEX(-6860, 6964, 6144);
	  COL_VERTEX(-6963, 6861, 6144);
	  COL_VERTEX(-3071, 4944, 2971);
	  COL_VERTEX(-3071, 4944, 2356);
	  COL_VERTEX(-3071, 5046, 3073);
	  COL_VERTEX(-3071, 5046, 2254);
	  COL_VERTEX(-3071, 5660, 2254);
	  COL_VERTEX(-3071, 5763, 2356);
	  COL_VERTEX(-3071, 5763, 2971);
	  COL_VERTEX(-3071, 5660, 3073);
	  COL_VERTEX(-1842, 5084, 2171);
	  COL_VERTEX(-1842, 4510, 2391);
	  COL_VERTEX(-1842, 4451, 2523);
	  COL_VERTEX(-613, 4506, 2152);
	  COL_VERTEX(-1842, 5216, 2230);
	  COL_VERTEX(-613, 4650, 2165);
	  COL_VERTEX(-613, 5045, 2635);
	  COL_VERTEX(-1842, 5436, 2804);
	  COL_VERTEX(-1842, 5377, 2936);
	  COL_VERTEX(-613, 5033, 2780);
	  COL_VERTEX(-613, 4562, 3175);
	  COL_VERTEX(-1842, 4803, 3156);
	  COL_VERTEX(-1842, 4671, 3097);
	  COL_VERTEX(-613, 4418, 3162);
	  COL_VERTEX(-613, 4023, 2691);
	  COL_VERTEX(-613, 4035, 2547);
	  COL_VERTEX(600, 3923, 2193);
	  COL_VERTEX(600, 4063, 2155);
	  COL_VERTEX(600, 4595, 2462);
	  COL_VERTEX(600, 4633, 2602);
	  COL_VERTEX(600, 4326, 3134);
	  COL_VERTEX(600, 4186, 3172);
	  COL_VERTEX(600, 3654, 2865);
	  COL_VERTEX(1829, 3483, 2207);
	  COL_VERTEX(1829, 4088, 2313);
	  COL_VERTEX(1829, 4172, 2432);
	  COL_VERTEX(1829, 4065, 3037);
	  COL_VERTEX(1829, 3946, 3120);
	  COL_VERTEX(1829, 3341, 3013);
	  COL_VERTEX(3058, 3100, 2254);
	  COL_VERTEX(3058, 3817, 2356);
	  COL_VERTEX(3058, 3817, 2971);
	  COL_VERTEX(3058, 3715, 3073);
	  COL_VERTEX(6654, 2537, 2641);
	  COL_VERTEX(6714, 2640, 2724);
	  COL_VERTEX(6927, 2486, 2369);
	  COL_VERTEX(7010, 2588, 2429);
	  COL_VERTEX(7112, 2435, 1996);
	  COL_VERTEX(7208, 2537, 2031);
	  COL_VERTEX(7307, 2486, 1633);
	  COL_VERTEX(7105, 1769, -3155);
	  COL_VERTEX(6381, 1104, -2886);
	  COL_VERTEX(3262, 1104, -4401);
	  COL_VERTEX(3262, 592, -4401);
	  COL_VERTEX(907, 592, -5220);
	  COL_VERTEX(907, 80, -5220);
	  COL_VERTEX(907, 80, -4401);
	  COL_VERTEX(-3188, -1967, -4401);
	  COL_VERTEX(-706, -390, -5220);
	  COL_VERTEX(-706, -390, -4401);
	  COL_VERTEX(-628, -1967, -5220);
	  COL_VERTEX(-7489, -841, -5835);
	  COL_VERTEX(-5441, -1251, -5220);
	  COL_VERTEX(-5441, -1148, -5118);
	  COL_VERTEX(-3188, -1455, -5220);
	  COL_VERTEX(-6860, 6144, 6144);
	  COL_VERTEX(-6963, 6247, 6144);
	  COL_VERTEX(3058, 2179, 3687);
	  COL_VERTEX(6130, 1667, -4606);
	  COL_VERTEX(6744, 1769, -3992);
	  COL_VERTEX(5824, 2588, 2254);
	  COL_VERTEX(4491, 1462, -5220);
	  COL_VERTEX(7154, 1872, -3172);
	  COL_VERTEX(7358, 2588, 1639);
	  COL_VERTEX(7358, 2537, 1127);
	  COL_VERTEX(7358, 1974, -2353);
	  COL_VERTEX(7358, 2179, -1124);
	  COL_VERTEX(6539, 2281, 1127);
	  COL_VERTEX(6334, 2793, 2971);
	  COL_VERTEX(6744, 2742, 2766);
	  COL_VERTEX(5824, 2076, 2254);
	  COL_VERTEX(6048, 2025, 2198);
	  COL_VERTEX(6259, 2486, 2093);
	  COL_VERTEX(6378, 2435, 1973);
	  COL_VERTEX(6483, 2384, 1763);
	  COL_VERTEX(6539, 2332, 1539);
	  COL_VERTEX(3058, 5251, 615);
	  COL_VERTEX(7051, 2691, 2459);
	  COL_VERTEX(7256, 2640, 2049);
	  COL_TRI_INIT(SURFACE_DEFAULT, 425);
	  COL_TRI(16, 17, 18);
	  COL_TRI(16, 18, 19);
	  COL_TRI(17, 16, 20);
	  COL_TRI(19, 18, 21);
	  COL_TRI(20, 19, 22);
	  COL_TRI(20, 23, 19);
	  COL_TRI(19, 21, 22);
	  COL_TRI(24, 17, 20);
	  COL_TRI(20, 22, 25);
	  COL_TRI(20, 25, 24);
	  COL_TRI(20, 26, 23);
	  COL_TRI(27, 28, 29);
	  COL_TRI(30, 27, 31);
	  COL_TRI(27, 32, 31);
	  COL_TRI(27, 33, 32);
	  COL_TRI(33, 29, 78);
	  COL_TRI(33, 27, 29);
	  COL_TRI(32, 33, 71);
	  COL_TRI(34, 32, 71);
	  COL_TRI(34, 36, 32);
	  COL_TRI(30, 31, 217);
	  COL_TRI(35, 217, 31);
	  COL_TRI(35, 31, 38);
	  COL_TRI(36, 38, 31);
	  COL_TRI(37, 38, 40);
	  COL_TRI(38, 36, 40);
	  COL_TRI(39, 35, 38);
	  COL_TRI(39, 38, 37);
	  COL_TRI(36, 34, 70);
	  COL_TRI(40, 36, 70);
	  COL_TRI(41, 37, 40);
	  COL_TRI(42, 37, 44);
	  COL_TRI(42, 39, 37);
	  COL_TRI(41, 44, 37);
	  COL_TRI(43, 44, 46);
	  COL_TRI(44, 41, 46);
	  COL_TRI(45, 42, 44);
	  COL_TRI(45, 44, 43);
	  COL_TRI(27, 30, 28);
	  COL_TRI(46, 41, 88);
	  COL_TRI(46, 88, 47);
	  COL_TRI(45, 43, 218);
	  COL_TRI(47, 218, 43);
	  COL_TRI(47, 43, 46);
	  COL_TRI(45, 218, 219);
	  COL_TRI(48, 218, 47);
	  COL_TRI(50, 56, 51);
	  COL_TRI(48, 47, 220);
	  COL_TRI(48, 221, 222);
	  COL_TRI(48, 220, 221);
	  COL_TRI(48, 222, 219);
	  COL_TRI(49, 223, 50);
	  COL_TRI(50, 224, 225);
	  COL_TRI(50, 226, 224);
	  COL_TRI(51, 49, 50);
	  COL_TRI(52, 51, 55);
	  COL_TRI(51, 56, 55);
	  COL_TRI(53, 225, 224);
	  COL_TRI(50, 225, 53);
	  COL_TRI(54, 53, 224);
	  COL_TRI(50, 53, 56);
	  COL_TRI(55, 56, 54);
	  COL_TRI(56, 53, 54);
	  COL_TRI(57, 51, 52);
	  COL_TRI(57, 63, 51);
	  COL_TRI(48, 219, 218);
	  COL_TRI(58, 62, 59);
	  COL_TRI(59, 15, 58);
	  COL_TRI(58, 60, 62);
	  COL_TRI(58, 61, 227);
	  COL_TRI(58, 227, 60);
	  COL_TRI(60, 227, 14);
	  COL_TRI(14, 227, 61);
	  COL_TRI(60, 13, 57);
	  COL_TRI(60, 57, 228);
	  COL_TRI(60, 228, 229);
	  COL_TRI(60, 229, 62);
	  COL_TRI(14, 61, 12);
	  COL_TRI(61, 58, 15);
	  COL_TRI(61, 15, 12);
	  COL_TRI(60, 14, 13);
	  COL_TRI(57, 24, 228);
	  COL_TRI(24, 25, 229);
	  COL_TRI(25, 22, 62);
	  COL_TRI(25, 62, 229);
	  COL_TRI(62, 22, 21);
	  COL_TRI(62, 21, 59);
	  COL_TRI(24, 229, 228);
	  COL_TRI(63, 59, 21);
	  COL_TRI(63, 21, 49);
	  COL_TRI(59, 63, 15);
	  COL_TRI(57, 230, 24);
	  COL_TRI(66, 233, 67);
	  COL_TRI(64, 5, 65);
	  COL_TRI(64, 6, 5);
	  COL_TRI(65, 5, 231);
	  COL_TRI(5, 2, 231);
	  COL_TRI(2, 3, 231);
	  COL_TRI(3, 232, 231);
	  COL_TRI(70, 34, 76);
	  COL_TRI(67, 90, 92);
	  COL_TRI(68, 90, 67);
	  COL_TRI(68, 67, 208);
	  COL_TRI(69, 67, 92);
	  COL_TRI(69, 67, 233);
	  COL_TRI(66, 67, 208);
	  COL_TRI(34, 71, 77);
	  COL_TRI(34, 77, 76);
	  COL_TRI(76, 77, 234);
	  COL_TRI(33, 83, 71);
	  COL_TRI(71, 216, 77);
	  COL_TRI(71, 83, 216);
	  COL_TRI(72, 73, 237);
	  COL_TRI(73, 76, 234);
	  COL_TRI(73, 72, 76);
	  COL_TRI(70, 76, 72);
	  COL_TRI(74, 70, 72);
	  COL_TRI(75, 72, 237);
	  COL_TRI(74, 72, 75);
	  COL_TRI(77, 235, 234);
	  COL_TRI(33, 78, 83);
	  COL_TRI(78, 82, 83);
	  COL_TRI(78, 79, 80);
	  COL_TRI(78, 80, 82);
	  COL_TRI(79, 81, 80);
	  COL_TRI(80, 85, 84);
	  COL_TRI(81, 85, 80);
	  COL_TRI(82, 80, 84);
	  COL_TRI(82, 86, 87);
	  COL_TRI(83, 82, 87);
	  COL_TRI(82, 84, 86);
	  COL_TRI(84, 239, 240);
	  COL_TRI(84, 215, 239);
	  COL_TRI(85, 215, 84);
	  COL_TRI(86, 84, 240);
	  COL_TRI(87, 86, 241);
	  COL_TRI(86, 242, 241);
	  COL_TRI(86, 240, 242);
	  COL_TRI(41, 74, 88);
	  COL_TRI(88, 74, 75);
	  COL_TRI(47, 88, 75);
	  COL_TRI(47, 75, 237);
	  COL_TRI(89, 29, 28);
	  COL_TRI(89, 243, 29);
	  COL_TRI(90, 68, 99);
	  COL_TRI(91, 90, 99);
	  COL_TRI(92, 90, 91);
	  COL_TRI(93, 92, 91);
	  COL_TRI(92, 236, 103);
	  COL_TRI(100, 68, 208);
	  COL_TRI(94, 97, 96);
	  COL_TRI(95, 94, 96);
	  COL_TRI(96, 97, 115);
	  COL_TRI(97, 116, 115);
	  COL_TRI(69, 233, 98);
	  COL_TRI(98, 114, 69);
	  COL_TRI(68, 100, 244);
	  COL_TRI(99, 68, 244);
	  COL_TRI(69, 103, 113);
	  COL_TRI(66, 208, 207);
	  COL_TRI(93, 236, 92);
	  COL_TRI(93, 101, 236);
	  COL_TRI(101, 246, 236);
	  COL_TRI(102, 236, 246);
	  COL_TRI(102, 103, 236);
	  COL_TRI(92, 103, 69);
	  COL_TRI(103, 114, 113);
	  COL_TRI(108, 249, 250);
	  COL_TRI(101, 247, 246);
	  COL_TRI(104, 248, 101);
	  COL_TRI(104, 101, 93);
	  COL_TRI(105, 101, 248);
	  COL_TRI(105, 247, 101);
	  COL_TRI(106, 105, 248);
	  COL_TRI(107, 248, 104);
	  COL_TRI(107, 249, 248);
	  COL_TRI(106, 248, 249);
	  COL_TRI(108, 106, 249);
	  COL_TRI(109, 249, 107);
	  COL_TRI(109, 250, 249);
	  COL_TRI(110, 108, 250);
	  COL_TRI(81, 251, 250);
	  COL_TRI(81, 250, 109);
	  COL_TRI(110, 250, 251);
	  COL_TRI(89, 110, 251);
	  COL_TRI(79, 251, 81);
	  COL_TRI(79, 243, 251);
	  COL_TRI(89, 251, 243);
	  COL_TRI(78, 243, 79);
	  COL_TRI(78, 29, 243);
	  COL_TRI(111, 112, 113);
	  COL_TRI(112, 198, 113);
	  COL_TRI(98, 205, 114);
	  COL_TRI(36, 31, 32);
	  COL_TRI(115, 116, 117);
	  COL_TRI(116, 118, 117);
	  COL_TRI(117, 118, 120);
	  COL_TRI(118, 119, 120);
	  COL_TRI(119, 122, 121);
	  COL_TRI(120, 119, 121);
	  COL_TRI(124, 127, 125);
	  COL_TRI(66, 207, 206);
	  COL_TRI(121, 122, 4);
	  COL_TRI(122, 0, 4);
	  COL_TRI(123, 98, 252);
	  COL_TRI(123, 205, 98);
	  COL_TRI(124, 125, 126);
	  COL_TRI(125, 119, 118);
	  COL_TRI(1, 128, 131);
	  COL_TRI(122, 128, 1);
	  COL_TRI(125, 128, 119);
	  COL_TRI(127, 128, 125);
	  COL_TRI(127, 131, 128);
	  COL_TRI(128, 122, 119);
	  COL_TRI(0, 122, 1);
	  COL_TRI(129, 127, 124);
	  COL_TRI(130, 131, 127);
	  COL_TRI(129, 130, 127);
	  COL_TRI(1, 131, 132);
	  COL_TRI(131, 130, 136);
	  COL_TRI(132, 131, 136);
	  COL_TRI(133, 129, 134);
	  COL_TRI(134, 129, 124);
	  COL_TRI(135, 130, 129);
	  COL_TRI(133, 135, 129);
	  COL_TRI(130, 135, 140);
	  COL_TRI(136, 130, 140);
	  COL_TRI(137, 133, 138);
	  COL_TRI(138, 133, 134);
	  COL_TRI(139, 135, 133);
	  COL_TRI(137, 139, 133);
	  COL_TRI(135, 139, 144);
	  COL_TRI(140, 135, 144);
	  COL_TRI(141, 137, 142);
	  COL_TRI(141, 143, 137);
	  COL_TRI(142, 137, 138);
	  COL_TRI(143, 139, 137);
	  COL_TRI(146, 124, 126);
	  COL_TRI(144, 139, 145);
	  COL_TRI(143, 145, 139);
	  COL_TRI(120, 143, 141);
	  COL_TRI(120, 121, 143);
	  COL_TRI(121, 145, 143);
	  COL_TRI(144, 145, 7);
	  COL_TRI(145, 121, 4);
	  COL_TRI(7, 145, 4);
	  COL_TRI(117, 120, 141);
	  COL_TRI(146, 126, 147);
	  COL_TRI(126, 118, 116);
	  COL_TRI(126, 125, 118);
	  COL_TRI(134, 124, 146);
	  COL_TRI(148, 134, 146);
	  COL_TRI(138, 134, 148);
	  COL_TRI(142, 138, 149);
	  COL_TRI(149, 138, 148);
	  COL_TRI(150, 142, 151);
	  COL_TRI(150, 141, 142);
	  COL_TRI(151, 142, 149);
	  COL_TRI(117, 141, 150);
	  COL_TRI(115, 117, 150);
	  COL_TRI(147, 126, 116);
	  COL_TRI(152, 147, 153);
	  COL_TRI(152, 146, 147);
	  COL_TRI(147, 116, 97);
	  COL_TRI(153, 147, 97);
	  COL_TRI(148, 146, 152);
	  COL_TRI(149, 148, 154);
	  COL_TRI(154, 148, 152);
	  COL_TRI(151, 149, 155);
	  COL_TRI(155, 149, 154);
	  COL_TRI(156, 150, 151);
	  COL_TRI(157, 151, 155);
	  COL_TRI(156, 151, 157);
	  COL_TRI(115, 150, 156);
	  COL_TRI(96, 115, 156);
	  COL_TRI(158, 153, 159);
	  COL_TRI(158, 152, 153);
	  COL_TRI(153, 97, 94);
	  COL_TRI(159, 153, 94);
	  COL_TRI(154, 152, 158);
	  COL_TRI(164, 144, 7);
	  COL_TRI(155, 154, 160);
	  COL_TRI(160, 154, 158);
	  COL_TRI(157, 155, 161);
	  COL_TRI(161, 155, 160);
	  COL_TRI(162, 156, 157);
	  COL_TRI(163, 157, 161);
	  COL_TRI(162, 157, 163);
	  COL_TRI(96, 156, 162);
	  COL_TRI(95, 96, 162);
	  COL_TRI(164, 7, 64);
	  COL_TRI(94, 95, 168);
	  COL_TRI(165, 144, 164);
	  COL_TRI(165, 140, 144);
	  COL_TRI(166, 136, 140);
	  COL_TRI(166, 140, 165);
	  COL_TRI(167, 136, 166);
	  COL_TRI(167, 132, 136);
	  COL_TRI(132, 167, 232);
	  COL_TRI(1, 132, 232);
	  COL_TRI(168, 95, 170);
	  COL_TRI(169, 94, 168);
	  COL_TRI(173, 160, 158);
	  COL_TRI(95, 162, 170);
	  COL_TRI(170, 163, 175);
	  COL_TRI(170, 162, 163);
	  COL_TRI(159, 94, 169);
	  COL_TRI(171, 159, 169);
	  COL_TRI(172, 159, 171);
	  COL_TRI(172, 158, 159);
	  COL_TRI(173, 158, 172);
	  COL_TRI(178, 169, 168);
	  COL_TRI(161, 160, 173);
	  COL_TRI(174, 161, 173);
	  COL_TRI(175, 161, 174);
	  COL_TRI(175, 163, 161);
	  COL_TRI(171, 169, 177);
	  COL_TRI(176, 171, 177);
	  COL_TRI(176, 172, 171);
	  COL_TRI(177, 169, 178);
	  COL_TRI(177, 178, 191);
	  COL_TRI(179, 177, 191);
	  COL_TRI(179, 176, 177);
	  COL_TRI(180, 176, 181);
	  COL_TRI(181, 176, 179);
	  COL_TRI(180, 172, 176);
	  COL_TRI(173, 172, 180);
	  COL_TRI(182, 183, 180);
	  COL_TRI(182, 180, 181);
	  COL_TRI(183, 173, 180);
	  COL_TRI(183, 174, 173);
	  COL_TRI(184, 183, 185);
	  COL_TRI(185, 183, 182);
	  COL_TRI(184, 174, 183);
	  COL_TRI(191, 178, 190);
	  COL_TRI(175, 174, 184);
	  COL_TRI(186, 187, 184);
	  COL_TRI(186, 184, 185);
	  COL_TRI(187, 175, 184);
	  COL_TRI(187, 170, 175);
	  COL_TRI(188, 187, 189);
	  COL_TRI(189, 187, 186);
	  COL_TRI(188, 170, 187);
	  COL_TRI(168, 170, 188);
	  COL_TRI(178, 168, 188);
	  COL_TRI(190, 178, 188);
	  COL_TRI(190, 188, 189);
	  COL_TRI(196, 185, 195);
	  COL_TRI(192, 179, 191);
	  COL_TRI(192, 191, 112);
	  COL_TRI(191, 190, 112);
	  COL_TRI(193, 179, 192);
	  COL_TRI(181, 179, 193);
	  COL_TRI(194, 182, 181);
	  COL_TRI(194, 181, 193);
	  COL_TRI(185, 182, 195);
	  COL_TRI(195, 182, 194);
	  COL_TRI(196, 186, 185);
	  COL_TRI(189, 186, 197);
	  COL_TRI(197, 186, 196);
	  COL_TRI(198, 190, 189);
	  COL_TRI(198, 189, 197);
	  COL_TRI(112, 190, 198);
	  COL_TRI(111, 192, 112);
	  COL_TRI(193, 192, 199);
	  COL_TRI(199, 192, 111);
	  COL_TRI(200, 194, 193);
	  COL_TRI(200, 193, 199);
	  COL_TRI(113, 198, 204);
	  COL_TRI(114, 111, 113);
	  COL_TRI(195, 194, 201);
	  COL_TRI(201, 194, 200);
	  COL_TRI(202, 196, 195);
	  COL_TRI(202, 195, 201);
	  COL_TRI(197, 196, 203);
	  COL_TRI(203, 196, 202);
	  COL_TRI(204, 197, 203);
	  COL_TRI(204, 198, 197);
	  COL_TRI(199, 111, 205);
	  COL_TRI(205, 111, 114);
	  COL_TRI(123, 200, 199);
	  COL_TRI(123, 199, 205);
	  COL_TRI(201, 200, 206);
	  COL_TRI(206, 200, 123);
	  COL_TRI(207, 202, 201);
	  COL_TRI(207, 201, 206);
	  COL_TRI(203, 202, 208);
	  COL_TRI(208, 202, 207);
	  COL_TRI(67, 203, 208);
	  COL_TRI(67, 204, 203);
	  COL_TRI(69, 204, 67);
	  COL_TRI(113, 204, 69);
	  COL_TRI(206, 123, 252);
	  COL_TRI(66, 206, 252);
	  COL_TRI(93, 91, 209);
	  COL_TRI(104, 93, 209);
	  COL_TRI(91, 99, 210);
	  COL_TRI(209, 91, 210);
	  COL_TRI(210, 99, 245);
	  COL_TRI(99, 244, 245);
	  COL_TRI(104, 209, 211);
	  COL_TRI(107, 104, 211);
	  COL_TRI(209, 210, 212);
	  COL_TRI(211, 209, 212);
	  COL_TRI(210, 245, 253);
	  COL_TRI(212, 210, 253);
	  COL_TRI(107, 211, 213);
	  COL_TRI(109, 107, 213);
	  COL_TRI(211, 212, 214);
	  COL_TRI(213, 211, 214);
	  COL_TRI(212, 253, 254);
	  COL_TRI(214, 212, 254);
	  COL_TRI(109, 213, 85);
	  COL_TRI(81, 109, 85);
	  COL_TRI(216, 238, 235);
	  COL_TRI(213, 214, 215);
	  COL_TRI(85, 213, 215);
	  COL_TRI(214, 254, 239);
	  COL_TRI(215, 214, 239);
	  COL_TRI(83, 87, 216);
	  COL_TRI(216, 87, 238);
	  COL_TRI(87, 241, 238);
	  COL_TRI(77, 216, 235);
	  COL_TRI(40, 70, 74);
	  COL_TRI(41, 40, 74);
	  COL_TRI_INIT(SURFACE_DEATH_PLANE, 2);
	  COL_TRI(8, 9, 10);
	  COL_TRI(8, 11, 9);
	  COL_TRI_INIT(SURFACE_INSTANT_WARP_1E, 6);
	  COL_TRI(0, 1, 2);
	  COL_TRI(1, 3, 2);
	  COL_TRI(4, 0, 2);
	  COL_TRI(5, 4, 2);
	  COL_TRI(6, 4, 5);
	  COL_TRI(6, 7, 4);
	  COL_TRI_INIT(SURFACE_NO_CAM_COL_SLIPPERY, 2);
	  COL_TRI(12, 13, 14);
	  COL_TRI(12, 15, 13);
	  COL_TRI_STOP();
	  COL_END();
	}

	function ttm_seg7_collision_pitoune_2() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x10);
	  COL_VERTEX(1105, 237, -96);
	  COL_VERTEX(1106, -235, -97);
	  COL_VERTEX(1106, -97, -236);
	  COL_VERTEX(1105, 98, -235);
	  COL_VERTEX(1105, 236, 98);
	  COL_VERTEX(1105, 98, 237);
	  COL_VERTEX(1105, -97, 236);
	  COL_VERTEX(1106, -236, 98);
	  COL_VERTEX(-1104, 237, -97);
	  COL_VERTEX(-1104, -97, 236);
	  COL_VERTEX(-1104, 98, 237);
	  COL_VERTEX(-1104, -236, 97);
	  COL_VERTEX(-1104, -235, -97);
	  COL_VERTEX(-1104, -97, -236);
	  COL_VERTEX(-1104, 98, -235);
	  COL_VERTEX(-1104, 236, 98);
	  COL_TRI_INIT(SURFACE_DEFAULT, 12);
	  COL_TRI(8, 14, 13);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(0, 4, 5);
	  COL_TRI(0, 5, 6);
	  COL_TRI(0, 6, 7);
	  COL_TRI(0, 7, 1);
	  COL_TRI(8, 9, 10);
	  COL_TRI(8, 11, 9);
	  COL_TRI(8, 12, 11);
	  COL_TRI(8, 13, 12);
	  COL_TRI(8, 10, 15);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 16);
	  COL_TRI(9, 5, 10);
	  COL_TRI(14, 2, 13);
	  COL_TRI(14, 3, 2);
	  COL_TRI(15, 0, 8);
	  COL_TRI(15, 4, 0);
	  COL_TRI(5, 4, 15);
	  COL_TRI(10, 5, 15);
	  COL_TRI(0, 14, 8);
	  COL_TRI(9, 6, 5);
	  COL_TRI(7, 6, 9);
	  COL_TRI(11, 7, 9);
	  COL_TRI(1, 7, 12);
	  COL_TRI(7, 11, 12);
	  COL_TRI(0, 3, 14);
	  COL_TRI(12, 2, 1);
	  COL_TRI(12, 13, 2);
	  COL_TRI_STOP();
	  COL_END();
	}

	function ttm_seg7_collision_podium_warp() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x1E);
	  COL_VERTEX(-204, 0, -204);
	  COL_VERTEX(-204, 307, -204);
	  COL_VERTEX(1024, 0, -204);
	  COL_VERTEX(-204, 307, 205);
	  COL_VERTEX(-204, 0, 205);
	  COL_VERTEX(1024, 0, 205);
	  COL_VERTEX(-101, 205, 102);
	  COL_VERTEX(-101, 205, -101);
	  COL_VERTEX(205, 205, -204);
	  COL_VERTEX(102, 205, -101);
	  COL_VERTEX(-101, 0, -101);
	  COL_VERTEX(102, 0, -101);
	  COL_VERTEX(-204, 102, 614);
	  COL_VERTEX(205, 0, 205);
	  COL_VERTEX(-204, 0, 614);
	  COL_VERTEX(-204, 102, -613);
	  COL_VERTEX(205, 0, -613);
	  COL_VERTEX(-204, 102, -204);
	  COL_VERTEX(102, 0, 102);
	  COL_VERTEX(205, 205, 205);
	  COL_VERTEX(205, 102, 614);
	  COL_VERTEX(205, 102, 205);
	  COL_VERTEX(-204, 102, 205);
	  COL_VERTEX(205, 0, 614);
	  COL_VERTEX(-204, 0, -613);
	  COL_VERTEX(205, 102, -613);
	  COL_VERTEX(205, 102, -204);
	  COL_VERTEX(205, 0, -204);
	  COL_VERTEX(-101, 0, 102);
	  COL_VERTEX(102, 205, 102);
	  COL_TRI_INIT(SURFACE_DEFAULT, 34);
	  COL_TRI(10, 9, 7);
	  COL_TRI(0, 1, 2);
	  COL_TRI(3, 4, 5);
	  COL_TRI(1, 3, 6);
	  COL_TRI(1, 6, 7);
	  COL_TRI(1, 7, 8);
	  COL_TRI(8, 7, 9);
	  COL_TRI(14, 23, 20);
	  COL_TRI(10, 11, 9);
	  COL_TRI(12, 20, 21);
	  COL_TRI(12, 21, 22);
	  COL_TRI(13, 21, 20);
	  COL_TRI(13, 20, 23);
	  COL_TRI(14, 20, 12);
	  COL_TRI(15, 16, 24);
	  COL_TRI(15, 25, 16);
	  COL_TRI(16, 25, 26);
	  COL_TRI(16, 26, 27);
	  COL_TRI(17, 26, 25);
	  COL_TRI(17, 25, 15);
	  COL_TRI(10, 7, 6);
	  COL_TRI(10, 6, 28);
	  COL_TRI(19, 29, 6);
	  COL_TRI(6, 29, 18);
	  COL_TRI(6, 18, 28);
	  COL_TRI(18, 29, 9);
	  COL_TRI(18, 9, 11);
	  COL_TRI(2, 19, 5);
	  COL_TRI(2, 8, 19);
	  COL_TRI(9, 29, 19);
	  COL_TRI(9, 19, 8);
	  COL_TRI(19, 6, 3);
	  COL_TRI(18, 10, 28);
	  COL_TRI(18, 11, 10);
	  COL_TRI_STOP();
	  COL_END();
	}

	function ttm_seg7_collision_ukiki_cage() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(-76, 102, -76);
	  COL_VERTEX(77, -76, -76);
	  COL_VERTEX(-76, -76, -76);
	  COL_VERTEX(-76, -76, 77);
	  COL_VERTEX(77, -76, 77);
	  COL_VERTEX(77, 102, -76);
	  COL_VERTEX(77, 102, 77);
	  COL_VERTEX(-76, 102, 77);
	  COL_TRI_INIT(SURFACE_DEFAULT, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(2, 4, 3);
	  COL_TRI(2, 1, 4);
	  COL_TRI(0, 5, 1);
	  COL_TRI(6, 4, 1);
	  COL_TRI(6, 1, 5);
	  COL_TRI(3, 4, 6);
	  COL_TRI(0, 3, 7);
	  COL_TRI(3, 6, 7);
	  COL_TRI(0, 7, 6);
	  COL_TRI(0, 6, 5);
	  COL_TRI_STOP();
	  COL_END();
	}

	var ttm = [
	  ttm_seg7_area_1_collision,
	  ttm_seg7_area_2_collision,
	  ttm_seg7_area_3_collision,
	  ttm_seg7_area_4_collision,
	  ttm_seg7_collision_pitoune_2,
	  ttm_seg7_collision_podium_warp,
	  ttm_seg7_collision_ukiki_cage,
	];

	function vcutm_seg7_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x13D);
	  COL_VERTEX(-1637, -6553, -2917);
	  COL_VERTEX(-2457, -6553, -1177);
	  COL_VERTEX(-1637, -6553, -1177);
	  COL_VERTEX(-1637, -6553, 1638);
	  COL_VERTEX(3738, -6553, -6553);
	  COL_VERTEX(-2457, -6553, -2917);
	  COL_VERTEX(-1637, -6553, -6553);
	  COL_VERTEX(3738, -6553, -5938);
	  COL_VERTEX(4915, -6553, -5938);
	  COL_VERTEX(4915, -6553, 6554);
	  COL_VERTEX(-6553, -6553, 1638);
	  COL_VERTEX(-6553, -6553, 6554);
	  COL_VERTEX(4488, 0, -6540);
	  COL_VERTEX(4506, 26, -6522);
	  COL_VERTEX(4524, 0, -6540);
	  COL_VERTEX(4487, 0, -5951);
	  COL_VERTEX(4524, 0, -5951);
	  COL_VERTEX(4506, 26, -5969);
	  COL_VERTEX(4800, 0, -6227);
	  COL_VERTEX(4800, 0, -6263);
	  COL_VERTEX(4782, 26, -6245);
	  COL_VERTEX(4211, 0, -6227);
	  COL_VERTEX(4229, 26, -6245);
	  COL_VERTEX(4211, 0, -6263);
	  COL_VERTEX(4488, 0, -5951);
	  COL_VERTEX(4487, 0, -6540);
	  COL_VERTEX(4096, 778, -4300);
	  COL_VERTEX(4137, 819, -4341);
	  COL_VERTEX(4137, 819, -5078);
	  COL_VERTEX(4915, 778, -4300);
	  COL_VERTEX(4915, 819, -4341);
	  COL_VERTEX(4096, 778, -5119);
	  COL_VERTEX(4915, 819, -5078);
	  COL_VERTEX(4915, 778, -5119);
	  COL_VERTEX(4096, 0, -4300);
	  COL_VERTEX(4096, 0, -5119);
	  COL_VERTEX(4915, 0, -5119);
	  COL_VERTEX(4915, 0, -4300);
	  COL_VERTEX(4137, 0, -4341);
	  COL_VERTEX(4137, 0, -5078);
	  COL_VERTEX(4915, 0, -4341);
	  COL_VERTEX(4915, 0, -5078);
	  COL_VERTEX(-1653, -3276, -2098);
	  COL_VERTEX(-1653, -3532, -1996);
	  COL_VERTEX(-1653, -3532, -2098);
	  COL_VERTEX(-2472, -3532, -2098);
	  COL_VERTEX(-2472, -3429, -2098);
	  COL_VERTEX(-1730, -3429, -2098);
	  COL_VERTEX(-1730, -3276, -2098);
	  COL_VERTEX(-2472, -3429, -1996);
	  COL_VERTEX(-1730, -3429, -1996);
	  COL_VERTEX(-2472, -3532, -1996);
	  COL_VERTEX(-1730, -3276, -1996);
	  COL_VERTEX(-1653, -3276, -1996);
	  COL_VERTEX(205, -2073, -5861);
	  COL_VERTEX(102, -2073, -5861);
	  COL_VERTEX(205, -1817, -5861);
	  COL_VERTEX(205, -1970, -5938);
	  COL_VERTEX(102, -1970, -5938);
	  COL_VERTEX(102, -1817, -5938);
	  COL_VERTEX(-1151, -2610, -5952);
	  COL_VERTEX(-1100, -2585, -5952);
	  COL_VERTEX(-1151, -2559, -5901);
	  COL_VERTEX(-1100, -1631, -5952);
	  COL_VERTEX(-1151, -1657, -5901);
	  COL_VERTEX(-1202, -1631, -5952);
	  COL_VERTEX(-1202, -2585, -5952);
	  COL_VERTEX(1459, -1791, -5952);
	  COL_VERTEX(1510, -1765, -5952);
	  COL_VERTEX(1459, -1740, -5901);
	  COL_VERTEX(1510, -812, -5952);
	  COL_VERTEX(1459, -838, -5901);
	  COL_VERTEX(1408, -812, -5952);
	  COL_VERTEX(1408, -1765, -5952);
	  COL_VERTEX(2406, -2073, -5952);
	  COL_VERTEX(2355, -2047, -5901);
	  COL_VERTEX(2355, -2098, -5952);
	  COL_VERTEX(2355, -1145, -5901);
	  COL_VERTEX(2406, -1119, -5952);
	  COL_VERTEX(2304, -1119, -5952);
	  COL_VERTEX(2304, -2073, -5952);
	  COL_VERTEX(3302, -1253, -5952);
	  COL_VERTEX(3251, -1228, -5901);
	  COL_VERTEX(3251, -1279, -5952);
	  COL_VERTEX(3302, -300, -5952);
	  COL_VERTEX(3251, -326, -5901);
	  COL_VERTEX(3200, -300, -5952);
	  COL_VERTEX(3200, -1253, -5952);
	  COL_VERTEX(-1637, -2561, -5952);
	  COL_VERTEX(-1202, -2535, -5952);
	  COL_VERTEX(3302, -1247, -5952);
	  COL_VERTEX(3738, -1247, -5952);
	  COL_VERTEX(3738, -1222, -5952);
	  COL_VERTEX(3738, -428, -5952);
	  COL_VERTEX(3302, -428, -5952);
	  COL_VERTEX(3738, -402, -5952);
	  COL_VERTEX(-1202, -2458, -5952);
	  COL_VERTEX(-1637, -2484, -5952);
	  COL_VERTEX(1510, -1170, -5952);
	  COL_VERTEX(2304, -1145, -5952);
	  COL_VERTEX(1510, -1247, -5952);
	  COL_VERTEX(2304, -1222, -5952);
	  COL_VERTEX(3200, -1222, -5952);
	  COL_VERTEX(2406, -1247, -5952);
	  COL_VERTEX(3200, -1145, -5952);
	  COL_VERTEX(2406, -1170, -5952);
	  COL_VERTEX(-1637, -4505, -4914);
	  COL_VERTEX(-1637, -4505, -2917);
	  COL_VERTEX(-2457, -4505, -2917);
	  COL_VERTEX(-2457, -4505, -1177);
	  COL_VERTEX(-1637, -4505, -1177);
	  COL_VERTEX(-1637, -3276, 1638);
	  COL_VERTEX(-6553, -4505, 6554);
	  COL_VERTEX(-6553, -4505, 1638);
	  COL_VERTEX(-6553, -3276, 1638);
	  COL_VERTEX(0, -6553, 6554);
	  COL_VERTEX(4915, -4505, 6554);
	  COL_VERTEX(4915, 0, 6554);
	  COL_VERTEX(0, -6553, -6553);
	  COL_VERTEX(3738, -4505, -6553);
	  COL_VERTEX(0, -4505, -6553);
	  COL_VERTEX(4915, -4505, -5938);
	  COL_VERTEX(4915, -4505, 0);
	  COL_VERTEX(4915, -6553, 0);
	  COL_VERTEX(4915, 6554, -6553);
	  COL_VERTEX(3738, 0, -6553);
	  COL_VERTEX(4915, 0, -6553);
	  COL_VERTEX(4915, 0, -5938);
	  COL_VERTEX(3738, 0, -5938);
	  COL_VERTEX(0, 0, -6553);
	  COL_VERTEX(0, -3276, -6553);
	  COL_VERTEX(-2457, 5734, -6553);
	  COL_VERTEX(-1637, -2457, -6553);
	  COL_VERTEX(0, 6554, -6553);
	  COL_VERTEX(-6245, 6554, -6245);
	  COL_VERTEX(4915, 6554, 0);
	  COL_VERTEX(-2457, -2866, -4914);
	  COL_VERTEX(-1637, -2866, -4914);
	  COL_VERTEX(-2457, -2457, -6553);
	  COL_VERTEX(-2457, -2457, -2917);
	  COL_VERTEX(-2457, 0, -6553);
	  COL_VERTEX(-1637, -2457, -4914);
	  COL_VERTEX(4096, 0, -5938);
	  COL_VERTEX(3738, -3276, -5938);
	  COL_VERTEX(-2457, -3276, -1177);
	  COL_VERTEX(-2457, -2457, 819);
	  COL_VERTEX(-2457, 0, -967);
	  COL_VERTEX(-2457, 6554, -5733);
	  COL_VERTEX(-2866, -2457, 819);
	  COL_VERTEX(-2866, -3276, 819);
	  COL_VERTEX(-6553, -3276, 819);
	  COL_VERTEX(-6553, 0, 0);
	  COL_VERTEX(-6553, -2149, 0);
	  COL_VERTEX(-6553, 5734, -5733);
	  COL_VERTEX(-6553, 5734, -6553);
	  COL_VERTEX(-6553, 0, -1563);
	  COL_VERTEX(-5426, 4575, -4890);
	  COL_VERTEX(-6450, 4575, -4890);
	  COL_VERTEX(-2866, 5734, -6553);
	  COL_VERTEX(-5177, 1440, -2610);
	  COL_VERTEX(-4402, 1117, -2375);
	  COL_VERTEX(-6450, -393, -1276);
	  COL_VERTEX(-5426, -393, -1276);
	  COL_VERTEX(-5631, -870, -929);
	  COL_VERTEX(-6245, -870, -929);
	  COL_VERTEX(4915, 6554, 6554);
	  COL_VERTEX(-6553, 0, 6554);
	  COL_VERTEX(-6553, 6554, 6554);
	  COL_VERTEX(0, 6554, 6554);
	  COL_VERTEX(3738, -3276, -6553);
	  COL_VERTEX(4403, 0, -4607);
	  COL_VERTEX(4198, 0, -4607);
	  COL_VERTEX(4096, -101, -4300);
	  COL_VERTEX(4403, 0, -4402);
	  COL_VERTEX(4915, -101, -4300);
	  COL_VERTEX(4403, -101, -4607);
	  COL_VERTEX(4198, 0, -4402);
	  COL_VERTEX(4198, -101, -4402);
	  COL_VERTEX(-3013, -712, -1044);
	  COL_VERTEX(-2969, -559, -1156);
	  COL_VERTEX(-3173, -712, -644);
	  COL_VERTEX(-3788, -712, -644);
	  COL_VERTEX(-4402, -704, -1050);
	  COL_VERTEX(-3788, -1036, -809);
	  COL_VERTEX(-3993, -559, -1156);
	  COL_VERTEX(-3788, -559, -644);
	  COL_VERTEX(-4197, -227, -1397);
	  COL_VERTEX(-4242, -381, -1285);
	  COL_VERTEX(-2866, 0, -1563);
	  COL_VERTEX(-5017, -381, -885);
	  COL_VERTEX(-4402, -381, -885);
	  COL_VERTEX(-5177, -381, -1285);
	  COL_VERTEX(-5017, -704, -1050);
	  COL_VERTEX(-5221, -227, -1397);
	  COL_VERTEX(-5017, -227, -885);
	  COL_VERTEX(-5631, -393, -764);
	  COL_VERTEX(-5471, -546, -1165);
	  COL_VERTEX(-5631, -546, -764);
	  COL_VERTEX(-6245, -546, -764);
	  COL_VERTEX(-6245, -393, -764);
	  COL_VERTEX(-4242, 1440, -2610);
	  COL_VERTEX(-4197, 1594, -2722);
	  COL_VERTEX(-5017, 1440, -2210);
	  COL_VERTEX(-4402, 1440, -2210);
	  COL_VERTEX(-5017, 1594, -2210);
	  COL_VERTEX(-5221, 1594, -2722);
	  COL_VERTEX(-3788, 2110, -3098);
	  COL_VERTEX(-3173, 2110, -3098);
	  COL_VERTEX(-5017, 3104, -3820);
	  COL_VERTEX(-3013, 2434, -3333);
	  COL_VERTEX(-3173, 2587, -2933);
	  COL_VERTEX(-2969, 2587, -3445);
	  COL_VERTEX(-3788, 2434, -2933);
	  COL_VERTEX(-3173, 2434, -2933);
	  COL_VERTEX(-3993, 2587, -3445);
	  COL_VERTEX(-3788, 2587, -2933);
	  COL_VERTEX(-2866, 5734, -5733);
	  COL_VERTEX(-4197, 3581, -4167);
	  COL_VERTEX(-4242, 3428, -4056);
	  COL_VERTEX(-5017, 3428, -3655);
	  COL_VERTEX(-4402, 3428, -3655);
	  COL_VERTEX(-5017, 3581, -3655);
	  COL_VERTEX(-5177, 3428, -4056);
	  COL_VERTEX(-5221, 3581, -4167);
	  COL_VERTEX(-5631, 4575, -4378);
	  COL_VERTEX(-5471, 4421, -4778);
	  COL_VERTEX(-5631, 4421, -4378);
	  COL_VERTEX(-6245, 4421, -4378);
	  COL_VERTEX(-6245, 4575, -4378);
	  COL_VERTEX(-3948, -712, -1044);
	  COL_VERTEX(-3173, -1036, -809);
	  COL_VERTEX(-6406, -546, -1165);
	  COL_VERTEX(-3948, 2434, -3333);
	  COL_VERTEX(-6406, 4421, -4778);
	  COL_VERTEX(-6553, 6554, 0);
	  COL_VERTEX(-6245, 7045, -6041);
	  COL_VERTEX(-6041, 7045, -6245);
	  COL_VERTEX(-6041, 6554, -6041);
	  COL_VERTEX(205, -2073, -6681);
	  COL_VERTEX(205, -1970, -6681);
	  COL_VERTEX(205, -1817, -5938);
	  COL_VERTEX(102, -1970, -6681);
	  COL_VERTEX(102, -2073, -6681);
	  COL_VERTEX(102, -1817, -5861);
	  COL_VERTEX(-1151, -1606, -5952);
	  COL_VERTEX(1459, -786, -5952);
	  COL_VERTEX(2355, -1094, -5952);
	  COL_VERTEX(3251, -274, -5952);
	  COL_VERTEX(-1202, -2561, -5952);
	  COL_VERTEX(-1187, -2548, -5937);
	  COL_VERTEX(-1637, -2548, -5937);
	  COL_VERTEX(-1637, -2535, -5952);
	  COL_VERTEX(3738, -1234, -5937);
	  COL_VERTEX(3287, -1234, -5937);
	  COL_VERTEX(3302, -1222, -5952);
	  COL_VERTEX(3302, -402, -5952);
	  COL_VERTEX(3738, -415, -5937);
	  COL_VERTEX(3287, -415, -5937);
	  COL_VERTEX(-1202, -2484, -5952);
	  COL_VERTEX(-1637, -2458, -5952);
	  COL_VERTEX(-1187, -2471, -5937);
	  COL_VERTEX(-1637, -2471, -5937);
	  COL_VERTEX(2304, -1170, -5952);
	  COL_VERTEX(2319, -1158, -5937);
	  COL_VERTEX(1495, -1158, -5937);
	  COL_VERTEX(1510, -1145, -5952);
	  COL_VERTEX(2304, -1247, -5952);
	  COL_VERTEX(2319, -1234, -5937);
	  COL_VERTEX(1495, -1234, -5937);
	  COL_VERTEX(1510, -1222, -5952);
	  COL_VERTEX(2406, -1222, -5952);
	  COL_VERTEX(3200, -1247, -5952);
	  COL_VERTEX(3215, -1234, -5937);
	  COL_VERTEX(2391, -1234, -5937);
	  COL_VERTEX(3200, -1170, -5952);
	  COL_VERTEX(2406, -1145, -5952);
	  COL_VERTEX(3215, -1158, -5937);
	  COL_VERTEX(2391, -1158, -5937);
	  COL_VERTEX(-1637, -2866, -2917);
	  COL_VERTEX(-1637, -6553, -4914);
	  COL_VERTEX(-1637, -4505, -6553);
	  COL_VERTEX(-2457, -2866, -2917);
	  COL_VERTEX(-2457, -2457, -4914);
	  COL_VERTEX(-1637, -3276, -1177);
	  COL_VERTEX(-1637, -4505, 1638);
	  COL_VERTEX(-2457, -3276, 819);
	  COL_VERTEX(0, -4505, 6554);
	  COL_VERTEX(0, 0, 6554);
	  COL_VERTEX(3738, -4505, -5938);
	  COL_VERTEX(4915, -3276, -5938);
	  COL_VERTEX(4915, 0, 0);
	  COL_VERTEX(4915, -101, -5938);
	  COL_VERTEX(4491, 0, -6553);
	  COL_VERTEX(3738, 6554, -6553);
	  COL_VERTEX(4485, 0, -5938);
	  COL_VERTEX(4403, -101, -4402);
	  COL_VERTEX(4198, -101, -4607);
	  COL_VERTEX(4096, -101, -5938);
	  COL_VERTEX(0, 6554, 0);
	  COL_VERTEX(-6041, 6554, -6245);
	  COL_VERTEX(-6553, 6554, -6553);
	  COL_VERTEX(-2457, 6554, -6553);
	  COL_VERTEX(-6245, 6554, -6041);
	  COL_VERTEX(3738, -101, -5938);
	  COL_VERTEX(-2866, 6554, -5733);
	  COL_VERTEX(-2866, 0, -967);
	  COL_VERTEX(-2866, 6554, -6553);
	  COL_VERTEX(-6245, 4098, -4543);
	  COL_VERTEX(-5017, 1117, -2375);
	  COL_VERTEX(-5631, 4098, -4543);
	  COL_VERTEX(-3173, -559, -644);
	  COL_VERTEX(-4402, -227, -885);
	  COL_VERTEX(-4402, 1594, -2210);
	  COL_VERTEX(-4402, 3104, -3820);
	  COL_VERTEX(-4402, 3581, -3655);
	  COL_VERTEX(-6245, 7045, -6245);
	  COL_VERTEX(-6041, 7045, -6041);
	  COL_TRI_INIT(SURFACE_DEFAULT, 479);
	  COL_TRI(52, 42, 48);
	  COL_TRI(42, 43, 44);
	  COL_TRI(44, 45, 46);
	  COL_TRI(44, 46, 47);
	  COL_TRI(43, 45, 44);
	  COL_TRI(44, 47, 48);
	  COL_TRI(44, 48, 42);
	  COL_TRI(47, 46, 49);
	  COL_TRI(47, 49, 50);
	  COL_TRI(43, 51, 45);
	  COL_TRI(50, 49, 51);
	  COL_TRI(50, 51, 43);
	  COL_TRI(47, 52, 48);
	  COL_TRI(56, 55, 54);
	  COL_TRI(42, 53, 43);
	  COL_TRI(52, 53, 42);
	  COL_TRI(47, 50, 52);
	  COL_TRI(50, 43, 53);
	  COL_TRI(50, 53, 52);
	  COL_TRI(54, 238, 239);
	  COL_TRI(54, 239, 57);
	  COL_TRI(54, 57, 240);
	  COL_TRI(54, 240, 56);
	  COL_TRI(55, 238, 54);
	  COL_TRI(59, 243, 56);
	  COL_TRI(57, 239, 241);
	  COL_TRI(57, 241, 58);
	  COL_TRI(55, 242, 238);
	  COL_TRI(58, 241, 242);
	  COL_TRI(58, 242, 55);
	  COL_TRI(57, 59, 240);
	  COL_TRI(59, 56, 240);
	  COL_TRI(56, 243, 55);
	  COL_TRI(66, 62, 64);
	  COL_TRI(57, 58, 59);
	  COL_TRI(58, 243, 59);
	  COL_TRI(58, 55, 243);
	  COL_TRI(60, 63, 61);
	  COL_TRI(61, 62, 60);
	  COL_TRI(62, 66, 60);
	  COL_TRI(60, 66, 65);
	  COL_TRI(60, 65, 244);
	  COL_TRI(60, 244, 63);
	  COL_TRI(63, 64, 62);
	  COL_TRI(63, 62, 61);
	  COL_TRI(64, 63, 244);
	  COL_TRI(65, 64, 244);
	  COL_TRI(66, 64, 65);
	  COL_TRI(78, 75, 74);
	  COL_TRI(67, 72, 245);
	  COL_TRI(67, 245, 70);
	  COL_TRI(67, 70, 68);
	  COL_TRI(67, 73, 72);
	  COL_TRI(68, 69, 67);
	  COL_TRI(69, 73, 67);
	  COL_TRI(70, 71, 69);
	  COL_TRI(70, 69, 68);
	  COL_TRI(71, 70, 245);
	  COL_TRI(72, 71, 245);
	  COL_TRI(73, 71, 72);
	  COL_TRI(73, 69, 71);
	  COL_TRI(74, 75, 76);
	  COL_TRI(75, 80, 76);
	  COL_TRI(76, 80, 79);
	  COL_TRI(76, 79, 246);
	  COL_TRI(76, 246, 78);
	  COL_TRI(76, 78, 74);
	  COL_TRI(77, 78, 246);
	  COL_TRI(78, 77, 75);
	  COL_TRI(79, 77, 246);
	  COL_TRI(80, 77, 79);
	  COL_TRI(80, 75, 77);
	  COL_TRI(81, 82, 83);
	  COL_TRI(82, 87, 83);
	  COL_TRI(83, 87, 86);
	  COL_TRI(83, 86, 247);
	  COL_TRI(83, 247, 84);
	  COL_TRI(83, 84, 81);
	  COL_TRI(84, 82, 81);
	  COL_TRI(85, 84, 247);
	  COL_TRI(84, 85, 82);
	  COL_TRI(86, 85, 247);
	  COL_TRI(87, 85, 86);
	  COL_TRI(87, 82, 85);
	  COL_TRI(88, 248, 249);
	  COL_TRI(88, 249, 250);
	  COL_TRI(89, 88, 251);
	  COL_TRI(89, 248, 88);
	  COL_TRI(89, 250, 249);
	  COL_TRI(89, 251, 250);
	  COL_TRI(90, 91, 252);
	  COL_TRI(90, 252, 253);
	  COL_TRI(92, 253, 252);
	  COL_TRI(92, 254, 253);
	  COL_TRI(91, 254, 92);
	  COL_TRI(91, 90, 254);
	  COL_TRI(93, 94, 255);
	  COL_TRI(94, 93, 256);
	  COL_TRI(94, 256, 257);
	  COL_TRI(95, 257, 256);
	  COL_TRI(95, 255, 257);
	  COL_TRI(93, 255, 95);
	  COL_TRI(96, 258, 97);
	  COL_TRI(96, 97, 259);
	  COL_TRI(97, 258, 260);
	  COL_TRI(96, 261, 260);
	  COL_TRI(97, 260, 261);
	  COL_TRI(96, 259, 261);
	  COL_TRI(98, 262, 263);
	  COL_TRI(98, 263, 264);
	  COL_TRI(99, 262, 98);
	  COL_TRI(99, 98, 265);
	  COL_TRI(99, 264, 263);
	  COL_TRI(99, 265, 264);
	  COL_TRI(100, 266, 267);
	  COL_TRI(100, 267, 268);
	  COL_TRI(101, 100, 269);
	  COL_TRI(101, 268, 267);
	  COL_TRI(101, 269, 268);
	  COL_TRI(101, 266, 100);
	  COL_TRI(102, 103, 270);
	  COL_TRI(103, 271, 272);
	  COL_TRI(103, 272, 273);
	  COL_TRI(102, 271, 103);
	  COL_TRI(102, 273, 272);
	  COL_TRI(102, 270, 273);
	  COL_TRI(104, 274, 105);
	  COL_TRI(106, 6, 280);
	  COL_TRI(104, 105, 275);
	  COL_TRI(105, 274, 276);
	  COL_TRI(104, 277, 276);
	  COL_TRI(105, 276, 277);
	  COL_TRI(104, 275, 277);
	  COL_TRI(106, 137, 278);
	  COL_TRI(106, 278, 107);
	  COL_TRI(0, 279, 106);
	  COL_TRI(0, 106, 107);
	  COL_TRI(106, 279, 6);
	  COL_TRI(6, 120, 280);
	  COL_TRI(6, 118, 120);
	  COL_TRI(0, 107, 108);
	  COL_TRI(0, 108, 5);
	  COL_TRI(107, 278, 281);
	  COL_TRI(107, 281, 108);
	  COL_TRI(1, 5, 108);
	  COL_TRI(1, 108, 109);
	  COL_TRI(1, 110, 2);
	  COL_TRI(1, 109, 110);
	  COL_TRI(108, 139, 144);
	  COL_TRI(108, 144, 109);
	  COL_TRI(109, 144, 283);
	  COL_TRI(109, 283, 110);
	  COL_TRI(110, 283, 111);
	  COL_TRI(110, 111, 284);
	  COL_TRI(3, 110, 284);
	  COL_TRI(3, 2, 110);
	  COL_TRI(11, 10, 113);
	  COL_TRI(11, 113, 112);
	  COL_TRI(111, 113, 284);
	  COL_TRI(113, 10, 3);
	  COL_TRI(113, 3, 284);
	  COL_TRI(144, 111, 283);
	  COL_TRI(112, 287, 286);
	  COL_TRI(111, 114, 113);
	  COL_TRI(112, 113, 114);
	  COL_TRI(114, 166, 112);
	  COL_TRI(115, 112, 286);
	  COL_TRI(116, 9, 115);
	  COL_TRI(116, 115, 286);
	  COL_TRI(115, 11, 112);
	  COL_TRI(112, 166, 287);
	  COL_TRI(119, 130, 120);
	  COL_TRI(117, 116, 286);
	  COL_TRI(117, 286, 287);
	  COL_TRI(118, 4, 119);
	  COL_TRI(118, 119, 120);
	  COL_TRI(119, 4, 7);
	  COL_TRI(119, 7, 288);
	  COL_TRI(120, 130, 132);
	  COL_TRI(120, 132, 280);
	  COL_TRI(7, 8, 121);
	  COL_TRI(7, 121, 288);
	  COL_TRI(121, 289, 143);
	  COL_TRI(121, 143, 288);
	  COL_TRI(8, 123, 122);
	  COL_TRI(8, 122, 121);
	  COL_TRI(116, 290, 122);
	  COL_TRI(122, 290, 127);
	  COL_TRI(122, 127, 121);
	  COL_TRI(123, 116, 122);
	  COL_TRI(123, 9, 116);
	  COL_TRI(116, 117, 290);
	  COL_TRI(124, 126, 290);
	  COL_TRI(125, 126, 124);
	  COL_TRI(126, 14, 19);
	  COL_TRI(14, 126, 292);
	  COL_TRI(126, 18, 127);
	  COL_TRI(126, 19, 18);
	  COL_TRI(15, 128, 294);
	  COL_TRI(127, 18, 16);
	  COL_TRI(15, 21, 128);
	  COL_TRI(21, 23, 128);
	  COL_TRI(23, 12, 125);
	  COL_TRI(125, 143, 128);
	  COL_TRI(128, 23, 125);
	  COL_TRI(127, 16, 294);
	  COL_TRI(125, 169, 143);
	  COL_TRI(125, 12, 292);
	  COL_TRI(127, 142, 171);
	  COL_TRI(127, 171, 170);
	  COL_TRI(127, 170, 173);
	  COL_TRI(127, 173, 37);
	  COL_TRI(130, 125, 129);
	  COL_TRI(12, 14, 292);
	  COL_TRI(16, 15, 294);
	  COL_TRI(20, 13, 22);
	  COL_TRI(20, 22, 17);
	  COL_TRI(129, 125, 293);
	  COL_TRI(129, 293, 133);
	  COL_TRI(131, 133, 301);
	  COL_TRI(125, 124, 293);
	  COL_TRI(133, 298, 237);
	  COL_TRI(133, 237, 299);
	  COL_TRI(133, 299, 134);
	  COL_TRI(134, 300, 133);
	  COL_TRI(135, 298, 133);
	  COL_TRI(135, 133, 124);
	  COL_TRI(131, 129, 133);
	  COL_TRI(140, 146, 139);
	  COL_TRI(130, 169, 125);
	  COL_TRI(124, 290, 135);
	  COL_TRI(136, 281, 278);
	  COL_TRI(136, 278, 137);
	  COL_TRI(136, 139, 281);
	  COL_TRI(136, 282, 139);
	  COL_TRI(137, 282, 136);
	  COL_TRI(138, 140, 139);
	  COL_TRI(132, 138, 282);
	  COL_TRI(132, 282, 141);
	  COL_TRI(137, 141, 282);
	  COL_TRI(141, 106, 280);
	  COL_TRI(141, 280, 132);
	  COL_TRI(142, 128, 303);
	  COL_TRI(142, 303, 297);
	  COL_TRI(143, 291, 303);
	  COL_TRI(131, 140, 129);
	  COL_TRI(130, 129, 132);
	  COL_TRI(132, 129, 140);
	  COL_TRI(132, 140, 138);
	  COL_TRI(144, 285, 111);
	  COL_TRI(145, 285, 144);
	  COL_TRI(144, 146, 145);
	  COL_TRI(140, 301, 147);
	  COL_TRI(140, 147, 146);
	  COL_TRI(139, 146, 144);
	  COL_TRI(146, 147, 305);
	  COL_TRI(147, 304, 305);
	  COL_TRI(148, 145, 146);
	  COL_TRI(149, 285, 145);
	  COL_TRI(149, 145, 148);
	  COL_TRI(150, 111, 285);
	  COL_TRI(148, 146, 305);
	  COL_TRI(153, 154, 300);
	  COL_TRI(151, 167, 166);
	  COL_TRI(151, 234, 167);
	  COL_TRI(152, 155, 151);
	  COL_TRI(151, 155, 153);
	  COL_TRI(153, 234, 151);
	  COL_TRI(114, 151, 166);
	  COL_TRI(114, 152, 151);
	  COL_TRI(153, 300, 234);
	  COL_TRI(154, 153, 216);
	  COL_TRI(155, 157, 153);
	  COL_TRI(156, 216, 153);
	  COL_TRI(157, 156, 153);
	  COL_TRI(154, 306, 300);
	  COL_TRI(134, 234, 300);
	  COL_TRI(158, 154, 216);
	  COL_TRI(154, 158, 306);
	  COL_TRI(155, 205, 307);
	  COL_TRI(159, 205, 155);
	  COL_TRI(155, 233, 157);
	  COL_TRI(155, 307, 233);
	  COL_TRI(155, 188, 160);
	  COL_TRI(216, 306, 158);
	  COL_TRI(114, 150, 152);
	  COL_TRI(150, 114, 111);
	  COL_TRI(163, 150, 149);
	  COL_TRI(150, 161, 155);
	  COL_TRI(150, 231, 161);
	  COL_TRI(150, 164, 231);
	  COL_TRI(164, 150, 163);
	  COL_TRI(165, 117, 287);
	  COL_TRI(165, 287, 168);
	  COL_TRI(166, 168, 287);
	  COL_TRI(143, 289, 291);
	  COL_TRI(166, 167, 168);
	  COL_TRI(167, 298, 168);
	  COL_TRI(168, 298, 135);
	  COL_TRI(168, 135, 165);
	  COL_TRI(167, 234, 298);
	  COL_TRI(119, 169, 130);
	  COL_TRI(171, 175, 170);
	  COL_TRI(169, 288, 143);
	  COL_TRI(169, 119, 288);
	  COL_TRI(117, 135, 290);
	  COL_TRI(117, 165, 135);
	  COL_TRI(170, 295, 173);
	  COL_TRI(170, 175, 295);
	  COL_TRI(34, 174, 37);
	  COL_TRI(172, 295, 174);
	  COL_TRI(173, 295, 177);
	  COL_TRI(172, 177, 295);
	  COL_TRI(174, 295, 175);
	  COL_TRI(173, 177, 176);
	  COL_TRI(37, 173, 176);
	  COL_TRI(171, 296, 175);
	  COL_TRI(174, 175, 291);
	  COL_TRI(175, 296, 297);
	  COL_TRI(175, 297, 291);
	  COL_TRI(176, 296, 171);
	  COL_TRI(171, 142, 34);
	  COL_TRI(171, 34, 176);
	  COL_TRI(176, 177, 296);
	  COL_TRI(177, 297, 296);
	  COL_TRI(37, 176, 34);
	  COL_TRI(177, 172, 297);
	  COL_TRI(34, 172, 174);
	  COL_TRI(142, 297, 172);
	  COL_TRI(142, 172, 34);
	  COL_TRI(149, 183, 182);
	  COL_TRI(178, 180, 181);
	  COL_TRI(179, 180, 178);
	  COL_TRI(178, 181, 229);
	  COL_TRI(178, 230, 149);
	  COL_TRI(179, 178, 149);
	  COL_TRI(180, 185, 181);
	  COL_TRI(181, 185, 184);
	  COL_TRI(181, 184, 229);
	  COL_TRI(182, 229, 184);
	  COL_TRI(183, 229, 182);
	  COL_TRI(179, 310, 180);
	  COL_TRI(180, 310, 185);
	  COL_TRI(184, 185, 179);
	  COL_TRI(185, 310, 179);
	  COL_TRI(186, 187, 179);
	  COL_TRI(187, 184, 179);
	  COL_TRI(179, 188, 186);
	  COL_TRI(188, 179, 149);
	  COL_TRI(187, 182, 184);
	  COL_TRI(230, 183, 149);
	  COL_TRI(186, 190, 187);
	  COL_TRI(187, 190, 189);
	  COL_TRI(187, 189, 191);
	  COL_TRI(189, 194, 193);
	  COL_TRI(190, 194, 189);
	  COL_TRI(189, 193, 191);
	  COL_TRI(191, 193, 162);
	  COL_TRI(192, 191, 162);
	  COL_TRI(186, 311, 190);
	  COL_TRI(190, 311, 194);
	  COL_TRI(193, 194, 186);
	  COL_TRI(194, 311, 186);
	  COL_TRI(193, 186, 188);
	  COL_TRI(162, 193, 155);
	  COL_TRI(155, 193, 188);
	  COL_TRI(195, 197, 196);
	  COL_TRI(162, 195, 196);
	  COL_TRI(192, 162, 196);
	  COL_TRI(201, 200, 188);
	  COL_TRI(161, 162, 155);
	  COL_TRI(196, 197, 198);
	  COL_TRI(197, 199, 198);
	  COL_TRI(198, 199, 161);
	  COL_TRI(198, 161, 231);
	  COL_TRI(196, 198, 231);
	  COL_TRI(197, 195, 199);
	  COL_TRI(161, 199, 162);
	  COL_TRI(199, 195, 162);
	  COL_TRI(200, 202, 159);
	  COL_TRI(200, 203, 202);
	  COL_TRI(201, 203, 200);
	  COL_TRI(155, 308, 159);
	  COL_TRI(202, 204, 159);
	  COL_TRI(203, 204, 202);
	  COL_TRI(204, 205, 159);
	  COL_TRI(203, 312, 204);
	  COL_TRI(201, 312, 203);
	  COL_TRI(205, 204, 201);
	  COL_TRI(204, 312, 201);
	  COL_TRI(201, 208, 205);
	  COL_TRI(201, 313, 208);
	  COL_TRI(201, 214, 313);
	  COL_TRI(201, 232, 214);
	  COL_TRI(206, 232, 201);
	  COL_TRI(207, 206, 201);
	  COL_TRI(209, 207, 188);
	  COL_TRI(205, 309, 307);
	  COL_TRI(205, 222, 309);
	  COL_TRI(208, 222, 205);
	  COL_TRI(209, 212, 232);
	  COL_TRI(210, 213, 209);
	  COL_TRI(211, 210, 209);
	  COL_TRI(209, 213, 212);
	  COL_TRI(188, 211, 209);
	  COL_TRI(212, 214, 232);
	  COL_TRI(212, 215, 214);
	  COL_TRI(213, 215, 212);
	  COL_TRI(213, 210, 215);
	  COL_TRI(214, 215, 211);
	  COL_TRI(215, 210, 211);
	  COL_TRI(216, 211, 188);
	  COL_TRI(214, 211, 216);
	  COL_TRI(214, 218, 313);
	  COL_TRI(216, 218, 214);
	  COL_TRI(217, 220, 218);
	  COL_TRI(218, 220, 219);
	  COL_TRI(218, 219, 222);
	  COL_TRI(216, 217, 218);
	  COL_TRI(219, 221, 222);
	  COL_TRI(220, 221, 219);
	  COL_TRI(221, 223, 222);
	  COL_TRI(222, 223, 309);
	  COL_TRI(220, 314, 221);
	  COL_TRI(217, 314, 220);
	  COL_TRI(223, 221, 217);
	  COL_TRI(221, 314, 217);
	  COL_TRI(217, 309, 223);
	  COL_TRI(217, 225, 309);
	  COL_TRI(217, 156, 225);
	  COL_TRI(156, 217, 216);
	  COL_TRI(224, 226, 225);
	  COL_TRI(156, 224, 225);
	  COL_TRI(225, 226, 227);
	  COL_TRI(225, 227, 233);
	  COL_TRI(226, 228, 227);
	  COL_TRI(227, 228, 157);
	  COL_TRI(227, 157, 233);
	  COL_TRI(226, 224, 228);
	  COL_TRI(157, 228, 156);
	  COL_TRI(228, 224, 156);
	  COL_TRI(229, 183, 230);
	  COL_TRI(229, 230, 178);
	  COL_TRI(191, 182, 187);
	  COL_TRI(191, 192, 182);
	  COL_TRI(188, 200, 160);
	  COL_TRI(160, 308, 155);
	  COL_TRI(149, 182, 192);
	  COL_TRI(163, 192, 196);
	  COL_TRI(163, 149, 192);
	  COL_TRI(231, 164, 163);
	  COL_TRI(231, 163, 196);
	  COL_TRI(159, 308, 160);
	  COL_TRI(159, 160, 200);
	  COL_TRI(233, 309, 225);
	  COL_TRI(232, 206, 207);
	  COL_TRI(232, 207, 209);
	  COL_TRI(188, 207, 201);
	  COL_TRI(222, 208, 313);
	  COL_TRI(222, 313, 218);
	  COL_TRI(233, 307, 309);
	  COL_TRI(216, 188, 305);
	  COL_TRI(188, 148, 305);
	  COL_TRI(188, 149, 148);
	  COL_TRI(216, 305, 304);
	  COL_TRI(216, 304, 306);
	  COL_TRI(234, 302, 237);
	  COL_TRI(234, 237, 298);
	  COL_TRI(134, 302, 234);
	  COL_TRI(235, 134, 315);
	  COL_TRI(235, 302, 134);
	  COL_TRI(236, 299, 237);
	  COL_TRI(236, 237, 316);
	  COL_TRI(237, 302, 235);
	  COL_TRI(237, 235, 316);
	  COL_TRI(235, 315, 316);
	  COL_TRI(236, 316, 315);
	  COL_TRI(236, 315, 134);
	  COL_TRI(236, 134, 299);
	  COL_TRI_INIT(SURFACE_DEATH_PLANE, 9);
	  COL_TRI(3, 11, 9);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 4);
	  COL_TRI(0, 5, 1);
	  COL_TRI(4, 6, 0);
	  COL_TRI(3, 7, 4);
	  COL_TRI(3, 8, 7);
	  COL_TRI(3, 9, 8);
	  COL_TRI(3, 10, 11);
	  COL_TRI_INIT(SURFACE_VERY_SLIPPERY, 6);
	  COL_TRI(26, 27, 28);
	  COL_TRI(27, 29, 30);
	  COL_TRI(27, 26, 29);
	  COL_TRI(26, 28, 31);
	  COL_TRI(31, 28, 32);
	  COL_TRI(31, 32, 33);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 12);
	  COL_TRI(14, 13, 19);
	  COL_TRI(12, 13, 14);
	  COL_TRI(15, 16, 17);
	  COL_TRI(18, 19, 20);
	  COL_TRI(21, 22, 23);
	  COL_TRI(13, 20, 19);
	  COL_TRI(23, 22, 13);
	  COL_TRI(23, 13, 25);
	  COL_TRI(24, 22, 21);
	  COL_TRI(24, 17, 22);
	  COL_TRI(18, 20, 16);
	  COL_TRI(20, 17, 16);
	  COL_TRI_INIT(SURFACE_VANISH_CAP_WALLS, 12);
	  COL_TRI(38, 28, 27);
	  COL_TRI(29, 26, 34);
	  COL_TRI(26, 35, 34);
	  COL_TRI(26, 31, 35);
	  COL_TRI(36, 35, 31);
	  COL_TRI(29, 34, 37);
	  COL_TRI(36, 31, 33);
	  COL_TRI(38, 39, 28);
	  COL_TRI(40, 38, 27);
	  COL_TRI(32, 39, 41);
	  COL_TRI(32, 28, 39);
	  COL_TRI(40, 27, 30);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(1);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start, /*pos*/ -6143, 5734, -6143, /*yaw*/ 0); // unused, probably an early way to set initial position
	  COL_END();
	}

	function vcutm_seg7_collision_0700AC44() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(307, 0, 768);
	  COL_VERTEX(-306, 102, 819);
	  COL_VERTEX(-306, 0, 768);
	  COL_VERTEX(307, 102, 819);
	  COL_VERTEX(307, 0, -767);
	  COL_VERTEX(307, 102, -818);
	  COL_VERTEX(-306, 102, -818);
	  COL_VERTEX(-306, 0, -767);
	  COL_TRI_INIT(SURFACE_DEFAULT, 12);
	  COL_TRI(7, 6, 5);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(4, 3, 0);
	  COL_TRI(5, 6, 1);
	  COL_TRI(5, 1, 3);
	  COL_TRI(4, 5, 3);
	  COL_TRI(0, 2, 7);
	  COL_TRI(0, 7, 4);
	  COL_TRI(2, 6, 7);
	  COL_TRI(7, 5, 4);
	  COL_TRI(2, 1, 6);
	  COL_TRI_STOP();
	  COL_END();
	}

	var vcutm = [
	  vcutm_seg7_collision,
	  vcutm_seg7_collision_0700AC44
	];

	function wdw_seg7_area_1_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x1FA);
	  COL_VERTEX(3072, 1280, 3649);
	  COL_VERTEX(3072, 0, 3712);
	  COL_VERTEX(3072, 1280, 3712);
	  COL_VERTEX(3072, 0, 3649);
	  COL_VERTEX(3135, 1152, 3712);
	  COL_VERTEX(3135, 0, 3712);
	  COL_VERTEX(3072, 1152, 3649);
	  COL_VERTEX(3072, 1152, 3712);
	  COL_VERTEX(3712, 1280, 3712);
	  COL_VERTEX(3072, 1408, 3712);
	  COL_VERTEX(3712, 1152, 3649);
	  COL_VERTEX(3649, 0, 3712);
	  COL_VERTEX(3649, 1152, 3712);
	  COL_VERTEX(3712, 0, 3649);
	  COL_VERTEX(3712, 1280, 3649);
	  COL_VERTEX(3712, 0, 3712);
	  COL_VERTEX(3712, 1408, 3712);
	  COL_VERTEX(3649, 1152, 768);
	  COL_VERTEX(3712, 1152, 768);
	  COL_VERTEX(3712, 1280, 831);
	  COL_VERTEX(3072, 1408, 768);
	  COL_VERTEX(3072, 1280, 768);
	  COL_VERTEX(3135, 1152, 768);
	  COL_VERTEX(3072, 1152, 831);
	  COL_VERTEX(-2271, 2304, -584);
	  COL_VERTEX(-2047, 2816, -747);
	  COL_VERTEX(-2047, 2304, -747);
	  COL_VERTEX(-2185, 2304, -320);
	  COL_VERTEX(-1909, 2304, -320);
	  COL_VERTEX(-1823, 2304, -584);
	  COL_VERTEX(3584, 0, 2662);
	  COL_VERTEX(3072, 0, 2662);
	  COL_VERTEX(3584, 154, 2662);
	  COL_VERTEX(3584, 0, 3174);
	  COL_VERTEX(3072, 0, 3174);
	  COL_VERTEX(256, 3072, 3328);
	  COL_VERTEX(-255, 3072, 3328);
	  COL_VERTEX(256, 3072, 3840);
	  COL_VERTEX(-255, 3072, 3840);
	  COL_VERTEX(-255, 3200, 3328);
	  COL_VERTEX(-1023, 2048, 2432);
	  COL_VERTEX(-1023, 2048, 2048);
	  COL_VERTEX(-511, 2048, 2048);
	  COL_VERTEX(-1023, 2176, 2048);
	  COL_VERTEX(-511, 2048, 2432);
	  COL_VERTEX(-1023, 2304, 2688);
	  COL_VERTEX(-1023, 2048, 2944);
	  COL_VERTEX(-511, 2304, 2688);
	  COL_VERTEX(-511, 2048, 2688);
	  COL_VERTEX(-511, 2048, 2944);
	  COL_VERTEX(-255, 1152, -511);
	  COL_VERTEX(-316, 1280, 1152);
	  COL_VERTEX(-1023, 1280, 1280);
	  COL_VERTEX(-3839, 1152, 1219);
	  COL_VERTEX(-316, 1152, 1152);
	  COL_VERTEX(-1023, 1152, 1219);
	  COL_VERTEX(-1023, 1280, 1219);
	  COL_VERTEX(-1023, 1152, 1280);
	  COL_VERTEX(3482, 3072, -2713);
	  COL_VERTEX(3482, 0, -2713);
	  COL_VERTEX(4608, 3072, -2815);
	  COL_VERTEX(3584, 3072, -3839);
	  COL_VERTEX(3482, 0, -3839);
	  COL_VERTEX(1178, 2304, -2175);
	  COL_VERTEX(1178, 3523, -1279);
	  COL_VERTEX(1178, 3523, -2175);
	  COL_VERTEX(640, 2304, -1279);
	  COL_VERTEX(640, 2304, -2175);
	  COL_VERTEX(1178, 205, -1479);
	  COL_VERTEX(1280, 205, -2175);
	  COL_VERTEX(1280, 404, -1479);
	  COL_VERTEX(1280, 2304, -1177);
	  COL_VERTEX(538, 2304, -2277);
	  COL_VERTEX(1280, 3584, -2277);
	  COL_VERTEX(538, 2304, -1177);
	  COL_VERTEX(1280, 404, -2175);
	  COL_VERTEX(3651, 1280, 3651);
	  COL_VERTEX(3133, 1408, 3584);
	  COL_VERTEX(3651, 1408, 768);
	  COL_VERTEX(3712, 1280, 768);
	  COL_VERTEX(3133, 1280, 768);
	  COL_VERTEX(3072, 1408, 3200);
	  COL_VERTEX(3133, 1408, 3200);
	  COL_VERTEX(3072, 1408, 3584);
	  COL_VERTEX(3133, 1280, 3584);
	  COL_VERTEX(-2457, 2304, 3456);
	  COL_VERTEX(3712, 1152, 3712);
	  COL_VERTEX(3649, 0, 768);
	  COL_VERTEX(3712, 0, 831);
	  COL_VERTEX(3712, 1152, 831);
	  COL_VERTEX(3712, 0, 768);
	  COL_VERTEX(3072, 0, 768);
	  COL_VERTEX(3072, 0, 831);
	  COL_VERTEX(3072, 1280, 831);
	  COL_VERTEX(3072, 1152, 768);
	  COL_VERTEX(3135, 0, 768);
	  COL_VERTEX(3103, 1428, 768);
	  COL_VERTEX(3133, 1408, 768);
	  COL_VERTEX(-2271, 2816, -584);
	  COL_VERTEX(-2185, 2816, -320);
	  COL_VERTEX(-1909, 2816, -320);
	  COL_VERTEX(-1823, 2816, -584);
	  COL_VERTEX(3584, 154, 3174);
	  COL_VERTEX(3072, 154, 2662);
	  COL_VERTEX(3072, 154, 3174);
	  COL_VERTEX(256, 3200, 3328);
	  COL_VERTEX(256, 3200, 3840);
	  COL_VERTEX(-255, 3200, 3840);
	  COL_VERTEX(-511, 2176, 2048);
	  COL_VERTEX(-511, 2176, 2432);
	  COL_VERTEX(-1023, 2176, 2432);
	  COL_VERTEX(-1023, 2048, 2688);
	  COL_VERTEX(-1023, 2304, 2944);
	  COL_VERTEX(-511, 2304, 2944);
	  COL_VERTEX(-255, 1280, 1152);
	  COL_VERTEX(-255, 1152, 1152);
	  COL_VERTEX(-255, 1280, -511);
	  COL_VERTEX(-286, 1300, 1152);
	  COL_VERTEX(-3839, 1280, 1280);
	  COL_VERTEX(-3839, 1152, 1280);
	  COL_VERTEX(-3839, 1280, 1219);
	  COL_VERTEX(-316, 1280, -511);
	  COL_VERTEX(-316, 1152, -511);
	  COL_VERTEX(-1023, 1300, 1249);
	  COL_VERTEX(4608, 3072, -2713);
	  COL_VERTEX(4608, 0, -2713);
	  COL_VERTEX(4608, 0, -2815);
	  COL_VERTEX(3584, 0, -2815);
	  COL_VERTEX(3584, 3072, -2815);
	  COL_VERTEX(3584, 0, -3839);
	  COL_VERTEX(3482, 3072, -3839);
	  COL_VERTEX(640, 3523, -2175);
	  COL_VERTEX(1178, 404, -2175);
	  COL_VERTEX(640, 3523, -1279);
	  COL_VERTEX(1178, 404, -1279);
	  COL_VERTEX(1178, 2304, -1279);
	  COL_VERTEX(1178, 404, -1479);
	  COL_VERTEX(1280, 205, -1479);
	  COL_VERTEX(1178, 205, -2175);
	  COL_VERTEX(1280, 404, -1279);
	  COL_VERTEX(538, 3584, -1177);
	  COL_VERTEX(1280, 3584, -1177);
	  COL_VERTEX(1280, 2304, -2277);
	  COL_VERTEX(538, 3584, -2277);
	  COL_VERTEX(1280, 2304, -1279);
	  COL_VERTEX(1280, 2304, -2175);
	  COL_VERTEX(3651, 1408, 3651);
	  COL_VERTEX(3651, 1280, 768);
	  COL_VERTEX(3133, 1408, 3651);
	  COL_VERTEX(3133, 1280, 3651);
	  COL_VERTEX(3681, 1428, 768);
	  COL_VERTEX(3712, 1408, 768);
	  COL_VERTEX(3072, 1280, 3584);
	  COL_VERTEX(3133, 1280, 3200);
	  COL_VERTEX(3072, 1280, 3200);
	  COL_VERTEX(3103, 1428, 3200);
	  COL_VERTEX(3103, 1428, 3584);
	  COL_VERTEX(-2431, 2278, 3840);
	  COL_VERTEX(-2451, 2304, 3840);
	  COL_VERTEX(-2431, 2278, 3456);
	  COL_VERTEX(384, -1219, -2854);
	  COL_VERTEX(320, -827, -2854);
	  COL_VERTEX(384, -827, -2854);
	  COL_VERTEX(320, -550, -3131);
	  COL_VERTEX(384, -550, -3131);
	  COL_VERTEX(320, -1219, -2854);
	  COL_VERTEX(320, -550, -3523);
	  COL_VERTEX(384, -550, -3523);
	  COL_VERTEX(320, -827, -3800);
	  COL_VERTEX(384, -827, -3800);
	  COL_VERTEX(320, -1219, -3800);
	  COL_VERTEX(384, -1219, -3800);
	  COL_VERTEX(320, -1496, -3523);
	  COL_VERTEX(384, -1496, -3523);
	  COL_VERTEX(384, -1496, -3131);
	  COL_VERTEX(320, -1496, -3131);
	  COL_VERTEX(448, -827, -2854);
	  COL_VERTEX(448, -550, -3131);
	  COL_VERTEX(448, -1219, -2854);
	  COL_VERTEX(448, -550, -3523);
	  COL_VERTEX(448, -827, -3800);
	  COL_VERTEX(448, -1219, -3800);
	  COL_VERTEX(448, -1496, -3523);
	  COL_VERTEX(448, -1496, -3131);
	  COL_VERTEX(-255, 4352, -4351);
	  COL_VERTEX(-255, 3584, -3839);
	  COL_VERTEX(4608, 3072, -3839);
	  COL_VERTEX(-3839, 4352, -4351);
	  COL_VERTEX(-3839, 3584, -3839);
	  COL_VERTEX(-3839, 4352, -2303);
	  COL_VERTEX(-3839, 3584, -2303);
	  COL_VERTEX(-3839, 3072, -511);
	  COL_VERTEX(-3839, 3072, -2303);
	  COL_VERTEX(-2815, -827, -2854);
	  COL_VERTEX(-2815, -550, -3131);
	  COL_VERTEX(-2815, -1219, -2854);
	  COL_VERTEX(-2834, -827, -2834);
	  COL_VERTEX(-3030, -550, -3030);
	  COL_VERTEX(-2854, -827, -2815);
	  COL_VERTEX(-3523, -550, -2815);
	  COL_VERTEX(-3308, -550, -3308);
	  COL_VERTEX(-3131, -550, -2815);
	  COL_VERTEX(-2815, -550, -3523);
	  COL_VERTEX(-2854, -1219, -2815);
	  COL_VERTEX(-2854, -827, -2303);
	  COL_VERTEX(-3131, -550, -2303);
	  COL_VERTEX(-3523, -550, -2303);
	  COL_VERTEX(-3503, -827, -3503);
	  COL_VERTEX(-2815, -827, -3800);
	  COL_VERTEX(-3800, -827, -2815);
	  COL_VERTEX(-3800, -827, -2303);
	  COL_VERTEX(-3503, -1219, -3503);
	  COL_VERTEX(-2815, -1219, -3800);
	  COL_VERTEX(-3800, -1219, -2815);
	  COL_VERTEX(-3308, -1496, -3308);
	  COL_VERTEX(-3523, -1496, -2815);
	  COL_VERTEX(-3131, -1496, -2815);
	  COL_VERTEX(-3030, -1496, -3030);
	  COL_VERTEX(-2834, -1219, -2834);
	  COL_VERTEX(3833, -760, -2854);
	  COL_VERTEX(3900, -511, -2854);
	  COL_VERTEX(4028, -955, -2854);
	  COL_VERTEX(4292, -511, -2854);
	  COL_VERTEX(3584, -1219, -2854);
	  COL_VERTEX(3584, -827, -2854);
	  COL_VERTEX(3584, -550, -3131);
	  COL_VERTEX(3603, -530, -3131);
	  COL_VERTEX(3623, -511, -3131);
	  COL_VERTEX(3900, 0, -2854);
	  COL_VERTEX(3623, 0, -3131);
	  COL_VERTEX(4292, 0, -2854);
	  COL_VERTEX(3584, -1496, -3131);
	  COL_VERTEX(4258, -1185, -3131);
	  COL_VERTEX(4569, -511, -3131);
	  COL_VERTEX(4569, 0, -3131);
	  COL_VERTEX(3584, -1496, -3523);
	  COL_VERTEX(4258, -1185, -3523);
	  COL_VERTEX(4569, 0, -3523);
	  COL_VERTEX(4028, -955, -3800);
	  COL_VERTEX(3584, -1219, -3800);
	  COL_VERTEX(4292, 0, -3800);
	  COL_VERTEX(4292, -511, -3800);
	  COL_VERTEX(3833, -760, -3800);
	  COL_VERTEX(3900, -511, -3800);
	  COL_VERTEX(3584, -827, -3800);
	  COL_VERTEX(3900, 0, -3800);
	  COL_VERTEX(3584, -550, -3523);
	  COL_VERTEX(3603, -530, -3523);
	  COL_VERTEX(3623, -511, -3523);
	  COL_VERTEX(3623, 0, -3523);
	  COL_VERTEX(4608, 0, -3839);
	  COL_VERTEX(1024, 1613, 2560);
	  COL_VERTEX(1024, 1613, 1792);
	  COL_VERTEX(2304, 1613, 2560);
	  COL_VERTEX(2304, 1613, 1792);
	  COL_VERTEX(2048, 1741, 1792);
	  COL_VERTEX(1280, 1741, 2560);
	  COL_VERTEX(2048, 1741, 2560);
	  COL_VERTEX(-2431, 1664, 3840);
	  COL_VERTEX(-2431, 0, 2944);
	  COL_VERTEX(-2431, 1664, 3456);
	  COL_VERTEX(-2175, 2304, 2432);
	  COL_VERTEX(-2431, 3328, 3456);
	  COL_VERTEX(-2431, 2304, 2944);
	  COL_VERTEX(-2047, 2304, 3840);
	  COL_VERTEX(-2431, 2304, 4224);
	  COL_VERTEX(-2047, 2304, 2432);
	  COL_VERTEX(-2431, 0, 3456);
	  COL_VERTEX(-2943, 3328, 2944);
	  COL_VERTEX(-2943, 2304, 3456);
	  COL_VERTEX(-2789, 3328, 3302);
	  COL_VERTEX(-2585, 3328, 3302);
	  COL_VERTEX(-2789, 3328, 3098);
	  COL_VERTEX(-2585, 3328, 3098);
	  COL_VERTEX(-2789, 2816, 3302);
	  COL_VERTEX(-210, 3328, 64);
	  COL_VERTEX(-402, 3840, -511);
	  COL_VERTEX(-511, 3840, -402);
	  COL_VERTEX(-511, 3814, -402);
	  COL_VERTEX(-2357, 3814, -2249);
	  COL_VERTEX(-2249, 3814, -2357);
	  COL_VERTEX(1280, 0, 1024);
	  COL_VERTEX(-511, 0, 2304);
	  COL_VERTEX(-3839, 0, 2304);
	  COL_VERTEX(4608, 0, 4608);
	  COL_VERTEX(-3839, 0, 4608);
	  COL_VERTEX(1280, 2304, -3839);
	  COL_VERTEX(-2303, 3584, -3839);
	  COL_VERTEX(1280, 0, -3839);
	  COL_VERTEX(-2815, 3584, -2303);
	  COL_VERTEX(-2560, 2304, -511);
	  COL_VERTEX(-3839, 2304, -511);
	  COL_VERTEX(-2303, 2304, -2303);
	  COL_VERTEX(-2815, 3456, -2303);
	  COL_VERTEX(-2431, 3456, -1919);
	  COL_VERTEX(-2229, 3456, -2121);
	  COL_VERTEX(-2121, 3584, -2229);
	  COL_VERTEX(-2249, 3584, -2357);
	  COL_VERTEX(-2121, 3456, -2229);
	  COL_VERTEX(-1919, 3584, -2431);
	  COL_VERTEX(-2303, 3584, -2815);
	  COL_VERTEX(-2303, 3456, -2303);
	  COL_VERTEX(-1023, 2816, -3839);
	  COL_VERTEX(-511, 2816, -3839);
	  COL_VERTEX(-1023, 3072, -3327);
	  COL_VERTEX(-511, 2816, -3327);
	  COL_VERTEX(-511, 3584, -3327);
	  COL_VERTEX(-1023, 3328, -3327);
	  COL_VERTEX(-1023, 2816, -3327);
	  COL_VERTEX(-511, 3328, -3327);
	  COL_VERTEX(-511, 3072, -3327);
	  COL_VERTEX(-255, 3328, -3327);
	  COL_VERTEX(-2303, 3328, -3327);
	  COL_VERTEX(1280, 205, -1279);
	  COL_VERTEX(-1536, 2304, -511);
	  COL_VERTEX(2048, 205, -2175);
	  COL_VERTEX(2432, 0, -2175);
	  COL_VERTEX(2048, 205, -1279);
	  COL_VERTEX(2048, 0, -895);
	  COL_VERTEX(2432, 0, -1279);
	  COL_VERTEX(1280, 0, -2559);
	  COL_VERTEX(-2303, 2304, -3327);
	  COL_VERTEX(256, 2304, -3327);
	  COL_VERTEX(256, 2816, -3327);
	  COL_VERTEX(1280, 2304, -3327);
	  COL_VERTEX(256, 3072, -3327);
	  COL_VERTEX(1280, 3072, -3839);
	  COL_VERTEX(0, 3328, -3839);
	  COL_VERTEX(0, 3072, -3327);
	  COL_VERTEX(256, 3072, -3839);
	  COL_VERTEX(0, 3072, -3839);
	  COL_VERTEX(-1536, 1152, -511);
	  COL_VERTEX(-1535, 1152, -511);
	  COL_VERTEX(-1792, 1152, -68);
	  COL_VERTEX(-2304, 1152, -68);
	  COL_VERTEX(-2559, 1152, -511);
	  COL_VERTEX(640, 205, -1279);
	  COL_VERTEX(1280, 384, 1024);
	  COL_VERTEX(-383, 384, 1280);
	  COL_VERTEX(-383, 1152, 1280);
	  COL_VERTEX(-2354, 384, 1280);
	  COL_VERTEX(-2047, 384, 1280);
	  COL_VERTEX(-2047, 691, 1280);
	  COL_VERTEX(-2047, 384, 666);
	  COL_VERTEX(-2354, 691, 1280);
	  COL_VERTEX(1676, 1997, -2496);
	  COL_VERTEX(2032, 1690, -2315);
	  COL_VERTEX(1755, 1869, -2740);
	  COL_VERTEX(1280, 2304, -3071);
	  COL_VERTEX(2183, 1562, -2522);
	  COL_VERTEX(1834, 1997, -2983);
	  COL_VERTEX(2333, 1690, -2729);
	  COL_VERTEX(2523, 1254, -2182);
	  COL_VERTEX(2316, 1382, -2031);
	  COL_VERTEX(2730, 1382, -2332);
	  COL_VERTEX(2741, 947, -1754);
	  COL_VERTEX(2497, 1075, -1675);
	  COL_VERTEX(2984, 1075, -1833);
	  COL_VERTEX(2560, 768, -1279);
	  COL_VERTEX(3072, 768, -1279);
	  COL_VERTEX(512, 0, 3328);
	  COL_VERTEX(1024, 0, 3328);
	  COL_VERTEX(1024, 384, 3328);
	  COL_VERTEX(1024, 0, 3584);
	  COL_VERTEX(768, 384, 3328);
	  COL_VERTEX(768, 0, 3584);
	  COL_VERTEX(512, 0, 3840);
	  COL_VERTEX(768, 640, 3328);
	  COL_VERTEX(512, 640, 3584);
	  COL_VERTEX(768, 0, 3840);
	  COL_VERTEX(768, 896, 3584);
	  COL_VERTEX(1211, 3968, 340);
	  COL_VERTEX(1723, 3968, -171);
	  COL_VERTEX(1211, 3968, -171);
	  COL_VERTEX(1211, 4096, -171);
	  COL_VERTEX(1723, 3968, 340);
	  COL_VERTEX(-578, 3820, 961);
	  COL_VERTEX(-547, 4025, 1111);
	  COL_VERTEX(-582, 4143, 1146);
	  COL_VERTEX(-913, 4348, 934);
	  COL_VERTEX(-944, 4143, 784);
	  COL_VERTEX(-759, 3820, 780);
	  COL_VERTEX(-909, 4025, 749);
	  COL_VERTEX(-732, 4348, 1115);
	  COL_VERTEX(-1234, 4054, 1617);
	  COL_VERTEX(-1084, 3849, 1648);
	  COL_VERTEX(-1129, 3849, 1602);
	  COL_VERTEX(-627, 4143, 1101);
	  COL_VERTEX(-740, 4296, 1078);
	  COL_VERTEX(-615, 3871, 953);
	  COL_VERTEX(-1117, 3577, 1455);
	  COL_VERTEX(-1094, 3731, 1568);
	  COL_VERTEX(-751, 3871, 817);
	  COL_VERTEX(-1253, 3577, 1319);
	  COL_VERTEX(-864, 4025, 794);
	  COL_VERTEX(-1366, 3731, 1296);
	  COL_VERTEX(-1378, 4003, 1444);
	  COL_VERTEX(-876, 4296, 942);
	  COL_VERTEX(-1400, 3849, 1331);
	  COL_VERTEX(-1446, 3849, 1285);
	  COL_VERTEX(-899, 4143, 829);
	  COL_VERTEX(-1242, 4003, 1579);
	  COL_VERTEX(-2854, -1219, -2303);
	  COL_VERTEX(-3800, -1219, -2303);
	  COL_VERTEX(-3523, -1496, -2303);
	  COL_VERTEX(-2815, -1496, -3523);
	  COL_VERTEX(-2815, -1496, -3131);
	  COL_VERTEX(-3131, -1496, -2303);
	  COL_VERTEX(4569, -511, -3523);
	  COL_VERTEX(4570, 0, -3533);
	  COL_VERTEX(1024, 0, 2560);
	  COL_VERTEX(2304, 0, 2560);
	  COL_VERTEX(1024, 0, 1792);
	  COL_VERTEX(2304, 0, 1792);
	  COL_VERTEX(1280, 1741, 1792);
	  COL_VERTEX(-2175, 1664, 2432);
	  COL_VERTEX(-2431, 1664, 2944);
	  COL_VERTEX(-2047, 1664, 2432);
	  COL_VERTEX(-2047, 1664, 3840);
	  COL_VERTEX(-2431, 2304, 3840);
	  COL_VERTEX(-2943, 0, 2944);
	  COL_VERTEX(-2431, 2304, 3456);
	  COL_VERTEX(-2431, 3328, 2944);
	  COL_VERTEX(-2943, 2304, 4224);
	  COL_VERTEX(-2943, 0, 3456);
	  COL_VERTEX(-2943, 3328, 3456);
	  COL_VERTEX(-2789, 2816, 3098);
	  COL_VERTEX(-2585, 2816, 3098);
	  COL_VERTEX(-2585, 2816, 3302);
	  COL_VERTEX(-786, 3840, -127);
	  COL_VERTEX(-786, 3840, 256);
	  COL_VERTEX(-402, 3840, 640);
	  COL_VERTEX(-18, 3840, 640);
	  COL_VERTEX(365, 3840, 256);
	  COL_VERTEX(365, 3840, -127);
	  COL_VERTEX(-18, 3840, -511);
	  COL_VERTEX(-402, 3814, -511);
	  COL_VERTEX(-2357, 3840, -2249);
	  COL_VERTEX(-2249, 3840, -2357);
	  COL_VERTEX(-3839, 3072, 4608);
	  COL_VERTEX(4608, 3072, 4608);
	  COL_VERTEX(-3839, 0, -511);
	  COL_VERTEX(1280, 0, -511);
	  COL_VERTEX(1280, 384, -511);
	  COL_VERTEX(-2303, 2304, -3839);
	  COL_VERTEX(2048, 0, -2559);
	  COL_VERTEX(-3839, 2304, -2303);
	  COL_VERTEX(1280, 2304, -511);
	  COL_VERTEX(-2229, 3584, -2121);
	  COL_VERTEX(-2431, 3584, -1919);
	  COL_VERTEX(-2357, 3584, -2249);
	  COL_VERTEX(-3839, 1152, -511);
	  COL_VERTEX(-2303, 3584, -2303);
	  COL_VERTEX(-2304, 2304, -68);
	  COL_VERTEX(-1792, 2304, -68);
	  COL_VERTEX(-1919, 3456, -2431);
	  COL_VERTEX(-2303, 3456, -2815);
	  COL_VERTEX(-1023, 3072, -3839);
	  COL_VERTEX(-511, 3072, -3839);
	  COL_VERTEX(-511, 3584, -3839);
	  COL_VERTEX(-511, 3328, -3839);
	  COL_VERTEX(-1023, 3328, -3839);
	  COL_VERTEX(-1023, 3584, -3839);
	  COL_VERTEX(-1023, 3584, -3327);
	  COL_VERTEX(-255, 3584, -3327);
	  COL_VERTEX(-255, 3328, -3839);
	  COL_VERTEX(-2303, 3584, -3327);
	  COL_VERTEX(-2303, 3328, -3839);
	  COL_VERTEX(1280, 0, -895);
	  COL_VERTEX(1280, 3072, -3327);
	  COL_VERTEX(640, 205, -2175);
	  COL_VERTEX(256, 2304, -3839);
	  COL_VERTEX(256, 2816, -3839);
	  COL_VERTEX(2048, 2304, -3327);
	  COL_VERTEX(2048, 2304, -3839);
	  COL_VERTEX(0, 3328, -3327);
	  COL_VERTEX(-255, 384, -511);
	  COL_VERTEX(-255, 384, 1152);
	  COL_VERTEX(-511, 384, 2304);
	  COL_VERTEX(-3839, 384, 2304);
	  COL_VERTEX(-3839, 384, 1280);
	  COL_VERTEX(-2354, 384, 666);
	  COL_VERTEX(-2354, 691, 666);
	  COL_VERTEX(-2047, 691, 666);
	  COL_VERTEX(1280, 2304, -2559);
	  COL_VERTEX(1280, 2176, -2815);
	  COL_VERTEX(1024, 384, 3584);
	  COL_VERTEX(768, 384, 3584);
	  COL_VERTEX(768, 640, 3584);
	  COL_VERTEX(768, 896, 3840);
	  COL_VERTEX(512, 640, 3328);
	  COL_VERTEX(512, 896, 3584);
	  COL_VERTEX(512, 896, 3840);
	  COL_VERTEX(1723, 4096, -171);
	  COL_VERTEX(1211, 4096, 340);
	  COL_VERTEX(1723, 4096, 340);
	  COL_VERTEX(-593, 4025, 1066);
	  COL_VERTEX(-1415, 4054, 1436);
	  COL_VERTEX(-1049, 3731, 1613);
	  COL_VERTEX(-1080, 3526, 1462);
	  COL_VERTEX(-1261, 3526, 1281);
	  COL_VERTEX(-1411, 3731, 1251);
	  COL_VERTEX(-286, 1300, -511);
	  COL_VERTEX(-3839, 1300, 1249);
	  COL_VERTEX(3103, 1428, 3681);
	  COL_VERTEX(3681, 1428, 3681);
	  COL_TRI_INIT(SURFACE_DEFAULT, 583);
	  COL_TRI(161, 193, 194);
	  COL_TRI(165, 195, 193);
	  COL_TRI(165, 193, 161);
	  COL_TRI(196, 193, 195);
	  COL_TRI(193, 196, 197);
	  COL_TRI(193, 197, 194);
	  COL_TRI(198, 197, 196);
	  COL_TRI(199, 200, 197);
	  COL_TRI(201, 199, 197);
	  COL_TRI(194, 197, 202);
	  COL_TRI(198, 201, 197);
	  COL_TRI(197, 200, 202);
	  COL_TRI(161, 194, 163);
	  COL_TRI(163, 194, 202);
	  COL_TRI(203, 198, 196);
	  COL_TRI(203, 204, 198);
	  COL_TRI(198, 204, 205);
	  COL_TRI(198, 205, 201);
	  COL_TRI(201, 206, 199);
	  COL_TRI(201, 205, 206);
	  COL_TRI(200, 207, 208);
	  COL_TRI(202, 200, 208);
	  COL_TRI(166, 208, 168);
	  COL_TRI(163, 202, 166);
	  COL_TRI(166, 202, 208);
	  COL_TRI(199, 209, 200);
	  COL_TRI(199, 206, 210);
	  COL_TRI(199, 210, 209);
	  COL_TRI(209, 207, 200);
	  COL_TRI(211, 207, 209);
	  COL_TRI(212, 208, 207);
	  COL_TRI(212, 207, 211);
	  COL_TRI(168, 208, 212);
	  COL_TRI(213, 211, 209);
	  COL_TRI(209, 210, 403);
	  COL_TRI(209, 403, 213);
	  COL_TRI(214, 212, 211);
	  COL_TRI(214, 211, 213);
	  COL_TRI(214, 213, 215);
	  COL_TRI(213, 404, 215);
	  COL_TRI(213, 403, 404);
	  COL_TRI(170, 212, 405);
	  COL_TRI(168, 212, 170);
	  COL_TRI(214, 405, 212);
	  COL_TRI(214, 406, 405);
	  COL_TRI(214, 217, 406);
	  COL_TRI(214, 215, 217);
	  COL_TRI(203, 218, 217);
	  COL_TRI(170, 405, 172);
	  COL_TRI(172, 405, 406);
	  COL_TRI(215, 216, 217);
	  COL_TRI(215, 404, 407);
	  COL_TRI(215, 407, 216);
	  COL_TRI(216, 203, 217);
	  COL_TRI(216, 407, 402);
	  COL_TRI(216, 402, 203);
	  COL_TRI(217, 218, 195);
	  COL_TRI(217, 195, 406);
	  COL_TRI(172, 406, 175);
	  COL_TRI(175, 406, 195);
	  COL_TRI(175, 195, 165);
	  COL_TRI(196, 195, 218);
	  COL_TRI(203, 196, 218);
	  COL_TRI(203, 402, 204);
	  COL_TRI(219, 224, 225);
	  COL_TRI(219, 225, 226);
	  COL_TRI(219, 226, 227);
	  COL_TRI(220, 219, 227);
	  COL_TRI(223, 176, 224);
	  COL_TRI(224, 177, 225);
	  COL_TRI(224, 176, 177);
	  COL_TRI(221, 223, 224);
	  COL_TRI(221, 224, 219);
	  COL_TRI(225, 177, 179);
	  COL_TRI(225, 179, 246);
	  COL_TRI(226, 225, 246);
	  COL_TRI(226, 246, 247);
	  COL_TRI(227, 226, 247);
	  COL_TRI(228, 227, 229);
	  COL_TRI(228, 220, 227);
	  COL_TRI(220, 222, 219);
	  COL_TRI(230, 222, 220);
	  COL_TRI(230, 220, 228);
	  COL_TRI(231, 223, 221);
	  COL_TRI(232, 231, 221);
	  COL_TRI(233, 232, 221);
	  COL_TRI(233, 221, 222);
	  COL_TRI(222, 221, 219);
	  COL_TRI(231, 178, 223);
	  COL_TRI(223, 178, 176);
	  COL_TRI(234, 233, 222);
	  COL_TRI(234, 222, 230);
	  COL_TRI(238, 239, 235);
	  COL_TRI(235, 183, 231);
	  COL_TRI(231, 183, 178);
	  COL_TRI(236, 235, 231);
	  COL_TRI(236, 231, 232);
	  COL_TRI(233, 236, 232);
	  COL_TRI(237, 408, 233);
	  COL_TRI(237, 233, 234);
	  COL_TRI(233, 408, 236);
	  COL_TRI(238, 235, 236);
	  COL_TRI(238, 236, 408);
	  COL_TRI(235, 182, 183);
	  COL_TRI(239, 182, 235);
	  COL_TRI(248, 242, 243);
	  COL_TRI(240, 241, 408);
	  COL_TRI(240, 408, 237);
	  COL_TRI(241, 238, 408);
	  COL_TRI(242, 239, 238);
	  COL_TRI(243, 242, 238);
	  COL_TRI(243, 238, 241);
	  COL_TRI(239, 181, 182);
	  COL_TRI(244, 181, 239);
	  COL_TRI(242, 244, 239);
	  COL_TRI(245, 241, 240);
	  COL_TRI(245, 243, 241);
	  COL_TRI(246, 244, 242);
	  COL_TRI(247, 246, 242);
	  COL_TRI(248, 247, 242);
	  COL_TRI(240, 237, 250);
	  COL_TRI(229, 227, 248);
	  COL_TRI(244, 180, 181);
	  COL_TRI(246, 180, 244);
	  COL_TRI(249, 248, 243);
	  COL_TRI(249, 243, 245);
	  COL_TRI(246, 179, 180);
	  COL_TRI(227, 247, 248);
	  COL_TRI(229, 248, 249);
	  COL_TRI(126, 234, 230);
	  COL_TRI(250, 234, 126);
	  COL_TRI(250, 409, 234);
	  COL_TRI(126, 230, 228);
	  COL_TRI(127, 228, 229);
	  COL_TRI(127, 126, 228);
	  COL_TRI(127, 229, 249);
	  COL_TRI(129, 249, 245);
	  COL_TRI(129, 127, 249);
	  COL_TRI(245, 240, 129);
	  COL_TRI(240, 250, 129);
	  COL_TRI(251, 410, 411);
	  COL_TRI(255, 414, 256);
	  COL_TRI(251, 411, 253);
	  COL_TRI(252, 412, 410);
	  COL_TRI(252, 410, 251);
	  COL_TRI(253, 411, 413);
	  COL_TRI(253, 413, 254);
	  COL_TRI(254, 412, 252);
	  COL_TRI(254, 413, 412);
	  COL_TRI(252, 251, 256);
	  COL_TRI(252, 256, 414);
	  COL_TRI(255, 254, 252);
	  COL_TRI(253, 251, 252);
	  COL_TRI(253, 252, 254);
	  COL_TRI(255, 252, 414);
	  COL_TRI(256, 251, 253);
	  COL_TRI(255, 256, 257);
	  COL_TRI(257, 254, 255);
	  COL_TRI(257, 253, 254);
	  COL_TRI(256, 253, 257);
	  COL_TRI(18, 94, 21);
	  COL_TRI(18, 21, 79);
	  COL_TRI(7, 94, 18);
	  COL_TRI(7, 18, 86);
	  COL_TRI(7, 8, 2);
	  COL_TRI(7, 86, 8);
	  COL_TRI(260, 416, 415);
	  COL_TRI(6, 0, 93);
	  COL_TRI(6, 93, 23);
	  COL_TRI(10, 89, 19);
	  COL_TRI(10, 19, 14);
	  COL_TRI(258, 260, 415);
	  COL_TRI(259, 416, 260);
	  COL_TRI(259, 260, 267);
	  COL_TRI(260, 258, 157);
	  COL_TRI(264, 419, 157);
	  COL_TRI(258, 415, 417);
	  COL_TRI(258, 417, 418);
	  COL_TRI(258, 418, 264);
	  COL_TRI(258, 264, 157);
	  COL_TRI(157, 419, 158);
	  COL_TRI(260, 157, 159);
	  COL_TRI(261, 264, 266);
	  COL_TRI(261, 419, 264);
	  COL_TRI(261, 421, 419);
	  COL_TRI(261, 263, 421);
	  COL_TRI(262, 419, 421);
	  COL_TRI(263, 262, 421);
	  COL_TRI(262, 265, 419);
	  COL_TRI(263, 422, 262);
	  COL_TRI(264, 418, 417);
	  COL_TRI(264, 417, 266);
	  COL_TRI(266, 417, 415);
	  COL_TRI(266, 415, 261);
	  COL_TRI(267, 269, 424);
	  COL_TRI(261, 415, 416);
	  COL_TRI(261, 416, 263);
	  COL_TRI(259, 420, 268);
	  COL_TRI(259, 268, 416);
	  COL_TRI(267, 260, 85);
	  COL_TRI(267, 85, 269);
	  COL_TRI(262, 422, 273);
	  COL_TRI(268, 269, 425);
	  COL_TRI(268, 420, 424);
	  COL_TRI(268, 424, 269);
	  COL_TRI(269, 423, 425);
	  COL_TRI(265, 423, 269);
	  COL_TRI(265, 269, 158);
	  COL_TRI(269, 85, 158);
	  COL_TRI(270, 425, 262);
	  COL_TRI(265, 158, 419);
	  COL_TRI(268, 425, 270);
	  COL_TRI(268, 270, 272);
	  COL_TRI(268, 272, 273);
	  COL_TRI(268, 273, 422);
	  COL_TRI(268, 263, 416);
	  COL_TRI(268, 422, 263);
	  COL_TRI(271, 274, 270);
	  COL_TRI(262, 271, 270);
	  COL_TRI(270, 274, 426);
	  COL_TRI(270, 426, 272);
	  COL_TRI(262, 273, 271);
	  COL_TRI(272, 426, 427);
	  COL_TRI(272, 427, 273);
	  COL_TRI(273, 427, 428);
	  COL_TRI(273, 428, 271);
	  COL_TRI(271, 428, 274);
	  COL_TRI(274, 427, 426);
	  COL_TRI(274, 428, 427);
	  COL_TRI(275, 429, 276);
	  COL_TRI(275, 430, 429);
	  COL_TRI(275, 431, 430);
	  COL_TRI(275, 432, 431);
	  COL_TRI(275, 433, 432);
	  COL_TRI(275, 434, 433);
	  COL_TRI(276, 430, 431);
	  COL_TRI(276, 431, 432);
	  COL_TRI(276, 429, 430);
	  COL_TRI(276, 432, 433);
	  COL_TRI(276, 433, 434);
	  COL_TRI(275, 435, 434);
	  COL_TRI(276, 434, 435);
	  COL_TRI(275, 276, 435);
	  COL_TRI(277, 278, 436);
	  COL_TRI(278, 279, 280);
	  COL_TRI(278, 280, 436);
	  COL_TRI(279, 278, 277);
	  COL_TRI(280, 279, 437);
	  COL_TRI(279, 277, 437);
	  COL_TRI(280, 437, 438);
	  COL_TRI(277, 436, 276);
	  COL_TRI(276, 436, 280);
	  COL_TRI(276, 438, 437);
	  COL_TRI(276, 437, 277);
	  COL_TRI(276, 280, 438);
	  COL_TRI(125, 281, 284);
	  COL_TRI(281, 282, 284);
	  COL_TRI(282, 283, 284);
	  COL_TRI(283, 285, 284);
	  COL_TRI(284, 285, 439);
	  COL_TRI(284, 439, 440);
	  COL_TRI(192, 439, 291);
	  COL_TRI(285, 291, 439);
	  COL_TRI(284, 440, 186);
	  COL_TRI(284, 186, 250);
	  COL_TRI(286, 250, 186);
	  COL_TRI(286, 186, 185);
	  COL_TRI(286, 288, 250);
	  COL_TRI(286, 185, 287);
	  COL_TRI(287, 444, 286);
	  COL_TRI(192, 291, 446);
	  COL_TRI(288, 445, 59);
	  COL_TRI(288, 320, 445);
	  COL_TRI(288, 59, 62);
	  COL_TRI(286, 320, 288);
	  COL_TRI(190, 189, 192);
	  COL_TRI(289, 188, 190);
	  COL_TRI(290, 291, 451);
	  COL_TRI(291, 447, 144);
	  COL_TRI(291, 144, 66);
	  COL_TRI(292, 291, 66);
	  COL_TRI(292, 446, 291);
	  COL_TRI(285, 441, 291);
	  COL_TRI(293, 449, 289);
	  COL_TRI(289, 448, 450);
	  COL_TRI(289, 449, 448);
	  COL_TRI(289, 297, 300);
	  COL_TRI(294, 448, 449);
	  COL_TRI(295, 296, 448);
	  COL_TRI(294, 295, 448);
	  COL_TRI(296, 297, 450);
	  COL_TRI(296, 450, 448);
	  COL_TRI(289, 450, 297);
	  COL_TRI(297, 296, 299);
	  COL_TRI(297, 299, 300);
	  COL_TRI(295, 298, 296);
	  COL_TRI(298, 299, 296);
	  COL_TRI(299, 455, 456);
	  COL_TRI(299, 456, 300);
	  COL_TRI(298, 455, 299);
	  COL_TRI(289, 300, 188);
	  COL_TRI(300, 287, 188);
	  COL_TRI(301, 455, 294);
	  COL_TRI(301, 456, 455);
	  COL_TRI(301, 294, 293);
	  COL_TRI(304, 457, 302);
	  COL_TRI(293, 294, 449);
	  COL_TRI(302, 303, 305);
	  COL_TRI(302, 305, 308);
	  COL_TRI(303, 302, 308);
	  COL_TRI(303, 308, 305);
	  COL_TRI(304, 302, 308);
	  COL_TRI(308, 310, 304);
	  COL_TRI(305, 458, 310);
	  COL_TRI(305, 303, 458);
	  COL_TRI(306, 459, 460);
	  COL_TRI(306, 460, 309);
	  COL_TRI(307, 461, 462);
	  COL_TRI(307, 462, 463);
	  COL_TRI(311, 309, 460);
	  COL_TRI(308, 305, 310);
	  COL_TRI(309, 311, 464);
	  COL_TRI(309, 464, 306);
	  COL_TRI(310, 304, 457);
	  COL_TRI(310, 457, 458);
	  COL_TRI(311, 460, 465);
	  COL_TRI(307, 312, 467);
	  COL_TRI(304, 310, 458);
	  COL_TRI(304, 458, 457);
	  COL_TRI(306, 464, 185);
	  COL_TRI(306, 185, 459);
	  COL_TRI(312, 307, 463);
	  COL_TRI(312, 463, 466);
	  COL_TRI(313, 66, 144);
	  COL_TRI(287, 466, 463);
	  COL_TRI(307, 467, 461);
	  COL_TRI(287, 463, 462);
	  COL_TRI(313, 144, 447);
	  COL_TRI(313, 447, 442);
	  COL_TRI(313, 442, 468);
	  COL_TRI(292, 145, 324);
	  COL_TRI(314, 443, 447);
	  COL_TRI(281, 442, 443);
	  COL_TRI(286, 145, 69);
	  COL_TRI(286, 69, 320);
	  COL_TRI(69, 145, 67);
	  COL_TRI(292, 67, 145);
	  COL_TRI(319, 316, 315);
	  COL_TRI(315, 69, 137);
	  COL_TRI(59, 445, 316);
	  COL_TRI(59, 316, 319);
	  COL_TRI(316, 445, 315);
	  COL_TRI(317, 315, 137);
	  COL_TRI(318, 468, 281);
	  COL_TRI(319, 318, 281);
	  COL_TRI(318, 319, 317);
	  COL_TRI(59, 319, 281);
	  COL_TRI(317, 137, 336);
	  COL_TRI(320, 315, 445);
	  COL_TRI(319, 315, 317);
	  COL_TRI(320, 69, 315);
	  COL_TRI(317, 313, 468);
	  COL_TRI(318, 317, 468);
	  COL_TRI(321, 322, 471);
	  COL_TRI(322, 323, 472);
	  COL_TRI(322, 472, 471);
	  COL_TRI(323, 311, 465);
	  COL_TRI(323, 465, 472);
	  COL_TRI(321, 471, 444);
	  COL_TRI(286, 473, 324);
	  COL_TRI(321, 292, 324);
	  COL_TRI(324, 469, 322);
	  COL_TRI(311, 328, 475);
	  COL_TRI(326, 325, 469);
	  COL_TRI(325, 322, 469);
	  COL_TRI(327, 465, 311);
	  COL_TRI(327, 311, 475);
	  COL_TRI(311, 465, 185);
	  COL_TRI(311, 185, 464);
	  COL_TRI(328, 323, 325);
	  COL_TRI(326, 329, 325);
	  COL_TRI(329, 328, 325);
	  COL_TRI(329, 330, 328);
	  COL_TRI(330, 475, 328);
	  COL_TRI(330, 327, 475);
	  COL_TRI(292, 66, 67);
	  COL_TRI(292, 452, 190);
	  COL_TRI(292, 190, 446);
	  COL_TRI(333, 334, 53);
	  COL_TRI(321, 444, 467);
	  COL_TRI(321, 467, 312);
	  COL_TRI(321, 466, 452);
	  COL_TRI(321, 452, 292);
	  COL_TRI(331, 314, 454);
	  COL_TRI(331, 454, 333);
	  COL_TRI(332, 333, 55);
	  COL_TRI(333, 53, 55);
	  COL_TRI(290, 453, 454);
	  COL_TRI(334, 451, 53);
	  COL_TRI(334, 335, 451);
	  COL_TRI(334, 290, 335);
	  COL_TRI(334, 453, 290);
	  COL_TRI(333, 454, 453);
	  COL_TRI(333, 453, 334);
	  COL_TRI(69, 67, 470);
	  COL_TRI(335, 290, 451);
	  COL_TRI(290, 454, 314);
	  COL_TRI(314, 50, 443);
	  COL_TRI(314, 331, 50);
	  COL_TRI(336, 470, 67);
	  COL_TRI(336, 67, 66);
	  COL_TRI(324, 473, 469);
	  COL_TRI(313, 336, 66);
	  COL_TRI(337, 443, 476);
	  COL_TRI(50, 476, 443);
	  COL_TRI(115, 476, 50);
	  COL_TRI(337, 476, 477);
	  COL_TRI(115, 477, 476);
	  COL_TRI(286, 474, 473);
	  COL_TRI(338, 478, 337);
	  COL_TRI(338, 479, 478);
	  COL_TRI(338, 480, 479);
	  COL_TRI(339, 338, 477);
	  COL_TRI(119, 480, 340);
	  COL_TRI(337, 477, 338);
	  COL_TRI(119, 338, 339);
	  COL_TRI(54, 57, 339);
	  COL_TRI(339, 477, 115);
	  COL_TRI(119, 342, 338);
	  COL_TRI(119, 340, 344);
	  COL_TRI(119, 344, 342);
	  COL_TRI(340, 481, 482);
	  COL_TRI(340, 482, 344);
	  COL_TRI(341, 481, 340);
	  COL_TRI(54, 339, 115);
	  COL_TRI(342, 341, 338);
	  COL_TRI(342, 343, 341);
	  COL_TRI(341, 343, 481);
	  COL_TRI(342, 483, 343);
	  COL_TRI(343, 483, 482);
	  COL_TRI(343, 482, 481);
	  COL_TRI(344, 483, 342);
	  COL_TRI(344, 482, 483);
	  COL_TRI(125, 59, 281);
	  COL_TRI(281, 443, 337);
	  COL_TRI(348, 350, 347);
	  COL_TRI(282, 478, 479);
	  COL_TRI(282, 479, 283);
	  COL_TRI(281, 478, 282);
	  COL_TRI(281, 337, 478);
	  COL_TRI(345, 484, 485);
	  COL_TRI(346, 345, 347);
	  COL_TRI(347, 345, 485);
	  COL_TRI(348, 347, 485);
	  COL_TRI(349, 346, 347);
	  COL_TRI(350, 349, 347);
	  COL_TRI(350, 351, 349);
	  COL_TRI(351, 354, 352);
	  COL_TRI(351, 352, 349);
	  COL_TRI(352, 353, 349);
	  COL_TRI(353, 346, 349);
	  COL_TRI(354, 355, 352);
	  COL_TRI(354, 357, 355);
	  COL_TRI(355, 356, 352);
	  COL_TRI(356, 353, 352);
	  COL_TRI(357, 359, 355);
	  COL_TRI(358, 356, 355);
	  COL_TRI(359, 358, 355);
	  COL_TRI(364, 367, 488);
	  COL_TRI(360, 362, 361);
	  COL_TRI(361, 486, 363);
	  COL_TRI(361, 362, 486);
	  COL_TRI(362, 487, 486);
	  COL_TRI(362, 364, 487);
	  COL_TRI(360, 364, 362);
	  COL_TRI(363, 486, 487);
	  COL_TRI(363, 487, 365);
	  COL_TRI(364, 488, 487);
	  COL_TRI(365, 370, 489);
	  COL_TRI(365, 489, 369);
	  COL_TRI(360, 367, 364);
	  COL_TRI(360, 490, 367);
	  COL_TRI(366, 490, 360);
	  COL_TRI(373, 374, 493);
	  COL_TRI(367, 368, 488);
	  COL_TRI(367, 490, 368);
	  COL_TRI(368, 370, 488);
	  COL_TRI(366, 491, 368);
	  COL_TRI(366, 492, 491);
	  COL_TRI(369, 492, 366);
	  COL_TRI(366, 368, 490);
	  COL_TRI(368, 491, 370);
	  COL_TRI(370, 491, 492);
	  COL_TRI(370, 492, 489);
	  COL_TRI(369, 489, 492);
	  COL_TRI(371, 374, 373);
	  COL_TRI(372, 371, 373);
	  COL_TRI(373, 493, 372);
	  COL_TRI(374, 494, 495);
	  COL_TRI(371, 494, 374);
	  COL_TRI(374, 495, 493);
	  COL_TRI(372, 493, 495);
	  COL_TRI(372, 495, 375);
	  COL_TRI(372, 375, 371);
	  COL_TRI(375, 495, 494);
	  COL_TRI(375, 494, 371);
	  COL_TRI(84, 153, 154);
	  COL_TRI(84, 76, 153);
	  COL_TRI(84, 149, 76);
	  COL_TRI(84, 154, 152);
	  COL_TRI(76, 147, 153);
	  COL_TRI(147, 80, 153);
	  COL_TRI(122, 332, 55);
	  COL_TRI(55, 57, 54);
	  COL_TRI(122, 55, 54);
	  COL_TRI(137, 68, 336);
	  COL_TRI(68, 470, 336);
	  COL_TRI(68, 138, 470);
	  COL_TRI(379, 388, 397);
	  COL_TRI(376, 392, 389);
	  COL_TRI(376, 381, 392);
	  COL_TRI(377, 376, 496);
	  COL_TRI(376, 389, 496);
	  COL_TRI(378, 388, 383);
	  COL_TRI(378, 387, 388);
	  COL_TRI(379, 383, 388);
	  COL_TRI(380, 379, 400);
	  COL_TRI(379, 397, 400);
	  COL_TRI(381, 382, 392);
	  COL_TRI(382, 394, 392);
	  COL_TRI(379, 384, 383);
	  COL_TRI(387, 496, 391);
	  COL_TRI(383, 384, 385);
	  COL_TRI(384, 386, 385);
	  COL_TRI(384, 401, 386);
	  COL_TRI(383, 385, 378);
	  COL_TRI(385, 498, 377);
	  COL_TRI(385, 377, 378);
	  COL_TRI(386, 498, 385);
	  COL_TRI(378, 496, 387);
	  COL_TRI(378, 377, 496);
	  COL_TRI(387, 386, 388);
	  COL_TRI(386, 401, 388);
	  COL_TRI(387, 391, 386);
	  COL_TRI(386, 391, 498);
	  COL_TRI(388, 401, 397);
	  COL_TRI(389, 390, 496);
	  COL_TRI(390, 391, 496);
	  COL_TRI(390, 499, 498);
	  COL_TRI(391, 390, 498);
	  COL_TRI(392, 393, 389);
	  COL_TRI(393, 390, 389);
	  COL_TRI(377, 499, 376);
	  COL_TRI(377, 498, 499);
	  COL_TRI(376, 500, 381);
	  COL_TRI(376, 499, 500);
	  COL_TRI(390, 393, 500);
	  COL_TRI(390, 500, 499);
	  COL_TRI(394, 395, 392);
	  COL_TRI(395, 393, 392);
	  COL_TRI(381, 501, 382);
	  COL_TRI(381, 500, 501);
	  COL_TRI(393, 395, 501);
	  COL_TRI(393, 501, 500);
	  COL_TRI(396, 398, 400);
	  COL_TRI(397, 396, 400);
	  COL_TRI(398, 396, 399);
	  COL_TRI(396, 497, 399);
	  COL_TRI(399, 501, 395);
	  COL_TRI(399, 395, 398);
	  COL_TRI(398, 394, 400);
	  COL_TRI(398, 395, 394);
	  COL_TRI(400, 382, 380);
	  COL_TRI(400, 394, 382);
	  COL_TRI(401, 396, 397);
	  COL_TRI(380, 497, 379);
	  COL_TRI(380, 399, 497);
	  COL_TRI(380, 501, 399);
	  COL_TRI(380, 382, 501);
	  COL_TRI(379, 497, 384);
	  COL_TRI(401, 384, 497);
	  COL_TRI(396, 401, 497);
	  COL_TRI(260, 159, 85);
	  COL_TRI_INIT(SURFACE_VERY_SLIPPERY, 6);
	  COL_TRI(184, 185, 186);
	  COL_TRI(187, 185, 184);
	  COL_TRI(187, 188, 185);
	  COL_TRI(189, 188, 187);
	  COL_TRI(189, 190, 188);
	  COL_TRI(189, 191, 192);
	  COL_TRI_INIT(SURFACE_SLIPPERY, 24);
	  COL_TRI(9, 504, 156);
	  COL_TRI(116, 502, 117);
	  COL_TRI(502, 51, 117);
	  COL_TRI(502, 121, 51);
	  COL_TRI(116, 117, 114);
	  COL_TRI(56, 503, 123);
	  COL_TRI(56, 120, 503);
	  COL_TRI(123, 503, 118);
	  COL_TRI(123, 118, 52);
	  COL_TRI(155, 20, 81);
	  COL_TRI(505, 148, 504);
	  COL_TRI(504, 148, 77);
	  COL_TRI(504, 77, 156);
	  COL_TRI(505, 146, 148);
	  COL_TRI(9, 156, 83);
	  COL_TRI(505, 504, 9);
	  COL_TRI(82, 96, 155);
	  COL_TRI(155, 96, 20);
	  COL_TRI(82, 97, 96);
	  COL_TRI(505, 151, 150);
	  COL_TRI(505, 16, 151);
	  COL_TRI(16, 505, 9);
	  COL_TRI(146, 505, 150);
	  COL_TRI(146, 150, 78);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 14);
	  COL_TRI(356, 359, 357);
	  COL_TRI(262, 423, 265);
	  COL_TRI(262, 425, 423);
	  COL_TRI(474, 326, 469);
	  COL_TRI(474, 469, 473);
	  COL_TRI(356, 358, 359);
	  COL_TRI(353, 356, 357);
	  COL_TRI(484, 350, 348);
	  COL_TRI(353, 357, 354);
	  COL_TRI(346, 353, 354);
	  COL_TRI(346, 354, 351);
	  COL_TRI(345, 346, 351);
	  COL_TRI(345, 351, 350);
	  COL_TRI(484, 345, 350);
	  COL_TRI_INIT(SURFACE_INSTANT_WARP_1B, 16);
	  COL_TRI(181, 171, 173);
	  COL_TRI(176, 164, 177);
	  COL_TRI(176, 162, 164);
	  COL_TRI(178, 162, 176);
	  COL_TRI(178, 160, 162);
	  COL_TRI(177, 164, 167);
	  COL_TRI(177, 167, 179);
	  COL_TRI(179, 169, 180);
	  COL_TRI(180, 171, 181);
	  COL_TRI(180, 169, 171);
	  COL_TRI(179, 167, 169);
	  COL_TRI(182, 173, 174);
	  COL_TRI(181, 173, 182);
	  COL_TRI(183, 160, 178);
	  COL_TRI(183, 174, 160);
	  COL_TRI(182, 174, 183);
	  COL_TRI_INIT(SURFACE_INSTANT_WARP_1C, 16);
	  COL_TRI(171, 170, 172);
	  COL_TRI(160, 161, 162);
	  COL_TRI(162, 161, 163);
	  COL_TRI(162, 163, 164);
	  COL_TRI(160, 165, 161);
	  COL_TRI(164, 163, 166);
	  COL_TRI(164, 166, 167);
	  COL_TRI(167, 168, 169);
	  COL_TRI(169, 170, 171);
	  COL_TRI(169, 168, 170);
	  COL_TRI(167, 166, 168);
	  COL_TRI(173, 172, 175);
	  COL_TRI(171, 172, 173);
	  COL_TRI(174, 165, 160);
	  COL_TRI(174, 175, 165);
	  COL_TRI(173, 175, 174);
	  COL_TRI_INIT(SURFACE_WALL_MISC, 169);
	  COL_TRI(10, 13, 11);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(4, 5, 3);
	  COL_TRI(4, 3, 6);
	  COL_TRI(7, 1, 5);
	  COL_TRI(8, 9, 2);
	  COL_TRI(7, 5, 4);
	  COL_TRI(10, 11, 12);
	  COL_TRI(8, 13, 14);
	  COL_TRI(8, 15, 13);
	  COL_TRI(12, 11, 15);
	  COL_TRI(12, 15, 86);
	  COL_TRI(8, 16, 9);
	  COL_TRI(17, 87, 88);
	  COL_TRI(17, 88, 89);
	  COL_TRI(18, 87, 17);
	  COL_TRI(18, 90, 87);
	  COL_TRI(19, 88, 90);
	  COL_TRI(19, 90, 79);
	  COL_TRI(20, 80, 21);
	  COL_TRI(21, 91, 92);
	  COL_TRI(21, 92, 93);
	  COL_TRI(22, 91, 94);
	  COL_TRI(22, 95, 91);
	  COL_TRI(23, 92, 95);
	  COL_TRI(23, 95, 22);
	  COL_TRI(24, 98, 25);
	  COL_TRI(25, 99, 100);
	  COL_TRI(25, 98, 99);
	  COL_TRI(24, 25, 26);
	  COL_TRI(26, 25, 101);
	  COL_TRI(25, 100, 101);
	  COL_TRI(27, 99, 98);
	  COL_TRI(27, 98, 24);
	  COL_TRI(28, 100, 99);
	  COL_TRI(28, 99, 27);
	  COL_TRI(34, 103, 31);
	  COL_TRI(29, 100, 28);
	  COL_TRI(29, 101, 100);
	  COL_TRI(26, 101, 29);
	  COL_TRI(30, 32, 102);
	  COL_TRI(30, 102, 33);
	  COL_TRI(31, 32, 30);
	  COL_TRI(31, 103, 32);
	  COL_TRI(32, 103, 104);
	  COL_TRI(32, 104, 102);
	  COL_TRI(33, 102, 104);
	  COL_TRI(33, 104, 34);
	  COL_TRI(34, 104, 103);
	  COL_TRI(35, 37, 38);
	  COL_TRI(35, 38, 36);
	  COL_TRI(35, 105, 106);
	  COL_TRI(35, 106, 37);
	  COL_TRI(36, 105, 35);
	  COL_TRI(37, 106, 107);
	  COL_TRI(37, 107, 38);
	  COL_TRI(38, 107, 39);
	  COL_TRI(38, 39, 36);
	  COL_TRI(36, 39, 105);
	  COL_TRI(39, 106, 105);
	  COL_TRI(39, 107, 106);
	  COL_TRI(40, 43, 41);
	  COL_TRI(41, 43, 108);
	  COL_TRI(41, 108, 42);
	  COL_TRI(42, 40, 41);
	  COL_TRI(47, 45, 112);
	  COL_TRI(43, 109, 108);
	  COL_TRI(43, 110, 109);
	  COL_TRI(40, 110, 43);
	  COL_TRI(42, 108, 109);
	  COL_TRI(42, 109, 44);
	  COL_TRI(42, 44, 40);
	  COL_TRI(44, 109, 110);
	  COL_TRI(44, 110, 40);
	  COL_TRI(45, 47, 48);
	  COL_TRI(45, 48, 111);
	  COL_TRI(46, 45, 111);
	  COL_TRI(46, 112, 45);
	  COL_TRI(51, 115, 114);
	  COL_TRI(47, 112, 113);
	  COL_TRI(48, 47, 113);
	  COL_TRI(49, 111, 48);
	  COL_TRI(48, 113, 49);
	  COL_TRI(49, 46, 111);
	  COL_TRI(49, 113, 112);
	  COL_TRI(49, 112, 46);
	  COL_TRI(50, 114, 115);
	  COL_TRI(50, 116, 114);
	  COL_TRI(51, 114, 117);
	  COL_TRI(54, 121, 122);
	  COL_TRI(51, 54, 115);
	  COL_TRI(52, 118, 119);
	  COL_TRI(52, 119, 57);
	  COL_TRI(53, 56, 55);
	  COL_TRI(53, 120, 56);
	  COL_TRI(54, 51, 121);
	  COL_TRI(60, 127, 128);
	  COL_TRI(55, 56, 52);
	  COL_TRI(56, 123, 52);
	  COL_TRI(57, 55, 52);
	  COL_TRI(58, 59, 124);
	  COL_TRI(59, 125, 124);
	  COL_TRI(60, 126, 127);
	  COL_TRI(61, 128, 127);
	  COL_TRI(61, 127, 129);
	  COL_TRI(62, 59, 130);
	  COL_TRI(59, 58, 130);
	  COL_TRI(58, 128, 61);
	  COL_TRI(61, 130, 58);
	  COL_TRI(58, 60, 128);
	  COL_TRI(58, 124, 60);
	  COL_TRI(67, 131, 133);
	  COL_TRI(63, 65, 131);
	  COL_TRI(64, 65, 132);
	  COL_TRI(65, 64, 133);
	  COL_TRI(65, 133, 131);
	  COL_TRI(64, 132, 134);
	  COL_TRI(66, 133, 64);
	  COL_TRI(66, 64, 135);
	  COL_TRI(67, 133, 66);
	  COL_TRI(68, 70, 136);
	  COL_TRI(68, 137, 70);
	  COL_TRI(68, 132, 138);
	  COL_TRI(68, 136, 132);
	  COL_TRI(69, 70, 137);
	  COL_TRI(70, 134, 136);
	  COL_TRI(70, 139, 134);
	  COL_TRI(67, 63, 131);
	  COL_TRI(71, 140, 74);
	  COL_TRI(71, 141, 140);
	  COL_TRI(71, 73, 141);
	  COL_TRI(71, 142, 73);
	  COL_TRI(72, 73, 142);
	  COL_TRI(72, 143, 73);
	  COL_TRI(73, 140, 141);
	  COL_TRI(73, 143, 140);
	  COL_TRI(74, 143, 72);
	  COL_TRI(74, 140, 143);
	  COL_TRI(76, 149, 148);
	  COL_TRI(69, 75, 70);
	  COL_TRI(75, 144, 139);
	  COL_TRI(75, 145, 144);
	  COL_TRI(76, 146, 78);
	  COL_TRI(76, 78, 147);
	  COL_TRI(76, 148, 146);
	  COL_TRI(79, 16, 8);
	  COL_TRI(77, 149, 84);
	  COL_TRI(77, 148, 149);
	  COL_TRI(78, 150, 151);
	  COL_TRI(78, 79, 147);
	  COL_TRI(78, 151, 79);
	  COL_TRI(79, 151, 16);
	  COL_TRI(20, 96, 97);
	  COL_TRI(20, 97, 80);
	  COL_TRI(80, 97, 82);
	  COL_TRI(80, 82, 153);
	  COL_TRI(81, 21, 154);
	  COL_TRI(81, 20, 21);
	  COL_TRI(82, 154, 153);
	  COL_TRI(82, 81, 154);
	  COL_TRI(82, 155, 81);
	  COL_TRI(83, 156, 77);
	  COL_TRI(84, 152, 83);
	  COL_TRI(84, 83, 77);
	  COL_TRI(2, 83, 152);
	  COL_TRI(2, 9, 83);
	  COL_TRI(85, 157, 158);
	  COL_TRI(85, 159, 157);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(1);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start, /*pos*/ 3395, 1280, 384, /*yaw*/ 128); // unused, probably an early way to set initial position
	  COL_WATER_BOX_INIT(1);
	  COL_WATER_BOX(0, -3839, -3839, 4608, 4608, 31);
	  COL_END();
	}

	function wdw_seg7_area_2_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x20B);
	  COL_VERTEX(-511, -1791, 3712);
	  COL_VERTEX(-895, -1407, 3712);
	  COL_VERTEX(-639, -1407, 3712);
	  COL_VERTEX(-511, -1535, 3712);
	  COL_VERTEX(-511, -1791, 3200);
	  COL_VERTEX(-1023, -1791, 3712);
	  COL_VERTEX(-1023, -1535, 3712);
	  COL_VERTEX(-1023, -1535, 3200);
	  COL_VERTEX(-1023, -1791, 3200);
	  COL_VERTEX(-895, -1407, 3200);
	  COL_VERTEX(-639, -1407, 3200);
	  COL_VERTEX(-511, -1535, 3200);
	  COL_VERTEX(-3726, -1293, -2789);
	  COL_VERTEX(-2854, -827, -2789);
	  COL_VERTEX(-2854, -1219, -2789);
	  COL_VERTEX(-3131, -550, -2789);
	  COL_VERTEX(-3523, -550, -2789);
	  COL_VERTEX(-3800, -827, -2789);
	  COL_VERTEX(-3800, -1219, -2789);
	  COL_VERTEX(-2928, -1293, -2789);
	  COL_VERTEX(-3800, -827, -2687);
	  COL_VERTEX(-2854, -827, -2687);
	  COL_VERTEX(-3131, -550, -2687);
	  COL_VERTEX(-3800, -1219, -2687);
	  COL_VERTEX(-3726, -1293, -2687);
	  COL_VERTEX(-3523, -550, -2687);
	  COL_VERTEX(-2928, -1293, -2687);
	  COL_VERTEX(-2854, -1219, -2687);
	  COL_VERTEX(-3800, -827, -1535);
	  COL_VERTEX(-2928, -753, -1535);
	  COL_VERTEX(-3800, -827, -1637);
	  COL_VERTEX(-3523, -1496, -1637);
	  COL_VERTEX(-2854, -1219, -1535);
	  COL_VERTEX(-2854, -827, -1535);
	  COL_VERTEX(-3131, -1496, -1535);
	  COL_VERTEX(-3726, -753, -1535);
	  COL_VERTEX(-3523, -1496, -1535);
	  COL_VERTEX(-3800, -1219, -1535);
	  COL_VERTEX(-2928, -753, -1637);
	  COL_VERTEX(-3726, -753, -1637);
	  COL_VERTEX(-3131, -1496, -1637);
	  COL_VERTEX(-3800, -1219, -1637);
	  COL_VERTEX(-2854, -827, -1637);
	  COL_VERTEX(-2854, -1219, -1637);
	  COL_VERTEX(384, -827, -2854);
	  COL_VERTEX(320, -827, -2854);
	  COL_VERTEX(320, -550, -3131);
	  COL_VERTEX(384, -1219, -2854);
	  COL_VERTEX(384, -550, -3131);
	  COL_VERTEX(320, -1219, -2854);
	  COL_VERTEX(320, -550, -3523);
	  COL_VERTEX(384, -550, -3523);
	  COL_VERTEX(320, -827, -3800);
	  COL_VERTEX(384, -827, -3800);
	  COL_VERTEX(320, -1219, -3800);
	  COL_VERTEX(384, -1219, -3800);
	  COL_VERTEX(320, -1496, -3523);
	  COL_VERTEX(384, -1496, -3523);
	  COL_VERTEX(384, -1496, -3131);
	  COL_VERTEX(320, -1496, -3131);
	  COL_VERTEX(448, -827, -2854);
	  COL_VERTEX(448, -550, -3131);
	  COL_VERTEX(448, -1219, -2854);
	  COL_VERTEX(448, -550, -3523);
	  COL_VERTEX(448, -827, -3800);
	  COL_VERTEX(448, -1219, -3800);
	  COL_VERTEX(448, -1496, -3523);
	  COL_VERTEX(448, -1496, -3131);
	  COL_VERTEX(1587, -2508, -690);
	  COL_VERTEX(1741, -2508, -1868);
	  COL_VERTEX(1587, -2508, -1868);
	  COL_VERTEX(1741, -2508, -690);
	  COL_VERTEX(-3609, -2508, 1050);
	  COL_VERTEX(-3813, -2508, 1766);
	  COL_VERTEX(-3609, -2508, 1766);
	  COL_VERTEX(-3813, -2508, 1050);
	  COL_VERTEX(-3523, -550, -2303);
	  COL_VERTEX(-3523, -550, -1535);
	  COL_VERTEX(-3800, -827, -2303);
	  COL_VERTEX(-3131, -550, -2303);
	  COL_VERTEX(-3839, -511, -1535);
	  COL_VERTEX(-3839, -1598, -1535);
	  COL_VERTEX(-3800, -1219, -2303);
	  COL_VERTEX(-2752, -511, -2303);
	  COL_VERTEX(-2752, -1598, -1535);
	  COL_VERTEX(-2752, -1598, -2303);
	  COL_VERTEX(-2752, -511, -1535);
	  COL_VERTEX(-3131, -550, -1535);
	  COL_VERTEX(-3523, -1496, -2303);
	  COL_VERTEX(-3131, -1496, -2303);
	  COL_VERTEX(-2854, -1219, -2303);
	  COL_VERTEX(-2854, -827, -2303);
	  COL_VERTEX(-3583, -2457, 1792);
	  COL_VERTEX(-3609, -2457, 1050);
	  COL_VERTEX(-3839, -2457, 1024);
	  COL_VERTEX(-3583, -2559, 1024);
	  COL_VERTEX(128, -1945, -255);
	  COL_VERTEX(256, -1945, -127);
	  COL_VERTEX(-511, -2559, -255);
	  COL_VERTEX(128, -2559, -255);
	  COL_VERTEX(-511, -2559, -127);
	  COL_VERTEX(128, -2559, -127);
	  COL_VERTEX(256, -1945, 1664);
	  COL_VERTEX(128, -2559, 1664);
	  COL_VERTEX(256, -2559, -127);
	  COL_VERTEX(128, -1945, 1792);
	  COL_VERTEX(256, -2559, 1664);
	  COL_VERTEX(-255, -1945, 1792);
	  COL_VERTEX(-383, -2559, 1664);
	  COL_VERTEX(128, -2559, 1792);
	  COL_VERTEX(-255, -2559, 1792);
	  COL_VERTEX(-383, -2559, 2048);
	  COL_VERTEX(-1663, -1945, 1664);
	  COL_VERTEX(-1663, -1945, -127);
	  COL_VERTEX(-1663, -2559, -127);
	  COL_VERTEX(-1023, -2559, -127);
	  COL_VERTEX(-1023, -2559, -255);
	  COL_VERTEX(-1663, -2559, -255);
	  COL_VERTEX(-1791, -2559, -127);
	  COL_VERTEX(-1791, -2559, 1664);
	  COL_VERTEX(-1151, -1945, 1664);
	  COL_VERTEX(-1663, -2559, 1664);
	  COL_VERTEX(-1663, -2559, 1792);
	  COL_VERTEX(-1279, -2559, 1792);
	  COL_VERTEX(-1151, -2559, 1664);
	  COL_VERTEX(-1279, -2559, 2048);
	  COL_VERTEX(2304, -2559, 2914);
	  COL_VERTEX(1710, -2559, 3073);
	  COL_VERTEX(1275, -2559, 3508);
	  COL_VERTEX(1024, -2559, 3840);
	  COL_VERTEX(1192, -2559, 3460);
	  COL_VERTEX(1662, -2559, 2990);
	  COL_VERTEX(-3839, -1598, -2303);
	  COL_VERTEX(-3609, -2457, 1766);
	  COL_VERTEX(-3813, -2457, 1766);
	  COL_VERTEX(-3839, -2457, 1792);
	  COL_VERTEX(-3583, -2457, 1024);
	  COL_VERTEX(-3813, -2457, 1050);
	  COL_VERTEX(-3583, -2559, 1792);
	  COL_VERTEX(-511, -1945, -127);
	  COL_VERTEX(128, -1945, -127);
	  COL_VERTEX(-511, -1945, -255);
	  COL_VERTEX(128, -1945, 1664);
	  COL_VERTEX(-383, -1945, 1664);
	  COL_VERTEX(-383, -1945, 2048);
	  COL_VERTEX(-255, -1945, 2048);
	  COL_VERTEX(-255, -2559, 2048);
	  COL_VERTEX(-1791, -1945, -127);
	  COL_VERTEX(-1663, -1945, -255);
	  COL_VERTEX(-1023, -1945, -127);
	  COL_VERTEX(-1023, -1945, -255);
	  COL_VERTEX(-1791, -1945, 1664);
	  COL_VERTEX(-1663, -1945, 1792);
	  COL_VERTEX(-1279, -1945, 1792);
	  COL_VERTEX(-1279, -1945, 2048);
	  COL_VERTEX(-1151, -1945, 2048);
	  COL_VERTEX(-1151, -2559, 2048);
	  COL_VERTEX(1710, -511, 3073);
	  COL_VERTEX(2304, -511, 2914);
	  COL_VERTEX(1275, -511, 3508);
	  COL_VERTEX(1120, -511, 3840);
	  COL_VERTEX(1120, -2559, 3840);
	  COL_VERTEX(1192, -511, 3460);
	  COL_VERTEX(1662, -511, 2990);
	  COL_VERTEX(1024, -511, 3840);
	  COL_VERTEX(2304, -511, 2818);
	  COL_VERTEX(2304, -2559, 2818);
	  COL_VERTEX(-1279, -1996, -767);
	  COL_VERTEX(-2175, -1598, -1279);
	  COL_VERTEX(-2815, -1996, -767);
	  COL_VERTEX(-1279, -1996, -1791);
	  COL_VERTEX(-1919, -1598, -1279);
	  COL_VERTEX(-2815, -1996, -1791);
	  COL_VERTEX(-2815, -827, -2854);
	  COL_VERTEX(-2815, -1219, -2854);
	  COL_VERTEX(-2815, -550, -3131);
	  COL_VERTEX(-2834, -827, -2834);
	  COL_VERTEX(-3030, -550, -3030);
	  COL_VERTEX(-2854, -827, -2815);
	  COL_VERTEX(-3523, -550, -2815);
	  COL_VERTEX(-3308, -550, -3308);
	  COL_VERTEX(-3131, -550, -2815);
	  COL_VERTEX(-2815, -550, -3523);
	  COL_VERTEX(-2854, -1219, -2815);
	  COL_VERTEX(-3503, -827, -3503);
	  COL_VERTEX(-2815, -827, -3800);
	  COL_VERTEX(-3800, -827, -2815);
	  COL_VERTEX(-3503, -1219, -3503);
	  COL_VERTEX(-2815, -1219, -3800);
	  COL_VERTEX(-3800, -1219, -2815);
	  COL_VERTEX(-3308, -1496, -3308);
	  COL_VERTEX(-3523, -1496, -2815);
	  COL_VERTEX(-3131, -1496, -2815);
	  COL_VERTEX(-3030, -1496, -3030);
	  COL_VERTEX(-2834, -1219, -2834);
	  COL_VERTEX(4292, -511, -2854);
	  COL_VERTEX(3900, -511, -2854);
	  COL_VERTEX(4028, -955, -2854);
	  COL_VERTEX(3833, -760, -2854);
	  COL_VERTEX(3584, -1219, -2854);
	  COL_VERTEX(3584, -827, -2854);
	  COL_VERTEX(3584, -550, -3131);
	  COL_VERTEX(3603, -530, -3131);
	  COL_VERTEX(3623, -511, -3131);
	  COL_VERTEX(3900, 0, -2854);
	  COL_VERTEX(3623, 0, -3131);
	  COL_VERTEX(4292, 0, -2854);
	  COL_VERTEX(3584, -1496, -3131);
	  COL_VERTEX(4258, -1185, -3131);
	  COL_VERTEX(4569, -511, -3131);
	  COL_VERTEX(4569, 0, -3131);
	  COL_VERTEX(3584, -1496, -3523);
	  COL_VERTEX(4258, -1185, -3523);
	  COL_VERTEX(4569, 0, -3523);
	  COL_VERTEX(4028, -955, -3800);
	  COL_VERTEX(3584, -1219, -3800);
	  COL_VERTEX(4292, 0, -3800);
	  COL_VERTEX(4292, -511, -3800);
	  COL_VERTEX(3833, -760, -3800);
	  COL_VERTEX(3900, -511, -3800);
	  COL_VERTEX(3584, -827, -3800);
	  COL_VERTEX(3900, 0, -3800);
	  COL_VERTEX(3623, -511, -3523);
	  COL_VERTEX(3584, -550, -3523);
	  COL_VERTEX(3603, -530, -3523);
	  COL_VERTEX(3623, 0, -3523);
	  COL_VERTEX(-3839, -2559, -2303);
	  COL_VERTEX(2304, -2559, -2303);
	  COL_VERTEX(-3839, -511, 3840);
	  COL_VERTEX(-3839, -2559, 3840);
	  COL_VERTEX(-3839, -2559, -1791);
	  COL_VERTEX(2304, -2559, 3840);
	  COL_VERTEX(2304, -511, -2303);
	  COL_VERTEX(-3839, -511, -2303);
	  COL_VERTEX(-2047, -2559, 3712);
	  COL_VERTEX(-2175, -2559, 3712);
	  COL_VERTEX(-2303, -2559, 3840);
	  COL_VERTEX(-2559, -511, -1023);
	  COL_VERTEX(-2559, -511, 3840);
	  COL_VERTEX(768, 256, 3840);
	  COL_VERTEX(384, -2559, 3840);
	  COL_VERTEX(512, -2559, 3712);
	  COL_VERTEX(640, -2559, 3712);
	  COL_VERTEX(-3839, -2559, -1535);
	  COL_VERTEX(-3748, -2559, -1444);
	  COL_VERTEX(-3748, -2559, -1263);
	  COL_VERTEX(1536, -2457, -639);
	  COL_VERTEX(1536, -2559, -639);
	  COL_VERTEX(1792, -2559, -639);
	  COL_VERTEX(1792, -2457, -639);
	  COL_VERTEX(1536, -2457, -1919);
	  COL_VERTEX(1536, -2559, -1919);
	  COL_VERTEX(1792, -2457, -1919);
	  COL_VERTEX(1792, -2559, -1919);
	  COL_VERTEX(-895, -1151, 3456);
	  COL_VERTEX(-511, -1151, 3328);
	  COL_VERTEX(-1023, -1151, 3840);
	  COL_VERTEX(-1023, -2559, 2048);
	  COL_VERTEX(-1023, -2175, 2048);
	  COL_VERTEX(-1023, -2175, 2944);
	  COL_VERTEX(-511, -2175, 2048);
	  COL_VERTEX(-511, -1791, 2048);
	  COL_VERTEX(-511, -2175, 2944);
	  COL_VERTEX(-383, -1791, 3200);
	  COL_VERTEX(-1023, -1791, 2944);
	  COL_VERTEX(-383, -1343, 3200);
	  COL_VERTEX(-1535, -2559, 2304);
	  COL_VERTEX(-1279, -1791, 2048);
	  COL_VERTEX(-1535, -2559, 3840);
	  COL_VERTEX(-1151, -1791, 3200);
	  COL_VERTEX(0, -2559, 2304);
	  COL_VERTEX(-863, -1100, 3680);
	  COL_VERTEX(-671, -1100, 3488);
	  COL_VERTEX(-863, -895, 3680);
	  COL_VERTEX(-671, -895, 3488);
	  COL_VERTEX(-1151, -1343, 3200);
	  COL_VERTEX(-863, -1100, 3488);
	  COL_VERTEX(-863, -895, 3488);
	  COL_VERTEX(-692, -332, 3714);
	  COL_VERTEX(-842, -332, 3714);
	  COL_VERTEX(-1171, -409, 3200);
	  COL_VERTEX(-842, -409, 3714);
	  COL_VERTEX(-917, -332, 3584);
	  COL_VERTEX(-842, -332, 3454);
	  COL_VERTEX(-692, -332, 3454);
	  COL_VERTEX(-215, -409, 3584);
	  COL_VERTEX(-363, -332, 3200);
	  COL_VERTEX(-1171, -332, 3200);
	  COL_VERTEX(-1171, -409, 3840);
	  COL_VERTEX(-1319, -332, 3584);
	  COL_VERTEX(-215, -332, 3584);
	  COL_VERTEX(-617, -332, 3584);
	  COL_VERTEX(-363, -409, 3840);
	  COL_VERTEX(-363, -332, 3840);
	  COL_VERTEX(-1171, -332, 3840);
	  COL_VERTEX(-665, -306, 2278);
	  COL_VERTEX(-869, -306, 3379);
	  COL_VERTEX(-665, -306, 3379);
	  COL_VERTEX(-665, -332, 3379);
	  COL_VERTEX(-869, -306, 2278);
	  COL_VERTEX(-639, -2431, 896);
	  COL_VERTEX(-959, -2431, 960);
	  COL_VERTEX(-511, -2559, 1024);
	  COL_VERTEX(-1023, -2559, 1024);
	  COL_VERTEX(-895, -2431, 640);
	  COL_VERTEX(-895, -2431, 896);
	  COL_VERTEX(-575, -2431, 576);
	  COL_VERTEX(-639, -2431, 640);
	  COL_VERTEX(-1023, -2559, 512);
	  COL_VERTEX(-511, -2559, 512);
	  COL_VERTEX(1024, -1279, 0);
	  COL_VERTEX(1024, -2303, 1101);
	  COL_VERTEX(1024, -1279, 2048);
	  COL_VERTEX(1024, -2559, 0);
	  COL_VERTEX(1034, -2303, 947);
	  COL_VERTEX(1024, -2559, 947);
	  COL_VERTEX(1024, -2303, 947);
	  COL_VERTEX(1152, -1279, 0);
	  COL_VERTEX(1280, -1279, -127);
	  COL_VERTEX(1280, -1407, -127);
	  COL_VERTEX(1152, -1279, 2048);
	  COL_VERTEX(1280, -1279, 2176);
	  COL_VERTEX(2304, -1279, 2176);
	  COL_VERTEX(1280, -2559, -255);
	  COL_VERTEX(1280, -1279, -255);
	  COL_VERTEX(2304, -2559, 2304);
	  COL_VERTEX(1280, -2559, 2304);
	  COL_VERTEX(1280, -1279, 2304);
	  COL_VERTEX(2304, -1279, 2304);
	  COL_VERTEX(-511, -2559, -767);
	  COL_VERTEX(1024, -1791, -2303);
	  COL_VERTEX(205, -2303, -767);
	  COL_VERTEX(-511, -1791, -767);
	  COL_VERTEX(51, -2559, -767);
	  COL_VERTEX(51, -2303, -767);
	  COL_VERTEX(1024, -2559, -1023);
	  COL_VERTEX(51, -2559, -777);
	  COL_VERTEX(-767, -2559, -1023);
	  COL_VERTEX(1024, -2559, -2303);
	  COL_VERTEX(-2815, -2047, -767);
	  COL_VERTEX(-1279, -2559, -767);
	  COL_VERTEX(-1279, -2047, -1791);
	  COL_VERTEX(-1279, -2559, -1791);
	  COL_VERTEX(-2815, -2559, -1791);
	  COL_VERTEX(-2815, -2047, -1791);
	  COL_VERTEX(-2815, -2303, -1535);
	  COL_VERTEX(-2815, -2559, -1689);
	  COL_VERTEX(-2815, -2303, -1689);
	  COL_VERTEX(-767, -2559, -1791);
	  COL_VERTEX(-2805, -2559, -1689);
	  COL_VERTEX(-3327, -2559, 1024);
	  COL_VERTEX(-3839, -1151, 1024);
	  COL_VERTEX(-3839, -1151, 0);
	  COL_VERTEX(-3327, -1407, 1024);
	  COL_VERTEX(-3583, -1151, 0);
	  COL_VERTEX(-3660, -2303, 0);
	  COL_VERTEX(-3660, -2559, 0);
	  COL_VERTEX(-3327, -2559, 0);
	  COL_VERTEX(-3506, -2303, 0);
	  COL_VERTEX(-3506, -2559, 0);
	  COL_VERTEX(-3506, -2559, 10);
	  COL_VERTEX(-3839, -1023, 3328);
	  COL_VERTEX(-3071, -2559, 3328);
	  COL_VERTEX(-3071, -1279, 3328);
	  COL_VERTEX(-2887, -2303, 3144);
	  COL_VERTEX(-3839, -2559, 1792);
	  COL_VERTEX(-3071, -2559, 1792);
	  COL_VERTEX(-2815, -2559, 2048);
	  COL_VERTEX(-2895, -2303, 3137);
	  COL_VERTEX(-3003, -2303, 3246);
	  COL_VERTEX(-2895, -2559, 3137);
	  COL_VERTEX(-255, -332, 1280);
	  COL_VERTEX(-1279, -332, 2304);
	  COL_VERTEX(-255, -332, 2304);
	  COL_VERTEX(-255, -588, 2304);
	  COL_VERTEX(-1279, -332, 1280);
	  COL_VERTEX(2304, -2559, -1791);
	  COL_VERTEX(-1279, -2533, -1791);
	  COL_VERTEX(-767, -2533, -2047);
	  COL_VERTEX(-1279, -2508, -2047);
	  COL_VERTEX(1024, -511, -1023);
	  COL_VERTEX(-780, -665, 3571);
	  COL_VERTEX(1792, -1586, 3584);
	  COL_VERTEX(1792, -1586, 3840);
	  COL_VERTEX(1920, -1586, 3712);
	  COL_VERTEX(1920, -1586, 3840);
	  COL_VERTEX(1920, -1330, 3712);
	  COL_VERTEX(1792, -1842, 3584);
	  COL_VERTEX(2304, -1842, 3584);
	  COL_VERTEX(2048, -1586, 3584);
	  COL_VERTEX(1792, -2559, 3328);
	  COL_VERTEX(1792, -2559, 3840);
	  COL_VERTEX(2048, -1330, 3712);
	  COL_VERTEX(2048, -1125, 3840);
	  COL_VERTEX(-2815, -1496, -3523);
	  COL_VERTEX(-2815, -1496, -3131);
	  COL_VERTEX(4569, -511, -3523);
	  COL_VERTEX(-2815, -2559, -2303);
	  COL_VERTEX(2304, -511, 3840);
	  COL_VERTEX(1024, -2559, -1791);
	  COL_VERTEX(-1279, -2508, -2303);
	  COL_VERTEX(-1279, -2508, -1791);
	  COL_VERTEX(-2303, 256, -767);
	  COL_VERTEX(-2303, 256, 3840);
	  COL_VERTEX(-575, -2431, 960);
	  COL_VERTEX(-959, -2431, 576);
	  COL_VERTEX(-2047, 256, 3712);
	  COL_VERTEX(-1919, 256, 3840);
	  COL_VERTEX(-1919, -2559, 3840);
	  COL_VERTEX(1024, -1791, -1023);
	  COL_VERTEX(768, 256, -767);
	  COL_VERTEX(-2175, 256, 3712);
	  COL_VERTEX(512, 256, 3712);
	  COL_VERTEX(384, 256, 3840);
	  COL_VERTEX(640, 256, 3712);
	  COL_VERTEX(768, -2559, 3840);
	  COL_VERTEX(-3748, -511, -1444);
	  COL_VERTEX(-3748, -511, -1263);
	  COL_VERTEX(-3839, -511, -1173);
	  COL_VERTEX(-3839, -2559, -1173);
	  COL_VERTEX(1587, -2457, -690);
	  COL_VERTEX(1587, -2457, -1868);
	  COL_VERTEX(1741, -2457, -690);
	  COL_VERTEX(1741, -2457, -1868);
	  COL_VERTEX(-1023, -1151, 3328);
	  COL_VERTEX(-639, -1151, 3456);
	  COL_VERTEX(-639, -1151, 3712);
	  COL_VERTEX(-511, -1151, 3840);
	  COL_VERTEX(-895, -1151, 3712);
	  COL_VERTEX(-511, -2559, 2048);
	  COL_VERTEX(-1023, -1791, 2048);
	  COL_VERTEX(-511, -1791, 2944);
	  COL_VERTEX(-255, -1791, 2048);
	  COL_VERTEX(0, -1791, 2304);
	  COL_VERTEX(0, -1791, 3840);
	  COL_VERTEX(-383, -1791, 3840);
	  COL_VERTEX(-383, -1343, 3840);
	  COL_VERTEX(-1535, -1791, 2304);
	  COL_VERTEX(-1535, -1791, 3840);
	  COL_VERTEX(-1151, -1791, 3840);
	  COL_VERTEX(-1151, -1343, 3840);
	  COL_VERTEX(0, -2559, 3840);
	  COL_VERTEX(-671, -895, 3680);
	  COL_VERTEX(-671, -1100, 3680);
	  COL_VERTEX(-639, -895, 3712);
	  COL_VERTEX(-895, -895, 3712);
	  COL_VERTEX(-895, -895, 3456);
	  COL_VERTEX(-639, -895, 3456);
	  COL_VERTEX(-917, -409, 3584);
	  COL_VERTEX(-692, -409, 3714);
	  COL_VERTEX(-842, -409, 3454);
	  COL_VERTEX(-692, -409, 3454);
	  COL_VERTEX(-1319, -409, 3584);
	  COL_VERTEX(-363, -409, 3200);
	  COL_VERTEX(-617, -409, 3584);
	  COL_VERTEX(-665, -332, 2278);
	  COL_VERTEX(-869, -332, 3379);
	  COL_VERTEX(-869, -332, 2278);
	  COL_VERTEX(-767, -2175, 768);
	  COL_VERTEX(1024, -2559, 1101);
	  COL_VERTEX(1024, -2559, 2048);
	  COL_VERTEX(1152, -1407, 0);
	  COL_VERTEX(2304, -1407, -127);
	  COL_VERTEX(2304, -1279, -127);
	  COL_VERTEX(1034, -2559, 1101);
	  COL_VERTEX(1034, -2303, 1101);
	  COL_VERTEX(1034, -2559, 947);
	  COL_VERTEX(1152, -1407, 2048);
	  COL_VERTEX(1280, -1407, 2176);
	  COL_VERTEX(2304, -1407, 2176);
	  COL_VERTEX(2304, -1279, -255);
	  COL_VERTEX(2304, -2559, -255);
	  COL_VERTEX(-767, -1791, -1023);
	  COL_VERTEX(768, -1791, -767);
	  COL_VERTEX(51, -2303, -777);
	  COL_VERTEX(205, -2303, -777);
	  COL_VERTEX(205, -2559, -777);
	  COL_VERTEX(205, -2559, -767);
	  COL_VERTEX(768, -2559, -767);
	  COL_VERTEX(-767, -1791, -2303);
	  COL_VERTEX(-767, -2610, -2303);
	  COL_VERTEX(-1279, -2047, -767);
	  COL_VERTEX(-2815, -2559, -767);
	  COL_VERTEX(-2805, -2303, -1689);
	  COL_VERTEX(-2805, -2303, -1535);
	  COL_VERTEX(-2805, -2559, -1535);
	  COL_VERTEX(-2815, -2559, -1535);
	  COL_VERTEX(-767, -2533, -1791);
	  COL_VERTEX(-1279, -2533, -2047);
	  COL_VERTEX(-3327, -1407, 0);
	  COL_VERTEX(-3839, -2559, 1024);
	  COL_VERTEX(-3583, -1151, 1024);
	  COL_VERTEX(-3839, -2559, 0);
	  COL_VERTEX(-3660, -2559, 10);
	  COL_VERTEX(-3660, -2303, 10);
	  COL_VERTEX(-3506, -2303, 10);
	  COL_VERTEX(-3071, -1279, 1792);
	  COL_VERTEX(-3839, -2559, 3328);
	  COL_VERTEX(-3839, -1023, 1792);
	  COL_VERTEX(-2996, -2559, 3253);
	  COL_VERTEX(-2815, -1279, 3072);
	  COL_VERTEX(-2996, -2303, 3253);
	  COL_VERTEX(-2815, -1279, 2048);
	  COL_VERTEX(-2815, -2559, 3072);
	  COL_VERTEX(-2887, -2559, 3144);
	  COL_VERTEX(-3003, -2559, 3246);
	  COL_VERTEX(-255, -588, 1280);
	  COL_VERTEX(-1279, -588, 2304);
	  COL_VERTEX(-1279, -588, 1280);
	  COL_VERTEX(-767, -2508, -2047);
	  COL_VERTEX(-767, -2508, -2303);
	  COL_VERTEX(-780, -665, 3597);
	  COL_VERTEX(-754, -665, 3597);
	  COL_VERTEX(-754, -665, 3571);
	  COL_VERTEX(2048, -1586, 3712);
	  COL_VERTEX(2048, -1330, 3840);
	  COL_VERTEX(1920, -1330, 3840);
	  COL_VERTEX(1792, -1842, 3328);
	  COL_VERTEX(2304, -1842, 3328);
	  COL_VERTEX(2304, -1125, 3584);
	  COL_VERTEX(2048, -1125, 3584);
	  COL_VERTEX(2304, -2559, 3328);
	  COL_VERTEX(2304, -1125, 3840);
	  COL_TRI_INIT(SURFACE_DEFAULT, 558);
	  COL_TRI(49, 173, 45);
	  COL_TRI(49, 174, 173);
	  COL_TRI(45, 173, 175);
	  COL_TRI(176, 173, 174);
	  COL_TRI(173, 176, 177);
	  COL_TRI(173, 177, 175);
	  COL_TRI(178, 177, 176);
	  COL_TRI(179, 180, 177);
	  COL_TRI(181, 179, 177);
	  COL_TRI(175, 177, 182);
	  COL_TRI(178, 181, 177);
	  COL_TRI(177, 180, 182);
	  COL_TRI(46, 175, 182);
	  COL_TRI(45, 175, 46);
	  COL_TRI(183, 178, 176);
	  COL_TRI(183, 91, 178);
	  COL_TRI(178, 91, 79);
	  COL_TRI(178, 79, 181);
	  COL_TRI(181, 79, 76);
	  COL_TRI(181, 76, 179);
	  COL_TRI(180, 184, 185);
	  COL_TRI(182, 180, 185);
	  COL_TRI(52, 185, 188);
	  COL_TRI(46, 182, 50);
	  COL_TRI(50, 182, 185);
	  COL_TRI(179, 186, 180);
	  COL_TRI(179, 78, 186);
	  COL_TRI(179, 76, 78);
	  COL_TRI(186, 184, 180);
	  COL_TRI(187, 184, 186);
	  COL_TRI(188, 185, 184);
	  COL_TRI(188, 184, 187);
	  COL_TRI(50, 185, 52);
	  COL_TRI(189, 187, 186);
	  COL_TRI(186, 78, 82);
	  COL_TRI(186, 82, 189);
	  COL_TRI(190, 188, 187);
	  COL_TRI(190, 187, 189);
	  COL_TRI(190, 189, 191);
	  COL_TRI(189, 82, 88);
	  COL_TRI(189, 88, 191);
	  COL_TRI(54, 188, 394);
	  COL_TRI(52, 188, 54);
	  COL_TRI(190, 394, 188);
	  COL_TRI(190, 193, 395);
	  COL_TRI(190, 395, 394);
	  COL_TRI(190, 191, 193);
	  COL_TRI(183, 194, 193);
	  COL_TRI(54, 394, 56);
	  COL_TRI(56, 394, 395);
	  COL_TRI(191, 192, 193);
	  COL_TRI(191, 88, 89);
	  COL_TRI(191, 89, 192);
	  COL_TRI(192, 183, 193);
	  COL_TRI(192, 89, 90);
	  COL_TRI(192, 90, 183);
	  COL_TRI(193, 194, 174);
	  COL_TRI(193, 174, 395);
	  COL_TRI(197, 200, 198);
	  COL_TRI(59, 395, 174);
	  COL_TRI(56, 395, 59);
	  COL_TRI(59, 174, 49);
	  COL_TRI(176, 174, 194);
	  COL_TRI(183, 176, 194);
	  COL_TRI(183, 90, 91);
	  COL_TRI(195, 197, 198);
	  COL_TRI(196, 195, 198);
	  COL_TRI(203, 224, 222);
	  COL_TRI(198, 200, 201);
	  COL_TRI(199, 60, 200);
	  COL_TRI(200, 60, 61);
	  COL_TRI(200, 61, 201);
	  COL_TRI(197, 199, 200);
	  COL_TRI(201, 61, 63);
	  COL_TRI(201, 63, 223);
	  COL_TRI(198, 201, 202);
	  COL_TRI(202, 201, 223);
	  COL_TRI(198, 202, 203);
	  COL_TRI(202, 223, 224);
	  COL_TRI(203, 202, 224);
	  COL_TRI(204, 203, 205);
	  COL_TRI(205, 203, 222);
	  COL_TRI(204, 196, 203);
	  COL_TRI(196, 198, 203);
	  COL_TRI(206, 195, 196);
	  COL_TRI(206, 196, 204);
	  COL_TRI(207, 199, 197);
	  COL_TRI(208, 207, 197);
	  COL_TRI(209, 208, 197);
	  COL_TRI(209, 197, 195);
	  COL_TRI(199, 62, 60);
	  COL_TRI(207, 62, 199);
	  COL_TRI(210, 209, 195);
	  COL_TRI(210, 195, 206);
	  COL_TRI(207, 67, 62);
	  COL_TRI(211, 67, 207);
	  COL_TRI(212, 211, 207);
	  COL_TRI(212, 207, 208);
	  COL_TRI(209, 212, 208);
	  COL_TRI(213, 209, 210);
	  COL_TRI(213, 396, 209);
	  COL_TRI(209, 396, 212);
	  COL_TRI(214, 211, 212);
	  COL_TRI(214, 212, 396);
	  COL_TRI(215, 66, 211);
	  COL_TRI(211, 66, 67);
	  COL_TRI(214, 215, 211);
	  COL_TRI(216, 217, 396);
	  COL_TRI(216, 396, 213);
	  COL_TRI(217, 214, 396);
	  COL_TRI(218, 215, 214);
	  COL_TRI(219, 218, 214);
	  COL_TRI(219, 214, 217);
	  COL_TRI(215, 65, 66);
	  COL_TRI(220, 65, 215);
	  COL_TRI(218, 220, 215);
	  COL_TRI(223, 63, 64);
	  COL_TRI(221, 217, 216);
	  COL_TRI(221, 219, 217);
	  COL_TRI(222, 218, 219);
	  COL_TRI(223, 220, 218);
	  COL_TRI(224, 223, 218);
	  COL_TRI(222, 224, 218);
	  COL_TRI(223, 64, 220);
	  COL_TRI(220, 64, 65);
	  COL_TRI(225, 222, 219);
	  COL_TRI(225, 219, 221);
	  COL_TRI(205, 222, 225);
	  COL_TRI(226, 230, 343);
	  COL_TRI(226, 343, 397);
	  COL_TRI(226, 132, 81);
	  COL_TRI(226, 81, 243);
	  COL_TRI(85, 132, 226);
	  COL_TRI(227, 85, 226);
	  COL_TRI(80, 229, 243);
	  COL_TRI(80, 228, 229);
	  COL_TRI(228, 233, 237);
	  COL_TRI(228, 237, 238);
	  COL_TRI(229, 228, 398);
	  COL_TRI(230, 229, 303);
	  COL_TRI(229, 231, 302);
	  COL_TRI(229, 302, 303);
	  COL_TRI(229, 398, 231);
	  COL_TRI(231, 376, 309);
	  COL_TRI(231, 309, 302);
	  COL_TRI(231, 398, 232);
	  COL_TRI(231, 232, 227);
	  COL_TRI(234, 407, 408);
	  COL_TRI(232, 398, 164);
	  COL_TRI(232, 164, 380);
	  COL_TRI(233, 232, 380);
	  COL_TRI(85, 232, 83);
	  COL_TRI(227, 232, 85);
	  COL_TRI(227, 338, 399);
	  COL_TRI(227, 399, 376);
	  COL_TRI(234, 406, 407);
	  COL_TRI(235, 411, 406);
	  COL_TRI(235, 406, 234);
	  COL_TRI(236, 403, 411);
	  COL_TRI(236, 411, 235);
	  COL_TRI(237, 402, 403);
	  COL_TRI(237, 403, 238);
	  COL_TRI(238, 403, 239);
	  COL_TRI(239, 403, 402);
	  COL_TRI(240, 412, 241);
	  COL_TRI(240, 413, 412);
	  COL_TRI(243, 416, 244);
	  COL_TRI(241, 412, 414);
	  COL_TRI(241, 414, 242);
	  COL_TRI(242, 414, 239);
	  COL_TRI(242, 239, 415);
	  COL_TRI(238, 239, 164);
	  COL_TRI(239, 402, 410);
	  COL_TRI(164, 239, 410);
	  COL_TRI(243, 80, 416);
	  COL_TRI(244, 416, 417);
	  COL_TRI(244, 417, 245);
	  COL_TRI(245, 417, 418);
	  COL_TRI(245, 418, 419);
	  COL_TRI(246, 420, 421);
	  COL_TRI(246, 421, 250);
	  COL_TRI(247, 246, 250);
	  COL_TRI(248, 246, 247);
	  COL_TRI(249, 420, 246);
	  COL_TRI(248, 249, 246);
	  COL_TRI(249, 422, 420);
	  COL_TRI(250, 421, 423);
	  COL_TRI(250, 423, 252);
	  COL_TRI(251, 250, 252);
	  COL_TRI(247, 250, 251);
	  COL_TRI(252, 423, 422);
	  COL_TRI(253, 252, 249);
	  COL_TRI(252, 422, 249);
	  COL_TRI(251, 252, 253);
	  COL_TRI(253, 249, 248);
	  COL_TRI(254, 255, 424);
	  COL_TRI(254, 425, 255);
	  COL_TRI(125, 430, 257);
	  COL_TRI(255, 425, 426);
	  COL_TRI(256, 426, 428);
	  COL_TRI(255, 426, 427);
	  COL_TRI(256, 427, 426);
	  COL_TRI(256, 428, 254);
	  COL_TRI(254, 424, 256);
	  COL_TRI(257, 258, 260);
	  COL_TRI(257, 260, 429);
	  COL_TRI(258, 430, 264);
	  COL_TRI(258, 264, 259);
	  COL_TRI(259, 260, 258);
	  COL_TRI(260, 431, 261);
	  COL_TRI(260, 262, 431);
	  COL_TRI(259, 262, 260);
	  COL_TRI(261, 146, 429);
	  COL_TRI(262, 259, 264);
	  COL_TRI(262, 264, 431);
	  COL_TRI(263, 261, 431);
	  COL_TRI(263, 432, 261);
	  COL_TRI(261, 432, 146);
	  COL_TRI(264, 430, 267);
	  COL_TRI(125, 267, 430);
	  COL_TRI(5, 4, 8);
	  COL_TRI(5, 0, 4);
	  COL_TRI(265, 4, 11);
	  COL_TRI(265, 263, 4);
	  COL_TRI(8, 269, 275);
	  COL_TRI(7, 8, 275);
	  COL_TRI(264, 267, 269);
	  COL_TRI(264, 269, 263);
	  COL_TRI(263, 435, 434);
	  COL_TRI(266, 267, 125);
	  COL_TRI(267, 437, 438);
	  COL_TRI(267, 438, 439);
	  COL_TRI(267, 439, 269);
	  COL_TRI(266, 437, 267);
	  COL_TRI(268, 438, 437);
	  COL_TRI(268, 437, 266);
	  COL_TRI(269, 440, 275);
	  COL_TRI(263, 433, 432);
	  COL_TRI(263, 434, 433);
	  COL_TRI(263, 431, 264);
	  COL_TRI(263, 436, 435);
	  COL_TRI(270, 434, 441);
	  COL_TRI(270, 433, 434);
	  COL_TRI(146, 432, 433);
	  COL_TRI(146, 433, 270);
	  COL_TRI(271, 442, 273);
	  COL_TRI(271, 443, 442);
	  COL_TRI(272, 442, 443);
	  COL_TRI(273, 442, 444);
	  COL_TRI(272, 274, 442);
	  COL_TRI(274, 444, 442);
	  COL_TRI(273, 444, 445);
	  COL_TRI(271, 273, 277);
	  COL_TRI(273, 445, 446);
	  COL_TRI(273, 446, 277);
	  COL_TRI(274, 447, 444);
	  COL_TRI(263, 265, 436);
	  COL_TRI(277, 447, 274);
	  COL_TRI(277, 446, 447);
	  COL_TRI(276, 277, 274);
	  COL_TRI(275, 265, 9);
	  COL_TRI(265, 11, 10);
	  COL_TRI(275, 9, 7);
	  COL_TRI(265, 10, 9);
	  COL_TRI(269, 439, 440);
	  COL_TRI(276, 274, 272);
	  COL_TRI(282, 448, 450);
	  COL_TRI(271, 277, 276);
	  COL_TRI(278, 281, 279);
	  COL_TRI(279, 281, 448);
	  COL_TRI(279, 448, 282);
	  COL_TRI(280, 448, 281);
	  COL_TRI(278, 449, 281);
	  COL_TRI(281, 292, 288);
	  COL_TRI(281, 288, 280);
	  COL_TRI(281, 449, 292);
	  COL_TRI(280, 450, 448);
	  COL_TRI(282, 450, 283);
	  COL_TRI(280, 451, 450);
	  COL_TRI(283, 450, 451);
	  COL_TRI(283, 451, 284);
	  COL_TRI(280, 285, 451);
	  COL_TRI(284, 451, 454);
	  COL_TRI(285, 454, 451);
	  COL_TRI(284, 454, 291);
	  COL_TRI(286, 280, 287);
	  COL_TRI(287, 280, 452);
	  COL_TRI(287, 452, 289);
	  COL_TRI(291, 454, 285);
	  COL_TRI(293, 285, 290);
	  COL_TRI(286, 453, 280);
	  COL_TRI(288, 452, 280);
	  COL_TRI(280, 453, 285);
	  COL_TRI(289, 452, 288);
	  COL_TRI(289, 288, 294);
	  COL_TRI(290, 453, 286);
	  COL_TRI(290, 285, 453);
	  COL_TRI(291, 285, 290);
	  COL_TRI(292, 449, 454);
	  COL_TRI(292, 454, 285);
	  COL_TRI(293, 292, 285);
	  COL_TRI(291, 454, 449);
	  COL_TRI(294, 282, 283);
	  COL_TRI(291, 449, 278);
	  COL_TRI(287, 289, 294);
	  COL_TRI(284, 286, 287);
	  COL_TRI(287, 294, 283);
	  COL_TRI(287, 283, 284);
	  COL_TRI(294, 293, 278);
	  COL_TRI(294, 278, 279);
	  COL_TRI(294, 279, 282);
	  COL_TRI(296, 298, 297);
	  COL_TRI(284, 290, 286);
	  COL_TRI(284, 291, 290);
	  COL_TRI(290, 291, 278);
	  COL_TRI(290, 278, 293);
	  COL_TRI(295, 299, 296);
	  COL_TRI(295, 296, 297);
	  COL_TRI(297, 298, 455);
	  COL_TRI(298, 456, 457);
	  COL_TRI(298, 457, 455);
	  COL_TRI(296, 456, 298);
	  COL_TRI(295, 455, 457);
	  COL_TRI(297, 455, 295);
	  COL_TRI(295, 457, 299);
	  COL_TRI(299, 456, 296);
	  COL_TRI(299, 457, 456);
	  COL_TRI(300, 305, 301);
	  COL_TRI(300, 301, 404);
	  COL_TRI(301, 305, 304);
	  COL_TRI(301, 304, 405);
	  COL_TRI(302, 404, 301);
	  COL_TRI(302, 301, 303);
	  COL_TRI(304, 305, 458);
	  COL_TRI(305, 300, 458);
	  COL_TRI(306, 304, 307);
	  COL_TRI(306, 405, 304);
	  COL_TRI(307, 304, 458);
	  COL_TRI(303, 405, 308);
	  COL_TRI(303, 301, 405);
	  COL_TRI(308, 405, 306);
	  COL_TRI(306, 307, 300);
	  COL_TRI(300, 404, 306);
	  COL_TRI(309, 306, 404);
	  COL_TRI(308, 306, 309);
	  COL_TRI(300, 307, 458);
	  COL_TRI(309, 404, 302);
	  COL_TRI(313, 310, 324);
	  COL_TRI(230, 303, 308);
	  COL_TRI(310, 316, 311);
	  COL_TRI(310, 313, 315);
	  COL_TRI(310, 315, 316);
	  COL_TRI(311, 312, 310);
	  COL_TRI(312, 317, 310);
	  COL_TRI(310, 318, 324);
	  COL_TRI(310, 317, 318);
	  COL_TRI(316, 314, 465);
	  COL_TRI(311, 459, 460);
	  COL_TRI(311, 460, 312);
	  COL_TRI(314, 464, 465);
	  COL_TRI(314, 466, 464);
	  COL_TRI(315, 314, 316);
	  COL_TRI(315, 466, 314);
	  COL_TRI(316, 465, 311);
	  COL_TRI(311, 465, 464);
	  COL_TRI(311, 464, 459);
	  COL_TRI(317, 319, 318);
	  COL_TRI(317, 461, 319);
	  COL_TRI(318, 319, 462);
	  COL_TRI(319, 467, 468);
	  COL_TRI(319, 468, 469);
	  COL_TRI(319, 469, 462);
	  COL_TRI(319, 461, 467);
	  COL_TRI(324, 463, 470);
	  COL_TRI(320, 467, 461);
	  COL_TRI(320, 461, 317);
	  COL_TRI(321, 468, 467);
	  COL_TRI(321, 467, 320);
	  COL_TRI(322, 468, 321);
	  COL_TRI(322, 469, 468);
	  COL_TRI(318, 462, 463);
	  COL_TRI(323, 324, 470);
	  COL_TRI(323, 470, 471);
	  COL_TRI(324, 318, 463);
	  COL_TRI(313, 324, 323);
	  COL_TRI(325, 327, 326);
	  COL_TRI(326, 327, 312);
	  COL_TRI(326, 312, 460);
	  COL_TRI(327, 321, 320);
	  COL_TRI(327, 320, 312);
	  COL_TRI(328, 321, 327);
	  COL_TRI(325, 328, 327);
	  COL_TRI(312, 320, 317);
	  COL_TRI(328, 322, 321);
	  COL_TRI(329, 332, 472);
	  COL_TRI(330, 472, 332);
	  COL_TRI(330, 332, 473);
	  COL_TRI(331, 473, 332);
	  COL_TRI(332, 329, 333);
	  COL_TRI(332, 333, 334);
	  COL_TRI(332, 334, 331);
	  COL_TRI(329, 472, 337);
	  COL_TRI(333, 474, 334);
	  COL_TRI(333, 336, 474);
	  COL_TRI(334, 474, 475);
	  COL_TRI(334, 475, 331);
	  COL_TRI(331, 476, 477);
	  COL_TRI(331, 475, 476);
	  COL_TRI(331, 478, 473);
	  COL_TRI(331, 477, 478);
	  COL_TRI(336, 475, 474);
	  COL_TRI(336, 476, 475);
	  COL_TRI(339, 169, 172);
	  COL_TRI(335, 473, 478);
	  COL_TRI(335, 409, 473);
	  COL_TRI(330, 473, 409);
	  COL_TRI(337, 479, 480);
	  COL_TRI(337, 472, 479);
	  COL_TRI(330, 479, 472);
	  COL_TRI(338, 409, 335);
	  COL_TRI(338, 330, 409);
	  COL_TRI(339, 481, 167);
	  COL_TRI(339, 167, 169);
	  COL_TRI(339, 172, 344);
	  COL_TRI(341, 167, 481);
	  COL_TRI(340, 481, 339);
	  COL_TRI(342, 341, 481);
	  COL_TRI(342, 481, 340);
	  COL_TRI(341, 170, 167);
	  COL_TRI(170, 341, 344);
	  COL_TRI(170, 344, 172);
	  COL_TRI(343, 341, 342);
	  COL_TRI(343, 344, 341);
	  COL_TRI(344, 343, 346);
	  COL_TRI(344, 346, 347);
	  COL_TRI(344, 347, 345);
	  COL_TRI(345, 339, 344);
	  COL_TRI(346, 483, 347);
	  COL_TRI(347, 483, 484);
	  COL_TRI(347, 484, 345);
	  COL_TRI(345, 485, 486);
	  COL_TRI(345, 484, 485);
	  COL_TRI(345, 486, 482);
	  COL_TRI(345, 482, 339);
	  COL_TRI(348, 377, 342);
	  COL_TRI(350, 489, 353);
	  COL_TRI(340, 339, 482);
	  COL_TRI(343, 400, 397);
	  COL_TRI(343, 401, 400);
	  COL_TRI(349, 484, 483);
	  COL_TRI(346, 349, 483);
	  COL_TRI(349, 485, 484);
	  COL_TRI(356, 492, 352);
	  COL_TRI(350, 357, 489);
	  COL_TRI(352, 489, 357);
	  COL_TRI(353, 489, 354);
	  COL_TRI(352, 354, 489);
	  COL_TRI(353, 354, 491);
	  COL_TRI(351, 350, 353);
	  COL_TRI(351, 353, 491);
	  COL_TRI(354, 352, 351);
	  COL_TRI(354, 351, 491);
	  COL_TRI(355, 356, 352);
	  COL_TRI(352, 357, 358);
	  COL_TRI(352, 358, 355);
	  COL_TRI(358, 495, 494);
	  COL_TRI(351, 490, 350);
	  COL_TRI(357, 359, 358);
	  COL_TRI(355, 493, 356);
	  COL_TRI(355, 494, 493);
	  COL_TRI(358, 494, 355);
	  COL_TRI(359, 495, 358);
	  COL_TRI(363, 501, 364);
	  COL_TRI(359, 360, 495);
	  COL_TRI(360, 494, 495);
	  COL_TRI(360, 493, 494);
	  COL_TRI(361, 363, 496);
	  COL_TRI(362, 361, 497);
	  COL_TRI(361, 496, 498);
	  COL_TRI(362, 363, 361);
	  COL_TRI(363, 362, 499);
	  COL_TRI(364, 500, 363);
	  COL_TRI(363, 499, 501);
	  COL_TRI(368, 364, 501);
	  COL_TRI(365, 496, 366);
	  COL_TRI(365, 498, 496);
	  COL_TRI(366, 496, 502);
	  COL_TRI(363, 502, 496);
	  COL_TRI(364, 503, 500);
	  COL_TRI(367, 502, 500);
	  COL_TRI(367, 500, 503);
	  COL_TRI(363, 500, 502);
	  COL_TRI(366, 502, 367);
	  COL_TRI(364, 504, 503);
	  COL_TRI(368, 501, 369);
	  COL_TRI(369, 501, 499);
	  COL_TRI(371, 372, 373);
	  COL_TRI(369, 499, 505);
	  COL_TRI(368, 505, 370);
	  COL_TRI(368, 369, 505);
	  COL_TRI(370, 504, 364);
	  COL_TRI(370, 364, 368);
	  COL_TRI(371, 375, 372);
	  COL_TRI(377, 487, 378);
	  COL_TRI(372, 374, 373);
	  COL_TRI(373, 374, 506);
	  COL_TRI(373, 506, 371);
	  COL_TRI(374, 507, 508);
	  COL_TRI(374, 508, 506);
	  COL_TRI(372, 507, 374);
	  COL_TRI(371, 506, 508);
	  COL_TRI(371, 508, 375);
	  COL_TRI(375, 507, 372);
	  COL_TRI(375, 508, 507);
	  COL_TRI(376, 308, 309);
	  COL_TRI(376, 230, 308);
	  COL_TRI(348, 487, 377);
	  COL_TRI(377, 378, 488);
	  COL_TRI(377, 488, 379);
	  COL_TRI(378, 379, 488);
	  COL_TRI(379, 510, 400);
	  COL_TRI(378, 509, 379);
	  COL_TRI(379, 509, 510);
	  COL_TRI(377, 379, 401);
	  COL_TRI(380, 402, 237);
	  COL_TRI(233, 380, 237);
	  COL_TRI(385, 386, 384);
	  COL_TRI(380, 410, 402);
	  COL_TRI(164, 410, 380);
	  COL_TRI(381, 511, 512);
	  COL_TRI(381, 512, 513);
	  COL_TRI(382, 384, 389);
	  COL_TRI(383, 385, 384);
	  COL_TRI(382, 383, 384);
	  COL_TRI(384, 514, 389);
	  COL_TRI(387, 389, 388);
	  COL_TRI(386, 515, 392);
	  COL_TRI(386, 516, 515);
	  COL_TRI(384, 386, 392);
	  COL_TRI(385, 516, 386);
	  COL_TRI(384, 392, 514);
	  COL_TRI(387, 382, 389);
	  COL_TRI(388, 517, 387);
	  COL_TRI(388, 518, 517);
	  COL_TRI(390, 518, 521);
	  COL_TRI(390, 517, 518);
	  COL_TRI(387, 517, 390);
	  COL_TRI(383, 387, 390);
	  COL_TRI(391, 383, 390);
	  COL_TRI(383, 382, 387);
	  COL_TRI(392, 515, 393);
	  COL_TRI(392, 393, 520);
	  COL_TRI(393, 522, 519);
	  COL_TRI(393, 519, 520);
	  COL_TRI(389, 520, 519);
	  COL_TRI(389, 519, 388);
	  COL_TRI(392, 520, 389);
	  COL_TRI(392, 389, 514);
	  COL_TRI_INIT(SURFACE_VERY_SLIPPERY, 6);
	  COL_TRI(167, 168, 169);
	  COL_TRI(170, 171, 167);
	  COL_TRI(167, 171, 168);
	  COL_TRI(171, 172, 168);
	  COL_TRI(171, 170, 172);
	  COL_TRI(169, 168, 172);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 22);
	  COL_TRI(425, 443, 426);
	  COL_TRI(445, 512, 511);
	  COL_TRI(445, 444, 512);
	  COL_TRI(446, 445, 511);
	  COL_TRI(444, 447, 513);
	  COL_TRI(444, 513, 512);
	  COL_TRI(446, 511, 381);
	  COL_TRI(447, 446, 381);
	  COL_TRI(447, 381, 513);
	  COL_TRI(426, 271, 428);
	  COL_TRI(426, 443, 271);
	  COL_TRI(254, 276, 272);
	  COL_TRI(425, 272, 443);
	  COL_TRI(428, 271, 276);
	  COL_TRI(428, 276, 254);
	  COL_TRI(265, 427, 436);
	  COL_TRI(265, 255, 427);
	  COL_TRI(275, 255, 265);
	  COL_TRI(275, 424, 255);
	  COL_TRI(254, 272, 425);
	  COL_TRI(440, 424, 275);
	  COL_TRI(440, 256, 424);
	  COL_TRI_INIT(SURFACE_INSTANT_WARP_1B, 16);
	  COL_TRI(65, 55, 57);
	  COL_TRI(60, 48, 61);
	  COL_TRI(62, 44, 60);
	  COL_TRI(60, 44, 48);
	  COL_TRI(62, 47, 44);
	  COL_TRI(61, 48, 51);
	  COL_TRI(61, 51, 63);
	  COL_TRI(64, 53, 55);
	  COL_TRI(63, 53, 64);
	  COL_TRI(64, 55, 65);
	  COL_TRI(63, 51, 53);
	  COL_TRI(66, 57, 58);
	  COL_TRI(65, 57, 66);
	  COL_TRI(67, 47, 62);
	  COL_TRI(67, 58, 47);
	  COL_TRI(66, 58, 67);
	  COL_TRI_INIT(SURFACE_INSTANT_WARP_1C, 16);
	  COL_TRI(55, 54, 56);
	  COL_TRI(44, 45, 46);
	  COL_TRI(47, 45, 44);
	  COL_TRI(44, 46, 48);
	  COL_TRI(47, 49, 45);
	  COL_TRI(48, 46, 50);
	  COL_TRI(48, 50, 51);
	  COL_TRI(51, 52, 53);
	  COL_TRI(53, 54, 55);
	  COL_TRI(53, 52, 54);
	  COL_TRI(51, 50, 52);
	  COL_TRI(57, 56, 59);
	  COL_TRI(55, 56, 57);
	  COL_TRI(58, 49, 47);
	  COL_TRI(58, 59, 49);
	  COL_TRI(57, 59, 58);
	  COL_TRI_INIT(SURFACE_WALL_MISC, 14);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(4, 0, 3);
	  COL_TRI(0, 5, 6);
	  COL_TRI(0, 6, 1);
	  COL_TRI(7, 5, 8);
	  COL_TRI(7, 6, 5);
	  COL_TRI(9, 6, 7);
	  COL_TRI(9, 1, 6);
	  COL_TRI(10, 2, 1);
	  COL_TRI(10, 1, 9);
	  COL_TRI(11, 2, 10);
	  COL_TRI(11, 3, 2);
	  COL_TRI(4, 3, 11);
	  COL_TRI_INIT(SURFACE_NOISE_DEFAULT, 4);
	  COL_TRI(68, 69, 70);
	  COL_TRI(68, 71, 69);
	  COL_TRI(72, 73, 74);
	  COL_TRI(72, 75, 73);
	  COL_TRI_INIT(SURFACE_NO_CAM_COLLISION, 28);
	  COL_TRI(12, 13, 14);
	  COL_TRI(12, 15, 13);
	  COL_TRI(12, 16, 15);
	  COL_TRI(12, 17, 16);
	  COL_TRI(12, 18, 17);
	  COL_TRI(14, 19, 12);
	  COL_TRI(20, 21, 22);
	  COL_TRI(20, 23, 24);
	  COL_TRI(20, 22, 25);
	  COL_TRI(20, 24, 26);
	  COL_TRI(29, 38, 39);
	  COL_TRI(20, 26, 27);
	  COL_TRI(20, 27, 21);
	  COL_TRI(28, 32, 33);
	  COL_TRI(28, 34, 32);
	  COL_TRI(28, 29, 35);
	  COL_TRI(28, 33, 29);
	  COL_TRI(28, 36, 34);
	  COL_TRI(28, 37, 36);
	  COL_TRI(24, 12, 19);
	  COL_TRI(29, 39, 35);
	  COL_TRI(30, 40, 31);
	  COL_TRI(31, 41, 30);
	  COL_TRI(30, 42, 43);
	  COL_TRI(30, 43, 40);
	  COL_TRI(30, 38, 42);
	  COL_TRI(30, 39, 38);
	  COL_TRI(24, 19, 26);
	  COL_TRI_INIT(SURFACE_VANISH_CAP_WALLS, 118);
	  COL_TRI(83, 86, 84);
	  COL_TRI(76, 77, 28);
	  COL_TRI(76, 28, 78);
	  COL_TRI(79, 77, 76);
	  COL_TRI(28, 77, 80);
	  COL_TRI(81, 28, 80);
	  COL_TRI(78, 37, 82);
	  COL_TRI(78, 28, 37);
	  COL_TRI(83, 84, 85);
	  COL_TRI(86, 80, 77);
	  COL_TRI(86, 77, 87);
	  COL_TRI(84, 86, 32);
	  COL_TRI(86, 33, 32);
	  COL_TRI(86, 87, 33);
	  COL_TRI(85, 84, 81);
	  COL_TRI(36, 81, 84);
	  COL_TRI(84, 34, 36);
	  COL_TRI(84, 32, 34);
	  COL_TRI(85, 81, 132);
	  COL_TRI(36, 37, 81);
	  COL_TRI(37, 28, 81);
	  COL_TRI(79, 87, 77);
	  COL_TRI(82, 37, 36);
	  COL_TRI(82, 36, 88);
	  COL_TRI(88, 36, 34);
	  COL_TRI(88, 34, 89);
	  COL_TRI(89, 34, 32);
	  COL_TRI(89, 32, 90);
	  COL_TRI(90, 32, 33);
	  COL_TRI(90, 33, 91);
	  COL_TRI(91, 33, 87);
	  COL_TRI(91, 87, 79);
	  COL_TRI(92, 133, 134);
	  COL_TRI(92, 134, 135);
	  COL_TRI(93, 133, 92);
	  COL_TRI(93, 92, 136);
	  COL_TRI(94, 135, 134);
	  COL_TRI(94, 134, 137);
	  COL_TRI(94, 137, 93);
	  COL_TRI(93, 136, 94);
	  COL_TRI(95, 136, 92);
	  COL_TRI(95, 92, 138);
	  COL_TRI(96, 139, 140);
	  COL_TRI(97, 96, 140);
	  COL_TRI(96, 141, 139);
	  COL_TRI(98, 141, 96);
	  COL_TRI(100, 141, 98);
	  COL_TRI(100, 139, 141);
	  COL_TRI(101, 140, 139);
	  COL_TRI(101, 139, 100);
	  COL_TRI(102, 97, 140);
	  COL_TRI(102, 140, 142);
	  COL_TRI(103, 140, 101);
	  COL_TRI(103, 142, 140);
	  COL_TRI(99, 97, 104);
	  COL_TRI(99, 96, 97);
	  COL_TRI(104, 97, 102);
	  COL_TRI(98, 96, 99);
	  COL_TRI(110, 107, 145);
	  COL_TRI(105, 102, 142);
	  COL_TRI(104, 102, 106);
	  COL_TRI(106, 102, 105);
	  COL_TRI(107, 105, 142);
	  COL_TRI(107, 142, 143);
	  COL_TRI(108, 143, 142);
	  COL_TRI(108, 142, 103);
	  COL_TRI(106, 105, 109);
	  COL_TRI(109, 105, 107);
	  COL_TRI(107, 143, 144);
	  COL_TRI(107, 144, 145);
	  COL_TRI(109, 107, 110);
	  COL_TRI(111, 143, 108);
	  COL_TRI(111, 144, 143);
	  COL_TRI(110, 145, 146);
	  COL_TRI(112, 113, 147);
	  COL_TRI(113, 148, 147);
	  COL_TRI(113, 149, 150);
	  COL_TRI(113, 150, 148);
	  COL_TRI(114, 113, 112);
	  COL_TRI(115, 149, 113);
	  COL_TRI(115, 113, 114);
	  COL_TRI(114, 112, 121);
	  COL_TRI(116, 149, 115);
	  COL_TRI(116, 150, 149);
	  COL_TRI(117, 148, 150);
	  COL_TRI(117, 150, 116);
	  COL_TRI(118, 148, 117);
	  COL_TRI(118, 147, 148);
	  COL_TRI(112, 147, 151);
	  COL_TRI(119, 147, 118);
	  COL_TRI(119, 151, 147);
	  COL_TRI(112, 151, 152);
	  COL_TRI(120, 112, 152);
	  COL_TRI(121, 112, 120);
	  COL_TRI(122, 151, 119);
	  COL_TRI(122, 152, 151);
	  COL_TRI(120, 152, 153);
	  COL_TRI(123, 153, 152);
	  COL_TRI(123, 152, 122);
	  COL_TRI(120, 153, 154);
	  COL_TRI(121, 120, 124);
	  COL_TRI(124, 120, 155);
	  COL_TRI(120, 154, 155);
	  COL_TRI(125, 153, 123);
	  COL_TRI(125, 154, 153);
	  COL_TRI(124, 155, 156);
	  COL_TRI(130, 163, 131);
	  COL_TRI(126, 157, 127);
	  COL_TRI(126, 158, 157);
	  COL_TRI(127, 157, 159);
	  COL_TRI(127, 159, 128);
	  COL_TRI(128, 159, 160);
	  COL_TRI(128, 160, 161);
	  COL_TRI(129, 162, 130);
	  COL_TRI(130, 162, 163);
	  COL_TRI(131, 165, 166);
	  COL_TRI(129, 164, 162);
	  COL_TRI(131, 163, 165);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(2);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree, /*pos*/ 1664, -2457,  -946);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree, /*pos*/ 1664, -2457, -1637);
	  COL_WATER_BOX_INIT(1);
	  COL_WATER_BOX(0, -3839, -3839, 4608, 4608, -127);
	  COL_END();
	}

	function wdw_seg7_collision_arrow_lift() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(63, 127, -60);
	  COL_VERTEX(-64, 127, 67);
	  COL_VERTEX(63, 127, 67);
	  COL_VERTEX(63, 0, 67);
	  COL_VERTEX(63, 0, -60);
	  COL_VERTEX(-64, 0, 67);
	  COL_VERTEX(-64, 0, -60);
	  COL_VERTEX(-64, 127, -60);
	  COL_TRI_INIT(SURFACE_DEFAULT, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(2, 3, 4);
	  COL_TRI(2, 4, 0);
	  COL_TRI(1, 3, 2);
	  COL_TRI(3, 5, 6);
	  COL_TRI(3, 6, 4);
	  COL_TRI(1, 5, 3);
	  COL_TRI(0, 4, 6);
	  COL_TRI(0, 6, 7);
	  COL_TRI(0, 7, 1);
	  COL_TRI(7, 5, 1);
	  COL_TRI(7, 6, 5);
	  COL_TRI_STOP();
	  COL_END();
	}

	function wdw_seg7_collision_express_elevator_platform() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(512, 0, -64);
	  COL_VERTEX(-357, 0, -64);
	  COL_VERTEX(-357, 51, -64);
	  COL_VERTEX(512, 51, -64);
	  COL_VERTEX(512, 0, 384);
	  COL_VERTEX(-357, 0, 384);
	  COL_VERTEX(512, 51, 384);
	  COL_VERTEX(-357, 51, 384);
	  COL_TRI_INIT(SURFACE_DEFAULT, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(0, 4, 5);
	  COL_TRI(0, 5, 1);
	  COL_TRI(6, 4, 0);
	  COL_TRI(6, 0, 3);
	  COL_TRI(5, 4, 6);
	  COL_TRI(5, 6, 7);
	  COL_TRI(1, 5, 7);
	  COL_TRI(1, 7, 2);
	  COL_TRI(2, 7, 6);
	  COL_TRI(2, 6, 3);
	  COL_TRI_STOP();
	  COL_END();
	}

	function wdw_seg7_collision_07018528() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(193, 128, -190);
	  COL_VERTEX(-190, 128, -190);
	  COL_VERTEX(-190, 128, 193);
	  COL_VERTEX(193, 128, 193);
	  COL_VERTEX(193, 0, -190);
	  COL_VERTEX(-190, 0, -190);
	  COL_VERTEX(193, 0, 193);
	  COL_VERTEX(-190, 0, 193);
	  COL_TRI_INIT(SURFACE_DEFAULT, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(0, 4, 5);
	  COL_TRI(0, 5, 1);
	  COL_TRI(3, 4, 0);
	  COL_TRI(6, 5, 4);
	  COL_TRI(3, 6, 4);
	  COL_TRI(6, 7, 5);
	  COL_TRI(1, 5, 7);
	  COL_TRI(1, 7, 2);
	  COL_TRI(2, 6, 3);
	  COL_TRI(2, 7, 6);
	  COL_TRI_STOP();
	  COL_END();
	}

	function wdw_seg7_collision_rect_floating_platform() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(256, -63, 640);
	  COL_VERTEX(-255, -63, 640);
	  COL_VERTEX(-255, -63, -639);
	  COL_VERTEX(256, -63, -639);
	  COL_VERTEX(256, 64, 640);
	  COL_VERTEX(-255, 64, 640);
	  COL_VERTEX(-255, 64, -639);
	  COL_VERTEX(256, 64, -639);
	  COL_TRI_INIT(SURFACE_DEFAULT, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(0, 4, 5);
	  COL_TRI(0, 5, 1);
	  COL_TRI(3, 4, 0);
	  COL_TRI(1, 5, 6);
	  COL_TRI(1, 6, 2);
	  COL_TRI(2, 6, 7);
	  COL_TRI(2, 7, 3);
	  COL_TRI(3, 7, 4);
	  COL_TRI(7, 5, 4);
	  COL_TRI(7, 6, 5);
	  COL_TRI_STOP();
	  COL_END();
	}

	function wdw_seg7_collision_070186B4() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x7);
	  COL_VERTEX(0, 0, 0);
	  COL_VERTEX(0, 128, -255);
	  COL_VERTEX(222, 128, -127);
	  COL_VERTEX(-221, 128, -127);
	  COL_VERTEX(-221, 128, 128);
	  COL_VERTEX(0, 128, 256);
	  COL_VERTEX(222, 128, 128);
	  COL_TRI_INIT(SURFACE_DEFAULT, 10);
	  COL_TRI(0, 1, 2);
	  COL_TRI(1, 3, 4);
	  COL_TRI(1, 4, 5);
	  COL_TRI(1, 5, 6);
	  COL_TRI(1, 6, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(0, 4, 3);
	  COL_TRI(0, 5, 4);
	  COL_TRI(0, 6, 5);
	  COL_TRI(0, 2, 6);
	  COL_TRI_STOP();
	  COL_END();
	}

	function wdw_seg7_collision_square_floating_platform() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(256, -63, 256);
	  COL_VERTEX(-255, -63, 256);
	  COL_VERTEX(-255, -63, -255);
	  COL_VERTEX(256, -63, -255);
	  COL_VERTEX(256, 64, 256);
	  COL_VERTEX(-255, 64, 256);
	  COL_VERTEX(-255, 64, -255);
	  COL_VERTEX(256, 64, -255);
	  COL_TRI_INIT(SURFACE_DEFAULT, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(0, 4, 5);
	  COL_TRI(0, 5, 1);
	  COL_TRI(3, 4, 0);
	  COL_TRI(1, 5, 6);
	  COL_TRI(1, 6, 2);
	  COL_TRI(2, 6, 7);
	  COL_TRI(2, 7, 3);
	  COL_TRI(3, 7, 4);
	  COL_TRI(7, 5, 4);
	  COL_TRI(7, 6, 5);
	  COL_TRI_STOP();
	  COL_END();
	}

	function wdw_seg7_collision_070184C8() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x6);
	  COL_VERTEX(51, 50, -50);
	  COL_VERTEX(-50, 50, -50);
	  COL_VERTEX(0, 101, 0);
	  COL_VERTEX(-50, 50, 51);
	  COL_VERTEX(0, 0, 0);
	  COL_VERTEX(51, 50, 51);
	  COL_TRI_INIT(SURFACE_DEFAULT, 8);
	  COL_TRI(0, 1, 2);
	  COL_TRI(3, 1, 4);
	  COL_TRI(1, 0, 4);
	  COL_TRI(1, 3, 2);
	  COL_TRI(5, 3, 4);
	  COL_TRI(3, 5, 2);
	  COL_TRI(5, 0, 2);
	  COL_TRI(0, 5, 4);
	  COL_TRI_STOP();
	  COL_END();
	}

	var wdw = [
	  wdw_seg7_area_1_collision,
	  wdw_seg7_area_2_collision,
	  wdw_seg7_collision_arrow_lift,
	  wdw_seg7_collision_express_elevator_platform,
	  wdw_seg7_collision_07018528,
	  wdw_seg7_collision_rect_floating_platform,
	  wdw_seg7_collision_070186B4,
	  wdw_seg7_collision_square_floating_platform,
	  wdw_seg7_collision_070184C8
	];

	function wf_seg7_collision_070102D8() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x1A6);
	  COL_VERTEX(3584, 2304, -511);
	  COL_VERTEX(3226, 2304, 0);
	  COL_VERTEX(3584, 2304, 0);
	  COL_VERTEX(3226, 2304, -511);
	  COL_VERTEX(4096, 1075, -4095);
	  COL_VERTEX(3226, 1075, -3071);
	  COL_VERTEX(4096, 1075, -3071);
	  COL_VERTEX(2458, 1075, -4095);
	  COL_VERTEX(2458, 1075, -3071);
	  COL_VERTEX(1536, 3584, -1023);
	  COL_VERTEX(1024, 3584, -511);
	  COL_VERTEX(1536, 3584, 1024);
	  COL_VERTEX(-423, 3584, -1959);
	  COL_VERTEX(-1023, 3584, 1536);
	  COL_VERTEX(-1023, 3584, -511);
	  COL_VERTEX(1024, 3584, 1536);
	  COL_VERTEX(4096, 512, 3840);
	  COL_VERTEX(3226, 512, 3840);
	  COL_VERTEX(3226, 512, 4096);
	  COL_VERTEX(4096, 512, 4096);
	  COL_VERTEX(5120, 256, 4096);
	  COL_VERTEX(2048, 256, 4096);
	  COL_VERTEX(2048, 256, 5120);
	  COL_VERTEX(2560, 256, 5632);
	  COL_VERTEX(4608, 256, 5632);
	  COL_VERTEX(5120, 256, 5120);
	  COL_VERTEX(4608, 256, -511);
	  COL_VERTEX(4096, 256, -511);
	  COL_VERTEX(4096, 256, 3072);
	  COL_VERTEX(5120, 256, 0);
	  COL_VERTEX(4480, 256, 3840);
	  COL_VERTEX(1117, 3584, -2639);
	  COL_VERTEX(4480, 256, 4096);
	  COL_VERTEX(733, 3584, -2255);
	  COL_VERTEX(861, 3584, -2127);
	  COL_VERTEX(1245, 3584, -2511);
	  COL_VERTEX(1373, 3584, -2383);
	  COL_VERTEX(1373, 3584, -2767);
	  COL_VERTEX(989, 3584, -2767);
	  COL_VERTEX(3226, 2432, 0);
	  COL_VERTEX(2560, 2432, 0);
	  COL_VERTEX(2560, 2304, 0);
	  COL_VERTEX(3226, 2432, -40);
	  COL_VERTEX(3226, 2452, -19);
	  COL_VERTEX(2048, 2688, 0);
	  COL_VERTEX(2048, 2560, 0);
	  COL_VERTEX(3226, 2304, -40);
	  COL_VERTEX(2048, 2560, 1024);
	  COL_VERTEX(2048, 2688, 1024);
	  COL_VERTEX(2007, 2560, 1024);
	  COL_VERTEX(2028, 2708, 0);
	  COL_VERTEX(2048, 2708, -19);
	  COL_VERTEX(2007, 2688, 1024);
	  COL_VERTEX(2028, 2708, 1024);
	  COL_VERTEX(2007, 2688, 0);
	  COL_VERTEX(2048, 2560, -40);
	  COL_VERTEX(2560, 2432, -40);
	  COL_VERTEX(2560, 2304, -40);
	  COL_VERTEX(-2047, 2432, -1023);
	  COL_VERTEX(-1945, 1024, 3994);
	  COL_VERTEX(-1945, 512, 3994);
	  COL_VERTEX(-1740, 1024, 3994);
	  COL_VERTEX(-1740, 1024, 3789);
	  COL_VERTEX(-1945, 1024, 3789);
	  COL_VERTEX(-1535, 2560, 1536);
	  COL_VERTEX(-2047, 2560, 512);
	  COL_VERTEX(-2047, 2662, -2409);
	  COL_VERTEX(-3276, 384, -1535);
	  COL_VERTEX(-2508, 1024, 4096);
	  COL_VERTEX(-3276, 384, 640);
	  COL_VERTEX(5120, 384, 2816);
	  COL_VERTEX(-273, 2560, -2833);
	  COL_VERTEX(-2047, 2560, -2409);
	  COL_VERTEX(-2508, 384, 640);
	  COL_VERTEX(-2508, 1152, 3072);
	  COL_VERTEX(-2252, 1792, -737);
	  COL_VERTEX(-2252, 1792, -833);
	  COL_VERTEX(-2380, 1792, -737);
	  COL_VERTEX(-2380, 1792, -833);
	  COL_VERTEX(-2687, 1792, -833);
	  COL_VERTEX(-2687, 1792, -737);
	  COL_VERTEX(-2815, 1792, -737);
	  COL_VERTEX(-2815, 1792, -833);
	  COL_VERTEX(-2687, 1792, 222);
	  COL_VERTEX(-2687, 1792, 318);
	  COL_VERTEX(-2815, 1792, 318);
	  COL_VERTEX(-2815, 1792, 222);
	  COL_VERTEX(-2252, 1792, 318);
	  COL_VERTEX(-2252, 1792, 222);
	  COL_VERTEX(-2380, 1792, 318);
	  COL_VERTEX(-2380, 1792, 222);
	  COL_VERTEX(-2073, 2662, 512);
	  COL_VERTEX(-2073, 2662, -1023);
	  COL_VERTEX(2624, 4352, 340);
	  COL_VERTEX(2624, 4352, 44);
	  COL_VERTEX(2624, 4055, 340);
	  COL_VERTEX(2881, 4352, 489);
	  COL_VERTEX(2881, 4352, 448);
	  COL_VERTEX(3103, 4352, 320);
	  COL_VERTEX(2881, 4096, -63);
	  COL_VERTEX(2659, 4352, 320);
	  COL_VERTEX(3138, 4352, 340);
	  COL_VERTEX(3103, 4352, 64);
	  COL_VERTEX(3138, 4352, 44);
	  COL_VERTEX(2881, 4352, -63);
	  COL_VERTEX(2881, 4352, -104);
	  COL_VERTEX(2659, 4352, 64);
	  COL_VERTEX(2048, 2688, -40);
	  COL_VERTEX(2007, 2560, 0);
	  COL_VERTEX(-2047, 1792, -833);
	  COL_VERTEX(-2047, 1792, 318);
	  COL_VERTEX(-2047, 2432, 512);
	  COL_VERTEX(-1945, 512, 3789);
	  COL_VERTEX(-1740, 512, 3994);
	  COL_VERTEX(-1740, 512, 3789);
	  COL_VERTEX(-2047, 2662, 512);
	  COL_VERTEX(-2047, 2560, -1023);
	  COL_VERTEX(-2047, 2662, -1023);
	  COL_VERTEX(-1535, 2662, 1536);
	  COL_VERTEX(-2047, 384, -1535);
	  COL_VERTEX(-2047, 512, -1535);
	  COL_VERTEX(-3276, 512, -1535);
	  COL_VERTEX(-2508, 1152, 4096);
	  COL_VERTEX(-1023, 1152, 4096);
	  COL_VERTEX(-1023, 1024, 4096);
	  COL_VERTEX(-3276, 512, 640);
	  COL_VERTEX(-2508, 512, 640);
	  COL_VERTEX(4608, 384, 5632);
	  COL_VERTEX(5120, 384, 5120);
	  COL_VERTEX(5120, 256, 2816);
	  COL_VERTEX(2560, 384, 5632);
	  COL_VERTEX(5120, 384, 0);
	  COL_VERTEX(4096, 384, -511);
	  COL_VERTEX(4608, 384, -511);
	  COL_VERTEX(2048, 384, 5120);
	  COL_VERTEX(2048, 384, 4096);
	  COL_VERTEX(4096, 1203, -3071);
	  COL_VERTEX(4096, 1203, -4095);
	  COL_VERTEX(2458, 1203, -4095);
	  COL_VERTEX(1536, 2560, -1023);
	  COL_VERTEX(1536, 2662, -1023);
	  COL_VERTEX(-273, 2662, -2833);
	  COL_VERTEX(-2508, 1024, 3072);
	  COL_VERTEX(-2252, 2432, -737);
	  COL_VERTEX(-2380, 2432, -737);
	  COL_VERTEX(-2380, 2432, -833);
	  COL_VERTEX(-2252, 2432, -833);
	  COL_VERTEX(-2687, 2432, -737);
	  COL_VERTEX(-2815, 2432, -737);
	  COL_VERTEX(-2687, 2432, -833);
	  COL_VERTEX(-2815, 2432, -833);
	  COL_VERTEX(-2687, 2432, 318);
	  COL_VERTEX(-2815, 2432, 318);
	  COL_VERTEX(-2815, 2432, 222);
	  COL_VERTEX(-2687, 2432, 222);
	  COL_VERTEX(-2252, 2432, 318);
	  COL_VERTEX(-2380, 2432, 318);
	  COL_VERTEX(-2380, 2432, 222);
	  COL_VERTEX(-2252, 2432, 222);
	  COL_VERTEX(-2073, 2560, 512);
	  COL_VERTEX(-2073, 2560, -1023);
	  COL_VERTEX(2881, 4055, 489);
	  COL_VERTEX(3138, 4055, 340);
	  COL_VERTEX(2624, 4055, 44);
	  COL_VERTEX(2881, 4055, -104);
	  COL_VERTEX(3138, 4055, 44);
	  COL_VERTEX(2659, 4096, 320);
	  COL_VERTEX(2881, 4096, 448);
	  COL_VERTEX(2659, 4096, 64);
	  COL_VERTEX(3103, 4096, 320);
	  COL_VERTEX(3103, 4096, 64);
	  COL_VERTEX(2560, 2452, -19);
	  COL_VERTEX(2560, 2304, -511);
	  COL_VERTEX(2048, 2560, -1023);
	  COL_VERTEX(2048, 2560, -511);
	  COL_VERTEX(-2690, 1203, -34);
	  COL_VERTEX(-2690, 1203, -783);
	  COL_VERTEX(-2047, 1203, -783);
	  COL_VERTEX(-2738, 1331, 13);
	  COL_VERTEX(-2047, 1203, -34);
	  COL_VERTEX(-2738, 1331, -831);
	  COL_VERTEX(-2047, 1331, -831);
	  COL_VERTEX(-2047, 1331, 13);
	  COL_VERTEX(741, 2560, 2252);
	  COL_VERTEX(1766, 2560, 2252);
	  COL_VERTEX(1766, 2586, 2252);
	  COL_VERTEX(1766, 2560, 2355);
	  COL_VERTEX(2202, 2560, 2175);
	  COL_VERTEX(2202, 2560, 2943);
	  COL_VERTEX(2202, 2432, 2943);
	  COL_VERTEX(1536, 2560, 2175);
	  COL_VERTEX(741, 2560, 2355);
	  COL_VERTEX(1536, 2560, 2943);
	  COL_VERTEX(3226, 922, 3635);
	  COL_VERTEX(3021, 922, 3635);
	  COL_VERTEX(3021, 922, 3840);
	  COL_VERTEX(3021, 922, 4045);
	  COL_VERTEX(3226, 1024, 3840);
	  COL_VERTEX(3021, 1024, 4045);
	  COL_VERTEX(2560, 922, 2048);
	  COL_VERTEX(3584, 1024, 3635);
	  COL_VERTEX(1024, 2560, 1664);
	  COL_VERTEX(1024, 922, 1664);
	  COL_VERTEX(512, 922, 3072);
	  COL_VERTEX(1664, 922, 1024);
	  COL_VERTEX(3226, 1076, -3071);
	  COL_VERTEX(3226, 2304, -1023);
	  COL_VERTEX(-2047, 1024, 3072);
	  COL_VERTEX(-1023, 1024, 3072);
	  COL_VERTEX(-1023, 2025, 1536);
	  COL_VERTEX(-1023, 1024, 4045);
	  COL_VERTEX(-1192, 2560, 2565);
	  COL_VERTEX(-1023, 2560, 1536);
	  COL_VERTEX(-1023, 2560, 2565);
	  COL_VERTEX(512, 2025, 1536);
	  COL_VERTEX(3584, 512, 3840);
	  COL_VERTEX(3584, 1024, 3840);
	  COL_VERTEX(-423, 2560, -1959);
	  COL_VERTEX(-1023, 2560, -511);
	  COL_VERTEX(1024, 2560, -511);
	  COL_VERTEX(2509, 2304, 0);
	  COL_VERTEX(2509, 2304, -511);
	  COL_VERTEX(2048, 2534, 0);
	  COL_VERTEX(2048, 2534, -511);
	  COL_VERTEX(1536, 2560, 1024);
	  COL_VERTEX(1536, 2560, -511);
	  COL_VERTEX(3584, 1075, -3071);
	  COL_VERTEX(4096, 1075, 1536);
	  COL_VERTEX(3712, 954, 2033);
	  COL_VERTEX(3584, 1075, 1536);
	  COL_VERTEX(4096, 1075, -511);
	  COL_VERTEX(3584, 2122, -891);
	  COL_VERTEX(512, 2560, 1536);
	  COL_VERTEX(512, 2560, 2565);
	  COL_VERTEX(696, 2560, 2565);
	  COL_VERTEX(-3071, 2432, -1023);
	  COL_VERTEX(-3071, 2560, 512);
	  COL_VERTEX(-2047, 0, -4095);
	  COL_VERTEX(3226, 1024, 4096);
	  COL_VERTEX(4096, 0, -4095);
	  COL_VERTEX(-2047, 1664, 318);
	  COL_VERTEX(-255, 2816, 1536);
	  COL_VERTEX(-127, 2560, 2099);
	  COL_VERTEX(-127, 2560, 1536);
	  COL_VERTEX(-383, 2560, 1536);
	  COL_VERTEX(512, 1792, 3072);
	  COL_VERTEX(-2508, 0, 640);
	  COL_VERTEX(-2508, 0, 3072);
	  COL_VERTEX(799, 3584, -735);
	  COL_VERTEX(800, 2791, -735);
	  COL_VERTEX(881, 3584, -727);
	  COL_VERTEX(2013, 3584, -2895);
	  COL_VERTEX(2013, 3584, -3407);
	  COL_VERTEX(1501, 3584, -2895);
	  COL_VERTEX(1962, 3456, -2920);
	  COL_VERTEX(1501, 3584, -3407);
	  COL_VERTEX(2099, 2534, 0);
	  COL_VERTEX(2099, 2534, -511);
	  COL_VERTEX(2150, 2509, -511);
	  COL_VERTEX(2150, 2483, 0);
	  COL_VERTEX(2150, 2509, 0);
	  COL_VERTEX(2150, 2483, -511);
	  COL_VERTEX(2202, 2458, 0);
	  COL_VERTEX(2202, 2458, -511);
	  COL_VERTEX(2253, 2432, -511);
	  COL_VERTEX(2253, 2432, 0);
	  COL_VERTEX(2304, 2406, 0);
	  COL_VERTEX(2304, 2406, -511);
	  COL_VERTEX(2304, 2432, 0);
	  COL_VERTEX(2355, 2381, -511);
	  COL_VERTEX(2355, 2381, 0);
	  COL_VERTEX(2406, 2355, 0);
	  COL_VERTEX(2406, 2355, -511);
	  COL_VERTEX(2406, 2381, -511);
	  COL_VERTEX(2458, 2330, 0);
	  COL_VERTEX(2458, 2330, -511);
	  COL_VERTEX(2458, 2355, 0);
	  COL_VERTEX(5120, 0, 0);
	  COL_VERTEX(5120, 0, 5120);
	  COL_VERTEX(4608, 0, 5632);
	  COL_VERTEX(2048, 0, 5120);
	  COL_VERTEX(2560, 0, 5632);
	  COL_VERTEX(2048, 0, 4096);
	  COL_VERTEX(-2508, -3071, 4096);
	  COL_VERTEX(4096, 256, 4096);
	  COL_VERTEX(4096, 0, -511);
	  COL_VERTEX(4608, 0, -511);
	  COL_VERTEX(3712, 599, 3525);
	  COL_VERTEX(3968, 599, 3401);
	  COL_VERTEX(3712, 802, 2779);
	  COL_VERTEX(3840, 893, 2282);
	  COL_VERTEX(3840, 751, 2779);
	  COL_VERTEX(4096, 1075, -2559);
	  COL_VERTEX(3584, 1075, -2047);
	  COL_VERTEX(4096, 1075, -2047);
	  COL_VERTEX(4096, 1075, -1535);
	  COL_VERTEX(4096, 1075, -1023);
	  COL_VERTEX(3584, 1075, -1023);
	  COL_VERTEX(3584, 1757, -2031);
	  COL_VERTEX(3584, 1584, -2412);
	  COL_VERTEX(3584, 1575, -2031);
	  COL_VERTEX(3226, 1392, -2412);
	  COL_VERTEX(3584, 1392, -2412);
	  COL_VERTEX(3584, 2304, -891);
	  COL_VERTEX(3584, 1939, -1271);
	  COL_VERTEX(3584, 2122, -1271);
	  COL_VERTEX(3584, 1757, -1651);
	  COL_VERTEX(3584, 1939, -1651);
	  COL_VERTEX(3584, 1396, -2602);
	  COL_VERTEX(-2430, 1664, -190);
	  COL_VERTEX(-2047, 1664, -833);
	  COL_VERTEX(-2430, 1664, -320);
	  COL_VERTEX(-2943, 1664, 318);
	  COL_VERTEX(-2559, 1664, -190);
	  COL_VERTEX(-2943, 1792, 318);
	  COL_VERTEX(-2943, 1792, -833);
	  COL_VERTEX(-2559, 1664, -320);
	  COL_VERTEX(-2943, 1664, -833);
	  COL_VERTEX(-3276, 0, 640);
	  COL_VERTEX(1925, 2560, -204);
	  COL_VERTEX(1280, 2560, -1023);
	  COL_VERTEX(1373, 3456, -2767);
	  COL_VERTEX(861, 3456, -2127);
	  COL_VERTEX(1117, 3456, -2639);
	  COL_VERTEX(1766, 2586, 2355);
	  COL_VERTEX(741, 2586, 2252);
	  COL_VERTEX(741, 2586, 2355);
	  COL_VERTEX(1536, 2432, 2175);
	  COL_VERTEX(2202, 2432, 2175);
	  COL_VERTEX(1536, 2432, 2943);
	  COL_VERTEX(3226, 1024, 3635);
	  COL_VERTEX(-1023, 922, 4045);
	  COL_VERTEX(-1023, 922, 3072);
	  COL_VERTEX(3072, 922, 2048);
	  COL_VERTEX(1664, 2560, 1024);
	  COL_VERTEX(3226, 1584, -2412);
	  COL_VERTEX(3226, 2304, -891);
	  COL_VERTEX(-1023, 1792, 3072);
	  COL_VERTEX(1024, 2560, 1536);
	  COL_VERTEX(-3071, 2560, -1023);
	  COL_VERTEX(-3071, 2432, 512);
	  COL_VERTEX(3584, 802, 2655);
	  COL_VERTEX(3968, 821, 2406);
	  COL_VERTEX(2509, 2330, -511);
	  COL_VERTEX(2509, 2330, 0);
	  COL_VERTEX(2099, 2509, 0);
	  COL_VERTEX(3584, 0, -511);
	  COL_VERTEX(3584, 0, -3071);
	  COL_VERTEX(3584, 1075, -511);
	  COL_VERTEX(3840, 974, 1909);
	  COL_VERTEX(4096, 0, -3071);
	  COL_VERTEX(3226, 2122, -891);
	  COL_VERTEX(3226, 2122, -1271);
	  COL_VERTEX(-2047, 0, -1535);
	  COL_VERTEX(3226, 256, 4096);
	  COL_VERTEX(512, 0, -4095);
	  COL_VERTEX(-2508, 0, 4096);
	  COL_VERTEX(3226, 0, 4096);
	  COL_VERTEX(-2047, 384, 640);
	  COL_VERTEX(-255, 2816, 2099);
	  COL_VERTEX(-383, 2560, 2099);
	  COL_VERTEX(881, 2791, -727);
	  COL_VERTEX(889, 3584, -646);
	  COL_VERTEX(889, 2791, -646);
	  COL_VERTEX(1962, 3456, -3381);
	  COL_VERTEX(1552, 3456, -2920);
	  COL_VERTEX(1552, 3456, -3381);
	  COL_VERTEX(2099, 2509, -511);
	  COL_VERTEX(2202, 2483, 0);
	  COL_VERTEX(2253, 2458, 0);
	  COL_VERTEX(2202, 2483, -511);
	  COL_VERTEX(2253, 2458, -511);
	  COL_VERTEX(2355, 2406, 0);
	  COL_VERTEX(2355, 2406, -511);
	  COL_VERTEX(2304, 2432, -511);
	  COL_VERTEX(2406, 2381, 0);
	  COL_VERTEX(2458, 2355, -511);
	  COL_VERTEX(5120, 0, 4096);
	  COL_VERTEX(2048, -3071, 4096);
	  COL_VERTEX(3584, 1075, -2559);
	  COL_VERTEX(4096, 0, -2047);
	  COL_VERTEX(4096, 0, -2559);
	  COL_VERTEX(3584, 0, -2559);
	  COL_VERTEX(3584, 0, -2047);
	  COL_VERTEX(3584, 1075, -1535);
	  COL_VERTEX(4096, 0, -1535);
	  COL_VERTEX(4096, 0, -1023);
	  COL_VERTEX(3584, 0, -1535);
	  COL_VERTEX(3584, 0, -1023);
	  COL_VERTEX(3226, 1575, -2031);
	  COL_VERTEX(3226, 1757, -2031);
	  COL_VERTEX(3226, 1939, -1271);
	  COL_VERTEX(3226, 1939, -1651);
	  COL_VERTEX(3226, 1757, -1651);
	  COL_VERTEX(3226, 1396, -2602);
	  COL_VERTEX(-2430, 1792, -190);
	  COL_VERTEX(-2559, 1792, -190);
	  COL_VERTEX(-2559, 1792, -320);
	  COL_VERTEX(-2430, 1792, -320);
	  COL_VERTEX(-3276, 0, -1535);
	  COL_VERTEX(1720, 2560, -204);
	  COL_VERTEX(1720, 2560, 0);
	  COL_VERTEX(1925, 2560, 0);
	  COL_VERTEX(973, 2560, -1023);
	  COL_VERTEX(1126, 2560, -869);
	  COL_VERTEX(1126, 2560, -1177);
	  COL_VERTEX(-2060, 2688, 512);
	  COL_VERTEX(-2060, 2688, -1023);
	  COL_VERTEX(1245, 3456, -2511);
	  COL_VERTEX(1373, 3456, -2383);
	  COL_VERTEX(733, 3456, -2255);
	  COL_VERTEX(989, 3456, -2767);
	  COL_VERTEX(2881, 4372, 468);
	  COL_VERTEX(3120, 4372, 330);
	  COL_VERTEX(3120, 4372, 54);
	  COL_VERTEX(2881, 4372, -83);
	  COL_VERTEX(2641, 4372, 54);
	  COL_VERTEX(2641, 4372, 330);
	  COL_VERTEX(8192, -3071, -8191);
	  COL_VERTEX(-8191, -3071, -8191);
	  COL_VERTEX(8192, -3071, 8192);
	  COL_VERTEX(-8191, -3071, 8192);
	  COL_TRI_INIT(SURFACE_DEFAULT, 409);
	  COL_TRI(175, 176, 177);
	  COL_TRI(178, 175, 179);
	  COL_TRI(175, 177, 179);
	  COL_TRI(180, 175, 178);
	  COL_TRI(180, 176, 175);
	  COL_TRI(177, 176, 180);
	  COL_TRI(177, 180, 181);
	  COL_TRI(178, 179, 182);
	  COL_TRI(178, 182, 181);
	  COL_TRI(178, 181, 180);
	  COL_TRI(191, 326, 325);
	  COL_TRI(183, 185, 184);
	  COL_TRI(184, 324, 186);
	  COL_TRI(184, 185, 324);
	  COL_TRI(185, 325, 326);
	  COL_TRI(183, 325, 185);
	  COL_TRI(185, 326, 324);
	  COL_TRI(186, 324, 326);
	  COL_TRI(186, 326, 191);
	  COL_TRI(187, 327, 190);
	  COL_TRI(187, 328, 327);
	  COL_TRI(188, 328, 187);
	  COL_TRI(191, 325, 183);
	  COL_TRI(188, 189, 328);
	  COL_TRI(189, 327, 328);
	  COL_TRI(190, 327, 329);
	  COL_TRI(189, 329, 327);
	  COL_TRI(190, 329, 192);
	  COL_TRI(186, 183, 184);
	  COL_TRI(186, 191, 183);
	  COL_TRI(192, 189, 188);
	  COL_TRI(192, 329, 189);
	  COL_TRI(193, 194, 330);
	  COL_TRI(196, 203, 331);
	  COL_TRI(194, 197, 330);
	  COL_TRI(194, 195, 197);
	  COL_TRI(196, 195, 202);
	  COL_TRI(195, 194, 202);
	  COL_TRI(197, 196, 198);
	  COL_TRI(196, 197, 195);
	  COL_TRI(198, 196, 331);
	  COL_TRI(196, 202, 203);
	  COL_TRI(193, 330, 1);
	  COL_TRI(199, 193, 333);
	  COL_TRI(200, 330, 197);
	  COL_TRI(193, 199, 202);
	  COL_TRI(199, 204, 202);
	  COL_TRI(201, 202, 204);
	  COL_TRI(202, 194, 193);
	  COL_TRI(204, 199, 47);
	  COL_TRI(3, 206, 172);
	  COL_TRI(3, 172, 41);
	  COL_TRI(205, 335, 206);
	  COL_TRI(3, 205, 206);
	  COL_TRI(0, 336, 3);
	  COL_TRI(173, 139, 9);
	  COL_TRI(173, 225, 224);
	  COL_TRI(173, 224, 47);
	  COL_TRI(173, 9, 225);
	  COL_TRI(206, 173, 172);
	  COL_TRI(5, 205, 3);
	  COL_TRI(207, 208, 64);
	  COL_TRI(208, 213, 337);
	  COL_TRI(208, 209, 213);
	  COL_TRI(209, 208, 332);
	  COL_TRI(210, 332, 208);
	  COL_TRI(61, 208, 62);
	  COL_TRI(61, 124, 208);
	  COL_TRI(63, 208, 207);
	  COL_TRI(63, 62, 208);
	  COL_TRI(64, 208, 337);
	  COL_TRI(212, 211, 213);
	  COL_TRI(207, 64, 111);
	  COL_TRI(64, 65, 111);
	  COL_TRI(64, 212, 65);
	  COL_TRI(211, 64, 337);
	  COL_TRI(212, 64, 211);
	  COL_TRI(209, 212, 213);
	  COL_TRI(213, 211, 337);
	  COL_TRI(214, 232, 209);
	  COL_TRI(212, 209, 232);
	  COL_TRI(212, 232, 13);
	  COL_TRI(210, 331, 332);
	  COL_TRI(203, 332, 331);
	  COL_TRI(65, 116, 236);
	  COL_TRI(65, 236, 111);
	  COL_TRI(65, 212, 116);
	  COL_TRI(124, 61, 68);
	  COL_TRI(68, 61, 59);
	  COL_TRI(68, 59, 63);
	  COL_TRI(68, 63, 142);
	  COL_TRI(215, 16, 287);
	  COL_TRI(215, 287, 341);
	  COL_TRI(216, 197, 215);
	  COL_TRI(215, 197, 17);
	  COL_TRI(215, 229, 200);
	  COL_TRI(215, 200, 216);
	  COL_TRI(217, 10, 219);
	  COL_TRI(200, 197, 216);
	  COL_TRI(2, 229, 226);
	  COL_TRI(2, 200, 229);
	  COL_TRI(217, 12, 10);
	  COL_TRI(218, 12, 217);
	  COL_TRI(72, 217, 71);
	  COL_TRI(219, 10, 9);
	  COL_TRI(219, 71, 217);
	  COL_TRI(219, 139, 71);
	  COL_TRI(139, 219, 9);
	  COL_TRI(218, 14, 12);
	  COL_TRI(41, 220, 45);
	  COL_TRI(220, 222, 45);
	  COL_TRI(220, 41, 221);
	  COL_TRI(116, 212, 218);
	  COL_TRI(45, 222, 174);
	  COL_TRI(222, 256, 223);
	  COL_TRI(174, 222, 223);
	  COL_TRI(172, 221, 41);
	  COL_TRI(221, 172, 223);
	  COL_TRI(172, 174, 223);
	  COL_TRI(223, 256, 257);
	  COL_TRI(221, 343, 220);
	  COL_TRI(212, 13, 14);
	  COL_TRI(218, 212, 14);
	  COL_TRI(224, 225, 11);
	  COL_TRI(224, 201, 334);
	  COL_TRI(224, 11, 15);
	  COL_TRI(224, 15, 338);
	  COL_TRI(201, 224, 338);
	  COL_TRI(225, 9, 11);
	  COL_TRI(47, 334, 204);
	  COL_TRI(201, 204, 334);
	  COL_TRI(200, 1, 330);
	  COL_TRI(72, 218, 217);
	  COL_TRI(226, 346, 347);
	  COL_TRI(226, 348, 346);
	  COL_TRI(72, 116, 218);
	  COL_TRI(3, 41, 1);
	  COL_TRI(200, 2, 1);
	  COL_TRI(227, 349, 290);
	  COL_TRI(227, 229, 349);
	  COL_TRI(16, 227, 342);
	  COL_TRI(227, 290, 342);
	  COL_TRI(227, 348, 229);
	  COL_TRI(227, 230, 348);
	  COL_TRI(228, 229, 341);
	  COL_TRI(229, 228, 349);
	  COL_TRI(27, 230, 227);
	  COL_TRI(27, 227, 16);
	  COL_TRI(27, 16, 28);
	  COL_TRI(228, 290, 349);
	  COL_TRI(230, 346, 348);
	  COL_TRI(230, 285, 346);
	  COL_TRI(226, 347, 350);
	  COL_TRI(226, 350, 6);
	  COL_TRI(4, 6, 350);
	  COL_TRI(226, 0, 2);
	  COL_TRI(231, 303, 0);
	  COL_TRI(0, 303, 336);
	  COL_TRI(15, 13, 232);
	  COL_TRI(232, 201, 338);
	  COL_TRI(232, 338, 15);
	  COL_TRI(233, 232, 214);
	  COL_TRI(234, 201, 232);
	  COL_TRI(234, 232, 233);
	  COL_TRI(109, 58, 72);
	  COL_TRI(235, 339, 116);
	  COL_TRI(58, 235, 116);
	  COL_TRI(236, 116, 339);
	  COL_TRI(58, 116, 72);
	  COL_TRI(237, 109, 72);
	  COL_TRI(119, 237, 353);
	  COL_TRI(237, 310, 109);
	  COL_TRI(237, 119, 310);
	  COL_TRI(17, 197, 18);
	  COL_TRI(238, 18, 197);
	  COL_TRI(19, 18, 354);
	  COL_TRI(7, 355, 138);
	  COL_TRI(239, 355, 7);
	  COL_TRI(203, 233, 214);
	  COL_TRI(207, 111, 110);
	  COL_TRI(207, 110, 240);
	  COL_TRI(238, 356, 357);
	  COL_TRI(238, 68, 356);
	  COL_TRI(19, 354, 284);
	  COL_TRI(4, 350, 239);
	  COL_TRI(239, 7, 4);
	  COL_TRI(7, 138, 8);
	  COL_TRI(207, 240, 358);
	  COL_TRI(240, 119, 358);
	  COL_TRI(198, 331, 210);
	  COL_TRI(210, 124, 238);
	  COL_TRI(198, 238, 197);
	  COL_TRI(210, 238, 198);
	  COL_TRI(63, 207, 142);
	  COL_TRI(241, 359, 242);
	  COL_TRI(241, 242, 243);
	  COL_TRI(242, 359, 360);
	  COL_TRI(243, 242, 360);
	  COL_TRI(244, 360, 359);
	  COL_TRI(244, 359, 241);
	  COL_TRI(243, 360, 244);
	  COL_TRI(203, 245, 233);
	  COL_TRI(203, 202, 234);
	  COL_TRI(203, 234, 245);
	  COL_TRI(202, 201, 234);
	  COL_TRI(245, 234, 233);
	  COL_TRI(240, 310, 119);
	  COL_TRI(251, 254, 364);
	  COL_TRI(246, 247, 142);
	  COL_TRI(247, 356, 68);
	  COL_TRI(247, 68, 142);
	  COL_TRI(246, 142, 73);
	  COL_TRI(248, 250, 361);
	  COL_TRI(248, 361, 249);
	  COL_TRI(248, 362, 250);
	  COL_TRI(249, 361, 363);
	  COL_TRI(250, 363, 361);
	  COL_TRI(250, 362, 363);
	  COL_TRI(251, 364, 252);
	  COL_TRI(252, 253, 251);
	  COL_TRI(254, 365, 366);
	  COL_TRI(254, 366, 364);
	  COL_TRI(253, 365, 254);
	  COL_TRI(253, 254, 251);
	  COL_TRI(252, 364, 366);
	  COL_TRI(252, 366, 255);
	  COL_TRI(252, 255, 253);
	  COL_TRI(255, 366, 365);
	  COL_TRI(255, 365, 253);
	  COL_TRI(256, 345, 257);
	  COL_TRI(257, 345, 367);
	  COL_TRI(258, 367, 260);
	  COL_TRI(259, 258, 260);
	  COL_TRI(260, 367, 345);
	  COL_TRI(266, 372, 267);
	  COL_TRI(259, 368, 261);
	  COL_TRI(261, 258, 259);
	  COL_TRI(262, 369, 263);
	  COL_TRI(263, 370, 262);
	  COL_TRI(262, 370, 368);
	  COL_TRI(261, 368, 370);
	  COL_TRI(264, 371, 265);
	  COL_TRI(265, 268, 264);
	  COL_TRI(265, 371, 369);
	  COL_TRI(263, 369, 371);
	  COL_TRI(273, 269, 375);
	  COL_TRI(267, 372, 373);
	  COL_TRI(268, 266, 374);
	  COL_TRI(264, 268, 374);
	  COL_TRI(267, 374, 266);
	  COL_TRI(269, 373, 270);
	  COL_TRI(270, 375, 269);
	  COL_TRI(270, 373, 372);
	  COL_TRI(271, 276, 272);
	  COL_TRI(272, 273, 271);
	  COL_TRI(271, 273, 375);
	  COL_TRI(274, 344, 275);
	  COL_TRI(275, 344, 343);
	  COL_TRI(275, 376, 274);
	  COL_TRI(272, 276, 376);
	  COL_TRI(276, 274, 376);
	  COL_TRI(220, 343, 344);
	  COL_TRI(277, 20, 377);
	  COL_TRI(20, 278, 377);
	  COL_TRI(20, 25, 278);
	  COL_TRI(277, 29, 20);
	  COL_TRI(278, 24, 279);
	  COL_TRI(278, 25, 24);
	  COL_TRI(279, 24, 23);
	  COL_TRI(279, 23, 281);
	  COL_TRI(280, 21, 282);
	  COL_TRI(280, 22, 21);
	  COL_TRI(281, 22, 280);
	  COL_TRI(282, 356, 283);
	  COL_TRI(283, 378, 282);
	  COL_TRI(281, 23, 22);
	  COL_TRI(286, 26, 29);
	  COL_TRI(16, 30, 28);
	  COL_TRI(284, 32, 19);
	  COL_TRI(16, 32, 30);
	  COL_TRI(16, 19, 32);
	  COL_TRI(285, 26, 286);
	  COL_TRI(285, 27, 26);
	  COL_TRI(286, 29, 277);
	  COL_TRI(287, 289, 341);
	  COL_TRI(16, 288, 287);
	  COL_TRI(288, 291, 287);
	  COL_TRI(287, 291, 289);
	  COL_TRI(289, 228, 341);
	  COL_TRI(16, 342, 288);
	  COL_TRI(290, 288, 342);
	  COL_TRI(290, 291, 288);
	  COL_TRI(228, 291, 290);
	  COL_TRI(291, 228, 289);
	  COL_TRI(292, 293, 294);
	  COL_TRI(295, 384, 297);
	  COL_TRI(292, 379, 293);
	  COL_TRI(293, 380, 294);
	  COL_TRI(294, 380, 381);
	  COL_TRI(294, 381, 292);
	  COL_TRI(292, 381, 382);
	  COL_TRI(292, 382, 379);
	  COL_TRI(293, 383, 380);
	  COL_TRI(295, 297, 296);
	  COL_TRI(296, 385, 295);
	  COL_TRI(296, 386, 385);
	  COL_TRI(297, 386, 296);
	  COL_TRI(295, 385, 387);
	  COL_TRI(295, 387, 384);
	  COL_TRI(297, 388, 386);
	  COL_TRI(298, 300, 389);
	  COL_TRI(299, 300, 302);
	  COL_TRI(300, 298, 306);
	  COL_TRI(300, 299, 335);
	  COL_TRI(301, 335, 299);
	  COL_TRI(300, 335, 389);
	  COL_TRI(302, 301, 299);
	  COL_TRI(303, 351, 336);
	  COL_TRI(303, 231, 351);
	  COL_TRI(231, 352, 351);
	  COL_TRI(304, 305, 231);
	  COL_TRI(231, 305, 352);
	  COL_TRI(226, 205, 308);
	  COL_TRI(305, 391, 352);
	  COL_TRI(305, 304, 391);
	  COL_TRI(304, 392, 391);
	  COL_TRI(306, 307, 304);
	  COL_TRI(304, 307, 392);
	  COL_TRI(307, 393, 392);
	  COL_TRI(307, 306, 393);
	  COL_TRI(306, 390, 393);
	  COL_TRI(306, 298, 390);
	  COL_TRI(298, 389, 390);
	  COL_TRI(310, 311, 316);
	  COL_TRI(205, 394, 308);
	  COL_TRI(308, 394, 301);
	  COL_TRI(302, 308, 301);
	  COL_TRI(308, 302, 226);
	  COL_TRI(240, 313, 309);
	  COL_TRI(309, 313, 395);
	  COL_TRI(310, 240, 309);
	  COL_TRI(310, 309, 311);
	  COL_TRI(311, 309, 395);
	  COL_TRI(240, 312, 313);
	  COL_TRI(312, 316, 313);
	  COL_TRI(313, 396, 395);
	  COL_TRI(110, 109, 398);
	  COL_TRI(110, 398, 395);
	  COL_TRI(314, 110, 395);
	  COL_TRI(314, 395, 396);
	  COL_TRI(311, 395, 398);
	  COL_TRI(315, 396, 397);
	  COL_TRI(315, 314, 396);
	  COL_TRI(313, 397, 396);
	  COL_TRI(109, 315, 397);
	  COL_TRI(109, 397, 398);
	  COL_TRI(311, 398, 397);
	  COL_TRI(316, 311, 397);
	  COL_TRI(313, 316, 397);
	  COL_TRI(312, 317, 316);
	  COL_TRI(317, 310, 316);
	  COL_TRI(317, 315, 109);
	  COL_TRI(317, 109, 310);
	  COL_TRI(236, 340, 111);
	  COL_TRI(240, 110, 314);
	  COL_TRI(240, 314, 312);
	  COL_TRI(236, 339, 235);
	  COL_TRI(318, 73, 69);
	  COL_TRI(236, 235, 340);
	  COL_TRI(235, 58, 111);
	  COL_TRI(235, 111, 340);
	  COL_TRI(315, 317, 314);
	  COL_TRI(317, 312, 314);
	  COL_TRI(318, 246, 73);
	  COL_TRI(67, 399, 318);
	  COL_TRI(67, 318, 69);
	  COL_TRI(119, 399, 67);
	  COL_TRI(119, 353, 399);
	  COL_TRI(67, 358, 119);
	  COL_TRI(67, 69, 358);
	  COL_TRI(319, 400, 401);
	  COL_TRI(319, 401, 402);
	  COL_TRI(160, 92, 117);
	  COL_TRI(320, 403, 404);
	  COL_TRI(320, 405, 403);
	  COL_TRI(91, 159, 115);
	  COL_TRI(159, 65, 115);
	  COL_TRI(91, 115, 406);
	  COL_TRI(92, 407, 117);
	  COL_TRI(160, 117, 116);
	  COL_TRI(33, 322, 34);
	  COL_TRI(34, 322, 408);
	  COL_TRI(34, 408, 35);
	  COL_TRI(321, 409, 408);
	  COL_TRI(321, 408, 322);
	  COL_TRI(35, 408, 409);
	  COL_TRI(35, 409, 36);
	  COL_TRI(322, 410, 323);
	  COL_TRI(321, 322, 323);
	  COL_TRI(33, 410, 322);
	  COL_TRI(36, 409, 321);
	  COL_TRI(31, 410, 33);
	  COL_TRI(31, 323, 410);
	  COL_TRI(38, 323, 31);
	  COL_TRI(38, 411, 323);
	  COL_TRI(323, 411, 321);
	  COL_TRI(37, 411, 38);
	  COL_TRI(37, 321, 411);
	  COL_TRI(36, 321, 37);
	  COL_TRI_INIT(SURFACE_DEATH_PLANE, 2);
	  COL_TRI(418, 419, 420);
	  COL_TRI(420, 419, 421);
	  COL_TRI_INIT(SURFACE_VERY_SLIPPERY, 14);
	  COL_TRI(39, 171, 40);
	  COL_TRI(39, 43, 171);
	  COL_TRI(43, 42, 56);
	  COL_TRI(43, 56, 171);
	  COL_TRI(40, 171, 51);
	  COL_TRI(171, 107, 51);
	  COL_TRI(171, 56, 107);
	  COL_TRI(40, 51, 44);
	  COL_TRI(44, 53, 48);
	  COL_TRI(44, 50, 53);
	  COL_TRI(50, 52, 53);
	  COL_TRI(50, 54, 52);
	  COL_TRI(41, 45, 47);
	  COL_TRI(172, 173, 174);
	  COL_TRI_INIT(SURFACE_SLIPPERY, 43);
	  COL_TRI(203, 214, 332);
	  COL_TRI(1, 199, 333);
	  COL_TRI(199, 1, 41);
	  COL_TRI(199, 41, 47);
	  COL_TRI(193, 1, 333);
	  COL_TRI(355, 237, 72);
	  COL_TRI(355, 139, 138);
	  COL_TRI(355, 71, 139);
	  COL_TRI(72, 71, 355);
	  COL_TRI(332, 214, 209);
	  COL_TRI(335, 173, 206);
	  COL_TRI(335, 139, 173);
	  COL_TRI(139, 335, 205);
	  COL_TRI(138, 139, 8);
	  COL_TRI(139, 205, 8);
	  COL_TRI(92, 91, 406);
	  COL_TRI(92, 406, 407);
	  COL_TRI(412, 101, 413);
	  COL_TRI(406, 115, 407);
	  COL_TRI(115, 117, 407);
	  COL_TRI(96, 412, 417);
	  COL_TRI(412, 97, 100);
	  COL_TRI(412, 100, 417);
	  COL_TRI(96, 417, 93);
	  COL_TRI(98, 97, 412);
	  COL_TRI(98, 412, 413);
	  COL_TRI(412, 96, 101);
	  COL_TRI(102, 98, 413);
	  COL_TRI(413, 103, 414);
	  COL_TRI(102, 413, 414);
	  COL_TRI(413, 101, 103);
	  COL_TRI(102, 414, 415);
	  COL_TRI(414, 105, 415);
	  COL_TRI(414, 103, 105);
	  COL_TRI(100, 416, 417);
	  COL_TRI(104, 102, 415);
	  COL_TRI(415, 105, 416);
	  COL_TRI(106, 415, 416);
	  COL_TRI(106, 104, 415);
	  COL_TRI(105, 94, 416);
	  COL_TRI(100, 106, 416);
	  COL_TRI(416, 93, 417);
	  COL_TRI(416, 94, 93);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 4);
	  COL_TRI(187, 192, 188);
	  COL_TRI(187, 190, 192);
	  COL_TRI(207, 358, 142);
	  COL_TRI(358, 73, 142);
	  COL_TRI_INIT(SURFACE_WALL_MISC, 143);
	  COL_TRI(50, 44, 51);
	  COL_TRI(39, 40, 41);
	  COL_TRI(39, 41, 1);
	  COL_TRI(1, 42, 39);
	  COL_TRI(42, 43, 39);
	  COL_TRI(41, 40, 44);
	  COL_TRI(41, 44, 45);
	  COL_TRI(1, 46, 42);
	  COL_TRI(47, 45, 44);
	  COL_TRI(47, 44, 48);
	  COL_TRI(48, 49, 47);
	  COL_TRI(52, 108, 49);
	  COL_TRI(48, 52, 49);
	  COL_TRI(48, 53, 52);
	  COL_TRI(54, 107, 55);
	  COL_TRI(55, 107, 56);
	  COL_TRI(55, 56, 57);
	  COL_TRI(54, 55, 108);
	  COL_TRI(54, 51, 107);
	  COL_TRI(46, 56, 42);
	  COL_TRI(46, 57, 56);
	  COL_TRI(52, 54, 108);
	  COL_TRI(54, 50, 51);
	  COL_TRI(58, 109, 110);
	  COL_TRI(58, 110, 111);
	  COL_TRI(59, 60, 112);
	  COL_TRI(60, 113, 114);
	  COL_TRI(60, 114, 112);
	  COL_TRI(61, 113, 60);
	  COL_TRI(61, 60, 59);
	  COL_TRI(62, 113, 61);
	  COL_TRI(62, 114, 113);
	  COL_TRI(63, 112, 114);
	  COL_TRI(63, 114, 62);
	  COL_TRI(59, 112, 63);
	  COL_TRI(64, 65, 115);
	  COL_TRI(65, 116, 117);
	  COL_TRI(65, 117, 115);
	  COL_TRI(69, 121, 125);
	  COL_TRI(66, 117, 116);
	  COL_TRI(67, 119, 120);
	  COL_TRI(67, 120, 121);
	  COL_TRI(68, 122, 123);
	  COL_TRI(68, 123, 124);
	  COL_TRI(69, 67, 121);
	  COL_TRI(25, 128, 70);
	  COL_TRI(69, 126, 73);
	  COL_TRI(69, 125, 126);
	  COL_TRI(64, 115, 118);
	  COL_TRI(23, 127, 24);
	  COL_TRI(24, 127, 128);
	  COL_TRI(24, 128, 25);
	  COL_TRI(22, 130, 23);
	  COL_TRI(25, 70, 129);
	  COL_TRI(23, 130, 127);
	  COL_TRI(26, 132, 27);
	  COL_TRI(26, 133, 132);
	  COL_TRI(29, 133, 26);
	  COL_TRI(29, 131, 133);
	  COL_TRI(70, 131, 29);
	  COL_TRI(70, 29, 129);
	  COL_TRI(4, 138, 7);
	  COL_TRI(22, 134, 130);
	  COL_TRI(21, 134, 22);
	  COL_TRI(21, 135, 134);
	  COL_TRI(4, 6, 136);
	  COL_TRI(4, 136, 137);
	  COL_TRI(4, 137, 138);
	  COL_TRI(71, 139, 140);
	  COL_TRI(71, 140, 141);
	  COL_TRI(72, 141, 66);
	  COL_TRI(72, 71, 141);
	  COL_TRI(66, 116, 72);
	  COL_TRI(73, 74, 142);
	  COL_TRI(74, 122, 68);
	  COL_TRI(74, 68, 142);
	  COL_TRI(80, 147, 148);
	  COL_TRI(73, 126, 74);
	  COL_TRI(75, 143, 144);
	  COL_TRI(75, 144, 77);
	  COL_TRI(76, 143, 75);
	  COL_TRI(77, 144, 145);
	  COL_TRI(77, 145, 78);
	  COL_TRI(76, 146, 143);
	  COL_TRI(78, 145, 146);
	  COL_TRI(78, 146, 76);
	  COL_TRI(79, 147, 80);
	  COL_TRI(84, 151, 152);
	  COL_TRI(81, 148, 150);
	  COL_TRI(80, 148, 81);
	  COL_TRI(81, 150, 82);
	  COL_TRI(79, 149, 147);
	  COL_TRI(82, 150, 149);
	  COL_TRI(82, 149, 79);
	  COL_TRI(83, 151, 84);
	  COL_TRI(84, 152, 85);
	  COL_TRI(89, 156, 157);
	  COL_TRI(85, 152, 153);
	  COL_TRI(85, 153, 86);
	  COL_TRI(83, 154, 151);
	  COL_TRI(86, 153, 154);
	  COL_TRI(86, 154, 83);
	  COL_TRI(87, 155, 156);
	  COL_TRI(88, 155, 87);
	  COL_TRI(87, 156, 89);
	  COL_TRI(89, 157, 90);
	  COL_TRI(88, 158, 155);
	  COL_TRI(90, 157, 158);
	  COL_TRI(90, 158, 88);
	  COL_TRI(91, 92, 159);
	  COL_TRI(92, 160, 159);
	  COL_TRI(93, 161, 96);
	  COL_TRI(94, 95, 93);
	  COL_TRI(97, 167, 166);
	  COL_TRI(95, 162, 161);
	  COL_TRI(93, 95, 161);
	  COL_TRI(96, 161, 162);
	  COL_TRI(96, 162, 101);
	  COL_TRI(95, 163, 164);
	  COL_TRI(95, 164, 165);
	  COL_TRI(95, 165, 162);
	  COL_TRI(97, 166, 100);
	  COL_TRI(101, 162, 165);
	  COL_TRI(99, 166, 167);
	  COL_TRI(99, 168, 166);
	  COL_TRI(100, 166, 168);
	  COL_TRI(100, 168, 106);
	  COL_TRI(99, 167, 169);
	  COL_TRI(101, 165, 103);
	  COL_TRI(104, 99, 170);
	  COL_TRI(98, 169, 167);
	  COL_TRI(98, 167, 97);
	  COL_TRI(102, 169, 98);
	  COL_TRI(99, 169, 170);
	  COL_TRI(103, 165, 164);
	  COL_TRI(103, 164, 105);
	  COL_TRI(104, 170, 102);
	  COL_TRI(102, 170, 169);
	  COL_TRI(106, 99, 104);
	  COL_TRI(105, 164, 163);
	  COL_TRI(105, 163, 94);
	  COL_TRI(94, 163, 95);
	  COL_TRI(106, 168, 99);
	  COL_TRI_INIT(SURFACE_NOISE_DEFAULT, 15);
	  COL_TRI(16, 17, 18);
	  COL_TRI(16, 18, 19);
	  COL_TRI(20, 21, 22);
	  COL_TRI(20, 23, 24);
	  COL_TRI(20, 22, 23);
	  COL_TRI(20, 24, 25);
	  COL_TRI(26, 27, 28);
	  COL_TRI(26, 28, 29);
	  COL_TRI(31, 37, 38);
	  COL_TRI(28, 30, 29);
	  COL_TRI(20, 29, 30);
	  COL_TRI(20, 30, 32);
	  COL_TRI(31, 33, 34);
	  COL_TRI(31, 34, 35);
	  COL_TRI(31, 36, 37);
	  COL_TRI_INIT(SURFACE_BOSS_FIGHT_CAMERA, 5);
	  COL_TRI(13, 15, 11);
	  COL_TRI(9, 10, 11);
	  COL_TRI(10, 12, 13);
	  COL_TRI(11, 10, 13);
	  COL_TRI(12, 14, 13);
	  COL_TRI_INIT(SURFACE_CAMERA_MIDDLE, 5);
	  COL_TRI(7, 8, 5);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(4, 5, 6);
	  COL_TRI(4, 7, 5);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(6);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start,   /*pos*/  2560,  256, 5120, /*yaw*/ 64); // unused, probably an early way to set initial position
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0E, /*pos*/  3584,  154, 4864, /*yaw*/ 0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_0F, /*pos*/  4608,  256, 1792, /*yaw*/ 0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_11, /*pos*/ -2499, 1792, -261, /*yaw*/ 0);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_level_geo_12, /*pos*/ -2661,  384,  640, /*yaw*/ 0);
	  SPECIAL_OBJECT(/*preset*/ special_bubble_tree,  /*pos*/  2560,  256, 4608);
	  COL_WATER_BOX_INIT(1);
	  COL_WATER_BOX(0, -1023, 1024, 3226, 4096, 973);
	  COL_END();
	}

	function wf_seg7_collision_tower() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x41);
	  COL_VERTEX(-437, 1792, 184);
	  COL_VERTEX(-437, 1741, 184);
	  COL_VERTEX(-437, 1741, -183);
	  COL_VERTEX(-183, 1792, 438);
	  COL_VERTEX(-183, 1741, 438);
	  COL_VERTEX(-127, 1741, -127);
	  COL_VERTEX(-127, 1741, 128);
	  COL_VERTEX(-127, 1997, 128);
	  COL_VERTEX(-127, 1997, -127);
	  COL_VERTEX(128, 1741, 128);
	  COL_VERTEX(184, 1741, 438);
	  COL_VERTEX(128, 1997, -127);
	  COL_VERTEX(128, 1741, -127);
	  COL_VERTEX(-183, 1741, -437);
	  COL_VERTEX(-437, 1792, -183);
	  COL_VERTEX(-183, 1792, -437);
	  COL_VERTEX(184, 1741, -437);
	  COL_VERTEX(128, 1997, 128);
	  COL_VERTEX(438, 1741, -183);
	  COL_VERTEX(184, 1792, -437);
	  COL_VERTEX(438, 1792, -183);
	  COL_VERTEX(438, 1741, 184);
	  COL_VERTEX(438, 1792, 184);
	  COL_VERTEX(184, 1792, 438);
	  COL_VERTEX(-263, 1997, -158);
	  COL_VERTEX(0, 2509, 0);
	  COL_VERTEX(-157, 1997, -264);
	  COL_VERTEX(153, 1997, -264);
	  COL_VERTEX(-157, 1997, 258);
	  COL_VERTEX(-263, 1997, 152);
	  COL_VERTEX(171, 1997, 258);
	  COL_VERTEX(260, 1997, 152);
	  COL_VERTEX(260, 1997, -158);
	  COL_VERTEX(215, 1792, 512);
	  COL_VERTEX(-214, 1792, 512);
	  COL_VERTEX(512, 1792, 215);
	  COL_VERTEX(-511, 0, -214);
	  COL_VERTEX(-511, 0, 215);
	  COL_VERTEX(-214, 0, -511);
	  COL_VERTEX(-511, 205, 108);
	  COL_VERTEX(-214, 0, 512);
	  COL_VERTEX(215, 0, 512);
	  COL_VERTEX(512, 0, 215);
	  COL_VERTEX(512, 0, -214);
	  COL_VERTEX(215, 0, -511);
	  COL_VERTEX(512, 1792, -214);
	  COL_VERTEX(215, 1792, -511);
	  COL_VERTEX(-214, 1792, -511);
	  COL_VERTEX(-511, 1536, -214);
	  COL_VERTEX(-511, 205, -107);
	  COL_VERTEX(-511, 1792, -214);
	  COL_VERTEX(-511, 1792, 215);
	  COL_VERTEX(-511, 0, -107);
	  COL_VERTEX(-306, 0, -107);
	  COL_VERTEX(215, 1536, 512);
	  COL_VERTEX(512, 1536, 215);
	  COL_VERTEX(512, 1536, -214);
	  COL_VERTEX(-214, 1536, 512);
	  COL_VERTEX(-214, 1536, -511);
	  COL_VERTEX(215, 1536, -511);
	  COL_VERTEX(-511, 1536, 215);
	  COL_VERTEX(-511, 0, 108);
	  COL_VERTEX(-306, 0, 108);
	  COL_VERTEX(-306, 205, 108);
	  COL_VERTEX(-306, 205, -107);
	  COL_TRI_INIT(SURFACE_DEFAULT, 116);
	  COL_TRI(13, 5, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(3, 4, 1);
	  COL_TRI(3, 1, 0);
	  COL_TRI(1, 5, 2);
	  COL_TRI(1, 6, 5);
	  COL_TRI(4, 6, 1);
	  COL_TRI(6, 7, 8);
	  COL_TRI(9, 7, 6);
	  COL_TRI(6, 8, 5);
	  COL_TRI(10, 9, 6);
	  COL_TRI(10, 6, 4);
	  COL_TRI(5, 11, 12);
	  COL_TRI(5, 8, 11);
	  COL_TRI(2, 5, 13);
	  COL_TRI(0, 2, 14);
	  COL_TRI(14, 2, 13);
	  COL_TRI(14, 13, 15);
	  COL_TRI(15, 13, 16);
	  COL_TRI(13, 12, 16);
	  COL_TRI(12, 17, 9);
	  COL_TRI(12, 11, 17);
	  COL_TRI(18, 12, 9);
	  COL_TRI(16, 12, 18);
	  COL_TRI(15, 16, 19);
	  COL_TRI(19, 16, 18);
	  COL_TRI(19, 18, 20);
	  COL_TRI(20, 18, 21);
	  COL_TRI(18, 9, 21);
	  COL_TRI(9, 17, 7);
	  COL_TRI(21, 9, 10);
	  COL_TRI(22, 21, 10);
	  COL_TRI(20, 21, 22);
	  COL_TRI(23, 10, 4);
	  COL_TRI(22, 10, 23);
	  COL_TRI(23, 4, 3);
	  COL_TRI(24, 29, 25);
	  COL_TRI(25, 26, 24);
	  COL_TRI(8, 24, 26);
	  COL_TRI(24, 8, 7);
	  COL_TRI(24, 7, 29);
	  COL_TRI(8, 26, 27);
	  COL_TRI(8, 27, 11);
	  COL_TRI(28, 7, 17);
	  COL_TRI(29, 7, 28);
	  COL_TRI(25, 29, 28);
	  COL_TRI(30, 25, 28);
	  COL_TRI(28, 17, 30);
	  COL_TRI(17, 31, 30);
	  COL_TRI(11, 31, 17);
	  COL_TRI(30, 31, 25);
	  COL_TRI(32, 25, 31);
	  COL_TRI(11, 32, 31);
	  COL_TRI(27, 32, 11);
	  COL_TRI(32, 27, 25);
	  COL_TRI(25, 27, 26);
	  COL_TRI(33, 35, 22);
	  COL_TRI(36, 58, 38);
	  COL_TRI(34, 54, 33);
	  COL_TRI(33, 54, 55);
	  COL_TRI(33, 55, 35);
	  COL_TRI(34, 57, 54);
	  COL_TRI(35, 55, 56);
	  COL_TRI(22, 35, 45);
	  COL_TRI(35, 56, 45);
	  COL_TRI(36, 48, 58);
	  COL_TRI(37, 60, 48);
	  COL_TRI(38, 58, 59);
	  COL_TRI(38, 59, 44);
	  COL_TRI(39, 37, 48);
	  COL_TRI(39, 61, 37);
	  COL_TRI(40, 60, 37);
	  COL_TRI(40, 57, 60);
	  COL_TRI(41, 57, 40);
	  COL_TRI(45, 59, 46);
	  COL_TRI(41, 54, 57);
	  COL_TRI(42, 54, 41);
	  COL_TRI(42, 55, 54);
	  COL_TRI(43, 55, 42);
	  COL_TRI(43, 56, 55);
	  COL_TRI(44, 56, 43);
	  COL_TRI(44, 59, 56);
	  COL_TRI(45, 56, 59);
	  COL_TRI(22, 45, 20);
	  COL_TRI(50, 48, 60);
	  COL_TRI(45, 46, 19);
	  COL_TRI(46, 47, 15);
	  COL_TRI(46, 15, 19);
	  COL_TRI(47, 14, 15);
	  COL_TRI(47, 50, 14);
	  COL_TRI(47, 58, 48);
	  COL_TRI(47, 48, 50);
	  COL_TRI(48, 52, 49);
	  COL_TRI(49, 39, 48);
	  COL_TRI(48, 36, 52);
	  COL_TRI(34, 23, 3);
	  COL_TRI(34, 33, 23);
	  COL_TRI(45, 19, 20);
	  COL_TRI(50, 51, 0);
	  COL_TRI(50, 0, 14);
	  COL_TRI(50, 60, 51);
	  COL_TRI(51, 60, 57);
	  COL_TRI(51, 34, 3);
	  COL_TRI(51, 3, 0);
	  COL_TRI(51, 57, 34);
	  COL_TRI(53, 63, 64);
	  COL_TRI(33, 22, 23);
	  COL_TRI(46, 59, 58);
	  COL_TRI(46, 58, 47);
	  COL_TRI(52, 64, 49);
	  COL_TRI(52, 53, 64);
	  COL_TRI(49, 64, 63);
	  COL_TRI(49, 63, 39);
	  COL_TRI(39, 62, 61);
	  COL_TRI(39, 63, 62);
	  COL_TRI(53, 62, 63);
	  COL_TRI_STOP();
	  COL_END();
	}

	function wf_seg7_collision_bullet_bill_cannon() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(-127, 0, -127);
	  COL_VERTEX(128, 256, -127);
	  COL_VERTEX(128, 0, -127);
	  COL_VERTEX(128, 256, 179);
	  COL_VERTEX(128, 0, 179);
	  COL_VERTEX(-127, 256, -127);
	  COL_VERTEX(-127, 256, 179);
	  COL_VERTEX(-127, 0, 179);
	  COL_TRI_INIT(SURFACE_DEFAULT, 10);
	  COL_TRI(0, 1, 2);
	  COL_TRI(2, 1, 3);
	  COL_TRI(2, 3, 4);
	  COL_TRI(0, 5, 1);
	  COL_TRI(5, 3, 1);
	  COL_TRI(5, 6, 3);
	  COL_TRI(4, 3, 6);
	  COL_TRI(4, 6, 7);
	  COL_TRI(7, 6, 5);
	  COL_TRI(7, 5, 0);
	  COL_TRI_STOP();
	  COL_END();
	}

	function wf_seg7_collision_trapezoid() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(-214, 102, -204);
	  COL_VERTEX(-214, 0, -204);
	  COL_VERTEX(-504, 0, 85);
	  COL_VERTEX(-504, 102, 85);
	  COL_VERTEX(215, 102, -204);
	  COL_VERTEX(505, 0, 85);
	  COL_VERTEX(505, 102, 85);
	  COL_VERTEX(215, 0, -204);
	  COL_TRI_INIT(SURFACE_DEFAULT, 10);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(4, 0, 3);
	  COL_TRI(5, 2, 1);
	  COL_TRI(3, 2, 5);
	  COL_TRI(3, 5, 6);
	  COL_TRI(4, 3, 6);
	  COL_TRI(5, 1, 7);
	  COL_TRI(6, 5, 7);
	  COL_TRI(6, 7, 4);
	  COL_TRI_STOP();
	  COL_END();
	}

	function wf_seg7_collision_breakable_wall_2() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x4);
	  COL_VERTEX(0, -383, 128);
	  COL_VERTEX(0, 384, 128);
	  COL_VERTEX(-168, 384, -378);
	  COL_VERTEX(0, 384, -378);
	  COL_TRI_INIT(SURFACE_DEFAULT, 3);
	  COL_TRI(3, 2, 1);
	  COL_TRI(0, 1, 2);
	  COL_TRI(3, 1, 0);
	  COL_TRI_STOP();
	  COL_END();
	}

	function wf_seg7_collision_breakable_wall() {
	    COL_INIT();
	    COL_VERTEX_INIT(0x4);
	    COL_VERTEX(0, 384, 128);
	    COL_VERTEX(184, 384, -378);
	    COL_VERTEX(0, 384, -378);
	    COL_VERTEX(0, -383, 128);
	    COL_TRI_INIT(SURFACE_DEFAULT, 3);
	    COL_TRI(3, 1, 0);
	    COL_TRI(0, 1, 2);
	    COL_TRI(3, 0, 2);
	    COL_TRI_STOP();
	    COL_END();
	}

	function wf_seg7_collision_platform() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(-214, 102, -204);
	  COL_VERTEX(-214, 0, -204);
	  COL_VERTEX(-214, 0, 205);
	  COL_VERTEX(-214, 102, 205);
	  COL_VERTEX(215, 102, -204);
	  COL_VERTEX(215, 0, 205);
	  COL_VERTEX(215, 102, 205);
	  COL_VERTEX(215, 0, -204);
	  COL_TRI_INIT(SURFACE_DEFAULT, 10);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(4, 0, 3);
	  COL_TRI(5, 2, 1);
	  COL_TRI(3, 2, 5);
	  COL_TRI(3, 5, 6);
	  COL_TRI(4, 3, 6);
	  COL_TRI(5, 1, 7);
	  COL_TRI(6, 5, 7);
	  COL_TRI(6, 7, 4);
	  COL_TRI_STOP();
	  COL_END();
	}

	function wf_seg7_collision_kickable_board() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x8);
	  COL_VERTEX(-96, 0, 0);
	  COL_VERTEX(-96, 1178, 77);
	  COL_VERTEX(-96, 1178, 0);
	  COL_VERTEX(95, 1178, 77);
	  COL_VERTEX(95, 1178, 0);
	  COL_VERTEX(95, 0, 0);
	  COL_VERTEX(95, 0, 77);
	  COL_VERTEX(-96, 0, 77);
	  COL_TRI_INIT(SURFACE_WALL_MISC, 12);
	  COL_TRI(0, 1, 2);
	  COL_TRI(2, 1, 3);
	  COL_TRI(2, 3, 4);
	  COL_TRI(2, 4, 5);
	  COL_TRI(2, 5, 0);
	  COL_TRI(4, 3, 6);
	  COL_TRI(4, 6, 5);
	  COL_TRI(0, 7, 1);
	  COL_TRI(3, 1, 7);
	  COL_TRI(3, 7, 6);
	  COL_TRI(5, 6, 7);
	  COL_TRI(5, 7, 0);
	  COL_TRI_STOP();
	  COL_END();
	}

	function wf_seg7_collision_large_bomp() {
	  COL_INIT();
	  COL_VERTEX_INIT(0xE);
	  COL_VERTEX(259, 5, -258);
	  COL_VERTEX(195, 210, -258);
	  COL_VERTEX(259, 210, -194);
	  COL_VERTEX(259, 210, 189);
	  COL_VERTEX(259, 5, 253);
	  COL_VERTEX(-252, 210, -258);
	  COL_VERTEX(-252, 5, -258);
	  COL_VERTEX(136, 261, -155);
	  COL_VERTEX(195, 210, 253);
	  COL_VERTEX(136, 261, 151);
	  COL_VERTEX(-252, 5, 253);
	  COL_VERTEX(-252, 261, 151);
	  COL_VERTEX(-252, 261, -155);
	  COL_VERTEX(-252, 210, 253);
	  COL_TRI_INIT(SURFACE_WALL_MISC, 18);
	  COL_TRI(12, 1, 5);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 4);
	  COL_TRI(0, 2, 3);
	  COL_TRI(5, 1, 0);
	  COL_TRI(5, 0, 6);
	  COL_TRI(1, 7, 2);
	  COL_TRI(7, 3, 2);
	  COL_TRI(3, 8, 4);
	  COL_TRI(3, 9, 8);
	  COL_TRI(7, 9, 3);
	  COL_TRI(10, 4, 8);
	  COL_TRI(11, 7, 12);
	  COL_TRI(11, 9, 7);
	  COL_TRI(12, 7, 1);
	  COL_TRI(10, 8, 13);
	  COL_TRI(13, 8, 9);
	  COL_TRI(13, 9, 11);
	  COL_TRI_STOP();
	  COL_END();
	}

	function wf_seg7_collision_rotating_platform() {
	  COL_INIT();
	  COL_VERTEX_INIT(0xD);
	  COL_VERTEX(-442, 0, -255);
	  COL_VERTEX(0, 0, 512);
	  COL_VERTEX(256, 0, 443);
	  COL_VERTEX(-255, 0, 443);
	  COL_VERTEX(-442, 0, 256);
	  COL_VERTEX(-511, 0, 0);
	  COL_VERTEX(443, 0, 256);
	  COL_VERTEX(0, 0, -511);
	  COL_VERTEX(-255, 0, -442);
	  COL_VERTEX(256, 0, -442);
	  COL_VERTEX(443, 0, -255);
	  COL_VERTEX(512, 0, 0);
	  COL_VERTEX(0, -255, 0);
	  COL_TRI_INIT(SURFACE_DEFAULT, 12);
	  COL_TRI(8, 12, 0);
	  COL_TRI(8, 7, 12);
	  COL_TRI(10, 11, 12);
	  COL_TRI(9, 10, 12);
	  COL_TRI(7, 9, 12);
	  COL_TRI(0, 12, 5);
	  COL_TRI(11, 6, 12);
	  COL_TRI(4, 5, 12);
	  COL_TRI(3, 4, 12);
	  COL_TRI(1, 3, 12);
	  COL_TRI(2, 1, 12);
	  COL_TRI(6, 2, 12);
	  COL_TRI_INIT(SURFACE_NOISE_DEFAULT, 10);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(0, 4, 3);
	  COL_TRI(0, 5, 4);
	  COL_TRI(0, 2, 6);
	  COL_TRI(0, 7, 8);
	  COL_TRI(0, 9, 7);
	  COL_TRI(0, 10, 9);
	  COL_TRI(0, 11, 10);
	  COL_TRI(0, 6, 11);
	  COL_TRI_STOP();
	  COL_END();
	}

	function wf_seg7_collision_clocklike_rotation() {
	  COL_INIT();
	  COL_VERTEX_INIT(0xA);
	  COL_VERTEX(0, 0, -204);
	  COL_VERTEX(-176, 0, -101);
	  COL_VERTEX(-176, 0, 102);
	  COL_VERTEX(0, 0, 205);
	  COL_VERTEX(177, 0, 102);
	  COL_VERTEX(177, 0, -101);
	  COL_VERTEX(0, -127, 0);
	  COL_VERTEX(768, -127, 0);
	  COL_VERTEX(768, 0, -101);
	  COL_VERTEX(768, 0, 102);
	  COL_TRI_INIT(SURFACE_DEFAULT, 15);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI(0, 3, 4);
	  COL_TRI(0, 4, 5);
	  COL_TRI(3, 6, 4);
	  COL_TRI(2, 6, 3);
	  COL_TRI(1, 6, 2);
	  COL_TRI(0, 6, 1);
	  COL_TRI(8, 7, 5);
	  COL_TRI(5, 6, 0);
	  COL_TRI(6, 7, 9);
	  COL_TRI(4, 6, 9);
	  COL_TRI(5, 4, 9);
	  COL_TRI(5, 9, 8);
	  COL_TRI(7, 6, 5);
	  COL_TRI_STOP();
	  COL_END();
	}

	function wf_seg7_collision_sliding_brick_platform() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x6);
	  COL_VERTEX(256, 0, 256);
	  COL_VERTEX(256, -50, -255);
	  COL_VERTEX(256, 0, -255);
	  COL_VERTEX(256, -50, 256);
	  COL_VERTEX(-255, 0, -255);
	  COL_VERTEX(-255, 0, 256);
	  COL_TRI_INIT(SURFACE_DEFAULT, 4);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 3, 1);
	  COL_TRI(0, 4, 5);
	  COL_TRI(0, 2, 4);
	  COL_TRI_STOP();
	  COL_END();
	}

	function wf_seg7_collision_small_bomp() {
	    COL_INIT();
	    COL_VERTEX_INIT(0xE);
	    COL_VERTEX(259, 5, -128);
	    COL_VERTEX(195, 210, -128);
	    COL_VERTEX(259, 210, -96);
	    COL_VERTEX(259, 210, 95);
	    COL_VERTEX(259, 5, 127);
	    COL_VERTEX(-252, 210, -128);
	    COL_VERTEX(-252, 5, -128);
	    COL_VERTEX(136, 261, -77);
	    COL_VERTEX(195, 210, 127);
	    COL_VERTEX(136, 261, 75);
	    COL_VERTEX(-252, 5, 127);
	    COL_VERTEX(-252, 261, 75);
	    COL_VERTEX(-252, 261, -77);
	    COL_VERTEX(-252, 210, 127);
	    COL_TRI_INIT(SURFACE_WALL_MISC, 18);
	    COL_TRI(0, 1, 2);
	    COL_TRI(0, 3, 4);
	    COL_TRI(0, 2, 3);
	    COL_TRI(5, 1, 0);
	    COL_TRI(5, 0, 6);
	    COL_TRI(1, 7, 2);
	    COL_TRI(7, 3, 2);
	    COL_TRI(3, 8, 4);
	    COL_TRI(3, 9, 8);
	    COL_TRI(7, 9, 3);
	    COL_TRI(10, 4, 8);
	    COL_TRI(11, 7, 12);
	    COL_TRI(11, 9, 7);
	    COL_TRI(12, 7, 1);
	    COL_TRI(8, 9, 11);
	    COL_TRI(12, 1, 5);
	    COL_TRI(13, 8, 11);
	    COL_TRI(10, 8, 13);
	    COL_TRI_STOP();
	    COL_END();
	}

	function wf_seg7_collision_tower_door() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x4);
	  COL_VERTEX(0, 0, -107);
	  COL_VERTEX(0, 0, 108);
	  COL_VERTEX(0, 205, 108);
	  COL_VERTEX(0, 205, -107);
	  COL_TRI_INIT(SURFACE_DEFAULT, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI_STOP();
	  COL_END();
	}

	function wf_seg7_collision_tumbling_bridge() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x4);
	  COL_VERTEX(-127, 64, -63);
	  COL_VERTEX(-127, 64, 64);
	  COL_VERTEX(215, 64, 64);
	  COL_VERTEX(215, 64, -63);
	  COL_TRI_INIT(SURFACE_DEFAULT, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI_STOP();
	  COL_END();
	}

	var wf = [
	  wf_seg7_collision_070102D8,
	  wf_seg7_collision_tower,
	  wf_seg7_collision_bullet_bill_cannon,
	  wf_seg7_collision_trapezoid,
	  wf_seg7_collision_breakable_wall_2,
	  wf_seg7_collision_breakable_wall,
	  wf_seg7_collision_platform,
	  wf_seg7_collision_kickable_board,
	  wf_seg7_collision_large_bomp,
	  wf_seg7_collision_rotating_platform,
	  wf_seg7_collision_clocklike_rotation,
	  wf_seg7_collision_sliding_brick_platform,
	  wf_seg7_collision_small_bomp,
	  wf_seg7_collision_tower_door,
	  wf_seg7_collision_tumbling_bridge
	];

	function wmotr_seg7_collision() {
	  COL_INIT();
	  COL_VERTEX_INIT(0x2B6);
	  COL_VERTEX(8192, -8191, -8191);
	  COL_VERTEX(-8191, -8191, -8191);
	  COL_VERTEX(-8191, -8191, 8192);
	  COL_VERTEX(8192, -8191, 8192);
	  COL_VERTEX(-2851, 2017, -4091);
	  COL_VERTEX(-3358, 2017, -4101);
	  COL_VERTEX(-2691, 2017, -4040);
	  COL_VERTEX(-3172, 2017, -4261);
	  COL_VERTEX(-2955, 2017, -4241);
	  COL_VERTEX(-3465, 1968, -4172);
	  COL_VERTEX(-3398, 2017, -3950);
	  COL_VERTEX(-2763, 2017, -3982);
	  COL_VERTEX(-2816, 2017, -3921);
	  COL_VERTEX(-2915, 2017, -3739);
	  COL_VERTEX(-3066, 2017, -3665);
	  COL_VERTEX(-3255, 2017, -3709);
	  COL_VERTEX(-3365, 2017, -3821);
	  COL_VERTEX(-2690, 1968, -3915);
	  COL_VERTEX(-2477, 2017, -4439);
	  COL_VERTEX(-2434, 2017, -4266);
	  COL_VERTEX(-2536, 2017, -4122);
	  COL_VERTEX(-2613, 2017, -4548);
	  COL_VERTEX(-2872, 2017, -4417);
	  COL_VERTEX(-2770, 2017, -4532);
	  COL_VERTEX(-2456, 1968, -4039);
	  COL_VERTEX(-3357, 2017, -4585);
	  COL_VERTEX(-2888, 2017, -4606);
	  COL_VERTEX(-2832, 1968, -3655);
	  COL_VERTEX(-3048, 1968, -3549);
	  COL_VERTEX(-3319, 1968, -3612);
	  COL_VERTEX(-3476, 1968, -3771);
	  COL_VERTEX(-3522, 1968, -3956);
	  COL_VERTEX(-2986, 1968, -4801);
	  COL_VERTEX(-2811, 1885, -4660);
	  COL_VERTEX(-2986, 1885, -4801);
	  COL_VERTEX(-2573, 1885, -4686);
	  COL_VERTEX(-2366, 1885, -4520);
	  COL_VERTEX(-2301, 1885, -4258);
	  COL_VERTEX(-2456, 1885, -4039);
	  COL_VERTEX(-2690, 1885, -3915);
	  COL_VERTEX(-3430, 2017, -4449);
	  COL_VERTEX(-3418, 2017, -4322);
	  COL_VERTEX(-3522, 1885, -3956);
	  COL_VERTEX(-3465, 1885, -4172);
	  COL_VERTEX(-3534, 1885, -4279);
	  COL_VERTEX(-3447, 1968, -4653);
	  COL_VERTEX(-3552, 1885, -4460);
	  COL_VERTEX(-3216, 2017, -4679);
	  COL_VERTEX(-3447, 1885, -4653);
	  COL_VERTEX(-3034, 2017, -4688);
	  COL_VERTEX(-3246, 1885, -4788);
	  COL_VERTEX(-2832, 1885, -3655);
	  COL_VERTEX(-3048, 1885, -3549);
	  COL_VERTEX(-3319, 1885, -3612);
	  COL_VERTEX(-3476, 1885, -3771);
	  COL_VERTEX(-2842, 1843, -3693);
	  COL_VERTEX(-3044, 1843, -3594);
	  COL_VERTEX(-3447, 1843, -3803);
	  COL_VERTEX(-3436, 1843, -4179);
	  COL_VERTEX(-3501, 1843, -4280);
	  COL_VERTEX(-2708, 1843, -3938);
	  COL_VERTEX(-2488, 1843, -4054);
	  COL_VERTEX(-2342, 1843, -4260);
	  COL_VERTEX(-2403, 1843, -4507);
	  COL_VERTEX(-2598, 1843, -4663);
	  COL_VERTEX(-2821, 1843, -4639);
	  COL_VERTEX(-3230, 1843, -4759);
	  COL_VERTEX(-3419, 1843, -4632);
	  COL_VERTEX(-3518, 1843, -4450);
	  COL_VERTEX(4233, 174, 207);
	  COL_VERTEX(4393, 174, 258);
	  COL_VERTEX(3619, 124, 127);
	  COL_VERTEX(3726, 174, 198);
	  COL_VERTEX(4393, 124, 383);
	  COL_VERTEX(3911, 174, 38);
	  COL_VERTEX(4211, 174, -118);
	  COL_VERTEX(4196, 174, -306);
	  COL_VERTEX(3726, 174, -285);
	  COL_VERTEX(4470, 174, -249);
	  COL_VERTEX(4607, 174, -140);
	  COL_VERTEX(4650, 174, 33);
	  COL_VERTEX(4547, 174, 177);
	  COL_VERTEX(4268, 174, 377);
	  COL_VERTEX(4168, 174, 560);
	  COL_VERTEX(4017, 174, 633);
	  COL_VERTEX(3828, 174, 589);
	  COL_VERTEX(3718, 174, 478);
	  COL_VERTEX(3608, 124, 527);
	  COL_VERTEX(3561, 124, 342);
	  COL_VERTEX(4273, 41, -360);
	  COL_VERTEX(4098, 41, -502);
	  COL_VERTEX(4098, 124, -502);
	  COL_VERTEX(4510, 41, -386);
	  COL_VERTEX(4717, 41, -221);
	  COL_VERTEX(4783, 41, 41);
	  COL_VERTEX(4627, 41, 260);
	  COL_VERTEX(4393, 41, 383);
	  COL_VERTEX(3653, 174, -150);
	  COL_VERTEX(3665, 174, -23);
	  COL_VERTEX(3619, 41, 127);
	  COL_VERTEX(3561, 41, 342);
	  COL_VERTEX(3550, 41, 20);
	  COL_VERTEX(3637, 124, -354);
	  COL_VERTEX(3532, 41, -161);
	  COL_VERTEX(3867, 174, -379);
	  COL_VERTEX(3637, 41, -354);
	  COL_VERTEX(4049, 174, -388);
	  COL_VERTEX(3838, 41, -488);
	  COL_VERTEX(4251, 41, 644);
	  COL_VERTEX(4035, 41, 749);
	  COL_VERTEX(3765, 41, 686);
	  COL_VERTEX(3608, 41, 527);
	  COL_VERTEX(4242, 0, 606);
	  COL_VERTEX(4039, 0, 705);
	  COL_VERTEX(3637, 0, 496);
	  COL_VERTEX(3647, 0, 119);
	  COL_VERTEX(4375, 0, 360);
	  COL_VERTEX(3582, 0, 19);
	  COL_VERTEX(4595, 0, 244);
	  COL_VERTEX(4742, 0, 38);
	  COL_VERTEX(4680, 0, -208);
	  COL_VERTEX(4486, 0, -363);
	  COL_VERTEX(4262, 0, -339);
	  COL_VERTEX(3853, 0, -459);
	  COL_VERTEX(3664, 0, -333);
	  COL_VERTEX(3565, 0, -151);
	  COL_VERTEX(-1099, -1415, 4467);
	  COL_VERTEX(-495, -1415, 4608);
	  COL_VERTEX(-968, -1415, 4380);
	  COL_VERTEX(-333, -1415, 4944);
	  COL_VERTEX(-978, -1443, 4323);
	  COL_VERTEX(-414, -1415, 4291);
	  COL_VERTEX(-89, -1415, 4576);
	  COL_VERTEX(-841, -1415, 4167);
	  COL_VERTEX(-51, -1415, 4577);
	  COL_VERTEX(-372, -1443, 4066);
	  COL_VERTEX(-72, -1415, 4818);
	  COL_VERTEX(108, -1443, 4571);
	  COL_VERTEX(-378, -1415, 4733);
	  COL_VERTEX(-739, -1415, 4076);
	  COL_VERTEX(-591, -1415, 4058);
	  COL_VERTEX(-369, -1415, 4300);
	  COL_VERTEX(-162, -1415, 4093);
	  COL_VERTEX(-22, -1415, 4138);
	  COL_VERTEX(15, -1443, 4058);
	  COL_VERTEX(78, -1415, 4255);
	  COL_VERTEX(100, -1415, 4389);
	  COL_VERTEX(186, -1443, 4408);
	  COL_VERTEX(140, -1415, 4739);
	  COL_VERTEX(194, -1443, 4719);
	  COL_VERTEX(97, -1415, 4956);
	  COL_VERTEX(-57, -1415, 5074);
	  COL_VERTEX(-232, -1415, 5068);
	  COL_VERTEX(-271, -1443, 5130);
	  COL_VERTEX(-723, -1415, 4770);
	  COL_VERTEX(-932, -1443, 4913);
	  COL_VERTEX(-863, -1415, 4932);
	  COL_VERTEX(-767, -1415, 4775);
	  COL_VERTEX(-1080, -1415, 4791);
	  COL_VERTEX(-1118, -1443, 4835);
	  COL_VERTEX(-1204, -1443, 4626);
	  COL_VERTEX(-416, -1415, 5243);
	  COL_VERTEX(-593, -1415, 5286);
	  COL_VERTEX(-776, -1415, 5205);
	  COL_VERTEX(-857, -1415, 5075);
	  COL_VERTEX(-924, -1489, 5092);
	  COL_VERTEX(-932, -1489, 4913);
	  COL_VERTEX(-823, -1489, 5255);
	  COL_VERTEX(-594, -1489, 5355);
	  COL_VERTEX(-372, -1489, 5301);
	  COL_VERTEX(-271, -1489, 5130);
	  COL_VERTEX(-53, -1489, 5138);
	  COL_VERTEX(-1204, -1489, 4626);
	  COL_VERTEX(-1118, -1489, 4835);
	  COL_VERTEX(-1141, -1489, 4431);
	  COL_VERTEX(-978, -1489, 4323);
	  COL_VERTEX(-372, -1489, 4066);
	  COL_VERTEX(-574, -1489, 3957);
	  COL_VERTEX(-785, -1489, 3983);
	  COL_VERTEX(-932, -1489, 4113);
	  COL_VERTEX(108, -1489, 4571);
	  COL_VERTEX(186, -1489, 4408);
	  COL_VERTEX(155, -1489, 4222);
	  COL_VERTEX(15, -1489, 4058);
	  COL_VERTEX(-178, -1489, 3996);
	  COL_VERTEX(140, -1489, 4990);
	  COL_VERTEX(194, -1489, 4719);
	  COL_VERTEX(-902, -1535, 5067);
	  COL_VERTEX(-909, -1535, 4898);
	  COL_VERTEX(-806, -1535, 5222);
	  COL_VERTEX(-1108, -1535, 4440);
	  COL_VERTEX(-953, -1535, 4337);
	  COL_VERTEX(-1086, -1535, 4824);
	  COL_VERTEX(-588, -1535, 5318);
	  COL_VERTEX(-378, -1535, 5267);
	  COL_VERTEX(-282, -1535, 5104);
	  COL_VERTEX(-75, -1535, 5111);
	  COL_VERTEX(109, -1535, 4971);
	  COL_VERTEX(160, -1535, 4713);
	  COL_VERTEX(79, -1535, 4573);
	  COL_VERTEX(152, -1535, 4418);
	  COL_VERTEX(123, -1535, 4241);
	  COL_VERTEX(-9, -1535, 4086);
	  COL_VERTEX(-193, -1535, 4027);
	  COL_VERTEX(-378, -1535, 4093);
	  COL_VERTEX(-570, -1535, 3990);
	  COL_VERTEX(-770, -1535, 4014);
	  COL_VERTEX(-909, -1535, 4138);
	  COL_VERTEX(-1167, -1535, 4625);
	  COL_VERTEX(-3008, 2017, -4202);
	  COL_VERTEX(-2811, 1968, -4660);
	  COL_VERTEX(-2573, 1968, -4686);
	  COL_VERTEX(-2366, 1968, -4520);
	  COL_VERTEX(-2301, 1968, -4258);
	  COL_VERTEX(-3369, 2017, -4247);
	  COL_VERTEX(-3534, 1968, -4279);
	  COL_VERTEX(-3552, 1968, -4460);
	  COL_VERTEX(-3246, 1968, -4788);
	  COL_VERTEX(-3299, 1843, -3653);
	  COL_VERTEX(-3491, 1843, -3977);
	  COL_VERTEX(-2986, 1843, -4771);
	  COL_VERTEX(4129, 174, 58);
	  COL_VERTEX(4320, 174, 316);
	  COL_VERTEX(3685, 174, 348);
	  COL_VERTEX(4627, 124, 260);
	  COL_VERTEX(4313, 174, -232);
	  COL_VERTEX(4273, 124, -360);
	  COL_VERTEX(4510, 124, -386);
	  COL_VERTEX(4783, 124, 41);
	  COL_VERTEX(4251, 124, 644);
	  COL_VERTEX(4035, 124, 749);
	  COL_VERTEX(3765, 124, 686);
	  COL_VERTEX(4076, 174, 96);
	  COL_VERTEX(3714, 174, 51);
	  COL_VERTEX(4717, 124, -221);
	  COL_VERTEX(3550, 124, 20);
	  COL_VERTEX(3532, 124, -161);
	  COL_VERTEX(3838, 124, -488);
	  COL_VERTEX(3785, 0, 646);
	  COL_VERTEX(3593, 0, 322);
	  COL_VERTEX(4098, 0, -472);
	  COL_VERTEX(-627, -1415, 4720);
	  COL_VERTEX(-258, -1415, 4615);
	  COL_VERTEX(-871, -1415, 4365);
	  COL_VERTEX(-874, -1415, 4314);
	  COL_VERTEX(-356, -1415, 4777);
	  COL_VERTEX(-525, -1415, 4822);
	  COL_VERTEX(-931, -1415, 4853);
	  COL_VERTEX(-1141, -1443, 4431);
	  COL_VERTEX(-1148, -1415, 4623);
	  COL_VERTEX(-450, -1415, 4135);
	  COL_VERTEX(44, -1415, 4507);
	  COL_VERTEX(72, -1415, 4621);
	  COL_VERTEX(-302, -1415, 4143);
	  COL_VERTEX(-932, -1443, 4113);
	  COL_VERTEX(-785, -1443, 3983);
	  COL_VERTEX(-574, -1443, 3957);
	  COL_VERTEX(-178, -1443, 3996);
	  COL_VERTEX(155, -1443, 4222);
	  COL_VERTEX(140, -1443, 4990);
	  COL_VERTEX(-53, -1443, 5138);
	  COL_VERTEX(-335, -1415, 5106);
	  COL_VERTEX(-372, -1443, 5301);
	  COL_VERTEX(-594, -1443, 5355);
	  COL_VERTEX(-823, -1443, 5255);
	  COL_VERTEX(-924, -1443, 5092);
	  COL_VERTEX(-4350, 824, 88);
	  COL_VERTEX(-4197, 824, -321);
	  COL_VERTEX(-4709, 824, -321);
	  COL_VERTEX(-3941, 824, -65);
	  COL_VERTEX(-4350, 824, 293);
	  COL_VERTEX(-4555, 824, 88);
	  COL_VERTEX(-4965, 824, -65);
	  COL_VERTEX(-4555, 824, 293);
	  COL_VERTEX(-3941, 824, 446);
	  COL_VERTEX(-4709, 824, 702);
	  COL_VERTEX(-4197, 824, 702);
	  COL_VERTEX(-4965, 824, 446);
	  COL_VERTEX(3811, -2738, 5302);
	  COL_VERTEX(4631, -2738, 4739);
	  COL_VERTEX(3811, -2738, 5097);
	  COL_VERTEX(4170, -2738, 4278);
	  COL_VERTEX(3248, -2738, 4278);
	  COL_VERTEX(3607, -2738, 5097);
	  COL_VERTEX(2787, -2738, 4739);
	  COL_VERTEX(4631, -2738, 5660);
	  COL_VERTEX(3248, -2738, 6121);
	  COL_VERTEX(4170, -2738, 6121);
	  COL_VERTEX(2787, -2738, 5660);
	  COL_VERTEX(3607, -2738, 5302);
	  COL_VERTEX(-4965, 671, 446);
	  COL_VERTEX(-4965, 671, -65);
	  COL_VERTEX(-4453, 5, 190);
	  COL_VERTEX(-4709, 671, -321);
	  COL_VERTEX(-4197, 671, -321);
	  COL_VERTEX(-4709, 671, 702);
	  COL_VERTEX(-4197, 671, 702);
	  COL_VERTEX(-3941, 671, -65);
	  COL_VERTEX(-3941, 671, 446);
	  COL_VERTEX(-4350, 312, 293);
	  COL_VERTEX(-4555, 312, 293);
	  COL_VERTEX(-4555, 312, 88);
	  COL_VERTEX(-4350, 312, 88);
	  COL_VERTEX(3607, -3250, 5302);
	  COL_VERTEX(4170, -2891, 4278);
	  COL_VERTEX(3248, -2891, 4278);
	  COL_VERTEX(4631, -2891, 4739);
	  COL_VERTEX(3248, -2891, 6121);
	  COL_VERTEX(4170, -2891, 6121);
	  COL_VERTEX(4631, -2891, 5660);
	  COL_VERTEX(3709, -3557, 5200);
	  COL_VERTEX(2787, -2891, 4739);
	  COL_VERTEX(2787, -2891, 5660);
	  COL_VERTEX(3811, -3250, 5302);
	  COL_VERTEX(3607, -3250, 5097);
	  COL_VERTEX(3811, -3250, 5097);
	  COL_VERTEX(-2318, 4403, -3596);
	  COL_VERTEX(-2302, 4468, -3584);
	  COL_VERTEX(-2468, 4468, -3562);
	  COL_VERTEX(-2481, 4403, -3574);
	  COL_VERTEX(-2130, 4403, -3688);
	  COL_VERTEX(-2635, 4468, -3618);
	  COL_VERTEX(-2645, 4403, -3629);
	  COL_VERTEX(-2110, 4468, -3678);
	  COL_VERTEX(-2579, 4468, -3385);
	  COL_VERTEX(-2591, 4403, -3401);
	  COL_VERTEX(-2658, 4468, -3208);
	  COL_VERTEX(-2667, 4403, -3227);
	  COL_VERTEX(-2825, 4468, -3096);
	  COL_VERTEX(-2831, 4403, -3118);
	  COL_VERTEX(-3069, 4468, -3131);
	  COL_VERTEX(-3070, 4403, -3152);
	  COL_VERTEX(-3214, 4403, -3282);
	  COL_VERTEX(-3216, 4468, -3264);
	  COL_VERTEX(-3296, 4403, -3439);
	  COL_VERTEX(-3488, 4403, -3316);
	  COL_VERTEX(-3693, 4403, -3275);
	  COL_VERTEX(-3885, 4468, -3368);
	  COL_VERTEX(-3870, 4403, -3385);
	  COL_VERTEX(-3952, 4403, -3576);
	  COL_VERTEX(-3940, 4403, -3744);
	  COL_VERTEX(-3857, 4403, -3863);
	  COL_VERTEX(-3760, 4403, -3918);
	  COL_VERTEX(-3901, 4403, -3904);
	  COL_VERTEX(-4096, 4403, -3987);
	  COL_VERTEX(-4115, 4468, -3983);
	  COL_VERTEX(-4198, 4403, -4144);
	  COL_VERTEX(-4198, 4403, -4322);
	  COL_VERTEX(-4123, 4403, -4499);
	  COL_VERTEX(-3944, 4403, -4601);
	  COL_VERTEX(-3751, 4403, -4604);
	  COL_VERTEX(-3826, 4403, -4739);
	  COL_VERTEX(-3804, 4403, -4905);
	  COL_VERTEX(-3680, 4403, -5119);
	  COL_VERTEX(-3463, 4403, -5203);
	  COL_VERTEX(-3221, 4403, -5196);
	  COL_VERTEX(-3016, 4403, -5066);
	  COL_VERTEX(-2947, 4403, -4930);
	  COL_VERTEX(-2944, 4468, -4945);
	  COL_VERTEX(-2854, 4403, -5108);
	  COL_VERTEX(-2622, 4403, -5197);
	  COL_VERTEX(-2346, 4403, -5087);
	  COL_VERTEX(-2195, 4403, -4854);
	  COL_VERTEX(-2190, 4468, -4624);
	  COL_VERTEX(-2209, 4403, -4615);
	  COL_VERTEX(-2380, 4403, -4465);
	  COL_VERTEX(-2365, 4468, -4470);
	  COL_VERTEX(-2189, 4403, -4410);
	  COL_VERTEX(-2169, 4468, -4415);
	  COL_VERTEX(-2025, 4403, -4198);
	  COL_VERTEX(-2004, 4403, -3890);
	  COL_VERTEX(-3759, 4537, -4518);
	  COL_VERTEX(-3907, 4537, -4533);
	  COL_VERTEX(-3961, 4468, -4610);
	  COL_VERTEX(-4143, 4468, -4505);
	  COL_VERTEX(-3763, 4468, -4612);
	  COL_VERTEX(-2748, 4537, -4557);
	  COL_VERTEX(-2685, 4537, -4438);
	  COL_VERTEX(-2910, 4537, -4412);
	  COL_VERTEX(-2949, 4537, -4666);
	  COL_VERTEX(-3039, 4537, -4633);
	  COL_VERTEX(-3072, 4537, -4181);
	  COL_VERTEX(-3143, 4537, -4517);
	  COL_VERTEX(-2787, 4537, -4064);
	  COL_VERTEX(-2742, 4537, -4070);
	  COL_VERTEX(-2703, 4537, -4260);
	  COL_VERTEX(-2002, 4468, -4198);
	  COL_VERTEX(-1981, 4468, -3884);
	  COL_VERTEX(-2070, 4537, -3896);
	  COL_VERTEX(-2182, 4537, -3715);
	  COL_VERTEX(-2101, 4537, -4162);
	  COL_VERTEX(-2340, 4537, -3644);
	  COL_VERTEX(-3153, 4537, -4116);
	  COL_VERTEX(-3220, 4537, -4345);
	  COL_VERTEX(-3323, 4537, -4154);
	  COL_VERTEX(-3201, 4537, -3992);
	  COL_VERTEX(-3096, 4537, -4087);
	  COL_VERTEX(-3278, 4537, -3967);
	  COL_VERTEX(-3455, 4537, -4058);
	  COL_VERTEX(-3144, 4537, -3838);
	  COL_VERTEX(-3342, 4537, -3807);
	  COL_VERTEX(-3249, 4509, -3639);
	  COL_VERTEX(-3038, 4538, -3744);
	  COL_VERTEX(-3508, 4537, -3724);
	  COL_VERTEX(-3336, 4537, -3655);
	  COL_VERTEX(-3188, 4542, -3619);
	  COL_VERTEX(-2919, 4537, -3466);
	  COL_VERTEX(-2996, 4537, -3823);
	  COL_VERTEX(-2899, 4537, -3804);
	  COL_VERTEX(-3299, 4468, -3424);
	  COL_VERTEX(-3218, 4542, -3452);
	  COL_VERTEX(-3331, 4537, -3491);
	  COL_VERTEX(-3706, 4537, -4131);
	  COL_VERTEX(-3757, 4537, -3975);
	  COL_VERTEX(-3643, 4537, -4214);
	  COL_VERTEX(-3710, 4537, -3882);
	  COL_VERTEX(-3773, 4468, -3912);
	  COL_VERTEX(-3566, 4537, -3754);
	  COL_VERTEX(-3789, 4537, -3837);
	  COL_VERTEX(-3488, 4537, -3390);
	  COL_VERTEX(-3151, 4542, -3323);
	  COL_VERTEX(-3029, 4537, -4889);
	  COL_VERTEX(-2980, 4496, -4818);
	  COL_VERTEX(-2918, 4537, -4863);
	  COL_VERTEX(-2959, 4537, -4734);
	  COL_VERTEX(-3059, 4534, -4716);
	  COL_VERTEX(-3212, 4537, -4538);
	  COL_VERTEX(-3081, 4537, -5002);
	  COL_VERTEX(-3013, 4468, -5084);
	  COL_VERTEX(-2490, 4537, -3617);
	  COL_VERTEX(-2644, 4537, -3677);
	  COL_VERTEX(-2706, 4537, -3709);
	  COL_VERTEX(-2802, 4542, -3735);
	  COL_VERTEX(-2642, 4542, -3420);
	  COL_VERTEX(-2745, 4537, -3815);
	  COL_VERTEX(-2462, 4537, -4017);
	  COL_VERTEX(-2808, 4537, -3849);
	  COL_VERTEX(-2623, 4537, -4446);
	  COL_VERTEX(-2424, 4537, -4386);
	  COL_VERTEX(-2339, 4537, -4616);
	  COL_VERTEX(-2482, 4537, -4499);
	  COL_VERTEX(-3871, 4468, -3857);
	  COL_VERTEX(-3886, 4537, -3986);
	  COL_VERTEX(-3594, 4537, -3625);
	  COL_VERTEX(-2930, 4537, -3979);
	  COL_VERTEX(-3144, 4537, -4003);
	  COL_VERTEX(-3094, 4537, -3877);
	  COL_VERTEX(-3434, 4537, -4395);
	  COL_VERTEX(-3686, 4537, -4628);
	  COL_VERTEX(-3622, 4537, -4579);
	  COL_VERTEX(-3689, 4537, -4484);
	  COL_VERTEX(-3742, 4537, -4734);
	  COL_VERTEX(-3679, 4537, -4329);
	  COL_VERTEX(-2641, 4537, -4746);
	  COL_VERTEX(-2848, 4468, -5127);
	  COL_VERTEX(-2836, 4537, -5007);
	  COL_VERTEX(-2612, 4468, -5218);
	  COL_VERTEX(-2330, 4468, -5105);
	  COL_VERTEX(-2176, 4468, -4868);
	  COL_VERTEX(-2705, 4542, -3279);
	  COL_VERTEX(-2839, 4542, -3189);
	  COL_VERTEX(-3034, 4542, -3217);
	  COL_VERTEX(-3655, 4537, -3357);
	  COL_VERTEX(-3495, 4468, -3298);
	  COL_VERTEX(-3800, 4537, -3446);
	  COL_VERTEX(-3704, 4468, -3257);
	  COL_VERTEX(-3867, 4537, -3603);
	  COL_VERTEX(-3857, 4537, -3740);
	  COL_VERTEX(-3969, 4468, -3564);
	  COL_VERTEX(-3957, 4468, -3735);
	  COL_VERTEX(-4031, 4537, -4031);
	  COL_VERTEX(-3916, 4468, -3899);
	  COL_VERTEX(-4115, 4537, -4160);
	  COL_VERTEX(-4115, 4537, -4305);
	  COL_VERTEX(-4220, 4468, -4143);
	  COL_VERTEX(-4053, 4537, -4450);
	  COL_VERTEX(-4220, 4468, -4324);
	  COL_VERTEX(-3724, 4537, -4870);
	  COL_VERTEX(-3840, 4468, -4750);
	  COL_VERTEX(-3631, 4535, -5054);
	  COL_VERTEX(-3818, 4468, -4919);
	  COL_VERTEX(-3446, 4537, -5113);
	  COL_VERTEX(-3691, 4468, -5138);
	  COL_VERTEX(-3248, 4537, -5108);
	  COL_VERTEX(-3470, 4468, -5223);
	  COL_VERTEX(-3223, 4468, -5217);
	  COL_VERTEX(-3820, 4537, -4249);
	  COL_VERTEX(-2700, 4537, -4600);
	  COL_VERTEX(941, 1536, 407);
	  COL_VERTEX(753, 1536, 499);
	  COL_VERTEX(590, 1536, 521);
	  COL_VERTEX(426, 1536, 466);
	  COL_VERTEX(480, 1536, 694);
	  COL_VERTEX(404, 1536, 868);
	  COL_VERTEX(246, 1601, 999);
	  COL_VERTEX(240, 1536, 977);
	  COL_VERTEX(1, 1536, 943);
	  COL_VERTEX(-142, 1536, 813);
	  COL_VERTEX(-144, 1601, 831);
	  COL_VERTEX(-224, 1536, 656);
	  COL_VERTEX(-416, 1536, 779);
	  COL_VERTEX(-621, 1536, 820);
	  COL_VERTEX(-813, 1601, 727);
	  COL_VERTEX(-798, 1536, 710);
	  COL_VERTEX(-880, 1536, 519);
	  COL_VERTEX(-868, 1536, 351);
	  COL_VERTEX(-785, 1536, 232);
	  COL_VERTEX(-688, 1536, 177);
	  COL_VERTEX(-829, 1536, 191);
	  COL_VERTEX(-1024, 1536, 108);
	  COL_VERTEX(-1043, 1601, 112);
	  COL_VERTEX(-1126, 1536, -48);
	  COL_VERTEX(-1126, 1536, -226);
	  COL_VERTEX(-1051, 1536, -403);
	  COL_VERTEX(-872, 1536, -505);
	  COL_VERTEX(-679, 1536, -508);
	  COL_VERTEX(-754, 1536, -643);
	  COL_VERTEX(-732, 1536, -809);
	  COL_VERTEX(-608, 1536, -1023);
	  COL_VERTEX(-391, 1536, -1107);
	  COL_VERTEX(-149, 1536, -1100);
	  COL_VERTEX(55, 1536, -970);
	  COL_VERTEX(124, 1536, -834);
	  COL_VERTEX(127, 1601, -849);
	  COL_VERTEX(217, 1536, -1012);
	  COL_VERTEX(449, 1536, -1101);
	  COL_VERTEX(725, 1536, -991);
	  COL_VERTEX(876, 1536, -758);
	  COL_VERTEX(862, 1536, -519);
	  COL_VERTEX(881, 1601, -528);
	  COL_VERTEX(691, 1536, -369);
	  COL_VERTEX(706, 1601, -374);
	  COL_VERTEX(882, 1536, -314);
	  COL_VERTEX(902, 1601, -319);
	  COL_VERTEX(1046, 1536, -102);
	  COL_VERTEX(1067, 1536, 205);
	  COL_VERTEX(-835, 1669, -437);
	  COL_VERTEX(-889, 1601, -514);
	  COL_VERTEX(-687, 1669, -422);
	  COL_VERTEX(-1071, 1601, -409);
	  COL_VERTEX(-691, 1601, -516);
	  COL_VERTEX(323, 1669, -461);
	  COL_VERTEX(386, 1669, -342);
	  COL_VERTEX(161, 1669, -316);
	  COL_VERTEX(0, 1669, -85);
	  COL_VERTEX(-71, 1669, -421);
	  COL_VERTEX(122, 1669, -570);
	  COL_VERTEX(32, 1669, -537);
	  COL_VERTEX(329, 1669, 25);
	  COL_VERTEX(284, 1669, 31);
	  COL_VERTEX(368, 1669, -164);
	  COL_VERTEX(1069, 1601, -102);
	  COL_VERTEX(1090, 1601, 211);
	  COL_VERTEX(1001, 1669, 199);
	  COL_VERTEX(889, 1669, 380);
	  COL_VERTEX(961, 1601, 417);
	  COL_VERTEX(970, 1669, -66);
	  COL_VERTEX(731, 1669, 451);
	  COL_VERTEX(-81, 1669, -20);
	  COL_VERTEX(-148, 1669, -249);
	  COL_VERTEX(-251, 1669, -58);
	  COL_VERTEX(-129, 1669, 103);
	  COL_VERTEX(-24, 1669, 8);
	  COL_VERTEX(-206, 1669, 128);
	  COL_VERTEX(-383, 1669, 37);
	  COL_VERTEX(-72, 1669, 257);
	  COL_VERTEX(-270, 1669, 288);
	  COL_VERTEX(33, 1671, 351);
	  COL_VERTEX(-177, 1641, 456);
	  COL_VERTEX(-436, 1669, 371);
	  COL_VERTEX(-264, 1669, 440);
	  COL_VERTEX(-116, 1675, 476);
	  COL_VERTEX(75, 1669, 272);
	  COL_VERTEX(172, 1669, 291);
	  COL_VERTEX(152, 1669, 629);
	  COL_VERTEX(-227, 1601, 671);
	  COL_VERTEX(-146, 1675, 643);
	  COL_VERTEX(-259, 1669, 604);
	  COL_VERTEX(-634, 1669, -35);
	  COL_VERTEX(-571, 1669, -118);
	  COL_VERTEX(-685, 1669, 120);
	  COL_VERTEX(-638, 1669, 213);
	  COL_VERTEX(-701, 1601, 183);
	  COL_VERTEX(-494, 1669, 341);
	  COL_VERTEX(-717, 1669, 258);
	  COL_VERTEX(-416, 1669, 705);
	  COL_VERTEX(-79, 1675, 772);
	  COL_VERTEX(91, 1629, -722);
	  COL_VERTEX(42, 1670, -793);
	  COL_VERTEX(153, 1669, -767);
	  COL_VERTEX(112, 1669, -638);
	  COL_VERTEX(12, 1667, -620);
	  COL_VERTEX(-140, 1669, -442);
	  COL_VERTEX(-9, 1670, -906);
	  COL_VERTEX(58, 1601, -988);
	  COL_VERTEX(436, 1601, 477);
	  COL_VERTEX(581, 1669, 478);
	  COL_VERTEX(603, 1601, 533);
	  COL_VERTEX(365, 1670, 386);
	  COL_VERTEX(427, 1669, 418);
	  COL_VERTEX(269, 1675, 360);
	  COL_VERTEX(429, 1675, 675);
	  COL_VERTEX(326, 1669, 280);
	  COL_VERTEX(609, 1669, 78);
	  COL_VERTEX(263, 1669, 246);
	  COL_VERTEX(448, 1669, -350);
	  COL_VERTEX(647, 1669, -290);
	  COL_VERTEX(732, 1669, -520);
	  COL_VERTEX(589, 1669, -403);
	  COL_VERTEX(-799, 1601, 238);
	  COL_VERTEX(-814, 1669, 109);
	  COL_VERTEX(-522, 1669, 470);
	  COL_VERTEX(141, 1669, 116);
	  COL_VERTEX(-72, 1669, 92);
	  COL_VERTEX(-22, 1669, 218);
	  COL_VERTEX(-362, 1669, -299);
	  COL_VERTEX(-550, 1669, -483);
	  COL_VERTEX(-614, 1669, -532);
	  COL_VERTEX(-617, 1669, -388);
	  COL_VERTEX(-670, 1670, -638);
	  COL_VERTEX(-607, 1669, -233);
	  COL_VERTEX(430, 1669, -650);
	  COL_VERTEX(235, 1669, -911);
	  COL_VERTEX(223, 1601, -1031);
	  COL_VERTEX(459, 1601, -1122);
	  COL_VERTEX(741, 1601, -1009);
	  COL_VERTEX(895, 1601, -772);
	  COL_VERTEX(769, 1601, 511);
	  COL_VERTEX(366, 1675, 816);
	  COL_VERTEX(492, 1601, 710);
	  COL_VERTEX(232, 1675, 906);
	  COL_VERTEX(413, 1601, 887);
	  COL_VERTEX(37, 1675, 878);
	  COL_VERTEX(2, 1601, 964);
	  COL_VERTEX(-583, 1669, 738);
	  COL_VERTEX(-423, 1601, 797);
	  COL_VERTEX(-728, 1669, 649);
	  COL_VERTEX(-632, 1601, 838);
	  COL_VERTEX(-795, 1669, 492);
	  COL_VERTEX(-785, 1669, 355);
	  COL_VERTEX(-897, 1601, 531);
	  COL_VERTEX(-885, 1601, 360);
	  COL_VERTEX(-959, 1669, 64);
	  COL_VERTEX(-844, 1601, 196);
	  COL_VERTEX(-1043, 1669, -64);
	  COL_VERTEX(-1043, 1669, -209);
	  COL_VERTEX(-1148, 1601, -47);
	  COL_VERTEX(-981, 1669, -354);
	  COL_VERTEX(-1148, 1601, -228);
	  COL_VERTEX(-652, 1670, -774);
	  COL_VERTEX(-768, 1601, -654);
	  COL_VERTEX(-559, 1668, -958);
	  COL_VERTEX(-746, 1601, -823);
	  COL_VERTEX(-374, 1669, -1017);
	  COL_VERTEX(-619, 1601, -1042);
	  COL_VERTEX(-176, 1670, -1012);
	  COL_VERTEX(-398, 1601, -1127);
	  COL_VERTEX(-151, 1601, -1121);
	  COL_VERTEX(-748, 1669, -153);
	  COL_VERTEX(371, 1669, -504);
	  COL_VERTEX(-3705, 4499, -4572);
	  COL_VERTEX(-2859, 4537, -4652);
	  COL_VERTEX(-2880, 4537, -4165);
	  COL_VERTEX(-2847, 4537, -4704);
	  COL_VERTEX(-3142, 4537, -4365);
	  COL_VERTEX(-2895, 4537, -4124);
	  COL_VERTEX(-2579, 4537, -4322);
	  COL_VERTEX(-2252, 4537, -4320);
	  COL_VERTEX(-3491, 4537, -4263);
	  COL_VERTEX(-3392, 4537, -4631);
	  COL_VERTEX(-2687, 4542, -3607);
	  COL_VERTEX(-3735, 4537, -3958);
	  COL_VERTEX(-3690, 4537, -3900);
	  COL_VERTEX(-3386, 4537, -4785);
	  COL_VERTEX(-2646, 4537, -5080);
	  COL_VERTEX(-2438, 4537, -5019);
	  COL_VERTEX(-2312, 4537, -4844);
	  COL_VERTEX(-633, 1632, -476);
	  COL_VERTEX(191, 1669, -69);
	  COL_VERTEX(212, 1669, -556);
	  COL_VERTEX(-70, 1669, -269);
	  COL_VERTEX(176, 1669, -28);
	  COL_VERTEX(224, 1669, -608);
	  COL_VERTEX(492, 1669, -226);
	  COL_VERTEX(819, 1669, -224);
	  COL_VERTEX(-419, 1669, -167);
	  COL_VERTEX(384, 1675, 488);
	  COL_VERTEX(-663, 1669, 137);
	  COL_VERTEX(-618, 1669, 195);
	  COL_VERTEX(-314, 1669, -689);
	  COL_VERTEX(-320, 1669, -535);
	  COL_VERTEX(425, 1669, -984);
	  COL_VERTEX(633, 1669, -923);
	  COL_VERTEX(759, 1669, -748);
	  COL_TRI_INIT(SURFACE_DEFAULT, 68);
	  COL_TRI(290, 272, 291);
	  COL_TRI(292, 290, 291);
	  COL_TRI(268, 291, 272);
	  COL_TRI(268, 293, 291);
	  COL_TRI(291, 293, 292);
	  COL_TRI(293, 294, 292);
	  COL_TRI(268, 294, 293);
	  COL_TRI(295, 290, 292);
	  COL_TRI(296, 295, 292);
	  COL_TRI(294, 297, 292);
	  COL_TRI(297, 298, 292);
	  COL_TRI(298, 296, 292);
	  COL_TRI(273, 299, 300);
	  COL_TRI(273, 300, 301);
	  COL_TRI(269, 294, 267);
	  COL_TRI(266, 302, 299);
	  COL_TRI(266, 301, 302);
	  COL_TRI(300, 302, 301);
	  COL_TRI(300, 299, 302);
	  COL_TRI(273, 301, 271);
	  COL_TRI(266, 271, 301);
	  COL_TRI(266, 299, 270);
	  COL_TRI(273, 270, 299);
	  COL_TRI(268, 267, 294);
	  COL_TRI(269, 297, 294);
	  COL_TRI(289, 303, 314);
	  COL_TRI(274, 298, 297);
	  COL_TRI(274, 297, 269);
	  COL_TRI(276, 298, 274);
	  COL_TRI(276, 296, 298);
	  COL_TRI(276, 295, 296);
	  COL_TRI(277, 295, 275);
	  COL_TRI(277, 290, 295);
	  COL_TRI(276, 275, 295);
	  COL_TRI(290, 277, 272);
	  COL_TRI(289, 313, 303);
	  COL_TRI(280, 314, 315);
	  COL_TRI(280, 315, 313);
	  COL_TRI(303, 313, 315);
	  COL_TRI(303, 315, 314);
	  COL_TRI(280, 283, 314);
	  COL_TRI(289, 314, 283);
	  COL_TRI(289, 278, 313);
	  COL_TRI(280, 313, 278);
	  COL_TRI(282, 281, 304);
	  COL_TRI(282, 304, 305);
	  COL_TRI(279, 306, 304);
	  COL_TRI(304, 306, 310);
	  COL_TRI(279, 304, 281);
	  COL_TRI(305, 304, 310);
	  COL_TRI(285, 309, 306);
	  COL_TRI(285, 306, 279);
	  COL_TRI(306, 309, 310);
	  COL_TRI(307, 312, 310);
	  COL_TRI(308, 307, 310);
	  COL_TRI(309, 308, 310);
	  COL_TRI(310, 312, 311);
	  COL_TRI(311, 305, 310);
	  COL_TRI(287, 308, 309);
	  COL_TRI(287, 309, 285);
	  COL_TRI(287, 307, 308);
	  COL_TRI(287, 286, 307);
	  COL_TRI(288, 307, 286);
	  COL_TRI(288, 312, 307);
	  COL_TRI(312, 284, 311);
	  COL_TRI(312, 288, 284);
	  COL_TRI(282, 305, 311);
	  COL_TRI(282, 311, 284);
	  COL_TRI_INIT(SURFACE_HANGABLE, 38);
	  COL_TRI(507, 530, 491);
	  COL_TRI(507, 522, 530);
	  COL_TRI(507, 515, 522);
	  COL_TRI(507, 491, 499);
	  COL_TRI(507, 511, 515);
	  COL_TRI(507, 509, 511);
	  COL_TRI(499, 506, 507);
	  COL_TRI(507, 508, 509);
	  COL_TRI(491, 497, 499);
	  COL_TRI(491, 496, 497);
	  COL_TRI(530, 490, 491);
	  COL_TRI(491, 492, 493);
	  COL_TRI(499, 501, 503);
	  COL_TRI(499, 500, 501);
	  COL_TRI(499, 503, 504);
	  COL_TRI(499, 504, 505);
	  COL_TRI(499, 505, 506);
	  COL_TRI(530, 489, 490);
	  COL_TRI(530, 532, 534);
	  COL_TRI(530, 534, 535);
	  COL_TRI(530, 535, 488);
	  COL_TRI(530, 488, 489);
	  COL_TRI(511, 514, 515);
	  COL_TRI(515, 521, 522);
	  COL_TRI(522, 528, 530);
	  COL_TRI(522, 524, 525);
	  COL_TRI(522, 525, 526);
	  COL_TRI(522, 526, 527);
	  COL_TRI(522, 527, 528);
	  COL_TRI(515, 520, 521);
	  COL_TRI(515, 519, 520);
	  COL_TRI(515, 518, 519);
	  COL_TRI(515, 517, 518);
	  COL_TRI(515, 516, 517);
	  COL_TRI(511, 512, 513);
	  COL_TRI(511, 513, 514);
	  COL_TRI(491, 495, 496);
	  COL_TRI(491, 493, 495);
	  COL_TRI_INIT(SURFACE_DEATH_PLANE, 2);
	  COL_TRI(0, 1, 2);
	  COL_TRI(0, 2, 3);
	  COL_TRI_INIT(SURFACE_NOT_SLIPPERY, 1220);
	  COL_TRI(5, 10, 16);
	  COL_TRI(4, 5, 6);
	  COL_TRI(4, 7, 5);
	  COL_TRI(4, 8, 7);
	  COL_TRI(6, 8, 4);
	  COL_TRI(5, 9, 10);
	  COL_TRI(9, 5, 7);
	  COL_TRI(5, 11, 6);
	  COL_TRI(5, 12, 11);
	  COL_TRI(5, 13, 12);
	  COL_TRI(5, 14, 13);
	  COL_TRI(5, 15, 14);
	  COL_TRI(5, 16, 15);
	  COL_TRI(17, 6, 11);
	  COL_TRI(6, 18, 21);
	  COL_TRI(6, 19, 18);
	  COL_TRI(6, 20, 19);
	  COL_TRI(6, 21, 23);
	  COL_TRI(6, 22, 8);
	  COL_TRI(6, 23, 22);
	  COL_TRI(6, 17, 24);
	  COL_TRI(6, 24, 20);
	  COL_TRI(7, 209, 8);
	  COL_TRI(20, 213, 19);
	  COL_TRI(25, 22, 26);
	  COL_TRI(25, 8, 22);
	  COL_TRI(22, 23, 210);
	  COL_TRI(26, 22, 210);
	  COL_TRI(21, 210, 23);
	  COL_TRI(18, 211, 21);
	  COL_TRI(21, 211, 210);
	  COL_TRI(18, 212, 211);
	  COL_TRI(19, 212, 18);
	  COL_TRI(19, 213, 212);
	  COL_TRI(16, 29, 15);
	  COL_TRI(20, 24, 213);
	  COL_TRI(12, 17, 11);
	  COL_TRI(13, 17, 12);
	  COL_TRI(13, 27, 17);
	  COL_TRI(14, 27, 13);
	  COL_TRI(14, 28, 27);
	  COL_TRI(15, 28, 14);
	  COL_TRI(15, 29, 28);
	  COL_TRI(30, 16, 10);
	  COL_TRI(16, 30, 29);
	  COL_TRI(31, 30, 10);
	  COL_TRI(9, 31, 10);
	  COL_TRI(32, 26, 210);
	  COL_TRI(33, 210, 211);
	  COL_TRI(34, 210, 33);
	  COL_TRI(34, 32, 210);
	  COL_TRI(35, 211, 212);
	  COL_TRI(33, 211, 35);
	  COL_TRI(40, 215, 41);
	  COL_TRI(35, 212, 36);
	  COL_TRI(36, 212, 213);
	  COL_TRI(36, 213, 37);
	  COL_TRI(37, 213, 24);
	  COL_TRI(37, 24, 38);
	  COL_TRI(38, 24, 17);
	  COL_TRI(39, 17, 27);
	  COL_TRI(38, 17, 39);
	  COL_TRI(25, 41, 214);
	  COL_TRI(25, 40, 41);
	  COL_TRI(42, 31, 9);
	  COL_TRI(43, 9, 215);
	  COL_TRI(42, 9, 43);
	  COL_TRI(7, 214, 9);
	  COL_TRI(41, 9, 214);
	  COL_TRI(41, 215, 9);
	  COL_TRI(25, 214, 7);
	  COL_TRI(43, 215, 44);
	  COL_TRI(44, 215, 216);
	  COL_TRI(40, 216, 215);
	  COL_TRI(25, 45, 40);
	  COL_TRI(45, 216, 40);
	  COL_TRI(44, 216, 46);
	  COL_TRI(46, 216, 45);
	  COL_TRI(25, 26, 49);
	  COL_TRI(25, 7, 8);
	  COL_TRI(25, 49, 47);
	  COL_TRI(47, 45, 25);
	  COL_TRI(46, 45, 48);
	  COL_TRI(47, 217, 45);
	  COL_TRI(48, 45, 217);
	  COL_TRI(49, 217, 47);
	  COL_TRI(49, 32, 217);
	  COL_TRI(48, 217, 50);
	  COL_TRI(50, 217, 32);
	  COL_TRI(32, 49, 26);
	  COL_TRI(54, 30, 31);
	  COL_TRI(50, 32, 34);
	  COL_TRI(39, 27, 51);
	  COL_TRI(51, 27, 28);
	  COL_TRI(51, 28, 52);
	  COL_TRI(52, 28, 29);
	  COL_TRI(52, 29, 53);
	  COL_TRI(53, 29, 30);
	  COL_TRI(53, 30, 54);
	  COL_TRI(59, 55, 58);
	  COL_TRI(54, 31, 42);
	  COL_TRI(55, 56, 58);
	  COL_TRI(56, 218, 57);
	  COL_TRI(56, 219, 58);
	  COL_TRI(56, 57, 219);
	  COL_TRI(55, 52, 56);
	  COL_TRI(56, 53, 218);
	  COL_TRI(56, 52, 53);
	  COL_TRI(57, 42, 219);
	  COL_TRI(42, 58, 219);
	  COL_TRI(58, 43, 44);
	  COL_TRI(42, 43, 58);
	  COL_TRI(58, 44, 59);
	  COL_TRI(53, 54, 57);
	  COL_TRI(57, 54, 42);
	  COL_TRI(53, 57, 218);
	  COL_TRI(59, 44, 46);
	  COL_TRI(59, 60, 55);
	  COL_TRI(60, 51, 55);
	  COL_TRI(59, 220, 65);
	  COL_TRI(59, 66, 220);
	  COL_TRI(59, 67, 66);
	  COL_TRI(59, 68, 67);
	  COL_TRI(59, 65, 64);
	  COL_TRI(59, 61, 60);
	  COL_TRI(59, 62, 61);
	  COL_TRI(59, 63, 62);
	  COL_TRI(59, 64, 63);
	  COL_TRI(59, 46, 68);
	  COL_TRI(65, 33, 35);
	  COL_TRI(61, 39, 60);
	  COL_TRI(60, 39, 51);
	  COL_TRI(62, 38, 61);
	  COL_TRI(61, 38, 39);
	  COL_TRI(63, 37, 62);
	  COL_TRI(62, 37, 38);
	  COL_TRI(64, 36, 63);
	  COL_TRI(63, 36, 37);
	  COL_TRI(65, 35, 64);
	  COL_TRI(64, 35, 36);
	  COL_TRI(34, 65, 220);
	  COL_TRI(34, 33, 65);
	  COL_TRI(69, 74, 72);
	  COL_TRI(66, 34, 220);
	  COL_TRI(66, 50, 34);
	  COL_TRI(67, 50, 66);
	  COL_TRI(68, 48, 67);
	  COL_TRI(67, 48, 50);
	  COL_TRI(68, 46, 48);
	  COL_TRI(55, 51, 52);
	  COL_TRI(69, 72, 70);
	  COL_TRI(71, 72, 74);
	  COL_TRI(72, 222, 70);
	  COL_TRI(72, 223, 86);
	  COL_TRI(72, 82, 222);
	  COL_TRI(72, 83, 82);
	  COL_TRI(72, 84, 83);
	  COL_TRI(72, 85, 84);
	  COL_TRI(72, 86, 85);
	  COL_TRI(72, 71, 223);
	  COL_TRI(73, 70, 222);
	  COL_TRI(70, 224, 81);
	  COL_TRI(70, 73, 224);
	  COL_TRI(82, 73, 222);
	  COL_TRI(83, 73, 82);
	  COL_TRI(70, 225, 75);
	  COL_TRI(69, 221, 74);
	  COL_TRI(74, 232, 221);
	  COL_TRI(70, 221, 69);
	  COL_TRI(70, 75, 221);
	  COL_TRI(75, 225, 226);
	  COL_TRI(76, 75, 226);
	  COL_TRI(77, 221, 75);
	  COL_TRI(77, 75, 76);
	  COL_TRI(77, 74, 221);
	  COL_TRI(70, 78, 225);
	  COL_TRI(70, 79, 78);
	  COL_TRI(70, 80, 79);
	  COL_TRI(70, 81, 80);
	  COL_TRI(78, 226, 225);
	  COL_TRI(78, 227, 226);
	  COL_TRI(79, 227, 78);
	  COL_TRI(79, 234, 227);
	  COL_TRI(80, 234, 79);
	  COL_TRI(81, 228, 80);
	  COL_TRI(80, 228, 234);
	  COL_TRI(81, 224, 228);
	  COL_TRI(83, 229, 73);
	  COL_TRI(84, 229, 83);
	  COL_TRI(90, 91, 226);
	  COL_TRI(84, 230, 229);
	  COL_TRI(85, 230, 84);
	  COL_TRI(86, 231, 85);
	  COL_TRI(85, 231, 230);
	  COL_TRI(86, 87, 231);
	  COL_TRI(87, 86, 223);
	  COL_TRI(88, 87, 223);
	  COL_TRI(71, 88, 223);
	  COL_TRI(89, 226, 227);
	  COL_TRI(90, 226, 89);
	  COL_TRI(97, 235, 98);
	  COL_TRI(92, 227, 234);
	  COL_TRI(89, 227, 92);
	  COL_TRI(92, 234, 93);
	  COL_TRI(93, 234, 228);
	  COL_TRI(93, 228, 94);
	  COL_TRI(94, 228, 224);
	  COL_TRI(94, 224, 95);
	  COL_TRI(95, 224, 73);
	  COL_TRI(95, 73, 96);
	  COL_TRI(96, 73, 229);
	  COL_TRI(98, 235, 71);
	  COL_TRI(98, 71, 233);
	  COL_TRI(77, 98, 233);
	  COL_TRI(74, 233, 71);
	  COL_TRI(99, 71, 235);
	  COL_TRI(100, 71, 99);
	  COL_TRI(100, 88, 71);
	  COL_TRI(77, 233, 74);
	  COL_TRI(97, 236, 235);
	  COL_TRI(101, 235, 236);
	  COL_TRI(99, 235, 101);
	  COL_TRI(77, 102, 97);
	  COL_TRI(102, 236, 97);
	  COL_TRI(77, 97, 98);
	  COL_TRI(107, 91, 90);
	  COL_TRI(91, 76, 226);
	  COL_TRI(101, 236, 103);
	  COL_TRI(103, 236, 102);
	  COL_TRI(104, 102, 77);
	  COL_TRI(77, 106, 104);
	  COL_TRI(77, 76, 106);
	  COL_TRI(105, 102, 237);
	  COL_TRI(104, 237, 102);
	  COL_TRI(103, 102, 105);
	  COL_TRI(106, 237, 104);
	  COL_TRI(107, 237, 91);
	  COL_TRI(105, 237, 107);
	  COL_TRI(106, 91, 237);
	  COL_TRI(91, 106, 76);
	  COL_TRI(112, 108, 109);
	  COL_TRI(108, 229, 230);
	  COL_TRI(96, 229, 108);
	  COL_TRI(109, 230, 231);
	  COL_TRI(108, 230, 109);
	  COL_TRI(109, 231, 110);
	  COL_TRI(110, 231, 87);
	  COL_TRI(110, 87, 111);
	  COL_TRI(111, 87, 88);
	  COL_TRI(111, 88, 100);
	  COL_TRI(112, 109, 113);
	  COL_TRI(113, 110, 238);
	  COL_TRI(113, 109, 110);
	  COL_TRI(117, 112, 115);
	  COL_TRI(113, 239, 115);
	  COL_TRI(114, 100, 239);
	  COL_TRI(100, 115, 239);
	  COL_TRI(113, 114, 239);
	  COL_TRI(115, 101, 117);
	  COL_TRI(100, 99, 115);
	  COL_TRI(115, 99, 101);
	  COL_TRI(114, 111, 100);
	  COL_TRI(110, 114, 238);
	  COL_TRI(110, 111, 114);
	  COL_TRI(113, 238, 114);
	  COL_TRI(116, 108, 112);
	  COL_TRI(117, 116, 112);
	  COL_TRI(112, 113, 115);
	  COL_TRI(117, 122, 121);
	  COL_TRI(117, 101, 103);
	  COL_TRI(117, 103, 125);
	  COL_TRI(117, 123, 240);
	  COL_TRI(117, 124, 123);
	  COL_TRI(117, 125, 124);
	  COL_TRI(117, 240, 122);
	  COL_TRI(117, 118, 116);
	  COL_TRI(117, 119, 118);
	  COL_TRI(117, 120, 119);
	  COL_TRI(117, 121, 120);
	  COL_TRI(90, 89, 122);
	  COL_TRI(116, 96, 108);
	  COL_TRI(118, 96, 116);
	  COL_TRI(119, 95, 118);
	  COL_TRI(118, 95, 96);
	  COL_TRI(120, 94, 119);
	  COL_TRI(119, 94, 95);
	  COL_TRI(121, 93, 120);
	  COL_TRI(120, 93, 94);
	  COL_TRI(121, 92, 93);
	  COL_TRI(122, 92, 121);
	  COL_TRI(122, 89, 92);
	  COL_TRI(90, 122, 240);
	  COL_TRI(123, 90, 240);
	  COL_TRI(124, 107, 123);
	  COL_TRI(123, 107, 90);
	  COL_TRI(125, 105, 124);
	  COL_TRI(124, 105, 107);
	  COL_TRI(125, 103, 105);
	  COL_TRI(126, 241, 127);
	  COL_TRI(127, 242, 132);
	  COL_TRI(127, 138, 242);
	  COL_TRI(128, 126, 127);
	  COL_TRI(127, 243, 128);
	  COL_TRI(127, 244, 243);
	  COL_TRI(130, 243, 244);
	  COL_TRI(128, 243, 130);
	  COL_TRI(128, 130, 126);
	  COL_TRI(131, 133, 244);
	  COL_TRI(127, 132, 244);
	  COL_TRI(132, 131, 244);
	  COL_TRI(133, 130, 244);
	  COL_TRI(132, 136, 134);
	  COL_TRI(132, 134, 131);
	  COL_TRI(131, 140, 139);
	  COL_TRI(131, 250, 140);
	  COL_TRI(131, 139, 133);
	  COL_TRI(134, 141, 131);
	  COL_TRI(134, 145, 143);
	  COL_TRI(134, 146, 145);
	  COL_TRI(134, 251, 146);
	  COL_TRI(136, 252, 134);
	  COL_TRI(134, 143, 142);
	  COL_TRI(134, 253, 141);
	  COL_TRI(134, 142, 253);
	  COL_TRI(137, 251, 134);
	  COL_TRI(134, 252, 137);
	  COL_TRI(136, 148, 252);
	  COL_TRI(136, 150, 148);
	  COL_TRI(136, 151, 150);
	  COL_TRI(137, 146, 251);
	  COL_TRI(138, 245, 242);
	  COL_TRI(129, 242, 245);
	  COL_TRI(129, 132, 242);
	  COL_TRI(126, 246, 241);
	  COL_TRI(126, 154, 246);
	  COL_TRI(126, 157, 154);
	  COL_TRI(126, 247, 157);
	  COL_TRI(126, 158, 247);
	  COL_TRI(130, 248, 126);
	  COL_TRI(126, 248, 160);
	  COL_TRI(129, 246, 154);
	  COL_TRI(129, 241, 246);
	  COL_TRI(142, 135, 253);
	  COL_TRI(133, 254, 130);
	  COL_TRI(139, 254, 133);
	  COL_TRI(140, 255, 139);
	  COL_TRI(139, 255, 254);
	  COL_TRI(135, 140, 250);
	  COL_TRI(135, 256, 140);
	  COL_TRI(140, 256, 255);
	  COL_TRI(135, 250, 131);
	  COL_TRI(131, 141, 135);
	  COL_TRI(141, 253, 135);
	  COL_TRI(142, 257, 135);
	  COL_TRI(143, 144, 142);
	  COL_TRI(144, 257, 142);
	  COL_TRI(145, 144, 143);
	  COL_TRI(146, 147, 145);
	  COL_TRI(147, 258, 145);
	  COL_TRI(145, 258, 144);
	  COL_TRI(137, 147, 146);
	  COL_TRI(148, 149, 252);
	  COL_TRI(149, 137, 252);
	  COL_TRI(129, 245, 138);
	  COL_TRI(136, 152, 151);
	  COL_TRI(150, 149, 148);
	  COL_TRI(151, 259, 150);
	  COL_TRI(150, 259, 149);
	  COL_TRI(152, 260, 151);
	  COL_TRI(151, 260, 259);
	  COL_TRI(136, 129, 152);
	  COL_TRI(153, 152, 129);
	  COL_TRI(152, 153, 260);
	  COL_TRI(153, 129, 261);
	  COL_TRI(129, 136, 132);
	  COL_TRI(154, 261, 129);
	  COL_TRI(129, 127, 241);
	  COL_TRI(155, 154, 157);
	  COL_TRI(156, 154, 155);
	  COL_TRI(154, 161, 261);
	  COL_TRI(154, 162, 161);
	  COL_TRI(154, 163, 162);
	  COL_TRI(154, 164, 163);
	  COL_TRI(154, 156, 164);
	  COL_TRI(157, 247, 155);
	  COL_TRI(155, 164, 156);
	  COL_TRI(158, 159, 247);
	  COL_TRI(159, 155, 247);
	  COL_TRI(160, 159, 158);
	  COL_TRI(160, 158, 249);
	  COL_TRI(126, 249, 158);
	  COL_TRI(126, 160, 249);
	  COL_TRI(129, 138, 127);
	  COL_TRI(161, 153, 261);
	  COL_TRI(166, 155, 159);
	  COL_TRI(161, 262, 153);
	  COL_TRI(162, 262, 161);
	  COL_TRI(162, 263, 262);
	  COL_TRI(163, 263, 162);
	  COL_TRI(164, 264, 163);
	  COL_TRI(163, 264, 263);
	  COL_TRI(164, 265, 264);
	  COL_TRI(155, 265, 164);
	  COL_TRI(165, 155, 166);
	  COL_TRI(165, 265, 155);
	  COL_TRI(172, 160, 248);
	  COL_TRI(167, 265, 165);
	  COL_TRI(167, 264, 265);
	  COL_TRI(168, 264, 167);
	  COL_TRI(168, 263, 264);
	  COL_TRI(169, 262, 263);
	  COL_TRI(169, 263, 168);
	  COL_TRI(170, 262, 169);
	  COL_TRI(170, 153, 262);
	  COL_TRI(171, 153, 170);
	  COL_TRI(171, 260, 153);
	  COL_TRI(173, 159, 160);
	  COL_TRI(173, 160, 172);
	  COL_TRI(172, 248, 174);
	  COL_TRI(174, 248, 130);
	  COL_TRI(166, 159, 173);
	  COL_TRI(175, 130, 254);
	  COL_TRI(174, 130, 175);
	  COL_TRI(176, 135, 257);
	  COL_TRI(177, 256, 135);
	  COL_TRI(177, 135, 176);
	  COL_TRI(178, 256, 177);
	  COL_TRI(178, 255, 256);
	  COL_TRI(179, 255, 178);
	  COL_TRI(179, 254, 255);
	  COL_TRI(175, 254, 179);
	  COL_TRI(180, 137, 149);
	  COL_TRI(181, 147, 137);
	  COL_TRI(181, 137, 180);
	  COL_TRI(182, 147, 181);
	  COL_TRI(182, 258, 147);
	  COL_TRI(186, 149, 259);
	  COL_TRI(183, 258, 182);
	  COL_TRI(183, 144, 258);
	  COL_TRI(184, 144, 183);
	  COL_TRI(184, 257, 144);
	  COL_TRI(176, 257, 184);
	  COL_TRI(185, 259, 260);
	  COL_TRI(185, 260, 171);
	  COL_TRI(186, 259, 185);
	  COL_TRI(192, 190, 191);
	  COL_TRI(180, 149, 186);
	  COL_TRI(187, 166, 188);
	  COL_TRI(188, 173, 192);
	  COL_TRI(188, 166, 173);
	  COL_TRI(189, 187, 188);
	  COL_TRI(188, 191, 189);
	  COL_TRI(188, 192, 191);
	  COL_TRI(190, 175, 191);
	  COL_TRI(191, 179, 207);
	  COL_TRI(191, 175, 179);
	  COL_TRI(194, 168, 193);
	  COL_TRI(191, 193, 189);
	  COL_TRI(191, 194, 193);
	  COL_TRI(193, 167, 189);
	  COL_TRI(189, 165, 187);
	  COL_TRI(189, 167, 165);
	  COL_TRI(192, 172, 208);
	  COL_TRI(192, 173, 172);
	  COL_TRI(192, 208, 190);
	  COL_TRI(187, 165, 166);
	  COL_TRI(193, 168, 167);
	  COL_TRI(199, 186, 198);
	  COL_TRI(191, 199, 198);
	  COL_TRI(191, 198, 197);
	  COL_TRI(194, 169, 168);
	  COL_TRI(195, 169, 194);
	  COL_TRI(191, 195, 194);
	  COL_TRI(196, 170, 195);
	  COL_TRI(195, 170, 169);
	  COL_TRI(191, 196, 195);
	  COL_TRI(197, 171, 196);
	  COL_TRI(196, 171, 170);
	  COL_TRI(191, 197, 196);
	  COL_TRI(198, 185, 197);
	  COL_TRI(197, 185, 171);
	  COL_TRI(198, 186, 185);
	  COL_TRI(204, 184, 203);
	  COL_TRI(191, 204, 203);
	  COL_TRI(191, 200, 199);
	  COL_TRI(191, 201, 200);
	  COL_TRI(191, 202, 201);
	  COL_TRI(191, 203, 202);
	  COL_TRI(199, 180, 186);
	  COL_TRI(200, 180, 199);
	  COL_TRI(201, 181, 200);
	  COL_TRI(200, 181, 180);
	  COL_TRI(202, 182, 201);
	  COL_TRI(201, 182, 181);
	  COL_TRI(202, 183, 182);
	  COL_TRI(203, 183, 202);
	  COL_TRI(203, 184, 183);
	  COL_TRI(191, 205, 204);
	  COL_TRI(191, 206, 205);
	  COL_TRI(191, 207, 206);
	  COL_TRI(204, 176, 184);
	  COL_TRI(205, 176, 204);
	  COL_TRI(206, 177, 205);
	  COL_TRI(205, 177, 176);
	  COL_TRI(206, 178, 177);
	  COL_TRI(207, 178, 206);
	  COL_TRI(207, 179, 178);
	  COL_TRI(190, 174, 175);
	  COL_TRI(208, 174, 190);
	  COL_TRI(208, 172, 174);
	  COL_TRI(327, 326, 328);
	  COL_TRI(316, 317, 318);
	  COL_TRI(316, 318, 319);
	  COL_TRI(320, 317, 316);
	  COL_TRI(319, 318, 321);
	  COL_TRI(319, 321, 322);
	  COL_TRI(320, 323, 317);
	  COL_TRI(322, 321, 324);
	  COL_TRI(322, 324, 325);
	  COL_TRI(325, 324, 326);
	  COL_TRI(325, 326, 327);
	  COL_TRI(335, 465, 336);
	  COL_TRI(327, 328, 329);
	  COL_TRI(328, 330, 331);
	  COL_TRI(329, 328, 331);
	  COL_TRI(331, 330, 333);
	  COL_TRI(331, 333, 332);
	  COL_TRI(332, 333, 334);
	  COL_TRI(333, 409, 334);
	  COL_TRI(334, 409, 463);
	  COL_TRI(334, 463, 335);
	  COL_TRI(335, 463, 465);
	  COL_TRI(342, 416, 471);
	  COL_TRI(336, 465, 337);
	  COL_TRI(336, 337, 338);
	  COL_TRI(337, 468, 339);
	  COL_TRI(338, 337, 339);
	  COL_TRI(339, 468, 469);
	  COL_TRI(339, 469, 340);
	  COL_TRI(340, 469, 441);
	  COL_TRI(340, 441, 341);
	  COL_TRI(341, 441, 416);
	  COL_TRI(341, 416, 342);
	  COL_TRI(348, 373, 349);
	  COL_TRI(342, 471, 343);
	  COL_TRI(343, 471, 345);
	  COL_TRI(343, 345, 344);
	  COL_TRI(344, 345, 346);
	  COL_TRI(345, 474, 346);
	  COL_TRI(346, 474, 476);
	  COL_TRI(346, 476, 347);
	  COL_TRI(347, 476, 374);
	  COL_TRI(347, 374, 348);
	  COL_TRI(348, 374, 373);
	  COL_TRI(354, 484, 485);
	  COL_TRI(349, 373, 375);
	  COL_TRI(349, 375, 350);
	  COL_TRI(350, 375, 478);
	  COL_TRI(350, 478, 351);
	  COL_TRI(351, 478, 480);
	  COL_TRI(351, 480, 352);
	  COL_TRI(352, 480, 482);
	  COL_TRI(352, 482, 353);
	  COL_TRI(353, 482, 484);
	  COL_TRI(353, 484, 354);
	  COL_TRI(360, 457, 361);
	  COL_TRI(354, 485, 355);
	  COL_TRI(355, 485, 428);
	  COL_TRI(355, 428, 356);
	  COL_TRI(356, 428, 358);
	  COL_TRI(356, 358, 357);
	  COL_TRI(357, 358, 359);
	  COL_TRI(358, 454, 359);
	  COL_TRI(359, 454, 456);
	  COL_TRI(359, 456, 360);
	  COL_TRI(360, 456, 457);
	  COL_TRI(361, 457, 458);
	  COL_TRI(361, 458, 362);
	  COL_TRI(362, 458, 363);
	  COL_TRI(362, 363, 364);
	  COL_TRI(363, 366, 365);
	  COL_TRI(364, 363, 365);
	  COL_TRI(365, 366, 367);
	  COL_TRI(366, 368, 367);
	  COL_TRI(367, 368, 369);
	  COL_TRI(368, 386, 369);
	  COL_TRI(369, 386, 387);
	  COL_TRI(369, 387, 370);
	  COL_TRI(370, 387, 323);
	  COL_TRI(370, 323, 320);
	  COL_TRI(334, 341, 342);
	  COL_TRI(342, 343, 344);
	  COL_TRI(342, 344, 346);
	  COL_TRI(342, 346, 350);
	  COL_TRI(342, 350, 357);
	  COL_TRI(342, 357, 365);
	  COL_TRI(342, 365, 322);
	  COL_TRI(342, 322, 334);
	  COL_TRI(334, 336, 338);
	  COL_TRI(365, 319, 322);
	  COL_TRI(322, 325, 327);
	  COL_TRI(322, 327, 329);
	  COL_TRI(322, 329, 331);
	  COL_TRI(322, 331, 332);
	  COL_TRI(322, 332, 334);
	  COL_TRI(334, 339, 340);
	  COL_TRI(334, 340, 341);
	  COL_TRI(334, 338, 339);
	  COL_TRI(334, 335, 336);
	  COL_TRI(350, 356, 357);
	  COL_TRI(365, 370, 320);
	  COL_TRI(365, 320, 316);
	  COL_TRI(365, 316, 319);
	  COL_TRI(365, 369, 370);
	  COL_TRI(357, 364, 365);
	  COL_TRI(365, 367, 369);
	  COL_TRI(357, 360, 361);
	  COL_TRI(357, 361, 362);
	  COL_TRI(357, 362, 364);
	  COL_TRI(357, 359, 360);
	  COL_TRI(350, 352, 353);
	  COL_TRI(350, 353, 354);
	  COL_TRI(350, 354, 355);
	  COL_TRI(350, 355, 356);
	  COL_TRI(350, 351, 352);
	  COL_TRI(346, 349, 350);
	  COL_TRI(346, 347, 348);
	  COL_TRI(346, 348, 349);
	  COL_TRI(371, 372, 486);
	  COL_TRI(372, 475, 486);
	  COL_TRI(377, 487, 376);
	  COL_TRI(373, 372, 375);
	  COL_TRI(372, 371, 375);
	  COL_TRI(371, 486, 452);
	  COL_TRI(371, 452, 450);
	  COL_TRI(371, 450, 660);
	  COL_TRI(375, 371, 660);
	  COL_TRI(375, 660, 448);
	  COL_TRI(375, 448, 478);
	  COL_TRI(374, 372, 373);
	  COL_TRI(376, 487, 661);
	  COL_TRI(378, 376, 661);
	  COL_TRI(379, 378, 661);
	  COL_TRI(376, 378, 662);
	  COL_TRI(380, 378, 379);
	  COL_TRI(381, 378, 664);
	  COL_TRI(381, 662, 378);
	  COL_TRI(382, 378, 380);
	  COL_TRI(378, 382, 664);
	  COL_TRI(377, 662, 385);
	  COL_TRI(377, 376, 662);
	  COL_TRI(383, 662, 665);
	  COL_TRI(383, 384, 662);
	  COL_TRI(384, 385, 662);
	  COL_TRI(381, 665, 662);
	  COL_TRI(435, 666, 384);
	  COL_TRI(377, 437, 487);
	  COL_TRI(385, 437, 377);
	  COL_TRI(385, 666, 437);
	  COL_TRI(384, 666, 385);
	  COL_TRI(386, 390, 388);
	  COL_TRI(386, 388, 387);
	  COL_TRI(368, 390, 386);
	  COL_TRI(387, 388, 389);
	  COL_TRI(388, 390, 435);
	  COL_TRI(389, 388, 435);
	  COL_TRI(323, 387, 389);
	  COL_TRI(368, 667, 390);
	  COL_TRI(390, 667, 435);
	  COL_TRI(389, 391, 317);
	  COL_TRI(323, 389, 317);
	  COL_TRI(391, 389, 435);
	  COL_TRI(392, 393, 394);
	  COL_TRI(393, 392, 381);
	  COL_TRI(394, 393, 447);
	  COL_TRI(393, 426, 447);
	  COL_TRI(395, 392, 394);
	  COL_TRI(381, 392, 396);
	  COL_TRI(392, 445, 396);
	  COL_TRI(392, 395, 445);
	  COL_TRI(393, 381, 664);
	  COL_TRI(396, 665, 381);
	  COL_TRI(397, 395, 394);
	  COL_TRI(394, 447, 668);
	  COL_TRI(398, 394, 668);
	  COL_TRI(397, 394, 398);
	  COL_TRI(406, 432, 402);
	  COL_TRI(399, 395, 397);
	  COL_TRI(395, 399, 446);
	  COL_TRI(395, 446, 445);
	  COL_TRI(399, 397, 400);
	  COL_TRI(400, 397, 398);
	  COL_TRI(401, 399, 400);
	  COL_TRI(402, 399, 401);
	  COL_TRI(399, 407, 446);
	  COL_TRI(399, 402, 407);
	  COL_TRI(400, 404, 401);
	  COL_TRI(403, 400, 398);
	  COL_TRI(404, 400, 403);
	  COL_TRI(405, 402, 401);
	  COL_TRI(406, 402, 405);
	  COL_TRI(412, 413, 671);
	  COL_TRI(409, 401, 411);
	  COL_TRI(401, 404, 411);
	  COL_TRI(409, 410, 401);
	  COL_TRI(410, 405, 401);
	  COL_TRI(411, 404, 443);
	  COL_TRI(404, 403, 443);
	  COL_TRI(410, 406, 405);
	  COL_TRI(412, 671, 672);
	  COL_TRI(413, 412, 486);
	  COL_TRI(398, 412, 672);
	  COL_TRI(411, 419, 463);
	  COL_TRI(415, 672, 671);
	  COL_TRI(416, 671, 413);
	  COL_TRI(416, 415, 671);
	  COL_TRI(415, 417, 672);
	  COL_TRI(417, 398, 672);
	  COL_TRI(415, 418, 443);
	  COL_TRI(415, 443, 417);
	  COL_TRI(418, 415, 416);
	  COL_TRI(419, 411, 443);
	  COL_TRI(409, 411, 463);
	  COL_TRI(425, 426, 380);
	  COL_TRI(420, 410, 409);
	  COL_TRI(333, 420, 409);
	  COL_TRI(410, 420, 406);
	  COL_TRI(358, 421, 422);
	  COL_TRI(421, 425, 422);
	  COL_TRI(422, 425, 424);
	  COL_TRI(423, 358, 422);
	  COL_TRI(424, 423, 422);
	  COL_TRI(421, 673, 425);
	  COL_TRI(425, 673, 669);
	  COL_TRI(426, 425, 669);
	  COL_TRI(424, 425, 380);
	  COL_TRI(423, 424, 453);
	  COL_TRI(424, 379, 663);
	  COL_TRI(424, 663, 453);
	  COL_TRI(424, 380, 379);
	  COL_TRI(421, 427, 673);
	  COL_TRI(427, 421, 358);
	  COL_TRI(358, 423, 454);
	  COL_TRI(428, 427, 358);
	  COL_TRI(423, 453, 455);
	  COL_TRI(423, 455, 454);
	  COL_TRI(435, 384, 434);
	  COL_TRI(318, 429, 321);
	  COL_TRI(429, 430, 321);
	  COL_TRI(321, 431, 670);
	  COL_TRI(321, 430, 431);
	  COL_TRI(321, 670, 433);
	  COL_TRI(321, 433, 324);
	  COL_TRI(430, 435, 434);
	  COL_TRI(431, 430, 434);
	  COL_TRI(430, 429, 435);
	  COL_TRI(432, 431, 434);
	  COL_TRI(432, 670, 431);
	  COL_TRI(433, 670, 406);
	  COL_TRI(406, 670, 432);
	  COL_TRI(434, 383, 436);
	  COL_TRI(434, 384, 383);
	  COL_TRI(434, 436, 432);
	  COL_TRI(435, 667, 438);
	  COL_TRI(436, 408, 432);
	  COL_TRI(408, 402, 432);
	  COL_TRI(437, 666, 438);
	  COL_TRI(435, 438, 666);
	  COL_TRI(437, 453, 487);
	  COL_TRI(437, 440, 453);
	  COL_TRI(438, 366, 437);
	  COL_TRI(366, 440, 437);
	  COL_TRI(366, 438, 368);
	  COL_TRI(438, 667, 368);
	  COL_TRI(363, 439, 366);
	  COL_TRI(439, 440, 366);
	  COL_TRI(440, 439, 453);
	  COL_TRI(416, 413, 471);
	  COL_TRI(441, 418, 416);
	  COL_TRI(442, 413, 486);
	  COL_TRI(413, 442, 471);
	  COL_TRI(403, 398, 417);
	  COL_TRI(443, 403, 417);
	  COL_TRI(444, 383, 665);
	  COL_TRI(444, 436, 383);
	  COL_TRI(444, 408, 436);
	  COL_TRI(445, 444, 396);
	  COL_TRI(444, 665, 396);
	  COL_TRI(446, 444, 445);
	  COL_TRI(407, 444, 446);
	  COL_TRI(444, 407, 408);
	  COL_TRI(407, 402, 408);
	  COL_TRI(449, 450, 447);
	  COL_TRI(382, 393, 664);
	  COL_TRI(426, 382, 380);
	  COL_TRI(382, 426, 393);
	  COL_TRI(447, 426, 669);
	  COL_TRI(379, 661, 663);
	  COL_TRI(448, 449, 673);
	  COL_TRI(449, 669, 673);
	  COL_TRI(449, 447, 669);
	  COL_TRI(450, 449, 660);
	  COL_TRI(449, 448, 660);
	  COL_TRI(455, 674, 456);
	  COL_TRI(414, 398, 668);
	  COL_TRI(451, 448, 673);
	  COL_TRI(448, 451, 478);
	  COL_TRI(452, 447, 450);
	  COL_TRI(414, 447, 452);
	  COL_TRI(414, 668, 447);
	  COL_TRI(453, 674, 455);
	  COL_TRI(454, 455, 456);
	  COL_TRI(453, 675, 674);
	  COL_TRI(456, 674, 675);
	  COL_TRI(456, 675, 457);
	  COL_TRI(453, 676, 675);
	  COL_TRI(457, 675, 676);
	  COL_TRI(457, 676, 458);
	  COL_TRI(453, 439, 676);
	  COL_TRI(458, 676, 439);
	  COL_TRI(458, 439, 363);
	  COL_TRI(317, 391, 318);
	  COL_TRI(391, 429, 318);
	  COL_TRI(429, 391, 435);
	  COL_TRI(459, 433, 406);
	  COL_TRI(324, 433, 326);
	  COL_TRI(433, 459, 326);
	  COL_TRI(460, 459, 406);
	  COL_TRI(326, 459, 460);
	  COL_TRI(326, 460, 328);
	  COL_TRI(461, 460, 406);
	  COL_TRI(460, 461, 330);
	  COL_TRI(328, 460, 330);
	  COL_TRI(420, 461, 406);
	  COL_TRI(330, 461, 420);
	  COL_TRI(330, 420, 333);
	  COL_TRI(462, 419, 443);
	  COL_TRI(463, 419, 462);
	  COL_TRI(463, 462, 465);
	  COL_TRI(464, 462, 443);
	  COL_TRI(465, 462, 337);
	  COL_TRI(462, 464, 337);
	  COL_TRI(466, 464, 443);
	  COL_TRI(337, 464, 466);
	  COL_TRI(337, 466, 468);
	  COL_TRI(467, 466, 443);
	  COL_TRI(466, 467, 469);
	  COL_TRI(468, 466, 469);
	  COL_TRI(418, 467, 443);
	  COL_TRI(469, 467, 418);
	  COL_TRI(469, 418, 441);
	  COL_TRI(470, 442, 486);
	  COL_TRI(477, 451, 673);
	  COL_TRI(471, 442, 470);
	  COL_TRI(471, 470, 345);
	  COL_TRI(472, 470, 486);
	  COL_TRI(470, 472, 474);
	  COL_TRI(345, 470, 474);
	  COL_TRI(473, 472, 486);
	  COL_TRI(474, 472, 473);
	  COL_TRI(474, 473, 476);
	  COL_TRI(475, 473, 486);
	  COL_TRI(476, 473, 374);
	  COL_TRI(473, 475, 374);
	  COL_TRI(374, 475, 372);
	  COL_TRI(478, 477, 480);
	  COL_TRI(478, 451, 477);
	  COL_TRI(479, 477, 673);
	  COL_TRI(480, 477, 479);
	  COL_TRI(480, 479, 482);
	  COL_TRI(481, 479, 673);
	  COL_TRI(482, 479, 484);
	  COL_TRI(479, 481, 484);
	  COL_TRI(483, 481, 673);
	  COL_TRI(484, 481, 485);
	  COL_TRI(481, 483, 485);
	  COL_TRI(427, 483, 673);
	  COL_TRI(485, 483, 427);
	  COL_TRI(485, 427, 428);
	  COL_TRI(398, 414, 412);
	  COL_TRI(414, 486, 412);
	  COL_TRI(486, 414, 452);
	  COL_TRI(487, 453, 663);
	  COL_TRI(487, 663, 661);
	  COL_TRI(488, 627, 489);
	  COL_TRI(489, 597, 490);
	  COL_TRI(489, 627, 597);
	  COL_TRI(493, 494, 495);
	  COL_TRI(490, 597, 595);
	  COL_TRI(490, 595, 491);
	  COL_TRI(488, 555, 627);
	  COL_TRI(491, 595, 629);
	  COL_TRI(491, 629, 492);
	  COL_TRI(492, 629, 631);
	  COL_TRI(492, 631, 493);
	  COL_TRI(493, 631, 494);
	  COL_TRI(501, 637, 502);
	  COL_TRI(494, 633, 496);
	  COL_TRI(495, 494, 496);
	  COL_TRI(496, 498, 497);
	  COL_TRI(496, 633, 498);
	  COL_TRI(497, 498, 499);
	  COL_TRI(498, 575, 499);
	  COL_TRI(499, 635, 500);
	  COL_TRI(499, 575, 635);
	  COL_TRI(500, 635, 637);
	  COL_TRI(500, 637, 501);
	  COL_TRI(507, 643, 508);
	  COL_TRI(501, 502, 503);
	  COL_TRI(502, 640, 504);
	  COL_TRI(503, 502, 504);
	  COL_TRI(504, 641, 505);
	  COL_TRI(504, 640, 641);
	  COL_TRI(505, 641, 609);
	  COL_TRI(505, 609, 506);
	  COL_TRI(506, 609, 582);
	  COL_TRI(506, 582, 507);
	  COL_TRI(507, 582, 643);
	  COL_TRI(514, 537, 540);
	  COL_TRI(508, 643, 510);
	  COL_TRI(508, 510, 509);
	  COL_TRI(509, 510, 511);
	  COL_TRI(510, 646, 511);
	  COL_TRI(511, 648, 512);
	  COL_TRI(511, 646, 648);
	  COL_TRI(512, 648, 539);
	  COL_TRI(512, 539, 513);
	  COL_TRI(513, 539, 537);
	  COL_TRI(513, 537, 514);
	  COL_TRI(519, 657, 520);
	  COL_TRI(514, 540, 515);
	  COL_TRI(515, 540, 650);
	  COL_TRI(515, 650, 516);
	  COL_TRI(516, 650, 652);
	  COL_TRI(516, 652, 517);
	  COL_TRI(517, 652, 654);
	  COL_TRI(517, 654, 518);
	  COL_TRI(518, 654, 656);
	  COL_TRI(518, 656, 519);
	  COL_TRI(519, 656, 657);
	  COL_TRI(526, 625, 626);
	  COL_TRI(520, 657, 594);
	  COL_TRI(520, 594, 521);
	  COL_TRI(521, 594, 523);
	  COL_TRI(521, 523, 522);
	  COL_TRI(522, 523, 524);
	  COL_TRI(523, 623, 524);
	  COL_TRI(524, 624, 525);
	  COL_TRI(524, 623, 624);
	  COL_TRI(525, 624, 625);
	  COL_TRI(525, 625, 526);
	  COL_TRI(534, 551, 552);
	  COL_TRI(526, 626, 527);
	  COL_TRI(527, 626, 529);
	  COL_TRI(527, 529, 528);
	  COL_TRI(528, 529, 530);
	  COL_TRI(529, 531, 530);
	  COL_TRI(530, 531, 532);
	  COL_TRI(531, 533, 532);
	  COL_TRI(532, 533, 534);
	  COL_TRI(533, 551, 534);
	  COL_TRI(534, 552, 535);
	  COL_TRI(535, 552, 555);
	  COL_TRI(535, 555, 488);
	  COL_TRI(536, 538, 540);
	  COL_TRI(537, 536, 540);
	  COL_TRI(536, 647, 658);
	  COL_TRI(538, 536, 658);
	  COL_TRI(539, 647, 536);
	  COL_TRI(539, 536, 537);
	  COL_TRI(538, 620, 618);
	  COL_TRI(538, 658, 620);
	  COL_TRI(538, 618, 677);
	  COL_TRI(540, 538, 677);
	  COL_TRI(547, 543, 546);
	  COL_TRI(540, 677, 617);
	  COL_TRI(540, 617, 650);
	  COL_TRI(541, 543, 678);
	  COL_TRI(542, 541, 678);
	  COL_TRI(541, 659, 679);
	  COL_TRI(543, 541, 679);
	  COL_TRI(542, 659, 541);
	  COL_TRI(543, 545, 680);
	  COL_TRI(544, 678, 543);
	  COL_TRI(544, 543, 680);
	  COL_TRI(545, 543, 547);
	  COL_TRI(546, 543, 679);
	  COL_TRI(548, 550, 678);
	  COL_TRI(542, 678, 550);
	  COL_TRI(549, 548, 678);
	  COL_TRI(549, 678, 681);
	  COL_TRI(544, 681, 678);
	  COL_TRI(550, 605, 542);
	  COL_TRI(542, 605, 659);
	  COL_TRI(548, 683, 550);
	  COL_TRI(550, 683, 605);
	  COL_TRI(551, 553, 552);
	  COL_TRI(551, 556, 553);
	  COL_TRI(533, 556, 551);
	  COL_TRI(559, 558, 544);
	  COL_TRI(552, 553, 554);
	  COL_TRI(553, 556, 603);
	  COL_TRI(554, 553, 603);
	  COL_TRI(555, 552, 554);
	  COL_TRI(556, 684, 603);
	  COL_TRI(533, 684, 556);
	  COL_TRI(557, 554, 603);
	  COL_TRI(554, 557, 627);
	  COL_TRI(555, 554, 627);
	  COL_TRI(558, 559, 560);
	  COL_TRI(564, 560, 685);
	  COL_TRI(559, 544, 680);
	  COL_TRI(561, 558, 560);
	  COL_TRI(558, 561, 613);
	  COL_TRI(558, 613, 562);
	  COL_TRI(544, 558, 562);
	  COL_TRI(562, 681, 544);
	  COL_TRI(563, 561, 560);
	  COL_TRI(563, 560, 564);
	  COL_TRI(560, 559, 615);
	  COL_TRI(560, 615, 685);
	  COL_TRI(573, 567, 600);
	  COL_TRI(565, 561, 563);
	  COL_TRI(561, 614, 613);
	  COL_TRI(561, 565, 614);
	  COL_TRI(565, 563, 566);
	  COL_TRI(566, 563, 564);
	  COL_TRI(567, 565, 568);
	  COL_TRI(568, 565, 566);
	  COL_TRI(565, 567, 572);
	  COL_TRI(565, 572, 614);
	  COL_TRI(566, 570, 568);
	  COL_TRI(569, 566, 564);
	  COL_TRI(570, 566, 569);
	  COL_TRI(571, 567, 568);
	  COL_TRI(572, 567, 573);
	  COL_TRI(564, 578, 688);
	  COL_TRI(568, 570, 577);
	  COL_TRI(575, 568, 577);
	  COL_TRI(576, 571, 568);
	  COL_TRI(575, 576, 568);
	  COL_TRI(570, 569, 611);
	  COL_TRI(577, 570, 611);
	  COL_TRI(574, 567, 571);
	  COL_TRI(576, 574, 571);
	  COL_TRI(578, 687, 688);
	  COL_TRI(578, 580, 687);
	  COL_TRI(577, 585, 635);
	  COL_TRI(581, 688, 687);
	  COL_TRI(582, 581, 687);
	  COL_TRI(582, 687, 580);
	  COL_TRI(583, 564, 688);
	  COL_TRI(581, 583, 688);
	  COL_TRI(581, 584, 611);
	  COL_TRI(581, 611, 583);
	  COL_TRI(584, 581, 582);
	  COL_TRI(585, 577, 611);
	  COL_TRI(575, 577, 635);
	  COL_TRI(590, 591, 547);
	  COL_TRI(586, 576, 575);
	  COL_TRI(498, 586, 575);
	  COL_TRI(576, 586, 574);
	  COL_TRI(587, 591, 590);
	  COL_TRI(588, 591, 587);
	  COL_TRI(523, 588, 587);
	  COL_TRI(589, 523, 587);
	  COL_TRI(590, 589, 587);
	  COL_TRI(588, 689, 591);
	  COL_TRI(591, 689, 690);
	  COL_TRI(592, 591, 690);
	  COL_TRI(591, 592, 547);
	  COL_TRI(590, 546, 682);
	  COL_TRI(590, 682, 621);
	  COL_TRI(589, 590, 621);
	  COL_TRI(590, 547, 546);
	  COL_TRI(588, 593, 689);
	  COL_TRI(593, 588, 523);
	  COL_TRI(594, 593, 523);
	  COL_TRI(523, 589, 623);
	  COL_TRI(589, 621, 622);
	  COL_TRI(589, 622, 623);
	  COL_TRI(603, 548, 602);
	  COL_TRI(595, 599, 598);
	  COL_TRI(595, 598, 686);
	  COL_TRI(595, 601, 629);
	  COL_TRI(596, 599, 595);
	  COL_TRI(597, 596, 595);
	  COL_TRI(595, 686, 601);
	  COL_TRI(598, 599, 602);
	  COL_TRI(599, 596, 603);
	  COL_TRI(599, 603, 602);
	  COL_TRI(600, 686, 598);
	  COL_TRI(600, 598, 602);
	  COL_TRI(574, 686, 600);
	  COL_TRI(601, 686, 574);
	  COL_TRI(602, 604, 600);
	  COL_TRI(602, 548, 549);
	  COL_TRI(602, 549, 604);
	  COL_TRI(605, 621, 659);
	  COL_TRI(604, 573, 600);
	  COL_TRI(574, 600, 567);
	  COL_TRI(603, 683, 548);
	  COL_TRI(605, 683, 606);
	  COL_TRI(603, 606, 683);
	  COL_TRI(606, 531, 605);
	  COL_TRI(531, 608, 605);
	  COL_TRI(605, 608, 621);
	  COL_TRI(603, 684, 606);
	  COL_TRI(531, 606, 533);
	  COL_TRI(606, 684, 533);
	  COL_TRI(607, 608, 531);
	  COL_TRI(529, 607, 531);
	  COL_TRI(608, 607, 621);
	  COL_TRI(609, 584, 582);
	  COL_TRI(582, 580, 643);
	  COL_TRI(610, 580, 658);
	  COL_TRI(580, 578, 658);
	  COL_TRI(580, 610, 643);
	  COL_TRI(569, 564, 583);
	  COL_TRI(564, 579, 578);
	  COL_TRI(579, 564, 685);
	  COL_TRI(611, 569, 583);
	  COL_TRI(612, 549, 681);
	  COL_TRI(612, 604, 549);
	  COL_TRI(579, 658, 578);
	  COL_TRI(592, 545, 547);
	  COL_TRI(545, 592, 559);
	  COL_TRI(545, 559, 680);
	  COL_TRI(612, 573, 604);
	  COL_TRI(613, 612, 562);
	  COL_TRI(612, 681, 562);
	  COL_TRI(612, 572, 573);
	  COL_TRI(572, 612, 614);
	  COL_TRI(614, 612, 613);
	  COL_TRI(617, 619, 650);
	  COL_TRI(615, 592, 690);
	  COL_TRI(559, 592, 615);
	  COL_TRI(546, 679, 682);
	  COL_TRI(616, 615, 690);
	  COL_TRI(616, 690, 689);
	  COL_TRI(617, 616, 689);
	  COL_TRI(618, 616, 677);
	  COL_TRI(616, 617, 677);
	  COL_TRI(616, 618, 615);
	  COL_TRI(619, 617, 689);
	  COL_TRI(625, 692, 693);
	  COL_TRI(620, 615, 618);
	  COL_TRI(579, 685, 615);
	  COL_TRI(579, 615, 620);
	  COL_TRI(621, 691, 622);
	  COL_TRI(622, 691, 624);
	  COL_TRI(623, 622, 624);
	  COL_TRI(621, 692, 691);
	  COL_TRI(624, 691, 692);
	  COL_TRI(624, 692, 625);
	  COL_TRI(621, 693, 692);
	  COL_TRI(601, 628, 631);
	  COL_TRI(625, 693, 626);
	  COL_TRI(621, 607, 693);
	  COL_TRI(626, 693, 607);
	  COL_TRI(626, 607, 529);
	  COL_TRI(596, 557, 603);
	  COL_TRI(557, 596, 597);
	  COL_TRI(627, 557, 597);
	  COL_TRI(628, 601, 574);
	  COL_TRI(629, 601, 631);
	  COL_TRI(630, 628, 574);
	  COL_TRI(631, 628, 630);
	  COL_TRI(631, 630, 494);
	  COL_TRI(632, 630, 574);
	  COL_TRI(630, 632, 633);
	  COL_TRI(494, 630, 633);
	  COL_TRI(586, 632, 574);
	  COL_TRI(633, 632, 586);
	  COL_TRI(633, 586, 498);
	  COL_TRI(634, 585, 611);
	  COL_TRI(635, 585, 634);
	  COL_TRI(635, 634, 637);
	  COL_TRI(636, 634, 611);
	  COL_TRI(634, 636, 502);
	  COL_TRI(637, 634, 502);
	  COL_TRI(638, 636, 611);
	  COL_TRI(502, 636, 638);
	  COL_TRI(502, 638, 640);
	  COL_TRI(639, 638, 611);
	  COL_TRI(638, 639, 641);
	  COL_TRI(640, 638, 641);
	  COL_TRI(584, 639, 611);
	  COL_TRI(641, 639, 584);
	  COL_TRI(641, 584, 609);
	  COL_TRI(642, 610, 658);
	  COL_TRI(650, 619, 649);
	  COL_TRI(643, 642, 510);
	  COL_TRI(643, 610, 642);
	  COL_TRI(644, 642, 658);
	  COL_TRI(642, 644, 646);
	  COL_TRI(510, 642, 646);
	  COL_TRI(645, 644, 658);
	  COL_TRI(646, 644, 645);
	  COL_TRI(646, 645, 648);
	  COL_TRI(647, 645, 658);
	  COL_TRI(648, 645, 539);
	  COL_TRI(645, 647, 539);
	  COL_TRI(649, 619, 689);
	  COL_TRI(650, 649, 652);
	  COL_TRI(651, 649, 689);
	  COL_TRI(652, 649, 651);
	  COL_TRI(652, 651, 654);
	  COL_TRI(653, 651, 689);
	  COL_TRI(651, 653, 656);
	  COL_TRI(654, 651, 656);
	  COL_TRI(655, 653, 689);
	  COL_TRI(656, 653, 657);
	  COL_TRI(653, 655, 657);
	  COL_TRI(593, 655, 689);
	  COL_TRI(657, 655, 593);
	  COL_TRI(657, 593, 594);
	  COL_TRI(658, 579, 620);
	  COL_TRI(659, 621, 682);
	  COL_TRI(659, 682, 679);
	  COL_TRI_INIT(SURFACE_HARD_NOT_SLIPPERY, 24);
	  COL_TRI(278, 279, 280);
	  COL_TRI(266, 267, 268);
	  COL_TRI(266, 269, 267);
	  COL_TRI(270, 269, 266);
	  COL_TRI(266, 268, 271);
	  COL_TRI(271, 268, 272);
	  COL_TRI(272, 273, 271);
	  COL_TRI(270, 274, 269);
	  COL_TRI(275, 270, 273);
	  COL_TRI(276, 274, 270);
	  COL_TRI(275, 276, 270);
	  COL_TRI(277, 275, 273);
	  COL_TRI(272, 277, 273);
	  COL_TRI(284, 288, 289);
	  COL_TRI(280, 279, 281);
	  COL_TRI(280, 282, 283);
	  COL_TRI(280, 281, 282);
	  COL_TRI(283, 282, 284);
	  COL_TRI(284, 289, 283);
	  COL_TRI(278, 285, 279);
	  COL_TRI(286, 278, 289);
	  COL_TRI(287, 285, 278);
	  COL_TRI(286, 287, 278);
	  COL_TRI(288, 286, 289);
	  COL_TRI_STOP();
	  COL_SPECIAL_INIT(1);
	  SPECIAL_OBJECT_WITH_YAW(/*preset*/ special_null_start, /*pos*/ -67, 1669, -16, /*yaw*/ 192); // unused, probably an early way to set initial position
	  COL_END();
	}

	var wmotr = [
	  wmotr_seg7_collision
	];

	var levels = {
	  bbh,
	  bitfs,
	  bits,
	  bob,
	  bowser_1,
	  castle_courtyard,
	  castle_grounds,
	  castle_inside,
	  ccm,
	  cotmc,
	  ddd,
	  debug,
	  hmc,
	  jrb,
	  lll,
	  pss,
	  rr,
	  sa,
	  sl,
	  thi,
	  ttc,
	  ttm,
	  vcutm,
	  wdw,
	  wf,
	  wmotr
	};

	const subscriber_queue = [];

	/**
	 * Create a `Writable` store that allows both updating and reading by subscription.
	 *
	 * https://svelte.dev/docs/svelte-store#writable
	 * @template T
	 * @param {T} [value] initial value
	 * @param {import('./public.js').StartStopNotifier<T>} [start]
	 * @returns {import('./public.js').Writable<T>}
	 */
	function writable(value, start = noop) {
		/** @type {import('./public.js').Unsubscriber} */
		let stop;
		/** @type {Set<import('./private.js').SubscribeInvalidateTuple<T>>} */
		const subscribers = new Set();
		/** @param {T} new_value
		 * @returns {void}
		 */
		function set(new_value) {
			if (safe_not_equal(value, new_value)) {
				value = new_value;
				if (stop) {
					// store is ready
					const run_queue = !subscriber_queue.length;
					for (const subscriber of subscribers) {
						subscriber[1]();
						subscriber_queue.push(subscriber, value);
					}
					if (run_queue) {
						for (let i = 0; i < subscriber_queue.length; i += 2) {
							subscriber_queue[i][0](subscriber_queue[i + 1]);
						}
						subscriber_queue.length = 0;
					}
				}
			}
		}

		/**
		 * @param {import('./public.js').Updater<T>} fn
		 * @returns {void}
		 */
		function update(fn) {
			set(fn(value));
		}

		/**
		 * @param {import('./public.js').Subscriber<T>} run
		 * @param {import('./private.js').Invalidator<T>} [invalidate]
		 * @returns {import('./public.js').Unsubscriber}
		 */
		function subscribe(run, invalidate = noop) {
			/** @type {import('./private.js').SubscribeInvalidateTuple<T>} */
			const subscriber = [run, invalidate];
			subscribers.add(subscriber);
			if (subscribers.size === 1) {
				stop = start(set, update) || noop;
			}
			run(value);
			return () => {
				subscribers.delete(subscriber);
				if (subscribers.size === 0 && stop) {
					stop();
					stop = null;
				}
			};
		}
		return { set, update, subscribe };
	}

	const navWidth = writable(-1);
	const resizing = writable(false);
	const viewportSize = writable([300, 150]);
	const browse = writable(true);
	const level = writable(null);
	const faces = writable(true);
	const edges = writable(true);
	const seams = writable(true);
	const bounds = writable(true);
	const gaps = writable(true);
	const folds = writable(true);
	const xray = writable(true);

	/* src/components/Icon.svelte generated by Svelte v4.2.1 */

	function create_fragment$5(ctx) {
		let svg;
		let use;
		let use_href_value;

		return {
			c() {
				svg = svg_element("svg");
				use = svg_element("use");
				attr(use, "href", use_href_value = "./icons.svg#" + /*id*/ ctx[0]);
				attr(svg, "class", "svelte-ydozy8");
			},
			m(target, anchor) {
				insert(target, svg, anchor);
				append(svg, use);
			},
			p(ctx, [dirty]) {
				if (dirty & /*id*/ 1 && use_href_value !== (use_href_value = "./icons.svg#" + /*id*/ ctx[0])) {
					attr(use, "href", use_href_value);
				}
			},
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) {
					detach(svg);
				}
			}
		};
	}

	function instance$5($$self, $$props, $$invalidate) {
		let { id } = $$props;

		$$self.$$set = $$props => {
			if ('id' in $$props) $$invalidate(0, id = $$props.id);
		};

		return [id];
	}

	class Icon extends SvelteComponent {
		constructor(options) {
			super();
			init$1(this, options, instance$5, create_fragment$5, safe_not_equal, { id: 0 });
		}
	}

	/* src/components/TreeView.svelte generated by Svelte v4.2.1 */

	function get_each_context(ctx, list, i) {
		const child_ctx = ctx.slice();
		child_ctx[11] = list[i];
		return child_ctx;
	}

	// (19:0) {#if !root}
	function create_if_block_2(ctx) {
		let button;
		let div0;
		let icon0;
		let t0;
		let div1;
		let icon1;
		let t1;
		let div2;
		let t2;
		let current;
		let mounted;
		let dispose;

		icon0 = new Icon({
				props: {
					id: /*expanded*/ ctx[5] ? 'arrow-down' : 'arrow-right'
				}
			});

		icon1 = new Icon({ props: { id: /*icon*/ ctx[1] } });

		return {
			c() {
				button = element("button");
				div0 = element("div");
				create_component(icon0.$$.fragment);
				t0 = space();
				div1 = element("div");
				create_component(icon1.$$.fragment);
				t1 = space();
				div2 = element("div");
				t2 = text(/*label*/ ctx[0]);
				attr(div0, "class", "arrow svelte-wljk9z");
				attr(div1, "class", "icon svelte-wljk9z");
				attr(button, "class", "item svelte-wljk9z");
			},
			m(target, anchor) {
				insert(target, button, anchor);
				append(button, div0);
				mount_component(icon0, div0, null);
				append(button, t0);
				append(button, div1);
				mount_component(icon1, div1, null);
				append(button, t1);
				append(button, div2);
				append(div2, t2);
				current = true;

				if (!mounted) {
					dispose = listen(button, "click", /*click_handler*/ ctx[9]);
					mounted = true;
				}
			},
			p(ctx, dirty) {
				const icon0_changes = {};
				if (dirty & /*expanded*/ 32) icon0_changes.id = /*expanded*/ ctx[5] ? 'arrow-down' : 'arrow-right';
				icon0.$set(icon0_changes);
				const icon1_changes = {};
				if (dirty & /*icon*/ 2) icon1_changes.id = /*icon*/ ctx[1];
				icon1.$set(icon1_changes);
				if (!current || dirty & /*label*/ 1) set_data(t2, /*label*/ ctx[0]);
			},
			i(local) {
				if (current) return;
				transition_in(icon0.$$.fragment, local);
				transition_in(icon1.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(icon0.$$.fragment, local);
				transition_out(icon1.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				if (detaching) {
					detach(button);
				}

				destroy_component(icon0);
				destroy_component(icon1);
				mounted = false;
				dispose();
			}
		};
	}

	// (29:0) {#if expanded}
	function create_if_block(ctx) {
		let ul;
		let ul_style_value;
		let current;
		let each_value = ensure_array_like(/*children*/ ctx[2]);
		let each_blocks = [];

		for (let i = 0; i < each_value.length; i += 1) {
			each_blocks[i] = create_each_block(get_each_context(ctx, each_value, i));
		}

		const out = i => transition_out(each_blocks[i], 1, 1, () => {
			each_blocks[i] = null;
		});

		return {
			c() {
				ul = element("ul");

				for (let i = 0; i < each_blocks.length; i += 1) {
					each_blocks[i].c();
				}

				attr(ul, "style", ul_style_value = '--level: ' + /*level*/ ctx[3]);
				attr(ul, "class", "svelte-wljk9z");
			},
			m(target, anchor) {
				insert(target, ul, anchor);

				for (let i = 0; i < each_blocks.length; i += 1) {
					if (each_blocks[i]) {
						each_blocks[i].m(ul, null);
					}
				}

				current = true;
			},
			p(ctx, dirty) {
				if (dirty & /*children, level, selected, $selected, onItemClick*/ 348) {
					each_value = ensure_array_like(/*children*/ ctx[2]);
					let i;

					for (i = 0; i < each_value.length; i += 1) {
						const child_ctx = get_each_context(ctx, each_value, i);

						if (each_blocks[i]) {
							each_blocks[i].p(child_ctx, dirty);
							transition_in(each_blocks[i], 1);
						} else {
							each_blocks[i] = create_each_block(child_ctx);
							each_blocks[i].c();
							transition_in(each_blocks[i], 1);
							each_blocks[i].m(ul, null);
						}
					}

					group_outros();

					for (i = each_value.length; i < each_blocks.length; i += 1) {
						out(i);
					}

					check_outros();
				}

				if (!current || dirty & /*level*/ 8 && ul_style_value !== (ul_style_value = '--level: ' + /*level*/ ctx[3])) {
					attr(ul, "style", ul_style_value);
				}
			},
			i(local) {
				if (current) return;

				for (let i = 0; i < each_value.length; i += 1) {
					transition_in(each_blocks[i]);
				}

				current = true;
			},
			o(local) {
				each_blocks = each_blocks.filter(Boolean);

				for (let i = 0; i < each_blocks.length; i += 1) {
					transition_out(each_blocks[i]);
				}

				current = false;
			},
			d(detaching) {
				if (detaching) {
					detach(ul);
				}

				destroy_each(each_blocks, detaching);
			}
		};
	}

	// (41:8) {:else}
	function create_else_block(ctx) {
		let button;
		let div0;
		let t0;
		let div1;
		let icon_1;
		let t1;
		let div2;
		let t2_value = /*child*/ ctx[11].label + "";
		let t2;
		let button_class_value;
		let current;
		let mounted;
		let dispose;
		icon_1 = new Icon({ props: { id: /*child*/ ctx[11].icon } });

		function click_handler_1(...args) {
			return /*click_handler_1*/ ctx[10](/*child*/ ctx[11], ...args);
		}

		return {
			c() {
				button = element("button");
				div0 = element("div");
				t0 = space();
				div1 = element("div");
				create_component(icon_1.$$.fragment);
				t1 = space();
				div2 = element("div");
				t2 = text(t2_value);
				attr(div0, "class", "arrow svelte-wljk9z");
				attr(div1, "class", "icon svelte-wljk9z");
				attr(div2, "class", "label");

				attr(button, "class", button_class_value = "" + (null_to_empty(/*child*/ ctx[11].data === /*$selected*/ ctx[6]
				? 'item active'
				: 'item') + " svelte-wljk9z"));
			},
			m(target, anchor) {
				insert(target, button, anchor);
				append(button, div0);
				append(button, t0);
				append(button, div1);
				mount_component(icon_1, div1, null);
				append(button, t1);
				append(button, div2);
				append(div2, t2);
				current = true;

				if (!mounted) {
					dispose = listen(button, "click", click_handler_1);
					mounted = true;
				}
			},
			p(new_ctx, dirty) {
				ctx = new_ctx;
				const icon_1_changes = {};
				if (dirty & /*children*/ 4) icon_1_changes.id = /*child*/ ctx[11].icon;
				icon_1.$set(icon_1_changes);
				if ((!current || dirty & /*children*/ 4) && t2_value !== (t2_value = /*child*/ ctx[11].label + "")) set_data(t2, t2_value);

				if (!current || dirty & /*children, $selected*/ 68 && button_class_value !== (button_class_value = "" + (null_to_empty(/*child*/ ctx[11].data === /*$selected*/ ctx[6]
				? 'item active'
				: 'item') + " svelte-wljk9z"))) {
					attr(button, "class", button_class_value);
				}
			},
			i(local) {
				if (current) return;
				transition_in(icon_1.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(icon_1.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				if (detaching) {
					detach(button);
				}

				destroy_component(icon_1);
				mounted = false;
				dispose();
			}
		};
	}

	// (33:8) {#if child.children}
	function create_if_block_1(ctx) {
		let treeview;
		let current;

		treeview = new TreeView({
				props: {
					children: /*child*/ ctx[11].children,
					label: /*child*/ ctx[11].label,
					icon: /*child*/ ctx[11].icon,
					level: /*level*/ ctx[3] + 1,
					selected: /*selected*/ ctx[4]
				}
			});

		return {
			c() {
				create_component(treeview.$$.fragment);
			},
			m(target, anchor) {
				mount_component(treeview, target, anchor);
				current = true;
			},
			p(ctx, dirty) {
				const treeview_changes = {};
				if (dirty & /*children*/ 4) treeview_changes.children = /*child*/ ctx[11].children;
				if (dirty & /*children*/ 4) treeview_changes.label = /*child*/ ctx[11].label;
				if (dirty & /*children*/ 4) treeview_changes.icon = /*child*/ ctx[11].icon;
				if (dirty & /*level*/ 8) treeview_changes.level = /*level*/ ctx[3] + 1;
				if (dirty & /*selected*/ 16) treeview_changes.selected = /*selected*/ ctx[4];
				treeview.$set(treeview_changes);
			},
			i(local) {
				if (current) return;
				transition_in(treeview.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(treeview.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				destroy_component(treeview, detaching);
			}
		};
	}

	// (31:4) {#each children as child}
	function create_each_block(ctx) {
		let li;
		let current_block_type_index;
		let if_block;
		let t;
		let current;
		const if_block_creators = [create_if_block_1, create_else_block];
		const if_blocks = [];

		function select_block_type(ctx, dirty) {
			if (/*child*/ ctx[11].children) return 0;
			return 1;
		}

		current_block_type_index = select_block_type(ctx);
		if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);

		return {
			c() {
				li = element("li");
				if_block.c();
				t = space();
				attr(li, "class", "svelte-wljk9z");
			},
			m(target, anchor) {
				insert(target, li, anchor);
				if_blocks[current_block_type_index].m(li, null);
				append(li, t);
				current = true;
			},
			p(ctx, dirty) {
				let previous_block_index = current_block_type_index;
				current_block_type_index = select_block_type(ctx);

				if (current_block_type_index === previous_block_index) {
					if_blocks[current_block_type_index].p(ctx, dirty);
				} else {
					group_outros();

					transition_out(if_blocks[previous_block_index], 1, 1, () => {
						if_blocks[previous_block_index] = null;
					});

					check_outros();
					if_block = if_blocks[current_block_type_index];

					if (!if_block) {
						if_block = if_blocks[current_block_type_index] = if_block_creators[current_block_type_index](ctx);
						if_block.c();
					} else {
						if_block.p(ctx, dirty);
					}

					transition_in(if_block, 1);
					if_block.m(li, t);
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block);
				current = true;
			},
			o(local) {
				transition_out(if_block);
				current = false;
			},
			d(detaching) {
				if (detaching) {
					detach(li);
				}

				if_blocks[current_block_type_index].d();
			}
		};
	}

	function create_fragment$4(ctx) {
		let t;
		let if_block1_anchor;
		let current;
		let if_block0 = !/*root*/ ctx[7] && create_if_block_2(ctx);
		let if_block1 = /*expanded*/ ctx[5] && create_if_block(ctx);

		return {
			c() {
				if (if_block0) if_block0.c();
				t = space();
				if (if_block1) if_block1.c();
				if_block1_anchor = empty();
			},
			m(target, anchor) {
				if (if_block0) if_block0.m(target, anchor);
				insert(target, t, anchor);
				if (if_block1) if_block1.m(target, anchor);
				insert(target, if_block1_anchor, anchor);
				current = true;
			},
			p(ctx, [dirty]) {
				if (!/*root*/ ctx[7]) if_block0.p(ctx, dirty);

				if (/*expanded*/ ctx[5]) {
					if (if_block1) {
						if_block1.p(ctx, dirty);

						if (dirty & /*expanded*/ 32) {
							transition_in(if_block1, 1);
						}
					} else {
						if_block1 = create_if_block(ctx);
						if_block1.c();
						transition_in(if_block1, 1);
						if_block1.m(if_block1_anchor.parentNode, if_block1_anchor);
					}
				} else if (if_block1) {
					group_outros();

					transition_out(if_block1, 1, 1, () => {
						if_block1 = null;
					});

					check_outros();
				}
			},
			i(local) {
				if (current) return;
				transition_in(if_block0);
				transition_in(if_block1);
				current = true;
			},
			o(local) {
				transition_out(if_block0);
				transition_out(if_block1);
				current = false;
			},
			d(detaching) {
				if (detaching) {
					detach(t);
					detach(if_block1_anchor);
				}

				if (if_block0) if_block0.d(detaching);
				if (if_block1) if_block1.d(detaching);
			}
		};
	}

	function instance$4($$self, $$props, $$invalidate) {
		let $selected,
			$$unsubscribe_selected = noop,
			$$subscribe_selected = () => ($$unsubscribe_selected(), $$unsubscribe_selected = subscribe(selected, $$value => $$invalidate(6, $selected = $$value)), selected);

		$$self.$$.on_destroy.push(() => $$unsubscribe_selected());
		let { label = '' } = $$props;
		let { icon = '' } = $$props;
		let { children } = $$props;
		let { level = 0 } = $$props;
		let { selected } = $$props;
		$$subscribe_selected();
		const root = level === 0;
		let expanded = root;

		function onItemClick(item, e) {
			selected.update(curData => item.data !== curData ? item.data : null);
			e?.currentTarget?.blur();
		}

		const click_handler = () => $$invalidate(5, expanded = !expanded);
		const click_handler_1 = (child, e) => onItemClick(child, e);

		$$self.$$set = $$props => {
			if ('label' in $$props) $$invalidate(0, label = $$props.label);
			if ('icon' in $$props) $$invalidate(1, icon = $$props.icon);
			if ('children' in $$props) $$invalidate(2, children = $$props.children);
			if ('level' in $$props) $$invalidate(3, level = $$props.level);
			if ('selected' in $$props) $$subscribe_selected($$invalidate(4, selected = $$props.selected));
		};

		return [
			label,
			icon,
			children,
			level,
			selected,
			expanded,
			$selected,
			root,
			onItemClick,
			click_handler,
			click_handler_1
		];
	}

	class TreeView extends SvelteComponent {
		constructor(options) {
			super();

			init$1(this, options, instance$4, create_fragment$4, safe_not_equal, {
				label: 0,
				icon: 1,
				children: 2,
				level: 3,
				selected: 4
			});
		}
	}

	// OrbitControls performs orbiting, dollying (zooming), and panning.
	// Unlike TrackballControls, it maintains the "up" direction object.up (+Y by default).
	//
	//    Orbit - left mouse / touch: one-finger move
	//    Zoom - middle mouse, or mousewheel / touch: two-finger spread or squish
	//    Pan - right mouse, or left mouse + ctrl/meta/shiftKey, or arrow keys / touch: two-finger move

	const _changeEvent = { type: 'change' };
	const _startEvent = { type: 'start' };
	const _endEvent = { type: 'end' };
	const _ray = new Ray();
	const _plane = new Plane();
	const TILT_LIMIT = Math.cos( 70 * MathUtils.DEG2RAD );

	class OrbitControls extends EventDispatcher {

		constructor( object, domElement ) {

			super();

			this.object = object;
			this.domElement = domElement;
			this.domElement.style.touchAction = 'none'; // disable touch scroll

			// Set to false to disable this control
			this.enabled = true;

			// "target" sets the location of focus, where the object orbits around
			this.target = new Vector3();

			// How far you can dolly in and out ( PerspectiveCamera only )
			this.minDistance = 0;
			this.maxDistance = Infinity;

			// How far you can zoom in and out ( OrthographicCamera only )
			this.minZoom = 0;
			this.maxZoom = Infinity;

			// How far you can orbit vertically, upper and lower limits.
			// Range is 0 to Math.PI radians.
			this.minPolarAngle = 0; // radians
			this.maxPolarAngle = Math.PI; // radians

			// How far you can orbit horizontally, upper and lower limits.
			// If set, the interval [ min, max ] must be a sub-interval of [ - 2 PI, 2 PI ], with ( max - min < 2 PI )
			this.minAzimuthAngle = - Infinity; // radians
			this.maxAzimuthAngle = Infinity; // radians

			// Set to true to enable damping (inertia)
			// If damping is enabled, you must call controls.update() in your animation loop
			this.enableDamping = false;
			this.dampingFactor = 0.05;

			// This option actually enables dollying in and out; left as "zoom" for backwards compatibility.
			// Set to false to disable zooming
			this.enableZoom = true;
			this.zoomSpeed = 1.0;

			// Set to false to disable rotating
			this.enableRotate = true;
			this.rotateSpeed = 1.0;

			// Set to false to disable panning
			this.enablePan = true;
			this.panSpeed = 1.0;
			this.screenSpacePanning = true; // if false, pan orthogonal to world-space direction camera.up
			this.keyPanSpeed = 7.0;	// pixels moved per arrow key push
			this.zoomToCursor = false;

			// Set to true to automatically rotate around the target
			// If auto-rotate is enabled, you must call controls.update() in your animation loop
			this.autoRotate = false;
			this.autoRotateSpeed = 2.0; // 30 seconds per orbit when fps is 60

			// The four arrow keys
			this.keys = { LEFT: 'ArrowLeft', UP: 'ArrowUp', RIGHT: 'ArrowRight', BOTTOM: 'ArrowDown' };

			// Mouse buttons
			this.mouseButtons = { LEFT: MOUSE.ROTATE, MIDDLE: MOUSE.DOLLY, RIGHT: MOUSE.PAN };

			// Touch fingers
			this.touches = { ONE: TOUCH.ROTATE, TWO: TOUCH.DOLLY_PAN };

			// for reset
			this.target0 = this.target.clone();
			this.position0 = this.object.position.clone();
			this.zoom0 = this.object.zoom;

			// the target DOM element for key events
			this._domElementKeyEvents = null;

			//
			// public methods
			//

			this.getPolarAngle = function () {

				return spherical.phi;

			};

			this.getAzimuthalAngle = function () {

				return spherical.theta;

			};

			this.getDistance = function () {

				return this.object.position.distanceTo( this.target );

			};

			this.listenToKeyEvents = function ( domElement ) {

				domElement.addEventListener( 'keydown', onKeyDown );
				this._domElementKeyEvents = domElement;

			};

			this.stopListenToKeyEvents = function () {

				this._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );
				this._domElementKeyEvents = null;

			};

			this.saveState = function () {

				scope.target0.copy( scope.target );
				scope.position0.copy( scope.object.position );
				scope.zoom0 = scope.object.zoom;

			};

			this.reset = function () {

				scope.target.copy( scope.target0 );
				scope.object.position.copy( scope.position0 );
				scope.object.zoom = scope.zoom0;

				scope.object.updateProjectionMatrix();
				scope.dispatchEvent( _changeEvent );

				scope.update();

				state = STATE.NONE;

			};

			// this method is exposed, but perhaps it would be better if we can make it private...
			this.update = function () {

				const offset = new Vector3();

				// so camera.up is the orbit axis
				const quat = new Quaternion().setFromUnitVectors( object.up, new Vector3( 0, 1, 0 ) );
				const quatInverse = quat.clone().invert();

				const lastPosition = new Vector3();
				const lastQuaternion = new Quaternion();
				const lastTargetPosition = new Vector3();

				const twoPI = 2 * Math.PI;

				return function update( deltaTime = null ) {

					const position = scope.object.position;

					offset.copy( position ).sub( scope.target );

					// rotate offset to "y-axis-is-up" space
					offset.applyQuaternion( quat );

					// angle from z-axis around y-axis
					spherical.setFromVector3( offset );

					if ( scope.autoRotate && state === STATE.NONE ) {

						rotateLeft( getAutoRotationAngle( deltaTime ) );

					}

					if ( scope.enableDamping ) {

						spherical.theta += sphericalDelta.theta * scope.dampingFactor;
						spherical.phi += sphericalDelta.phi * scope.dampingFactor;

					} else {

						spherical.theta += sphericalDelta.theta;
						spherical.phi += sphericalDelta.phi;

					}

					// restrict theta to be between desired limits

					let min = scope.minAzimuthAngle;
					let max = scope.maxAzimuthAngle;

					if ( isFinite( min ) && isFinite( max ) ) {

						if ( min < - Math.PI ) min += twoPI; else if ( min > Math.PI ) min -= twoPI;

						if ( max < - Math.PI ) max += twoPI; else if ( max > Math.PI ) max -= twoPI;

						if ( min <= max ) {

							spherical.theta = Math.max( min, Math.min( max, spherical.theta ) );

						} else {

							spherical.theta = ( spherical.theta > ( min + max ) / 2 ) ?
								Math.max( min, spherical.theta ) :
								Math.min( max, spherical.theta );

						}

					}

					// restrict phi to be between desired limits
					spherical.phi = Math.max( scope.minPolarAngle, Math.min( scope.maxPolarAngle, spherical.phi ) );

					spherical.makeSafe();


					// move target to panned location

					if ( scope.enableDamping === true ) {

						scope.target.addScaledVector( panOffset, scope.dampingFactor );

					} else {

						scope.target.add( panOffset );

					}

					// adjust the camera position based on zoom only if we're not zooming to the cursor or if it's an ortho camera
					// we adjust zoom later in these cases
					if ( scope.zoomToCursor && performCursorZoom || scope.object.isOrthographicCamera ) {

						spherical.radius = clampDistance( spherical.radius );

					} else {

						spherical.radius = clampDistance( spherical.radius * scale );

					}


					offset.setFromSpherical( spherical );

					// rotate offset back to "camera-up-vector-is-up" space
					offset.applyQuaternion( quatInverse );

					position.copy( scope.target ).add( offset );

					scope.object.lookAt( scope.target );

					if ( scope.enableDamping === true ) {

						sphericalDelta.theta *= ( 1 - scope.dampingFactor );
						sphericalDelta.phi *= ( 1 - scope.dampingFactor );

						panOffset.multiplyScalar( 1 - scope.dampingFactor );

					} else {

						sphericalDelta.set( 0, 0, 0 );

						panOffset.set( 0, 0, 0 );

					}

					// adjust camera position
					let zoomChanged = false;
					if ( scope.zoomToCursor && performCursorZoom ) {

						let newRadius = null;
						if ( scope.object.isPerspectiveCamera ) {

							// move the camera down the pointer ray
							// this method avoids floating point error
							const prevRadius = offset.length();
							newRadius = clampDistance( prevRadius * scale );

							const radiusDelta = prevRadius - newRadius;
							scope.object.position.addScaledVector( dollyDirection, radiusDelta );
							scope.object.updateMatrixWorld();

						} else if ( scope.object.isOrthographicCamera ) {

							// adjust the ortho camera position based on zoom changes
							const mouseBefore = new Vector3( mouse.x, mouse.y, 0 );
							mouseBefore.unproject( scope.object );

							scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );
							scope.object.updateProjectionMatrix();
							zoomChanged = true;

							const mouseAfter = new Vector3( mouse.x, mouse.y, 0 );
							mouseAfter.unproject( scope.object );

							scope.object.position.sub( mouseAfter ).add( mouseBefore );
							scope.object.updateMatrixWorld();

							newRadius = offset.length();

						} else {

							console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - zoom to cursor disabled.' );
							scope.zoomToCursor = false;

						}

						// handle the placement of the target
						if ( newRadius !== null ) {

							if ( this.screenSpacePanning ) {

								// position the orbit target in front of the new camera position
								scope.target.set( 0, 0, - 1 )
									.transformDirection( scope.object.matrix )
									.multiplyScalar( newRadius )
									.add( scope.object.position );

							} else {

								// get the ray and translation plane to compute target
								_ray.origin.copy( scope.object.position );
								_ray.direction.set( 0, 0, - 1 ).transformDirection( scope.object.matrix );

								// if the camera is 20 degrees above the horizon then don't adjust the focus target to avoid
								// extremely large values
								if ( Math.abs( scope.object.up.dot( _ray.direction ) ) < TILT_LIMIT ) {

									object.lookAt( scope.target );

								} else {

									_plane.setFromNormalAndCoplanarPoint( scope.object.up, scope.target );
									_ray.intersectPlane( _plane, scope.target );

								}

							}

						}

					} else if ( scope.object.isOrthographicCamera ) {

						scope.object.zoom = Math.max( scope.minZoom, Math.min( scope.maxZoom, scope.object.zoom / scale ) );
						scope.object.updateProjectionMatrix();
						zoomChanged = true;

					}

					scale = 1;
					performCursorZoom = false;

					// update condition is:
					// min(camera displacement, camera rotation in radians)^2 > EPS
					// using small-angle approximation cos(x/2) = 1 - x^2 / 8

					if ( zoomChanged ||
						lastPosition.distanceToSquared( scope.object.position ) > EPS ||
						8 * ( 1 - lastQuaternion.dot( scope.object.quaternion ) ) > EPS ||
						lastTargetPosition.distanceToSquared( scope.target ) > 0 ) {

						scope.dispatchEvent( _changeEvent );

						lastPosition.copy( scope.object.position );
						lastQuaternion.copy( scope.object.quaternion );
						lastTargetPosition.copy( scope.target );

						zoomChanged = false;

						return true;

					}

					return false;

				};

			}();

			this.dispose = function () {

				scope.domElement.removeEventListener( 'contextmenu', onContextMenu );

				scope.domElement.removeEventListener( 'pointerdown', onPointerDown );
				scope.domElement.removeEventListener( 'pointercancel', onPointerUp );
				scope.domElement.removeEventListener( 'wheel', onMouseWheel );

				scope.domElement.removeEventListener( 'pointermove', onPointerMove );
				scope.domElement.removeEventListener( 'pointerup', onPointerUp );


				if ( scope._domElementKeyEvents !== null ) {

					scope._domElementKeyEvents.removeEventListener( 'keydown', onKeyDown );
					scope._domElementKeyEvents = null;

				}

				//scope.dispatchEvent( { type: 'dispose' } ); // should this be added here?

			};

			//
			// internals
			//

			const scope = this;

			const STATE = {
				NONE: - 1,
				ROTATE: 0,
				DOLLY: 1,
				PAN: 2,
				TOUCH_ROTATE: 3,
				TOUCH_PAN: 4,
				TOUCH_DOLLY_PAN: 5,
				TOUCH_DOLLY_ROTATE: 6
			};

			let state = STATE.NONE;

			const EPS = 0.000001;

			// current position in spherical coordinates
			const spherical = new Spherical();
			const sphericalDelta = new Spherical();

			let scale = 1;
			const panOffset = new Vector3();

			const rotateStart = new Vector2();
			const rotateEnd = new Vector2();
			const rotateDelta = new Vector2();

			const panStart = new Vector2();
			const panEnd = new Vector2();
			const panDelta = new Vector2();

			const dollyStart = new Vector2();
			const dollyEnd = new Vector2();
			const dollyDelta = new Vector2();

			const dollyDirection = new Vector3();
			const mouse = new Vector2();
			let performCursorZoom = false;

			const pointers = [];
			const pointerPositions = {};

			function getAutoRotationAngle( deltaTime ) {

				if ( deltaTime !== null ) {

					return ( 2 * Math.PI / 60 * scope.autoRotateSpeed ) * deltaTime;

				} else {

					return 2 * Math.PI / 60 / 60 * scope.autoRotateSpeed;

				}

			}

			function getZoomScale() {

				return Math.pow( 0.95, scope.zoomSpeed );

			}

			function rotateLeft( angle ) {

				sphericalDelta.theta -= angle;

			}

			function rotateUp( angle ) {

				sphericalDelta.phi -= angle;

			}

			const panLeft = function () {

				const v = new Vector3();

				return function panLeft( distance, objectMatrix ) {

					v.setFromMatrixColumn( objectMatrix, 0 ); // get X column of objectMatrix
					v.multiplyScalar( - distance );

					panOffset.add( v );

				};

			}();

			const panUp = function () {

				const v = new Vector3();

				return function panUp( distance, objectMatrix ) {

					if ( scope.screenSpacePanning === true ) {

						v.setFromMatrixColumn( objectMatrix, 1 );

					} else {

						v.setFromMatrixColumn( objectMatrix, 0 );
						v.crossVectors( scope.object.up, v );

					}

					v.multiplyScalar( distance );

					panOffset.add( v );

				};

			}();

			// deltaX and deltaY are in pixels; right and down are positive
			const pan = function () {

				const offset = new Vector3();

				return function pan( deltaX, deltaY ) {

					const element = scope.domElement;

					if ( scope.object.isPerspectiveCamera ) {

						// perspective
						const position = scope.object.position;
						offset.copy( position ).sub( scope.target );
						let targetDistance = offset.length();

						// half of the fov is center to top of screen
						targetDistance *= Math.tan( ( scope.object.fov / 2 ) * Math.PI / 180.0 );

						// we use only clientHeight here so aspect ratio does not distort speed
						panLeft( 2 * deltaX * targetDistance / element.clientHeight, scope.object.matrix );
						panUp( 2 * deltaY * targetDistance / element.clientHeight, scope.object.matrix );

					} else if ( scope.object.isOrthographicCamera ) {

						// orthographic
						panLeft( deltaX * ( scope.object.right - scope.object.left ) / scope.object.zoom / element.clientWidth, scope.object.matrix );
						panUp( deltaY * ( scope.object.top - scope.object.bottom ) / scope.object.zoom / element.clientHeight, scope.object.matrix );

					} else {

						// camera neither orthographic nor perspective
						console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - pan disabled.' );
						scope.enablePan = false;

					}

				};

			}();

			function dollyOut( dollyScale ) {

				if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {

					scale /= dollyScale;

				} else {

					console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
					scope.enableZoom = false;

				}

			}

			function dollyIn( dollyScale ) {

				if ( scope.object.isPerspectiveCamera || scope.object.isOrthographicCamera ) {

					scale *= dollyScale;

				} else {

					console.warn( 'WARNING: OrbitControls.js encountered an unknown camera type - dolly/zoom disabled.' );
					scope.enableZoom = false;

				}

			}

			function updateMouseParameters( event ) {

				if ( ! scope.zoomToCursor ) {

					return;

				}

				performCursorZoom = true;

				const rect = scope.domElement.getBoundingClientRect();
				const x = event.clientX - rect.left;
				const y = event.clientY - rect.top;
				const w = rect.width;
				const h = rect.height;

				mouse.x = ( x / w ) * 2 - 1;
				mouse.y = - ( y / h ) * 2 + 1;

				dollyDirection.set( mouse.x, mouse.y, 1 ).unproject( scope.object ).sub( scope.object.position ).normalize();

			}

			function clampDistance( dist ) {

				return Math.max( scope.minDistance, Math.min( scope.maxDistance, dist ) );

			}

			//
			// event callbacks - update the object state
			//

			function handleMouseDownRotate( event ) {

				rotateStart.set( event.clientX, event.clientY );

			}

			function handleMouseDownDolly( event ) {

				updateMouseParameters( event );
				dollyStart.set( event.clientX, event.clientY );

			}

			function handleMouseDownPan( event ) {

				panStart.set( event.clientX, event.clientY );

			}

			function handleMouseMoveRotate( event ) {

				rotateEnd.set( event.clientX, event.clientY );

				rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );

				const element = scope.domElement;

				rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height

				rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );

				rotateStart.copy( rotateEnd );

				scope.update();

			}

			function handleMouseMoveDolly( event ) {

				dollyEnd.set( event.clientX, event.clientY );

				dollyDelta.subVectors( dollyEnd, dollyStart );

				if ( dollyDelta.y > 0 ) {

					dollyOut( getZoomScale() );

				} else if ( dollyDelta.y < 0 ) {

					dollyIn( getZoomScale() );

				}

				dollyStart.copy( dollyEnd );

				scope.update();

			}

			function handleMouseMovePan( event ) {

				panEnd.set( event.clientX, event.clientY );

				panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );

				pan( panDelta.x, panDelta.y );

				panStart.copy( panEnd );

				scope.update();

			}

			function handleMouseWheel( event ) {

				updateMouseParameters( event );

				if ( event.deltaY < 0 ) {

					dollyIn( getZoomScale() );

				} else if ( event.deltaY > 0 ) {

					dollyOut( getZoomScale() );

				}

				scope.update();

			}

			function handleKeyDown( event ) {

				let needsUpdate = false;

				switch ( event.code ) {

					case scope.keys.UP:

						if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

							rotateUp( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );

						} else {

							pan( 0, scope.keyPanSpeed );

						}

						needsUpdate = true;
						break;

					case scope.keys.BOTTOM:

						if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

							rotateUp( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );

						} else {

							pan( 0, - scope.keyPanSpeed );

						}

						needsUpdate = true;
						break;

					case scope.keys.LEFT:

						if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

							rotateLeft( 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );

						} else {

							pan( scope.keyPanSpeed, 0 );

						}

						needsUpdate = true;
						break;

					case scope.keys.RIGHT:

						if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

							rotateLeft( - 2 * Math.PI * scope.rotateSpeed / scope.domElement.clientHeight );

						} else {

							pan( - scope.keyPanSpeed, 0 );

						}

						needsUpdate = true;
						break;

				}

				if ( needsUpdate ) {

					// prevent the browser from scrolling on cursor keys
					event.preventDefault();

					scope.update();

				}


			}

			function handleTouchStartRotate() {

				if ( pointers.length === 1 ) {

					rotateStart.set( pointers[ 0 ].pageX, pointers[ 0 ].pageY );

				} else {

					const x = 0.5 * ( pointers[ 0 ].pageX + pointers[ 1 ].pageX );
					const y = 0.5 * ( pointers[ 0 ].pageY + pointers[ 1 ].pageY );

					rotateStart.set( x, y );

				}

			}

			function handleTouchStartPan() {

				if ( pointers.length === 1 ) {

					panStart.set( pointers[ 0 ].pageX, pointers[ 0 ].pageY );

				} else {

					const x = 0.5 * ( pointers[ 0 ].pageX + pointers[ 1 ].pageX );
					const y = 0.5 * ( pointers[ 0 ].pageY + pointers[ 1 ].pageY );

					panStart.set( x, y );

				}

			}

			function handleTouchStartDolly() {

				const dx = pointers[ 0 ].pageX - pointers[ 1 ].pageX;
				const dy = pointers[ 0 ].pageY - pointers[ 1 ].pageY;

				const distance = Math.sqrt( dx * dx + dy * dy );

				dollyStart.set( 0, distance );

			}

			function handleTouchStartDollyPan() {

				if ( scope.enableZoom ) handleTouchStartDolly();

				if ( scope.enablePan ) handleTouchStartPan();

			}

			function handleTouchStartDollyRotate() {

				if ( scope.enableZoom ) handleTouchStartDolly();

				if ( scope.enableRotate ) handleTouchStartRotate();

			}

			function handleTouchMoveRotate( event ) {

				if ( pointers.length == 1 ) {

					rotateEnd.set( event.pageX, event.pageY );

				} else {

					const position = getSecondPointerPosition( event );

					const x = 0.5 * ( event.pageX + position.x );
					const y = 0.5 * ( event.pageY + position.y );

					rotateEnd.set( x, y );

				}

				rotateDelta.subVectors( rotateEnd, rotateStart ).multiplyScalar( scope.rotateSpeed );

				const element = scope.domElement;

				rotateLeft( 2 * Math.PI * rotateDelta.x / element.clientHeight ); // yes, height

				rotateUp( 2 * Math.PI * rotateDelta.y / element.clientHeight );

				rotateStart.copy( rotateEnd );

			}

			function handleTouchMovePan( event ) {

				if ( pointers.length === 1 ) {

					panEnd.set( event.pageX, event.pageY );

				} else {

					const position = getSecondPointerPosition( event );

					const x = 0.5 * ( event.pageX + position.x );
					const y = 0.5 * ( event.pageY + position.y );

					panEnd.set( x, y );

				}

				panDelta.subVectors( panEnd, panStart ).multiplyScalar( scope.panSpeed );

				pan( panDelta.x, panDelta.y );

				panStart.copy( panEnd );

			}

			function handleTouchMoveDolly( event ) {

				const position = getSecondPointerPosition( event );

				const dx = event.pageX - position.x;
				const dy = event.pageY - position.y;

				const distance = Math.sqrt( dx * dx + dy * dy );

				dollyEnd.set( 0, distance );

				dollyDelta.set( 0, Math.pow( dollyEnd.y / dollyStart.y, scope.zoomSpeed ) );

				dollyOut( dollyDelta.y );

				dollyStart.copy( dollyEnd );

			}

			function handleTouchMoveDollyPan( event ) {

				if ( scope.enableZoom ) handleTouchMoveDolly( event );

				if ( scope.enablePan ) handleTouchMovePan( event );

			}

			function handleTouchMoveDollyRotate( event ) {

				if ( scope.enableZoom ) handleTouchMoveDolly( event );

				if ( scope.enableRotate ) handleTouchMoveRotate( event );

			}

			//
			// event handlers - FSM: listen for events and reset state
			//

			function onPointerDown( event ) {

				if ( scope.enabled === false ) return;

				if ( pointers.length === 0 ) {

					scope.domElement.setPointerCapture( event.pointerId );

					scope.domElement.addEventListener( 'pointermove', onPointerMove );
					scope.domElement.addEventListener( 'pointerup', onPointerUp );

				}

				//

				addPointer( event );

				if ( event.pointerType === 'touch' ) {

					onTouchStart( event );

				} else {

					onMouseDown( event );

				}

			}

			function onPointerMove( event ) {

				if ( scope.enabled === false ) return;

				if ( event.pointerType === 'touch' ) {

					onTouchMove( event );

				} else {

					onMouseMove( event );

				}

			}

			function onPointerUp( event ) {

				removePointer( event );

				if ( pointers.length === 0 ) {

					scope.domElement.releasePointerCapture( event.pointerId );

					scope.domElement.removeEventListener( 'pointermove', onPointerMove );
					scope.domElement.removeEventListener( 'pointerup', onPointerUp );

				}

				scope.dispatchEvent( _endEvent );

				state = STATE.NONE;

			}

			function onMouseDown( event ) {

				let mouseAction;

				switch ( event.button ) {

					case 0:

						mouseAction = scope.mouseButtons.LEFT;
						break;

					case 1:

						mouseAction = scope.mouseButtons.MIDDLE;
						break;

					case 2:

						mouseAction = scope.mouseButtons.RIGHT;
						break;

					default:

						mouseAction = - 1;

				}

				switch ( mouseAction ) {

					case MOUSE.DOLLY:

						if ( scope.enableZoom === false ) return;

						handleMouseDownDolly( event );

						state = STATE.DOLLY;

						break;

					case MOUSE.ROTATE:

						if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

							if ( scope.enablePan === false ) return;

							handleMouseDownPan( event );

							state = STATE.PAN;

						} else {

							if ( scope.enableRotate === false ) return;

							handleMouseDownRotate( event );

							state = STATE.ROTATE;

						}

						break;

					case MOUSE.PAN:

						if ( event.ctrlKey || event.metaKey || event.shiftKey ) {

							if ( scope.enableRotate === false ) return;

							handleMouseDownRotate( event );

							state = STATE.ROTATE;

						} else {

							if ( scope.enablePan === false ) return;

							handleMouseDownPan( event );

							state = STATE.PAN;

						}

						break;

					default:

						state = STATE.NONE;

				}

				if ( state !== STATE.NONE ) {

					scope.dispatchEvent( _startEvent );

				}

			}

			function onMouseMove( event ) {

				switch ( state ) {

					case STATE.ROTATE:

						if ( scope.enableRotate === false ) return;

						handleMouseMoveRotate( event );

						break;

					case STATE.DOLLY:

						if ( scope.enableZoom === false ) return;

						handleMouseMoveDolly( event );

						break;

					case STATE.PAN:

						if ( scope.enablePan === false ) return;

						handleMouseMovePan( event );

						break;

				}

			}

			function onMouseWheel( event ) {

				if ( scope.enabled === false || scope.enableZoom === false || state !== STATE.NONE ) return;

				event.preventDefault();

				scope.dispatchEvent( _startEvent );

				handleMouseWheel( event );

				scope.dispatchEvent( _endEvent );

			}

			function onKeyDown( event ) {

				if ( scope.enabled === false || scope.enablePan === false ) return;

				handleKeyDown( event );

			}

			function onTouchStart( event ) {

				trackPointer( event );

				switch ( pointers.length ) {

					case 1:

						switch ( scope.touches.ONE ) {

							case TOUCH.ROTATE:

								if ( scope.enableRotate === false ) return;

								handleTouchStartRotate();

								state = STATE.TOUCH_ROTATE;

								break;

							case TOUCH.PAN:

								if ( scope.enablePan === false ) return;

								handleTouchStartPan();

								state = STATE.TOUCH_PAN;

								break;

							default:

								state = STATE.NONE;

						}

						break;

					case 2:

						switch ( scope.touches.TWO ) {

							case TOUCH.DOLLY_PAN:

								if ( scope.enableZoom === false && scope.enablePan === false ) return;

								handleTouchStartDollyPan();

								state = STATE.TOUCH_DOLLY_PAN;

								break;

							case TOUCH.DOLLY_ROTATE:

								if ( scope.enableZoom === false && scope.enableRotate === false ) return;

								handleTouchStartDollyRotate();

								state = STATE.TOUCH_DOLLY_ROTATE;

								break;

							default:

								state = STATE.NONE;

						}

						break;

					default:

						state = STATE.NONE;

				}

				if ( state !== STATE.NONE ) {

					scope.dispatchEvent( _startEvent );

				}

			}

			function onTouchMove( event ) {

				trackPointer( event );

				switch ( state ) {

					case STATE.TOUCH_ROTATE:

						if ( scope.enableRotate === false ) return;

						handleTouchMoveRotate( event );

						scope.update();

						break;

					case STATE.TOUCH_PAN:

						if ( scope.enablePan === false ) return;

						handleTouchMovePan( event );

						scope.update();

						break;

					case STATE.TOUCH_DOLLY_PAN:

						if ( scope.enableZoom === false && scope.enablePan === false ) return;

						handleTouchMoveDollyPan( event );

						scope.update();

						break;

					case STATE.TOUCH_DOLLY_ROTATE:

						if ( scope.enableZoom === false && scope.enableRotate === false ) return;

						handleTouchMoveDollyRotate( event );

						scope.update();

						break;

					default:

						state = STATE.NONE;

				}

			}

			function onContextMenu( event ) {

				if ( scope.enabled === false ) return;

				event.preventDefault();

			}

			function addPointer( event ) {

				pointers.push( event );

			}

			function removePointer( event ) {

				delete pointerPositions[ event.pointerId ];

				for ( let i = 0; i < pointers.length; i ++ ) {

					if ( pointers[ i ].pointerId == event.pointerId ) {

						pointers.splice( i, 1 );
						return;

					}

				}

			}

			function trackPointer( event ) {

				let position = pointerPositions[ event.pointerId ];

				if ( position === undefined ) {

					position = new Vector2();
					pointerPositions[ event.pointerId ] = position;

				}

				position.set( event.pageX, event.pageY );

			}

			function getSecondPointerPosition( event ) {

				const pointer = ( event.pointerId === pointers[ 0 ].pointerId ) ? pointers[ 1 ] : pointers[ 0 ];

				return pointerPositions[ pointer.pointerId ];

			}

			//

			scope.domElement.addEventListener( 'contextmenu', onContextMenu );

			scope.domElement.addEventListener( 'pointerdown', onPointerDown );
			scope.domElement.addEventListener( 'pointercancel', onPointerUp );
			scope.domElement.addEventListener( 'wheel', onMouseWheel, { passive: false } );

			// force an update at start

			this.update();

		}

	}

	function arrayCopy$1(src, dst = [], clip = false) {
	  const len = src.length;
	  for (let i = 0; i < len; ++i) {
	    dst[i] = src[i];
	  }
	  if (clip && dst.length !== len) {
	    dst.length = len;
	  }
	  return dst;
	}

	function arrayFill(arr, val, len = arr.length, clip = false) {
	  for (let i = 0; i < len; ++i) {
	    arr[i] = val;
	  }
	  if (clip && arr.length !== len) {
	    arr.length = len;
	  }
	}

	function arrayMax(arr) {
	  const len = arr.length;
	  if (len === 0) return NaN;
	  let max = arr[0];
	  for (let i = 1; i < len; ++i) {
	    if (arr[i] > max) max = arr[i];
	  }
	  return max;
	}

	// Taken from Google Draco 3D Mesh Compression lib.
	// See https://github.com/google/draco/blob/master/src/draco/mesh/corner_table.h
	//
	// CornerTable is used to represent connectivity of triangular meshes.
	// For every corner of all faces, the corner table stores the index of the
	// opposite corner in the neighboring face (if it exists) as illustrated in the
	// figure below (see corner |c| and it's opposite corner |o|).
	//
	//     *
	//    /c\
	//   /   \
	//  /n   p\
	// *-------*
	//  \     /
	//   \   /
	//    \o/
	//     *
	//
	// All corners are defined by unique CornerIndex and each triplet of corners
	// that define a single face id always ordered consecutively as:
	//     { 3 * FaceIndex, 3 * FaceIndex + 1, 3 * FaceIndex +2 }.
	// This representation of corners allows CornerTable to easily retrieve Next and
	// Previous corners on any face (see corners |n| and |p| in the figure above).
	// Using the Next, Previous, and Opposite corners then enables traversal of any
	// 2-manifold surface.
	// If the CornerTable is constructed from a non-manifold surface, the input
	// non-manifold edges and vertices are automatically split.
	//
	class CornerTable {
	  constructor() {
	    // corner index -> vertex index
	    this.cornerToVertex = [];
	    // corner index -> opposite corner index
	    this.oppositeCorner = [];
	    // vertex index -> corner index
	    this.vertexCorners = [];

	    this.originalVertexCount = 0;
	    this.degeneratedFaceCount = 0;
	    this.isolatedVertexCount = 0;

	    this.nonManifoldVertexParent = [];

	    this.valenceCache = null; // TODO
	  }

	  initEmpty(numFaces) {
	    arrayFill(this.cornerToVertex, -1, numFaces * 3);
	    arrayFill(this.oppositeCorner, -1, numFaces * 3);
	  }

	  // Initializes the CornerTable from provides set of indexed faces.
	  // The input faces can represent a non-manifold topology, in which case the
	  // non-manifold edges and vertices are going to be split.
	  init(faces) {
	    arrayCopy$1(faces, this.cornerToVertex);
	    this.computeOppositeCorners();
	    // this.breakNonManifoldEdges();
	    // this.computeVertexCorners();
	  }

	  numVertices() {
	    return this.vertexCorners.length;
	  }

	  numCorners() {
	    return this.cornerToVertex.length;
	  }

	  numFaces() {
	    return Math.floor(this.cornerToVertex.length / 3);
	  }

	  opposite(cornerId) {
	    if (cornerId === -1) return -1;
	    return this.oppositeCorner[cornerId];
	  }

	  next(cornerId) {
	    if (cornerId === -1) return -1;
	    return (cornerId + 1) % 3 !== 0 ? cornerId + 1 : cornerId - 2;
	  }

	  previous(cornerId) {
	    if (cornerId === -1) return -1;
	    return cornerId % 3 !== 0 ? cornerId - 1 : cornerId + 2;
	  }

	  oppositeNext(cornerId) {
	    if (cornerId === -1) return -1;
	    cornerId = this.oppositeCorner[cornerId];
	    if (cornerId === -1) return -1;
	    return (cornerId + 1) % 3 !== 0 ? cornerId + 1 : cornerId - 2;
	  }

	  oppositePrev(cornerId) {
	    if (cornerId === -1) return -1;
	    cornerId = this.oppositeCorner[cornerId];
	    if (cornerId === -1) return -1;
	    return cornerId % 3 !== 0 ? cornerId - 1 : cornerId + 2;
	  }

	  vertex(cornerId) {
	    if (cornerId === -1) return -1; // optional
	    return this.cornerToVertex[cornerId];
	  }

	  nextVertex(cornerId) {
	    if (cornerId === -1) return -1;
	    cornerId = (cornerId + 1) % 3 !== 0 ? cornerId + 1 : cornerId - 2;
	    return this.cornerToVertex[cornerId];
	  }

	  prevVertex(cornerId) {
	    if (cornerId === -1) return -1;
	    cornerId = cornerId % 3 !== 0 ? cornerId - 1 : cornerId + 2;
	    return this.cornerToVertex[cornerId];
	  }

	  face(cornerId) {
	    if (cornerId === -1) return -1;
	    return Math.floor(cornerId / 3);
	  }

	  firstCorner(faceId) {
	    if (faceId === -1) return -1;
	    return faceId * 3;
	  }

	  allCorners(faceId) {
	    const cornerId = faceId * 3;
	    return [cornerId, cornerId + 1, cornerId + 2];
	  }

	  faceData(faceId) {
	    const cornerId = faceId * 3;
	    const faceData = [];
	    for (let i = 0; i < 3; ++i) {
	      faceData[i] = this.cornerToVertex[cornerId + i];
	    }
	    return faceData;
	  }

	  setFaceData(faceId, faceData) {
	    const cornerId = faceId * 3;
	    for (let i = 0; i < 3; ++i) {
	      this.cornerToVertex[cornerId + i] = faceData[i];
	    }
	  }

	  // Returns the left-most corner of a single vertex 1-ring. If a vertex is not
	  // on a boundary (in which case it has a full 1-ring), this function returns
	  // any of the corners mapped to the given vertex.
	  leftMostCorner(vertexId) {
	    return this.vertexCorners[vertexId];
	  }

	  // Returns the parent vertex index of a given corner table vertex.
	  vertexParent(vertexId) {
	    if (vertexId < this.originalVertexCount) return vertexId;
	    return this.nonManifoldVertexParent[vertexId - this.originalVertexCount];
	  }

	  // Returns true if the corner is valid.
	  isValid(cornerId) {
	    return this.cornerToVertex[cornerId] !== -1;
	  }

	  // Returns the valence (or degree) of a vertex.
	  // Returns -1 if the given vertex index is not valid.
	  valenceOfVertex(vertexId) {

	  }

	  valenceOfCorner(cornerId) {
	    if (cornerId === -1) return -1; // optional
	    return this.valenceOfVertex(this. cornerToVertex[cornerId]);
	  }

	  isOnBoundary(vertexId) {
	    const cornerId = this.leftMostCorner(vertexId);
	    return this.swingLeft(cornerId) === -1;
	  }

	  //     *-------*
	  //    / \     / \
	  //   /   \   /   \
	  //  /   sl\c/sr   \
	  // *-------v-------*
	  // Returns the corner on the adjacent face on the right that maps to
	  // the same vertex as the given corner (sr in the above diagram).
	  swingRight(cornerId) {
	    return this.previous(this.opposite(this.previous(cornerId)));
	  }

	  // Returns the corner on the left face that maps to the same vertex as the
	  // given corner (sl in the above diagram).
	  swingLeft(cornerId) {
	    return this.next(this.opposite(this.next(cornerId)));
	  }

	  // Get opposite corners on the left and right faces respectively (see image
	  // below, where L and R are the left and right corners of a corner X.
	  //
	  // *-------*-------*
	  //  \L    /X\    R/
	  //   \   /   \   /
	  //    \ /     \ /
	  //     *-------*
	  getLeftCorner(cornerId) {
	    if (cornerId === -1) return -1;
	    // return this.opposite(this.previous(cornerId));
	    cornerId = cornerId % 3 !== 0 ? cornerId - 1 : cornerId + 2;
	    return this.oppositeCorner[cornerId];
	  }

	  getRightCorner(cornerId) {
	    if (cornerId === -1) return -1;
	    // return this.opposite(this.next(cornerId));
	    cornerId = (cornerId + 1) % 3 !== 0 ? cornerId + 1 : cornerId - 2;
	    return this.oppositeCorner[cornerId];
	  }

	  // Returns the number of new vertices that were created as a result of
	  // splitting of non-manifold vertices of the input geometry.
	  numNewVertices() {
	    return this.vertexCorners.length - this.originalVertexCount;
	  }

	  isDegenerated(faceId) {
	    if (faceId === -1) return true;
	    const cornerId = faceId * 3;
	    const v0 = this.cornerToVertex[cornerId];
	    const v1 = this.cornerToVertex[cornerId + 1];
	    const v2 = this.cornerToVertex[cornerId + 2];
	    return v0 === v1 || v0 === v2 || v1 === v2;
	  }

	  setOppositeCorner(cornerId, oppositeCornerId) {
	    this.oppositeCorner[cornerId] = oppositeCornerId;
	  }

	  setOppositeCorners(corner0, corner1) {
	    if (corner0 !== -1) this.oppositeCorner[corner0] = corner1;
	    if (corner1 !== -1) this.oppositeCorner[corner1] = corner0;
	  }

	  setOppositeCornersImm(corner0, corner1) {
	    this.oppositeCorner[corner0] = corner1;
	    this.oppositeCorner[corner1] = corner0;
	  }

	  mapCornerToVertex(cornerId, vertexId) {
	    this.cornerToVertex[cornerId] = vertexId;
	  }

	  addNewVertex() {
	    this.vertexCorners.push(-1);
	    return this.vertexCorners.length - 1;
	  }

	  // Adds a new face connected to three vertices. Note that connectivity is not
	  // automatically updated and all opposite corners need to be set explicitly.
	  addNewFace(vertices) {
	    const faceId = Math.floor(this.cornerToVertex.length / 3);
	    for (let i = 0; i < 3; ++i) {
	      this.cornerToVertex.push(vertices[i]);
	      this.oppositeCorner.push(-1);
	      this.setLeftMostCorner(vertices[i], this.cornerToVertex.length - 1);
	    }
	    return faceId;
	  }

	  setLeftMostCorner(vertexId, cornerId) {
	    if (vertexId !== -1) {
	      this.vertexCorners[vertexId] = cornerId;
	    }
	  }

	  // Updates the vertex to corner map on a specified vertex. This should be
	  // called in cases where the mapping may be invalid (e.g. when the corner
	  // table was constructed manually).
	  updateVertexToCornerMap(vertexId) {
	    const firstCornerId = this.vertexCorners[vertexId];
	    if (cornerId === -1) return;
	    // Here we are basically looking for the left most corner, if it exist
	    let curCornerId = this.swingLeft(firstCornerId);
	    let cornerId = firstCornerId;
	    while (curCornerId !== -1 && curCornerId !== firstCornerId) {
	      cornerId = curCornerId;
	      curCornerId = this.swingLeft(curCornerId);
	    }
	    // the left most corner might not exist in a full 1-ring
	    if (curCornerId !== firstCornerId) {
	      this.vertexCorners[vertexId] = cornerId;
	    }
	  }

	  // Sets the new number of vertices. It's a responsibility of the caller to
	  // ensure that no corner is mapped beyond the range of the new number of
	  // vertices.
	  setNumVertices(numVertices) {
	    const initialLength = this.vertexCorners.length;
	    this.vertexCorners.length = numVertices;
	    for (let i = initialLength; i < numVertices; ++i) {
	      this.vertexCorners[i] = -1;
	    }
	  }

	  // Makes a vertex isolated (not attached to any corner).
	  makeVertexIsolated(vertexId) {
	    this.vertexCorners[vertexId] = -1;
	  }

	  // Returns true if a vertex is not attached to any face.
	  isVertexIsolated(vertexId) {
	    return this.vertexCorners[vertexId] === -1;
	  }

	  // Makes a given face invalid (all corners are marked as invalid).
	  makeFaceInvalid(faceId) {
	    if (faceId !== -1) {
	      const cornerId = faceId * 3;
	      for (let i = 0; i < 3; ++i) {
	        this.cornerToVertex[cornerId + i] = -1;
	      }
	    }
	  }

	  // Updates mapping between faces and a vertex using the corners mapped to
	  // the provided vertex.
	  updateFaceToVertexMap(vertexId) {

	  }

	  // Computes opposite corners mapping from the data stored in
	  // |corner_to_vertex_map_|.
	  computeOppositeCorners() {
	    // Our implementation for finding opposite corners is based on keeping track
	    // of outgoing half-edges for each vertex of the mesh. Half-edges (defined by
	    // their opposite corners) are processed one by one and whenever a new
	    // half-edge (corner) is processed, we check whether the sink vertex of
	    // this half-edge contains its sibling half-edge. If yes, we connect them and
	    // remove the sibling half-edge from the sink vertex, otherwise we add the new
	    // half-edge to its source vertex.

	    const numCorners = this.cornerToVertex.length;
	    const numVertices = arrayMax(this.cornerToVertex) + 1;

	    arrayFill(this.oppositeCorner, -1, numCorners);

	    // First compute the number of outgoing half-edges (corners) attached to each
	    // vertex. For each corner there is always exactly one outgoing half-edge attached
	    // to its vertex.
	    const numCornersPerVertex = [];
	    arrayFill(numCornersPerVertex, 0, numVertices);
	    for (let i = 0; i < numCorners; ++i) {
	      numCornersPerVertex[this.cornerToVertex[i]]++;
	    }

	    // Create a storage for half-edges on each vertex. We store all half-edges in
	    // one array, where each entry is identified by the half-edge's sink vertex id
	    // and the associated half-edge corner id (corner opposite to the half-edge).
	    // Each vertex will be assigned storage for up to
	    // |num_corners_on_vertices[vert_id]| half-edges. Unused half-edges are marked
	    // with |sink_vert| == kInvalidVertexIndex.
	    const vertexEdgeSink = [];
	    const vertexEdgeCorner = [];
	    arrayFill(vertexEdgeSink, -1, numCorners);
	    arrayFill(vertexEdgeCorner, -1, numCorners);

	    // For each vertex compute the offset (location where the first half-edge
	    // entry of a given vertex is going to be stored). This way each vertex is
	    // guaranteed to have a non-overlapping storage with respect to the other
	    // vertices.
	    const vertexOffset = [];
	    let offset = 0;
	    for (let i = 0; i < numVertices; ++i) {
	      vertexOffset[i] = offset;
	      offset += numCornersPerVertex[i];
	    }

	    // Now go over the all half-edges (using their opposite corners) and either
	    // insert them to the |vertex_edge| array or connect them with existing
	    // half-edges.
	    for (let i = 0; i < numCorners; ++i) {
	      const tipId = this.cornerToVertex[i];
	      const sourceId = this.cornerToVertex[this.next(i)];
	      const sinkId = this.cornerToVertex[this.previous(i)];

	      // TODO: Improve this by re-writing the loop
	      const faceId = Math.floor(i / 3);
	      if (i === faceId * 3) {
	        if (tipId === sourceId || tipId === sinkId || sourceId === sinkId) {
	          this.numDegeneratedFaces++;
	          i += 2; // Ignore the next two corners of the same face.
	          continue;
	        }
	      }

	      let oppositeCornerId = -1;

	      const numCornersOnSink = numCornersPerVertex[sinkId];
	      offset = vertexOffset[sinkId];
	      for (let j = 0; j < numCornersOnSink; ++j, ++offset) {
	        const otherId = vertexEdgeSink[offset];
	        if (otherId === -1) {
	          break; // No matching half-edge found on the sink vertex.
	        }
	        if (otherId === sourceId) {
	          if (tipId === this.cornerToVertex[vertexEdgeCorner[offset]]) {
	            continue; // Don't connect mirrored faces.
	          }
	          // A matching half-edge was found on the sink vertex. Mark the
	          // half-edge's opposite corner.
	          oppositeCornerId = vertexEdgeCorner[offset];
	          // Remove the half-edge from the sink vertex. We remap all subsequent
	          // half-edges one slot down.
	          // TODO(ostava): This can be optimized a little bit, by remapping only
	          // the half-edge on the last valid slot into the deleted half-edge's
	          // slot.
	          for (let k = j + 1; k < numCornersOnSink; ++k, ++offset) {
	            vertexEdgeSink[offset] = vertexEdgeSink[offset + 1];
	            vertexEdgeCorner[offset] = vertexEdgeCorner[offset + 1];
	            if (vertexEdgeSink[offset] === -1) {
	              break; // Unused half-edge reached.
	            }
	          }
	          // Mark the last entry as unused.
	          vertexEdgeSink[offset] = -1;
	          break;
	        }
	      }
	      if (oppositeCornerId === -1) {
	        // No opposite corner found. Insert the new edge
	        const numCornersOnSource = numCornersPerVertex[sourceId];
	        offset = vertexOffset[sourceId];
	        for (let j = 0; j < numCornersOnSource; ++j, ++offset) {
	          // Find the first unused half-edge slot on the source vertex.
	          if (vertexEdgeSink[offset] === -1) {
	            vertexEdgeSink[offset] = sinkId;
	            vertexEdgeCorner[offset] = i;
	            break;
	          }
	        }
	      } else {
	        // Opposite corner found.
	        this.oppositeCorner[i] = oppositeCornerId;
	        this.oppositeCorner[oppositeCornerId] = i;
	      }
	    }

	    return true;
	  }

	  // Finds and breaks non-manifold edges in the 1-ring neighborhood around
	  // vertices (vertices themselves will be split in the ComputeVertexCorners()
	  // function if necessary).
	  breakNonManifoldEdges() {
	    // This function detects and breaks non-manifold edges that are caused by
	    // folds in 1-ring neighborhood around a vertex. Non-manifold edges can occur
	    // when the 1-ring surface around a vertex self-intersects in a common edge.
	    // For example imagine a surface around a pivot vertex 0, where the 1-ring
	    // is defined by vertices |1, 2, 3, 1, 4|. The surface passes edge <0, 1>
	    // twice which would result in a non-manifold edge that needs to be broken.
	    // For now all faces connected to these non-manifold edges are disconnected
	    // resulting in open boundaries on the mesh. New vertices will be created
	    // automatically for each new disjoint patch in the ComputeVertexCorners()
	    // method.
	    // Note that all other non-manifold edges are implicitly handled by the
	    // function ComputeVertexCorners() that automatically creates new vertices
	    // on disjoint 1-ring surface patches.

	    const numCorners = this.cornerToVertex.length;

	    const visitedCorners = [];
	    arrayFill(visitedCorners, false, numCorners);
	    let sinkVerticesLength = 0;
	    const sinkVerticesFirst = [];
	    const sinkVerticesSecond = [];

	    let meshConnectivityUpdated = false;
	    do {
	      meshConnectivityUpdated = false;
	      for (let i = 0; i < numCorners; ++i) {
	        if (visitedCorners[i]) {
	          continue;
	        }
	        sinkVerticesLength = 0;

	        // First swing all the way to find the left-most corner connected to the
	        // corner's vertex.
	        let firstCorner = i;
	        let curCorner = i;
	        let nextCorner;
	        while (nextCorner = this.swingLeft(curCorner),
	          nextCorner !== firstCorner && nextCorner !== -1 && !visitedCorners[nextCorner]) {
	          curCorner = nextCorner;
	        }

	        firstCorner = curCorner;

	        // Swing right from the first corner and check if all visited edges
	        // are unique.
	        do {
	          visitedCorners[curCorner] = true;
	          // Each new edge is defined by the pivot vertex (that is the same for
	          // all faces) and by the sink vertex (that is the |next| vertex from the
	          // currently processed pivot corner. I.e., each edge is uniquely defined
	          // by the sink vertex index.
	          const sinkCorner = this.next(curCorner);
	          const sinkVertex = this.cornerToVertex[sinkCorner];

	          // Corner that defines the edge on the face.
	          const edgeCorner = this.previous(curCorner);
	          let vertexConnectivityUpdated = false;
	          // Go over all processed edges (sink vertices). If the current sink
	          // vertex has been already encountered before it may indicate a
	          // non-manifold edge that needs to be broken.
	          for (let j = 0; j < sinkVerticesLength; ++j) {
	            const attachedSinkVertexFirst = sinkVerticesFirst[j];
	            const attachedSinkVertexSecond = sinkVerticesSecond[j];

	            if (attachedSinkVertexFirst === sinkVertex) {
	              // Sink vertex has already been processed.
	              const otherEdgeCorner = attachedSinkVertexSecond;
	              if (edgeCorner === -1) throw new Error('Invalid edgeCorner');
	              const oppEdgeCorner = this.oppositeCorner[edgeCorner];

	              if (oppEdgeCorner === otherEdgeCorner) {
	                // We are closing the loop so no need to change the connectivity.
	                continue;
	              }

	              // Break the connectivity on the non-manifold edge.
	              // TODO(ostava): It may be possible to reconnect the faces in a way
	              // that the final surface would be manifold.
	              if (otherEdgeCorner === -1) throw new Error('Invalid otherEdgeCorner');
	              const oppOtherEdgeCorner = this.oppositeCorner[otherEdgeCorner];
	              if (oppEdgeCorner !== -1) {
	                this.oppositeCorner[oppEdgeCorner] = -1;
	              }
	              if (oppOtherEdgeCorner !== -1) {
	                this.oppositeCorner[oppOtherEdgeCorner] = -1;
	              }

	              this.oppositeCorner[edgeCorner] = -1;
	              this.oppositeCorner[otherEdgeCorner] = -1;

	              vertexConnectivityUpdated = true;
	              break;
	            }
	          }
	          if (vertexConnectivityUpdated) {
	            // Because of the updated connectivity, not all corners connected to
	            // this vertex have been processed and we need to go over them again.
	            // TODO(ostava): This can be optimized as we don't really need to
	            // iterate over all corners.
	            meshConnectivityUpdated = true;
	            break;
	          }
	          // Insert new sink vertex information <sink vertex index, edge corner>.
	          sinkVerticesFirst[sinkVerticesLength] = this.cornerToVertex[edgeCorner];
	          // NOTE: This is correct since edgeCorner = this.previous(curCorner); ^
	          sinkVerticesSecond[sinkVerticesLength] = sinkCorner;
	          sinkVerticesLength++;

	          curCorner = this.swingRight(curCorner);
	        } while (curCorner !== firstCorner && curCorner !== -1);
	      }
	    } while (meshConnectivityUpdated);

	    return true;
	  }

	  // Computes the lookup map for going from a vertex to a corner. This method
	  // can handle non-manifold vertices by splitting them into multiple manifold
	  // vertices.
	  computeVertexCorners() {
	    const numCorners = this.cornerToVertex.length;
	    let numVertices = arrayMax(this.cornerToVertex) + 1;

	    this.originalVertexCount = numVertices;
	    arrayFill(this.vertexCorners, -1, numVertices);

	    // Arrays for marking visited vertices and corners that allow us to detect
	    // non-manifold vertices.
	    const visitedVertices = [];
	    const visitedCorners = [];
	    arrayFill(visitedVertices, false, numVertices);
	    arrayFill(visitedCorners, false, numCorners);

	    const il = this.cornerToVertex.length / 3 | 0;
	    for (let i = 0; i < il; ++i) {
	      // Check whether the face is degenerated. If so ignore it.
	      if (this.isDegenerated(i)) {
	        continue;
	      }
	      const firstCorner = i * 3;

	      // NOTE: Could be rewritten:
	      // for (let end = j + 3; j < end; ++j) {
	      for (let j = 0; j < 3; ++j) {
	        const corner = firstCorner + j;
	        if (visitedCorners[corner]) {
	          continue;
	        }
	        let vertex = this.cornerToVertex[corner];
	        // Note that one vertex maps to many corners, but we just keep track
	        // of the vertex which has a boundary on the left if the vertex lies on
	        // the boundary. This means that all the related corners can be accessed
	        // by iterating over the SwingRight() operator.
	        // In case of a vertex inside the mesh, the choice is arbitrary.
	        let isNonManifoldVertex = false;
	        if (visitedVertices[vertex]) {
	          // A visited vertex of an unvisited corner found. Must be a non-manifold
	          // vertex.
	          // Create a new vertex for it.
	          this.vertexCorners.push(-1);
	          this.nonManifoldVertexParent.push(vertex);
	          visitedVertices.push(false);
	          vertex = numVertices++;
	          isNonManifoldVertex = true;
	        }
	        // Mark the vertex as visited.
	        visitedVertices[vertex] = true;

	        // First swing all the way to the left and mark all corners on the way.
	        let curCorner = corner;
	        while (curCorner !== -1) {
	          visitedCorners[curCorner] = true;
	          // Vertex will eventually point to the left most corner.
	          this.vertexCorners[vertex] = curCorner;
	          if (isNonManifoldVertex) {
	            // Update vertex index in the corresponding face.
	            this.cornerToVertex[curCorner] = vertex;
	          }
	          curCorner = this.swingLeft(curCorner);
	          if (curCorner === corner) {
	            break; // Full circle reached.
	          }
	        }
	        if (curCorner === -1) {
	          // If we have reached an open boundary we need to swing right from the
	          // initial corner to mark all corners in the opposite direction.
	          curCorner = this.swingRight(corner);
	          while (curCorner !== -1) {
	            visitedCorners[curCorner] = true;
	            if (isNonManifoldVertex) {
	              // Update vertex index in the corresponding face.
	              this.cornerToVertex[curCorner] = vertex;
	            }
	            curCorner = this.swingRight(curCorner);
	          }
	        }
	      }
	    }

	    // Count the number of isolated (unprocessed) vertices.
	    this.isolatedVertexCount = 0;
	    for (let i = 0; i < numVertices; ++i) {
	      if (!visitedVertices[i]) {
	        this.isolatedVertexCount++;
	      }
	    }

	    return true;
	  }
	}

	class IntervalSet {
	  constructor(min = 0, max = 1) {
	    this.min = min;
	    this.max = max;

	    this.bounds = [];
	    this.size = 0;
	  }

	  clear() {
	    this.bounds.length = 0;
	    this.size = 0;

	    return this;
	  }

	  copy(src) {
	    this.min = src.min;
	    this.max = src.max;

	    const b = src.bounds;
	    for (let i = 0; i < b.length; ++i) {
	      this.bounds[i] = b[i];
	    }
	    if (this.bounds.length > b.length) {
	      this.bounds.length = b.length;
	    }
	    this.size = src.size;

	    return this;
	  }

	  shift(offset, index = 0) {
	    if (offset === 0) return;

	    const b = this.bounds;
	    if (offset > 0) {
	      const end = index + offset;
	      for (let i = b.length - 1; i >= end; --i) {
	        b[i] = b[i - offset];
	      }
	    } else {
	      const end = b.length + offset;
	      for (let i = index; i < end; ++i) {
	        b[i] = b[i - offset];
	      }
	    }
	  }

	  // NOTE: Not sure if we want to shift() inside resize()
	  resize(newSize, shiftPivot = this.bounds.length) {
	    const size = this.bounds.length;
	    if (newSize === size) return;

	    for (let i = size; i < newSize; ++i) {
	      this.bounds[i] = 0;
	    }
	    this.shift(newSize - size, shiftPivot);
	    if (newSize < size) {
	      this.bounds.length = newSize;
	    }
	    this.size = newSize;
	  }

	  add(min = 0, max = min, thickness = 0) {
	    if (min < this.min) min = this.min;
	    if (max > this.max) max = this.max;
	    if (min >= max) return;

	    const b = this.bounds;
	    const size = b.length;

	    let i = 1;
	    let t = min - thickness;
	    for (; i < size && t > b[i]; i += 2);
	    const minIndex = --i;

	    t = max + thickness;
	    for (; i < size && t >= b[i]; i += 2);

	    const minOutside = minIndex === size || min < b[minIndex];
	    const maxOutside = i === 0 || max > b[i - 1];

	    const indexDelta = minIndex - i + 2;
	    if (indexDelta !== 0) {
	      this.resize(size + indexDelta, minOutside ? minIndex : minIndex + 1);
	    }

	    if (minOutside) b[minIndex] = min;
	    if (maxOutside) b[minIndex + 1] = max;

	    return this;
	  }

	  // min   max   minIndex   i   minInside   maxInside    delta
	  // 6     9     2          4   false       true         0
	  // 9     15    2          4   true        false        0
	  // 9     15    2          4   false       false        0 -> SHOULD BE -2
	  // 8     10    2          4
	  // WIP
	  removeNew(min = 0, max = min, thickness = 0) {
	    if (min < this.min) min = this.min;
	    if (max > this.max) max = this.max;
	    if (min >= max) return;

	    const b = this.bounds;
	    const size = b.length;

	    let i = 1;
	    let t = min - thickness;
	    for (; i < size && t >= b[i]; i += 2);
	    const minIndex = --i;

	    t = max + thickness;
	    for (; i < size && t > b[i]; i += 2);

	    const minInside = minIndex > 0 && min > b[minIndex];
	    const maxInside = i > 0 && max < b[i - 1];

	    let indexDelta = minIndex - i + 2;
	    if (minInside && maxInside) indexDelta += 2;
	    if (!minInside && !maxInside) indexDelta -= 2;
	    if (indexDelta !== 0) {
	      this.resize(size + indexDelta, minIndex);
	    }

	    if (minInside && maxInside) {
	      b[minIndex + 1] = min;
	      b[minIndex + 2] = max;
	    } else if (minInside) {
	      b[minIndex + 1] = min;
	    } else if (maxInside) {
	      b[minIndex] = max;
	    }

	    return this;
	  }

	  remove(min = 0, max = min, thickness = 0) {
	    if (min < this.min) min = this.min;
	    if (max > this.max) max = this.max;
	    if (min >= max) return;

	    const b = this.bounds;
	    const size = b.length;

	    let i = 0;
	    let t = min - thickness;
	    for (; i < size && t > b[i]; ++i);

	    // In the loops that find the min/max indices we want:
	    // min > b[i] when i is even but min >= b[i] when i is odd
	    // max > b[i] when i is even but max >= b[i] when i is odd
	    // we patch this up with an if after each loop

	    // i is odd, we are on a upper bound of an interval
	    // check if we can get out of this interval
	    // i < size should always be true since bounds come in pairs
	    if (i & 1 && i < size && b[i] === t) ++i;
	    const minIndex = i;
	    const minInside = minIndex & 1;

	    t = max + thickness;
	    for (; i < size && t > b[i]; ++i);
	    if (i & 1 && i < size && b[i] === t) ++i;
	    const maxIndex = i;
	    let maxInside = maxIndex & 1;

	    // So far we have an interval range that includes the thickness
	    // But the range of our actual bounds might differ
	    const minReallyInside = minInside === 1 && min < b[minIndex];
	    const maxReallyInside = maxInside === 1 && max > b[maxIndex - 1];

	    const indexDelta = (minIndex + minInside) - (maxIndex - maxInside);
	    if (indexDelta !== 0) {
	      // In cases where our lower bound got pushed inside an interval
	      // because of the thickness, then don't override the upper bound
	      let pivot = minIndex;
	      if (!minReallyInside) pivot += minInside;

	      this.resize(size + indexDelta, pivot);
	    }

	    if (minReallyInside && maxReallyInside) {
	      b[minIndex] = min;
	      b[minIndex + 1] = max;
	    } else if (minReallyInside) {
	      b[minIndex] = min;
	    } else if (maxReallyInside) {
	      b[minIndex + minInside] = max;
	    }

	    return this;
	  }

	  invert() {
	    const b = this.bounds;
	    const size = b.length;

	    const startOnMin = size > 0 && b[0] === this.min;
	    const endOnMax = size > 0 && b[size - 1] === this.max;

	    if (startOnMin && endOnMax) {
	      this.shift(-1);
	      this.resize(size - 2);
	    } else if (startOnMin) {
	      this.shift(-1);
	      b[size - 1] = this.max;
	    } else if (endOnMax) {
	      this.shift(1);
	      b[0] = this.min;
	    } else {
	      this.resize(size + 2);
	      this.shift(1);
	      b[0] = this.min;
	      b[size + 1] = this.max;
	    }
	    return this;
	  }

	  union(intervals, thickness = 0) {
	    const b = intervals.bounds;
	    for (let i = 0; i < b.length; i += 2) {
	      this.add(b[i], b[i + 1], thickness);
	    }
	    return this;
	  }

	  difference(intervals, thickness = 0) {
	    const b = intervals.bounds;
	    for (let i = 0; i < b.length; i += 2) {
	      this.remove(b[i], b[i + 1], thickness);
	    }
	    return this;
	  }
	}

	const tmp_$2 = new Vector3();

	class Edge {
	  constructor(p0, p1, i0, i1, faceId = -1) {
	    this.p0 = p0;
	    this.p1 = p1;

	    // Vertex indices are used for rendering
	    this.i0 = i0;
	    this.i1 = i1;

	    // We store the face index so that we don't
	    // test the edge against its own face
	    this.faceId = faceId;

	    this.length = p1.distanceTo(p0);
	    this.oneOverLength = 1 / this.length;

	    this.delta = new Vector3().subVectors(p1, p0);
	    this.dir = new Vector3().copy(this.delta).normalize();

	    this.isSeam = false;
	    this.isFold = false;

	    // but now we have a problem:

	    this.alignedSections = new IntervalSet();
	    this.misalignedSections = new IntervalSet();
	    this.boundarySections = new IntervalSet();
	    // this.buriedSections = new IntervalSet();
	  }

	  clearSections() {
	    this.alignedSections.clear();
	    this.misalignedSections.clear();
	    // this.buriedSections.clear();

	    // if (this.isSeam) {
	    //   this.misalignedSections.add(0, 1);
	    // }
	  }

	  markSeam(isSeam = true) {
	    if (this.isSeam === isSeam) return;

	    this.isSeam = isSeam;
	    this.clearSections();
	  }

	  markFold(isFold = true) {
	    this.isFold = isFold;
	  }

	  markAlignedSection(min, max) {
	    if (!this.isSeam) return;

	    // this.misalignedSections.remove(min, max, 1e-7);
	    this.alignedSections.add(min, max, 1e-7);
	  }

	  markMisalignedSection(min, max) {
	    if (!this.isSeam) return;

	    this.misalignedSections.add(min, max, 1e-7);
	  }

	  // markburiedSection(min, max) {
	  //   if (!this.isSeam) return;
	  //
	  //   this.misalignedSections.remove(min, max, 1e-7);
	  //   this.buriedSections.add(min, max, 1e-7);
	  // }

	  updateSections(min, max) {
	    if (!this.isSeam) return;

	    this.boundarySections.copy(this.alignedSections).union(this.misalignedSections, 1e-7).invert();
	    this.misalignedSections.difference(this.alignedSections, 1e-7);
	  }

	  relativeDistanceToPoint(point) {
	    const distance = tmp_$2.subVectors(point, this.p0).dot(this.dir);
	    return distance * this.oneOverLength;
	  }
	}

	const EPS = 0.1;
	// ^ SM64 collision models use integers
	//   hence the big epsilon

	const points_ = [];
	const tmp_$1 = new Vector3();

	class GeometryData {
	  constructor(geometry) {
	    this.geometry = geometry;

	    this.indices = null;
	    this.cornerTable = null;

	    this.vertices = [];

	    this.faces = [];
	    this.facePlanes = [];
	    this.faceEdgePlanes = [];
	    this.faceIsDegenerate = [];

	    this.edges = [];
	    this.cornerToEdge = [];

	    this._init();
	  }

	  _init() {
	    this.geometry.deduplicateAttributeValues();
	    this.geometry.deduplicateVertices();

	    this.indices = this.geometry.getPositionConnectivity();
	    this.cornerTable = new CornerTable();
	    this.cornerTable.init(this.indices);

	    const positions = this.geometry.posAttribute.values;
	    const numPositions = this.geometry.posAttribute.numValues;

	    for (let i = 0; i < numPositions; ++i) {
	      this.vertices[i] = new Vector3().fromArray(positions, i * 3);
	    }

	    const numTriangles = this.indices.length / 3 | 0;
	    for (let i = 0, corner = 0; i < numTriangles; i++, corner += 3) {
	      const a = this.vertices[this.indices[corner]];
	      const b = this.vertices[this.indices[corner + 1]];
	      const c = this.vertices[this.indices[corner + 2]];
	      this._addTriangle(a, b, c);
	    }

	    this._computeEdges();
	  }

	  _addTriangle(a, b, c) {
	    const triangle = new Triangle(a, b, c);
	    this.faces.push(triangle);

	    const plane = new Plane();
	    plane.setFromCoplanarPoints(a, b, c);
	    const normal = plane.normal;
	    this.facePlanes.push(plane);

	    points_[0] = a;
	    points_[1] = b;
	    points_[2] = c;

	    const edgePlanes = [];
	    for (let i = 0; i < 3; ++i) {
	      const p0 = points_[(i + 1) % 3];
	      const p1 = points_[(i + 2) % 3];

	      tmp_$1.addVectors(p1, normal);

	      edgePlanes.push(new Plane().setFromCoplanarPoints(p0, p1, tmp_$1));
	    }
	    this.faceEdgePlanes.push(edgePlanes);

	    const degenerate = Math.abs(normal.lengthSq() - 1) > 0.01;
	    this.faceIsDegenerate.push(degenerate);

	    if (degenerate) {
	      console.log('triangle ' + (this.faces.length - 1) + ' is degenerate');
	    }
	  }

	  _computeEdges() {
	    arrayFill(this.cornerToEdge, null, this.indices.length, true);

	    for (let corner = 0; corner < this.indices.length; ++corner) {
	      if (this.cornerToEdge[corner] !== null) continue;

	      const sourceId = this.indices[this.cornerTable.next(corner)];
	      const sinkId = this.indices[this.cornerTable.previous(corner)];
	      const source = this.vertices[sourceId];
	      const sink = this.vertices[sinkId];
	      const faceId = Math.floor(corner / 3);

	      const edge = new Edge(source, sink, sourceId, sinkId, faceId);
	      this.cornerToEdge[corner] = edge;

	      const oppCornerId = this.cornerTable.oppositeCorner[corner];
	      if (oppCornerId > -1) {
	        this.cornerToEdge[oppCornerId] = edge;
	      } else {
	        edge.markSeam();
	      }
	      this.edges.push(edge);
	    }
	  }

	  findMisalignedSeamSections() {
	    for (const edge of this.edges) {
	      if (!edge.isSeam) continue;

	      edge.clearSections();
	      const { p0, p1, faceId, delta } = edge;
	      // We're looking for a face that is kind of aligned with our edge (delta.dot(normal)) close to 0
	      // and whose points are inside the two planes perpendicular to the endpoints of our edge
	      // and whose distance is not too far from the edge...
	      // Over idea: at least one of the planes (face plane + edge plane) is aligned with our edge + at a reasonable distance
	      // (also need to check the side with our edge plane!)
	      // but wait, can there really be a triangle whose plane is not aligned with the edge but still its edges are aligned?
	      // yeah that seems impossible...
	      // we check everything the edge is aligned with
	      // if it's aligned with something, then check where this thing is with respect to our edge "up" vector,
	      // if it's inbetween the two points AND

	      // NOTE: Bruteforce for now
	      // UPDATE: It turns out bruteforce is not an issue for SM64 models
	      for (let i = 0; i < this.faces.length; ++i) {
	        // Do not test the edge against its own face
	        if (i === faceId) continue;

	        const plane = this.facePlanes[i];
	        const edgePlanes = this.faceEdgePlanes[i];

	        const d0 = plane.distanceToPoint(p0);
	        const d1 = plane.distanceToPoint(p1);

	        if (Math.abs(d0) < EPS && Math.abs(d1) < EPS) {
	          let min = 0, max = 1;
	          for (let j = 0; j < edgePlanes.length && min < max; ++j) {
	            const edgePlane = edgePlanes[j];
	            const denom = delta.dot(edgePlane.normal);
	            if (denom === 0) {
	              // seam is parallel to side
	              if (edgePlane.distanceToPoint(p0) > EPS) {
	                // seam is outside the face, early out
	                max = min;
	              }
	            } else {
	              const t = -edgePlane.distanceToPoint(p0) / denom;
	              if (denom < 0) {
	                // seam points towards face, use max constraint
	                min = Math.max(min, t);
	              } else {
	                // seam points away from the face, use min constraint
	                max = Math.min(max, t);
	              }
	            }
	          }
	          edge.markAlignedSection(min, max);
	        }
	      }
	    }
	  }

	  findMisalignedSeamSections2() {
	    for (const edge of this.edges) {
	      if (!edge.isSeam) continue;

	      // We're looking for a face that is kind of aligned with our edge (delta.dot(normal)) close to 0
	      // and whose points are inside the two planes perpendicular to the endpoints of our edge
	      // and whose distance is not too far from the edge...
	      // Over idea: at least one of the planes (face plane + edge plane) is aligned with our edge + at a reasonable distance
	      // (also need to check the side with our edge plane!)
	      // but wait, can there really be a triangle whose plane is not aligned with the edge but still its edges are aligned?
	      // yeah that seems impossible...
	      // we check everything the edge is aligned with
	      // if it's aligned with something, then check where this thing is with respect to our edge "up" vector,
	      // if it's inbetween the two points AND


	      // I think I figured it out:
	      // if a triangle plane is aligned with our edge and the plane distance is not too big
	      // For each point in the face, measure its closest distance to the line (line not segment!)
	      // if at least one point is below a threshold, then: project each point onto this "threshold plane"
	      // then project this new triangle on the bounds of our segment: this is our "almost aligned section"
	      // maybe I could add a check for my special case:
	      //                                 \   |
	      //                                  \  | <- this one shouldn't be close
	      //                                   \ |
	      // ------------------------------------ <- boundary

	      const lowerDistanceThreshold = 0.001;
	      const upperDistanceThreshold = 5;
	      const lowerAngleThreshold = 0.001; // ~2.5 degrees
	      const upperAngleThreshold = 0.035; // ~15 degrees

	      edge.clearSections();
	      const { p0, p1, faceId, delta, dir } = edge;

	      // NOTE: Bruteforce for now
	      // UPDATE: It turns out bruteforce is not an issue for SM64 models
	      for (let i = 0; i < this.faces.length; ++i) {
	        // Do not test the edge against its own face
	        if (i === faceId || this.faceIsDegenerate[i]) continue;

	        const face = this.faces[i];
	        const plane = this.facePlanes[i];
	        const edgePlanes = this.faceEdgePlanes[i];

	        // seam is not aligned to face
	        const dirDotNormal = Math.abs(dir.dot(plane.normal));
	        if (dirDotNormal > upperAngleThreshold) continue;

	        const d0 = plane.distanceToPoint(p0);
	        const d1 = plane.distanceToPoint(p1);

	        // average distance from line to plane
	        const d = Math.abs(d0 + d1) * 0.5;
	        if (d > upperDistanceThreshold) continue;

	        // slice test
	        const ta = edge.relativeDistanceToPoint(face.a);
	        const tb = edge.relativeDistanceToPoint(face.b);
	        const tc = edge.relativeDistanceToPoint(face.c);
	        if (ta <= 0 && tb <= 0 && tc <= 0) continue;
	        if (ta >= 1 && tb >= 1 && tc >= 1) continue;

	        // now check if the edge is inside or adjacent to the face
	        let min = 0;
	        let max = 1;
	        let inside = true;
	        for (let j = 0; j < edgePlanes.length; ++j) {
	          const edgePlane = edgePlanes[j];

	          // edge is sort of parallel
	          if (Math.abs(dir.dot(edgePlane.normal)) <= upperAngleThreshold) {
	            // average edge distance
	            const edgeDist = (edgePlane.distanceToPoint(p0) + edgePlane.distanceToPoint(p1)) * 0.5;
	            if (edgeDist > upperDistanceThreshold) {
	              // that edge of this face is too far away
	              // --> early out with no result
	              min = max;
	              inside = false;
	              break;
	            } else if (edgeDist > lowerDistanceThreshold) {
	              // the seam is almost touching the edge of this face
	              // but it is not enough for the edge to be inside the face
	              // --> project the edge along the seam and exit
	              let t0 = ta, t1 = tb;
	              if (j === 0) { t0 = tb; t1 = tc; }
	              else if (j === 1) { t0 = tc; t1 = ta; }
	              min = Math.min(t0, t1);
	              max = Math.max(t0, t1);
	              inside = false;
	              break;
	            }
	            // the seam is either touching the edge of this face
	            // OR the seam is inside this face
	            // --> continue
	          } else {
	            // edge is not parallel find the interior bounds along the seam
	            const denom = delta.dot(edgePlane.normal);
	            const t = -edgePlane.distanceToPoint(p0) / denom;
	            if (denom < 0) {
	              // seam points towards face, use max constraint
	              min = Math.max(min, t);
	            } else {
	              // seam points away from the face, use min constraint
	              max = Math.min(max, t);
	            }
	          }
	        }
	        if (max > min) {
	          if (d <= lowerDistanceThreshold && dirDotNormal <= lowerAngleThreshold && inside) {
	            edge.markAlignedSection(min, max);
	          } else {
	            edge.markMisalignedSection(min, max);
	          }
	        }
	      }
	      edge.updateSections();
	    }
	  }

	  findFoldedEdges() {
	    for (const edge of this.edges) edge.markFold(false);

	    for (let i = 0, corner = 0; i < this.faces.length; ++i, corner += 3) {
	      const bcEdge = this.cornerToEdge[corner];
	      const caEdge = this.cornerToEdge[corner + 1];
	      const abEdge = this.cornerToEdge[corner + 2];

	      const bc = bcEdge.length;
	      const ca = caEdge.length;
	      const ab = abEdge.length;

	      let base = bc;
	      let baseId = 0;
	      if (ca > bc && ca > ab) {
	        base = ca;
	        baseId = 1;
	      } else if (ab > bc) {
	        base = ab;
	        baseId = 2;
	      }

	      const oppCornerId = this.cornerTable.oppositeCorner[corner + baseId];
	      if (oppCornerId === -1) continue;

	      const oppFaceId = Math.floor(oppCornerId / 3);

	      const normal = this.facePlanes[i].normal;
	      const oppNormal = this.facePlanes[oppFaceId].normal;
	      if (normal.dot(oppNormal) > 0.2) continue;

	      const area = this.faces[i].getArea();
	      const height = 2 * area / base;
	      if (height / base > 0.075) continue;

	      for (let k = 0; k < 3; ++k) {
	        if (k === baseId) continue;

	        const oppK = this.cornerTable.oppositeCorner[corner + k];
	        if (oppK > -1) {
	          const faceId = Math.floor(oppK / 3);

	          if (oppNormal.dot(this.facePlanes[faceId].normal) > 0.9) {
	            this.cornerToEdge[corner + k].markFold();
	            this.cornerToEdge[corner + baseId].markFold();
	          }
	        }
	      }
	    }
	  }
	}

	const tmp_ = new Vector3();

	function createTriangleMesh(vertices, indices, color, xrayColor = color, forceSolid = false, layer = 0) {
	  const geometry = new BufferGeometry();
	  geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
	  if (indices) {
	    geometry.setIndex(new Uint16BufferAttribute(indices, 1));
	  }

	  const material = new MeshBasicMaterial({
	    blending: NoBlending,
	    // side: DoubleSide,
	    // polygonOffset: true,
	    // polygonOffsetFactor: 1,
	    // polygonOffsetUnits: 100,
	    // transparent: true,
	    // opacity: 0.1,
	    color
	  });

	  const xrayMaterial = new MeshBasicMaterial({
	    blending: forceSolid ? NoBlending : AdditiveBlending,
	    depthTest: false,
	    depthWrite: false,
	    color: xrayColor
	  });

	  const mesh = new Mesh(geometry, material);
	  mesh.layers.set(layer);
	  mesh.userData.materials = [material, xrayMaterial];

	  return mesh;
	}

	function createLineMesh(vertices, indices, color, xrayColor = color, forceSolid = false, layer = 0) {
	  const geometry = new BufferGeometry();
	  geometry.setAttribute('position', new Float32BufferAttribute(vertices, 3));
	  if (indices) {
	    geometry.setIndex(new Uint16BufferAttribute(indices, 1));
	  }

	  const material = new LineBasicMaterial({
	    blending: NoBlending,
	    depthWrite: false,
	    color
	  });

	  const xrayMaterial = new LineBasicMaterial({
	    blending: forceSolid ? NoBlending : AdditiveBlending,
	    depthTest: false,
	    depthWrite: false,
	    color: xrayColor
	  });

	  const line = new LineSegments(geometry, material);
	  line.layers.set(layer);
	  line.userData.materials = [material, xrayMaterial];

	  return line;
	}

	function createEdgeSectionMesh(edges, sectionType = 0, color, xrayColor, forceSolid, layer) {
	  const vertices = [];

	  for (const edge of edges) {
	    const { p0, p1, delta } = edge;

	    const sections = sectionType === 0 ? edge.misalignedSections : edge.boundarySections;
	    const t = sections.bounds;
	    for (let i = 0; i < t.length; ++i) {
	      tmp_.copy(p0).addScaledVector(delta, t[i]).toArray(vertices, vertices.length);
	    }
	  }
	  return createLineMesh(vertices, null, color, xrayColor, forceSolid, layer);
	}

	function createRenderObjects(geometryData) {
	  const vertices = geometryData.geometry.posAttribute.values;
	  const indices = geometryData.indices;

	  const indEdges = [];
	  const indSeams = [];
	  const indFolds = [];

	  for (const edge of geometryData.edges) {
	    if (edge.isSeam) {
	      indSeams.push(edge.i0, edge.i1);
	    } else if (edge.isFold) {
	      indFolds.push(edge.i0, edge.i1);
	    }
	    indEdges.push(edge.i0, edge.i1);
	  }

	  const triangles = createTriangleMesh(vertices, indices, '#060608', '#060608', false, 1);
	  const edges = createLineMesh(vertices, indEdges, '#36373d', '#0d0d10', false, 2);
	  const seams = createLineMesh(vertices, indSeams, '#A05000', '#804000', true, 3);
	  const boundary = createEdgeSectionMesh(geometryData.edges, 1, '#008080', '#007070', true, 4);
	  const misaligned = createEdgeSectionMesh(geometryData.edges, 0, 'aqua', 'aqua', true, 5);
	  const folds = createLineMesh(vertices, indFolds, 'red', 'red', true, 6);

	  const group = new Group();
	  group.add(triangles, edges, seams, folds, boundary, misaligned);

	  return {
	    triangles,
	    edges,
	    seams,
	    folds,
	    boundary,
	    misaligned,
	    group
	  };
	}

	const RenderMode = {
	  SOLID: 0,
	  XRAY: 1
	};

	let scene, camera, renderer, controls;

	let curModelCmds = null;
	let curModel = null;
	let curRenderObjs = null;
	let renderMode = RenderMode.SOLID;

	const lastCameraPos = new Vector3();
	const lastTargetPos = new Vector3();
	let lastCameraAspect = 0;
	let lastCameraLayersMask = 0;
	let lastRenderMode = renderMode;
	let lastModelCmds = null;

	let frame;

	function setRenderMode(mode) {
	  if (renderMode === mode) return;
	  renderMode = mode;
	  updateSceneMaterials();
	}

	function updateSceneMaterials() {
	  if (!scene) return;

	  // I don't use scene.overrideMaterial here because I need a specific look
	  // material for each type of object
	  scene.traverse(node => {
	    if (node.material && node.userData.materials) {
	      const mat = node.userData.materials[renderMode];
	      if (mat) {
	        node.material = mat;
	      }
	    }
	  });
	}

	function init(canvas) {
	  scene = new Scene();
	  scene.background = new Color(0x202124);

	  camera = new PerspectiveCamera(50, 1, 4, 80000);
	  camera.position.set(4000, 2000, 0);

	  renderer = new WebGLRenderer({
	    canvas,
	    antialias: true,
	    // logarithmicDepthBuffer: true
	  });
	  renderer.sortObjects = false;
	  renderer.setPixelRatio(window.devicePixelRatio);

	  controls = new OrbitControls(camera, renderer.domElement);

	  // cube = new Mesh(
	  //   new BoxGeometry(1000, 1000, 1000),
	  //   new MeshBasicMaterial({
	  //     color: 'green',
	  //     wireframe: true
	  //   })
	  // );
	  // scene.add(cube);

	  if (curRenderObjs) {
	    scene.add(curRenderObjs.group);
	    updateSceneMaterials();
	  }
	  resetCamera();

	  level.subscribe(setModelCommands);

	  const layerStores = [faces, edges, seams, bounds, gaps, folds];
	  for (let i = 0; i < layerStores.length; ++i) {
	    const layer = i + 1;
	    layerStores[i].subscribe(enabled => enabled ? camera.layers.enable(layer) : camera.layers.disable(layer));
	  }

	  xray.subscribe(enabled => setRenderMode(enabled ? RenderMode.XRAY : RenderMode.SOLID));
	}

	function setModelCommands(modelCmds) {
	  if (modelCmds === curModelCmds) return;

	  console.log('setModelCommands ' + (modelCmds ? modelCmds.name : '-'));

	  curModelCmds = null;
	  curModel = null;
	  if (curRenderObjs) {
	    curRenderObjs.group.parent?.remove(curRenderObjs.group);
	    curRenderObjs = null;
	  }

	  if (modelCmds) {
	    curModelCmds = modelCmds;
	    curModel = createModel(curModelCmds);

	    const geometryData = new GeometryData(curModel.createGeometry());
	    geometryData.findMisalignedSeamSections2();
	    geometryData.findFoldedEdges();

	    curRenderObjs = createRenderObjects(geometryData);
	    curRenderObjs.triangles.geometry.computeBoundingSphere();
	    if (scene) {
	      scene.add(curRenderObjs.group);
	      updateSceneMaterials();
	    }
	  }

	  resetCamera();
	}

	function resetCamera() {
	  if (!(camera && controls)) return;

	  if (curRenderObjs) {
	    const { boundingSphere } = curRenderObjs.triangles.geometry;
	    camera.position.set(-1, 2, 3).setLength(boundingSphere.radius * 2.5).add(boundingSphere.center);
	    controls.target.copy(boundingSphere.center);
	  } else {
	    camera.position.set(0, 1000, -2000);
	    controls.target.setScalar(0);
	  }
	  controls.update();
	}

	function downloadObj() {
	  if (!curModel) return;
	  curModel.downloadObj();
	}

	function setSize(width, height) {
	  if (camera) {
	    camera.aspect = width / height;
	    camera.updateProjectionMatrix();
	  }
	  if (renderer) {
	    renderer.setSize(width, height);
	  }
	}

	function start() {
	  frame = requestAnimationFrame(animate);
	}

	function stop() {
	  cancelAnimationFrame(frame);
	}

	function animate(time) {
	  frame = requestAnimationFrame(animate);

	  // cube.rotation.x += dt * 0.4831;
	  // cube.rotation.y += dt * 0.2197;

	  const skipRender = (
	    camera.position.equals(lastCameraPos) &&
	    controls.target.equals(lastTargetPos) &&
	    camera.aspect === lastCameraAspect &&
	    camera.layers.mask === lastCameraLayersMask &&
	    renderMode === lastRenderMode &&
	    curModelCmds === lastModelCmds
	  );
	  if (!skipRender) {
	    renderer.render(scene, camera);

	    lastCameraPos.copy(camera.position);
	    lastTargetPos.copy(controls.target);
	    lastCameraAspect = camera.aspect;
	    lastCameraLayersMask = camera.layers.mask;
	    lastRenderMode = renderMode;
	    lastModelCmds = curModelCmds;
	  }
	}

	/* src/components/Canvas.svelte generated by Svelte v4.2.1 */

	function create_fragment$3(ctx) {
		let canvas_1;

		return {
			c() {
				canvas_1 = element("canvas");
			},
			m(target, anchor) {
				insert(target, canvas_1, anchor);
				/*canvas_1_binding*/ ctx[1](canvas_1);
			},
			p: noop,
			i: noop,
			o: noop,
			d(detaching) {
				if (detaching) {
					detach(canvas_1);
				}

				/*canvas_1_binding*/ ctx[1](null);
			}
		};
	}

	function instance$3($$self, $$props, $$invalidate) {
		let canvas;

		onMount(() => {
			init(canvas);
			viewportSize.subscribe(size => setSize(size[0], size[1]));
			start();
		});

		onDestroy(() => {
			stop();
		});

		function canvas_1_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				canvas = $$value;
				$$invalidate(0, canvas);
			});
		}

		return [canvas, canvas_1_binding];
	}

	class Canvas extends SvelteComponent {
		constructor(options) {
			super();
			init$1(this, options, instance$3, create_fragment$3, safe_not_equal, {});
		}
	}

	/* src/components/ToolbarButton.svelte generated by Svelte v4.2.1 */

	function create_fragment$2(ctx) {
		let button;
		let icon_1;
		let t0;
		let span;
		let t1;
		let button_class_value;
		let button_title_value;
		let current;
		let mounted;
		let dispose;
		icon_1 = new Icon({ props: { id: /*icon*/ ctx[1] } });

		return {
			c() {
				button = element("button");
				create_component(icon_1.$$.fragment);
				t0 = space();
				span = element("span");
				t1 = text(/*key*/ ctx[3]);
				attr(span, "class", "svelte-razanc");
				attr(button, "class", button_class_value = "" + (null_to_empty(/*active*/ ctx[0] ? "active" : "") + " svelte-razanc"));
				attr(button, "title", button_title_value = /*title*/ ctx[2] + ` [Press ${/*key*/ ctx[3]}]`);
			},
			m(target, anchor) {
				insert(target, button, anchor);
				mount_component(icon_1, button, null);
				append(button, t0);
				append(button, span);
				append(span, t1);
				current = true;

				if (!mounted) {
					dispose = listen(button, "click", function () {
						if (is_function(/*onclick*/ ctx[4])) /*onclick*/ ctx[4].apply(this, arguments);
					});

					mounted = true;
				}
			},
			p(new_ctx, [dirty]) {
				ctx = new_ctx;
				const icon_1_changes = {};
				if (dirty & /*icon*/ 2) icon_1_changes.id = /*icon*/ ctx[1];
				icon_1.$set(icon_1_changes);
				if (!current || dirty & /*key*/ 8) set_data(t1, /*key*/ ctx[3]);

				if (!current || dirty & /*active*/ 1 && button_class_value !== (button_class_value = "" + (null_to_empty(/*active*/ ctx[0] ? "active" : "") + " svelte-razanc"))) {
					attr(button, "class", button_class_value);
				}

				if (!current || dirty & /*title, key*/ 12 && button_title_value !== (button_title_value = /*title*/ ctx[2] + ` [Press ${/*key*/ ctx[3]}]`)) {
					attr(button, "title", button_title_value);
				}
			},
			i(local) {
				if (current) return;
				transition_in(icon_1.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(icon_1.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				if (detaching) {
					detach(button);
				}

				destroy_component(icon_1);
				mounted = false;
				dispose();
			}
		};
	}

	function instance$2($$self, $$props, $$invalidate) {
		let { active = false } = $$props;
		let { icon } = $$props;
		let { title } = $$props;
		let { key } = $$props;
		let { onclick } = $$props;

		$$self.$$set = $$props => {
			if ('active' in $$props) $$invalidate(0, active = $$props.active);
			if ('icon' in $$props) $$invalidate(1, icon = $$props.icon);
			if ('title' in $$props) $$invalidate(2, title = $$props.title);
			if ('key' in $$props) $$invalidate(3, key = $$props.key);
			if ('onclick' in $$props) $$invalidate(4, onclick = $$props.onclick);
		};

		return [active, icon, title, key, onclick];
	}

	class ToolbarButton extends SvelteComponent {
		constructor(options) {
			super();

			init$1(this, options, instance$2, create_fragment$2, safe_not_equal, {
				active: 0,
				icon: 1,
				title: 2,
				key: 3,
				onclick: 4
			});
		}
	}

	/* src/components/Toolbar.svelte generated by Svelte v4.2.1 */

	function create_fragment$1(ctx) {
		let div12;
		let div0;
		let toolbarbutton0;
		let t0;
		let div1;
		let toolbarbutton1;
		let t1;
		let div2;
		let t2;
		let div3;
		let toolbarbutton2;
		let t3;
		let div4;
		let toolbarbutton3;
		let t4;
		let div5;
		let toolbarbutton4;
		let t5;
		let div6;
		let toolbarbutton5;
		let t6;
		let div7;
		let toolbarbutton6;
		let t7;
		let div8;
		let toolbarbutton7;
		let t8;
		let div9;
		let t9;
		let div10;
		let toolbarbutton8;
		let t10;
		let div11;
		let toolbarbutton9;
		let current;
		let mounted;
		let dispose;

		toolbarbutton0 = new ToolbarButton({
				props: {
					title: (/*$browse*/ ctx[0] ? 'Close' : 'Open') + ' file browser',
					icon: "browse",
					key: "B",
					active: /*$browse*/ ctx[0],
					onclick: /*toggleBrowse*/ ctx[8]
				}
			});

		toolbarbutton1 = new ToolbarButton({
				props: {
					title: "Download model as .obj",
					icon: "download",
					key: "P",
					onclick: downloadObj
				}
			});

		toolbarbutton2 = new ToolbarButton({
				props: {
					title: "Toggle faces",
					icon: "faces",
					key: "1",
					active: /*$faces*/ ctx[1],
					onclick: /*toggleFaces*/ ctx[9]
				}
			});

		toolbarbutton3 = new ToolbarButton({
				props: {
					title: "Toggle edges",
					icon: "edges",
					key: "2",
					active: /*$edges*/ ctx[2],
					onclick: /*toggleEdges*/ ctx[10]
				}
			});

		toolbarbutton4 = new ToolbarButton({
				props: {
					title: "Toggle seams",
					icon: "seams",
					key: "3",
					active: /*$seams*/ ctx[3],
					onclick: /*toggleSeams*/ ctx[11]
				}
			});

		toolbarbutton5 = new ToolbarButton({
				props: {
					title: "Toggle boundary seams",
					icon: "bounds",
					key: "4",
					active: /*$bounds*/ ctx[4],
					onclick: /*toggleBounds*/ ctx[12]
				}
			});

		toolbarbutton6 = new ToolbarButton({
				props: {
					title: "Toggle misaligned seams",
					icon: "gaps",
					key: "5",
					active: /*$gaps*/ ctx[5],
					onclick: /*toggleGaps*/ ctx[13]
				}
			});

		toolbarbutton7 = new ToolbarButton({
				props: {
					title: "Toggle folded edges",
					icon: "folds",
					key: "6",
					active: /*$folds*/ ctx[6],
					onclick: /*toggleFolds*/ ctx[14]
				}
			});

		toolbarbutton8 = new ToolbarButton({
				props: {
					title: "Toggle X-ray mode",
					icon: "xray",
					key: "E",
					active: /*$xray*/ ctx[7],
					onclick: /*toggleXray*/ ctx[15]
				}
			});

		toolbarbutton9 = new ToolbarButton({
				props: {
					title: "Reset camera pose",
					icon: "camera-home",
					key: "R",
					onclick: resetCamera
				}
			});

		return {
			c() {
				div12 = element("div");
				div0 = element("div");
				create_component(toolbarbutton0.$$.fragment);
				t0 = space();
				div1 = element("div");
				create_component(toolbarbutton1.$$.fragment);
				t1 = space();
				div2 = element("div");
				t2 = space();
				div3 = element("div");
				create_component(toolbarbutton2.$$.fragment);
				t3 = space();
				div4 = element("div");
				create_component(toolbarbutton3.$$.fragment);
				t4 = space();
				div5 = element("div");
				create_component(toolbarbutton4.$$.fragment);
				t5 = space();
				div6 = element("div");
				create_component(toolbarbutton5.$$.fragment);
				t6 = space();
				div7 = element("div");
				create_component(toolbarbutton6.$$.fragment);
				t7 = space();
				div8 = element("div");
				create_component(toolbarbutton7.$$.fragment);
				t8 = space();
				div9 = element("div");
				t9 = space();
				div10 = element("div");
				create_component(toolbarbutton8.$$.fragment);
				t10 = space();
				div11 = element("div");
				create_component(toolbarbutton9.$$.fragment);
				attr(div0, "class", "slot");
				attr(div1, "class", "slot");
				attr(div2, "class", "separator svelte-1kfcpdt");
				attr(div3, "class", "slot");
				attr(div4, "class", "slot");
				attr(div5, "class", "slot");
				attr(div6, "class", "slot");
				attr(div7, "class", "slot");
				attr(div8, "class", "slot");
				attr(div9, "class", "separator svelte-1kfcpdt");
				attr(div10, "class", "slot");
				attr(div11, "class", "slot");
				attr(div12, "class", "toolbar svelte-1kfcpdt");
			},
			m(target, anchor) {
				insert(target, div12, anchor);
				append(div12, div0);
				mount_component(toolbarbutton0, div0, null);
				append(div12, t0);
				append(div12, div1);
				mount_component(toolbarbutton1, div1, null);
				append(div12, t1);
				append(div12, div2);
				append(div12, t2);
				append(div12, div3);
				mount_component(toolbarbutton2, div3, null);
				append(div12, t3);
				append(div12, div4);
				mount_component(toolbarbutton3, div4, null);
				append(div12, t4);
				append(div12, div5);
				mount_component(toolbarbutton4, div5, null);
				append(div12, t5);
				append(div12, div6);
				mount_component(toolbarbutton5, div6, null);
				append(div12, t6);
				append(div12, div7);
				mount_component(toolbarbutton6, div7, null);
				append(div12, t7);
				append(div12, div8);
				mount_component(toolbarbutton7, div8, null);
				append(div12, t8);
				append(div12, div9);
				append(div12, t9);
				append(div12, div10);
				mount_component(toolbarbutton8, div10, null);
				append(div12, t10);
				append(div12, div11);
				mount_component(toolbarbutton9, div11, null);
				current = true;

				if (!mounted) {
					dispose = listen(window, "keydown", /*onKeyDown*/ ctx[16]);
					mounted = true;
				}
			},
			p(ctx, [dirty]) {
				const toolbarbutton0_changes = {};
				if (dirty & /*$browse*/ 1) toolbarbutton0_changes.title = (/*$browse*/ ctx[0] ? 'Close' : 'Open') + ' file browser';
				if (dirty & /*$browse*/ 1) toolbarbutton0_changes.active = /*$browse*/ ctx[0];
				toolbarbutton0.$set(toolbarbutton0_changes);
				const toolbarbutton2_changes = {};
				if (dirty & /*$faces*/ 2) toolbarbutton2_changes.active = /*$faces*/ ctx[1];
				toolbarbutton2.$set(toolbarbutton2_changes);
				const toolbarbutton3_changes = {};
				if (dirty & /*$edges*/ 4) toolbarbutton3_changes.active = /*$edges*/ ctx[2];
				toolbarbutton3.$set(toolbarbutton3_changes);
				const toolbarbutton4_changes = {};
				if (dirty & /*$seams*/ 8) toolbarbutton4_changes.active = /*$seams*/ ctx[3];
				toolbarbutton4.$set(toolbarbutton4_changes);
				const toolbarbutton5_changes = {};
				if (dirty & /*$bounds*/ 16) toolbarbutton5_changes.active = /*$bounds*/ ctx[4];
				toolbarbutton5.$set(toolbarbutton5_changes);
				const toolbarbutton6_changes = {};
				if (dirty & /*$gaps*/ 32) toolbarbutton6_changes.active = /*$gaps*/ ctx[5];
				toolbarbutton6.$set(toolbarbutton6_changes);
				const toolbarbutton7_changes = {};
				if (dirty & /*$folds*/ 64) toolbarbutton7_changes.active = /*$folds*/ ctx[6];
				toolbarbutton7.$set(toolbarbutton7_changes);
				const toolbarbutton8_changes = {};
				if (dirty & /*$xray*/ 128) toolbarbutton8_changes.active = /*$xray*/ ctx[7];
				toolbarbutton8.$set(toolbarbutton8_changes);
			},
			i(local) {
				if (current) return;
				transition_in(toolbarbutton0.$$.fragment, local);
				transition_in(toolbarbutton1.$$.fragment, local);
				transition_in(toolbarbutton2.$$.fragment, local);
				transition_in(toolbarbutton3.$$.fragment, local);
				transition_in(toolbarbutton4.$$.fragment, local);
				transition_in(toolbarbutton5.$$.fragment, local);
				transition_in(toolbarbutton6.$$.fragment, local);
				transition_in(toolbarbutton7.$$.fragment, local);
				transition_in(toolbarbutton8.$$.fragment, local);
				transition_in(toolbarbutton9.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(toolbarbutton0.$$.fragment, local);
				transition_out(toolbarbutton1.$$.fragment, local);
				transition_out(toolbarbutton2.$$.fragment, local);
				transition_out(toolbarbutton3.$$.fragment, local);
				transition_out(toolbarbutton4.$$.fragment, local);
				transition_out(toolbarbutton5.$$.fragment, local);
				transition_out(toolbarbutton6.$$.fragment, local);
				transition_out(toolbarbutton7.$$.fragment, local);
				transition_out(toolbarbutton8.$$.fragment, local);
				transition_out(toolbarbutton9.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				if (detaching) {
					detach(div12);
				}

				destroy_component(toolbarbutton0);
				destroy_component(toolbarbutton1);
				destroy_component(toolbarbutton2);
				destroy_component(toolbarbutton3);
				destroy_component(toolbarbutton4);
				destroy_component(toolbarbutton5);
				destroy_component(toolbarbutton6);
				destroy_component(toolbarbutton7);
				destroy_component(toolbarbutton8);
				destroy_component(toolbarbutton9);
				mounted = false;
				dispose();
			}
		};
	}

	function instance$1($$self, $$props, $$invalidate) {
		let $browse;
		let $faces;
		let $edges;
		let $seams;
		let $bounds;
		let $gaps;
		let $folds;
		let $xray;
		component_subscribe($$self, browse, $$value => $$invalidate(0, $browse = $$value));
		component_subscribe($$self, faces, $$value => $$invalidate(1, $faces = $$value));
		component_subscribe($$self, edges, $$value => $$invalidate(2, $edges = $$value));
		component_subscribe($$self, seams, $$value => $$invalidate(3, $seams = $$value));
		component_subscribe($$self, bounds, $$value => $$invalidate(4, $bounds = $$value));
		component_subscribe($$self, gaps, $$value => $$invalidate(5, $gaps = $$value));
		component_subscribe($$self, folds, $$value => $$invalidate(6, $folds = $$value));
		component_subscribe($$self, xray, $$value => $$invalidate(7, $xray = $$value));
		const toggle = value => !value;
		const toggleBrowse = () => browse.update(toggle);
		const toggleFaces = () => faces.update(toggle);
		const toggleEdges = () => edges.update(toggle);
		const toggleSeams = () => seams.update(toggle);
		const toggleBounds = () => bounds.update(toggle);
		const toggleGaps = () => gaps.update(toggle);
		const toggleFolds = () => folds.update(toggle);
		const toggleXray = () => xray.update(toggle);

		function onKeyDown(e) {
			switch (e.code) {
				case 'KeyB':
					toggleBrowse();
					break;
				case 'Digit1':
					toggleFaces();
					break;
				case 'Digit2':
					toggleEdges();
					break;
				case 'Digit3':
					toggleSeams();
					break;
				case 'Digit4':
					toggleBounds();
					break;
				case 'Digit5':
					toggleGaps();
					break;
				case 'Digit6':
					toggleFolds();
					break;
				case 'KeyE':
					toggleXray();
					break;
				case 'KeyR':
					resetCamera();
					break;
				case 'KeyP':
					downloadObj();
					break;
			}
		}

		return [
			$browse,
			$faces,
			$edges,
			$seams,
			$bounds,
			$gaps,
			$folds,
			$xray,
			toggleBrowse,
			toggleFaces,
			toggleEdges,
			toggleSeams,
			toggleBounds,
			toggleGaps,
			toggleFolds,
			toggleXray,
			onKeyDown
		];
	}

	class Toolbar extends SvelteComponent {
		constructor(options) {
			super();
			init$1(this, options, instance$1, create_fragment$1, safe_not_equal, {});
		}
	}

	/* src/components/App.svelte generated by Svelte v4.2.1 */

	function create_fragment(ctx) {
		let div3;
		let div1;
		let treeview;
		let t0;
		let div0;
		let t1;
		let div2;
		let canvas;
		let t2;
		let toolbar;
		let div3_class_value;
		let current;
		let mounted;
		let dispose;

		treeview = new TreeView({
				props: {
					children: /*folders*/ ctx[4],
					selected: level
				}
			});

		canvas = new Canvas({});
		toolbar = new Toolbar({});

		return {
			c() {
				div3 = element("div");
				div1 = element("div");
				create_component(treeview.$$.fragment);
				t0 = space();
				div0 = element("div");
				t1 = space();
				div2 = element("div");
				create_component(canvas.$$.fragment);
				t2 = space();
				create_component(toolbar.$$.fragment);
				attr(div0, "role", "separator");
				attr(div0, "aria-orientation", "vertical");
				attr(div0, "class", "nav-resize-handle svelte-lhjc5y");
				attr(div1, "class", "nav svelte-lhjc5y");
				attr(div1, "style", /*navStyle*/ ctx[2]);
				attr(div2, "class", "viewport svelte-lhjc5y");
				attr(div3, "class", div3_class_value = "" + (null_to_empty('app' + (/*$resizing*/ ctx[3] ? ' resize' : '')) + " svelte-lhjc5y"));
			},
			m(target, anchor) {
				insert(target, div3, anchor);
				append(div3, div1);
				mount_component(treeview, div1, null);
				append(div1, t0);
				append(div1, div0);
				/*div1_binding*/ ctx[9](div1);
				append(div3, t1);
				append(div3, div2);
				mount_component(canvas, div2, null);
				append(div2, t2);
				mount_component(toolbar, div2, null);
				/*div2_binding*/ ctx[10](div2);
				current = true;

				if (!mounted) {
					dispose = [
						listen(window, "resize", /*onResize*/ ctx[5]),
						listen(div0, "mousedown", /*onMouseDown*/ ctx[6])
					];

					mounted = true;
				}
			},
			p(ctx, [dirty]) {
				if (!current || dirty & /*navStyle*/ 4) {
					attr(div1, "style", /*navStyle*/ ctx[2]);
				}

				if (!current || dirty & /*$resizing*/ 8 && div3_class_value !== (div3_class_value = "" + (null_to_empty('app' + (/*$resizing*/ ctx[3] ? ' resize' : '')) + " svelte-lhjc5y"))) {
					attr(div3, "class", div3_class_value);
				}
			},
			i(local) {
				if (current) return;
				transition_in(treeview.$$.fragment, local);
				transition_in(canvas.$$.fragment, local);
				transition_in(toolbar.$$.fragment, local);
				current = true;
			},
			o(local) {
				transition_out(treeview.$$.fragment, local);
				transition_out(canvas.$$.fragment, local);
				transition_out(toolbar.$$.fragment, local);
				current = false;
			},
			d(detaching) {
				if (detaching) {
					detach(div3);
				}

				destroy_component(treeview);
				/*div1_binding*/ ctx[9](null);
				destroy_component(canvas);
				destroy_component(toolbar);
				/*div2_binding*/ ctx[10](null);
				mounted = false;
				run_all(dispose);
			}
		};
	}

	function instance($$self, $$props, $$invalidate) {
		let navStyle;
		let $navWidth;
		let $browse;
		let $resizing;
		component_subscribe($$self, navWidth, $$value => $$invalidate(7, $navWidth = $$value));
		component_subscribe($$self, browse, $$value => $$invalidate(8, $browse = $$value));
		component_subscribe($$self, resizing, $$value => $$invalidate(3, $resizing = $$value));

		const folders = Object.entries(levels).map(entry => ({
			label: entry[0],
			icon: 'folder',
			open: false,
			children: entry[1].map(fn => ({ label: fn.name, icon: 'file', data: fn }))
		}));

		level.update(() => levels.lll[0]);
		let nav;
		let viewport;

		function onResize() {
			if (!viewport) return;
			const width = viewport.clientWidth;
			const height = viewport.clientHeight;
			viewportSize.set([width, height]);
		}

		let xOnDown = 0;
		let navWidthOnDown = 0;

		function onMouseDown(e) {
			xOnDown = e.clientX;
			navWidthOnDown = nav.clientWidth;
			resizing.set(true);
			document.addEventListener('mousemove', onMouseMove);
			document.addEventListener('mouseup', onMouseUp);
		}

		function onMouseMove(e) {
			const deltaWidth = e.clientX - xOnDown;
			navWidth.set(Math.max(navWidthOnDown + deltaWidth, 0));
			onResize();
		}

		function onMouseUp(e) {
			resizing.set(false);
			document.removeEventListener('mousemove', onMouseMove);
			document.removeEventListener('mouseup', onMouseUp);
		}

		browse.subscribe(() => {
			tick().then(onResize);
		});

		onMount(() => {
			onResize();
			navWidth.set(nav.clientWidth);
		});

		function div1_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				nav = $$value;
				$$invalidate(0, nav);
			});
		}

		function div2_binding($$value) {
			binding_callbacks[$$value ? 'unshift' : 'push'](() => {
				viewport = $$value;
				$$invalidate(1, viewport);
			});
		}

		$$self.$$.update = () => {
			if ($$self.$$.dirty & /*$browse, $navWidth*/ 384) {
				$$invalidate(2, navStyle = `display: ${$browse ? 'block' : 'none'}; width: ${$navWidth >= 0 ? $navWidth + 'px' : '20rem'};`);
			}
		};

		return [
			nav,
			viewport,
			navStyle,
			$resizing,
			folders,
			onResize,
			onMouseDown,
			$navWidth,
			$browse,
			div1_binding,
			div2_binding
		];
	}

	class App extends SvelteComponent {
		constructor(options) {
			super();
			init$1(this, options, instance, create_fragment, safe_not_equal, {});
		}
	}

	new App({
	  target: document.body
	});

})();
